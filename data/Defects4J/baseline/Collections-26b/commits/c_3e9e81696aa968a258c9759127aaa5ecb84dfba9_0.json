{"sha": "3e9e81696aa968a258c9759127aaa5ecb84dfba9", "log": "Javadoc and code tidying   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.35 2003/09/20 11:26:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.36 2003/09/20 12:03:52 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.35 $ $Date: 2003/09/20 11:26:32 $\n+ * @version $Revision: 1.36 $ $Date: 2003/09/20 12:03:52 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n     // Type safe getters\n     //-------------------------------------------------------------------------\n     /**\n-     *  Synonym for {@link Map#get(Object)}.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return null if the map is null; or the result of \n-     *     <Code>map.get(key)</Code>\n-     */\n-    public static Object getObject( Map map, Object key ) {\n-        if ( map != null ) {\n-            return map.get( key );\n+     * Gets from a Map in a null-safe manner.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map, <code>null</code> if null map input\n+     */\n+    public static Object getObject(final Map map, final Object key) {\n+        if (map != null) {\n+            return map.get(key);\n         }\n         return null;\n     }\n \n     /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a string.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  null if the map is null; null if the value mapped by that\n-     *    key is null; or the <Code>toString()</Code> \n-     *     result of the value for that key\n-     */\n-    public static String getString( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null ) {\n+     * Gets a String from a Map in a null-safe manner.\n+     * <p>\n+     * The String is obtained via <code>toString</code>.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a String, <code>null</code> if null map input\n+     */\n+    public static String getString(final Map map, final Object key) {\n+        if (map != null) {\n+            Object answer = map.get(key);\n+            if (answer != null) {\n                 return answer.toString();\n             }\n         }\n     }\n \n     /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a {@link Boolean}.  If the map is null, this method returns null.\n-     *  If the value mapped by the given key is a \n-     *  {@link Boolean}, then it is returned as-is.  Otherwise, if the value\n-     *  is a string, then if that string ignoring case equals \"true\", then\n-     *  a true {@link Boolean} is returned.  Any other string value will\n-     *  result in a false {@link Boolean} being returned.  OR, if the value\n-     *  is a {@link Number}, and that {@link Number} is 0, then a false\n-     *  {@link Boolean} is returned.  Any other {@link Number} value results\n-     *  in a true {@link Boolean} being returned.<P>\n-     *\n-     *  Any value that is not a {@link Boolean}, {@link String} or \n-     *  {@link Number} results in null being returned.<P>\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Boolean} or null\n-     */\n-    public static Boolean getBoolean( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null ) {\n-                if ( answer instanceof Boolean ) {\n+     * Gets a Boolean from a Map in a null-safe manner.\n+     * <p>\n+     * If the value is a <code>Boolean</code> it is returned directly.\n+     * If the value is a <code>String</code> and it equals 'true' ignoring case\n+     * then <code>true</code> is returned, otherwise <code>false</code>.\n+     * If the value is a <code>Number</code> an integer zero value returns\n+     * <code>false</code> and non-zero returns <code>true</code>.\n+     * Otherwise, <code>null</code> is returned.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Boolean, <code>null</code> if null map input\n+     */\n+    public static Boolean getBoolean(final Map map, final Object key) {\n+        if (map != null) {\n+            Object answer = map.get(key);\n+            if (answer != null) {\n+                if (answer instanceof Boolean) {\n                     return (Boolean) answer;\n-                }\n-                else\n-                if ( answer instanceof String ) {\n-                    return new Boolean( (String) answer );\n-                }\n-                else\n-                if ( answer instanceof Number ) {\n+                    \n+                } else if (answer instanceof String) {\n+                    return new Boolean((String) answer);\n+                    \n+                } else if (answer instanceof Number) {\n                     Number n = (Number) answer;\n-                    return ( n.intValue() != 0 ) ? Boolean.TRUE : Boolean.FALSE;\n+                    return (n.intValue() != 0) ? Boolean.TRUE : Boolean.FALSE;\n                 }\n             }\n         }\n     }\n \n     /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a {@link Number}.  If the map is null, this method returns null.\n-     *  Otherwise, if the key maps to a {@link Number}, then that number\n-     *  is returned as-is.  Otherwise, if the key maps to a {@link String},\n-     *  that string is parsed into a number using the system default\n-     *  {@link NumberFormat}.<P>\n-     *\n-     *  If the value is not a {@link Number} or a {@link String}, or if\n-     *  the value is a {@link String} that cannot be parsed into a \n-     *  {@link Number}, then null is returned.<P>\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Number} or null\n-     */\n-    public static Number getNumber( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null ) {\n-                if ( answer instanceof Number ) {\n+     * Gets a Number from a Map in a null-safe manner.\n+     * <p>\n+     * If the value is a <code>Number</code> it is returned directly.\n+     * If the value is a <code>String</code> it is converted using\n+     * {@link NumberFormat#parse(String)} on the system default formatter\n+     * returning <code>null</code> if the conversion fails.\n+     * Otherwise, <code>null</code> is returned.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Number, <code>null</code> if null map input\n+     */\n+    public static Number getNumber(final Map map, final Object key) {\n+        if (map != null) {\n+            Object answer = map.get(key);\n+            if (answer != null) {\n+                if (answer instanceof Number) {\n                     return (Number) answer;\n-                }\n-                else\n-                if ( answer instanceof String ) {\n+                    \n+                } else if (answer instanceof String) {\n                     try {\n                         String text = (String) answer;\n-                        return NumberFormat.getInstance().parse( text );\n-                    }\n-                    catch (ParseException e) {\n-                        logInfo( e );\n+                        return NumberFormat.getInstance().parse(text);\n+                        \n+                    } catch (ParseException e) {\n+                        logInfo(e);\n                     }\n                 }\n             }\n     }\n \n     /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a {@link Byte}.  First, {@link #getNumber(Map,Object)} is invoked.\n-     *  If the result is null, then null is returned.  Otherwise, the \n-     *  byte value of the resulting {@link Number} is returned.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Byte} or null\n-     */\n-    public static Byte getByte( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n+     * Gets a Byte from a Map in a null-safe manner.\n+     * <p>\n+     * The Byte is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Byte, <code>null</code> if null map input\n+     */\n+    public static Byte getByte(final Map map, final Object key) {\n+        Number answer = getNumber(map, key);\n+        if (answer == null) {\n             return null;\n-        }\n-        else\n-        if ( answer instanceof Byte ) {\n+        } else if (answer instanceof Byte) {\n             return (Byte) answer;\n         }\n-        return new Byte( answer.byteValue() );\n-    }\n-\n-    /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a {@link Short}.  First, {@link #getNumber(Map,Object)} is invoked.\n-     *  If the result is null, then null is returned.  Otherwise, the \n-     *  short value of the resulting {@link Number} is returned.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Short} or null\n-     */\n-    public static Short getShort( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n+        return new Byte(answer.byteValue());\n+    }\n+\n+    /**\n+     * Gets a Short from a Map in a null-safe manner.\n+     * <p>\n+     * The Short is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Short, <code>null</code> if null map input\n+     */\n+    public static Short getShort(final Map map, final Object key) {\n+        Number answer = getNumber(map, key);\n+        if (answer == null) {\n             return null;\n-        }\n-        else\n-        if ( answer instanceof Short ) {\n+        } else if (answer instanceof Short) {\n             return (Short) answer;\n         }\n-        return new Short( answer.shortValue() );\n-    }\n-\n-    /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  an {@link Integer}.  First, {@link #getNumber(Map,Object)} is invoked.\n-     *  If the result is null, then null is returned.  Otherwise, the \n-     *  integer value of the resulting {@link Number} is returned.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  an {@link Integer} or null\n-     */\n-    public static Integer getInteger( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n+        return new Short(answer.shortValue());\n+    }\n+\n+    /**\n+     * Gets a Integer from a Map in a null-safe manner.\n+     * <p>\n+     * The Integer is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Integer, <code>null</code> if null map input\n+     */\n+    public static Integer getInteger(final Map map, final Object key) {\n+        Number answer = getNumber(map, key);\n+        if (answer == null) {\n             return null;\n-        }\n-        else\n-        if ( answer instanceof Integer ) {\n+        } else if (answer instanceof Integer) {\n             return (Integer) answer;\n         }\n-        return new Integer( answer.intValue() );\n-    }\n-\n-    /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a {@link Long}.  First, {@link #getNumber(Map,Object)} is invoked.\n-     *  If the result is null, then null is returned.  Otherwise, the \n-     *  long value of the resulting {@link Number} is returned.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Long} or null\n-     */\n-    public static Long getLong( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n+        return new Integer(answer.intValue());\n+    }\n+\n+    /**\n+     * Gets a Long from a Map in a null-safe manner.\n+     * <p>\n+     * The Long is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Long, <code>null</code> if null map input\n+     */\n+    public static Long getLong(final Map map, final Object key) {\n+        Number answer = getNumber(map, key);\n+        if (answer == null) {\n             return null;\n-        }\n-        else\n-        if ( answer instanceof Long ) {\n+        } else if (answer instanceof Long) {\n             return (Long) answer;\n         }\n-        return new Long( answer.longValue() );\n-    }\n-\n-    /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a {@link Float}.  First, {@link #getNumber(Map,Object)} is invoked.\n-     *  If the result is null, then null is returned.  Otherwise, the \n-     *  float value of the resulting {@link Number} is returned.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Float} or null\n-     */\n-    public static Float getFloat( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n+        return new Long(answer.longValue());\n+    }\n+\n+    /**\n+     * Gets a Float from a Map in a null-safe manner.\n+     * <p>\n+     * The Float is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Float, <code>null</code> if null map input\n+     */\n+    public static Float getFloat(final Map map, final Object key) {\n+        Number answer = getNumber(map, key);\n+        if (answer == null) {\n             return null;\n-        }\n-        else\n-        if ( answer instanceof Float ) {\n+        } else if (answer instanceof Float) {\n             return (Float) answer;\n         }\n-        return new Float( answer.floatValue() );\n-    }\n-\n-    /**\n-     *  Looks up the given key in the given map, converting the result into\n-     *  a {@link Double}.  First, {@link #getNumber(Map,Object)} is invoked.\n-     *  If the result is null, then null is returned.  Otherwise, the \n-     *  double value of the resulting {@link Number} is returned.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Double} or null\n-     */\n-    public static Double getDouble( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n+        return new Float(answer.floatValue());\n+    }\n+\n+    /**\n+     * Gets a Double from a Map in a null-safe manner.\n+     * <p>\n+     * The Double is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Double, <code>null</code> if null map input\n+     */\n+    public static Double getDouble(final Map map, final Object key) {\n+        Number answer = getNumber(map, key);\n+        if (answer == null) {\n             return null;\n-        }\n-        else\n-        if ( answer instanceof Double ) {\n+        } else if (answer instanceof Double) {\n             return (Double) answer;\n         }\n-        return new Double( answer.doubleValue() );\n-    }\n-\n-    /**\n-     *  Looks up the given key in the given map, returning another map.\n-     *  If the given map is null or if the given key doesn't map to another\n-     *  map, then this method returns null.  Otherwise the mapped map is\n-     *  returned.\n-     *\n-     *  @param map  the map whose value to look up\n-     *  @param key  the key whose value to look up in that map\n-     *  @return  a {@link Map} or null\n-     */\n-    public static Map getMap( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null && answer instanceof Map ) {\n+        return new Double(answer.doubleValue());\n+    }\n+\n+    /**\n+     * Gets a Map from a Map in a null-safe manner.\n+     * <p>\n+     * If the value returned from the specified map is not a Map then\n+     * <code>null</code> is returned.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Map, <code>null</code> if null map input\n+     */\n+    public static Map getMap(final Map map, final Object key) {\n+        if (map != null) {\n+            Object answer = map.get(key);\n+            if (answer != null && answer instanceof Map) {\n                 return (Map) answer;\n             }\n         }", "timestamp": 1064059432, "metainfo": ""}