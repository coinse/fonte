{"sha": "a9bee7354a578d8b23e38801d1f7bfc2e819b235", "log": "Add access method for primitive types from Ashwin S   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.40 2003/12/03 11:37:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.41 2003/12/11 23:45:02 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.40 $ $Date: 2003/12/03 11:37:44 $\n+ * @version $Revision: 1.41 $ $Date: 2003/12/11 23:45:02 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n  * @author Arun Mammen Thomas\n  * @author Janek Bogucki\n  * @author Max Rydahl Andersen\n+ * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  */\n public class MapUtils {\n     \n             answer = defaultValue;\n         }\n         return answer;\n+    }\n+    \n+\n+    // Type safe primitive getters\n+    //-------------------------------------------------------------------------\n+    /**\n+     * Gets a boolean from a Map in a null-safe manner.\n+     * <p>\n+     * If the value is a <code>Boolean</code> its value is returned.\n+     * If the value is a <code>String</code> and it equals 'true' ignoring case\n+     * then <code>true</code> is returned, otherwise <code>false</code>.\n+     * If the value is a <code>Number</code> an integer zero value returns\n+     * <code>false</code> and non-zero returns <code>true</code>.\n+     * Otherwise, <code>false</code> is returned.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a Boolean, <code>false</code> if null map input\n+     */\n+    public static boolean getBooleanValue(final Map map, final Object key) {\n+        Boolean booleanObject = getBoolean(map, key);\n+        if (booleanObject == null) {\n+            return false;\n+        }\n+        return booleanObject.booleanValue();\n+    }\n+\n+    /**\n+     * Gets a byte from a Map in a null-safe manner.\n+     * <p>\n+     * The byte is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a byte, <code>0</code> if null map input\n+     */\n+    public static byte getByteValue(final Map map, final Object key) {\n+        Byte byteObject = getByte(map, key);\n+        if (byteObject == null) {\n+            return 0;\n+        }\n+        return byteObject.byteValue();\n+    }\n+\n+    /**\n+     * Gets a short from a Map in a null-safe manner.\n+     * <p>\n+     * The short is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a short, <code>0</code> if null map input\n+     */\n+    public static short getShortValue(final Map map, final Object key) {\n+        Short shortObject = getShort(map, key);\n+        if (shortObject == null) {\n+            return 0;\n+        }\n+        return shortObject.shortValue();\n+    }\n+\n+    /**\n+     * Gets an int from a Map in a null-safe manner.\n+     * <p>\n+     * The int is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as an int, <code>0</code> if null map input\n+     */\n+    public static int getIntValue(final Map map, final Object key) {\n+        Integer integerObject = getInteger(map, key);\n+        if (integerObject == null) {\n+            return 0;\n+        }\n+        return integerObject.intValue();\n+    }\n+\n+    /**\n+     * Gets a long from a Map in a null-safe manner.\n+     * <p>\n+     * The long is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a long, <code>0L</code> if null map input\n+     */\n+    public static long getLongValue(final Map map, final Object key) {\n+        Long longObject = getLong(map, key);\n+        if (longObject == null) {\n+            return 0L;\n+        }\n+        return longObject.longValue();\n+    }\n+\n+    /**\n+     * Gets a float from a Map in a null-safe manner.\n+     * <p>\n+     * The float is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a float, <code>0.0F</code> if null map input\n+     */\n+    public static float getFloatValue(final Map map, final Object key) {\n+        Float floatObject = getFloat(map, key);\n+        if (floatObject == null) {\n+            return 0f;\n+        }\n+        return floatObject.floatValue();\n+    }\n+\n+    /**\n+     * Gets a double from a Map in a null-safe manner.\n+     * <p>\n+     * The double is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @return the value in the Map as a double, <code>0.0</code> if null map input\n+     */\n+    public static double getDoubleValue(final Map map, final Object key) {\n+        Double doubleObject = getDouble(map, key);\n+        if (doubleObject == null) {\n+            return 0d;\n+        }\n+        return doubleObject.doubleValue();\n+    }\n+\n+    // Type safe primitive getters with default values\n+    //-------------------------------------------------------------------------\n+    /**\n+     * Gets a boolean from a Map in a null-safe manner,\n+     * using the default value if the the conversion fails.\n+     * <p>\n+     * If the value is a <code>Boolean</code> its value is returned.\n+     * If the value is a <code>String</code> and it equals 'true' ignoring case\n+     * then <code>true</code> is returned, otherwise <code>false</code>.\n+     * If the value is a <code>Number</code> an integer zero value returns\n+     * <code>false</code> and non-zero returns <code>true</code>.\n+     * Otherwise, <code>defaultValue</code> is returned.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @param defaultValue  return if the value is null or if the\n+     *     conversion fails\n+     * @return the value in the Map as a Boolean, <code>defaultValue</code> if null map input\n+     */\n+    public static boolean getBooleanValue(final Map map, final Object key, boolean defaultValue) {\n+        Boolean booleanObject = getBoolean(map, key);\n+        if (booleanObject == null) {\n+            return defaultValue;\n+        }\n+        return booleanObject.booleanValue();\n+    }\n+\n+    /**\n+     * Gets a byte from a Map in a null-safe manner,\n+     * using the default value if the the conversion fails.     \n+     * <p>\n+     * The byte is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @param defaultValue  return if the value is null or if the\n+     *     conversion fails\n+     * @return the value in the Map as a byte, <code>defaultValue</code> if null map input\n+     */\n+    public static byte getByteValue(final Map map, final Object key, byte defaultValue) {\n+        Byte byteObject = getByte(map, key);\n+        if (byteObject == null) {\n+            return defaultValue;\n+        }\n+        return byteObject.byteValue();\n+    }\n+\n+    /**\n+     * Gets a short from a Map in a null-safe manner,\n+     * using the default value if the the conversion fails.     \n+     * <p>\n+     * The short is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @param defaultValue  return if the value is null or if the\n+     *     conversion fails\n+     * @return the value in the Map as a short, <code>defaultValue</code> if null map input\n+     */\n+    public static short getShortValue(final Map map, final Object key, short defaultValue) {\n+        Short shortObject = getShort(map, key);\n+        if (shortObject == null) {\n+            return defaultValue;\n+        }\n+        return shortObject.shortValue();\n+    }\n+\n+    /**\n+     * Gets an int from a Map in a null-safe manner,\n+     * using the default value if the the conversion fails.     \n+     * <p>\n+     * The int is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @param defaultValue  return if the value is null or if the\n+     *     conversion fails\n+     * @return the value in the Map as an int, <code>defaultValue</code> if null map input\n+     */\n+    public static int getIntValue(final Map map, final Object key, int defaultValue) {\n+        Integer integerObject = getInteger(map, key);\n+        if (integerObject == null) {\n+            return defaultValue;\n+        }\n+        return integerObject.intValue();\n+    }\n+\n+    /**\n+     * Gets a long from a Map in a null-safe manner,\n+     * using the default value if the the conversion fails.     \n+     * <p>\n+     * The long is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @param defaultValue  return if the value is null or if the\n+     *     conversion fails\n+     * @return the value in the Map as a long, <code>defaultValue</code> if null map input\n+     */\n+    public static long getLongValue(final Map map, final Object key, long defaultValue) {\n+        Long longObject = getLong(map, key);\n+        if (longObject == null) {\n+            return defaultValue;\n+        }\n+        return longObject.longValue();\n+    }\n+\n+    /**\n+     * Gets a float from a Map in a null-safe manner,\n+     * using the default value if the the conversion fails.     \n+     * <p>\n+     * The float is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @param defaultValue  return if the value is null or if the\n+     *     conversion fails\n+     * @return the value in the Map as a float, <code>defaultValue</code> if null map input\n+     */\n+    public static float getFloatValue(final Map map, final Object key, float defaultValue) {\n+        Float floatObject = getFloat(map, key);\n+        if (floatObject == null) {\n+            return defaultValue;\n+        }\n+        return floatObject.floatValue();\n+    }\n+\n+    /**\n+     * Gets a double from a Map in a null-safe manner,\n+     * using the default value if the the conversion fails.     \n+     * <p>\n+     * The double is obtained from the results of {@link #getNumber(Map,Object)}.\n+     *\n+     * @param map  the map to use\n+     * @param key  the key to look up\n+     * @param defaultValue  return if the value is null or if the\n+     *     conversion fails\n+     * @return the value in the Map as a double, <code>defaultValue</code> if null map input\n+     */\n+    public static double getDoubleValue(final Map map, final Object key, double defaultValue) {\n+        Double doubleObject = getDouble(map, key);\n+        if (doubleObject == null) {\n+            return defaultValue;\n+        }\n+        return doubleObject.doubleValue();\n     }\n \n     // Conversion methods", "timestamp": 1071186302, "metainfo": ""}