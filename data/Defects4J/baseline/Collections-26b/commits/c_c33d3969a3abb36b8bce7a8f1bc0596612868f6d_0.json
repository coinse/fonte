{"sha": "c33d3969a3abb36b8bce7a8f1bc0596612868f6d", "log": "Add more FluentIterable tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/FluentIterableTest.java\n+++ b/src/test/java/org/apache/commons/collections4/FluentIterableTest.java\n \n     // -----------------------------------------------------------------------\n     @Test\n-    public void allMatch() {\n-        assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));\n-        assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));\n-        assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));\n-\n-        try {\n-            FluentIterable.of(iterableEven).allMatch(null);\n-            fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException npe) {\n-            // expected\n-        }\n-    }\n-\n-    @Test\n-    public void anyMatch() {\n-        assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));\n-        assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));\n-        assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));\n-\n-        try {\n-            FluentIterable.of(iterableEven).anyMatch(null);\n-            fail(\"expecting NullPointerException\");\n-        } catch (NullPointerException npe) {\n-            // expected\n-        }\n+    public void appendElements() {\n+        FluentIterable<Integer> it = FluentIterable.of(iterableA).append(10, 20, 30);\n+        assertEquals(IterableUtils.size(iterableA) + 3, IterableUtils.size(it));\n+        assertTrue(IterableUtils.contains(it, 1));\n+        assertTrue(IterableUtils.contains(it, 10));\n+        assertTrue(IterableUtils.contains(it, 20));\n+        assertTrue(IterableUtils.contains(it, 30));\n+        assertFalse(IterableUtils.contains(it, 40));\n+\n+        FluentIterable<Integer> empty = FluentIterable.of(emptyIterable).append();\n+        assertTrue(IterableUtils.isEmpty(empty));\n+    }\n+\n+    @Test\n+    public void appendIterable() {\n+        List<Integer> listB = Arrays.asList(10, 20, 30);\n+        FluentIterable<Integer> it = FluentIterable.of(iterableA).append(listB);\n+        assertEquals(IterableUtils.size(iterableA) + listB.size(), IterableUtils.size(it));\n+        assertTrue(IterableUtils.contains(it, 1));\n+        assertTrue(IterableUtils.contains(it, 10));\n+        assertTrue(IterableUtils.contains(it, 20));\n+        assertTrue(IterableUtils.contains(it, 30));\n+        assertFalse(IterableUtils.contains(it, 40));\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void filter() {\n+        Predicate<Integer> smallerThan3 = new Predicate<Integer>() {\n+            @Override\n+            public boolean evaluate(Integer object) {\n+                return object.intValue() < 3;\n+            }\n+        };\n+        List<Integer> result = FluentIterable.of(iterableA).filter(smallerThan3).toList();\n+        assertEquals(3, result.size());\n+        assertEquals(Arrays.asList(1, 2, 2), result);\n+\n+        // empty iterable\n+        result = FluentIterable.of(emptyIterable).filter(smallerThan3).toList();\n+        assertEquals(0, result.size());\n+\n+        try {\n+            FluentIterable.of(iterableA).filter(null).toList();\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void limit() {\n+        List<Integer> result = FluentIterable.of(iterableA).limit(3).toList();\n+        assertEquals(3, result.size());\n+        assertEquals(Arrays.asList(1, 2, 2), result);\n+\n+        // limit larger than input\n+        result = FluentIterable.of(iterableA).limit(100).toList();\n+        List<Integer> expected = IterableUtils.toList(iterableA);\n+        assertEquals(expected.size(), result.size());\n+        assertEquals(expected, result);\n+\n+        // limit is 0\n+        result = FluentIterable.of(iterableA).limit(0).toList();\n+        assertEquals(0, result.size());\n+\n+        // empty iterable\n+        result = FluentIterable.of(emptyIterable).limit(3).toList();\n+        assertEquals(0, result.size());\n+\n+        try {\n+            FluentIterable.of(iterableA).limit(-2).toList();\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void reverse() {\n+        List<Integer> result = FluentIterable.of(iterableA).reverse().toList();\n+        List<Integer> expected = IterableUtils.toList(iterableA);\n+        Collections.reverse(expected);\n+        assertEquals(expected, result);\n+\n+        // empty iterable\n+        result = FluentIterable.of(emptyIterable).reverse().toList();\n+        assertEquals(0, result.size());\n+    }\n+\n+    @Test\n+    public void skip() {\n+        List<Integer> result = FluentIterable.of(iterableA).skip(4).toList();\n+        assertEquals(6, result.size());\n+        assertEquals(Arrays.asList(3, 3, 4, 4, 4, 4), result);\n+\n+        // skip larger than input\n+        result = FluentIterable.of(iterableA).skip(100).toList();\n+        assertEquals(0, result.size());\n+\n+        // skip 0 elements\n+        result = FluentIterable.of(iterableA).skip(0).toList();\n+        List<Integer> expected = IterableUtils.toList(iterableA);\n+        assertEquals(expected.size(), result.size());\n+        assertEquals(expected, result);\n+\n+        // empty iterable\n+        result = FluentIterable.of(emptyIterable).skip(3).toList();\n+        assertEquals(0, result.size());\n+\n+        try {\n+            FluentIterable.of(iterableA).skip(-4).toList();\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void transform() {\n+        Transformer<Integer, Integer> squared = new Transformer<Integer, Integer>() {\n+            @Override\n+            public Integer transform(Integer object) {\n+                return object * object;\n+            }\n+        };\n+        List<Integer> result = FluentIterable.of(iterableA).transform(squared).toList();\n+        assertEquals(10, result.size());\n+        assertEquals(Arrays.asList(1, 4, 4, 9, 9, 9, 16, 16, 16, 16), result);\n+\n+        // empty iterable\n+        result = FluentIterable.of(emptyIterable).transform(squared).toList();\n+        assertEquals(0, result.size());\n+\n+        try {\n+            FluentIterable.of(iterableA).transform(null).toList();\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void unique() {\n+        List<Integer> result = FluentIterable.of(iterableA).unique().toList();\n+        assertEquals(4, result.size());\n+        assertEquals(Arrays.asList(1, 2, 3, 4), result);\n+\n+        // empty iterable\n+        result = FluentIterable.of(emptyIterable).unique().toList();\n+        assertEquals(0, result.size());\n+    }\n+\n+    @Test\n+    public void allMatch() {\n+        assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));\n+        assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));\n+        assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));\n+\n+        try {\n+            FluentIterable.of(iterableEven).allMatch(null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void anyMatch() {\n+        assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));\n+        assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));\n+        assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));\n+\n+        try {\n+            FluentIterable.of(iterableEven).anyMatch(null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n     public void isEmpty() {\n         assertTrue(FluentIterable.of(emptyIterable).isEmpty());\n         assertFalse(FluentIterable.of(iterableOdd).isEmpty());\n     }\n \n     @Test\n+    public void copyInto() {\n+        List<Integer> result = new ArrayList<Integer>();\n+        FluentIterable.of(iterableA).copyInto(result);\n+\n+        List<Integer> expected = IterableUtils.toList(iterableA);\n+        assertEquals(expected.size(), result.size());\n+        assertEquals(expected, result);\n+\n+        result = new ArrayList<Integer>();\n+        result.add(10);\n+        result.add(9);\n+        result.add(8);\n+        FluentIterable.of(iterableA).copyInto(result);\n+\n+        expected = new ArrayList<Integer>();\n+        expected.addAll(Arrays.asList(10, 9, 8));\n+        expected.addAll(IterableUtils.toList(iterableA));\n+        assertEquals(expected.size(), result.size());\n+        assertEquals(expected, result);\n+\n+        try {\n+            FluentIterable.of(iterableA).copyInto(null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n     public void get() {\n         assertEquals(2, FluentIterable.of(iterableEven).get(0).intValue());\n ", "timestamp": 1433497264, "metainfo": ""}