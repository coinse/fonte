{"sha": "266f67e232635a2da4f642f43473f9acd92a182f", "log": "Simplify code in iterator remove to avoid incorrect ConcurrentModificationException bug 34690, from Guilhem Lavaux at Kaffe  ", "commit": "\n--- a/src/java/org/apache/commons/collections/FastArrayList.java\n+++ b/src/java/org/apache/commons/collections/FastArrayList.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n             }\n             get().remove(lastReturnedIndex);\n             expected = list;\n-            iter = get().listIterator(previousIndex());\n+            iter = get().listIterator(lastReturnedIndex);\n             lastReturnedIndex = -1;\n         }\n \n--- a/src/test/org/apache/commons/collections/TestFastArrayList.java\n+++ b/src/test/org/apache/commons/collections/TestFastArrayList.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n package org.apache.commons.collections;\n \n import java.util.ArrayList;\n+import java.util.ConcurrentModificationException;\n import java.util.List;\n+import java.util.ListIterator;\n \n import junit.framework.Test;\n \n         return (fal);\n     }\n \n+    public void testConcurrentModification_alwaysFast() {\n+        FastArrayList list = new FastArrayList();\n+        list.setFast(true);\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        ListIterator iter = list.listIterator();\n+        assertEquals(\"a\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        iter.remove();  // checking for no ConcurrentModificationException\n+        assertEquals(\"c\", iter.next());\n+        assertEquals(false, iter.hasNext());\n+        assertEquals(\"c\", iter.previous());\n+        assertEquals(\"a\", iter.previous());\n+        assertEquals(false, iter.hasPrevious());\n+    }\n+\n+    public void testConcurrentModification_alwaysFastModError() {\n+        FastArrayList list = new FastArrayList();\n+        list.setFast(true);\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        ListIterator iter = list.listIterator();\n+        assertEquals(\"a\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        list.remove(1);\n+        try {\n+            iter.remove();\n+        } catch (ConcurrentModificationException ex) {\n+            // expected\n+        }\n+        // iterator state now invalid\n+    }\n+\n+    public void testConcurrentModification_delayedFast() {\n+        FastArrayList list = new FastArrayList();\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        ListIterator iter = list.listIterator();\n+        assertEquals(\"a\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        list.setFast(true);\n+        iter.remove();  // checking for no ConcurrentModificationException\n+        assertEquals(\"c\", iter.next());\n+        assertEquals(false, iter.hasNext());\n+        assertEquals(\"c\", iter.previous());\n+        assertEquals(\"a\", iter.previous());\n+        assertEquals(false, iter.hasPrevious());\n+    }\n+\n+    public void testConcurrentModification_delayedFastModError() {\n+        FastArrayList list = new FastArrayList();\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        ListIterator iter = list.listIterator();\n+        assertEquals(\"a\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        list.setFast(true);\n+        list.remove(1);\n+        try {\n+            iter.remove();\n+        } catch (ConcurrentModificationException ex) {\n+            // expected\n+        }\n+        // iterator state now invalid\n+    }\n+\n+    public void testConcurrentModification_alwaysFastPrevious() {\n+        FastArrayList list = new FastArrayList();\n+        list.setFast(true);\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        ListIterator iter = list.listIterator();\n+        assertEquals(\"a\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        assertEquals(\"b\", iter.previous());\n+        iter.remove();  // checking for no ConcurrentModificationException\n+        assertEquals(\"c\", iter.next());\n+        assertEquals(false, iter.hasNext());\n+        assertEquals(\"c\", iter.previous());\n+        assertEquals(\"a\", iter.previous());\n+        assertEquals(false, iter.hasPrevious());\n+    }\n+\n+    public void testConcurrentModification_alwaysFastModErrorPrevious() {\n+        FastArrayList list = new FastArrayList();\n+        list.setFast(true);\n+        list.add(\"a\");\n+        list.add(\"b\");\n+        list.add(\"c\");\n+        ListIterator iter = list.listIterator();\n+        assertEquals(\"a\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        assertEquals(\"b\", iter.previous());\n+        list.remove(1);\n+        try {\n+            iter.remove();\n+        } catch (ConcurrentModificationException ex) {\n+            // expected\n+        }\n+        // iterator state now invalid\n+    }\n+\n }", "timestamp": 1116789784, "metainfo": ""}