{"sha": "dd7f7aca14919ee039612fc3ee29a694918835e6", "log": "Rename TestIterator to AbstractTestIterator Rename TestListIterator to AbstractTestListIterator Add extra tests   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.1 2003/10/01 21:54:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.TestObject;\n+\n+/**\n+ * Abstract class for testing the Iterator interface.\n+ * <p>\n+ * This class provides a framework for testing an implementation of Iterator.\n+ * Concrete subclasses must provide the iterator to be tested.\n+ * They must also specify certain details of how the iterator operates by\n+ * overriding the supportsXxx() methods if necessary.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/01 21:54:54 $\n+ * \n+ * @author Morgan Delagrange\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestIterator extends TestObject {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement this method to return an iterator over an empty collection.\n+     * \n+     * @return an empty iterator\n+     */\n+    protected abstract Iterator makeEmptyIterator();\n+\n+    /**\n+     * Implement this method to return an iterator over a collection with elements.\n+     * \n+     * @return a full iterator\n+     */\n+    protected abstract Iterator makeFullIterator();\n+\n+    /**\n+     * Implements the abstract superclass method to return the full iterator.\n+     * \n+     * @return a full iterator\n+     */\n+    protected Object makeObject() {\n+        return makeFullIterator();\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that can be empty.\n+     * Default is true.\n+     * \n+     * @return true if Iterator can be empty\n+     */\n+    protected boolean supportsEmptyIterator() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that can contain elements.\n+     * Default is true.\n+     * \n+     * @return true if Iterator can be full\n+     */\n+    protected boolean supportsFullIterator() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that supports remove().\n+     * Default is true.\n+     * \n+     * @return true if Iterator supports remove\n+     */\n+    protected boolean supportsRemove() {\n+        return true;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test the empty iterator.\n+     */\n+    public void testEmptyIterator() {\n+        if (supportsEmptyIterator() == false) {\n+            return;\n+        }\n+\n+        Iterator it = makeEmptyIterator();\n+        \n+        // hasNext() should return false\n+        assertEquals(\"hasNext() should return false for empty iterators\", false, it.hasNext());\n+        \n+        // next() should throw a NoSuchElementException\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    /**\n+     * Test normal iteration behaviour.\n+     */\n+    public void testFullIterator() {\n+        if (supportsFullIterator() == false) {\n+            return;\n+        }\n+\n+        Iterator it = makeFullIterator();\n+\n+        // hasNext() must be true (ensure makeFullIterator is correct!)\n+        assertEquals(\"hasNext() should return true for at least one element\", true, it.hasNext());\n+\n+        // next() must not throw exception (ensure makeFullIterator is correct!)\n+        try {\n+            it.next();\n+        } catch (NoSuchElementException e) {\n+            fail(\"Full iterators must have at least one element\");\n+        }\n+\n+        // iterate through\n+        while (it.hasNext()) {\n+            it.next();\n+        }\n+\n+        // next() must throw NoSuchElementException now\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    /**\n+     * Test remove behaviour.\n+     */\n+    public void testRemove() {\n+        Iterator it = makeFullIterator();\n+        \n+        if (supportsRemove() == false) {\n+            // check for UnsupportedOperationException if not supported\n+            try {\n+                it.remove();\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+        \n+        // should throw IllegalStateException before next() called\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        \n+        // remove after next should be fine\n+        it.next();\n+        it.remove();\n+        \n+        // should throw IllegalStateException for second remove()\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java,v 1.1 2003/10/01 21:54:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract class for testing the ListIterator interface.\n+ * <p>\n+ * This class provides a framework for testing an implementation of ListIterator.\n+ * Concrete subclasses must provide the list iterator to be tested.\n+ * They must also specify certain details of how the list iterator operates by\n+ * overriding the supportsXxx() methods if necessary.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/01 21:54:54 $\n+ * \n+ * @author Rodney Waldhoff\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestListIterator extends AbstractTestIterator {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement this method to return a list iterator over an empty collection.\n+     * \n+     * @return an empty iterator\n+     */\n+    protected abstract ListIterator makeEmptyListIterator();\n+\n+    /**\n+     * Implement this method to return a list iterator over a collection with elements.\n+     * \n+     * @return a full iterator\n+     */\n+    protected abstract ListIterator makeFullListIterator();\n+\n+    /**\n+     * Implements the abstract superclass method to return the list iterator.\n+     * \n+     * @return an empty iterator\n+     */\n+    protected Iterator makeEmptyIterator() {\n+        return makeEmptyListIterator();\n+    }\n+\n+    /**\n+     * Implements the abstract superclass method to return the list iterator.\n+     * \n+     * @return a full iterator\n+     */\n+    protected Iterator makeFullIterator() {\n+        return makeFullListIterator();\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that supports add().\n+     * Default is true.\n+     * \n+     * @return true if Iterator supports add\n+     */\n+    protected boolean supportsAdd() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that supports set().\n+     * Default is true.\n+     * \n+     * @return true if Iterator supports set\n+     */\n+    protected boolean supportsSet() {\n+        return true;\n+    }\n+\n+    /**\n+     * The value to be used in the add and set tests.\n+     * Default is null.\n+     */\n+    protected Object addSetValue() {\n+        return null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that the empty list iterator contract is correct.\n+     */\n+    public void testEmptyListIteratorIsIndeedEmpty() {\n+        if (supportsEmptyIterator() == false) {\n+            return;\n+        }\n+\n+        ListIterator it = makeEmptyListIterator();\n+        \n+        assertEquals(false, it.hasNext());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(-1, it.previousIndex());\n+        \n+        // next() should throw a NoSuchElementException\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+        \n+        // previous() should throw a NoSuchElementException\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+    \n+    /**\n+     * Test navigation through the iterator.\n+     */\n+    public void testWalkForwardAndBack() {\n+        ArrayList list = new ArrayList();\n+        ListIterator it = makeFullListIterator();\n+        while (it.hasNext()) {\n+            list.add(it.next());\n+        }\n+        \n+        // check state at end\n+        assertEquals(false, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown from next at end of ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+        \n+        // loop back through comparing\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            assertEquals(i + 1, it.nextIndex());\n+            assertEquals(i, it.previousIndex());\n+        \n+            Object obj = list.get(i);\n+            assertEquals(obj, it.previous());\n+        }\n+        \n+        // check state at start\n+        assertEquals(true, it.hasNext());\n+        assertEquals(false, it.hasPrevious());\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from previous at start of ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+    \n+    /**\n+     * Test add behaviour.\n+     */\n+    public void testAdd() {\n+        ListIterator it = makeFullListIterator();\n+        \n+        if (supportsAdd() == false) {\n+            // check for UnsupportedOperationException if not supported\n+            try {\n+                it.add(addSetValue());\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+        \n+        // add at start should be OK\n+        it.add(addSetValue());\n+\n+        // add in middle and at end should be OK\n+        while (it.hasNext()) {\n+            it.next();\n+            it.add(addSetValue());\n+        }        \n+    }\n+    \n+    /**\n+     * Test set behaviour.\n+     */\n+    public void testSet() {\n+        ListIterator it = makeFullListIterator();\n+        \n+        if (supportsSet() == false) {\n+            // check for UnsupportedOperationException if not supported\n+            try {\n+                it.set(addSetValue());\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+        \n+        // should throw IllegalStateException before next() called\n+        try {\n+            it.set(addSetValue());\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        \n+        // set after next should be fine\n+        it.next();\n+        it.set(addSetValue());\n+        \n+        // repeated set calls should be fine\n+        it.set(addSetValue());\n+\n+        // remove then set\n+        if (supportsRemove()) {\n+            it.next();\n+            it.remove();\n+            try {\n+                it.set(addSetValue());\n+                fail(\"IllegalStateException must be thrown from set after remove\");\n+            } catch (IllegalStateException e) {\n+            }\n+        }\n+        \n+        // add then set\n+        if (supportsAdd()) {\n+            it.next();\n+            it.add(addSetValue());\n+            try {\n+                it.set(addSetValue());\n+                fail(\"IllegalStateException must be thrown from set after add\");\n+            } catch (IllegalStateException e) {\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Test remove after add behaviour.\n+     */\n+    public void testRemoveAfterAdd() {\n+        ListIterator it = makeFullListIterator();\n+        \n+        // add then remove\n+        if (supportsAdd() && supportsRemove()) {\n+            it.next();\n+            it.add(addSetValue());\n+            try {\n+                it.remove();\n+                fail(\"IllegalStateException must be thrown from remove after add\");\n+            } catch (IllegalStateException e) {\n+            }\n+        }\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/iterators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/08/31 17:28:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.6 2003/10/01 21:54:54 scolebourne Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/10/01 21:54:54 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n+ * @version $Id: TestAll.java,v 1.6 2003/10/01 21:54:54 scolebourne Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestArrayListIterator2.suite());\n         suite.addTest(TestObjectArrayIterator.suite());\n         suite.addTest(TestObjectArrayListIterator.suite());\n+        suite.addTest(TestObjectArrayListIterator2.suite());\n         suite.addTest(TestCollatingIterator.suite());\n         suite.addTest(TestFilterIterator.suite());\n         suite.addTest(TestFilterListIterator.suite());\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java,v 1.4 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java,v 1.5 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n /**\n  * Tests the ArrayIterator to ensure that the next() method will actually\n  * perform the iteration rather than the hasNext() method.\n- * The code of this test was supplied by Mauricio S. Moura\n+ * The code of this test was supplied by Mauricio S. Moura.\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/10/01 21:54:54 $\n  * \n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n- * @version $Id: TestArrayIterator.java,v 1.4 2003/08/31 17:28:40 scolebourne Exp $\n  */\n-public class TestArrayIterator extends TestIterator {\n+public class TestArrayIterator extends AbstractTestIterator {\n \n     protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n \n \n     public Iterator makeFullIterator() {\n         return new ArrayIterator(testArray);\n-    }\n-\n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n     }\n \n     public boolean supportsRemove() {\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java,v 1.4 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java,v 1.5 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n /**\n- * Tests the ArrayIterator with primitive type arrays\n+ * Tests the ArrayIterator with primitive type arrays.\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/10/01 21:54:54 $\n  * \n  * @author Morgan Delagrange\n  * @author James Strachan\n- * @version $Id: TestArrayIterator2.java,v 1.4 2003/08/31 17:28:40 scolebourne Exp $\n  */\n-public class TestArrayIterator2 extends TestIterator {\n+public class TestArrayIterator2 extends AbstractTestIterator {\n \n     protected int[] testArray = { 2, 4, 6, 8 };\n \n \n     public Iterator makeFullIterator() {\n         return new ArrayIterator(testArray);\n-    }\n-\n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n     }\n \n     /*\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java,v 1.3 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n /**\n+ * Test the ArrayListIterator class.\n  * \n- * @author Neil O'Toole - <a href=\"mailto:neilotoole@users.sourceforge.net\">neilotoole@users.sourceforge.net</a>\n- * @version $Id: TestArrayListIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:54 $\n+ * @author Neil O'Toole\n  */\n public class TestArrayListIterator extends TestArrayIterator {\n \n--- a/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java,v 1.3 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections.iterators;\n \n import java.util.Iterator;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n /**\n- * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n- * @see org.apache.commons.collections.iterators.TestArrayIterator2\n- * @version $Id: TestArrayListIterator2.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * Test the ArrayListIterator class with primitives.\n+ * \n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:54 $\n+ * @author Neil O'Toole\n  */\n public class TestArrayListIterator2 extends TestArrayIterator2 {\n \n--- a/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java,v 1.3 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java,v 1.4 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections.iterators;\n \n import java.util.ArrayList;\n \n /**\n  * Unit test suite for {@link CollatingIterator}.\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:40 $\n+ * \n+ * @version $Revision: 1.4 $ $Date: 2003/10/01 21:54:54 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollatingIterator extends TestIterator {\n+public class TestCollatingIterator extends AbstractTestIterator {\n \n     //------------------------------------------------------------ Conventional\n     \n         iter.addIterator(odds.iterator());\n         iter.addIterator(fib.iterator());\n         return iter;\n-    }\n-\n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n-    public boolean supportsEmptyIterator() {\n-        return true;\n     }\n \n     //------------------------------------------------------------------- Tests\n--- a/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java,v 1.6 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java,v 1.7 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test the filter iterator.\n  *\n+ * @version $Revision: 1.7 $ $Date: 2003/10/01 21:54:54 $\n+ * \n  * @author  Jan Sorensen\n  * @author Ralph Wagner\n- * @version $Revision: 1.6 $ $Date: 2003/08/31 17:28:40 $\n  */\n-public class TestFilterIterator extends TestIterator {\n+public class TestFilterIterator extends AbstractTestIterator {\n \n     /** Creates new TestFilterIterator */\n     public TestFilterIterator(String name) {\n         array = new String[] { \"a\", \"b\", \"c\" };\n         list = new ArrayList(Arrays.asList(array));\n         return makePassThroughFilter(list.iterator());\n-    }\n-\n-    public Object makeObject() {\n-        return makeFullIterator();\n     }\n \n     public void testRepeatedHasNext() {\n--- a/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java,v 1.6 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java,v 1.7 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n import org.apache.commons.collections.Predicate;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/08/31 17:28:40 $\n+ * Tests the FilterListIterator class.\n+ * \n+ * @version $Revision: 1.7 $ $Date: 2003/10/01 21:54:54 $\n+ * \n  * @author Rodney Waldhoff\n  */\n public class TestFilterListIterator extends TestCase {\n--- a/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java,v 1.6 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections.iterators;\n \n import java.util.ArrayList;\n import junit.framework.TestSuite;\n \n /**\n- * Tests the ArrayIterator to ensure that the next() method will actually\n- * perform the iteration rather than the hasNext() method.\n- * The code of this test was supplied by Mauricio S. Moura\n+ * Tests the IteratorChain class.\n+ * \n+ * @version $Revision: 1.6 $ $Date: 2003/10/01 21:54:55 $\n  * \n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Morgan Delagrange\n- * @version $Id: TestIteratorChain.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n  */\n-public class TestIteratorChain extends TestIterator {\n+public class TestIteratorChain extends AbstractTestIterator {\n \n     protected String[] testArray = {\n         \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n         chain.addIterator(list2.iterator());\n         chain.addIterator(list3.iterator());\n         return chain;\n-    }\n-\n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n     }\n \n     public void testIterator() {\n--- a/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java,v 1.3 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java,v 1.4 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections.iterators;\n \n import java.util.ArrayList;\n  * Tests the ListIteratorWrapper to insure that it simulates\n  * a ListIterator correctly.\n  *\n+ * @version $Revision: 1.4 $ $Date: 2003/10/01 21:54:55 $\n+ * \n  * @author Morgan Delagrange\n- * @version $Id: TestListIteratorWrapper.java,v 1.3 2003/08/31 17:28:40 scolebourne Exp $\n  */\n-public class TestListIteratorWrapper extends TestIterator {\n+public class TestListIteratorWrapper extends AbstractTestIterator {\n \n     protected String[] testArray = {\n         \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n         Iterator i = list1.iterator();\n \n         return new ListIteratorWrapper(i);\n-    }\n-\n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n     }\n \n     public void testIterator() {\n--- a/src/test/org/apache/commons/collections/iterators/TestLoopingIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestLoopingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestLoopingIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestLoopingIterator.java,v 1.3 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n /**\n- * Tests the LoopingIterator class using jUnit.\n+ * Tests the LoopingIterator class.\n  * \n- * @author <a href=\"mailto:joncrlsn@users.sf.net\">Jonathan Carlson</a>\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:54 $\n+ * \n+ * @author Jonathan Carlson\n  * @author Stephen Colebourne\n  */\n public class TestLoopingIterator extends TestCase {\n--- a/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java,v 1.3 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n /**\n  * Tests the ObjectArrayIterator.\n+ * \n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:54 $\n  * \n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n- * @version $Id: TestObjectArrayIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n  */\n-public class TestObjectArrayIterator extends TestIterator {\n+public class TestObjectArrayIterator extends AbstractTestIterator {\n \n     protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n \n \n     public boolean supportsRemove() {\n         return false;\n-    }\n-\n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n     }\n \n     public void testIterator() {\n--- a/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/08/31 17:28:40 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n /**\n+ * Tests the ObjectArrayListIterator class.\n  * \n- * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n- * @version $Id: TestObjectArrayListIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n+ * \n+ * @author Neil O'Toole\n  */\n public class TestObjectArrayListIterator extends TestObjectArrayIterator {\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator2.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator2.java,v 1.1 2003/10/01 21:54:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Tests the ObjectArrayListIterator class.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/10/01 21:54:54 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObjectArrayListIterator2 extends AbstractTestListIterator {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+    \n+    public TestObjectArrayListIterator2(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObjectArrayListIterator2.class);\n+    }\n+\n+    public ListIterator makeEmptyListIterator() {\n+        return new ObjectArrayListIterator(new Object[0]);\n+    }\n+\n+    public ListIterator makeFullListIterator() {\n+        return new ObjectArrayListIterator(testArray);\n+    }\n+\n+    public ListIterator makeArrayListIterator(Object[] array) {\n+        return new ObjectArrayListIterator(array);\n+    }\n+\n+    public boolean supportsAdd() {\n+        return false;\n+    }\n+    \n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java,v 1.6 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Tests the SingletonIterator to ensure that the next() method will actually\n  * perform the iteration rather than the hasNext() method.\n  *\n+ * @version $Revision: 1.6 $ $Date: 2003/10/01 21:54:54 $\n+ * \n  * @author James Strachan\n- * @version $Id: TestSingletonIterator.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n  */\n-public class TestSingletonIterator extends TestIterator {\n+public class TestSingletonIterator extends AbstractTestIterator {\n \n     private static final Object testValue = \"foo\";\n     \n         return new SingletonIterator( testValue );\n     }\n \n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java,v 1.6 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  */\n package org.apache.commons.collections.iterators;\n \n-import java.util.Iterator;\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n \n /**\n  * Tests the SingletonListIterator.\n  *\n+ * @version $Revision: 1.6 $ $Date: 2003/10/01 21:54:55 $\n+ * \n  * @author Stephen Colebourne\n- * @version $Id: TestSingletonListIterator.java,v 1.5 2003/08/31 17:28:40 scolebourne Exp $\n  */\n-public class TestSingletonListIterator extends TestIterator {\n+public class TestSingletonListIterator extends AbstractTestListIterator {\n \n     private static final Object testValue = \"foo\";\n     \n      * \n      * @return null\n      */\n-    public Iterator makeEmptyIterator() {\n+    public ListIterator makeEmptyListIterator() {\n         return null;\n     }\n \n-    public Iterator makeFullIterator() {\n+    public ListIterator makeFullListIterator() {\n         return new SingletonListIterator( testValue );\n     }\n \n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n+    public boolean supportsAdd() {\n+        return false;\n     }\n-    \n+\n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java,v 1.4 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java,v 1.5 2003/10/01 21:54:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n \n /**\n- * Tests the ArrayIterator to ensure that the next() method will actually\n- * perform the iteration rather than the hasNext() method.\n- * The code of this test was supplied by Mauricio S. Moura\n+ * Tests the UniqueFilterIterator class.\n+ * \n+ * @version $Revision: 1.5 $ $Date: 2003/10/01 21:54:54 $\n  * \n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 17:28:40 $\n  */\n-public class TestUniqueFilterIterator extends TestIterator {\n+public class TestUniqueFilterIterator extends AbstractTestIterator {\n \n     protected String[] testArray = {\n         \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n         return new UniqueFilterIterator(i);\n     }\n \n-    /**\n-     * Return a new, empty {@link Object} to used for testing.\n-     */\n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-\n     public void testIterator() {\n         Iterator iter = (Iterator) makeFullIterator();\n         for ( int i = 0; i < testArray.length; i++ ) {\n--- a/src/test/org/apache/commons/collections/primitives/TestByteIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestByteIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteIterator.java,v 1.3 2003/10/01 21:54:56 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.adapters.ByteIteratorIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:40 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:56 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestByteIterator extends TestIterator {\n+public abstract class TestByteIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return ByteIteratorIterator.wrap(makeEmptyByteIterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestCharIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestCharIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestCharIterator.java,v 1.2 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestCharIterator.java,v 1.3 2003/10/01 21:54:56 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.adapters.CharIteratorIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:56 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestCharIterator extends TestIterator {\n+public abstract class TestCharIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return CharIteratorIterator.wrap(makeEmptyCharIterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestDoubleIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestDoubleIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestDoubleIterator.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestDoubleIterator.java,v 1.3 2003/10/01 21:54:56 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.adapters.DoubleIteratorIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:40 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:56 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestDoubleIterator extends TestIterator {\n+public abstract class TestDoubleIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return DoubleIteratorIterator.wrap(makeEmptyDoubleIterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestFloatIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestFloatIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatIterator.java,v 1.2 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatIterator.java,v 1.3 2003/10/01 21:54:56 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.adapters.FloatIteratorIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:56 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestFloatIterator extends TestIterator {\n+public abstract class TestFloatIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return FloatIteratorIterator.wrap(makeEmptyFloatIterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestIntIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntIterator.java,v 1.2 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntIterator.java,v 1.3 2003/10/01 21:54:56 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.adapters.IntIteratorIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:56 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestIntIterator extends TestIterator {\n+public abstract class TestIntIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return IntIteratorIterator.wrap(makeEmptyIntIterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestLongIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestLongIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongIterator.java,v 1.2 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongIterator.java,v 1.3 2003/10/01 21:54:56 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.adapters.LongIteratorIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:56 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestLongIterator extends TestIterator {\n+public abstract class TestLongIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return LongIteratorIterator.wrap(makeEmptyLongIterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestShortIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestShortIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortIterator.java,v 1.2 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortIterator.java,v 1.3 2003/10/01 21:54:56 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.adapters.ShortIteratorIterator;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:56 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestShortIterator extends TestIterator {\n+public abstract class TestShortIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    protected Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return ShortIteratorIterator.wrap(makeEmptyShortIterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestByteIteratorIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteIteratorIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteIteratorIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.ArrayByteList;\n import org.apache.commons.collections.primitives.ByteList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestByteIteratorIterator extends TestIterator {\n+public class TestByteIteratorIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return ByteIteratorIterator.wrap(makeEmptyByteList().iterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestByteListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListIteratorListIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListIteratorListIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n import org.apache.commons.collections.primitives.ArrayByteList;\n import org.apache.commons.collections.primitives.ByteList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestByteListIteratorListIterator extends TestListIterator {\n+public class TestByteListIteratorListIterator extends AbstractTestListIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public ListIterator makeEmptyListIterator() {\n         return ByteListIteratorListIterator.wrap(makeEmptyByteList().listIterator());\n     }\n         return new byte[] { (byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9 };\n     }\n     \n+    protected Object addSetValue() {\n+        return new Byte((byte)1);\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCharIteratorIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCharIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharIteratorIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharIteratorIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.ArrayCharList;\n import org.apache.commons.collections.primitives.CharList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCharIteratorIterator extends TestIterator {\n+public class TestCharIteratorIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return CharIteratorIterator.wrap(makeEmptyCharList().iterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCharListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCharListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharListIteratorListIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharListIteratorListIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n import org.apache.commons.collections.primitives.ArrayCharList;\n import org.apache.commons.collections.primitives.CharList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCharListIteratorListIterator extends TestListIterator {\n+public class TestCharListIteratorListIterator extends AbstractTestListIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public ListIterator makeEmptyListIterator() {\n         return CharListIteratorListIterator.wrap(makeEmptyCharList().listIterator());\n     }\n         return new char[] { (char)0, (char)1, (char)2, (char)3, (char)4, (char)5, (char)6, (char)7, (char)8, (char)9 };\n     }\n     \n+    protected Object addSetValue() {\n+        return new Character((char)1);\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleIteratorIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleIteratorIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleIteratorIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.ArrayDoubleList;\n import org.apache.commons.collections.primitives.DoubleList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestDoubleIteratorIterator extends TestIterator {\n+public class TestDoubleIteratorIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return DoubleIteratorIterator.wrap(makeEmptyDoubleList().iterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleListIteratorListIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleListIteratorListIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n import org.apache.commons.collections.primitives.ArrayDoubleList;\n import org.apache.commons.collections.primitives.DoubleList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestDoubleListIteratorListIterator extends TestListIterator {\n+public class TestDoubleListIteratorListIterator extends AbstractTestListIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public ListIterator makeEmptyListIterator() {\n         return DoubleListIteratorListIterator.wrap(makeEmptyDoubleList().listIterator());\n     }\n         return new double[] { (double)0, (double)1, (double)2, (double)3, (double)4, (double)5, (double)6, (double)7, (double)8, (double)9 };\n     }\n     \n+    protected Object addSetValue() {\n+        return new Double((double)1);\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatIteratorIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatIteratorIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatIteratorIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.ArrayFloatList;\n import org.apache.commons.collections.primitives.FloatList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestFloatIteratorIterator extends TestIterator {\n+public class TestFloatIteratorIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return FloatIteratorIterator.wrap(makeEmptyFloatList().iterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListIteratorListIterator.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListIteratorListIterator.java,v 1.4 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n import org.apache.commons.collections.primitives.ArrayFloatList;\n import org.apache.commons.collections.primitives.FloatList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestFloatListIteratorListIterator extends TestListIterator {\n+public class TestFloatListIteratorListIterator extends AbstractTestListIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public ListIterator makeEmptyListIterator() {\n         return FloatListIteratorListIterator.wrap(makeEmptyFloatList().listIterator());\n     }\n         return new float[] { (float)0, (float)1, (float)2, (float)3, (float)4, (float)5, (float)6, (float)7, (float)8, (float)9 };\n     }\n     \n+    protected Object addSetValue() {\n+        return new Float((float)1);\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntIteratorIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntIteratorIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntIteratorIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.ArrayIntList;\n import org.apache.commons.collections.primitives.IntList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestIntIteratorIterator extends TestIterator {\n+public class TestIntIteratorIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return IntIteratorIterator.wrap(makeEmptyIntList().iterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListIteratorListIterator.java,v 1.5 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListIteratorListIterator.java,v 1.6 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n import org.apache.commons.collections.primitives.ArrayIntList;\n import org.apache.commons.collections.primitives.IntList;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.6 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestIntListIteratorListIterator extends TestListIterator {\n+public class TestIntListIteratorListIterator extends AbstractTestListIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public ListIterator makeEmptyListIterator() {\n         return IntListIteratorListIterator.wrap(makeEmptyIntList().listIterator());\n     }\n         return new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n     }\n     \n+    protected Object addSetValue() {\n+        return new Integer(1);\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongIteratorIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongIteratorIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongIteratorIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.ArrayLongList;\n import org.apache.commons.collections.primitives.LongList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestLongIteratorIterator extends TestIterator {\n+public class TestLongIteratorIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return LongIteratorIterator.wrap(makeEmptyLongList().iterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListIteratorListIterator.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListIteratorListIterator.java,v 1.4 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n import org.apache.commons.collections.primitives.ArrayLongList;\n import org.apache.commons.collections.primitives.LongList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestLongListIteratorListIterator extends TestListIterator {\n+public class TestLongListIteratorListIterator extends AbstractTestListIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public ListIterator makeEmptyListIterator() {\n         return LongListIteratorListIterator.wrap(makeEmptyLongList().listIterator());\n     }\n         return new long[] { (long)0, (long)1, (long)2, (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9 };\n     }\n     \n+    protected Object addSetValue() {\n+        return new Long((long)1);\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortIteratorIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortIteratorIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortIteratorIterator.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortIteratorIterator.java,v 1.3 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.iterators.AbstractTestIterator;\n import org.apache.commons.collections.primitives.ArrayShortList;\n import org.apache.commons.collections.primitives.ShortList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestShortIteratorIterator extends TestIterator {\n+public class TestShortIteratorIterator extends AbstractTestIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public Iterator makeEmptyIterator() {\n         return ShortIteratorIterator.wrap(makeEmptyShortList().iterator());\n     }\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortListIteratorListIterator.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortListIteratorListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListIteratorListIterator.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListIteratorListIterator.java,v 1.4 2003/10/01 21:54:55 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n import org.apache.commons.collections.primitives.ArrayShortList;\n import org.apache.commons.collections.primitives.ShortList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/01 21:54:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestShortListIteratorListIterator extends TestListIterator {\n+public class TestShortListIteratorListIterator extends AbstractTestListIterator {\n \n     // conventional\n     // ------------------------------------------------------------------------\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n-    public Object makeObject() {\n-        return makeFullIterator();\n-    }\n-    \n     public ListIterator makeEmptyListIterator() {\n         return ShortListIteratorListIterator.wrap(makeEmptyShortList().listIterator());\n     }\n         return new short[] { (short)0, (short)1, (short)2, (short)3, (short)4, (short)5, (short)6, (short)7, (short)8, (short)9 };\n     }\n     \n+    protected Object addSetValue() {\n+        return new Short((short)1);\n+    }\n+\n     // tests\n     // ------------------------------------------------------------------------\n ", "timestamp": 1065045296, "metainfo": ""}