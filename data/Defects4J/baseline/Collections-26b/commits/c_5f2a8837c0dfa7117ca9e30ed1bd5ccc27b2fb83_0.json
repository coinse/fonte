{"sha": "5f2a8837c0dfa7117ca9e30ed1bd5ccc27b2fb83", "log": "[COLLECTIONS-366] Reverting initial commit, feature gets postponed.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n         return -1;\n     }\n \n-    // partition\n-    //-------------------------------------------------------------------------\n-\n     /**\n      * Returns consecutive {@link List#subList(int, int) sublists} of a\n      * list, each of the same size (the final list may be smaller). For example,\n             return list.isEmpty();\n         }\n     }\n-    \n-    // range\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     * Returns an unmodifiable List of integers in the range [0, size - 1].\n-     * <p>\n-     * The returned list does not store the actual numbers, but checks\n-     * if a given number would be contained in the defined range. A call\n-     * to {@link #contains(Object)} is very fast - O(1).\n-     *\n-     * @see #range(int,int)\n-     *\n-     * @param size  the size of the returned list\n-     * @return an unmodifiable list of integers in the range [0, size - 1]\n-     * @throws IllegalArgumentException if from &gt; to\n-     * @since 4.0\n-     */\n-    public static List<Integer> range(final int size) {\n-        return range(0, size - 1);\n-    }\n-\n-    /**\n-     * Returns an unmodifiable List of integers in the range [from, to].\n-     * <p>\n-     * The returned list does not store the actual numbers, but checks\n-     * if a given number would be contained in the defined range. A call\n-     * to {@link #contains(Object)} is very fast - O(1).\n-     * <p>\n-     * The bounds of the range are allowed to be negative.\n-     * \n-     * @param from  the start of the range\n-     * @param to  the end of the range (inclusive)\n-     * @return an unmodifiable list of integers in the specified range\n-     * @throws IllegalArgumentException if from &gt; to\n-     * @since 4.0\n-     */\n-    public static List<Integer> range(final int from, final int to) {\n-        return ListUtils.unmodifiableList(new RangeList(from, to));\n-    }\n-\n-    /**\n-     * Provides a memory-efficient implementation of a fixed range list.\n-     * @since 4.0\n-     */\n-    private static final class RangeList extends AbstractList<Integer> {\n-        private final int from;\n-        private final int to;\n-\n-        /**\n-         * Creates a list of integers with a given range, inclusive.\n-         * \n-         * @param from  the start of the range\n-         * @param to  the end of the range (inclusive)\n-         * @throws IllegalArgumentException if from &gt; to\n-         */\n-        private RangeList(final int from, final int to) {\n-            if (to < from) {\n-                throw new IllegalArgumentException(\"from(\" + from + \") > to(\" + to + \")\");\n-            }\n-\n-            this.from = from;\n-            this.to = to;\n-        }\n-\n-        public int size() {\n-            return to - from + 1;\n-        }\n-\n-        public Integer get(final int index) {\n-            final int sz = size();\n-            if (index >= sz || index < 0) {\n-                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + sz);\n-            }\n-            return Integer.valueOf(index + from);\n-        }\n-\n-        public int indexOf(Object o) {\n-            if (o instanceof Number) {\n-                final int value = ((Number) o).intValue();\n-                if (value >= from && value <= to) {\n-                    return value - from;\n-                }\n-            }\n-            return -1;\n-        }\n-\n-        public int lastIndexOf(Object o) {\n-            return indexOf(o);\n-        }\n-\n-        public boolean contains(Object o) {\n-            return indexOf(o) != -1;\n-        }\n-    }\n }", "timestamp": 1362510538, "metainfo": ""}