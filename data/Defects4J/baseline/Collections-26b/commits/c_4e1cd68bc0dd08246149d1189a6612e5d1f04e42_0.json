{"sha": "4e1cd68bc0dd08246149d1189a6612e5d1f04e42", "log": "add tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/primitives/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/decorators/Attic/TestAll.java,v 1.1 2003/05/04 12:58:48 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/decorators/Attic/TestAll.java,v 1.2 2003/05/06 00:04:30 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/05/04 12:58:48 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/06 00:04:30 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n         TestSuite suite = new TestSuite();\n \n         suite.addTest(TestBaseProxyIntCollection.suite());\n-        // TODO: suite.addTest(TestBaseProxyIntList.suite());\n+        suite.addTest(TestBaseProxyIntList.suite());\n \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/decorators/TestBaseProxyIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/decorators/Attic/TestBaseProxyIntList.java,v 1.1 2003/05/06 00:04:30 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+import org.apache.commons.collections.primitives.IntList;\n+import org.apache.commons.collections.primitives.IntListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/05/06 00:04:30 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestBaseProxyIntList extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestBaseProxyIntList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestBaseProxyIntList.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testListCallsAreProxied() {\n+        final InvocationCounter proxied = new InvocationCounter();\n+        BaseProxyIntList list = new BaseProxyIntList() {\n+            protected IntList getProxiedList() {\n+                return proxied;\n+            }\n+        };\n+        \n+        assertSame(list.getProxiedList(),list.getProxiedCollection());\n+        \n+        assertEquals(0,proxied.getAddCount());\n+        list.add(1,1);\n+        assertEquals(1,proxied.getAddCount());\n+\n+        assertEquals(0,proxied.getAddAllCount());\n+        list.addAll(1,null);\n+        assertEquals(1,proxied.getAddAllCount());\n+\n+        assertEquals(0,proxied.getGetCount());\n+        list.get(1);\n+        assertEquals(1,proxied.getGetCount());\n+\n+        assertEquals(0,proxied.getIndexOfCount());\n+        list.indexOf(1);\n+        assertEquals(1,proxied.getIndexOfCount());\n+\n+        assertEquals(0,proxied.getLastIndexOfCount());\n+        list.lastIndexOf(1);\n+        assertEquals(1,proxied.getLastIndexOfCount());\n+\n+        assertEquals(0,proxied.getListIteratorCount());\n+        list.listIterator();\n+        assertEquals(1,proxied.getListIteratorCount());\n+\n+        assertEquals(0,proxied.getListIteratorFromCount());\n+        list.listIterator(1);\n+        assertEquals(1,proxied.getListIteratorFromCount());\n+\n+        assertEquals(0,proxied.getRemoveElementAtCount());\n+        list.removeElementAt(1);\n+        assertEquals(1,proxied.getRemoveElementAtCount());\n+\n+        assertEquals(0,proxied.getSetCount());\n+        list.set(1,1);\n+        assertEquals(1,proxied.getSetCount());\n+\n+        assertEquals(0,proxied.getSubListCount());\n+        list.subList(1,2);\n+        assertEquals(1,proxied.getSubListCount());\n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+    static class InvocationCounter extends TestBaseProxyIntCollection.InvocationCounter implements IntList {\n+        private int addCount;\n+        private int addAllCount;\n+        private int getCount;\n+        private int indexOfCount;\n+        private int lastIndexOfCount;\n+        private int listIteratorCount;\n+        private int listIteratorFromCount;\n+        private int removeElementAtCount;\n+        private int setCount;\n+        private int subListCount;\n+        \n+        public void add(int index, int element) {\n+            addCount++;\n+        }\n+\n+        public boolean addAll(int index, IntCollection collection) {\n+            addAllCount++;\n+            return false;\n+        }\n+\n+        public int get(int index) {\n+            getCount++;\n+            return 0;\n+        }\n+\n+        public int indexOf(int element) {\n+            indexOfCount++;\n+            return 0;\n+        }\n+\n+        public int lastIndexOf(int element) {\n+            lastIndexOfCount++;\n+            return 0;\n+        }\n+\n+        public IntListIterator listIterator() {\n+            listIteratorCount++;\n+            return null;\n+        }\n+\n+        public IntListIterator listIterator(int index) {\n+            listIteratorFromCount++;\n+            return null;\n+        }\n+\n+        public int removeElementAt(int index) {\n+            removeElementAtCount++;\n+            return 0;\n+        }\n+\n+        public int set(int index, int element) {\n+            setCount++;\n+            return 0;\n+        }\n+\n+        public IntList subList(int fromIndex, int toIndex) {\n+            subListCount++;\n+            return null;\n+        }\n+\n+        public int getAddAllCount() {\n+            return addAllCount;\n+        }\n+\n+        public int getAddCount() {\n+            return addCount;\n+        }\n+\n+        public int getGetCount() {\n+            return getCount;\n+        }\n+\n+        public int getIndexOfCount() {\n+            return indexOfCount;\n+        }\n+\n+        public int getLastIndexOfCount() {\n+            return lastIndexOfCount;\n+        }\n+\n+        public int getListIteratorCount() {\n+            return listIteratorCount;\n+        }\n+\n+        public int getListIteratorFromCount() {\n+            return listIteratorFromCount;\n+        }\n+\n+        public int getRemoveElementAtCount() {\n+            return removeElementAtCount;\n+        }\n+\n+        public int getSetCount() {\n+            return setCount;\n+        }\n+\n+        public int getSubListCount() {\n+            return subListCount;\n+        }\n+\n+    }\n+}", "timestamp": 1052179470, "metainfo": ""}