{"sha": "8fbc765987448f1f8a3d47d7f7d793b50ec9404d", "log": "Javadoc spelling mistakes bug 22843, from Janek Bogucki   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/java/org/apache/commons/collections/ArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.11 2003/05/11 14:15:24 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.12 2003/08/31 13:03:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @see java.util.Stack\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.11 $ $Date: 2003/05/11 14:15:24 $\n+ * @version $Revision: 1.12 $ $Date: 2003/08/31 13:03:12 $\n  * \n  * @author Craig R. McClanahan\n  * @author Paul Jack\n     /**\n      * Return <code>true</code> if this stack is currently empty.\n      * <p>\n-     * This method exists for compatability with <code>java.util.Stack</code>.\n+     * This method exists for compatibility with <code>java.util.Stack</code>.\n      * New users of this class should use <code>isEmpty</code> instead.\n      * \n      * @return true if the stack is currently empty\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.19 2003/05/11 14:15:23 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.20 2003/08/31 13:03:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.19 $ $Date: 2003/05/11 14:15:23 $\n+ * @version $Revision: 1.20 $ $Date: 2003/08/31 13:03:12 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author Stephen Colebourne\n      * <li>If the instantiation fails, throw a CloneNotSupportedException\n      *\n      * <li>Clone the bean map and set the newly instantiated bean as the\n-     * underyling bean for the bean map.\n+     * underlying bean for the bean map.\n      *\n      * <li>Copy each property that is both readable and writable from the\n      * existing object to a cloned bean map.  \n      * primitive type, this method returns the original value.\n      *\n      * @param newType  the type to convert the value to\n-     * @param value  the value to conert\n+     * @param value  the value to convert\n      * @return the converted value\n      * @throws NumberFormatException if newType is a primitive type, and \n      *  the string representation of the given value cannot be converted\n--- a/src/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/java/org/apache/commons/collections/ClosureUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ClosureUtils.java,v 1.1 2003/05/16 13:41:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ClosureUtils.java,v 1.2 2003/08/31 13:03:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All the supplied closures are Serializable.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/16 13:41:10 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 13:03:12 $\n  *\n  * @author Stephen Colebourne\n  */\n         Closure[] trs = null;\n         Predicate[] preds = null;\n         if (objectsAndClosures == null) {\n-            throw new IllegalArgumentException(\"The obejct and closure map must not be null\");\n+            throw new IllegalArgumentException(\"The object and closure map must not be null\");\n         }\n         Closure def = (Closure) objectsAndClosures.remove(null);\n         int size = objectsAndClosures.size();\n     //----------------------------------------------------------------------------------\n \n     /**\n-     * ForClosure calls the closure a fixed nunmber of times.\n+     * ForClosure calls the closure a fixed number of times.\n      */\n     private static class ForClosure implements Closure, Serializable {\n         /** The number of times to loop */\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.33 2003/07/19 00:30:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.34 2003/08/31 13:03:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A set of {@link Collection} related utility methods.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.33 $ $Date: 2003/07/19 00:30:08 $\n+ * @version $Revision: 1.34 $ $Date: 2003/08/31 13:03:12 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     /**\n      * Returns a {@link Map} mapping each unique element in\n      * the given {@link Collection} to an {@link Integer}\n-     * representing the number of occurances of that element\n+     * representing the number of occurences of that element\n      * in the {@link Collection}.\n      * An entry that maps to <tt>null</tt> indicates that the\n      * element does not appear in the given {@link Collection}.\n      * Transforms all elements from inputCollection with the given transformer \n      * and adds them to the outputCollection.\n      * <p>\n-     * If the input transfomer is null, the result is an empty list.\n+     * If the input transformer is null, the result is an empty list.\n      * \n      * @param inputCollection  the collection to get the input from, may not be null\n      * @param transformer  the transformer to use, may be null\n      * Transforms all elements from the inputIterator  with the given transformer \n      * and adds them to the outputCollection.\n      * <p>\n-     * If the input iterator or transfomer is null, the result is an empty list.\n+     * If the input iterator or transformer is null, the result is an empty list.\n      * \n      * @param inputIterator  the iterator to get the input from, may be null\n      * @param transformer  the transformer to use, may be null\n      * Transforms all elements from inputCollection with the given transformer \n      * and adds them to the outputCollection.\n      * <p>\n-     * If the input collection or transfomer is null, there is no change to the \n+     * If the input collection or transformer is null, there is no change to the \n      * output collection.\n      *\n      * @param inputCollection  the collection to get the input from, may be null\n      * Transforms all elements from the inputIterator with the given transformer \n      * and adds them to the outputCollection.\n      * <p>\n-     * If the input iterator or transfomer is null, there is no change to the \n+     * If the input iterator or transformer is null, there is no change to the \n      * output collection.\n      *\n      * @param inputIterator  the iterator to get the input from, may be null\n--- a/src/java/org/apache/commons/collections/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.14 2003/06/24 16:08:42 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.15 2003/08/31 13:03:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @see java.util.LinkedList\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.14 $ $Date: 2003/06/24 16:08:42 $\n+ * @version $Revision: 1.15 $ $Date: 2003/08/31 13:03:12 $\n  * \n  * @author Rodney Waldhoff\n  * @author Janek Bogucki\n      * elements of this list, initialized such that\n      * {@link ListIterator#next} will return the element at\n      * the specified index (if any) and {@link ListIterator#previous}\n-     * will return the element immediately preceeding it (if any).\n+     * will return the element immediately preceding it (if any).\n      * Unlike {@link #iterator}, a cursor\n      * is not bothered by concurrent modifications to the\n      * underlying list.\n     }\n \n     /**\n-     * Informs all of my registerd cursors that they are now\n+     * Informs all of my registered cursors that they are now\n      * invalid.\n      */\n     protected void invalidateCursors() {\n     }\n \n     /**\n-     * Informs all of my registerd cursors that the specified\n+     * Informs all of my registered cursors that the specified\n      * element was changed.\n      * @see #set(int,java.lang.Object)\n      */\n     }\n \n     /**\n-     * Informs all of my registered cursors tha the specifed\n+     * Informs all of my registered cursors that the specified\n      * element was just removed from my list.\n      */\n     protected void broadcastListableRemoved(Listable elt) {\n     }\n \n     /**\n-     * Informs all of my registered cursors tha the specifed\n+     * Informs all of my registered cursors that the specified\n      * element was just added to my list.\n      */\n     protected void broadcastListableInserted(Listable elt) {\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.9 2003/05/16 14:24:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.10 2003/08/31 13:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A default implementation of {@link java.util.Map.Entry}\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.9 $ $Date: 2003/05/16 14:24:54 $\n+ * @version $Revision: 1.10 $ $Date: 2003/08/31 13:05:44 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n      * key and given value.\n      *\n      * @param key  the key for the entry, may be null\n-     * @param value  the value for the entyr, may be null\n+     * @param value  the value for the entry, may be null\n      */\n     public DefaultMapEntry(Object key, Object value) {\n         this.key = key;\n--- a/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.4 2003/05/16 14:24:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.5 2003/08/31 13:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * iterator will iterate over the values in ascending order.<p>\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.4 $ $Date: 2003/05/16 14:24:54 $\n+ * @version $Revision: 1.5 $ $Date: 2003/08/31 13:05:44 $\n  * \n  * @author Marc Johnson (marcj at users dot sourceforge dot net)\n  */\n         } else if (node.getRight(index) != null) {\n \n             // everything to the node's right is larger. The least of\n-            // the right node's descendents is the next larger node\n+            // the right node's descendants is the next larger node\n             rval = leastNode(node.getRight(index), index);\n         } else {\n \n \n     /**\n      * complicated red-black insert stuff. Based on Sun's TreeMap\n-     * implementation, though it's barely recognizeable any more\n+     * implementation, though it's barely recognizable any more\n      *\n      * @param insertedNode the node to be inserted\n      * @param index KEY or VALUE\n \n     /**\n      * complicated red-black delete stuff. Based on Sun's TreeMap\n-     * implementation, though it's barely recognizeable any more\n+     * implementation, though it's barely recognizable any more\n      *\n      * @param deletedNode the node to be deleted\n      */\n \n     /**\n      * complicated red-black delete stuff. Based on Sun's TreeMap\n-     * implementation, though it's barely recognizeable any more. This\n+     * implementation, though it's barely recognizable any more. This\n      * rebalances the tree (somewhat, as red-black trees are not\n      * perfectly balanced -- perfect balancing takes longer)\n      *\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.14 2003/08/24 11:29:52 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.15 2003/08/31 13:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *      tokens_on_multiple_lines = second token\n  *\n  *      # commas may be escaped in tokens\n- *      commas.excaped = Hi\\, what'up?\n+ *      commas.escaped = Hi\\, what'up?\n  * </pre>\n  *\n  * <p><b>NOTE</b>: this class has <b>not</b> been written for\n  * it, go ahead and tune it up!\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.14 $ $Date: 2003/08/24 11:29:52 $\n+ * @version $Revision: 1.15 $ $Date: 2003/08/31 13:05:44 $\n  * \n  * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n  * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n      * Sets a string property w/o checking for commas - used\n      * internally when a property has been broken up into\n      * strings that could contain escaped commas to prevent\n-     * the inadvertant vectorization.\n+     * the inadvertent vectorization.\n      * <p>\n      * Thanks to Leon Messerschmidt for this one.\n      *\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.18 2003/05/11 13:29:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.19 2003/08/31 13:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.18 $ $Date: 2003/05/11 13:29:16 $\n+ * @version $Revision: 1.19 $ $Date: 2003/08/31 13:05:44 $\n  * \n  * @author  <a href=\"mailto:fede@apache.org\">Federico Barbieri</a>\n  * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n      * one occurrence.\n      *\n      * @param list1  the list to subtract from\n-     * @param list2  the lsit to subtract\n+     * @param list2  the list to subtract\n      * @return  a new list containing the results\n      * @throws NullPointerException if either list is null\n      */\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.28 2003/08/25 20:38:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.29 2003/08/31 13:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.28 $ $Date: 2003/08/25 20:38:40 $\n+ * @version $Revision: 1.29 $ $Date: 2003/08/31 13:05:44 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n     /**\n      * Prints the given map with nice line breaks.\n      * <p>\n-     * This method prints a nicely formatted String decribing the Map.\n+     * This method prints a nicely formatted String describing the Map.\n      * Each map entry will be printed with key and value.\n      * When the value is a Map, recursive behaviour occurs.\n      *\n     /**\n      * Prints the given map with nice line breaks.\n      * <p>\n-     * This method prints a nicely formatted String decribing the Map.\n+     * This method prints a nicely formatted String describing the Map.\n      * Each map entry will be printed with key, value and value classname.\n      * When the value is a Map, recursive behaviour occurs.\n      *\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.7 2003/05/16 13:41:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.8 2003/08/31 13:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All the supplied predicates are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/05/16 13:41:10 $\n+ * @version $Revision: 1.8 $ $Date: 2003/08/31 13:05:44 $\n  * \n  * @author Stephen Colebourne\n  * @author Ola Berg\n \n     /**\n      * Creates a Predicate that returns true the first time an object is\n-     * encoutered, and false if the same object is received \n+     * encountered, and false if the same object is received \n      * again. The comparison is by equals(). A <code>null</code> input object\n      * is accepted and will return true the first time, and false subsequently\n      * as well.\n \n     /**\n      * UniquePredicate returns true the first time an object is\n-     * encoutered, and false if the same object is received \n+     * encountered, and false if the same object is received \n      * again using equals().\n      */\n     private static class UniquePredicate implements Predicate, Serializable {\n         }\n \n         /**\n-         * Return true the first time, and false subsequant times\n+         * Return true the first time, and false subsequent times\n          * that an object is encountered, using equals().\n          */\n         public boolean evaluate(Object object) {\n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.12 2003/05/16 14:58:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.13 2003/08/31 13:07:26 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.12 $ $Date: 2003/05/16 14:58:42 $\n+ * @version $Revision: 1.13 $ $Date: 2003/08/31 13:07:26 $\n  * \n  * @author Paul Jack\n  */\n \n \n     /**\n-     *  Constant indiciating that soft references should be used.\n+     *  Constant indicating that soft references should be used.\n      */\n     final public static int SOFT = 1;\n \n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.17 2003/05/16 14:58:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.18 2003/08/31 13:07:26 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  or use explicit synchronization controls.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.17 $ $Date: 2003/05/16 14:58:42 $\n+ * @version $Revision: 1.18 $ $Date: 2003/08/31 13:07:26 $\n  * \n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</A>\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n         // difficult.  If a shallow clone is implemented, then entry.next.prev !=\n         // entry, which is unintuitive and probably breaks all sorts of assumptions\n         // in code that uses this implementation.  If a deep clone is\n-        // implementated, then what happens when the linked list is cyclical (as is\n+        // implemented, then what happens when the linked list is cyclical (as is\n         // the case with SequencedHashMap)?  It's impossible to know in the clone\n         // when to stop cloning, and thus you end up in a recursive loop,\n         // continuously cloning the \"next\" in the list.\n \n     /**\n      *  Construct an empty sentinel used to hold the head (sentinel.next) and the\n-     *  tail (sentinel.prev) of the list.  The sentinal has a <code>null</code>\n+     *  tail (sentinel.prev) of the list.  The sentinel has a <code>null</code>\n      *  key and value.\n      **/\n     private static final Entry createSentinel() {\n         // does not need to be tested.  In cases where the list is empty,\n         // sentinel.next will point to the sentinel itself which has a null key,\n         // which is exactly what we would want to return if the list is empty (a\n-        // nice convient way to avoid test for an empty list)\n+        // nice convenient way to avoid test for an empty list)\n         return sentinel.next.getKey();\n     }\n \n         // list does not need to be tested.  In cases where the list is empty,\n         // sentinel.next will point to the sentinel itself which has a null value,\n         // which is exactly what we would want to return if the list is empty (a\n-        // nice convient way to avoid test for an empty list)\n+        // nice convenient way to avoid test for an empty list)\n         return sentinel.next.getValue();\n     }\n \n         // does not need to be tested.  In cases where the list is empty,\n         // sentinel.prev will point to the sentinel itself which has a null key,\n         // which is exactly what we would want to return if the list is empty (a\n-        // nice convient way to avoid test for an empty list)\n+        // nice convenient way to avoid test for an empty list)\n         return sentinel.prev.getKey();\n     }\n \n         // list does not need to be tested.  In cases where the list is empty,\n         // sentinel.prev will point to the sentinel itself which has a null value,\n         // which is exactly what we would want to return if the list is empty (a\n-        // nice convient way to avoid test for an empty list)\n+        // nice convenient way to avoid test for an empty list)\n         return sentinel.prev.getValue();\n     }\n \n      * @return the index, or -1 if not found\n      */\n     public int lastIndexOf(Object key) {\n-        // keys in a map are guarunteed to be unique\n+        // keys in a map are guaranteed to be unique\n         return indexOf(key);\n     }\n \n      * Removes the element at the specified index.\n      *\n      * @param index The index of the object to remove.\n-     * @return      The previous value coressponding the <code>key</code>, or\n+     * @return      The previous value corresponding the <code>key</code>, or\n      *              <code>null</code> if none existed.\n      *\n      * @throws ArrayIndexOutOfBoundsException if the <code>index</code> is\n--- a/src/java/org/apache/commons/collections/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.10 2003/06/20 07:59:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.11 2003/08/31 13:07:26 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * operations will affect the map.<p>\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.10 $ $Date: 2003/06/20 07:59:59 $\n+ * @version $Revision: 1.11 $ $Date: 2003/08/31 13:07:26 $\n  * \n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author <a href=\"mailto:g-froehlich@gmx.de\">Gerhard Froehlich</a>\n \n \n     /**\n-     *  Prevents any operations from occuring on this map while the\n+     *  Prevents any operations from occurring on this map while the\n      *  given {@link Runnable} executes.  This method can be used, for\n-     *  instance, to execute a bulk operation atomicly: \n+     *  instance, to execute a bulk operation atomically: \n      *\n      *  <pre>\n      *    staticBucketMapInstance.atomic(new Runnable() {\n      *  in your map, then the recursive method will be invoked twenty thousand\n      *  times.  You have been warned.\n      *\n-     *  @param r  the code to execute atomicly\n+     *  @param r  the code to execute atomically\n      */\n     public void atomic(Runnable r) {\n         if (r == null) throw new NullPointerException();\n--- a/src/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/java/org/apache/commons/collections/TransformerUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.1 2003/05/16 13:41:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.2 2003/08/31 13:07:26 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All the supplied transformers are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/16 13:41:10 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 13:07:26 $\n  * \n  * @author Stephen Colebourne\n  */\n         Transformer[] trs = null;\n         Predicate[] preds = null;\n         if (objectsAndTransformers == null) {\n-            throw new IllegalArgumentException(\"The obejct and transformer map must not be null\");\n+            throw new IllegalArgumentException(\"The object and transformer map must not be null\");\n         }\n         Transformer def = (Transformer) objectsAndTransformers.remove(null);\n         int size = objectsAndTransformers.size();\n--- a/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.11 2003/05/16 15:08:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.12 2003/08/31 12:54:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * \n  * @since Commons Collections 2.0\n  * @author Morgan Delagrange\n- * @version $Revision: 1.11 $ $Date: 2003/05/16 15:08:45 $\n+ * @version $Revision: 1.12 $ $Date: 2003/08/31 12:54:49 $\n  */\n public class ComparatorChain implements Comparator,Serializable {\n \n     }\n \n     /**\n-     * Perform comaparisons on the Objects as per\n+     * Perform comparisons on the Objects as per\n      * Comparator.compare(o1,o2).\n      * \n      * @param o1     object 1\n--- a/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java,v 1.2 2003/05/16 15:08:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java,v 1.3 2003/08/31 12:54:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * multiple comparisons  after all the setup operations are complete.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/16 15:08:44 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:54:49 $\n  *\n  * @author David Leppik\n  * @author Stephen Colebourne\n         if (unknownObjectBehavior != UNKNOWN_AFTER \n             && unknownObjectBehavior != UNKNOWN_BEFORE \n             && unknownObjectBehavior != UNKNOWN_THROW_EXCEPTION) {\n-            throw new IllegalArgumentException(\"Unrecognised value for unkown behaviour flag\");    \n+            throw new IllegalArgumentException(\"Unrecognised value for unknown behaviour flag\");    \n         }\n         this.unknownObjectBehavior = unknownObjectBehavior;\n     }\n--- a/src/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/NullComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/NullComparator.java,v 1.6 2003/01/10 20:21:25 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/NullComparator.java,v 1.7 2003/08/31 12:54:49 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  *  other objects.\n  *\n  *  @since Commons Collections 2.0\n- *  @version $Revision: 1.6 $ $Date: 2003/01/10 20:21:25 $ \n+ *  @version $Revision: 1.7 $ $Date: 2003/08/31 12:54:49 $ \n  *\n  *  @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n  **/\n      *  @param o the object to compare this comparator with.\n      *\n      *  @return <code>true</code> if the specified object is a NullComparator\n-     *  with equivalant <code>null</code> comparison behavior\n+     *  with equivalent <code>null</code> comparison behavior\n      *  (i.e. <code>null</code> high or low) and with equivalent underlying\n      *  non-<code>null</code> object comparators.\n      **/\n--- a/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ReverseComparator.java,v 1.13 2003/05/16 15:08:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ReverseComparator.java,v 1.14 2003/08/31 12:54:49 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * method.\n  * \n  * @since Commons Collections 2.0\n- * @version $Revision: 1.13 $ $Date: 2003/05/16 15:08:45 $\n+ * @version $Revision: 1.14 $ $Date: 2003/08/31 12:54:49 $\n  *\n  * @author bayard@generationjava.com\n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n     /**\n      * Creates a comparator that compares objects based on the inverse of their\n      * natural ordering.  Using this Constructor will create a ReverseComparator\n-     * that is functionaly identical to the Comparator returned by\n+     * that is functionally identical to the Comparator returned by\n      * java.util.Collections.<b>reverseOrder()</b>.\n      * \n      * @see java.util.Collections#reverseOrder\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedBag.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedBag.java,v 1.1 2003/05/07 13:19:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedBag.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedBag</code> decorates another <code>Bag</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the list, an IllegalArgumentException\n+ * If an object cannot be added to the list, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 13:19:17 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedBuffer.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedBuffer.java,v 1.1 2003/05/07 12:19:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedBuffer.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedBuffer</code> decorates another <code>Buffer</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the collection, an IllegalArgumentException\n+ * If an object cannot be added to the collection, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 12:19:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedCollection.java,v 1.3 2003/05/11 13:14:51 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedCollection.java,v 1.4 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedCollection</code> decorates another <code>Collection</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the collection, an IllegalArgumentException\n+ * If an object cannot be added to the collection, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/05/11 13:14:51 $\n+ * @version $Revision: 1.4 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedList.java,v 1.3 2003/05/11 13:14:51 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedList.java,v 1.4 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedList</code> decorates another <code>List</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the list, an IllegalArgumentException\n+ * If an object cannot be added to the list, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/05/11 13:14:51 $\n+ * @version $Revision: 1.4 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.2 2003/05/09 18:33:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.3 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedMap</code> decorates another <code>Map</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the map, an IllegalArgumentException\n+ * If an object cannot be added to the map, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/09 18:33:27 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSet.java,v 1.1 2003/05/07 11:19:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSet.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedSet</code> decorates another <code>Set</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the set, an IllegalArgumentException\n+ * If an object cannot be added to the set, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 11:19:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedBag.java,v 1.1 2003/05/07 13:19:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedBag.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedSortedBag</code> decorates another <code>SortedBag</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the list, an IllegalArgumentException\n+ * If an object cannot be added to the list, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 13:19:18 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedMap.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedSortedMap</code> decorates another <code>SortedMap </code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the map, an IllegalArgumentException\n+ * If an object cannot be added to the map, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedSet.java,v 1.1 2003/05/07 11:19:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedSet.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>PredicatedSortedSet</code> decorates another <code>SortedSet</code>\n  * to validate additions match a specified predicate.\n  * <p>\n- * If an object cannot be addded to the set, an IllegalArgumentException\n+ * If an object cannot be added to the set, an IllegalArgumentException\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 11:19:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/decorators/TypedBag.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedBag.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedBag.java,v 1.3 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedBuffer.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedBuffer.java,v 1.1 2003/05/09 16:41:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedBuffer.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:41:57 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedCollection.java,v 1.4 2003/05/16 14:19:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedCollection.java,v 1.5 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/05/16 14:19:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedList.java,v 1.3 2003/05/09 16:41:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedList.java,v 1.4 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/05/09 16:41:56 $\n+ * @version $Revision: 1.4 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedMap.java,v 1.1 2003/05/09 16:42:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedMap.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSet.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSet.java,v 1.3 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedBag.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedBag.java,v 1.3 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedMap.java,v 1.2 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/decorators/TypedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedSet.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedSet.java,v 1.3 2003/08/31 12:56:23 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that elements added are of a specific type.\n  * <p>\n  * The validation of additions is performed via an instanceof test against \n- * a specified <code>Class</code>. If an object cannot be addded to the\n+ * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:56:23 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n--- a/src/java/org/apache/commons/collections/event/ModificationVetoedException.java\n+++ b/src/java/org/apache/commons/collections/event/ModificationVetoedException.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/ModificationVetoedException.java,v 1.1 2003/08/28 18:31:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/ModificationVetoedException.java,v 1.2 2003/08/31 12:57:03 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.event;\n \n /**\n- * Exception thrown when a modifcation to a collection is vetoed.\n- * It extends IllegalArgumentException for compatability with the collections API.\n+ * Exception thrown when a modification to a collection is vetoed.\n+ * It extends IllegalArgumentException for compatibility with the collections API.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/08/28 18:31:13 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:57:03 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/iterators/ProxyIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ProxyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyIterator.java,v 1.2 2003/01/15 21:49:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyIterator.java,v 1.3 2003/08/31 12:57:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @see ProxyListIterator\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.2 $ $Date: 2003/01/15 21:49:14 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:57:42 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  */\n      * Constructs a new <Code>ProxyIterator</Code> that will use the\n      * given iterator.\n      *\n-     * @param iterator  the underyling iterator\n+     * @param iterator  the underlying iterator\n      */\n     public ProxyIterator(Iterator iterator) {\n         super();\n--- a/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java,v 1.2 2003/01/15 21:49:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java,v 1.3 2003/08/31 12:57:42 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @see ProxyIterator\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.2 $ $Date: 2003/01/15 21:49:14 $\n+ * @version $Revision: 1.3 $ $Date: 2003/08/31 12:57:42 $\n  * \n  * @author Rodney Waldhoff\n  */\n     /**\n      *  Invokes the underlying {@link ListIterator#add(Object)} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public void add(Object o) {\n         getListIterator().add(o);\n     /**\n      *  Invokes the underlying {@link ListIterator#hasNext()} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public boolean hasNext() {\n         return getListIterator().hasNext();\n     /**\n      *  Invokes the underlying {@link ListIterator#hasPrevious()} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public boolean hasPrevious() {\n         return getListIterator().hasPrevious();\n     /**\n      *  Invokes the underlying {@link ListIterator#next()} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public Object next() {\n         return getListIterator().next();\n     /**\n      *  Invokes the underlying {@link ListIterator#nextIndex()} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public int nextIndex() {\n         return getListIterator().nextIndex();\n     /**\n      *  Invokes the underlying {@link ListIterator#previous()} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public Object previous() {\n         return getListIterator().previous();\n     /**\n      *  Invokes the underlying {@link ListIterator#previousIndex()} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public int previousIndex() {\n         return getListIterator().previousIndex();\n     /**\n      *  Invokes the underlying {@link ListIterator#remove()} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public void remove() {\n         getListIterator().remove();\n     /**\n      *  Invokes the underlying {@link ListIterator#set(Object)} method.\n      *\n-     *  @throws NullPointerException  if the underyling iterator is null\n+     *  @throws NullPointerException  if the underlying iterator is null\n      */\n     public void set(Object o) {\n         getListIterator().set(o);\n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.9 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.10 2003/08/31 12:59:57 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * Abstract base class for lists of primitive <Code>int</Code> elements\n  * backed by an array.<P>\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/01/11 21:28:02 $\n+ * @version $Revision: 1.10 $ $Date: 2003/08/31 12:59:57 $\n  * @author Rodney Waldhoff \n  * \n  * @deprecated An {@link IntList} implementation, such as {@link ArrayIntList} \n      *  Ensures that the length of the internal <Code>int</Code> array is\n      *  at list the given value.\n      *\n-     *  @param mincap  the minimum capcity for this list\n+     *  @param mincap  the minimum capacity for this list\n      */\n     abstract public void ensureCapacity(int mincap);\n \n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntList.java,v 1.6 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntList.java,v 1.7 2003/08/31 12:59:57 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * and returned from {@link #get(int)}.<p>\n  *\n  * Concrete implementations offer substantial memory savings by not storing\n- * primitives as wrapped objects.  If you excuslively use the primitive \n+ * primitives as wrapped objects.  If you exclusively use the primitive \n  * signatures, there can also be substantial performance gains, since \n  * temporary wrapper objects do not need to be created.<p>\n  *\n  * {@link #removeIntAt(int)} and {@link #clear()} methods.  You may want \n  * to override the other methods to increase performance.<P>\n  *\n- * @version $Revision: 1.6 $ $Date: 2003/01/11 21:28:02 $\n+ * @version $Revision: 1.7 $ $Date: 2003/08/31 12:59:57 $\n  * @author Rodney Waldhoff \n  * @deprecated To be replaced by {@link IntList}.  If useful, an adapter to this interface could be provided.\n  */\n--- a/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.8 2003/04/09 06:24:07 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.9 2003/08/31 12:59:57 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * primitive values will be stored in an underlying primitive array, and\n  * provides methods for manipulating the capacity of that array.<P>\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/04/09 06:24:07 $\n+ * @version $Revision: 1.9 $ $Date: 2003/08/31 12:59:57 $\n  * @author Rodney Waldhoff\n  *  \n  * @deprecated A {@link LongList} implementation, such as {@link ArrayLongList} \n      *  Ensures that the length of the internal <Code>long</Code> array is\n      *  at list the given value.\n      *\n-     *  @param mincap  the minimum capcity for this list\n+     *  @param mincap  the minimum capacity for this list\n      */\n     abstract public void ensureCapacity(int mincap);\n \n--- a/src/java/org/apache/commons/collections/primitives/AbstractLongList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongList.java,v 1.5 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongList.java,v 1.6 2003/08/31 12:59:57 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * and returned from {@link #get(int)}.<p>\n  *\n  * Concrete implementations offer substantial memory savings by not storing\n- * primitives as wrapped objects.  If you excuslively use the primitive \n+ * primitives as wrapped objects.  If you exclusively use the primitive \n  * signatures, there can also be substantial performance gains, since \n  * temporary wrapper objects do not need to be created.<p>\n  *\n  * {@link #removeLongAt(int)} and {@link #clear()} methods.  You may want \n  * to override the other methods to increase performance.<P>\n  *\n- * @version $Revision: 1.5 $ $Date: 2003/01/11 21:28:02 $\n+ * @version $Revision: 1.6 $ $Date: 2003/08/31 12:59:57 $\n  * @author Rodney Waldhoff \n  */\n public abstract class AbstractLongList extends AbstractList {\n--- a/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.9 2003/04/13 22:30:57 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.10 2003/08/31 12:59:57 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * primitive values will be stored in an underlying primitive array, and\n  * provides methods for manipulating the capacity of that array.<P>\n  *\n- * @version $Revision: 1.9 $ $Date: 2003/04/13 22:30:57 $\n+ * @version $Revision: 1.10 $ $Date: 2003/08/31 12:59:57 $\n  * @author Rodney Waldhoff \n  * @deprecated See {@link RandomAccessShortList}.\n  */\n      *  Ensures that the length of the internal <Code>short</Code> array is\n      *  at list the given value.\n      *\n-     *  @param mincap  the minimum capcity for this list\n+     *  @param mincap  the minimum capacity for this list\n      */\n     abstract public void ensureCapacity(int mincap);\n \n--- a/src/java/org/apache/commons/collections/primitives/AbstractShortList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortList.java,v 1.6 2003/04/11 22:01:25 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortList.java,v 1.7 2003/08/31 12:59:57 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * and returned from {@link #get(int)}.<p>\n  *\n  * Concrete implementations offer substantial memory savings by not storing\n- * primitives as wrapped objects.  If you excuslively use the primitive \n+ * primitives as wrapped objects.  If you exclusively use the primitive \n  * signatures, there can also be substantial performance gains, since \n  * temporary wrapper objects do not need to be created.<p>\n  *\n  * {@link #removeShortAt(int)} and {@link #clear()} methods.  You may want \n  * to override the other methods to increase performance.<P>\n  *\n- * @version $Revision: 1.6 $ $Date: 2003/04/11 22:01:25 $\n+ * @version $Revision: 1.7 $ $Date: 2003/08/31 12:59:57 $\n  * @author Rodney Waldhoff \n  * @deprecated See {@link ShortList}.\n  */\n--- a/src/java/org/apache/commons/collections/primitives/FloatArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/FloatArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/FloatArrayList.java,v 1.8 2003/04/13 23:05:35 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/FloatArrayList.java,v 1.9 2003/08/31 12:59:57 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * {@link java.util.ArrayList} of {@link Float} values and allows for\n  * better compile-time type checking.<P>\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/04/13 23:05:35 $\n+ * @version $Revision: 1.9 $ $Date: 2003/08/31 12:59:57 $\n  * @author Rodney Waldhoff \n  * @deprecated See {@link FloatList}\n  */\n      *  Ensures that the internal array is big enough to hold the specified\n      *  number of elements.\n      *\n-     *  @param mincap  the minium capacity\n+     *  @param mincap  the minimum capacity\n      */\n     public void ensureCapacity(int mincap) {\n         modCount++;\n--- a/src/java/org/apache/commons/collections/primitives/adapters/io/InputStreamByteIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/io/InputStreamByteIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/io/Attic/InputStreamByteIterator.java,v 1.1 2003/04/15 03:07:50 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/io/Attic/InputStreamByteIterator.java,v 1.2 2003/08/31 12:58:19 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n /**\n  * Adapts an {@link InputStream} to the {@link ByteIterator} interface.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/04/15 03:07:50 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:58:19 $\n  * @author Rodney Waldhoff\n  */\n public class InputStreamByteIterator implements ByteIterator {\n             next = stream.read();\n             nextAvailable = true;\n         } catch(IOException e) {\n-            // TODO: Fix me using tunneled exception, see \n+            // TODO: Fix me using tunnelled exception, see \n             // http://radio.weblogs.com/0122027/2003/04/01.html#a7\n             // for example            \n             throw new RuntimeException(e.toString());\n--- a/src/java/org/apache/commons/collections/primitives/adapters/io/ReaderCharIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/io/ReaderCharIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/io/Attic/ReaderCharIterator.java,v 1.1 2003/04/16 19:45:13 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/io/Attic/ReaderCharIterator.java,v 1.2 2003/08/31 12:58:19 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n /**\n  * Adapts a {@link Reader} to the {@link CharIterator} interface.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/04/16 19:45:13 $\n+ * @version $Revision: 1.2 $ $Date: 2003/08/31 12:58:19 $\n  * @author Rodney Waldhoff\n  */\n public class ReaderCharIterator implements CharIterator {\n             next = reader.read();\n             nextAvailable = true;\n         } catch(IOException e) {\n-            // TODO: Fix me using tunneled exception, see \n+            // TODO: Fix me using tunnelled exception, see \n             // http://radio.weblogs.com/0122027/2003/04/01.html#a7\n             // for example            \n             throw new RuntimeException(e.toString());\n--- a/src/test/org/apache/commons/collections/BulkTest.java\n+++ b/src/test/org/apache/commons/collections/BulkTest.java\n  *  interpret bulk test methods.\n  *\n  *  @author Paul Jack\n- *  @version $Id: BulkTest.java,v 1.3 2003/02/19 20:33:11 scolebourne Exp $\n+ *  @version $Id: BulkTest.java,v 1.4 2003/08/31 13:09:53 scolebourne Exp $\n  */\n public class BulkTest extends TestCase implements Cloneable {\n \n     // Note:  BulkTest is Cloneable to make it easier to construct \n     // BulkTest instances for simple test methods that are defined in \n     // anonymous inner classes.  Basically we don't have to worry about\n-    // finding wierd constructors.  (And even if we found them, techinically\n+    // finding weird constructors.  (And even if we found them, technically\n     // it'd be illegal for anyone but the outer class to invoke them).  \n     // Given one BulkTest instance, we can just clone it and reset the \n     // method name for every simple test it defines.  \n      *  Adds the simple test defined by the given method to the TestSuite.\n      *\n      *  @param bulk  The instance of the class that defined the method\n-     *   (I know it's wierd.  But the point is, we can clone the instance\n+     *   (I know it's weird.  But the point is, we can clone the instance\n      *   and not have to worry about constructors.)\n      *  @param m  The simple test method\n      */\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.15 2003/04/04 22:22:28 scolebourne Exp $\n- * $Revision: 1.15 $\n- * $Date: 2003/04/04 22:22:28 $\n+ * $Id: TestCollectionUtils.java,v 1.16 2003/08/31 13:09:53 scolebourne Exp $\n+ * $Revision: 1.16 $\n+ * $Date: 2003/08/31 13:09:53 $\n  *\n  * ====================================================================\n  *\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * \n- * @version $Revision: 1.15 $ $Date: 2003/04/04 22:22:28 $\n+ * @version $Revision: 1.16 $ $Date: 2003/08/31 13:09:53 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         Collection colb = new ArrayList();\n         \n         // ...which contain elta and eltb, \n-        // repsectively.\n+        // respectively.\n         cola.add(elta);\n         colb.add(eltb);\n         \n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.6 2003/08/24 11:29:52 scolebourne Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/08/24 11:29:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.7 2003/08/31 13:09:53 scolebourne Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/08/31 13:09:53 $\n  *\n  * ====================================================================\n  *\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n  * @author Mohan Kishore\n  * @author Stephen Colebourne\n- * @version $Id: TestExtendedProperties.java,v 1.6 2003/08/24 11:29:52 scolebourne Exp $\n+ * @version $Id: TestExtendedProperties.java,v 1.7 2003/08/31 13:09:53 scolebourne Exp $\n  */\n public class TestExtendedProperties extends TestCase {\n     protected ExtendedProperties eprop = new ExtendedProperties();\n \n     public void testRetrieve() {\n         /*\n-         * should be emptry and return null\n+         * should be empty and return null\n          */\n         assertEquals(\"This returns null\", eprop.getProperty(\"foo\"), null);\n \n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.24 2003/07/12 15:47:53 scolebourne Exp $\n- * $Revision: 1.24 $\n- * $Date: 2003/07/12 15:47:53 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.25 2003/08/31 13:09:53 scolebourne Exp $\n+ * $Revision: 1.25 $\n+ * $Date: 2003/08/31 13:09:53 $\n  *\n  * ====================================================================\n  *\n  * operations, simply extend this class, and implement the {@link\n  * #makeEmptyMap()} method.\n  * <p>\n- * On the other hand, if your map implemenation is wierd, you may have to\n+ * On the other hand, if your map implementation is weird, you may have to\n  * override one or more of the other protected methods.  They're described\n  * below.<P>\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n- * @version $Revision: 1.24 $ $Date: 2003/07/12 15:47:53 $\n+ * @version $Revision: 1.25 $ $Date: 2003/08/31 13:09:53 $\n  */\n public abstract class TestMap extends TestObject {\n \n     /**\n      *  Returns the set of values in the mappings used to test the map.  This\n      *  method must return an array with the same length as {@link\n-     *  #getSampleKeys()}.  The default implementation contructs a set of\n+     *  #getSampleKeys()}.  The default implementation constructs a set of\n      *  String values and includes a single null value if {@link\n      *  #useNullValue()} returns <code>true</code>, and includes two values\n      *  that are the same if {@link #useDuplicateValues()} returns\n \t    assertTrue(\"Map should contain new value after put\",\n \t\t       map.containsValue(newValues[i]));\n \n-\t    // if duplicates are allowed, we're not guarunteed that the value\n+\t    // if duplicates are allowed, we're not guaranteed that the value\n \t    // no longer exists, so don't try checking that.\n \t    if(!useDuplicateValues()) {\n \t\tassertTrue(\"Map should not contain old value after second put\",\n         //assertEquals(\"Map should still equal HashMap\", confirmed, map);\n         // this works though and performs the same verification:\n         assertTrue(\"Map should still equal HashMap\", map.equals(confirmed));\n-        // TODO: this should really be rexamined to figure out why LRU map\n+        // TODO: this should really be reexamined to figure out why LRU map\n         // behaves like it does (the equals shouldn't modify since all accesses\n         // by the confirmed collection should be through an iterator, thus not\n         // causing LRUMap to change).\n--- a/src/test/org/apache/commons/collections/TestObject.java\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.20 2003/02/26 01:33:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.21 2003/08/31 13:09:53 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Rodney Waldhoff\n  * @author Anonymous\n  * \n- * @version $Revision: 1.20 $ $Date: 2003/02/26 01:33:22 $\n+ * @version $Revision: 1.21 $ $Date: 2003/08/31 13:09:53 $\n  */\n public abstract class TestObject extends BulkTest {\n \n \n     /**\n      * Reads a Serialized or Externalized Object from disk.\n-     * Useful for creating compatibility tests betweeen\n+     * Useful for creating compatibility tests between\n      * different CVS versions of the same class\n      * \n      * @param path path to the serialized Object\n--- a/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n                          origEntry.getKey(), copiedEntry.getKey());\n             assertEquals(\"Cloned value does not match original\",\n                          origEntry.getValue(), copiedEntry.getValue());\n-            assertEquals(\"Cloned entry does not match orginal\",\n+            assertEquals(\"Cloned entry does not match original\",\n                          origEntry, copiedEntry);\n         }\n         assertTrue(\"iterator() returned different number of elements than keys()\",", "timestamp": 1062335393, "metainfo": ""}