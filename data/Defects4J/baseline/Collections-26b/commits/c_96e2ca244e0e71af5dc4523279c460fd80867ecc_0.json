{"sha": "96e2ca244e0e71af5dc4523279c460fd80867ecc", "log": "rename _a/_b to collectionA/collectionB   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.28 2003/10/09 11:00:09 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.29 2003/10/09 11:03:55 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.28 $ $Date: 2003/10/09 11:00:09 $\n+ * @version $Revision: 1.29 $ $Date: 2003/10/09 11:03:55 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    private Collection _a = null;\n-    private Collection _b = null;\n+    private Collection collectionA = null;\n+    private Collection collectionB = null;\n \n     public void setUp() {\n-        _a = new ArrayList();\n-        _a.add(\"a\");\n-        _a.add(\"b\");\n-        _a.add(\"b\");\n-        _a.add(\"c\");\n-        _a.add(\"c\");\n-        _a.add(\"c\");\n-        _a.add(\"d\");\n-        _a.add(\"d\");\n-        _a.add(\"d\");\n-        _a.add(\"d\");\n-        _b = new LinkedList();\n-        _b.add(\"e\");\n-        _b.add(\"d\");\n-        _b.add(\"d\");\n-        _b.add(\"c\");\n-        _b.add(\"c\");\n-        _b.add(\"c\");\n-        _b.add(\"b\");\n-        _b.add(\"b\");\n-        _b.add(\"b\");\n-        _b.add(\"b\");\n+        collectionA = new ArrayList();\n+        collectionA.add(\"a\");\n+        collectionA.add(\"b\");\n+        collectionA.add(\"b\");\n+        collectionA.add(\"c\");\n+        collectionA.add(\"c\");\n+        collectionA.add(\"c\");\n+        collectionA.add(\"d\");\n+        collectionA.add(\"d\");\n+        collectionA.add(\"d\");\n+        collectionA.add(\"d\");\n+        collectionB = new LinkedList();\n+        collectionB.add(\"e\");\n+        collectionB.add(\"d\");\n+        collectionB.add(\"d\");\n+        collectionB.add(\"c\");\n+        collectionB.add(\"c\");\n+        collectionB.add(\"c\");\n+        collectionB.add(\"b\");\n+        collectionB.add(\"b\");\n+        collectionB.add(\"b\");\n+        collectionB.add(\"b\");\n \n     }\n \n     public void testGetCardinalityMap() {\n-        Map freq = CollectionUtils.getCardinalityMap(_a);\n+        Map freq = CollectionUtils.getCardinalityMap(collectionA);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n         assertEquals(new Integer(2),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n         assertEquals(new Integer(4),freq.get(\"d\"));\n         assertNull(freq.get(\"e\"));\n \n-        freq = CollectionUtils.getCardinalityMap(_b);\n+        freq = CollectionUtils.getCardinalityMap(collectionB);\n         assertNull(freq.get(\"a\"));\n         assertEquals(new Integer(4),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n     }\n \n     public void testCardinality() {\n-        assertEquals(1,CollectionUtils.cardinality(\"a\",_a));\n-        assertEquals(2,CollectionUtils.cardinality(\"b\",_a));\n-        assertEquals(3,CollectionUtils.cardinality(\"c\",_a));\n-        assertEquals(4,CollectionUtils.cardinality(\"d\",_a));\n-        assertEquals(0,CollectionUtils.cardinality(\"e\",_a));\n-\n-        assertEquals(0,CollectionUtils.cardinality(\"a\",_b));\n-        assertEquals(4,CollectionUtils.cardinality(\"b\",_b));\n-        assertEquals(3,CollectionUtils.cardinality(\"c\",_b));\n-        assertEquals(2,CollectionUtils.cardinality(\"d\",_b));\n-        assertEquals(1,CollectionUtils.cardinality(\"e\",_b));\n+        assertEquals(1,CollectionUtils.cardinality(\"a\",collectionA));\n+        assertEquals(2,CollectionUtils.cardinality(\"b\",collectionA));\n+        assertEquals(3,CollectionUtils.cardinality(\"c\",collectionA));\n+        assertEquals(4,CollectionUtils.cardinality(\"d\",collectionA));\n+        assertEquals(0,CollectionUtils.cardinality(\"e\",collectionA));\n+\n+        assertEquals(0,CollectionUtils.cardinality(\"a\",collectionB));\n+        assertEquals(4,CollectionUtils.cardinality(\"b\",collectionB));\n+        assertEquals(3,CollectionUtils.cardinality(\"c\",collectionB));\n+        assertEquals(2,CollectionUtils.cardinality(\"d\",collectionB));\n+        assertEquals(1,CollectionUtils.cardinality(\"e\",collectionB));\n     }\n     \n     public void testCardinalityOfNull() {\n     }\n \n     public void testUnion() {\n-        Collection col = CollectionUtils.union(_a,_b);\n+        Collection col = CollectionUtils.union(collectionA,collectionB);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n         assertEquals(new Integer(4),freq.get(\"b\"));\n         assertEquals(new Integer(4),freq.get(\"d\"));\n         assertEquals(new Integer(1),freq.get(\"e\"));\n \n-        Collection col2 = CollectionUtils.union(_b,_a);\n+        Collection col2 = CollectionUtils.union(collectionB,collectionA);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertEquals(new Integer(1),freq2.get(\"a\"));\n         assertEquals(new Integer(4),freq2.get(\"b\"));\n     }\n \n     public void testIntersection() {\n-        Collection col = CollectionUtils.intersection(_a,_b);\n+        Collection col = CollectionUtils.intersection(collectionA,collectionB);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertNull(freq.get(\"a\"));\n         assertEquals(new Integer(2),freq.get(\"b\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n         assertNull(freq.get(\"e\"));\n \n-        Collection col2 = CollectionUtils.intersection(_b,_a);\n+        Collection col2 = CollectionUtils.intersection(collectionB,collectionA);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertNull(freq2.get(\"a\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n     }\n \n     public void testDisjunction() {\n-        Collection col = CollectionUtils.disjunction(_a,_b);\n+        Collection col = CollectionUtils.disjunction(collectionA,collectionB);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n         assertEquals(new Integer(2),freq.get(\"b\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n         assertEquals(new Integer(1),freq.get(\"e\"));\n \n-        Collection col2 = CollectionUtils.disjunction(_b,_a);\n+        Collection col2 = CollectionUtils.disjunction(collectionB,collectionA);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertEquals(new Integer(1),freq2.get(\"a\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n     }\n \n     public void testDisjunctionAsUnionMinusIntersection() {\n-        Collection dis = CollectionUtils.disjunction(_a,_b);\n-        Collection un = CollectionUtils.union(_a,_b);\n-        Collection inter = CollectionUtils.intersection(_a,_b);\n+        Collection dis = CollectionUtils.disjunction(collectionA,collectionB);\n+        Collection un = CollectionUtils.union(collectionA,collectionB);\n+        Collection inter = CollectionUtils.intersection(collectionA,collectionB);\n         assertTrue(CollectionUtils.isEqualCollection(dis,CollectionUtils.subtract(un,inter)));\n     }\n \n     public void testDisjunctionAsSymmetricDifference() {\n-        Collection dis = CollectionUtils.disjunction(_a,_b);\n-        Collection amb = CollectionUtils.subtract(_a,_b);\n-        Collection bma = CollectionUtils.subtract(_b,_a);\n+        Collection dis = CollectionUtils.disjunction(collectionA,collectionB);\n+        Collection amb = CollectionUtils.subtract(collectionA,collectionB);\n+        Collection bma = CollectionUtils.subtract(collectionB,collectionA);\n         assertTrue(CollectionUtils.isEqualCollection(dis,CollectionUtils.union(amb,bma)));\n     }\n \n     public void testSubtract() {\n-        Collection col = CollectionUtils.subtract(_a,_b);\n+        Collection col = CollectionUtils.subtract(collectionA,collectionB);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n         assertNull(freq.get(\"b\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n         assertNull(freq.get(\"e\"));\n \n-        Collection col2 = CollectionUtils.subtract(_b,_a);\n+        Collection col2 = CollectionUtils.subtract(collectionB,collectionA);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertEquals(new Integer(1),freq2.get(\"e\"));\n         assertNull(freq2.get(\"d\"));\n     }\n \n     public void testIsSubCollectionOfSelf() {\n-        assertTrue(CollectionUtils.isSubCollection(_a,_a));\n-        assertTrue(CollectionUtils.isSubCollection(_b,_b));\n+        assertTrue(CollectionUtils.isSubCollection(collectionA,collectionA));\n+        assertTrue(CollectionUtils.isSubCollection(collectionB,collectionB));\n     }\n \n     public void testIsSubCollection() {\n-        assertTrue(!CollectionUtils.isSubCollection(_a,_b));\n-        assertTrue(!CollectionUtils.isSubCollection(_b,_a));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,collectionB));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionB,collectionA));\n     }\n \n     public void testIsSubCollection2() {\n         Collection c = new ArrayList();\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"a\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"b\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"b\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"c\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"c\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"c\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"d\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"d\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"d\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(!CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(!CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"d\");\n-        assertTrue(CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(CollectionUtils.isSubCollection(collectionA,c));\n         c.add(\"e\");\n-        assertTrue(!CollectionUtils.isSubCollection(c,_a));\n-        assertTrue(CollectionUtils.isSubCollection(_a,c));\n+        assertTrue(!CollectionUtils.isSubCollection(c,collectionA));\n+        assertTrue(CollectionUtils.isSubCollection(collectionA,c));\n     }\n \n     public void testIsEqualCollectionToSelf() {\n-        assertTrue(CollectionUtils.isEqualCollection(_a,_a));\n-        assertTrue(CollectionUtils.isEqualCollection(_b,_b));\n+        assertTrue(CollectionUtils.isEqualCollection(collectionA,collectionA));\n+        assertTrue(CollectionUtils.isEqualCollection(collectionB,collectionB));\n     }\n \n     public void testIsEqualCollection() {\n-        assertTrue(!CollectionUtils.isEqualCollection(_a,_b));\n-        assertTrue(!CollectionUtils.isEqualCollection(_b,_a));\n+        assertTrue(!CollectionUtils.isEqualCollection(collectionA,collectionB));\n+        assertTrue(!CollectionUtils.isEqualCollection(collectionB,collectionA));\n     }\n \n     public void testIsEqualCollection2() {\n         a.add(\"1\");\n         assertTrue(CollectionUtils.isProperSubCollection(b,a));\n         assertTrue(CollectionUtils.isProperSubCollection(\n-            CollectionUtils.intersection(_a, _b), _a));\n+            CollectionUtils.intersection(collectionA, collectionB), collectionA));\n         assertTrue(CollectionUtils.isProperSubCollection(\n             CollectionUtils.subtract(a, b), a));\n         assertTrue(!CollectionUtils.isProperSubCollection(\n     \n     public void testFind() {\n         Predicate testPredicate = PredicateUtils.equalPredicate(\"d\");\n-        Object test = CollectionUtils.find(_a, testPredicate);\n+        Object test = CollectionUtils.find(collectionA, testPredicate);\n         assertTrue(test.equals(\"d\"));\n         testPredicate = PredicateUtils.equalPredicate(\"de\");\n-        test = CollectionUtils.find(_a, testPredicate);\n+        test = CollectionUtils.find(collectionA, testPredicate);\n         assertTrue(test == null);\n         assertEquals(CollectionUtils.find(null,testPredicate), null);\n-        assertEquals(CollectionUtils.find(_a, null), null);\n+        assertEquals(CollectionUtils.find(collectionA, null), null);\n     }\n     \n     public void testForAllDo() {\n         Closure testClosure = ClosureUtils.invokerClosure(\"clear\");\n         Collection col = new ArrayList();\n-        col.add(_a);\n-        col.add(_b);\n+        col.add(collectionA);\n+        col.add(collectionB);\n         CollectionUtils.forAllDo(col, testClosure);\n-        assertTrue(_a.isEmpty() && _b.isEmpty());\n+        assertTrue(collectionA.isEmpty() && collectionB.isEmpty());\n         CollectionUtils.forAllDo(col, null);\n-        assertTrue(_a.isEmpty() && _b.isEmpty());\n+        assertTrue(collectionA.isEmpty() && collectionB.isEmpty());\n         CollectionUtils.forAllDo(null, testClosure);\n         col.add(null);\n         // null should be OK\n     \n     public void testCollect() {\n         Transformer transformer = TransformerUtils.constantTransformer(\"z\");\n-        Collection collection = CollectionUtils.collect(_a, transformer);\n-        assertTrue(collection.size() == _a.size());\n-        assertTrue(_a.contains(\"a\") && ! _a.contains(\"z\"));\n+        Collection collection = CollectionUtils.collect(collectionA, transformer);\n+        assertTrue(collection.size() == collectionA.size());\n+        assertTrue(collectionA.contains(\"a\") && ! collectionA.contains(\"z\"));\n         assertTrue(collection.contains(\"z\") && !collection.contains(\"a\"));\n         \n         collection = new ArrayList();\n-        CollectionUtils.collect(_a, transformer, collection);\n-        assertTrue(collection.size() == _a.size());\n-        assertTrue(_a.contains(\"a\") && ! _a.contains(\"z\"));\n+        CollectionUtils.collect(collectionA, transformer, collection);\n+        assertTrue(collection.size() == collectionA.size());\n+        assertTrue(collectionA.contains(\"a\") && ! collectionA.contains(\"z\"));\n         assertTrue(collection.contains(\"z\") && !collection.contains(\"a\"));\n         \n         Iterator iterator = null;\n         collection = new ArrayList();\n         CollectionUtils.collect(iterator, transformer, collection);\n         \n-        iterator = _a.iterator();\n+        iterator = collectionA.iterator();\n         CollectionUtils.collect(iterator, transformer, collection);\n-        assertTrue(collection.size() == _a.size());\n-        assertTrue(_a.contains(\"a\") && ! _a.contains(\"z\"));\n+        assertTrue(collection.size() == collectionA.size());\n+        assertTrue(collectionA.contains(\"a\") && ! collectionA.contains(\"z\"));\n         assertTrue(collection.contains(\"z\") && !collection.contains(\"a\")); \n         \n-        iterator = _a.iterator();\n+        iterator = collectionA.iterator();\n         collection = CollectionUtils.collect(iterator, transformer);\n-        assertTrue(collection.size() == _a.size());\n+        assertTrue(collection.size() == collectionA.size());\n         assertTrue(collection.contains(\"z\") && !collection.contains(\"a\")); \n         collection = CollectionUtils.collect((Iterator) null, (Transformer) null);\n         assertTrue(collection.size() == 0);\n            \n-        int size = _a.size();\n-        CollectionUtils.collect((Collection) null, transformer, _a);\n-        assertTrue(_a.size() == size && _a.contains(\"a\"));\n-        CollectionUtils.collect(_b, null, _a);\n-        assertTrue(_a.size() == size && _a.contains(\"a\"));\n+        int size = collectionA.size();\n+        CollectionUtils.collect((Collection) null, transformer, collectionA);\n+        assertTrue(collectionA.size() == size && collectionA.contains(\"a\"));\n+        CollectionUtils.collect(collectionB, null, collectionA);\n+        assertTrue(collectionA.size() == size && collectionA.contains(\"a\"));\n         \n     }\n ", "timestamp": 1065697435, "metainfo": ""}