{"sha": "b943acfc64147d49bbb97b4c1903dd4707a96774", "log": "Rename HashBidiMap to DualHashBidiMap Add AbstractDualBidiMap Test and fix bugs   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.decorators.AbstractCollectionDecorator;\n+import org.apache.commons.collections.decorators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.decorators.AbstractMapEntryDecorator;\n+\n+/**\n+ * Abstract <code>BidiMap</code> implemented using two maps.\n+ * <p>\n+ * An implementation can be written simply by implementing the\n+ * <code>createMap</code> method.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Id: AbstractDualBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * \n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractDualBidiMap implements BidiMap {\n+\n+    /**\n+     * Delegate map array.  The first map contains standard entries, and the \n+     * second contains inverses.\n+     */\n+    protected transient final Map[] maps = new Map[2];\n+    /**\n+     * Inverse view of this map.\n+     */\n+    protected transient BidiMap inverseBidiMap = null;\n+    /**\n+     * View of the keys.\n+     */\n+    protected transient Set keySet = null;\n+    /**\n+     * View of the entries.\n+     */\n+    protected transient Set entrySet = null;\n+\n+    /**\n+     * Creates an empty map.\n+     * <p>\n+     * The maps passed in are not validated, so subclasses need to ensure\n+     * that they are non-null, empty and compatible.\n+     * \n+     * @param normalMap  the normal direction map\n+     * @param reverseMap  the reverse direction map\n+     */\n+    protected AbstractDualBidiMap(Map normalMap, Map reverseMap) {\n+        super();\n+        maps[0] = normalMap;\n+        maps[1] = reverseMap;\n+    }\n+\n+    /** \n+     * Constructs a map that decorates the specified maps.\n+     *\n+     * @param normalMap  the normal direction map\n+     * @param reverseMap  the reverse direction map\n+     * @param inverseBidiMap  the inverse BidiMap\n+     */\n+    protected AbstractDualBidiMap(Map normalMap, Map reverseMap, BidiMap inverseBidiMap) {\n+        super();\n+        maps[0] = normalMap;\n+        maps[1] = reverseMap;\n+        this.inverseBidiMap = inverseBidiMap;\n+    }\n+    \n+    /**\n+     * Creates a new instance of the subclass.\n+     * \n+     * @param normalMap  the normal direction map\n+     * @param reverseMap  the reverse direction map\n+     * @param inverseMap  this map, which is the inverse in the new map\n+     * @return the inverse map\n+     */\n+    protected abstract BidiMap createBidiMap(Map normalMap, Map reverseMap, BidiMap inverseMap);\n+\n+    // Map delegation\n+    //-----------------------------------------------------------------------\n+    public Object get(Object key) {\n+        return maps[0].get(key);\n+    }\n+\n+    public int size() {\n+        return maps[0].size();\n+    }\n+\n+    public boolean isEmpty() {\n+        return maps[0].isEmpty();\n+    }\n+\n+    public boolean containsKey(Object key) {\n+        return maps[0].containsKey(key);\n+    }\n+\n+    public boolean equals(Object obj) {\n+        return maps[0].equals(obj);\n+    }\n+\n+    public int hashCode() {\n+        return maps[0].hashCode();\n+    }\n+\n+    public String toString() {\n+        return maps[0].toString();\n+    }\n+\n+    // BidiMap changes\n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        if (maps[0].containsKey(key)) {\n+            maps[1].remove(maps[0].get(key));\n+        }\n+        if (maps[1].containsKey(value)) {\n+            maps[0].remove(maps[1].get(value));\n+        }\n+        final Object obj = maps[0].put(key, value);\n+        maps[1].put(value, key);\n+        return obj;\n+    }\n+    \n+    public void putAll(Map map) {\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            put(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    public Object remove(Object key) {\n+        Object value = null;\n+        if (maps[0].containsKey(key)) {\n+            value = maps[0].remove(key);\n+            maps[1].remove(value);\n+        }\n+        return value;\n+    }\n+\n+    public void clear() {\n+        maps[0].clear();\n+        maps[1].clear();\n+    }\n+\n+    public boolean containsValue(Object value) {\n+        return maps[1].containsKey(value);\n+    }\n+\n+    // BidiMap\n+    //-----------------------------------------------------------------------\n+    public Object getKey(Object value) {\n+        return maps[1].get(value);\n+    }\n+\n+    public Object removeKey(Object value) {\n+        Object key = null;\n+        if (maps[1].containsKey(value)) {\n+            key = maps[1].remove(value);\n+            maps[0].remove(key);\n+        }\n+        return key;\n+    }\n+\n+    public BidiMap inverseBidiMap() {\n+        if (inverseBidiMap == null) {\n+            inverseBidiMap = createBidiMap(maps[1], maps[0], this);\n+        }\n+        return inverseBidiMap;\n+    }\n+    \n+    // Map views\n+    //-----------------------------------------------------------------------\n+    public Set keySet() {\n+        if (keySet == null) {\n+            keySet = new KeySet(this);\n+        }\n+        return keySet;\n+    }\n+\n+    public Collection values() {\n+        return inverseBidiMap().keySet();\n+    }\n+\n+    public Set entrySet() {\n+        if (entrySet == null) {\n+            entrySet = new EntrySet(this);\n+        }\n+        return entrySet;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Inner class View.\n+     */\n+    protected static abstract class View extends AbstractCollectionDecorator {\n+        \n+        protected final AbstractDualBidiMap map;\n+        \n+        protected View(Collection coll, AbstractDualBidiMap map) {\n+            super(coll);\n+            this.map = map;\n+        }\n+\n+        public boolean removeAll(Collection coll) {\n+            if (map.isEmpty() || coll.isEmpty()) {\n+                return false;\n+            }\n+            boolean modified = false;\n+            Iterator it = iterator();\n+            while (it.hasNext()) {\n+                if (coll.contains(it.next())) {\n+                    it.remove();\n+                    modified = true;\n+                }\n+            }\n+            return modified;\n+        }\n+\n+        public boolean retainAll(Collection coll) {\n+            if (map.isEmpty()) {\n+                return false;\n+            }\n+            if (coll.isEmpty()) {\n+                map.clear();\n+                return true;\n+            }\n+            boolean modified = false;\n+            Iterator it = iterator();\n+            while (it.hasNext()) {\n+                if (coll.contains(it.next()) == false) {\n+                    it.remove();\n+                    modified = true;\n+                }\n+            }\n+            return modified;\n+        }\n+\n+        public void clear() {\n+            map.clear();\n+        }\n+    }\n+    \n+    /**\n+     * Inner class KeySet.\n+     */\n+    protected static class KeySet extends View implements Set {\n+        \n+        protected KeySet(AbstractDualBidiMap map) {\n+            super(map.maps[0].keySet(), map);\n+        }\n+\n+        public Iterator iterator() {\n+            return new KeySetIterator(super.iterator(), map);\n+        }\n+        \n+        public boolean remove(Object key) {\n+            if (contains(key)) {\n+                Object value = map.maps[0].remove(key);\n+                map.maps[1].remove(value);\n+                return true;\n+            }\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * Inner class KeySetIterator.\n+     */\n+    protected static class KeySetIterator extends AbstractIteratorDecorator {\n+        \n+        private final AbstractDualBidiMap map;\n+        private Object last;\n+        \n+        protected KeySetIterator(Iterator iterator, AbstractDualBidiMap map) {\n+            super(iterator);\n+            this.map = map;\n+        }\n+        \n+        public Object next() {\n+            last = super.next();\n+            return last;\n+        }\n+        \n+        public void remove() {\n+            Object value = map.maps[0].get(last);\n+            super.remove();\n+            map.maps[1].remove(value);\n+            last = null;\n+        }\n+    }\n+\n+    /**\n+     * Inner class EntrySet.\n+     */\n+    protected static class EntrySet extends View implements Set {\n+        \n+        protected EntrySet(AbstractDualBidiMap map) {\n+            super(map.maps[0].entrySet(), map);\n+        }\n+\n+        public Iterator iterator() {\n+            return new EntrySetIterator(super.iterator(), map);\n+        }\n+        \n+        public boolean remove(Object obj) {\n+            if (obj instanceof Map.Entry == false) {\n+                return false;\n+            }\n+            Map.Entry entry = (Map.Entry) obj;\n+            if (map.containsKey(entry.getKey())) {\n+                Object value = map.maps[0].remove(entry.getKey());\n+                map.maps[1].remove(value);\n+                return true;\n+            }\n+            return false;\n+        }\n+    }\n+    \n+    /**\n+     * Inner class EntrySetIterator.\n+     */\n+    protected static class EntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        private final AbstractDualBidiMap map;\n+        private Map.Entry last;\n+        \n+        protected EntrySetIterator(Iterator iterator, AbstractDualBidiMap map) {\n+            super(iterator);\n+            this.map = map;\n+        }\n+        \n+        public Object next() {\n+            last = new MapEntry((Map.Entry) super.next(), map);\n+            return last;\n+        }\n+        \n+        public void remove() {\n+            super.remove();\n+            map.maps[1].remove(last.getValue());\n+            last = null;\n+        }\n+    }\n+\n+    /**\n+     * Inner class MapEntry.\n+     */\n+    protected static class MapEntry extends AbstractMapEntryDecorator {\n+        \n+        protected final AbstractDualBidiMap map;\n+        \n+        protected MapEntry(Map.Entry entry, AbstractDualBidiMap map) {\n+            super(entry);\n+            this.map = map;\n+        }\n+        \n+        public Object setValue(Object value) {\n+            final Object oldValue = super.setValue(value);\n+\n+            // Gets old key and pairs with new value\n+            final Object inverseKey = map.maps[1].remove(oldValue);\n+            map.maps[1].put(value, inverseKey);\n+\n+            return oldValue;\n+        }\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.2 2003/10/05 20:38:55 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.3 2003/10/06 23:47:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Defines a map that allows bidirectional lookup between key and values.\n  * <p>\n+ * This extended <code>Map</code> represents a mapping where a key may\n+ * lookup a value and a value may lookup a key with equal ease.\n+ * Th interface extends <code>Map</code> and so may be used anywhere a map\n+ * is required. The interface provides an inverse map view, enabling\n+ * full access to both directions of the <code>BidiMap</code>.\n+ * <p>\n  * Implementations should allow a value to be looked up from a key and\n  * a key to be looked up from a value with equal performance.\n- *  \n+ * It should be noted that the quickest way to implement the <code>values</code>\n+ * method is usually to return <code>inverseBidiMap().keySet()</code>.\n+ * \n+ * @see org.apache.commons.collections.DualHashBidiMap\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/05 20:38:55 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/06 23:47:17 $\n  *\n  * @author Stephen Colebourne\n  */\n      * against a different key. That mapping is removed, to ensure that the\n      * value only occurs once in the inverse map.\n      * <pre>\n-     *  BidiMap map1 = new HashBidiMap();\n+     *  BidiMap map1 = new DualHashBidiMap();\n      *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n      *  map.put(\"A\",\"C\");  // contains A mapped to C, as per Map\n      * \n-     *  BidiMap map2 = new HashBidiMap();\n+     *  BidiMap map2 = new DualHashBidiMap();\n      *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n      *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n      * </pre>\n      * @throws NullPointerException (optional) if the map limits the values to\n      *  non-null and null was specified\n      */\n-    public Object put(Object key, Object value);\n+    Object put(Object key, Object value);\n     \n     /**\n      * Gets the key that is currently mapped to the specified value.\n      * @throws NullPointerException (optional) if the map limits the values to\n      *  non-null and null was specified\n      */\n-    public Object getKey(Object value);\n+    Object getKey(Object value);\n     \n     /**\n      * Removes the key-value pair that is currently mapped to the specified\n      * @throws UnsupportedOperationException if this method is not supported\n      *  by the implementation\n      */\n-    public Object removeKey(Object value);\n+    Object removeKey(Object value);\n     \n     /**\n      * Gets a view of this map where the keys and values are reversed.\n      *\n      * @return an inverted bidirectional map\n      */\n-    public BidiMap inverseBidiMap();\n+    BidiMap inverseBidiMap();\n     \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/DualHashBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/DualHashBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of <code>BidiMap</code> that uses two <code>HashMap</code> instances.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Id: DualHashBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * \n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ */\n+public class DualHashBidiMap extends AbstractDualBidiMap {\n+\n+    /**\n+     * Creates an empty <code>HashBidiMap</code>\n+     */\n+    public DualHashBidiMap() {\n+        super(new HashMap(), new HashMap());\n+    }\n+\n+    /** \n+     * Constructs a <code>HashBidiMap</code> and copies the mappings from\n+     * specified <code>Map</code>.  \n+     *\n+     * @param map  the map whose mappings are to be placed in this map\n+     */\n+    public DualHashBidiMap(Map map) {\n+        super(new HashMap(), new HashMap());\n+        putAll(map);\n+    }\n+\n+    /** \n+     * Constructs a <code>HashBidiMap</code> that decorates the specified maps.\n+     *\n+     * @param normalMap  the normal direction map\n+     * @param reverseMap  the reverse direction map\n+     * @param inverseBidiMap  the inverse BidiMap\n+     */\n+    protected DualHashBidiMap(Map normalMap, Map reverseMap, BidiMap inverseBidiMap) {\n+        super(normalMap, reverseMap, inverseBidiMap);\n+    }\n+    \n+    /**\n+     * Creates a new instance of this object.\n+     * \n+     * @param normalMap  the normal direction map\n+     * @param reverseMap  the reverse direction map\n+     * @param inverseBidiMap  the inverse BidiMap\n+     * @return new bidi map\n+     */\n+    protected BidiMap createBidiMap(Map normalMap, Map reverseMap, BidiMap inverseMap) {\n+        return new DualHashBidiMap(normalMap, reverseMap, inverseMap);\n+    }\n+\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.49 2003/10/05 21:03:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.50 2003/10/06 23:47:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Entry point for all Collections package tests.\n  * \n- * @version $Revision: 1.49 $ $Date: 2003/10/05 21:03:44 $\n+ * @version $Revision: 1.50 $ $Date: 2003/10/06 23:47:17 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n         suite.addTest(TestFastTreeMap.suite());\n         suite.addTest(TestFastTreeMap1.suite());\n         suite.addTest(TestHashBag.suite());\n-        suite.addTest(TestHashBidiMap.suite());\n+        suite.addTest(TestDualHashBidiMap.suite());\n         suite.addTest(TestIteratorUtils.suite());\n         suite.addTest(TestLRUMap.suite());\n         suite.addTest(TestMultiHashMap.suite());\n--- a/src/test/org/apache/commons/collections/TestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.4 2003/10/05 20:52:29 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.5 2003/10/06 23:47:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.4 $ $Date: 2003/10/05 20:52:29 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/06 23:47:17 $\n  * \n  * @author Matthew Hawthorne\n  */\n         return false;\n     }\n     \n-    /**\n-     * Override to prevent infinite recursion of tests.\n-     */\n-    protected String[] ignoredTests() {\n-        return new String[] {\"TestHashBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n-    }\n-    \n     // BidiPut\n     //-----------------------------------------------------------------------\n     public void testBidiPut() {\n         assertEquals(\"E\", inverse.get(\"F\"));\n     }\n \n+    /**\n+     * Verifies that {@link #map} is still equal to {@link #confirmed}.\n+     * <p>\n+     * This implementation checks the inverse map as well.\n+     */\n+    protected void verify() {\n+        // verify inverse\n+        assertEquals(map.size(), ((BidiMap) map).inverseBidiMap().size());\n+        \n+        // verify fully\n+        super.verify();\n+    }\n+    \n     // testGetKey\n     //-----------------------------------------------------------------------\n     public void testBidiGetKey() {\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestDualHashBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestDualHashBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import junit.framework.Test;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/10/06 23:47:17 $\n+ * \n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ */\n+public class TestDualHashBidiMap extends TestBidiMap {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestDualHashBidiMap.class);\n+    }\n+\n+    public TestDualHashBidiMap(String testName) {\n+        super(testName);\n+    }\n+\n+    protected BidiMap makeEmptyBidiMap() {\n+        return new DualHashBidiMap();\n+    }\n+\n+    /**\n+     * Override to prevent infinite recursion of tests.\n+     */\n+    protected String[] ignoredTests() {\n+        return new String[] {\"TestDualHashBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n+    }\n+    \n+}", "timestamp": 1065484037, "metainfo": ""}