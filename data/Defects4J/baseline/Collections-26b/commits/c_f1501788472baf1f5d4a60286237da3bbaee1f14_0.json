{"sha": "f1501788472baf1f5d4a60286237da3bbaee1f14", "log": "support equals as per the Comparator contract support hashCode for this equals as per the Object contract   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  */\n \n import java.io.Serializable;\n-import java.lang.Comparable;\n import java.util.Comparator;\n \n /**\n  * A Comparator that compares Comparable objects.\n  * Throws ClassCastExceptions if the objects are not \n- * Comparable, or if they are null.\n+ * Comparable, or if either is null.\n+ * \n  * Throws ClassCastException if the compareTo of both \n  * objects do not provide an inverse result of each other \n  * as per the Comparable javadoc.  This Comparator is useful, for example,\n  *\n  * @since 2.0\n  * @author bayard@generationjava.com\n- * @version $Id: ComparableComparator.java,v 1.5 2002/06/12 03:59:17 mas Exp $\n+ * @version $Revision: 1.6 $ $Date: 2003/01/07 18:40:45 $\n  */\n public class ComparableComparator implements Comparator,Serializable {\n \n         }\n     }\n \n+    /**\n+     * Implement a hash code for this comparator that is consistent with\n+     * {@link #equals}.\n+     *\n+     * @return a hash code for this comparator.\n+     * @since Collections 2.2\n+     */\n+    public int hashCode() {\n+        return \"ComparableComparator\".hashCode();\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff <i>that</i> Object is \n+     * is a {@link Comparator} whose ordering is known to be \n+     * equivalent to mine.\n+     * <p>\n+     * This implementation returns <code>true</code>\n+     * iff <code><i>that</i>.{@link Object#getClass getClass()}</code>\n+     * equals <code>this.getClass()</code>.  Subclasses may want to override\n+     * this behavior to remain consistent with the {@link Comparator.equals}\n+     * contract.\n+     * @since Collections 2.2\n+     */\n+    public boolean equals(Object obj) {\n+        return (this == obj) || \n+               ((null != obj) && (obj.getClass().equals(this.getClass())));\n+    }\n }", "timestamp": 1041964845, "metainfo": ""}