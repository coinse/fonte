{"sha": "c56039ade9e9bb21a5e02755e1f215ad097e9895", "log": "Add single argument constructor for IfClosure bug 38495, from Matt Benson  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/java/org/apache/commons/collections/ClosureUtils.java\n /*\n- *  Copyright 2002-2004 The Apache Software Foundation\n+ *  Copyright 2002-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public class ClosureUtils {\n \n      */\n     public static Closure chainedClosure(Collection closures) {\n         return ChainedClosure.getInstance(closures);\n+    }\n+\n+    /**\n+     * Create a new Closure that calls another closure based on the\n+     * result of the specified predicate.\n+     * \n+     * @see org.apache.commons.collections.functors.IfClosure\n+     * \n+     * @param predicate  the validating predicate\n+     * @param trueClosure  the closure called if the predicate is true\n+     * @return the <code>if</code> closure\n+     * @throws IllegalArgumentException if the predicate is null\n+     * @throws IllegalArgumentException if the closure is null\n+     * @since Commons Collections 3.2\n+     */\n+    public static Closure ifClosure(Predicate predicate, Closure trueClosure) {\n+        return IfClosure.getInstance(predicate, trueClosure);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/functors/IfClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/IfClosure.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n public class IfClosure implements Closure, Serializable {\n \n     private final Closure iTrueClosure;\n     /** The closure to use if false */\n     private final Closure iFalseClosure;\n+\n+    /**\n+     * Factory method that performs validation.\n+     * <p>\n+     * This factory creates a closure that performs no action when\n+     * the predicate is false.\n+     * \n+     * @param predicate  predicate to switch on\n+     * @param trueClosure  closure used if true\n+     * @return the <code>if</code> closure\n+     * @throws IllegalArgumentException if either argument is null\n+     * @since Commons Collections 3.2\n+     */\n+    public static Closure getInstance(Predicate predicate, Closure trueClosure) {\n+        return getInstance(predicate, trueClosure, NOPClosure.INSTANCE);\n+    }\n \n     /**\n      * Factory method that performs validation.\n             throw new IllegalArgumentException(\"Closures must not be null\");\n         }\n         return new IfClosure(predicate, trueClosure, falseClosure);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * <p>\n+     * This constructor creates a closure that performs no action when\n+     * the predicate is false.\n+     * \n+     * @param predicate  predicate to switch on, not null\n+     * @param trueClosure  closure used if true, not null\n+     * @since Commons Collections 3.2\n+     */\n+    public IfClosure(Predicate predicate, Closure trueClosure) {\n+        this(predicate, trueClosure, NOPClosure.INSTANCE);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n /*\n- *  Copyright 2001-2004 The Apache Software Foundation\n+ *  Copyright 2001-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n public class TestClosureUtils extends junit.framework.TestCase {\n \n-    private static final Object cObject = new Object();\n     private static final Object cString = \"Hello\";\n-    private static final Object cInteger = new Integer(6);\n \n     /**\n      * Construct\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    // ifClosure\n+    //------------------------------------------------------------------\n+\n+    public void testIfClosure() {\n+        MockClosure a = new MockClosure();\n+        MockClosure b = null;\n+        ClosureUtils.ifClosure(PredicateUtils.truePredicate(), a).execute(null);\n+        assertEquals(1, a.count);\n+\n+        a = new MockClosure();\n+        ClosureUtils.ifClosure(PredicateUtils.falsePredicate(), a).execute(null);\n+        assertEquals(0, a.count);\n+\n+        a = new MockClosure();\n+        b = new MockClosure();\n+        ClosureUtils.ifClosure(PredicateUtils.truePredicate(), a, b).execute(null);\n+        assertEquals(1, a.count);\n+        assertEquals(0, b.count);\n+        \n+        a = new MockClosure();\n+        b = new MockClosure();\n+        ClosureUtils.ifClosure(PredicateUtils.falsePredicate(), a, b).execute(null);\n+        assertEquals(0, a.count);\n+        assertEquals(1, b.count);\n+    }        \n+\n     // switchClosure\n     //------------------------------------------------------------------\n \n     public void testSwitchClosure() {\n         MockClosure a = new MockClosure();\n         MockClosure b = new MockClosure();\n-        ClosureUtils.ifClosure(PredicateUtils.truePredicate(), a, b).execute(null);\n-        assertEquals(1, a.count);\n-        assertEquals(0, b.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        ClosureUtils.ifClosure(PredicateUtils.falsePredicate(), a, b).execute(null);\n-        assertEquals(0, a.count);\n-        assertEquals(1, b.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n         ClosureUtils.switchClosure(\n             new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n             new Closure[] {a, b}).execute(\"WELL\");", "timestamp": 1139353836, "metainfo": ""}