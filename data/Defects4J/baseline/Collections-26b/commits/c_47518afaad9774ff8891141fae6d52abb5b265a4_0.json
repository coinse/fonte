{"sha": "47518afaad9774ff8891141fae6d52abb5b265a4", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n  */\n-public class AbstractListIteratorDecorator implements ListIterator {\n+public class AbstractListIteratorDecorator<E> implements ListIterator<E> {\n \n     /** The iterator being decorated */\n-    protected final ListIterator iterator;\n+    protected final ListIterator<E> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @param iterator  the iterator to decorate, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      */\n-    public AbstractListIteratorDecorator(ListIterator iterator) {\n+    public AbstractListIteratorDecorator(ListIterator<E> iterator) {\n         super();\n         if (iterator == null) {\n             throw new IllegalArgumentException(\"ListIterator must not be null\");\n      * \n      * @return the decorated iterator\n      */\n-    protected ListIterator getListIterator() {\n+    protected ListIterator<E> getListIterator() {\n         return iterator;\n     }\n \n         return iterator.hasNext();\n     }\n \n-    public Object next() {\n+    public E next() {\n         return iterator.next();\n     }\n \n         return iterator.hasPrevious();\n     }\n \n-    public Object previous() {\n+    public E previous() {\n         return iterator.previous();\n     }\n \n         iterator.remove();\n     }\n \n-    public void set(Object obj) {\n+    public void set(E obj) {\n         iterator.set(obj);\n     }\n \n-    public void add(Object obj) {\n+    public void add(E obj) {\n         iterator.add(obj);\n     }\n     ", "timestamp": 1252994130, "metainfo": ""}