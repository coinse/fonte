{"sha": "759f45057a80e58503fe8e0153f4b8752a00c133", "log": "Tidy tests - split into smaller unit and use expected tag enable test that was overlooked  ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n  *\n  * @version $Revision$ $Date$\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestCollectionUtils extends MockTestCase {\n \n     /**\n     // -----------------------------------------------------------------------\n     @Test\n     public void testSize_List() {\n-        List list = null;\n+        List<String> list = null;\n         assertEquals(0, CollectionUtils.size(list));\n-        list = new ArrayList();\n+        list = new ArrayList<String>();\n         assertEquals(0, CollectionUtils.size(list));\n         list.add(\"a\");\n         assertEquals(1, CollectionUtils.size(list));\n         assertEquals(2, CollectionUtils.size(list.iterator()));\n     }\n \n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testSize_Other() {\n-        try {\n-            CollectionUtils.size(\"not a list\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-        }\n+        CollectionUtils.size(\"not a list\");\n     }\n \n     // -----------------------------------------------------------------------\n     public void testSizeIsEmpty_Null() {\n         assertEquals(true, CollectionUtils.sizeIsEmpty(null));\n     }\n+\n+    @Test\n     public void testSizeIsEmpty_List() {\n         List<String> list = new ArrayList<String>();\n         assertEquals(true, CollectionUtils.sizeIsEmpty(list));\n         assertTrue(collectionA.contains(5));\n     }\n \n+    @Test(expected=IndexOutOfBoundsException.class)\n+    public void getNegative() {\n+        CollectionUtils.get((Object)collectionA, -3);\n+    }\n+\n+    @Test(expected=IndexOutOfBoundsException.class)\n+    public void getPositiveOutOfBounds() {\n+        CollectionUtils.get((Object)collectionA.iterator(), 30);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void get1() {\n+        CollectionUtils.get((Object)null, 0);\n+    }\n+\n     @Test\n     public void get() {\n-        try {\n-            CollectionUtils.get((Object)collectionA, -3);\n-            fail();\n-        } catch(IndexOutOfBoundsException e) {\n-            ;\n-        }\n-        try {\n-            CollectionUtils.get((Object)collectionA.iterator(), 30);\n-            fail();\n-        } catch(IndexOutOfBoundsException e) {\n-            ;\n-        }\n-        try {\n-            CollectionUtils.get((Object)null, 0);\n-            fail();\n-        } catch(IllegalArgumentException e) {\n-            ;\n-        }\n         assertEquals(2, CollectionUtils.get((Object)collectionA, 2));\n         assertEquals(2, CollectionUtils.get((Object)collectionA.iterator(), 2));\n         Map<Integer, Integer> map = CollectionUtils.getCardinalityMap(collectionA);", "timestamp": 1287416164, "metainfo": ""}