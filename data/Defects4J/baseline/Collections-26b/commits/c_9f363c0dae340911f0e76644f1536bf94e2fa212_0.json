{"sha": "9f363c0dae340911f0e76644f1536bf94e2fa212", "log": "Fix checkstyle warnings, cleanup IteratorUtils, fix throws clauses.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n      * <p>\n      * This iterable does not contain any elements.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @return an empty iterable\n      */\n     @SuppressWarnings(\"unchecked\") // OK, empty collection is compatible with any type\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param a  the first iterable, may not be null\n      * @param b  the second iterable, may not be null\n      * @return a new iterable, combining the provided iterables\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param a  the first iterable, may not be null\n      * @param b  the second iterable, may not be null\n      * @param c  the third iterable, may not be null\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param a  the first iterable, may not be null\n      * @param b  the second iterable, may not be null\n      * @param c  the third iterable, may not be null\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterables  the iterables to combine, may not be null\n      * @return a new iterable, combining the provided iterables\n      * @throws NullPointerException if either of the provided iterables is null\n      * The returned iterable's iterator supports {@code remove()} when the\n      * corresponding input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param a  the first iterable, may not be null\n      * @param b  the second iterable, may not be null\n      * @return a filtered view on the specified iterable\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param comparator  the comparator defining an ordering over the elements,\n      *   may be null, in which case natural ordering will be used\n      * @param a  the first iterable, may not be null\n      * <p>\n      * The returned iterable's iterator does not support {@code remove()}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to filter, may not be null\n      * @param predicate  the predicate used to filter elements, may not be null\n      * @return a filtered view on the specified iterable\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to limit, may not be null\n      * @param maxSize  the maximum number of elements, must not be negative\n      * @return a bounded view on the specified iterable\n      * iterator's {@code hasNext()} method returns {@code true} until {@code iterable}\n      * is empty.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to loop, may not be null\n      * @return a view of the iterable, providing an infinite loop over its elements\n      * @throws NullPointerException if iterable is null\n      * The returned iterable's iterator supports {@code remove()} if the\n      * provided iterable is a {@link List} instance.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to use, may not be null\n      * @return a reversed view of the specified iterable\n      * @throws NullPointerException if iterable is null\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to use, may not be null\n      * @param elementsToSkip  the number of elements to skip from the start, must not be negative\n      * @return a view of the specified iterable, skipping the first N elements\n      * <p>\n      * The returned iterable's iterator does not support {@code remove()}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to use, may not be null\n      * @return a unique view of the specified iterable\n      * @throws NullPointerException if iterable is null\n      * <p>\n      * The returned iterable's iterator does not support {@code remove()}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to use, may not be null\n      * @return an unmodifiable view of the specified iterable\n      * @throws NullPointerException if iterable is null\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param a  the first iterable, may not be null\n      * @param b  the second iterable, may not be null\n      * @return a new iterable, interleaving the provided iterables\n      * The returned iterable's iterator supports {@code remove()} when the corresponding\n      * input iterator supports it.\n      *\n-     * @param <E>  the element type\n-     * @param iterables  the array of iterables to interleave, may not be null\n+     * @param <E> the element type\n+     * @param first  the first iterable, may not be null\n+     * @param others  the array of iterables to interleave, may not be null\n      * @return a new iterable, interleaving the provided iterables\n      * @throws NullPointerException if either of the provided iterables is null\n      */\n     /**\n      * Applies the closure to each element of the provided iterable.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterator to use, may be null\n      * @param closure  the closure to apply to each element, may not be null\n      * @throws NullPointerException if closure is null\n      * <p>\n      * If the input iterable is null no change is made.\n      *\n-     * @param <E>  the type of object the {@link Iterable} contains\n-     * @param <C>  the closure type\n+     * @param <E> the type of object the {@link Iterable} contains\n      * @param iterable  the iterable to get the input from, may be null\n      * @param closure  the closure to perform, may not be null\n      * @return the last element in the iterable, or null if iterable is null or empty\n      * <p>\n      * A <code>null</code> or empty iterator returns null.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to search, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return the first element of the iterable which matches the predicate or null if none could be found\n      * <p>\n      * A <code>null</code> or empty iterable returns true.\n      *\n-     * @param <E>  the type of object the {@link Iterable} contains\n+     * @param <E> the type of object the {@link Iterable} contains\n      * @param iterable  the {@link Iterable} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if every element of the collection matches the predicate or if the\n      * <p>\n      * A <code>null</code> or empty iterable returns false.\n      *\n-     * @param <E>  the type of object the {@link Iterable} contains\n+     * @param <E> the type of object the {@link Iterable} contains\n      * @param iterable  the {@link Iterable} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if any element of the collection matches the predicate, false otherwise\n      * <p>\n      * A <code>null</code> iterable matches no elements.\n      *\n-     * @param <E>  the type of object the {@link Iterable} contains\n+     * @param <E> the type of object the {@link Iterable} contains\n      * @param input  the {@link Iterable} to get the input from, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return the number of matches for the predicate in the collection\n      * <p>\n      * A <code>null</code> or empty iterable returns false.\n      *\n-     * @param <E>  the type of object the {@link Iterable} contains\n+     * @param <E> the type of object the {@link Iterable} contains\n      * @param iterable  the iterable to check, may be null\n      * @param object  the object to check\n      * @return true if the object is contained in the iterable, false otherwise\n      * {@link org.apache.commons.collections4.functors.NullPredicate NullPredicate}\n      * will be used.\n      *\n-     * @param <E>  the type of object the {@link Iterable} contains\n+     * @param <E> the type of object the {@link Iterable} contains\n      * @param iterable  the iterable to check, may be null\n      * @param object  the object to check\n      * @param equator  the equator to use to check, may not be null\n     /**\n      * Returns the number of occurrences of the provided object in the iterable.\n      *\n-     * @param <E>  the type of object that the {@link Iterable} may contain\n+     * @param <E> the element type that the {@link Iterable} may contain\n+     * @param <T> the element type of the object to find\n      * @param iterable  the {@link Iterable} to search\n      * @param obj  the object to find the cardinality of\n      * @return the the number of occurrences of obj in iterable\n     /**\n      * Gets a new list with the contents of the provided iterable.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to use, may be null\n      * @return a list of the iterator contents\n      */\n      * by the characters {@code \", \"} (a comma followed by a space). Elements are\n      * converted to strings as by {@code String.valueOf(Object)}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to convert to a string, may be null\n      * @return a string representation of {@code iterable}\n      */\n      * by the characters {@code \", \"} (a comma followed by a space). Elements are\n      * converted to strings as by using the provided {@code transformer}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to convert to a string, may be null\n      * @param transformer  the transformer used to get a string representation of an element\n      * @return a string representation of {@code iterable}\n      * are separated by the provided {@code delimiter}. Elements are converted to\n      * strings as by using the provided {@code transformer}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterable  the iterable to convert to a string, may be null\n      * @param transformer  the transformer used to get a string representation of an element\n      * @param delimiter  the string to delimit elements\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n /**\n  * Provides static utility methods and decorators for {@link Iterator}\n  * instances. The implementations are provided in the iterators subpackage.\n- * <p>\n- * WARNING: Due to human error certain binary incompatibilities were introduced\n- * between Commons Collections 2.1 and 3.0. The class remained source and test\n- * compatible, so if you can recompile all your classes and dependencies\n- * everything is OK. Those methods which are binary incompatible are marked as\n- * such, together with alternate solutions that are binary compatible\n- * against versions 2.1.1 and 3.1.\n  *\n  * @since 2.1\n  * @version $Id$\n \n     /**\n      * An iterator over no elements.\n-     * <p>\n-     * WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      */\n     @SuppressWarnings(\"rawtypes\")\n     public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;\n \n     /**\n      * A list iterator over no elements.\n-     * <p>\n-     * WARNING: This constant is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyListIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n      */\n     @SuppressWarnings(\"rawtypes\")\n     public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;\n     /**\n      * Gets an empty iterator.\n      * <p>\n-     * This iterator is a valid iterator object that will iterate over\n-     * nothing.\n-     * <p>\n-     * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n-     *\n-     * @param <E>  the element type\n-     * @return  an iterator over nothing\n+     * This iterator is a valid iterator object that will iterate over nothing.\n+     *\n+     * @param <E> the element type\n+     * @return an iterator over nothing\n      */\n     public static <E> ResettableIterator<E> emptyIterator() {\n         return EmptyIterator.<E>resettableEmptyIterator();\n      * <p>\n      * This iterator is a valid list iterator object that will iterate\n      * over nothing.\n-     * <p>\n-     * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>EmptyListIterator.INSTANCE</code> for compatibility with Commons Collections 2.1.1.\n-     *\n-     * @param <E>  the element type\n-     * @return  a list iterator over nothing\n+     *\n+     * @param <E> the element type\n+     * @return a list iterator over nothing\n      */\n     public static <E> ResettableListIterator<E> emptyListIterator() {\n         return EmptyListIterator.<E>resettableEmptyListIterator();\n      * This iterator is a valid iterator object that will iterate\n      * over nothing.\n      *\n-     * @param <E>  the element type\n-     * @return  an ordered iterator over nothing\n+     * @param <E> the element type\n+     * @return an ordered iterator over nothing\n      */\n     public static <E> OrderedIterator<E> emptyOrderedIterator() {\n         return EmptyOrderedIterator.<E>emptyOrderedIterator();\n      * This iterator is a valid map iterator object that will iterate\n      * over nothing.\n      *\n-     * @param <K>  the key type\n-     * @param <V>  the value type\n-     * @return  a map iterator over nothing\n+     * @param <K> the key type\n+     * @param <V> the value type\n+     * @return a map iterator over nothing\n      */\n     public static <K, V> MapIterator<K, V> emptyMapIterator() {\n         return EmptyMapIterator.<K, V>emptyMapIterator();\n      * This iterator is a valid map iterator object that will iterate\n      * over nothing.\n      *\n-     * @param <K>  the key type\n-     * @param <V>  the value type\n-     * @return  a map iterator over nothing\n+     * @param <K> the key type\n+     * @param <V> the value type\n+     * @return a map iterator over nothing\n      */\n     public static <K, V> OrderedMapIterator<K, V> emptyOrderedMapIterator() {\n         return EmptyOrderedMapIterator.<K, V>emptyOrderedMapIterator();\n      * <p>\n      * This iterator is a valid iterator object that will iterate over\n      * the specified object.\n-     * <p>\n-     * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new SingletonIterator(object)</code> for compatibility.\n-     *\n-     * @param <E>  the element type\n+     *\n+     * @param <E> the element type\n      * @param object  the single object over which to iterate\n-     * @return  a singleton iterator over the object\n+     * @return a singleton iterator over the object\n      */\n     public static <E> ResettableIterator<E> singletonIterator(final E object) {\n         return new SingletonIterator<E>(object);\n      * This iterator is a valid list iterator object that will iterate over\n      * the specified object.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param object  the single object over which to iterate\n-     * @return  a singleton list iterator over the object\n+     * @return a singleton list iterator over the object\n      */\n     public static <E> ListIterator<E> singletonListIterator(final E object) {\n         return new SingletonListIterator<E>(object);\n     //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator over an object array.\n-     * <p>\n-     * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new ArrayIterator(array)</code> for compatibility.\n-     *\n-     * @param <E>  the element type\n+     *\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n-     * @return  an iterator over the array\n+     * @return an iterator over the array\n      * @throws NullPointerException if array is null\n      */\n     public static <E> ResettableIterator<E> arrayIterator(final E... array) {\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n-     * @return  an iterator over the array\n+     * @return an iterator over the array\n      * @throws IllegalArgumentException if the array is not an array\n      * @throws NullPointerException if array is null\n      */\n \n     /**\n      * Gets an iterator over the end part of an object array.\n-     * <p>\n-     * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new ArrayIterator(array,start)</code> for compatibility.\n-     *\n-     * @param <E>  the element type\n+     *\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return an iterator over part of the array\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return an iterator over part of the array\n \n     /**\n      * Gets an iterator over part of an object array.\n-     * <p>\n-     * WARNING: This method is binary incompatible with Commons Collections 2.1 and 2.1.1.\n-     * Use <code>new ArrayIterator(array,start,end)</code> for compatibility.\n-     *\n-     * @param <E>  the element type\n+     *\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n     /**\n      * Gets a list iterator over an object array.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n-     * @return  a list iterator over the array\n+     * @return a list iterator over the array\n      * @throws NullPointerException if array is null\n      */\n     public static <E> ResettableListIterator<E> arrayListIterator(final E... array) {\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n-     * @return  a list iterator over the array\n+     * @return a list iterator over the array\n      * @throws IllegalArgumentException if the array is not an array\n      * @throws NullPointerException if array is null\n      */\n     /**\n      * Gets a list iterator over the end part of an object array.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return a list iterator over part of the array\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return a list iterator over part of the array\n     /**\n      * Gets a list iterator over part of an object array.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * This method will handle primitive arrays as well as object arrays.\n      * The primitives will be wrapped in the appropriate wrapper class.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * Decorates the specified iterator to return at most the given number\n      * of elements.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to decorate\n      * @param max  the maximum number of elements returned by this iterator\n      * @return a new bounded iterator\n      * The iterator is immediately advanced until it reaches the position at\n      * {@code offset}, incurring O(n) time.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to decorate\n      * @param offset  the index of the first element of the decorated iterator to return\n      * @param max  the maximum number of elements returned by this iterator\n      * will always throw an {@link UnsupportedOperationException} for\n      * the {@link Iterator#remove} method.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to make immutable\n      * @return an immutable version of the iterator\n      */\n      * the {@link Iterator#remove}, {@link ListIterator#add} and\n      * {@link ListIterator#set} methods.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param listIterator  the iterator to make immutable\n      * @return an immutable version of the iterator\n      */\n      * will always throw an {@link UnsupportedOperationException} for\n      * the {@link Iterator#remove}, {@link MapIterator#setValue(Object)} methods.\n      *\n-     * @param <K>  the key type\n-     * @param <V>  the value type\n+     * @param <K> the key type\n+     * @param <V> the value type\n      * @param mapIterator  the iterator to make immutable\n      * @return an immutable version of the iterator\n      */\n      * Gets an iterator that iterates through two {@link Iterator}s\n      * one after another.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator1  the first iterator to use, not null\n      * @param iterator2  the second iterator to use, not null\n      * @return a combination iterator over the iterators\n      * Gets an iterator that iterates through an array of {@link Iterator}s\n      * one after another.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n      * @throws NullPointerException if iterators array is null or contains a null\n      * Gets an iterator that iterates through a collections of {@link Iterator}s\n      * one after another.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n      * @throws NullPointerException if iterators collection is null or contains a null\n      * <p>\n      * The comparator is optional. If null is specified then natural order is used.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param comparator  the comparator to use, may be null for natural order\n      * @param iterator1  the first iterators to use, not null\n      * @param iterator2  the first iterators to use, not null\n      * <p>\n      * The comparator is optional. If null is specified then natural order is used.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param comparator  the comparator to use, may be null for natural order\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n      * <p>\n      * The comparator is optional. If null is specified then natural order is used.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param comparator  the comparator to use, may be null for natural order\n      * @param iterators  the iterators to use, not null or empty or contain nulls\n      * @return a combination iterator over the iterators\n      * Under many circumstances, linking Iterators together in this manner is\n      * more efficient (and convenient) than using nested for loops to extract a list.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param root  the root object to start iterating from, null results in an empty iterator\n      * @param transformer  the transformer to use, see above, null uses no effect transformer\n      * @return a new object graph iterator\n      * The transformation occurs during the next() method and the underlying\n      * iterator is unaffected by the transformation.\n      *\n-     * @param <I>  the input type\n-     * @param <O>  the output type\n+     * @param <I> the input type\n+     * @param <O> the output type\n      * @param iterator  the iterator to use, not null\n      * @param transform  the transform to use, not null\n      * @return a new transforming iterator\n      * The returned iterator will only return objects that match the specified\n      * filtering predicate.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to use, not null\n      * @param predicate  the predicate to use as a filter, not null\n      * @return a new filtered iterator\n      * The returned iterator will only return objects that match the specified\n      * filtering predicate.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param listIterator  the list iterator to use, not null\n      * @param predicate  the predicate to use as a filter, not null\n      * @return a new filtered iterator\n      * enough times to empty the collection, or if the collection is empty\n      * to start with.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param coll  the collection to iterate over, not null\n      * @return a new looping iterator\n      * @throws NullPointerException if the collection is null\n      * The iterator will only stop looping if the remove method is called\n      * enough times to empty the list, or if the list is empty to start with.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param list  the list to iterate over, not null\n      * @return a new looping iterator\n      * @throws NullPointerException if the list is null\n      * Gets an {@link Iterator} that wraps the specified {@link NodeList}.\n      * The returned {@link Iterator} can be used for a single iteration.\n      *\n-     * @param nodeList the node list to use, not null\n+     * @param nodeList  the node list to use, may not be null\n      * @return a new, single use {@link Iterator}\n      * @throws NullPointerException if nodeList is null\n      * @since 4.0\n      *   }\n      * </pre>\n      *\n-     * @param node the node to use, not null\n+     * @param node  the node to use, may not be null\n      * @return a new, single use {@link Iterator}\n      * @throws NullPointerException if node is null\n      * @since 4.0\n     /**\n      * Gets an iterator that supports one-element lookahead.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to decorate, not null\n      * @return a peeking iterator\n      * @throws NullPointerException if the iterator is null\n     /**\n      * Gets an iterator that supports pushback of elements.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to decorate, not null\n      * @return a pushback iterator\n      * @throws NullPointerException if the iterator is null\n     /**\n      * Decorates the specified iterator to skip the first N elements.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to decorate\n      * @param offset  the first number of elements to skip\n      * @return a new skipping iterator\n-     * @throws IllegalArgumentException if the iterator is null or offset is negative\n+     * @throws NullPointerException if the iterator is null\n+     * @throws IllegalArgumentException if offset is negative\n      * @since 4.1\n      */\n     public static <E> SkippingIterator<E> skippingIterator(final Iterator<E> iterator, long offset) {\n     /**\n      * Returns an iterator that interleaves elements from the decorated iterators.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param a  the first iterator to interleave\n      * @param b  the second iterator to interleave\n      * @return an iterator, interleaving the decorated iterators\n-     * @throws IllegalArgumentException if any iterator is null\n+     * @throws NullPointerException if any iterator is null\n      * @since 4.1\n      */\n     public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a,\n     /**\n      * Returns an iterator that interleaves elements from the decorated iterators.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param a  the first iterator to interleave\n      * @param b  the second iterator to interleave\n      * @param c  the third iterator to interleave\n      * @return an iterator, interleaving the decorated iterators\n-     * @throws IllegalArgumentException if any iterator is null\n+     * @throws NullPointerException if any iterator is null\n      * @since 4.1\n      */\n     public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a,\n     /**\n      * Returns an iterator that interleaves elements from the decorated iterators.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterators  the array of iterators to interleave\n      * @return an iterator, interleaving the decorated iterators\n-     * @throws IllegalArgumentException if any iterator is null\n+     * @throws NullPointerException if any iterator is null\n      * @since 4.1\n      */\n     public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E>... iterators) {\n     /**\n      * Gets an iterator that provides an iterator view of the given enumeration.\n      *\n-     * @param <E>  the element type\n-     * @param enumeration  the enumeration to use\n+     * @param <E> the element type\n+     * @param enumeration  the enumeration to use, may not be null\n      * @return a new iterator\n+     * @throws NullPointerException if enumeration is null\n      */\n     public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration) {\n         if (enumeration == null) {\n      * Gets an iterator that provides an iterator view of the given enumeration\n      * that will remove elements from the specified collection.\n      *\n-     * @param <E>  the element type\n-     * @param enumeration  the enumeration to use\n-     * @param removeCollection  the collection to remove elements from\n+     * @param <E> the element type\n+     * @param enumeration  the enumeration to use, may not be null\n+     * @param removeCollection  the collection to remove elements from, may not be null\n      * @return a new iterator\n+     * @throws NullPointerException if enumeration or removeCollection is null\n      */\n     public static <E> Iterator<E> asIterator(final Enumeration<? extends E> enumeration,\n                                              final Collection<? super E> removeCollection) {\n     /**\n      * Gets an enumeration that wraps an iterator.\n      *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to use, not null\n+     * @param <E> the element type\n+     * @param iterator  the iterator to use, may not be null\n      * @return a new enumeration\n      * @throws NullPointerException if iterator is null\n      */\n      * Gets an {@link Iterable} that wraps an iterator.  The returned {@link Iterable} can be\n      * used for a single iteration.\n      *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to use, not null\n+     * @param <E> the element type\n+     * @param iterator  the iterator to use, may not be null\n      * @return a new, single use {@link Iterable}\n      * @throws NullPointerException if iterator is null\n      */\n      * Gets an iterable that wraps an iterator.  The returned iterable can be\n      * used for multiple iterations.\n      *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to use, not null\n+     * @param <E> the element type\n+     * @param iterator  the iterator to use, may not be null\n      * @return a new, multiple use iterable\n      * @throws NullPointerException if iterator is null\n      */\n      * As the wrapped Iterator is traversed, a LinkedList of its values is\n      * cached, permitting all required operations of ListIterator.\n      *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to use, not null\n+     * @param <E> the element type\n+     * @param iterator  the iterator to use, may not be null\n      * @return a new iterator\n      * @throws NullPointerException if iterator parameter is null\n      */\n      * As the wrapped Iterator is traversed, an ArrayList of its values is\n      * created. At the end, this is converted to an array.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to use, not null\n      * @param arrayClass  the class of array to create\n      * @return an array of the iterator contents\n      * As the wrapped Iterator is traversed, an ArrayList of its values is\n      * created. At the end, the list is returned.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to use, not null\n      * @return a list of the iterator contents\n      * @throws NullPointerException if iterator parameter is null\n      * As the wrapped Iterator is traversed, an ArrayList of its values is\n      * created. At the end, the list is returned.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to use, not null\n      * @param estimatedSize  the initial size of the ArrayList\n      * @return a list of the iterator contents\n     /**\n      * Applies the closure to each element of the provided iterator.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to use, may be null\n      * @param closure  the closure to apply to each element, may not be null\n      * @throws NullPointerException if closure is null\n      * <p>\n      * If the input iterator is null no change is made.\n      *\n-     * @param <E>  the type of object the {@link Iterator} contains\n-     * @param <C>  the closure type\n+     * @param <E> the type of object the {@link Iterator} contains\n      * @param iterator  the iterator to get the input from, may be null\n      * @param closure  the closure to perform, may not be null\n      * @return the last element in the iterator, or null if iterator is null or empty\n      * <p>\n      * A <code>null</code> or empty iterator returns null.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to search, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return the first element of the iterator which matches the predicate or null if none could be found\n      * <p>\n      * A <code>null</code> or empty iterator returns false.\n      *\n-     * @param <E>  the type of object the {@link Iterator} contains\n+     * @param <E> the type of object the {@link Iterator} contains\n      * @param iterator  the {@link Iterator} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if any element of the collection matches the predicate, false otherwise\n      * <p>\n      * A <code>null</code> or empty iterator returns true.\n      *\n-     * @param <E>  the type of object the {@link Iterator} contains\n+     * @param <E> the type of object the {@link Iterator} contains\n      * @param iterator  the {@link Iterator} to use, may be null\n      * @param predicate  the predicate to use, may not be null\n      * @return true if every element of the collection matches the predicate or if the\n      * <p>\n      * A <code>null</code> or empty iterator returns false.\n      *\n-     * @param <E>  the type of object the {@link Iterator} contains\n+     * @param <E> the type of object the {@link Iterator} contains\n      * @param iterator  the iterator to check, may be null\n      * @param object  the object to check\n      * @return true if the object is contained in the iterator, false otherwise\n      * The Iterator is advanced to <code>index</code> (or to the end, if\n      * <code>index</code> exceeds the number of entries) as a side effect of this method.\n      *\n-     * @param <E>  the type of object in the {@link Iterator}\n+     * @param <E> the type of object in the {@link Iterator}\n      * @param iterator  the iterator to get a value from\n      * @param index  the index to get\n      * @return the object at the specified index\n      * @throws IndexOutOfBoundsException if the index is invalid\n-     * @throws IllegalArgumentException if the object type is invalid\n      * @since 4.1\n      */\n     public static <E> E get(final Iterator<E> iterator, final int index) {\n      * by the characters {@code \", \"} (a comma followed by a space). Elements are\n      * converted to strings as by {@code String.valueOf(Object)}.\n      *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to convert to a string\n+     * @param <E> the element type\n+     * @param iterator  the iterator to convert to a string, may be null\n      * @return a string representation of {@code iterator}\n      * @since 4.1\n      */\n      * by the characters {@code \", \"} (a comma followed by a space). Elements are\n      * converted to strings as by using the provided {@code transformer}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to convert to a string, may be null\n      * @param transformer  the transformer used to get a string representation of an element\n      * @return a string representation of {@code iterator}\n      * are separated by the provided {@code delimiter}. Elements are converted to\n      * strings as by using the provided {@code transformer}.\n      *\n-     * @param <E>  the element type\n+     * @param <E> the element type\n      * @param iterator  the iterator to convert to a string, may be null\n      * @param transformer  the transformer used to get a string representation of an element\n      * @param delimiter  the string to delimit elements\n--- a/src/main/java/org/apache/commons/collections4/MultiSet.java\n+++ b/src/main/java/org/apache/commons/collections4/MultiSet.java\n      * <p>\n      * If the provided count is zero, the object will be removed from the\n      * {@link #uniqueSet()}.\n-     * \n+     *\n      * @param object  the object to update\n      * @param count  the number of occurrences of the object\n      * @return the number of occurrences of the object before this operation, zero\n--- a/src/main/java/org/apache/commons/collections4/MultiValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/MultiValuedMap.java\n      * while the operation is in progress.\n      *\n      * @param map  mappings to be stored in this map, may not be null\n+     * @return true if the map changed as a result of this operation\n      * @throws UnsupportedOperationException if the {@code putAll} operation is\n      *   not supported by this map\n      * @throws NullPointerException if the specified map is null, or if this map\n      * while the operation is in progress.\n      *\n      * @param map  mappings to be stored in this map, may not be null\n+     * @return true if the map changed as a result of this operation\n      * @throws UnsupportedOperationException if the {@code putAll} operation is\n      *   not supported by this map\n      * @throws NullPointerException if the specified map is null, or if this map\n--- a/src/main/java/org/apache/commons/collections4/bag/HashBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/HashBag.java\n import java.util.Collection;\n import java.util.HashMap;\n \n-import org.apache.commons.collections4.Bag;\n-\n /**\n- * Implements {@link Bag}, using a {@link HashMap} to provide the\n+ * Implements {@code Bag}, using a {@link HashMap} to provide the\n  * data storage. This is the standard implementation of a bag.\n  * <p>\n- * A {@link Bag} stores each object in the collection together with a\n+ * A {@code Bag} stores each object in the collection together with a\n  * count of occurrences. Extra methods on the interface allow multiple copies\n  * of an object to be added or removed at once. It is important to read the\n  * interface javadoc carefully as several methods violate the\n--- a/src/main/java/org/apache/commons/collections4/iterators/SkippingIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/SkippingIterator.java\n      *\n      * @param iterator  the iterator to be decorated\n      * @param offset  the index of the first element of the decorated iterator to return\n-     * @throws IllegalArgumentException if iterator is null, or offset is negative\n+     * @throws NullPointerException if iterator is null\n+     * @throws IllegalArgumentException if offset is negative\n      */\n     public SkippingIterator(final Iterator<E> iterator, final long offset) {\n         super(iterator);\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java\n \n         if (values instanceof Collection<?>) {\n             Collection<? extends V> valueCollection = (Collection<? extends V>) values;\n-            return !valueCollection.isEmpty() && get(key).addAll(valueCollection); \n+            return !valueCollection.isEmpty() && get(key).addAll(valueCollection);\n         } else {\n             Iterator<? extends V> it = values.iterator();\n             return it.hasNext() && CollectionUtils.addAll(get(key), it);\n--- a/src/main/java/org/apache/commons/collections4/multiset/AbstractMapMultiSet.java\n+++ b/src/main/java/org/apache/commons/collections4/multiset/AbstractMapMultiSet.java\n \n         /**\n          * Constructor.\n-         * @param entry  the entry to decorate\n-         * @param parent  the parent map\n+         * @param parentEntry  the entry to decorate\n          */\n         protected MultiSetEntry(final Map.Entry<E, MutableInteger> parentEntry) {\n             this.parentEntry = parentEntry;\n         public String toString() {\n             return String.format(\"%s:%d\", getElement(), getCount());\n         }\n-        \n+\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/multiset/AbstractMultiSetDecorator.java\n     public Set<Entry<E>> entrySet() {\n         return decorated().entrySet();\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/multiset/HashMultiSet.java\n+++ b/src/main/java/org/apache/commons/collections4/multiset/HashMultiSet.java\n import java.util.Collection;\n import java.util.HashMap;\n \n-import org.apache.commons.collections4.MultiSet;\n-\n /**\n- * Implements {@link MultiSet}, using a {@link HashMap} to provide the\n+ * Implements {@code MultiSet}, using a {@link HashMap} to provide the\n  * data storage. This is the standard implementation of a multiset.\n  * <p>\n- * A {@link MultiSet} stores each object in the collection together with a\n+ * A {@code MultiSet} stores each object in the collection together with a\n  * count of occurrences. Extra methods on the interface allow multiple copies\n  * of an object to be added or removed at once.\n  *", "timestamp": 1434485593, "metainfo": ""}