{"sha": "f54ad7f89efb2e90e6374f5358da9520b874947d", "log": "rename [Test]AbstractRandomAccessXList to just [Test]RandomAccessXList   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.8 2003/04/11 22:01:25 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.9 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * primitive values will be stored in an underlying primitive array, and\n  * provides methods for manipulating the capacity of that array.<P>\n  *\n- * @version $Revision: 1.8 $ $Date: 2003/04/11 22:01:25 $\n+ * @version $Revision: 1.9 $ $Date: 2003/04/13 22:30:57 $\n  * @author Rodney Waldhoff \n- * @deprecated See {@link AbstractRandomAccessShortList}.\n+ * @deprecated See {@link RandomAccessShortList}.\n  */\n public abstract class AbstractShortArrayList extends AbstractShortList {\n \n--- a/src/java/org/apache/commons/collections/primitives/ArrayFloatList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayFloatList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayFloatList.java,v 1.1 2003/04/13 22:08:08 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayFloatList.java,v 1.2 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.1 $ $Date: 2003/04/13 22:08:08 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:57 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class ArrayFloatList extends AbstractRandomAccessFloatList implements FloatList, Serializable {\n+public class ArrayFloatList extends RandomAccessFloatList implements FloatList, Serializable {\n \n     // constructors\n     //-------------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/primitives/ArrayIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayIntList.java,v 1.6 2003/02/26 15:45:19 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayIntList.java,v 1.7 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.6 $ $Date: 2003/02/26 15:45:19 $\n+ * @version $Revision: 1.7 $ $Date: 2003/04/13 22:30:57 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class ArrayIntList extends AbstractRandomAccessIntList implements IntList, Serializable {\n+public class ArrayIntList extends RandomAccessIntList implements IntList, Serializable {\n \n     // constructors\n     //-------------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/primitives/ArrayLongList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayLongList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayLongList.java,v 1.1 2003/04/08 18:24:36 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayLongList.java,v 1.2 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.1 $ $Date: 2003/04/08 18:24:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:57 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class ArrayLongList extends AbstractRandomAccessLongList implements LongList, Serializable {\n+public class ArrayLongList extends RandomAccessLongList implements LongList, Serializable {\n \n     // constructors\n     //-------------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/primitives/ArrayShortList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayShortList.java,v 1.1 2003/04/11 00:55:37 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayShortList.java,v 1.2 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.1 $ $Date: 2003/04/11 00:55:37 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:57 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class ArrayShortList extends AbstractRandomAccessShortList implements ShortList, Serializable {\n+public class ArrayShortList extends RandomAccessShortList implements ShortList, Serializable {\n \n     // constructors\n     //-------------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/primitives/ArrayUnsignedByteList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedByteList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedByteList.java,v 1.1 2003/04/11 21:50:15 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedByteList.java,v 1.2 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.1 $ $Date: 2003/04/11 21:50:15 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:57 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class ArrayUnsignedByteList extends AbstractRandomAccessShortList implements ShortList, Serializable {\n+public class ArrayUnsignedByteList extends RandomAccessShortList implements ShortList, Serializable {\n \n     // constructors\n     //-------------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/primitives/ArrayUnsignedIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedIntList.java,v 1.2 2003/04/11 21:50:15 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedIntList.java,v 1.3 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.2 $ $Date: 2003/04/11 21:50:15 $\n+ * @version $Revision: 1.3 $ $Date: 2003/04/13 22:30:57 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class ArrayUnsignedIntList extends AbstractRandomAccessLongList implements LongList, Serializable {\n+public class ArrayUnsignedIntList extends RandomAccessLongList implements LongList, Serializable {\n \n     // constructors\n     //-------------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/primitives/ArrayUnsignedShortList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedShortList.java,v 1.5 2003/04/11 21:50:15 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedShortList.java,v 1.6 2003/04/13 22:30:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * This implementation supports all optional methods.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.5 $ $Date: 2003/04/11 21:50:15 $\n+ * @version $Revision: 1.6 $ $Date: 2003/04/13 22:30:57 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class ArrayUnsignedShortList extends AbstractRandomAccessIntList implements IntList, Serializable {\n+public class ArrayUnsignedShortList extends RandomAccessIntList implements IntList, Serializable {\n \n     // constructors\n     //-------------------------------------------------------------------------\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/RandomAccessFloatList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessFloatList.java,v 1.1 2003/04/13 22:30:57 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract base class for {@link FloatList}s backed \n+ * by random access structures like arrays.\n+ * <p />\n+ * Read-only subclasses must override {@link #get}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #set}.  Variably-sized\n+ * subclasses should also override {@link #add} \n+ * and {@link #removeElementAt}.  All other methods\n+ * have at least some base implementation derived from \n+ * these.  Subclasses may choose to override these methods\n+ * to provide a more efficient implementation.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:57 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public abstract class RandomAccessFloatList extends AbstractFloatCollection implements FloatList {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    /** Constructs an empty list. */\n+    protected RandomAccessFloatList() { \n+    }    \n+\n+    // fully abstract methods\n+    //-------------------------------------------------------------------------\n+    \n+    public abstract float get(int index);\n+    public abstract int size();\n+\n+    // unsupported in base\n+    //-------------------------------------------------------------------------\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public float removeElementAt(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public float set(int index, float element) {\n+        throw new UnsupportedOperationException();\n+    }\n+        \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public void add(int index, float element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-------------------------------------------------------------------------\n+\n+    // javadocs here are inherited\n+    \n+    public boolean add(float element) {\n+        add(size(),element);\n+        return true;\n+    }\n+\n+    public boolean addAll(int index, FloatCollection collection) {\n+        boolean modified = false;\n+        for(FloatIterator iter = collection.iterator(); iter.hasNext(); ) {\n+            add(index++,iter.next());\n+            modified = true;\n+        }\n+        return modified;\n+    }\n+\n+    public int indexOf(float element) {\n+        int i = 0;\n+        for(FloatIterator iter = iterator(); iter.hasNext(); ) {\n+            if(iter.next() == element) { \n+                return i;\n+            } else {\n+                i++;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOf(float element) {\n+        for(FloatListIterator iter = listIterator(size()); iter.hasPrevious(); ) {\n+            if(iter.previous() == element) {\n+                return iter.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public FloatIterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public FloatListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public FloatListIterator listIterator(int index) {\n+        return new RandomAccessFloatListIterator(this,index);            \n+    }\n+\n+    public FloatList subList(int fromIndex, int toIndex) {\n+        return new RandomAccessFloatSubList(this,fromIndex,toIndex);\n+    }\n+\n+    public boolean equals(Object that) {\n+        if(this == that) { \n+            return true; \n+        } else if(that instanceof FloatList) {\n+            FloatList thatList = (FloatList)that;\n+            if(size() != thatList.size()) {\n+                return false;\n+            }\n+            for(FloatIterator thatIter = thatList.iterator(), thisIter = iterator(); thisIter.hasNext();) {\n+                if(thisIter.next() != thatIter.next()) { \n+                    return false; \n+                }\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }        \n+    }\n+    \n+    public int hashCode() {\n+        int hash = 1;\n+        for(FloatIterator iter = iterator(); iter.hasNext(); ) {\n+            hash = 31*hash + Float.floatToIntBits(iter.next());\n+        }\n+        return hash;\n+    }\n+    \n+    public String toString() {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"[\");\n+        for(FloatIterator iter = iterator(); iter.hasNext();) {\n+            buf.append(iter.next());\n+            if(iter.hasNext()) {\n+                buf.append(\", \");\n+            }\n+        }\n+        buf.append(\"]\");\n+        return buf.toString();\n+    }\n+    \n+    // protected utilities\n+    //-------------------------------------------------------------------------\n+    \n+    /** Get my count of structural modifications. */\n+    protected int getModCount() {\n+        return _modCount;\n+    }\n+\n+    /** Increment my count of structural modifications. */\n+    protected void incrModCount() {\n+        _modCount++;\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    private int _modCount = 0;\n+\n+    // inner classes\n+    //-------------------------------------------------------------------------\n+    \n+    private static class ComodChecker {\n+        ComodChecker(RandomAccessFloatList source) {\n+            _source = source;  \n+            resyncModCount();             \n+        }\n+        \n+        protected RandomAccessFloatList getList() {\n+            return _source;\n+        }\n+        \n+        protected void assertNotComodified() throws ConcurrentModificationException {\n+            if(_expectedModCount != getList().getModCount()) {\n+                throw new ConcurrentModificationException();\n+            }\n+        }\n+            \n+        protected void resyncModCount() {\n+            _expectedModCount = getList().getModCount();\n+        }\n+        \n+        private RandomAccessFloatList _source = null;\n+        private int _expectedModCount = -1;\n+    }\n+    \n+    protected static class RandomAccessFloatListIterator extends ComodChecker implements FloatListIterator {\n+        RandomAccessFloatListIterator(RandomAccessFloatList list, int index) {\n+            super(list);\n+            if(index < 0 || index > getList().size()) {\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" not in [0,\" + getList().size() + \")\");\n+            } else {\n+                _nextIndex = index;\n+                resyncModCount();\n+            }\n+        }\n+            \n+        public boolean hasNext() {\n+            assertNotComodified();\n+            return _nextIndex < getList().size();\n+        }\n+        \n+        public boolean hasPrevious() {\n+            assertNotComodified();\n+            return _nextIndex > 0;\n+        }\n+        \n+        public int nextIndex() {\n+            assertNotComodified();\n+            return _nextIndex;\n+        }\n+        \n+        public int previousIndex() {\n+            assertNotComodified();\n+            return _nextIndex - 1;\n+        }\n+        \n+        public float next() {\n+            assertNotComodified();\n+            if(!hasNext()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                float val = getList().get(_nextIndex);\n+                _lastReturnedIndex = _nextIndex;\n+                _nextIndex++;\n+                return val;\n+            }\n+        }\n+        \n+        public float previous() {\n+            assertNotComodified();\n+            if(!hasPrevious()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                float val = getList().get(_nextIndex-1);\n+                _lastReturnedIndex = _nextIndex-1;\n+                _nextIndex--;\n+                return val;\n+            }\n+        }\n+        \n+        public void add(float value) {\n+            assertNotComodified();\n+            getList().add(_nextIndex,value);\n+            _nextIndex++;\n+            _lastReturnedIndex = -1;\n+            resyncModCount();\n+        }\n+    \n+        public void remove() {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().removeElementAt(_lastReturnedIndex);\n+                _lastReturnedIndex = -1;\n+                _nextIndex--;\n+                resyncModCount();\n+            }\n+        }\n+        \n+        public void set(float value) {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().set(_lastReturnedIndex,value);\n+                resyncModCount();\n+            }\n+        }\n+        \n+        private int _nextIndex = 0;\n+        private int _lastReturnedIndex = -1;        \n+    }   \n+\n+    protected static class RandomAccessFloatSubList extends RandomAccessFloatList implements FloatList {\n+        RandomAccessFloatSubList(RandomAccessFloatList list, int fromIndex, int toIndex) {\n+            if(fromIndex < 0 || toIndex > list.size()) {\n+                throw new IndexOutOfBoundsException();\n+            } else if(fromIndex > toIndex) {\n+                throw new IllegalArgumentException();                \n+            } else {\n+                _list = list;\n+                _offset = fromIndex;\n+                _limit = toIndex - fromIndex;\n+                _comod = new ComodChecker(list);\n+                _comod.resyncModCount();\n+            }            \n+        }\n+    \n+        public float get(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            return _list.get(toUnderlyingIndex(index));\n+        }\n+    \n+        public float removeElementAt(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            float val = _list.removeElementAt(toUnderlyingIndex(index));\n+            _limit--;\n+            _comod.resyncModCount();\n+            incrModCount();\n+            return val;\n+        }\n+    \n+        public float set(int index, float element) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            float val = _list.set(toUnderlyingIndex(index),element);\n+            incrModCount();\n+            _comod.resyncModCount();\n+            return val;\n+        }\n+    \n+        public void add(int index, float element) {\n+            checkRangeIncludingEndpoint(index);\n+            _comod.assertNotComodified();\n+             _list.add(toUnderlyingIndex(index),element);\n+            _limit++;\n+            _comod.resyncModCount();\n+            incrModCount();\n+        }\n+    \n+        public int size() {\n+            _comod.assertNotComodified();\n+            return _limit;\n+        }\n+    \n+        private void checkRange(int index) {\n+            if(index < 0 || index >= size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \")\");\n+            }\n+        }\n+          \n+        private void checkRangeIncludingEndpoint(int index) {\n+            if(index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \"]\");\n+            }\n+        }\n+          \n+        private int toUnderlyingIndex(int index) {\n+            return (index + _offset);\n+        }\n+        \n+        private int _offset = 0;        \n+        private int _limit = 0; \n+        private RandomAccessFloatList _list = null;\n+        private ComodChecker _comod = null;\n+    \n+    }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/RandomAccessIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessIntList.java,v 1.1 2003/04/13 22:30:57 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract base class for {@link IntList}s backed \n+ * by random access structures like arrays.\n+ * <p />\n+ * Read-only subclasses must override {@link #get}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #set}.  Variably-sized\n+ * subclasses should also override {@link #add} \n+ * and {@link #removeElementAt}.  All other methods\n+ * have at least some base implementation derived from \n+ * these.  Subclasses may choose to override these methods\n+ * to provide a more efficient implementation.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:57 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public abstract class RandomAccessIntList extends AbstractIntCollection implements IntList {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    /** Constructs an empty list. */\n+    protected RandomAccessIntList() { \n+    }    \n+\n+    // fully abstract methods\n+    //-------------------------------------------------------------------------\n+    \n+    public abstract int get(int index);\n+    public abstract int size();\n+\n+    // unsupported in base\n+    //-------------------------------------------------------------------------\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public int removeElementAt(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public int set(int index, int element) {\n+        throw new UnsupportedOperationException();\n+    }\n+        \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public void add(int index, int element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-------------------------------------------------------------------------\n+\n+    // javadocs here are inherited\n+    \n+    public boolean add(int element) {\n+        add(size(),element);\n+        return true;\n+    }\n+\n+    public boolean addAll(int index, IntCollection collection) {\n+        boolean modified = false;\n+        for(IntIterator iter = collection.iterator(); iter.hasNext(); ) {\n+            add(index++,iter.next());\n+            modified = true;\n+        }\n+        return modified;\n+    }\n+\n+    public int indexOf(int element) {\n+        int i = 0;\n+        for(IntIterator iter = iterator(); iter.hasNext(); ) {\n+            if(iter.next() == element) { \n+                return i;\n+            } else {\n+                i++;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOf(int element) {\n+        for(IntListIterator iter = listIterator(size()); iter.hasPrevious(); ) {\n+            if(iter.previous() == element) {\n+                return iter.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public IntIterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public IntListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public IntListIterator listIterator(int index) {\n+        return new RandomAccessIntListIterator(this,index);            \n+    }\n+\n+    public IntList subList(int fromIndex, int toIndex) {\n+        return new RandomAccessIntSubList(this,fromIndex,toIndex);\n+    }\n+\n+    public boolean equals(Object that) {\n+        if(this == that) { \n+            return true; \n+        } else if(that instanceof IntList) {\n+            IntList thatList = (IntList)that;\n+            if(size() != thatList.size()) {\n+                return false;\n+            }\n+            for(IntIterator thatIter = thatList.iterator(), thisIter = iterator(); thisIter.hasNext();) {\n+                if(thisIter.next() != thatIter.next()) { \n+                    return false; \n+                }\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }        \n+    }\n+    \n+    public int hashCode() {\n+        int hash = 1;\n+        for(IntIterator iter = iterator(); iter.hasNext(); ) {\n+            hash = 31*hash + iter.next();\n+        }\n+        return hash;\n+    }\n+    \n+    public String toString() {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"[\");\n+        for(IntIterator iter = iterator(); iter.hasNext();) {\n+            buf.append(iter.next());\n+            if(iter.hasNext()) {\n+                buf.append(\", \");\n+            }\n+        }\n+        buf.append(\"]\");\n+        return buf.toString();\n+    }\n+    \n+    // protected utilities\n+    //-------------------------------------------------------------------------\n+    \n+    /** Get my count of structural modifications. */\n+    protected int getModCount() {\n+        return _modCount;\n+    }\n+\n+    /** Increment my count of structural modifications. */\n+    protected void incrModCount() {\n+        _modCount++;\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    private int _modCount = 0;\n+\n+    // inner classes\n+    //-------------------------------------------------------------------------\n+    \n+    private static class ComodChecker {\n+        ComodChecker(RandomAccessIntList source) {\n+            _source = source;  \n+            resyncModCount();             \n+        }\n+        \n+        protected RandomAccessIntList getList() {\n+            return _source;\n+        }\n+        \n+        protected void assertNotComodified() throws ConcurrentModificationException {\n+            if(_expectedModCount != getList().getModCount()) {\n+                throw new ConcurrentModificationException();\n+            }\n+        }\n+            \n+        protected void resyncModCount() {\n+            _expectedModCount = getList().getModCount();\n+        }\n+        \n+        private RandomAccessIntList _source = null;\n+        private int _expectedModCount = -1;\n+    }\n+    \n+    protected static class RandomAccessIntListIterator extends ComodChecker implements IntListIterator {\n+        RandomAccessIntListIterator(RandomAccessIntList list, int index) {\n+            super(list);\n+            if(index < 0 || index > getList().size()) {\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" not in [0,\" + getList().size() + \")\");\n+            } else {\n+                _nextIndex = index;\n+                resyncModCount();\n+            }\n+        }\n+            \n+        public boolean hasNext() {\n+            assertNotComodified();\n+            return _nextIndex < getList().size();\n+        }\n+        \n+        public boolean hasPrevious() {\n+            assertNotComodified();\n+            return _nextIndex > 0;\n+        }\n+        \n+        public int nextIndex() {\n+            assertNotComodified();\n+            return _nextIndex;\n+        }\n+        \n+        public int previousIndex() {\n+            assertNotComodified();\n+            return _nextIndex - 1;\n+        }\n+        \n+        public int next() {\n+            assertNotComodified();\n+            if(!hasNext()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                int val = getList().get(_nextIndex);\n+                _lastReturnedIndex = _nextIndex;\n+                _nextIndex++;\n+                return val;\n+            }\n+        }\n+        \n+        public int previous() {\n+            assertNotComodified();\n+            if(!hasPrevious()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                int val = getList().get(_nextIndex-1);\n+                _lastReturnedIndex = _nextIndex-1;\n+                _nextIndex--;\n+                return val;\n+            }\n+        }\n+        \n+        public void add(int value) {\n+            assertNotComodified();\n+            getList().add(_nextIndex,value);\n+            _nextIndex++;\n+            _lastReturnedIndex = -1;\n+            resyncModCount();\n+        }\n+    \n+        public void remove() {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().removeElementAt(_lastReturnedIndex);\n+                _lastReturnedIndex = -1;\n+                _nextIndex--;\n+                resyncModCount();\n+            }\n+        }\n+        \n+        public void set(int value) {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().set(_lastReturnedIndex,value);\n+                resyncModCount();\n+            }\n+        }\n+        \n+        private int _nextIndex = 0;\n+        private int _lastReturnedIndex = -1;        \n+    }   \n+\n+    protected static class RandomAccessIntSubList extends RandomAccessIntList implements IntList {\n+        RandomAccessIntSubList(RandomAccessIntList list, int fromIndex, int toIndex) {\n+            if(fromIndex < 0 || toIndex > list.size()) {\n+                throw new IndexOutOfBoundsException();\n+            } else if(fromIndex > toIndex) {\n+                throw new IllegalArgumentException();                \n+            } else {\n+                _list = list;\n+                _offset = fromIndex;\n+                _limit = toIndex - fromIndex;\n+                _comod = new ComodChecker(list);\n+                _comod.resyncModCount();\n+            }            \n+        }\n+    \n+        public int get(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            return _list.get(toUnderlyingIndex(index));\n+        }\n+    \n+        public int removeElementAt(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            int val = _list.removeElementAt(toUnderlyingIndex(index));\n+            _limit--;\n+            _comod.resyncModCount();\n+            incrModCount();\n+            return val;\n+        }\n+    \n+        public int set(int index, int element) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            int val = _list.set(toUnderlyingIndex(index),element);\n+            incrModCount();\n+            _comod.resyncModCount();\n+            return val;\n+        }\n+    \n+        public void add(int index, int element) {\n+            checkRangeIncludingEndpoint(index);\n+            _comod.assertNotComodified();\n+             _list.add(toUnderlyingIndex(index),element);\n+            _limit++;\n+            _comod.resyncModCount();\n+            incrModCount();\n+        }\n+    \n+        public int size() {\n+            _comod.assertNotComodified();\n+            return _limit;\n+        }\n+    \n+        private void checkRange(int index) {\n+            if(index < 0 || index >= size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \")\");\n+            }\n+        }\n+          \n+        private void checkRangeIncludingEndpoint(int index) {\n+            if(index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \"]\");\n+            }\n+        }\n+          \n+        private int toUnderlyingIndex(int index) {\n+            return (index + _offset);\n+        }\n+        \n+        private int _offset = 0;        \n+        private int _limit = 0; \n+        private RandomAccessIntList _list = null;\n+        private ComodChecker _comod = null;\n+    \n+    }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/RandomAccessLongList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessLongList.java,v 1.1 2003/04/13 22:30:57 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract base class for {@link LongList}s backed \n+ * by random access structures like arrays.\n+ * <p />\n+ * Read-only subclasses must override {@link #get}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #set}.  Variably-sized\n+ * subclasses should also override {@link #add} \n+ * and {@link #removeElementAt}.  All other methods\n+ * have at least some base implementation derived from \n+ * these.  Subclasses may choose to override these methods\n+ * to provide a more efficient implementation.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:57 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public abstract class RandomAccessLongList extends AbstractLongCollection implements LongList {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    /** Constructs an empty list. */\n+    protected RandomAccessLongList() { \n+    }    \n+\n+    // fully abstract methods\n+    //-------------------------------------------------------------------------\n+    \n+    public abstract long get(int index);\n+    public abstract int size();\n+\n+    // unsupported in base\n+    //-------------------------------------------------------------------------\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public long removeElementAt(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public long set(int index, long element) {\n+        throw new UnsupportedOperationException();\n+    }\n+        \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public void add(int index, long element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-------------------------------------------------------------------------\n+\n+    // javadocs here are inherited\n+    \n+    public boolean add(long element) {\n+        add(size(),element);\n+        return true;\n+    }\n+\n+    public boolean addAll(int index, LongCollection collection) {\n+        boolean modified = false;\n+        for(LongIterator iter = collection.iterator(); iter.hasNext(); ) {\n+            add(index++,iter.next());\n+            modified = true;\n+        }\n+        return modified;\n+    }\n+\n+    public int indexOf(long element) {\n+        int i = 0;\n+        for(LongIterator iter = iterator(); iter.hasNext(); ) {\n+            if(iter.next() == element) { \n+                return i;\n+            } else {\n+                i++;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOf(long element) {\n+        for(LongListIterator iter = listIterator(size()); iter.hasPrevious(); ) {\n+            if(iter.previous() == element) {\n+                return iter.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public LongIterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public LongListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public LongListIterator listIterator(int index) {\n+        return new RandomAccessLongListIterator(this,index);            \n+    }\n+\n+    public LongList subList(int fromIndex, int toIndex) {\n+        return new RandomAccessLongSubList(this,fromIndex,toIndex);\n+    }\n+\n+    public boolean equals(Object that) {\n+        if(this == that) { \n+            return true; \n+        } else if(that instanceof LongList) {\n+            LongList thatList = (LongList)that;\n+            if(size() != thatList.size()) {\n+                return false;\n+            }\n+            for(LongIterator thatIter = thatList.iterator(), thisIter = iterator(); thisIter.hasNext();) {\n+                if(thisIter.next() != thatIter.next()) { \n+                    return false; \n+                }\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }        \n+    }\n+    \n+    public int hashCode() {\n+        int hash = 1;\n+        for(LongIterator iter = iterator(); iter.hasNext(); ) {\n+        \tlong val = iter.next();\n+            hash = 31*hash + ((int)(val ^ (val >>> 32)));\n+        }\n+        return hash;\n+    }\n+    \n+    public String toString() {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"[\");\n+        for(LongIterator iter = iterator(); iter.hasNext();) {\n+            buf.append(iter.next());\n+            if(iter.hasNext()) {\n+                buf.append(\", \");\n+            }\n+        }\n+        buf.append(\"]\");\n+        return buf.toString();\n+    }\n+    \n+    // protected utilities\n+    //-------------------------------------------------------------------------\n+    \n+    /** Get my count of structural modifications. */\n+    protected int getModCount() {\n+        return _modCount;\n+    }\n+\n+    /** Increment my count of structural modifications. */\n+    protected void incrModCount() {\n+        _modCount++;\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    private int _modCount = 0;\n+\n+    // inner classes\n+    //-------------------------------------------------------------------------\n+    \n+    private static class ComodChecker {\n+        ComodChecker(RandomAccessLongList source) {\n+            _source = source;  \n+            resyncModCount();             \n+        }\n+        \n+        protected RandomAccessLongList getList() {\n+            return _source;\n+        }\n+        \n+        protected void assertNotComodified() throws ConcurrentModificationException {\n+            if(_expectedModCount != getList().getModCount()) {\n+                throw new ConcurrentModificationException();\n+            }\n+        }\n+            \n+        protected void resyncModCount() {\n+            _expectedModCount = getList().getModCount();\n+        }\n+        \n+        private RandomAccessLongList _source = null;\n+        private int _expectedModCount = -1;\n+    }\n+    \n+    protected static class RandomAccessLongListIterator extends ComodChecker implements LongListIterator {\n+        RandomAccessLongListIterator(RandomAccessLongList list, int index) {\n+            super(list);\n+            if(index < 0 || index > getList().size()) {\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" not in [0,\" + getList().size() + \")\");\n+            } else {\n+                _nextIndex = index;\n+                resyncModCount();\n+            }\n+        }\n+            \n+        public boolean hasNext() {\n+            assertNotComodified();\n+            return _nextIndex < getList().size();\n+        }\n+        \n+        public boolean hasPrevious() {\n+            assertNotComodified();\n+            return _nextIndex > 0;\n+        }\n+        \n+        public int nextIndex() {\n+            assertNotComodified();\n+            return _nextIndex;\n+        }\n+        \n+        public int previousIndex() {\n+            assertNotComodified();\n+            return _nextIndex - 1;\n+        }\n+        \n+        public long next() {\n+            assertNotComodified();\n+            if(!hasNext()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                long val = getList().get(_nextIndex);\n+                _lastReturnedIndex = _nextIndex;\n+                _nextIndex++;\n+                return val;\n+            }\n+        }\n+        \n+        public long previous() {\n+            assertNotComodified();\n+            if(!hasPrevious()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                long val = getList().get(_nextIndex-1);\n+                _lastReturnedIndex = _nextIndex-1;\n+                _nextIndex--;\n+                return val;\n+            }\n+        }\n+        \n+        public void add(long value) {\n+            assertNotComodified();\n+            getList().add(_nextIndex,value);\n+            _nextIndex++;\n+            _lastReturnedIndex = -1;\n+            resyncModCount();\n+        }\n+    \n+        public void remove() {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().removeElementAt(_lastReturnedIndex);\n+                _lastReturnedIndex = -1;\n+                _nextIndex--;\n+                resyncModCount();\n+            }\n+        }\n+        \n+        public void set(long value) {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().set(_lastReturnedIndex,value);\n+                resyncModCount();\n+            }\n+        }\n+        \n+        private int _nextIndex = 0;\n+        private int _lastReturnedIndex = -1;        \n+    }   \n+\n+    protected static class RandomAccessLongSubList extends RandomAccessLongList implements LongList {\n+        RandomAccessLongSubList(RandomAccessLongList list, int fromIndex, int toIndex) {\n+            if(fromIndex < 0 || toIndex > list.size()) {\n+                throw new IndexOutOfBoundsException();\n+            } else if(fromIndex > toIndex) {\n+                throw new IllegalArgumentException();                \n+            } else {\n+                _list = list;\n+                _offset = fromIndex;\n+                _limit = toIndex - fromIndex;\n+                _comod = new ComodChecker(list);\n+                _comod.resyncModCount();\n+            }            \n+        }\n+    \n+        public long get(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            return _list.get(toUnderlyingIndex(index));\n+        }\n+    \n+        public long removeElementAt(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            long val = _list.removeElementAt(toUnderlyingIndex(index));\n+            _limit--;\n+            _comod.resyncModCount();\n+            incrModCount();\n+            return val;\n+        }\n+    \n+        public long set(int index, long element) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            long val = _list.set(toUnderlyingIndex(index),element);\n+            incrModCount();\n+            _comod.resyncModCount();\n+            return val;\n+        }\n+    \n+        public void add(int index, long element) {\n+            checkRangeIncludingEndpoint(index);\n+            _comod.assertNotComodified();\n+             _list.add(toUnderlyingIndex(index),element);\n+            _limit++;\n+            _comod.resyncModCount();\n+            incrModCount();\n+        }\n+    \n+        public int size() {\n+            _comod.assertNotComodified();\n+            return _limit;\n+        }\n+    \n+        private void checkRange(int index) {\n+            if(index < 0 || index >= size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \")\");\n+            }\n+        }\n+          \n+        private void checkRangeIncludingEndpoint(int index) {\n+            if(index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \"]\");\n+            }\n+        }\n+          \n+        private int toUnderlyingIndex(int index) {\n+            return (index + _offset);\n+        }\n+        \n+        private int _offset = 0;        \n+        private int _limit = 0; \n+        private RandomAccessLongList _list = null;\n+        private ComodChecker _comod = null;\n+    \n+    }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/RandomAccessShortList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessShortList.java,v 1.1 2003/04/13 22:30:57 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract base class for {@link ShortList}s backed \n+ * by random access structures like arrays.\n+ * <p />\n+ * Read-only subclasses must override {@link #get}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #set}.  Variably-sized\n+ * subclasses should also override {@link #add} \n+ * and {@link #removeElementAt}.  All other methods\n+ * have at least some base implementation derived from \n+ * these.  Subclasses may choose to override these methods\n+ * to provide a more efficient implementation.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:57 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public abstract class RandomAccessShortList extends AbstractShortCollection implements ShortList {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    /** Constructs an empty list. */\n+    protected RandomAccessShortList() { \n+    }    \n+\n+    // fully abstract methods\n+    //-------------------------------------------------------------------------\n+    \n+    public abstract short get(int index);\n+    public abstract int size();\n+\n+    // unsupported in base\n+    //-------------------------------------------------------------------------\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public short removeElementAt(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public short set(int index, short element) {\n+        throw new UnsupportedOperationException();\n+    }\n+        \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public void add(int index, short element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-------------------------------------------------------------------------\n+\n+    // javadocs here are inherited\n+    \n+    public boolean add(short element) {\n+        add(size(),element);\n+        return true;\n+    }\n+\n+    public boolean addAll(int index, ShortCollection collection) {\n+        boolean modified = false;\n+        for(ShortIterator iter = collection.iterator(); iter.hasNext(); ) {\n+            add(index++,iter.next());\n+            modified = true;\n+        }\n+        return modified;\n+    }\n+\n+    public int indexOf(short element) {\n+        int i = 0;\n+        for(ShortIterator iter = iterator(); iter.hasNext(); ) {\n+            if(iter.next() == element) { \n+                return i;\n+            } else {\n+                i++;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOf(short element) {\n+        for(ShortListIterator iter = listIterator(size()); iter.hasPrevious(); ) {\n+            if(iter.previous() == element) {\n+                return iter.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public ShortIterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public ShortListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ShortListIterator listIterator(int index) {\n+        return new RandomAccessShortListIterator(this,index);            \n+    }\n+\n+    public ShortList subList(int fromIndex, int toIndex) {\n+        return new RandomAccessShortSubList(this,fromIndex,toIndex);\n+    }\n+\n+    public boolean equals(Object that) {\n+        if(this == that) { \n+            return true; \n+        } else if(that instanceof ShortList) {\n+            ShortList thatList = (ShortList)that;\n+            if(size() != thatList.size()) {\n+                return false;\n+            }\n+            for(ShortIterator thatIter = thatList.iterator(), thisIter = iterator(); thisIter.hasNext();) {\n+                if(thisIter.next() != thatIter.next()) { \n+                    return false; \n+                }\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }        \n+    }\n+    \n+    public int hashCode() {\n+        int hash = 1;\n+        for(ShortIterator iter = iterator(); iter.hasNext(); ) {\n+            hash = 31*hash + iter.next();\n+        }\n+        return hash;\n+    }\n+    \n+    public String toString() {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"[\");\n+        for(ShortIterator iter = iterator(); iter.hasNext();) {\n+            buf.append(iter.next());\n+            if(iter.hasNext()) {\n+                buf.append(\", \");\n+            }\n+        }\n+        buf.append(\"]\");\n+        return buf.toString();\n+    }\n+    \n+    // protected utilities\n+    //-------------------------------------------------------------------------\n+    \n+    /** Get my count of structural modifications. */\n+    protected int getModCount() {\n+        return _modCount;\n+    }\n+\n+    /** Increment my count of structural modifications. */\n+    protected void incrModCount() {\n+        _modCount++;\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    private int _modCount = 0;\n+\n+    // inner classes\n+    //-------------------------------------------------------------------------\n+    \n+    private static class ComodChecker {\n+        ComodChecker(RandomAccessShortList source) {\n+            _source = source;  \n+            resyncModCount();             \n+        }\n+        \n+        protected RandomAccessShortList getList() {\n+            return _source;\n+        }\n+        \n+        protected void assertNotComodified() throws ConcurrentModificationException {\n+            if(_expectedModCount != getList().getModCount()) {\n+                throw new ConcurrentModificationException();\n+            }\n+        }\n+            \n+        protected void resyncModCount() {\n+            _expectedModCount = getList().getModCount();\n+        }\n+        \n+        private RandomAccessShortList _source = null;\n+        private int _expectedModCount = -1;\n+    }\n+    \n+    protected static class RandomAccessShortListIterator extends ComodChecker implements ShortListIterator {\n+        RandomAccessShortListIterator(RandomAccessShortList list, int index) {\n+            super(list);\n+            if(index < 0 || index > getList().size()) {\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" not in [0,\" + getList().size() + \")\");\n+            } else {\n+                _nextIndex = index;\n+                resyncModCount();\n+            }\n+        }\n+            \n+        public boolean hasNext() {\n+            assertNotComodified();\n+            return _nextIndex < getList().size();\n+        }\n+        \n+        public boolean hasPrevious() {\n+            assertNotComodified();\n+            return _nextIndex > 0;\n+        }\n+        \n+        public int nextIndex() {\n+            assertNotComodified();\n+            return _nextIndex;\n+        }\n+        \n+        public int previousIndex() {\n+            assertNotComodified();\n+            return _nextIndex - 1;\n+        }\n+        \n+        public short next() {\n+            assertNotComodified();\n+            if(!hasNext()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                short val = getList().get(_nextIndex);\n+                _lastReturnedIndex = _nextIndex;\n+                _nextIndex++;\n+                return val;\n+            }\n+        }\n+        \n+        public short previous() {\n+            assertNotComodified();\n+            if(!hasPrevious()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                short val = getList().get(_nextIndex-1);\n+                _lastReturnedIndex = _nextIndex-1;\n+                _nextIndex--;\n+                return val;\n+            }\n+        }\n+        \n+        public void add(short value) {\n+            assertNotComodified();\n+            getList().add(_nextIndex,value);\n+            _nextIndex++;\n+            _lastReturnedIndex = -1;\n+            resyncModCount();\n+        }\n+    \n+        public void remove() {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().removeElementAt(_lastReturnedIndex);\n+                _lastReturnedIndex = -1;\n+                _nextIndex--;\n+                resyncModCount();\n+            }\n+        }\n+        \n+        public void set(short value) {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().set(_lastReturnedIndex,value);\n+                resyncModCount();\n+            }\n+        }\n+        \n+        private int _nextIndex = 0;\n+        private int _lastReturnedIndex = -1;        \n+    }   \n+\n+    protected static class RandomAccessShortSubList extends RandomAccessShortList implements ShortList {\n+        RandomAccessShortSubList(RandomAccessShortList list, int fromIndex, int toIndex) {\n+            if(fromIndex < 0 || toIndex > list.size()) {\n+                throw new IndexOutOfBoundsException();\n+            } else if(fromIndex > toIndex) {\n+                throw new IllegalArgumentException();                \n+            } else {\n+                _list = list;\n+                _offset = fromIndex;\n+                _limit = toIndex - fromIndex;\n+                _comod = new ComodChecker(list);\n+                _comod.resyncModCount();\n+            }            \n+        }\n+    \n+        public short get(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            return _list.get(toUnderlyingIndex(index));\n+        }\n+    \n+        public short removeElementAt(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            short val = _list.removeElementAt(toUnderlyingIndex(index));\n+            _limit--;\n+            _comod.resyncModCount();\n+            incrModCount();\n+            return val;\n+        }\n+    \n+        public short set(int index, short element) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            short val = _list.set(toUnderlyingIndex(index),element);\n+            incrModCount();\n+            _comod.resyncModCount();\n+            return val;\n+        }\n+    \n+        public void add(int index, short element) {\n+            checkRangeIncludingEndpoint(index);\n+            _comod.assertNotComodified();\n+             _list.add(toUnderlyingIndex(index),element);\n+            _limit++;\n+            _comod.resyncModCount();\n+            incrModCount();\n+        }\n+    \n+        public int size() {\n+            _comod.assertNotComodified();\n+            return _limit;\n+        }\n+    \n+        private void checkRange(int index) {\n+            if(index < 0 || index >= size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \")\");\n+            }\n+        }\n+          \n+        private void checkRangeIncludingEndpoint(int index) {\n+            if(index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \"]\");\n+            }\n+        }\n+          \n+        private int toUnderlyingIndex(int index) {\n+            return (index + _offset);\n+        }\n+        \n+        private int _offset = 0;        \n+        private int _limit = 0; \n+        private RandomAccessShortList _list = null;\n+        private ComodChecker _comod = null;\n+    \n+    }\n+}\n+\n--- a/src/test/org/apache/commons/collections/primitives/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.14 2003/04/13 22:08:08 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.15 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.14 $ $Date: 2003/04/13 22:08:08 $\n+ * @version $Revision: 1.15 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n         TestSuite suite = new TestSuite();\n \n         suite.addTest(TestAbstractShortCollection.suite());\n-        suite.addTest(TestAbstractRandomAccessShortList.suite());\n+        suite.addTest(TestRandomAccessShortList.suite());\n         suite.addTest(TestArrayShortList.suite());\n         suite.addTest(TestArrayUnsignedByteList.suite());\n \n         suite.addTest(TestAbstractIntCollection.suite());\n-        suite.addTest(TestAbstractRandomAccessIntList.suite());\n+        suite.addTest(TestRandomAccessIntList.suite());\n         suite.addTest(TestArrayIntList.suite());\n         suite.addTest(TestArrayUnsignedShortList.suite());\n \n \t\tsuite.addTest(TestAbstractLongCollection.suite());\n-\t\tsuite.addTest(TestAbstractRandomAccessLongList.suite());\n+\t\tsuite.addTest(TestRandomAccessLongList.suite());\n         suite.addTest(TestArrayLongList.suite());\n         suite.addTest(TestArrayUnsignedIntList.suite());\n \n         suite.addTest(TestAbstractFloatCollection.suite());\n-        suite.addTest(TestAbstractRandomAccessFloatList.suite());\n+        suite.addTest(TestRandomAccessFloatList.suite());\n         suite.addTest(TestArrayFloatList.suite());\n \n         suite.addTest(org.apache.commons.collections.primitives.adapters.TestAll.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestRandomAccessFloatList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestRandomAccessFloatList.java,v 1.1 2003/04/13 22:30:56 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:56 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestRandomAccessFloatList extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestRandomAccessFloatList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestRandomAccessFloatList.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        RandomAccessFloatList list = new AbstractRandomAccessFloatListImpl();\n+        try {\n+            list.add((float)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+        try {\n+            list.set(0,(float)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+\n+    public void testAddAllIsUnsupportedByDefault() {\n+        RandomAccessFloatList list = new AbstractRandomAccessFloatListImpl();\n+        FloatList list2 = new ArrayFloatList();\n+        list2.add((float)3);\n+        try {\n+            list.addAll(list2);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testSetIsUnsupportedByDefault() {\n+        RandomAccessFloatList list = new AbstractRandomAccessFloatListImpl();\n+        try {\n+            list.set(0,(float)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testRemoveElementIsUnsupportedByDefault() {\n+        RandomAccessFloatList list = new AbstractRandomAccessFloatListImpl();\n+        try {\n+            list.removeElementAt(0);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class AbstractRandomAccessFloatListImpl extends RandomAccessFloatList {\n+        public AbstractRandomAccessFloatListImpl() {\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.FloatList#get(int)\n+         */\n+        public float get(int index) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.FloatCollection#size()\n+         */\n+        public int size() {\n+            return 0;\n+        }\n+\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestRandomAccessIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestRandomAccessIntList.java,v 1.1 2003/04/13 22:30:56 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:56 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestRandomAccessIntList extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestRandomAccessIntList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestRandomAccessIntList.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        RandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        try {\n+            list.add(1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+        try {\n+            list.set(0,1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+\n+    public void testAddAllIsUnsupportedByDefault() {\n+        RandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        IntList list2 = new ArrayIntList();\n+        list2.add(3);\n+        try {\n+            list.addAll(list2);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testSetIsUnsupportedByDefault() {\n+        RandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        try {\n+            list.set(0,1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testRemoveElementIsUnsupportedByDefault() {\n+        RandomAccessIntList list = new AbstractRandomAccessIntListImpl();\n+        try {\n+            list.removeElementAt(0);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class AbstractRandomAccessIntListImpl extends RandomAccessIntList {\n+        public AbstractRandomAccessIntListImpl() {\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.IntList#get(int)\n+         */\n+        public int get(int index) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.IntCollection#size()\n+         */\n+        public int size() {\n+            return 0;\n+        }\n+\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestRandomAccessLongList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestRandomAccessLongList.java,v 1.1 2003/04/13 22:30:56 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:56 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestRandomAccessLongList extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestRandomAccessLongList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestRandomAccessLongList.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        RandomAccessLongList list = new AbstractRandomAccessLongListImpl();\n+        try {\n+            list.add((long)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+        try {\n+            list.set(0,(long)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+\n+    public void testAddAllIsUnsupportedByDefault() {\n+        RandomAccessLongList list = new AbstractRandomAccessLongListImpl();\n+        LongList list2 = new ArrayLongList();\n+        list2.add(3);\n+        try {\n+            list.addAll(list2);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testSetIsUnsupportedByDefault() {\n+        RandomAccessLongList list = new AbstractRandomAccessLongListImpl();\n+        try {\n+            list.set(0,(long)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testRemoveElementIsUnsupportedByDefault() {\n+        RandomAccessLongList list = new AbstractRandomAccessLongListImpl();\n+        try {\n+            list.removeElementAt(0);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class AbstractRandomAccessLongListImpl extends RandomAccessLongList {\n+        public AbstractRandomAccessLongListImpl() {\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.LongList#get(int)\n+         */\n+        public long get(int index) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.LongCollection#size()\n+         */\n+        public int size() {\n+            return 0;\n+        }\n+\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestRandomAccessShortList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestRandomAccessShortList.java,v 1.1 2003/04/13 22:30:56 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/13 22:30:56 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestRandomAccessShortList extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestRandomAccessShortList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestRandomAccessShortList.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        RandomAccessShortList list = new AbstractRandomAccessShortListImpl();\n+        try {\n+            list.add((short)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+        try {\n+            list.set(0,(short)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+\n+    public void testAddAllIsUnsupportedByDefault() {\n+        RandomAccessShortList list = new AbstractRandomAccessShortListImpl();\n+        ShortList list2 = new ArrayShortList();\n+        list2.add((short)3);\n+        try {\n+            list.addAll(list2);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testSetIsUnsupportedByDefault() {\n+        RandomAccessShortList list = new AbstractRandomAccessShortListImpl();\n+        try {\n+            list.set(0,(short)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testRemoveElementIsUnsupportedByDefault() {\n+        RandomAccessShortList list = new AbstractRandomAccessShortListImpl();\n+        try {\n+            list.removeElementAt(0);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class AbstractRandomAccessShortListImpl extends RandomAccessShortList {\n+        public AbstractRandomAccessShortListImpl() {\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.ShortList#get(int)\n+         */\n+        public short get(int index) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.ShortCollection#size()\n+         */\n+        public int size() {\n+            return 0;\n+        }\n+\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatCollectionCollection.java,v 1.1 2003/04/13 22:08:07 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatCollectionCollection.java,v 1.2 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.TestObject;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessFloatList;\n+import org.apache.commons.collections.primitives.RandomAccessFloatList;\n import org.apache.commons.collections.primitives.ArrayFloatList;\n import org.apache.commons.collections.primitives.FloatList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/13 22:08:07 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestFloatCollectionCollection extends TestObject {\n     }\n     \n     public void testWrapNonSerializable() {\n-        Collection collection = FloatCollectionCollection.wrap(new AbstractRandomAccessFloatList() { \n+        Collection collection = FloatCollectionCollection.wrap(new RandomAccessFloatList() { \n             public float get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListList.java,v 1.1 2003/04/13 22:08:07 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListList.java,v 1.2 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.TestList;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessFloatList;\n+import org.apache.commons.collections.primitives.RandomAccessFloatList;\n import org.apache.commons.collections.primitives.ArrayFloatList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/13 22:08:07 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestFloatListList extends TestList {\n     }\n     \n     public void testWrapNonSerializable() {\n-        List list = FloatListList.wrap(new AbstractRandomAccessFloatList() { \n+        List list = FloatListList.wrap(new RandomAccessFloatList() { \n             public float get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntCollectionCollection.java,v 1.2 2003/03/05 19:10:51 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntCollectionCollection.java,v 1.3 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.TestObject;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessIntList;\n+import org.apache.commons.collections.primitives.RandomAccessIntList;\n import org.apache.commons.collections.primitives.ArrayIntList;\n import org.apache.commons.collections.primitives.IntList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/03/05 19:10:51 $\n+ * @version $Revision: 1.3 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntCollectionCollection extends TestObject {\n     }\n     \n     public void testWrapNonSerializable() {\n-        Collection collection = IntCollectionCollection.wrap(new AbstractRandomAccessIntList() { \n+        Collection collection = IntCollectionCollection.wrap(new RandomAccessIntList() { \n             public int get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.3 2003/03/05 19:10:51 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.4 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.TestList;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessIntList;\n+import org.apache.commons.collections.primitives.RandomAccessIntList;\n import org.apache.commons.collections.primitives.ArrayIntList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/03/05 19:10:51 $\n+ * @version $Revision: 1.4 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntListList extends TestList {\n     }\n     \n     public void testWrapNonSerializable() {\n-        List list = IntListList.wrap(new AbstractRandomAccessIntList() { \n+        List list = IntListList.wrap(new RandomAccessIntList() { \n             public int get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongCollectionCollection.java,v 1.1 2003/04/08 18:24:35 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongCollectionCollection.java,v 1.2 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.TestObject;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessLongList;\n+import org.apache.commons.collections.primitives.RandomAccessLongList;\n import org.apache.commons.collections.primitives.ArrayLongList;\n import org.apache.commons.collections.primitives.LongList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/08 18:24:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestLongCollectionCollection extends TestObject {\n     }\n     \n     public void testWrapNonSerializable() {\n-        Collection collection = LongCollectionCollection.wrap(new AbstractRandomAccessLongList() { \n+        Collection collection = LongCollectionCollection.wrap(new RandomAccessLongList() { \n             public long get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListList.java,v 1.1 2003/04/08 18:24:35 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListList.java,v 1.2 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.TestList;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessLongList;\n+import org.apache.commons.collections.primitives.RandomAccessLongList;\n import org.apache.commons.collections.primitives.ArrayLongList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/08 18:24:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestLongListList extends TestList {\n     }\n     \n     public void testWrapNonSerializable() {\n-        List list = LongListList.wrap(new AbstractRandomAccessLongList() { \n+        List list = LongListList.wrap(new RandomAccessLongList() { \n             public long get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortCollectionCollection.java,v 1.1 2003/04/11 00:55:36 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortCollectionCollection.java,v 1.2 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.TestObject;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessShortList;\n+import org.apache.commons.collections.primitives.RandomAccessShortList;\n import org.apache.commons.collections.primitives.ArrayShortList;\n import org.apache.commons.collections.primitives.ShortList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/11 00:55:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestShortCollectionCollection extends TestObject {\n     }\n     \n     public void testWrapNonSerializable() {\n-        Collection collection = ShortCollectionCollection.wrap(new AbstractRandomAccessShortList() { \n+        Collection collection = ShortCollectionCollection.wrap(new RandomAccessShortList() { \n             public short get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListList.java,v 1.1 2003/04/11 00:55:36 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListList.java,v 1.2 2003/04/13 22:30:56 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.TestList;\n-import org.apache.commons.collections.primitives.AbstractRandomAccessShortList;\n+import org.apache.commons.collections.primitives.RandomAccessShortList;\n import org.apache.commons.collections.primitives.ArrayShortList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/04/11 00:55:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/04/13 22:30:56 $\n  * @author Rodney Waldhoff\n  */\n public class TestShortListList extends TestList {\n     }\n     \n     public void testWrapNonSerializable() {\n-        List list = ShortListList.wrap(new AbstractRandomAccessShortList() { \n+        List list = ShortListList.wrap(new RandomAccessShortList() { \n             public short get(int i) { throw new IndexOutOfBoundsException(); } \n             public int size() { return 0; } \n         });", "timestamp": 1050273057, "metainfo": ""}