{"sha": "e28052ee7602958fe67918ed163ff9e7894c76a3", "log": "Test Performance optimised LinkedList, from Jeff Varszegi   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.36 2002/10/15 21:51:21 scolebourne Exp $\n- * $Revision: 1.36 $\n- * $Date: 2002/10/15 21:51:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.37 2002/11/18 23:58:46 scolebourne Exp $\n+ * $Revision: 1.37 $\n+ * $Date: 2002/11/18 23:58:46 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.36 2002/10/15 21:51:21 scolebourne Exp $\n+ * @version $Id: TestAll.java,v 1.37 2002/11/18 23:58:46 scolebourne Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestHashBag.suite());\n         suite.addTest(TestLRUMap.suite());\n         suite.addTest(TestMultiHashMap.suite());\n+        suite.addTest(TestNodeCachingLinkedList.suite());\n         suite.addTest(TestSequencedHashMap.suite());\n         suite.addTest(TestStaticBucketMap.suite());\n         suite.addTest(TestTreeBag.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestNodeCachingLinkedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestNodeCachingLinkedList.java,v 1.1 2002/11/18 23:58:46 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/18 23:58:46 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.*;\n+\n+import junit.framework.Test;\n+/**\n+ * Test class for NodeCachingLinkedList, a performance optimised LinkedList.\n+ * \n+ * @author Jeff Varszegi\n+ */\n+public class TestNodeCachingLinkedList extends TestList {\n+    protected NodeCachingLinkedList list = null;\n+\n+    public TestNodeCachingLinkedList(String _testName) {\n+        super(_testName);\n+    }\n+\n+    public List makeEmptyList() {\n+        return new NodeCachingLinkedList();\n+    }\n+\n+    public void setUp() {\n+        list = (NodeCachingLinkedList)makeEmptyList();\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestNodeCachingLinkedList.class);\n+    }\n+    \n+    public static void compareSpeed() {\n+        NodeCachingLinkedList ncll = new NodeCachingLinkedList();\n+        LinkedList ll = new LinkedList();\n+        \n+        Object o1 = new Object();\n+        Object o2 = new Object();\n+        \n+        int loopCount = 4000000;\n+        \n+        long startTime, endTime;\n+        \n+        System.out.println(\"Testing relative execution time of commonly-used methods...\");\n+        \n+        startTime = System.currentTimeMillis();   \n+        for(int x = loopCount; x > 0; x--) {\n+            // unrolled a few times to minimize effect of loop\n+            ll.addFirst(o1);\n+            ll.addLast(o2);\n+            ll.removeFirst();\n+            ll.removeLast();\n+            ll.add(o1);\n+            ll.remove(0);\n+            //\n+            ll.addFirst(o1);\n+            ll.addLast(o2);\n+            ll.removeFirst();\n+            ll.removeLast();\n+            ll.add(o1);\n+            ll.remove(0);\n+            //\n+            ll.addFirst(o1);\n+            ll.addLast(o2);\n+            ll.removeFirst();\n+            ll.removeLast();\n+            ll.add(o1);\n+            ll.remove(0);\n+        }\n+        endTime = System.currentTimeMillis();   \n+        System.out.println(\"Time with LinkedList: \" + (endTime - startTime) + \" ms\");\n+\n+        startTime = System.currentTimeMillis();   \n+        for(int x = loopCount; x > 0; x--) {\n+            ncll.addFirst(o1);\n+            ncll.addLast(o2);\n+            ncll.removeFirst();\n+            ncll.removeLast();\n+            ncll.add(o1);\n+            ncll.remove(0);\n+            //\n+            ncll.addFirst(o1);\n+            ncll.addLast(o2);\n+            ncll.removeFirst();\n+            ncll.removeLast();\n+            ncll.add(o1);\n+            ncll.remove(0);\n+            //\n+            ncll.addFirst(o1);\n+            ncll.addLast(o2);\n+            ncll.removeFirst();\n+            ncll.removeLast();\n+            ncll.add(o1);\n+            ncll.remove(0);\n+        }\n+        endTime = System.currentTimeMillis();   \n+        System.out.println(\"Time with NodeCachingLinkedList: \" + (endTime - startTime) + \" ms\");\n+\n+    }\n+    \n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestNodeCachingLinkedList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}", "timestamp": 1037663926, "metainfo": ""}