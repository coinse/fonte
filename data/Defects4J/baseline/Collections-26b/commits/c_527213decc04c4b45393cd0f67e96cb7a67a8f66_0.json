{"sha": "527213decc04c4b45393cd0f67e96cb7a67a8f66", "log": "[COLLECTIONS-524] ListOrderedSet.listOrderedSet(List) did not remove duplicates from the input list. Thanks to J Goodfellow.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n import java.util.ListIterator;\n import java.util.Set;\n \n+import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.OrderedIterator;\n+import org.apache.commons.collections4.functors.UniquePredicate;\n import org.apache.commons.collections4.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections4.list.UnmodifiableList;\n \n     private final List<E> setOrder;\n \n     /**\n-     * Factory method to create an ordered set specifying the list and set to\n-     * use.\n+     * Factory method to create an ordered set specifying the list and set to use.\n      * <p>\n      * The list and set must both be empty.\n      *\n     }\n \n     /**\n-     * Factory method to create an ordered set using the supplied list to retain\n-     * order.\n+     * Factory method to create an ordered set using the supplied list to retain order.\n      * <p>\n      * A <code>HashSet</code> is used for the set behaviour.\n      * <p>\n         if (list == null) {\n             throw new IllegalArgumentException(\"List must not be null\");\n         }\n+        CollectionUtils.filter(list, UniquePredicate.uniquePredicate());\n         final Set<E> set = new HashSet<E>(list);\n-        list.retainAll(set);\n \n         return new ListOrderedSet<E>(set, list);\n     }\n--- a/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java\n import java.util.List;\n import java.util.Set;\n \n+import org.apache.commons.collections4.IteratorUtils;\n+\n /**\n  * Extension of {@link AbstractSetTest} for exercising the\n  * {@link ListOrderedSet} implementation.\n         assertTrue(stop - start < 5000);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public void testDuplicates() {\n+        final List<E> list = new ArrayList<E>(10);\n+        list.add((E) Integer.valueOf(1));\n+        list.add((E) Integer.valueOf(2));\n+        list.add((E) Integer.valueOf(3));\n+        list.add((E) Integer.valueOf(1));\n+\n+        final ListOrderedSet<E> orderedSet = ListOrderedSet.listOrderedSet(list);\n+\n+        assertEquals(3, orderedSet.size());\n+        assertEquals(3, IteratorUtils.toArray(orderedSet.iterator()).length);\n+\n+        // insertion order preserved?\n+        assertEquals(Integer.valueOf(1), orderedSet.get(0));\n+        assertEquals(Integer.valueOf(2), orderedSet.get(1));\n+        assertEquals(Integer.valueOf(3), orderedSet.get(2));\n+    }\n+\n     static class A {\n \n         @Override", "timestamp": 1399414370, "metainfo": ""}