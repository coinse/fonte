{"sha": "dce4319552e773fb98e794d09c23e8e6bfc0cfb9", "log": "Make Flat3Map serializable bug 27946 Add clone() to Flat3Map   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.AbstractCollection;\n import java.util.AbstractSet;\n import java.util.Collection;\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.13 $ $Date: 2004/02/18 01:13:19 $\n+ * @version $Revision: 1.14 $ $Date: 2004/03/31 23:18:56 $\n  *\n  * @author Stephen Colebourne\n  */\n-public class Flat3Map implements IterableMap {\n+public class Flat3Map implements IterableMap, Serializable, Cloneable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = -6701087419741928296L;\n \n     /** The size of the map, used while in flat mode */\n-    private int size;\n+    private transient int size;\n     /** Hash, used while in flat mode */\n-    private int hash1;\n+    private transient int hash1;\n     /** Hash, used while in flat mode */\n-    private int hash2;\n+    private transient int hash2;\n     /** Hash, used while in flat mode */\n-    private int hash3;\n+    private transient int hash3;\n     /** Key, used while in flat mode */\n-    private Object key1;\n+    private transient Object key1;\n     /** Key, used while in flat mode */\n-    private Object key2;\n+    private transient Object key2;\n     /** Key, used while in flat mode */\n-    private Object key3;\n+    private transient Object key3;\n     /** Value, used while in flat mode */\n-    private Object value1;\n+    private transient Object value1;\n     /** Value, used while in flat mode */\n-    private Object value2;\n+    private transient Object value2;\n     /** Value, used while in flat mode */\n-    private Object value3;\n+    private transient Object value3;\n     /** Map, used while in delegate mode */\n-    private HashedMap delegateMap;\n+    private transient HashedMap delegateMap;\n \n     /**\n      * Constructor.\n      * Converts the flat map data to a HashMap.\n      */\n     private void convertToMap() {\n-        delegateMap = new HashedMap();\n+        delegateMap = createDelegateMap();\n         switch (size) {  // drop through\n             case 3:\n                 delegateMap.put(key3, value3);\n         hash1 = hash2 = hash3 = 0;\n         key1 = key2 = key3 = null;\n         value1 = value2 = value3 = null;\n+    }\n+\n+    /**\n+     * Create an instance of the map used for storage when in delegation mode.\n+     * This can be overridden by subclasses.\n+     *\n+     * @return a new HashedMap or subclass\n+     */\n+    protected HashedMap createDelegateMap() {\n+        return new HashedMap();\n     }\n \n     /**\n             return getValue();\n         }\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeInt(size());\n+        for (MapIterator it = mapIterator(); it.hasNext();) {\n+            out.writeObject(it.next());  // key\n+            out.writeObject(it.getValue());  // value\n+        }\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        int count = in.readInt();\n+        if (count > 3) {\n+            delegateMap = createDelegateMap();\n+        }\n+        for (int i = count; i > 0; i--) {\n+            put(in.readObject(), in.readObject());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Clones the map without cloning the keys or values.\n+     *\n+     * @return a shallow clone\n+     */\n+    public Object clone() {\n+        try {\n+            Flat3Map cloned = (Flat3Map) super.clone();\n+            if (cloned.delegateMap != null) {\n+                cloned.delegateMap = (HashedMap) cloned.delegateMap.clone();\n+            }\n+            return cloned;\n+        } catch (CloneNotSupportedException ex) {\n+            throw new InternalError();\n+        }\n+    }\n+\n     /**\n      * Compares this map with another.\n      * \n--- a/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Map;\n \n import junit.framework.Test;\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.6 $ $Date: 2004/02/18 01:20:37 $\n+ * @version $Revision: 1.7 $ $Date: 2004/03/31 23:18:56 $\n  * \n  * @author Stephen Colebourne\n  */\n public class TestFlat3Map extends AbstractTestIterableMap {\n \n+    private static final Integer ONE = new Integer(1);\n+    private static final Integer TWO = new Integer(2);\n+    private static final String TEN = \"10\";\n+    private static final String TWENTY = \"20\";\n+        \n     public TestFlat3Map(String testName) {\n         super(testName);\n     }\n         return new Flat3Map();\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testClone2() {\n+        Flat3Map map = new Flat3Map();\n+        assertEquals(0, map.size());\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        assertEquals(2, map.size());\n+        assertEquals(true, map.containsKey(ONE));\n+        assertEquals(true, map.containsKey(TWO));\n+        assertSame(TEN, map.get(ONE));\n+        assertSame(TWENTY, map.get(TWO));\n+\n+        // clone works (size = 2)        \n+        Flat3Map cloned = (Flat3Map) map.clone();\n+        assertEquals(2, cloned.size());\n+        assertEquals(true, cloned.containsKey(ONE));\n+        assertEquals(true, cloned.containsKey(TWO));\n+        assertSame(TEN, cloned.get(ONE));\n+        assertSame(TWENTY, cloned.get(TWO));\n+        \n+        // change original doesn't change clone\n+        map.put(TEN, ONE);\n+        map.put(TWENTY, TWO);\n+        assertEquals(4, map.size());\n+        assertEquals(2, cloned.size());\n+        assertEquals(true, cloned.containsKey(ONE));\n+        assertEquals(true, cloned.containsKey(TWO));\n+        assertSame(TEN, cloned.get(ONE));\n+        assertSame(TWENTY, cloned.get(TWO));\n+    }        \n+    public void testClone4() {\n+        Flat3Map map = new Flat3Map();\n+        assertEquals(0, map.size());\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(TEN, ONE);\n+        map.put(TWENTY, TWO);\n+        \n+        // clone works (size = 4)\n+        Flat3Map cloned = (Flat3Map) map.clone();\n+        assertEquals(4, map.size());\n+        assertEquals(4, cloned.size());\n+        assertEquals(true, cloned.containsKey(ONE));\n+        assertEquals(true, cloned.containsKey(TWO));\n+        assertEquals(true, cloned.containsKey(TEN));\n+        assertEquals(true, cloned.containsKey(TWENTY));\n+        assertSame(TEN, cloned.get(ONE));\n+        assertSame(TWENTY, cloned.get(TWO));\n+        assertSame(ONE, cloned.get(TEN));\n+        assertSame(TWO, cloned.get(TWENTY));\n+        \n+        // change original doesn't change clone\n+        map.clear();\n+        assertEquals(0, map.size());\n+        assertEquals(4, cloned.size());\n+        assertEquals(true, cloned.containsKey(ONE));\n+        assertEquals(true, cloned.containsKey(TWO));\n+        assertEquals(true, cloned.containsKey(TEN));\n+        assertEquals(true, cloned.containsKey(TWENTY));\n+        assertSame(TEN, cloned.get(ONE));\n+        assertSame(TWENTY, cloned.get(TWO));\n+        assertSame(ONE, cloned.get(TEN));\n+        assertSame(TWO, cloned.get(TWENTY));\n+    }\n+    \n+    public void testSerialisation0() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\n+        out.writeObject(map);\n+        byte[] bytes = bout.toByteArray();\n+        out.close();\n+        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n+        ObjectInputStream in = new ObjectInputStream(bin);\n+        Flat3Map ser = (Flat3Map) in.readObject();\n+        in.close();\n+        assertEquals(0, map.size());\n+        assertEquals(0, ser.size());\n+    }\n+    \n+    public void testSerialisation2() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        \n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\n+        out.writeObject(map);\n+        byte[] bytes = bout.toByteArray();\n+        out.close();\n+        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n+        ObjectInputStream in = new ObjectInputStream(bin);\n+        Flat3Map ser = (Flat3Map) in.readObject();\n+        in.close();\n+        assertEquals(2, map.size());\n+        assertEquals(2, ser.size());\n+        assertEquals(true, ser.containsKey(ONE));\n+        assertEquals(true, ser.containsKey(TWO));\n+        assertEquals(TEN, ser.get(ONE));\n+        assertEquals(TWENTY, ser.get(TWO));\n+    }\n+    \n+    public void testSerialisation4() throws Exception {\n+        Flat3Map map = new Flat3Map();\n+        map.put(ONE, TEN);\n+        map.put(TWO, TWENTY);\n+        map.put(TEN, ONE);\n+        map.put(TWENTY, TWO);\n+        \n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(bout);\n+        out.writeObject(map);\n+        byte[] bytes = bout.toByteArray();\n+        out.close();\n+        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n+        ObjectInputStream in = new ObjectInputStream(bin);\n+        Flat3Map ser = (Flat3Map) in.readObject();\n+        in.close();\n+        assertEquals(4, map.size());\n+        assertEquals(4, ser.size());\n+        assertEquals(true, ser.containsKey(ONE));\n+        assertEquals(true, ser.containsKey(TWO));\n+        assertEquals(true, ser.containsKey(TEN));\n+        assertEquals(true, ser.containsKey(TWENTY));\n+        assertEquals(TEN, ser.get(ONE));\n+        assertEquals(TWENTY, ser.get(TWO));\n+        assertEquals(ONE, ser.get(TEN));\n+        assertEquals(TWO, ser.get(TWENTY));\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public BulkTest bulkTestMapIterator() {\n         return new TestFlatMapIterator();\n             TestFlat3Map.this.verify();\n         }\n     }\n+    \n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/Flat3Map.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"D:/dev/collections/data/test/Flat3Map.fullCollection.version3.1.obj\");\n+//    }\n }", "timestamp": 1080775136, "metainfo": ""}