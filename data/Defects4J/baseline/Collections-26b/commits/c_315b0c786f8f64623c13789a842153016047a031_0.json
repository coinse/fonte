{"sha": "315b0c786f8f64623c13789a842153016047a031", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java\n     /**\n      * Gets the key from the pair.\n      *\n-     * @return the key \n+     * @return the key\n      */\n     public K getKey() {\n         return key;\n \n     /**\n      * Gets a debugging String view of the pair.\n-     * \n+     *\n      * @return a String view of the entry\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntry.java\n      * Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n-     * \n+     *\n      * @param obj  the object to compare to\n      * @return true if equal key and value\n      */\n      * Gets a hashCode compatible with the equals method.\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n-     * \n+     *\n      * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n-               (getValue() == null ? 0 : getValue().hashCode()); \n+               (getValue() == null ? 0 : getValue().hashCode());\n     }\n \n }\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java\n  * @version $Id$\n  */\n public abstract class AbstractMapEntryDecorator<K, V> implements Map.Entry<K, V>, KeyValue<K, V> {\n-    \n+\n     /** The <code>Map.Entry</code> to decorate */\n     private final Map.Entry<K, V> entry;\n \n \n     /**\n      * Gets the map being decorated.\n-     * \n+     *\n      * @return the decorated map\n      */\n     protected Map.Entry<K, V> getMapEntry() {\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     public K getKey() {\n         return entry.getKey();\n     }\n     public V setValue(final V object) {\n         return entry.setValue(object);\n     }\n-   \n+\n     @Override\n     public boolean equals(final Object object) {\n         if (object == this) {\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/DefaultKeyValue.java\n         return super.setKey(key);\n     }\n \n-    /** \n+    /**\n      * Sets the value.\n      *\n      * @return the old value of the value\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a new <code>Map.Entry</code> object with key and value from this pair.\n-     * \n+     *\n      * @return a MapEntry instance\n      */\n     public Map.Entry<K, V> toMapEntry() {\n      * <p>\n      * Returns true if the compared object is also a <code>DefaultKeyValue</code>,\n      * and its key and value are equal to this object's key and value.\n-     * \n+     *\n      * @param obj  the object to compare to\n      * @return true if equal key and value\n      */\n         }\n \n         final DefaultKeyValue<?, ?> other = (DefaultKeyValue<?, ?>) obj;\n-        return \n+        return\n             (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n             (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n     }\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()},\n      * however subclasses may override this.\n-     * \n+     *\n      * @return a suitable hash code\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n-/** \n+/**\n  * A <code>MultiKey</code> allows multiple map keys to be merged together.\n  * <p>\n  * The purpose of this class is to avoid the need to write code to handle\n- * maps of maps. An example might be the need to look up a file name by \n+ * maps of maps. An example might be the need to look up a file name by\n  * key and locale. The typical solution might be nested maps. This class\n  * can be used instead by creating an instance passing in the key and locale.\n  * <p>\n      * <p>\n      * The keys should be immutable\n      * If they are not then they must not be changed after adding to the MultiKey.\n-     * \n+     *\n      * @param key1  the first key\n      * @param key2  the second key\n      */\n      * <p>\n      * The keys should be immutable\n      * If they are not then they must not be changed after adding to the MultiKey.\n-     * \n+     *\n      * @param key1  the first key\n      * @param key2  the second key\n      * @param key3  the third key\n      * <p>\n      * The keys should be immutable\n      * If they are not then they must not be changed after adding to the MultiKey.\n-     * \n+     *\n      * @param key1  the first key\n      * @param key2  the second key\n      * @param key3  the third key\n      * <p>\n      * The keys should be immutable\n      * If they are not then they must not be changed after adding to the MultiKey.\n-     * \n+     *\n      * @param key1  the first key\n      * @param key2  the second key\n      * @param key3  the third key\n      * <p>\n      * The keys should be immutable\n      * If they are not then they must not be changed.\n-     * \n+     *\n      * @return the individual keys\n      */\n     public K[] getKeys() {\n      * <p>\n      * The key should be immutable.\n      * If it is not then it must not be changed.\n-     * \n+     *\n      * @param index  the index to retrieve\n      * @return the key at the index\n      * @throws IndexOutOfBoundsException if the index is invalid\n \n     /**\n      * Gets the size of the list of keys.\n-     * \n+     *\n      * @return the size of the list of keys\n      * @since 3.1\n      */\n      * <p>\n      * To be equal, the other object must be a <code>MultiKey</code> with the\n      * same number of keys which are also equal.\n-     * \n+     *\n      * @param other  the other object to compare to\n      * @return true if equal\n      */\n      * Gets the combined hash code that is computed from all the keys.\n      * <p>\n      * This value is computed once and then cached, so elements should not\n-     * change their hash codes once created (note that this is the same \n+     * change their hash codes once created (note that this is the same\n      * constraint that would be used if the individual keys elements were\n      * themselves {@link java.util.Map Map} keys.\n-     * \n+     *\n      * @return the hash code\n      */\n     @Override\n \n     /**\n      * Gets a debugging string version of the key.\n-     * \n+     *\n      * @return a debugging string\n      */\n     @Override\n         }\n         hashCode = total;\n     }\n-    \n+\n     /**\n      * Recalculate the hash code after deserialization. The hash code of some\n      * keys might have change (hash codes based on the system hash code are\n-     * only stable for the same process). \n+     * only stable for the same process).\n      * @return the instance with recalculated hash code\n      */\n     private Object readResolve() {\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/TiedMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/TiedMapEntry.java\n  */\n public class TiedMapEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Serializable {\n \n-    /** Serialization version */    \n+    /** Serialization version */\n     private static final long serialVersionUID = -8453869361373831205L;\n \n-    /** The map underlying the entry/iterator */    \n+    /** The map underlying the entry/iterator */\n     private final Map<K, V> map;\n \n     /** The key */\n     //-------------------------------------------------------------------------\n     /**\n      * Gets the key of this entry\n-     * \n+     *\n      * @return the key\n      */\n     public K getKey() {\n \n     /**\n      * Gets the value of this entry direct from the map.\n-     * \n+     *\n      * @return the value\n      */\n     public V getValue() {\n \n     /**\n      * Sets the value associated with the key direct onto the map.\n-     * \n+     *\n      * @param value  the new value\n      * @return the old value\n      * @throws IllegalArgumentException if the value is set to this map entry\n      * Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n-     * \n+     *\n      * @param obj  the object to compare to\n      * @return true if equal key and value\n      */\n      * Gets a hashCode compatible with the equals method.\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n-     * \n+     *\n      * @return a suitable hash code\n      */\n     @Override\n     public int hashCode() {\n         final Object value = getValue();\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n-               (value == null ? 0 : value.hashCode()); \n+               (value == null ? 0 : value.hashCode());\n     }\n \n     /**\n      * Gets a string version of the entry.\n-     * \n+     *\n      * @return entry as a string\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntry.java\n \n     /**\n      * Throws UnsupportedOperationException.\n-     * \n+     *\n      * @param value  the new value\n      * @return the previous value\n      * @throws UnsupportedOperationException always", "timestamp": 1367346264, "metainfo": ""}