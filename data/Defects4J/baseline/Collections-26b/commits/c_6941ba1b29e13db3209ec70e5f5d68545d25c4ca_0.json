{"sha": "6941ba1b29e13db3209ec70e5f5d68545d25c4ca", "log": "Add OrderedIterator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.15 2003/11/08 18:43:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.16 2003/11/08 19:26:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import java.io.Serializable;\n import java.lang.reflect.Array;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import org.apache.commons.collections.iterators.IteratorEnumeration;\n import org.apache.commons.collections.iterators.ListIteratorWrapper;\n import org.apache.commons.collections.iterators.LoopingIterator;\n+import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.ObjectArrayIterator;\n import org.apache.commons.collections.iterators.ObjectArrayListIterator;\n import org.apache.commons.collections.iterators.ResetableIterator;\n import org.apache.commons.collections.iterators.ResetableListIterator;\n import org.apache.commons.collections.iterators.ResetableMapIterator;\n+import org.apache.commons.collections.iterators.ResetableOrderedIterator;\n import org.apache.commons.collections.iterators.ResetableOrderedMapIterator;\n import org.apache.commons.collections.iterators.SingletonIterator;\n import org.apache.commons.collections.iterators.SingletonListIterator;\n import org.apache.commons.collections.iterators.TransformIterator;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n+import org.apache.commons.collections.iterators.UnmodifiableListIterator;\n+import org.apache.commons.collections.iterators.UnmodifiableMapIterator;\n \n /**\n  * Provides static utility methods and decorators for {@link Iterator} \n  * {@link org.apache.commons.collections.iterators} subpackage.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.15 $ $Date: 2003/11/08 18:43:12 $\n+ * @version $Revision: 1.16 $ $Date: 2003/11/08 19:26:28 $\n  * \n  * @author Stephen Colebourne\n  * @author Phil Steitz\n      */    \n     public static final ResetableListIterator EMPTY_LIST_ITERATOR = new EmptyListIterator();\n     /**\n+     * An ordered iterator over no elements\n+     */    \n+    public static final ResetableOrderedIterator EMPTY_ORDERED_ITERATOR = new EmptyOrderedIterator();\n+    /**\n      * A map iterator over no elements\n      */    \n     public static final ResetableMapIterator EMPTY_MAP_ITERATOR = new EmptyMapIterator();\n     /**\n-     * A map iterator over no elements\n+     * An ordered map iterator over no elements\n      */    \n     public static final ResetableOrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = new EmptyOrderedMapIterator();\n \n     }\n \n     /**\n+     * Gets an empty ordered iterator.\n+     * <p>\n+     * This iterator is a valid iterator object that will iterate \n+     * over nothing.\n+     *\n+     * @return  an ordered iterator over nothing\n+     */\n+    public static ResetableOrderedIterator emptyOrderedIterator() {\n+        return EMPTY_ORDERED_ITERATOR;\n+    }\n+\n+    /**\n      * Gets an empty map iterator.\n      * <p>\n      * This iterator is a valid map iterator object that will iterate \n      * over nothing.\n      *\n-     * @return  a list iterator over nothing\n+     * @return  a map iterator over nothing\n      */\n     public static ResetableMapIterator emptyMapIterator() {\n         return EMPTY_MAP_ITERATOR;\n      * This iterator is a valid map iterator object that will iterate \n      * over nothing.\n      *\n-     * @return  a list iterator over nothing\n+     * @return  a map iterator over nothing\n      */\n     public static ResetableOrderedMapIterator emptyOrderedMapIterator() {\n         return EMPTY_ORDERED_MAP_ITERATOR;\n      * @return an immutable version of the iterator\n      */\n     public static Iterator unmodifiableIterator(Iterator iterator) {\n-        if (iterator instanceof ResetableIterator) {\n-            return new ResetableUnmodifiableIterator((ResetableIterator) iterator);\n-        }\n-        return new UnmodifiableIterator(iterator);\n+        return UnmodifiableIterator.decorate(iterator);\n     }\n     \n     /**\n      * @return an immutable version of the iterator\n      */\n     public static ListIterator unmodifiableListIterator(ListIterator listIterator) {\n-        if (listIterator instanceof ResetableListIterator) {\n-            return new ResetableUnmodifiableListIterator((ResetableListIterator) listIterator);\n-        }\n-        return new UnmodifiableListIterator(listIterator);\n+        return UnmodifiableListIterator.decorate(listIterator);\n+    }\n+\n+    /**\n+     * Gets an immutable version of a {@link MapIterator}. The returned object\n+     * will always throw an {@link UnsupportedOperationException} for\n+     * the {@link Iterator#remove}, {@link MapIterator#setValue(Object)} methods.\n+     *\n+     * @param mapIterator  the iterator to make immutable\n+     * @return an immutable version of the iterator\n+     */\n+    public static MapIterator unmodifiableMapIterator(MapIterator mapIterator) {\n+        return UnmodifiableMapIterator.decorate(mapIterator);\n     }\n \n     /**\n \n     //-----------------------------------------------------------------------    \n     /**\n+     * EmptyOrderedIterator class\n+     */\n+    static class EmptyOrderedIterator extends EmptyIterator implements ResetableOrderedIterator {\n+        \n+        EmptyOrderedIterator() {\n+            super();\n+        }\n+        \n+        public boolean hasPrevious() {\n+            return false;\n+        }\n+        \n+        public Object previous() {\n+            throw new NoSuchElementException(\"Iterator contains no elements\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n      * EmptyMapIterator class\n      */\n     static class EmptyMapIterator extends EmptyIterator implements ResetableMapIterator {\n         }\n     }\n \n-    //-----------------------------------------------------------------------    \n-    /**\n-     * A wrapper for an {@link java.util.Iterator} which makes it immutable. All\n-     * calls are passed through to the delegate. The {@link #remove()} method\n-     * always throws an {@link java.lang.UnsupportedOperationException}.\n-     *\n-     * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n-     * @author Stephen Colebourne\n-     */\n-    static class UnmodifiableIterator implements Iterator, Serializable {\n-\n-        /**\n-         * All calls to this iterator are passed to the delegate.\n-         */\n-        protected Iterator delegate;\n-\n-        /**\n-         * Create an UnmodifiableIterator.\n-         *\n-         * @param delegate  the delegate to pass all calls to\n-         */\n-        public UnmodifiableIterator(Iterator delegate) {\n-            this.delegate = delegate;\n-        }\n-\n-        public boolean hasNext() {\n-            return delegate.hasNext();\n-        }\n-\n-        public Object next() {\n-            return delegate.next();\n-        }\n-\n-        public void remove() {\n-            throw new UnsupportedOperationException(\"This iterator is immutable\");\n-        }\n-\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * An unmodifiable resetable iterator.\n-     *\n-     * @author Stephen Colebourne\n-     */\n-    static class ResetableUnmodifiableIterator extends UnmodifiableIterator implements ResetableIterator {\n-        \n-        /**\n-         * Create a ResetableUnmodifiableIterator.\n-         *\n-         * @param delegate  the delegate to pass all calls to\n-         */\n-        public ResetableUnmodifiableIterator(ResetableIterator delegate) {\n-            super(delegate);\n-        }\n-\n-        /**\n-         * Reset the iterator\n-         */\n-        public void reset() {\n-            ((ResetableIterator) delegate).reset();\n-        }\n-\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n-     * A wrapper for an {@link java.util.ListIterator} which makes it immutable.\n-     * All calls are passed through to the delegate. The {@link #remove()},\n-     * {@link #add(Object)} and (@link #set(Object)} methods always throw an\n-     * {@link java.lang.UnsupportedOperationException}.\n-     *\n-     * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n-     */\n-    static class UnmodifiableListIterator\n-        implements ListIterator, Serializable {\n-\n-        /**\n-         * All calls to this iterator are passed to the delegate.\n-         */\n-        protected ListIterator delegate;\n-\n-        /**\n-         * Create an UnmodifiableListIterator.\n-         *\n-         * @param delegate The delegate to pass all calls to.\n-         */\n-        public UnmodifiableListIterator(ListIterator delegate) {\n-            this.delegate = delegate;\n-        }\n-\n-        public boolean hasNext() {\n-            return delegate.hasNext();\n-        }\n-\n-        public Object next() {\n-            return delegate.next();\n-        }\n-\n-        public boolean hasPrevious() {\n-            return delegate.hasPrevious();\n-        }\n-\n-        public Object previous() {\n-            return delegate.previous();\n-        }\n-\n-        public int nextIndex() {\n-            return delegate.nextIndex();\n-        }\n-\n-        public int previousIndex() {\n-            return delegate.previousIndex();\n-        }\n-\n-        public void remove() {\n-            throw new UnsupportedOperationException(\"This iterator is immutable\");\n-        }\n-\n-        public void set(Object o) {\n-            throw new UnsupportedOperationException(\"This iterator is immutable\");\n-        }\n-\n-        public void add(Object o) {\n-            throw new UnsupportedOperationException(\"This iterator is immutable\");\n-        }\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n-     * An unmodifiable resetable list iterator.\n-     *\n-     * @author Stephen Colebourne\n-     */\n-    static class ResetableUnmodifiableListIterator extends UnmodifiableListIterator implements ResetableListIterator {\n-            \n-        /**\n-         * Create a ResetableUnmodifiableListIterator.\n-         *\n-         * @param delegate  the delegate to pass all calls to\n-         */\n-        public ResetableUnmodifiableListIterator(ResetableListIterator delegate) {\n-            super(delegate);\n-        }\n-    \n-        /**\n-         * Reset the iterator\n-         */\n-        public void reset() {\n-            ((ResetableListIterator) delegate).reset();\n-        }\n-    \n-    }\n-        \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/OrderedIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/OrderedIterator.java,v 1.1 2003/11/08 19:26:28 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Defines an iterator that operates over a ordered collections.\n+ * <p>\n+ * This iterator allows both forward and reverse iteration through the collection.\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/08 19:26:28 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface OrderedIterator extends Iterator {\n+    \n+    /**\n+     * Checks to see if there is a previous entry that can be iterated to.\n+     *\n+     * @return <code>true</code> if the iterator has a previous element\n+     */\n+    boolean hasPrevious();\n+\n+    /**\n+     * Gets the previous element from the collection.\n+     *\n+     * @return the previous key in the iteration\n+     * @throws NoSuchElementException if the iteration is finished\n+     */\n+    Object previous();\n+\n+}\n--- a/src/java/org/apache/commons/collections/iterators/OrderedMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/OrderedMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/OrderedMapIterator.java,v 1.1 2003/11/08 18:43:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/OrderedMapIterator.java,v 1.2 2003/11/08 19:26:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * This iterator allows both forward and reverse iteration through the map.\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/08 18:43:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/08 19:26:28 $\n  *\n  * @author Stephen Colebourne\n  */\n-public interface OrderedMapIterator extends MapIterator {\n+public interface OrderedMapIterator extends MapIterator, OrderedIterator {\n     \n     /**\n      * Checks to see if there is a previous entry that can be iterated to.\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ResetableOrderedIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/ResetableOrderedIterator.java,v 1.1 2003/11/08 19:26:28 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+/** \n+ * Interface implemented by those ordered iterators that can be reset back \n+ * to an initial state.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/08 19:26:28 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public interface ResetableOrderedIterator extends OrderedIterator, ResetableIterator {\n+\n+    /**\n+     * Resets the iterator back to the position at which the iterator\n+     * was created.\n+     */\n+    public void reset();\n+\n+}\n--- a/src/java/org/apache/commons/collections/iterators/ResetableOrderedMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ResetableOrderedMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/ResetableOrderedMapIterator.java,v 1.1 2003/11/08 18:43:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/ResetableOrderedMapIterator.java,v 1.2 2003/11/08 19:26:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to an initial state.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/08 18:43:13 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/08 19:26:28 $\n  * \n  * @author Stephen Colebourne\n  */\n-public interface ResetableOrderedMapIterator extends OrderedMapIterator, ResetableMapIterator {\n+public interface ResetableOrderedMapIterator\n+        extends OrderedMapIterator, ResetableMapIterator, ResetableOrderedIterator {\n \n     /**\n      * Resets the iterator back to the position at which the iterator\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.9 2003/11/08 18:47:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.10 2003/11/08 19:26:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n \n import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.iterators.OrderedIterator;\n import org.apache.commons.collections.iterators.OrderedMapIterator;\n import org.apache.commons.collections.iterators.ResetableIterator;\n import org.apache.commons.collections.iterators.ResetableListIterator;\n import org.apache.commons.collections.iterators.ResetableMapIterator;\n+import org.apache.commons.collections.iterators.ResetableOrderedIterator;\n import org.apache.commons.collections.iterators.ResetableOrderedMapIterator;\n \n /**\n  * Tests for IteratorUtils.\n  * \n- * @version $Revision: 1.9 $ $Date: 2003/11/08 18:47:38 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/08 19:26:29 $\n  * \n  * @author Unknown\n  */\n     /**\n      * Test empty map iterator\n      */\n+    public void testEmptyOrderedIterator() {\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResetableIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResetableOrderedIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());\n+        assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());\n+        IteratorUtils.EMPTY_ORDERED_ITERATOR.reset();\n+        assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n+        assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.emptyOrderedIterator());\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_ITERATOR.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_ITERATOR.previous();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_ITERATOR.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test empty map iterator\n+     */\n     public void testEmptyOrderedMapIterator() {\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableIterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableMapIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableOrderedIterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableOrderedMapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());\n     }\n \n     /**\n-     * Test resetability\n-     */\n-    public void testResetableUnmodifiableIterator() {\n-        Integer four = new Integer(4);\n-        ResetableIterator it = (ResetableIterator) \n-            IteratorUtils.unmodifiableIterator(IteratorUtils.singletonIterator(four));\n-        \n-        assertEquals(true, it.hasNext());\n-        assertSame(four, it.next());\n-        assertEquals(false, it.hasNext());\n-        it.reset();\n-        assertEquals(true, it.hasNext());\n-    }\n-    \n-    /**\n      * Test next(), hasNext(), previous() and hasPrevious() for an immutable\n      * ListIterator.\n      */\n         assertTrue(listIterator.hasNext());\n     }\n \n-    /**\n-     * Test resetability\n-     */\n-    public void testResetableUnmodifiableListIterator() {\n-        Integer four = new Integer(4);\n-        ResetableListIterator it = (ResetableListIterator) \n-            IteratorUtils.unmodifiableListIterator(IteratorUtils.singletonListIterator(four));\n-        \n-        assertEquals(true, it.hasNext());\n-        assertSame(four, it.next());\n-        assertEquals(false, it.hasNext());\n-        it.reset();\n-        assertEquals(true, it.hasNext());\n-    }\n-    \n     /**\n      * Test remove() for an immutable Iterator.\n      */", "timestamp": 1068319589, "metainfo": ""}