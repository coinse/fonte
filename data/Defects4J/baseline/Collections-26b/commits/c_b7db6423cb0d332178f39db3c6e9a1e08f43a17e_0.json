{"sha": "b7db6423cb0d332178f39db3c6e9a1e08f43a17e", "log": "Javadoc fixes bug 22972, from Janek Bogucki   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.32 2003/08/31 17:52:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.33 2003/09/09 21:05:51 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.32 $ $Date: 2003/08/31 17:52:13 $\n+ * @version $Revision: 1.33 $ $Date: 2003/09/09 21:05:51 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n      * \n      * @param map  the map to convert to a Properties object, may not be null\n      * @return the properties object\n-     * @throws NullPointerException if the map is null\n      */\n     public static Properties toProperties(Map map) {\n         Properties answer = new Properties();\n      * Map. It is important not to use the original map after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n      *\n-     * @param map  the map to predicate, must not be null\n+     * @param map  the map to transform, must not be null\n      * @param keyTransformer  the transformer for the map keys, null means no transformation\n      * @param valueTransformer  the transformer for the map values, null means no transformation\n      * @return a transformed map backed by the given map\n      * Map. It is important not to use the original map after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n      *\n-     * @param map  the map to predicate, must not be null\n+     * @param map  the map to transform, must not be null\n      * @param keyTransformer  the transformer for the map keys, null means no transformation\n      * @param valueTransformer  the transformer for the map values, null means no transformation\n      * @return a transformed map backed by the given map\n-     * @throws IllegalArgumentException  if the Map is null\n+     * @throws IllegalArgumentException  if the SortedMap is null\n      */\n     public static SortedMap transformedSortedMap(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n         return TransformedSortedMap.decorate(map, keyTransformer, valueTransformer);\n      *         return new File(mapKey);\n      *     }\n      * }\n-     * Map lazyMap = MapUtils.lazyMap(new HashMap(), factory);\n-     * Object obj = lazyMap.get(\"C:/dev\");\n+     * SortedMap lazy = MapUtils.lazySortedMap(new TreeMap(), factory);\n+     * Object obj = lazy.get(\"C:/dev\");\n      * </pre>\n      *\n      * After the above code is executed, <code>obj</code> will contain", "timestamp": 1063141551, "metainfo": ""}