{"sha": "baf631663d00f588693e2f4cf5ae2b630c9d7bce", "log": "An IteratorChain is a sequence of Iterators called until all Iterators are exhausted   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/IteratorChain.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/IteratorChain.java,v 1.1 2002/04/08 23:38:48 morgand Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/04/08 23:38:48 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * <p>An IteratorChain is an Iterator that wraps one or\n+ * more Iterators in sequence.  When any method from the\n+ * Iterator interface is called, the IteratorChain will\n+ * call the same method on the first Iterator in the chain\n+ * until it is exhausted until the first Iterator is exhausted.\n+ * At that point, the IteratorChain will move to the next\n+ * Iterator in the IteratorChain.  The IteratorChain will\n+ * continue in this pattern until all Iterators in the\n+ * IteratorChain are exhausted.</p>\n+ * \n+ * <p>Under many circumstances, linking Iterators together\n+ * in this manner is more efficient (and convenient)\n+ * than reading out the contents of each Iterator into a\n+ * List and creating a new Iterator.</p>\n+ * \n+ * <p>IteratorChain is Serializable, but there is no\n+ * guarantee that the underlying Iterators are\n+ * Serializable.</p>\n+ * \n+ * <p>Calling a method that adds new Iterator<i>after\n+ * a method in the Iterator interface\n+ * has been called</i> will result in an\n+ * UnsupportedOperationException.  However, <i>take care</i>\n+ * to not alter the underlying List of Iterators.</p>\n+ * \n+ * @author Morgan Delagrange\n+ */\n+public class IteratorChain implements Iterator {\n+\n+    protected List iteratorChain = null;\n+    protected int currentIteratorIndex = 0;\n+    protected Iterator currentIterator = null;\n+    // the \"last used\" Iterator is the Iterator upon which\n+    // next() or hasNext() was most recently called\n+    // used for the remove() operation only\n+    protected Iterator lastUsedIterator = null;\n+\n+    // ComparatorChain is \"locked\" after the first time\n+    // compare(Object,Object) is called\n+    protected boolean isLocked = false;\n+\n+    /**\n+     * Construct an IteratorChain with no Iterators.\n+     * You must add at least Iterator before calling\n+     * any method from the Iterator interface, or an \n+     * UnsupportedOperationException is thrown\n+     */\n+    public IteratorChain() {\n+        this(new ArrayList());\n+    }\n+\n+    /**\n+     * Construct an IteratorChain with a single Iterator.\n+     * \n+     * @param iterator first Iterator in the IteratorChain\n+     */\n+    public IteratorChain(Iterator iterator) {\n+        iteratorChain = new ArrayList();\n+        iteratorChain.add(iterator);\n+    }\n+\n+    /**\n+     * Construct an IteratorChain from the Iterators in the\n+     * List.\n+     * \n+     * @param list   List of Iterators\n+     */\n+    public IteratorChain(List list) {\n+        iteratorChain = list;\n+    }\n+\n+    /**\n+     * Add an Iterator to the end of the chain \n+     * \n+     * @param iterator Iterator to add\n+     */\n+    public void addIterator(Iterator iterator) {\n+        checkLocked();\n+\n+        iteratorChain.add(iterator);\n+    }\n+\n+    /**\n+     * Replace the Iterator at the given index     \n+     * \n+     * @param index      index of the Iterator to replace\n+     * @param iterator   Iterator to place at the given index\n+     * @exception IndexOutOfBoundsException\n+     *                   if index < 0 or index > size()\n+     */\n+    public void setIterator(int index, Iterator iterator) \n+    throws IndexOutOfBoundsException {\n+        checkLocked();\n+\n+        iteratorChain.set(index,iterator);\n+    }\n+\n+    /**\n+     * Number of Iterators in the current IteratorChain.\n+     * \n+     * @return Iterator count\n+     */\n+    public int size() {\n+        return iteratorChain.size();\n+    }\n+\n+    /**\n+     * Determine if modifications can still be made to the\n+     * IteratorChain.  IteratorChains cannot be modified\n+     * once they have executed a method from the Iterator\n+     * interface.\n+     * \n+     * @return true = IteratorChain cannot be modified; false = \n+     *         IteratorChain can still be modified.\n+     */\n+    public boolean isLocked() {\n+        return isLocked;\n+    }\n+\n+    // throw an exception if the IteratorChain is locked\n+    private void checkLocked() {\n+        if (isLocked == true) {\n+            throw new UnsupportedOperationException(\"IteratorChain cannot be changed after the first use of a method from the Iterator interface\");\n+        }\n+    }\n+\n+    private void checkChainIntegrity() {\n+        if (iteratorChain.size() == 0) {\n+            throw new UnsupportedOperationException(\"IteratorChains must contain at least one Iterator\");\n+        }\n+    }\n+\n+    // you MUST call this method whenever you call a method in the Iterator interface, because\n+    // this method also assigns the initial value of the currentIterator variable\n+    private void lockChain() {\n+        if (isLocked == false) {\n+            checkChainIntegrity();\n+            isLocked = true;\n+        }\n+    }\n+\n+    // call this before any Iterator method to make sure that the current Iterator\n+    // is not exhausted\n+    protected void updateCurrentIterator() {\n+        if (currentIterator == null) {\n+            currentIterator = (Iterator) iteratorChain.get(0);\n+            // set last used iterator here, in case the user calls remove\n+            // before calling hasNext() or next() (although they shouldn't)\n+            lastUsedIterator = currentIterator;\n+            return;\n+        }\n+\n+        if (currentIteratorIndex == (iteratorChain.size() - 1)) {\n+            return;\n+        }\n+\n+        while (currentIterator.hasNext() == false) {\n+            ++currentIteratorIndex;\n+            currentIterator = (Iterator) iteratorChain.get(currentIteratorIndex);\n+\n+            if (currentIteratorIndex == (iteratorChain.size() - 1)) {\n+                return;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Return true if any Iterator in the IteratorChain has a remaining\n+     * element.\n+     * \n+     * @return true if elements remain\n+     * @exception UnsupportedOperationException\n+     *                   if the IteratorChain does not contain at least one\n+     *                   Iterator\n+     */\n+    public boolean hasNext() throws UnsupportedOperationException {\n+        lockChain();\n+        updateCurrentIterator();\n+        lastUsedIterator = currentIterator;\n+\n+        return currentIterator.hasNext();\n+    }\n+\n+    /**\n+     * Returns the next Object of the current Iterator\n+     * \n+     * @return Object from the current Iterator\n+     * @exception NoSuchElementException\n+     *                   if all the Iterators are exhausted\n+     * @exception UnsupportedOperationException\n+     *                   if the IteratorChain does not contain at least one\n+     *                   Iterator\n+     */\n+    public Object next() throws NoSuchElementException, UnsupportedOperationException {\n+        lockChain();\n+        updateCurrentIterator();\n+        lastUsedIterator = currentIterator;\n+\n+        return currentIterator.next();\n+    }\n+\n+    /**\n+     * Removes from the underlying collection the last element \n+     * returned by the Iterator.  As with next() and hasNext(),\n+     * this method calls remove() on the underlying Iterator.\n+     * Therefore, this method may throw an \n+     * UnsupportedOperationException if the underlying\n+     * Iterator does not support this method. \n+     * \n+     * @exception UnsupportedOperationException\n+     *                   if the remove operator is not supported by the underlying\n+     *                   Iterator or if there are no Iterators in the IteratorChain\n+     * @exception IllegalStateException\n+     *                   if the next method has not yet been called, or the\n+     *                   remove method has already been called after the last\n+     *                   call to the next method.\n+     */\n+    public void remove() throws UnsupportedOperationException, IllegalStateException  {\n+        lockChain();\n+        updateCurrentIterator();\n+\n+        lastUsedIterator.remove();\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestIteratorChain.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestIteratorChain.java,v 1.1 2002/04/08 23:39:01 morgand Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/04/08 23:39:01 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ * The code of this test was supplied by Mauricio S. Moura\n+ * \n+ * @author James Strachan\n+ * @author Mauricio S. Moura\n+ * @author Morgan Delagrange\n+ * @version $Id: TestIteratorChain.java,v 1.1 2002/04/08 23:39:01 morgand Exp $\n+ */\n+public class TestIteratorChain extends TestIterator {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List list1 = null;\n+    protected List list2 = null;\n+    protected List list3 = null;\n+\n+    public static Test suite() {\n+        return new TestSuite(TestIteratorChain.class);\n+    }\n+\n+    public TestIteratorChain(String testName) {\n+        super(testName);\n+    }\n+\n+    public void setUp() {\n+        list1 = new ArrayList();\n+        list1.add(\"One\");\n+        list1.add(\"Two\");\n+        list1.add(\"Three\");\n+        list2 = new ArrayList();\n+        list2.add(\"Four\");\n+        list3 = new ArrayList();\n+        list3.add(\"Five\");\n+        list3.add(\"Six\");        \n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        ArrayList list = new ArrayList();\n+        return new IteratorChain(list.iterator());\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        IteratorChain chain = new IteratorChain();\n+\n+        Iterator i = list1.iterator();\n+\n+        chain.addIterator(list1.iterator());\n+        chain.addIterator(list2.iterator());\n+        chain.addIterator(list3.iterator());\n+        return chain;\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+\n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+        try {\n+            Object testValue = iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\", \n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testRemove() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+\n+        try {\n+            iter.remove();\n+            fail(\"Calling remove before the first call to next() should throw an exception\");\n+        } catch (IllegalStateException e) {\n+\n+        }\n+\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+\n+            if (! iterValue.equals(\"Four\")) {\n+                iter.remove();\n+            }\n+        }\n+\n+        assertTrue(\"List is empty\",list1.size() == 0);\n+        assertTrue(\"List is empty\",list2.size() == 1);\n+        assertTrue(\"List is empty\",list3.size() == 0);\n+    }\n+\n+}\n+", "timestamp": 1018309141, "metainfo": ""}