{"sha": "2b9145c38e2022ca4f2c7409e585dbebae5d0a69", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471192 | scolebourne | 2006-11-04 06:04:46 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getList() - use decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/java/org/apache/commons/collections/list/LazyList.java\n  * @author Arron Bates\n  * @author Paul Jack\n  */\n-public class LazyList extends AbstractSerializableListDecorator {\n+public class LazyList<E> extends AbstractSerializableListDecorator<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -1708388017160694542L;\n \n     /** The factory to use to lazily instantiate the objects */\n-    protected final Factory factory;\n+    protected final Factory<? extends E> factory;\n \n     /**\n      * Factory method to create a lazily instantiating list.\n      * @param factory  the factory to use for creation, must not be null\n      * @throws IllegalArgumentException if list or factory is null\n      */\n-    public static List decorate(List list, Factory factory) {\n-        return new LazyList(list, factory);\n+    public static <E> List<E> decorate(List<E> list, Factory<? extends E> factory) {\n+        return new LazyList<E>(list, factory);\n     }\n     \n     //-----------------------------------------------------------------------\n      * @param factory  the factory to use for creation, must not be null\n      * @throws IllegalArgumentException if list or factory is null\n      */\n-    protected LazyList(List list, Factory factory) {\n+    protected LazyList(List<E> list, Factory<? extends E> factory) {\n         super(list);\n         if (factory == null) {\n             throw new IllegalArgumentException(\"Factory must not be null\");\n      * \n      * @param index  the index to retrieve\n      */\n-    public Object get(int index) {\n-        int size = getList().size();\n+    public E get(int index) {\n+        int size = decorated().size();\n         if (index < size) {\n             // within bounds, get the object\n-            Object object = getList().get(index);\n+            E object = decorated().get(index);\n             if (object == null) {\n                 // item is a place holder, create new one, set and return\n                 object = factory.create();\n-                getList().set(index, object);\n-                return object;\n-            } else {\n-                // good and ready to go\n+                decorated().set(index, object);\n                 return object;\n             }\n-        } else {\n-            // we have to grow the list\n-            for (int i = size; i < index; i++) {\n-                getList().add(null);\n-            }\n-            // create our last object, set and return\n-            Object object = factory.create();\n-            getList().add(object);\n+            // good and ready to go\n             return object;\n         }\n+        // we have to grow the list\n+        for (int i = size; i < index; i++) {\n+            decorated().add(null);\n+        }\n+        // create our last object, set and return\n+        E object = factory.create();\n+        decorated().add(object);\n+        return object;\n     }\n \n-\n-    public List subList(int fromIndex, int toIndex) {\n-        List sub = getList().subList(fromIndex, toIndex);\n-        return new LazyList(sub, factory);\n+    public List<E> subList(int fromIndex, int toIndex) {\n+        List<E> sub = decorated().subList(fromIndex, toIndex);\n+        return new LazyList<E>(sub, factory);\n     }\n \n }", "timestamp": 1252994141, "metainfo": ""}