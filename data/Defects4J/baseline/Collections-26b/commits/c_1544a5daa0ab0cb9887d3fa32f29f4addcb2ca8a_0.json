{"sha": "1544a5daa0ab0cb9887d3fa32f29f4addcb2ca8a", "log": "Ensure that remove works correctly on views   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.2 2003/10/09 20:21:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.3 2003/10/10 21:09:49 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.2 2003/10/09 20:21:32 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.3 2003/10/10 21:09:49 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     protected static class KeySetIterator extends AbstractIteratorDecorator {\n         \n         private final AbstractDualBidiMap map;\n-        private Object last;\n+        private Object last = null;\n+        private boolean canRemove = false;\n         \n         protected KeySetIterator(Iterator iterator, AbstractDualBidiMap map) {\n             super(iterator);\n         \n         public Object next() {\n             last = super.next();\n+            canRemove = true;\n             return last;\n         }\n         \n         public void remove() {\n+            if (canRemove == false) {\n+                throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+            }\n             Object value = map.maps[0].get(last);\n             super.remove();\n             map.maps[1].remove(value);\n             last = null;\n+            canRemove = false;\n         }\n     }\n \n     protected static class EntrySetIterator extends AbstractIteratorDecorator {\n         \n         private final AbstractDualBidiMap map;\n-        private Map.Entry last;\n+        private Map.Entry last = null;\n+        private boolean canRemove = false;\n         \n         protected EntrySetIterator(Iterator iterator, AbstractDualBidiMap map) {\n             super(iterator);\n         \n         public Object next() {\n             last = new MapEntry((Map.Entry) super.next(), map);\n+            canRemove = true;\n             return last;\n         }\n         \n         public void remove() {\n+            if (canRemove == false) {\n+                throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+            }\n+            // store value as remove may change the entry in the decorator (eg.TreeMap)\n+            Object value = last.getValue();\n             super.remove();\n-            map.maps[1].remove(last.getValue());\n+            map.maps[1].remove(value);\n             last = null;\n+            canRemove = false;\n         }\n     }\n ", "timestamp": 1065820189, "metainfo": ""}