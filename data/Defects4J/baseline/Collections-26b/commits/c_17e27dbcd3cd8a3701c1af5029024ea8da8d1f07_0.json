{"sha": "17e27dbcd3cd8a3701c1af5029024ea8da8d1f07", "log": "MultiMap,MultiHashMap, add extra documentation to clarify the interface   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MultiHashMap.java\n+++ b/src/java/org/apache/commons/collections/MultiHashMap.java\n  * {@link org.apache.commons.collections.MultiMap MultiMap} interface.\n  * <p>\n  * A <code>MultiMap</code> is a Map with slightly different semantics.\n- * Putting a value into the map will add the value to a Collection at that\n- * key. Getting a value will always return a Collection, holding all the\n- * values put to that key. This implementation uses an ArrayList as the \n- * collection.\n+ * Putting a value into the map will add the value to a Collection at that key.\n+ * Getting a value will return a Collection, holding all the values put to that key.\n+ * <p>\n+ * This implementation uses an <code>ArrayList</code> as the collection.\n+ * The internal storage list is made available without cloning via the\n+ * <code>get(Object)</code> and <code>entrySet()</code> methods.\n+ * The implementation returns <code>null</code> when there are no values mapped to a key.\n  * <p>\n  * For example:\n  * <pre>\n  * mhm.put(key, \"A\");\n  * mhm.put(key, \"B\");\n  * mhm.put(key, \"C\");\n- * Collection coll = mhm.get(key);</pre>\n+ * List list = (List) mhm.get(key);</pre>\n  * <p>\n- * <code>coll</code> will be a list containing \"A\", \"B\", \"C\".\n+ * <code>list</code> will be a list containing \"A\", \"B\", \"C\".\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.15 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.16 $ $Date: 2004/03/14 15:33:57 $\n  * \n  * @author Christopher Berry\n  * @author James Strachan\n  */\n public class MultiHashMap extends HashMap implements MultiMap {\n     \n-    //backed values collection\n+    // backed values collection\n     private transient Collection values = null;\n     \n     // compatibility with commons-collection releases 2.0/2.1\n             }\n         }\n     }\n-    \n-    /**\n-     * Put a key and value into the map.\n-     * <p>\n-     * The value is added to a collection mapped to the key instead of \n-     * replacing the previous value.\n-     * \n-     * @param key  the key to set\n-     * @param value  the value to set the key to\n-     * @return the value added if the add is successful, <code>null</code> otherwise\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds the value to the collection associated with the specified key.\n+     * <p>\n+     * Unlike a normal <code>Map</code> the previous value is not replaced.\n+     * Instead the new value is added to the collection stored against the key.\n+     *\n+     * @param key  the key to store against\n+     * @param value  the value to add to the collection at the key\n+     * @return the value added if the map changed and null if the map did not change\n      */    \n     public Object put(Object key, Object value) {\n         // NOTE:: put is called during deserialization in JDK < 1.4 !!!!!!\n \n         return (results ? value : null);\n     }\n-    \n-    /**\n-     * Does the map contain a specific value.\n-     * <p>\n-     * This searches the collection mapped to each key, and thus could be slow.\n+\n+    /**\n+     * Checks whether the map contains the value specified.\n+     * <p>\n+     * This checks all collections against all keys for the value, and thus could be slow.\n      * \n      * @param value  the value to search for\n-     * @return true if the list contains the value\n+     * @return true if the map contains the value\n      */\n     public boolean containsValue(Object value) {\n         Set pairs = super.entrySet();\n      * Removes a specific value from map.\n      * <p>\n      * The item is removed from the collection mapped to the specified key.\n+     * Other values attached to that key are unaffected.\n+     * <p>\n+     * If the last value for a key is removed, <code>null</code> will be returned\n+     * from a subsequant <code>get(key)</code>.\n      * \n      * @param key  the key to remove from\n      * @param item  the value to remove\n-     * @return the value removed (which was passed in)\n+     * @return the value removed (which was passed in), null if nothing removed\n      */\n     public Object remove(Object key, Object item) {\n         Collection valuesForKey = (Collection) super.get(key);\n         super.clear();\n     }\n \n-    /** \n-     * Gets a view over all the values in the map.\n-     * <p>\n-     * The values view includes all the entries in the collections at each map key.\n-     * \n-     * @return the collection view of all the values in the map\n+    /**\n+     * Gets a collection containing all the values in the map.\n+     * <p>\n+     * This returns a collection containing the combination of values from all keys.\n+     *\n+     * @return a collection view of the values contained in this map\n      */\n     public Collection values() {\n         Collection vs = values;\n         return (vs != null ? vs : (values = new Values()));\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Inner class to view the elements.\n      */\n \n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Clone the map.\n      * <p>\n--- a/src/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/java/org/apache/commons/collections/MultiMap.java\n  */\n package org.apache.commons.collections;\n \n+import java.util.Collection;\n import java.util.Map;\n \n /** \n  * Defines a map that holds a collection of values against each key.\n  * <p>\n  * A <code>MultiMap</code> is a Map with slightly different semantics.\n- * Putting a value into the map will add the value to a Collection at that\n- * key. Getting a value will always return a Collection, holding all the\n- * values put to that key. This implementation uses an ArrayList as the \n- * collection.\n+ * Putting a value into the map will add the value to a Collection at that key.\n+ * Getting a value will return a Collection, holding all the values put to that key.\n  * <p>\n  * For example:\n  * <pre>\n  * mhm.put(key, \"C\");\n  * Collection coll = (Collection) mhm.get(key);</pre>\n  * <p>\n- * <code>coll</code> will be a list containing \"A\", \"B\", \"C\".\n+ * <code>coll</code> will be a collection containing \"A\", \"B\", \"C\".\n+ * <p>\n+ * NOTE: Additional methods were added to this interface in Commons Collections 3.1.\n+ * These were added solely for documentation purposes and do not change the interface\n+ * as they were defined in the superinterface <code>Map</code> anyway.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.11 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.12 $ $Date: 2004/03/14 15:33:57 $\n  * \n  * @author Christopher Berry\n  * @author James Strachan\n  * @author Stephen Colebourne\n  */\n public interface MultiMap extends Map {\n-    \n+\n     /**\n      * Removes a specific value from map.\n      * <p>\n      * The item is removed from the collection mapped to the specified key.\n+     * Other values attached to that key are unaffected.\n+     * <p>\n+     * If the last value for a key is removed, implementations typically\n+     * return <code>null</code> from a subsequant <code>get(Object)</code>, however\n+     * they may choose to return an empty collection.\n      * \n      * @param key  the key to remove from\n      * @param item  the item to remove\n-     * @return the value removed (which was passed in)\n+     * @return the value removed (which was passed in), null if nothing removed\n+     * @throws UnsupportedOperationException if the map is unmodifiable\n+     * @throws ClassCastException if the key or value is of an invalid type\n+     * @throws NullPointerException if the key or value is null and null is invalid\n      */\n     public Object remove(Object key, Object item);\n-   \n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the number of keys in this map.\n+     * <p>\n+     * Implementations typically return only the count of keys in the map\n+     * This cannot be mandated due to backwards compatability of this interface.\n+     *\n+     * @return the number of key-collection mappings in this map\n+     */\n+    int size();\n+\n+    /**\n+     * Gets the collection of values associated with the specified key.\n+     * <p>\n+     * The returned value will implement <code>Collection</code>. Implementations\n+     * are free to declare that they return <code>Collection</code> subclasses\n+     * such as <code>List</code> or <code>Set</code>.\n+     * <p>\n+     * Implementations typically return <code>null</code> if no values have\n+     * been mapped to the key, however the implementation may choose to\n+     * return an empty collection.\n+     * <p>\n+     * Implementations may choose to return a clone of the internal collection.\n+     *\n+     * @param key  the key to retrieve\n+     * @return the <code>Collection</code> of values, implementations should\n+     *  return <code>null</code> for no mapping, but may return an empty collection\n+     * @throws ClassCastException if the key is of an invalid type\n+     * @throws NullPointerException if the key is null and null keys are invalid\n+     */\n+    Object get(Object key);\n+\n+    /**\n+     * Checks whether the map contains the value specified.\n+     * <p>\n+     * Implementations typically check all collections against all keys for the value.\n+     * This cannot be mandated due to backwards compatability of this interface.\n+     *\n+     * @param value  the value to search for\n+     * @return true if the map contains the value\n+     * @throws ClassCastException if the value is of an invalid type\n+     * @throws NullPointerException if the value is null and null value are invalid\n+     */\n+    boolean containsValue(Object value);\n+\n+    /**\n+     * Adds the value to the collection associated with the specified key.\n+     * <p>\n+     * Unlike a normal <code>Map</code> the previous value is not replaced.\n+     * Instead the new value is added to the collection stored against the key.\n+     * The collection may be a <code>List</code>, <code>Set</code> or other\n+     * collection dependent on implementation.\n+     *\n+     * @param key  the key to store against\n+     * @param value  the value to add to the collection at the key\n+     * @return typically the value added if the map changed and null if the map did not change\n+     * @throws UnsupportedOperationException if the map is unmodifiable\n+     * @throws ClassCastException if the key or value is of an invalid type\n+     * @throws NullPointerException if the key or value is null and null is invalid\n+     * @throws IllegalArgumentException if the key or value is invalid\n+     */\n+    Object put(Object key, Object value);\n+\n+    /**\n+     * Removes all values associated with the specified key.\n+     * <p>\n+     * Implementations typically return <code>null</code> from a subsequant\n+     * <code>get(Object)</code>, however they may choose to return an empty collection.\n+     *\n+     * @param key  the key to remove values from\n+     * @return the <code>Collection</code> of values removed, implementations should\n+     *  return <code>null</code> for no mapping found, but may return an empty collection\n+     * @throws UnsupportedOperationException if the map is unmodifiable\n+     * @throws ClassCastException if the key is of an invalid type\n+     * @throws NullPointerException if the key is null and null keys are invalid\n+     */\n+    Object remove(Object key);\n+\n+    /**\n+     * Gets a collection containing all the values in the map.\n+     * <p>\n+     * Inplementations typically return a collection containing the combination\n+     * of values from all keys.\n+     * This cannot be mandated due to backwards compatability of this interface.\n+     *\n+     * @return a collection view of the values contained in this map\n+     */\n+    Collection values();\n+\n }", "timestamp": 1079278437, "metainfo": ""}