{"sha": "0f57fa8e8c9a2f3803987886c21d0624dbb6a09e", "log": "fix test so that it doesn't assume the order in which elements are returned from a HashMap.iterator   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.26 2003/10/09 10:39:16 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.27 2003/10/09 10:48:19 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.26 $ $Date: 2003/10/09 10:39:16 $\n+ * @version $Revision: 1.27 $ $Date: 2003/10/09 10:48:19 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n     \n     public void testGet() {     \n         // Unordered map, entries exist\n-        Map map = new HashMap();\n-        map.put(\"zeroKey\", \"zero\");\n-        map.put(\"oneKey\", \"one\");\n-\n-        Object test = CollectionUtils.get(map, 0);\n-        assertEquals(\"zeroKey\",((Map.Entry) test).getKey());\n-        assertEquals(\"zero\",((Map.Entry) test).getValue());\n-        test = CollectionUtils.get(map, 1);\n-        assertEquals(\"oneKey\",((Map.Entry) test).getKey());\n-        assertEquals(\"one\",((Map.Entry) test).getValue());\n-        \n-        // Map index out of range\n-        try {\n-            test = CollectionUtils.get(map,  2);\n-            fail(\"Expecting IndexOutOfBoundsException.\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-        try {\n-            test = CollectionUtils.get(map,  -2);\n-            fail(\"Expecting IndexOutOfBoundsException.\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n+        {\n+            Map expected = new HashMap();\n+            expected.put(\"zeroKey\", \"zero\");\n+            expected.put(\"oneKey\", \"one\");\n+        \n+            Map found = new HashMap();\n+            Map.Entry entry = (Map.Entry)(CollectionUtils.get(expected, 0));\n+            found.put(entry.getKey(),entry.getValue());\n+            entry = (Map.Entry)(CollectionUtils.get(expected, 1));\n+            found.put(entry.getKey(),entry.getValue());\n+            assertEquals(expected,found);\n+        \n+            // Map index out of range\n+            try {\n+                CollectionUtils.get(expected,  2);\n+                fail(\"Expecting IndexOutOfBoundsException.\");\n+            } catch (IndexOutOfBoundsException e) {\n+                // expected\n+            }\n+            try {\n+                CollectionUtils.get(expected,  -2);\n+                fail(\"Expecting IndexOutOfBoundsException.\");\n+            } catch (IndexOutOfBoundsException e) {\n+                // expected\n+            }\n+        }\n+        Object test;\n         // Sorted map, entries exist, should respect order\n         SortedMap map2 = new TreeMap();\n         map2.put(\"zeroKey\", \"zero\");", "timestamp": 1065696499, "metainfo": ""}