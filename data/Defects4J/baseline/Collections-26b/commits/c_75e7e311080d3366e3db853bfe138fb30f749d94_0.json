{"sha": "75e7e311080d3366e3db853bfe138fb30f749d94", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bidimap/AbstractBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/AbstractBidiMapDecorator.java\n import org.apache.commons.collections4.MapIterator;\n import org.apache.commons.collections4.map.AbstractMapDecorator;\n \n-/** \n+/**\n  * Provides a base decorator that enables additional functionality to be added\n  * to a BidiMap via decoration.\n  * <p>\n \n     /**\n      * Gets the map being decorated.\n-     * \n+     *\n      * @return the decorated map\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/bidimap/AbstractDualBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/AbstractDualBidiMap.java\n \n     // Map delegation\n     //-----------------------------------------------------------------------\n-    \n+\n     public V get(final Object key) {\n         return normalMap.get(key);\n     }\n \n     // BidiMap changes\n     //-----------------------------------------------------------------------\n-    \n+\n     public V put(final K key, final V value) {\n         if (normalMap.containsKey(key)) {\n             reverseMap.remove(normalMap.get(key));\n \n         /**\n          * {@inheritDoc}\n-         * <p> \n+         * <p>\n          * This implementation iterates over the elements of this bidi map, checking each element in\n          * turn to see if it's contained in <code>coll</code>. If it's not contained, it's removed\n          * from this bidi map. As a consequence, it is advised to use a collection type for\n--- a/src/main/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapDecorator.java\n import org.apache.commons.collections4.OrderedBidiMap;\n import org.apache.commons.collections4.OrderedMapIterator;\n \n-/** \n+/**\n  * Provides a base decorator that enables additional functionality to be added\n  * to an OrderedBidiMap via decoration.\n  * <p>\n \n     /**\n      * Gets the map being decorated.\n-     * \n+     *\n      * @return the decorated map\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapDecorator.java\n \n import org.apache.commons.collections4.SortedBidiMap;\n \n-/** \n+/**\n  * Provides a base decorator that enables additional functionality to be added\n  * to a SortedBidiMap via decoration.\n  * <p>\n \n     /**\n      * Gets the map being decorated.\n-     * \n+     *\n      * @return the decorated map\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/bidimap/DualHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/DualHashBidiMap.java\n         super(new HashMap<K, V>(), new HashMap<V, K>());\n     }\n \n-    /** \n+    /**\n      * Constructs a <code>HashBidiMap</code> and copies the mappings from\n-     * specified <code>Map</code>.  \n+     * specified <code>Map</code>.\n      *\n      * @param map  the map whose mappings are to be placed in this map\n      */\n         super(new HashMap<K, V>(), new HashMap<V, K>());\n         putAll(map);\n     }\n-    \n-    /** \n+\n+    /**\n      * Constructs a <code>HashBidiMap</code> that decorates the specified maps.\n      *\n      * @param normalMap  the normal direction map\n \n     /**\n      * Creates a new instance of this object.\n-     * \n+     *\n      * @param normalMap  the normal direction map\n      * @param reverseMap  the reverse direction map\n      * @param inverseBidiMap  the inverse BidiMap\n--- a/src/main/java/org/apache/commons/collections4/bidimap/DualLinkedHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/DualLinkedHashBidiMap.java\n             final BidiMap<K, V> inverseBidiMap) {\n         return new DualLinkedHashBidiMap<V, K>(normalMap, reverseMap, inverseBidiMap);\n     }\n-    \n+\n     // Serialization\n     //-----------------------------------------------------------------------\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n--- a/src/main/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap.java\n \n     /** The value comparator to use */\n     private final Comparator<? super V> valueComparator;\n-    \n+\n     /**\n      * Creates an empty <code>DualTreeBidiMap</code>\n      */\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     public Comparator<? super K> comparator() {\n         return ((SortedMap<K, V>) normalMap).comparator();\n     }\n \n     public Comparator<? super V> valueComparator() {\n         return ((SortedMap<V, K>) reverseMap).comparator();\n-        \n     }\n \n     public K firstKey() {\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     public SortedMap<K, V> headMap(final K toKey) {\n         final SortedMap<K, V> sub = ((SortedMap<K, V>) normalMap).headMap(toKey);\n         return new ViewMap<K, V>(this, sub);\n--- a/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n \n         /**\n          * Create a new TreeBidiMap.DataElement.\n-         * \n+         *\n          * @param description  the description for the element\n          */\n         private DataElement(final String description) {\n             stream.writeObject(entry.getValue());\n         }\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * A view of this map.\n--- a/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMap.java\n /**\n  * Decorates another {@link BidiMap} to ensure it can't be altered.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMap.java\n /**\n  * Decorates another {@link OrderedBidiMap} to ensure it can't be altered.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMap.java\n /**\n  * Decorates another {@link SortedBidiMap} to ensure it can't be altered.\n  * <p>\n- * Attempts to modify it will result in an {@link UnsupportedOperationException}. \n+ * Attempts to modify it will result in an {@link UnsupportedOperationException}.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/bidimap/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/package-info.java\n /**\n  * This package contains implementations of the\n  * {@link org.apache.commons.collections4.BidiMap BidiMap},\n- * {@link org.apache.commons.collections4.OrderedBidiMap OrderedBidiMap} and \n+ * {@link org.apache.commons.collections4.OrderedBidiMap OrderedBidiMap} and\n  * {@link org.apache.commons.collections4.SortedBidiMap SortedBidiMap} interfaces.\n  * A BidiMap is an extension to Map that allows keys and values to be looked up with equal ease.\n  * One example usage is a system communicating to a legacy datasource that must convert codes", "timestamp": 1367345312, "metainfo": ""}