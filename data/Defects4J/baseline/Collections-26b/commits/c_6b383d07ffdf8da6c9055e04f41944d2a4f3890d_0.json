{"sha": "6b383d07ffdf8da6c9055e04f41944d2a4f3890d", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r751857 | mbenson | 2009-03-09 14:43:53 -0700 (Mon, 09 Mar 2009) | 1 line          handle more ListIterator functionality when possible     ------------------------------------------------------------------------   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper2.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/**\n+ * Tests the ListIteratorWrapper to insure that it behaves as expected when wrapping a ListIterator.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Morgan Delagrange\n+ */\n+public class TestListIteratorWrapper2<E> extends AbstractTestIterator<E> {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List<E> list1 = null;\n+\n+    public static Test suite() {\n+        return new TestSuite(TestListIteratorWrapper2.class);\n+    }\n+\n+    public TestListIteratorWrapper2(String testName) {\n+        super(testName);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void setUp() {\n+        list1 = new ArrayList<E>();\n+        list1.add((E) \"One\");\n+        list1.add((E) \"Two\");\n+        list1.add((E) \"Three\");\n+        list1.add((E) \"Four\");\n+        list1.add((E) \"Five\");\n+        list1.add((E) \"Six\");\n+    }\n+\n+    public ResettableListIterator<E> makeEmptyIterator() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        return new ListIteratorWrapper<E>(list.listIterator());\n+    }\n+\n+    public ResettableListIterator<E> makeObject() {\n+        return new ListIteratorWrapper<E>(list1.listIterator());\n+    }\n+\n+    public void testIterator() {\n+        ListIterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\",\n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it backwards\n+        for (int i = testArray.length - 1; i > -1; --i) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.previous();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        try {\n+            iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\",\n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it forwards again\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+    }\n+\n+    public void testRemove() {\n+        ListIterator<E> iter = makeObject();\n+\n+        //initial state:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper#remove() should fail; must be initially positioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //establish size:\n+        int sz = list1.size();\n+\n+        //verify initial next() call:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //verify remove():\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        //like we never started iterating:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+ \n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper#remove() should fail; must be repositioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //two consecutive next() calls:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n+\n+        //call previous():\n+        assertEquals(list1.get(1), iter.previous());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //should support remove() after calling previous() once from tip because we haven't changed the underlying iterator's position:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //this would dig into cache on a plain Iterator, but forwards directly to wrapped ListIterator:\n+        assertEquals(list1.get(0), iter.previous());\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //here's the proof; remove() still works:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //further testing would be fairly meaningless:\n+    }\n+\n+    public void testReset() {\n+        ResettableListIterator<E> iter = makeObject();\n+        E first = iter.next();\n+        E second = iter.next();\n+\n+        iter.reset();\n+\n+        // after reset, there shouldn't be any previous elements\n+        assertFalse(\"No previous elements after reset()\", iter.hasPrevious());\n+\n+        // after reset, the results should be the same as before\n+        assertEquals(\"First element should be the same\", first, iter.next());\n+        assertEquals(\"Second elment should be the same\", second, iter.next());\n+\n+        // after passing the point, where we resetted, continuation should work as expected\n+        for (int i = 2; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+    }\n+\n+}", "timestamp": 1252994233, "metainfo": ""}