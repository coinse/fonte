{"sha": "01086ef5b312d7aa5ad231277950618cb93664ee", "log": "Applying the latest patch from Henning's report in COLLECTIONS-278 that put() and putAll() don't update the getKeys() map on ExtendedProperties  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n import java.util.Hashtable;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Properties;\n import java.util.StringTokenizer;\n      */\n     public Object getProperty(String key) {\n         // first, try to get from the 'user value' store\n-        Object obj = this.get(key);\n+        Object obj = super.get(key);\n \n         if (obj == null) {\n             // if there isn't a value there, get it from the\n         if (!containsKey(key)) {\n             keysAsListed.add(key);\n         }\n-        put(key, value);\n+        super.put(key, value);\n     }\n \n     /**\n             List values = new Vector(2);\n             values.add(current);\n             values.add(value);\n-            put(key, values);\n+            super.put(key, values);\n             \n         } else if (current instanceof List) {\n             // already a list - just add the new token\n             if (!containsKey(key)) {\n                 keysAsListed.add(key);\n             }\n-            put(key, value);\n+            super.put(key, value);\n         }\n     }\n \n                     break;\n                 }\n             }\n-            remove(key);\n+            super.remove(key);\n         }\n     }\n \n         } else if (value instanceof String) {\n             Vector values = new Vector(1);\n             values.add(value);\n-            put(key, values);\n+            super.put(key, values);\n             return values;\n             \n         } else if (value == null) {\n         } else if (value instanceof String) {\n             List values = new ArrayList(1);\n             values.add(value);\n-            put(key, values);\n+            super.put(key, values);\n             return values;\n             \n         } else if (value == null) {\n         } else if (value instanceof String) {\n             String s = testBoolean((String) value);\n             Boolean b = new Boolean(s);\n-            put(key, b);\n+            super.put(key, b);\n             return b;\n             \n         } else if (value == null) {\n             \n         } else if (value instanceof String) {\n             Byte b = new Byte((String) value);\n-            put(key, b);\n+            super.put(key, b);\n             return b;\n             \n         } else if (value == null) {\n             \n         } else if (value instanceof String) {\n             Short s = new Short((String) value);\n-            put(key, s);\n+            super.put(key, s);\n             return s;\n             \n         } else if (value == null) {\n             \n         } else if (value instanceof String) {\n             Integer i = new Integer((String) value);\n-            put(key, i);\n+            super.put(key, i);\n             return i;\n             \n         } else if (value == null) {\n             \n         } else if (value instanceof String) {\n             Long l = new Long((String) value);\n-            put(key, l);\n+            super.put(key, l);\n             return l;\n             \n         } else if (value == null) {\n             \n         } else if (value instanceof String) {\n             Float f = new Float((String) value);\n-            put(key, f);\n+            super.put(key, f);\n             return f;\n             \n         } else if (value == null) {\n             \n         } else if (value instanceof String) {\n             Double d = new Double((String) value);\n-            put(key, d);\n+            super.put(key, d);\n             return d;\n             \n         } else if (value == null) {\n         return c;\n     }\n \n+    /**\n+     * Add a new property specified by the key to the \n+     * ExtendedProperties.\n+     *\n+     * @param key specifying the property\n+     * @param value for the property\n+     * @return old value of the property\n+     */\n+    public Object put(Object key, Object value) {\n+        String strKey = String.valueOf(key);\n+        Object ret = getProperty(strKey);\n+        addProperty(strKey, value);\n+        return ret;\n+    }\n+\n+    /**\n+     * Add a map full of key/value pairs to the ExtendedProperties. \n+     * If the added map is an ExtendedProperties class, then the \n+     * order of the added properties is maintained. \n+     *\n+     * @param map full of key/value pair data\n+     */\n+    public void putAll(Map map) {\n+        if (map instanceof ExtendedProperties) {\n+            for (Iterator it = ((ExtendedProperties) map).getKeys(); it.hasNext(); ) {\n+                Object key = it.next();\n+                put(key, map.get(key));\n+            }\n+        } else {\n+            for (Iterator it = map.entrySet().iterator(); it.hasNext(); ) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Remove the property specified by the key from the \n+     * ExtendedProperties.\n+     *\n+     * @param key specifying the property\n+     * @return old value of the property\n+     */\n+    public Object remove(Object key) {\n+        String strKey = String.valueOf(key);\n+        Object ret = getProperty(strKey);\n+        clearProperty(strKey);\n+        return ret;\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.util.Iterator;\n import java.util.Properties;\n \n import junit.framework.Test;\n         assertEquals(\"include\", b.getInclude());\n     }\n \n+    public void testKeySet1() {\n+            ExtendedProperties p = new ExtendedProperties();\n+            p.addProperty(\"a\", \"foo\");\n+            p.addProperty(\"b\", \"bar\");\n+            p.addProperty(\"c\", \"bar\");\n+\n+            Iterator it = p.getKeys();\n+            assertEquals(\"a\", (String) it.next());\n+            assertEquals(\"b\", (String) it.next());\n+            assertEquals(\"c\", (String) it.next());\n+            assertFalse(it.hasNext());\n+    }\n+\n+    public void testKeySet2() {\n+        ExtendedProperties p = new ExtendedProperties();\n+        p.put(\"a\", \"foo\");\n+        p.put(\"b\", \"bar\");\n+        p.put(\"c\", \"bar\");\n+\n+        Iterator it = p.getKeys();\n+        assertEquals(\"a\", (String) it.next());\n+        assertEquals(\"b\", (String) it.next());\n+        assertEquals(\"c\", (String) it.next());\n+        assertFalse(it.hasNext());\n+    }\n+\n+\n+    public void testKeySet3() {\n+        ExtendedProperties q = new ExtendedProperties();\n+        q.addProperty(\"a\", \"foo\");\n+        q.addProperty(\"b\", \"bar\");\n+        q.addProperty(\"c\", \"bar\");\n+\n+        ExtendedProperties p = new ExtendedProperties();\n+        p.putAll(q);\n+\n+        Iterator it = p.getKeys();\n+        assertEquals(\"a\", (String) it.next());\n+        assertEquals(\"b\", (String) it.next());\n+        assertEquals(\"c\", (String) it.next());\n+        assertFalse(it.hasNext());\n+    }\n+\n+    public void testKeySet4() {\n+        ExtendedProperties q = new ExtendedProperties();\n+        q.addProperty(\"a\", \"foo\");\n+        q.addProperty(\"b\", \"bar\");\n+        q.addProperty(\"c\", \"bar\");\n+\n+        q.remove(\"b\");\n+\n+        Iterator it = q.getKeys();\n+        assertEquals(\"a\", (String) it.next());\n+        assertEquals(\"c\", (String) it.next());\n+        assertFalse(it.hasNext());\n+    }\n+\n }", "timestamp": 1205623428, "metainfo": ""}