{"sha": "685b0bfe6127163cfce84784ae4e7e01b4d5f934", "log": "Add new decorator abstract class for OrderedMap   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java,v 1.1 2003/11/20 22:33:54 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.iterators.OrderedMapIterator;\n+\n+/** \n+ * Provides a base decorator that enables additional functionality to be added\n+ * to an OrderedMap via decoration.\n+ * <p>\n+ * Methods are forwarded directly to the decorated map.\n+ * <p>\n+ * This implementation does not perform any special processing with the map views.\n+ * Instead it simply returns the set/collection from the wrapped map. This may be\n+ * undesirable, for example if you are trying to write a validating implementation\n+ * it would provide a loophole around the validation.\n+ * But, you might want that loophole, so this class is kept simple.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/20 22:33:54 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractOrderedMapDecorator extends AbstractMapDecorator implements OrderedMap {\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractOrderedMapDecorator(OrderedMap map) {\n+        super(map);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected OrderedMap getOrderedMap() {\n+        return (OrderedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getOrderedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getOrderedMap().lastKey();\n+    }\n+\n+    public Object nextKey(Object key) {\n+        return getOrderedMap().nextKey(key);\n+    }\n+\n+    public Object previousKey(Object key) {\n+        return getOrderedMap().previousKey(key);\n+    }\n+\n+    public MapIterator mapIterator() {\n+        return getOrderedMap().mapIterator();\n+    }\n+\n+    public OrderedMapIterator orderedMapIterator() {\n+        return getOrderedMap().orderedMapIterator();\n+    }\n+\n+}", "timestamp": 1069367634, "metainfo": ""}