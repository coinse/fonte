{"sha": "c6f0df6546279edfabae2755713aca33798fa19f", "log": "[COLLECTIONS-312] Apply remaining changes from patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ClosureUtils.java\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> switchMapClosure(final Map<? extends E, Closure<E>> objectsAndClosures) {\n-        Closure<? super E>[] trs = null;\n-        Predicate<E>[] preds = null;\n         if (objectsAndClosures == null) {\n             throw new IllegalArgumentException(\"The object and closure map must not be null\");\n         }\n         final Closure<? super E> def = objectsAndClosures.remove(null);\n         final int size = objectsAndClosures.size();\n-        trs = new Closure[size];\n-        preds = new Predicate[size];\n+        final Closure<? super E>[] trs = new Closure[size];\n+        final Predicate<E>[] preds = new Predicate[size];\n         int i = 0;\n         for (final Map.Entry<? extends E, Closure<E>> entry : objectsAndClosures.entrySet()) {\n             preds[i] = EqualPredicate.<E>equalPredicate(entry.getKey());\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n             elements = new HashSet<O>();\n             addAll(elements, a);\n             addAll(elements, b);\n-            newList = new ArrayList<O>();\n+            // the resulting list must contain at least each unique element, but may grow\n+            newList = new ArrayList<O>(elements.size());\n         }\n \n         public Iterator<O> iterator() {\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n             if (defaults != null) {\n                 return defaults.getVector(key, defaultValue);\n             } else {\n-                return defaultValue == null ? new Vector<String>() : defaultValue;\n+                return defaultValue == null ? new Vector<String>(1) : defaultValue;\n             }\n         } else {\n             throw new ClassCastException('\\'' + key + \"' doesn't map to a Vector object\");\n             if (defaults != null) {\n                 return defaults.getList(key, defaultValue);\n             } else {\n-                return defaultValue == null ? new ArrayList<String>() : defaultValue;\n+                return defaultValue == null ? new ArrayList<String>(1) : defaultValue;\n             }\n         } else {\n             throw new ClassCastException('\\'' + key + \"' doesn't map to a List object\");\n--- a/src/main/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections/TransformerUtils.java\n     public static <I, O> Transformer<I, O> switchMapTransformer(\n             final Map<I, Transformer<I, O>> objectsAndTransformers) {\n \n-        Transformer<? super I, ? extends O>[] trs = null;\n-        Predicate<I>[] preds = null;\n         if (objectsAndTransformers == null) {\n             throw new IllegalArgumentException(\"The object and transformer map must not be null\");\n         }\n         final Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n         final int size = objectsAndTransformers.size();\n-        trs = new Transformer[size];\n-        preds = new Predicate[size];\n+        final Transformer<? super I, ? extends O>[] trs = new Transformer[size];\n+        final Predicate<I>[] preds = new Predicate[size];\n         int i = 0;\n         for (final Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n             preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n                         \"Cannot use setValue() when the object being set is already in the map\");\n             }\n             parent.put(key, value);\n-            final V oldValue = super.setValue(value);\n-            return oldValue;\n+            return super.setValue(value);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n         normalMap = new HashMap<K, V>();\n         reverseMap = new HashMap<V, K>();\n         @SuppressWarnings(\"unchecked\") // will fail at runtime if stream is incorrect\n-        final\n-        Map<K, V> map = (Map<K, V>) in.readObject();\n+        final Map<K, V> map = (Map<K, V>) in.readObject();\n         putAll(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n             if (object == this) {\n                 return true;\n             }\n-            return decorated().equals(object);\n+            return object == this || decorated().equals(object);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n             return \"[]\";\n         }\n         final StringBuilder buf = new StringBuilder(16 * size());\n-        buf.append(\"[\");\n+        buf.append('[');\n \n         final Iterator<E> it = iterator();\n         boolean hasNext = it.hasNext();\n                 buf.append(\", \");\n             }\n         }\n-        buf.append(\"]\");\n+        buf.append(']');\n         return buf.toString();\n     }\n \n--- a/src/main/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TreeList.java\n         }\n \n         private AVLNode<E> insertOnLeft(final int indexRelativeToMe, final E obj) {\n-            AVLNode<E> ret = this;\n-\n             if (getLeftSubTree() == null) {\n                 setLeft(new AVLNode<E>(-1, obj, this, left), null);\n             } else {\n             if (relativePosition >= 0) {\n                 relativePosition++;\n             }\n-            ret = balance();\n+            AVLNode<E> ret = balance();\n             recalcHeight();\n             return ret;\n         }\n \n         private AVLNode<E> insertOnRight(final int indexRelativeToMe, final E obj) {\n-            AVLNode<E> ret = this;\n-\n             if (getRightSubTree() == null) {\n                 setRight(new AVLNode<E>(+1, obj, right, this), null);\n             } else {\n             if (relativePosition < 0) {\n                 relativePosition--;\n             }\n-            ret = balance();\n+            AVLNode<E> ret = balance();\n             recalcHeight();\n             return ret;\n         }\n          */\n         @Override\n         public String toString() {\n-            return \"AVLNode(\" + relativePosition + \",\" + (left != null) + \",\" + value +\n-                \",\" + (getRightSubTree() != null) + \", faedelung \" + rightIsNext + \" )\";\n+            return new StringBuilder()\n+                .append(\"AVLNode(\")\n+                .append(relativePosition)\n+                .append(',')\n+                .append(left != null)\n+                .append(',')\n+                .append(value)\n+                .append(',')\n+                .append(getRightSubTree() != null)\n+                .append(\", faedelung \")\n+                .append(rightIsNext)\n+                .append(\" )\")\n+                .toString();\n         }\n     }\n ", "timestamp": 1360256423, "metainfo": ""}