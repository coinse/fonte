{"sha": "963757362ab2ff0f1636008815549322fef1148c", "log": "more tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestList.java\n+++ b/src/test/org/apache/commons/collections/TestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.3 2001/04/26 00:06:00 rwaldhoff Exp $\n- * $Revision: 1.3 $\n- * $Date: 2001/04/26 00:06:00 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.4 2001/05/04 16:34:27 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2001/05/04 16:34:27 $\n  *\n  * ====================================================================\n  *\n import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.Iterator;\n+import java.util.ListIterator;\n \n /**\n  * Tests base {@link java.util.List} methods and contracts.\n  * test case (method) your {@link List} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestList.java,v 1.3 2001/04/26 00:06:00 rwaldhoff Exp $\n+ * @version $Id: TestList.java,v 1.4 2001/05/04 16:34:27 rwaldhoff Exp $\n  */\n public abstract class TestList extends TestCollection {\n     public TestList(String testName) {\n \n         try {\n             list.add(Integer.MIN_VALUE,\"element\");\n-            fail(\"Shouldn't get here [Integer.MIN_VALUE]\");\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(ClassCastException e) {\n \n         try {\n             list.add(-1,\"element\");\n-            fail(\"Shouldn't get here [-1]\");\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(ClassCastException e) {\n \n         try {\n             list.add(1,\"element\");\n-            fail(\"Shouldn't get here [1]\");\n+            fail(\"List.add should throw IndexOutOfBoundsException [1]\");\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(ClassCastException e) {\n \n         try {\n             list.add(Integer.MAX_VALUE,\"element\");\n-            fail(\"Shouldn't get here [Integer.MAX_VALUE]\");\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(ClassCastException e) {\n \n         try {\n             list.add(-1,\"element2\");\n-            fail(\"Shouldn't get here [-1]\");\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(ClassCastException e) {\n \n         try {\n             list.add(2,\"element2\");\n-            fail(\"Shouldn't get here [2]\");\n+            fail(\"List.add should throw IndexOutOfBoundsException [2]\");\n         } catch(UnsupportedOperationException e) {\n             // expected\n         } catch(ClassCastException e) {\n \n         try {\n             list.get(Integer.MIN_VALUE);\n-            fail(\"Shouldn't get here [Integer.MIN_VALUE]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(-1);\n-            fail(\"Shouldn't get here [-1]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(0);\n-            fail(\"Shouldn't get here [0]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [0]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(1);\n-            fail(\"Shouldn't get here [1]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [1]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(Integer.MAX_VALUE);\n-            fail(\"Shouldn't get here [Integer.MAX_VALUE]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(Integer.MIN_VALUE);\n-            fail(\"Shouldn't get here [Integer.MIN_VALUE]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(-1);\n-            fail(\"Shouldn't get here [-1]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(1);\n-            fail(\"Shouldn't get here [1]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [1]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n \n         try {\n             list.get(Integer.MAX_VALUE);\n-            fail(\"Shouldn't get here [Integer.MAX_VALUE]\");\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n         } catch(IndexOutOfBoundsException e) {\n             // expected\n         }\n         assertEquals(lastIndexOfG,list.lastIndexOf(\"g\"));\n     }\n \n+    public void testListSetByIndexBoundsChecking() {\n+        List list = makeList();\n+\n+        try {\n+            list.set(Integer.MIN_VALUE,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(-1,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(0,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [0]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(1,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(Integer.MAX_VALUE,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListSetByIndexBoundsChecking2() {\n+        List list = makeList();\n+        tryToAdd(list,\"element\");\n+        tryToAdd(list,\"element2\");\n+\n+        try {\n+            list.set(Integer.MIN_VALUE,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(-1,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(2,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [2]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(Integer.MAX_VALUE,\"a\");\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException  e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListSetByIndex() {\n+        List list = makeList();\n+        tryToAdd(list,\"element\");\n+        tryToAdd(list,\"element2\");\n+        tryToAdd(list,\"element3\");\n+        tryToAdd(list,\"element4\");\n+\n+        Object[] values = list.toArray();\n+\n+        for(int i=0;i<values.length;i++) {\n+            try {\n+                Object obj = list.set(i,String.valueOf(i));\n+                assertEquals(obj,values[i]);\n+                values[i] = String.valueOf(i);\n+                assert(Arrays.equals(values,list.toArray()));\n+            } catch(UnsupportedOperationException e) {\n+                // expected\n+            } catch(ClassCastException e) {\n+                // expected\n+            } catch(IllegalArgumentException  e) {\n+                // expected\n+            }\n+        }\n+    }\n+\n+    public void testListRemoveByIndex() {\n+        List list = makeList();\n+        tryToAdd(list,\"element\");\n+        tryToAdd(list,\"element2\");\n+        tryToAdd(list,\"element3\");\n+        tryToAdd(list,\"element4\");\n+        tryToAdd(list,\"element5\");\n+\n+        Object[] values = list.toArray();\n+\n+        for(int i=1;i<values.length;i++) {\n+            try {\n+                Object obj = list.remove(1);\n+                assertEquals(obj,values[i]);\n+            } catch(UnsupportedOperationException e) {\n+                // expected\n+            }\n+        }\n+\n+        if(values.length != 0) {\n+            try {\n+                Object obj = list.remove(0);\n+                assertEquals(obj,values[0]);\n+            } catch(UnsupportedOperationException e) {\n+                // expected\n+            }\n+        }\n+    }\n+\n+    public void testListRemoveByValue() {\n+        List list = makeList();\n+        tryToAdd(list,\"element1\");\n+        tryToAdd(list,\"element2\");\n+        tryToAdd(list,\"element3\");\n+        tryToAdd(list,\"element4\");\n+        tryToAdd(list,\"element5\");\n+\n+        Object[] values = list.toArray();\n+\n+        for(int i=0;i<values.length;i++) {\n+            try {\n+                assert(!list.remove(\"X\"));\n+                assert(list.contains(values[i]));\n+                assert(list.remove(values[i]));\n+                assert(!list.contains(values[i]));\n+            } catch(UnsupportedOperationException e) {\n+                // expected\n+            }\n+        }\n+    }\n+\n+    public void testListListIteratorNextPrev() {\n+        List list = makeList();\n+        tryToAdd(list,\"element1\");\n+        tryToAdd(list,\"element2\");\n+        tryToAdd(list,\"element3\");\n+        tryToAdd(list,\"element4\");\n+        tryToAdd(list,\"element5\");\n+        Object[] values = list.toArray();\n+        ListIterator iter = list.listIterator();\n+        for(int i=0;i<values.length;i++) {\n+            assert( iter.hasNext() );\n+            assert((i!=0) == iter.hasPrevious());\n+            assertEquals(values[i],iter.next());\n+        }\n+        assert(!iter.hasNext());\n+        for(int i=values.length-1;i>=0;i--) {\n+            assert( iter.hasPrevious() );\n+            assert((i!=(values.length-1)) == iter.hasNext());\n+            assertEquals(values[i],iter.previous());\n+        }\n+        assert(!iter.hasPrevious());\n+        for(int i=0;i<values.length;i++) {\n+            assert( iter.hasNext() );\n+            assert((i!=0) == iter.hasPrevious());\n+            assertEquals(values[i],iter.next());\n+            assertEquals(values[i],iter.previous());\n+            assertEquals(values[i],iter.next());\n+        }\n+    }\n+\n+    public void testListListIteratorNextIndexPrevIndex() {\n+        List list = makeList();\n+        tryToAdd(list,\"element1\");\n+        tryToAdd(list,\"element2\");\n+        tryToAdd(list,\"element3\");\n+        tryToAdd(list,\"element4\");\n+        tryToAdd(list,\"element5\");\n+        Object[] values = list.toArray();\n+        ListIterator iter = list.listIterator();\n+        for(int i=0;i<values.length;i++) {\n+            assertEquals(\"nextIndex should be \" + i,i,iter.nextIndex());\n+            assertEquals(\"previousIndex should be \" + (i-1),i-1,iter.previousIndex());\n+            assertEquals(values[i],iter.next());\n+        }\n+        assert(!iter.hasNext());\n+        for(int i=values.length-1;i>=0;i--) {\n+            assertEquals(\"previousIndex should be \" + i,i,iter.previousIndex());\n+            assertEquals(\"nextIndex should be \" + (i+1),i+1,iter.nextIndex());\n+            assertEquals(values[i],iter.previous());\n+        }\n+    }\n+\n+    public void testListListIteratorSet() {\n+        List list = makeList();\n+        tryToAdd(list,\"element1\");\n+        tryToAdd(list,\"element2\");\n+        tryToAdd(list,\"element3\");\n+        tryToAdd(list,\"element4\");\n+        tryToAdd(list,\"element5\");\n+        Object[] values = list.toArray();\n+        ListIterator iter = list.listIterator();\n+\n+        try {\n+            iter.set(\"should fail\");\n+            fail(\"ListIterator.set should fail when neither next nor previous has been called\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(IllegalStateException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        for(int i=0;i<values.length;i++) {\n+            iter.next();\n+            try {\n+                iter.set(new Integer(i));\n+                values[i] = new Integer(i);\n+                assert(Arrays.equals(values,list.toArray()));\n+            } catch(UnsupportedOperationException e) {\n+                // expected\n+            } catch(IllegalStateException e) {\n+                // expected\n+            } catch(ClassCastException e) {\n+                // expected\n+            } catch(IllegalArgumentException e) {\n+                // expected\n+            }\n+        }\n+        assert(!iter.hasNext());\n+        for(int i=values.length-1;i>=0;i--) {\n+            iter.previous();\n+            try {\n+                iter.set(String.valueOf(i));\n+                values[i] = String.valueOf(i);\n+                assert(Arrays.equals(values,list.toArray()));\n+            } catch(UnsupportedOperationException e) {\n+                // expected\n+            } catch(IllegalStateException e) {\n+                // expected\n+            } catch(ClassCastException e) {\n+                // expected\n+            } catch(IllegalArgumentException e) {\n+                // expected\n+            }\n+        }\n+    }\n+\n     /*\n \n     public void testListListIterator() {\n         // XXX finish me\n     }\n \n-    // optional operation\n-    public void testListRemoveByIndex() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testListRemoveByValue() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testListSet() {\n-        // XXX finish me\n-    }\n \n     public void testListSubList() {\n         // XXX finish me", "timestamp": 988994067, "metainfo": ""}