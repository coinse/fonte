{"sha": "7d1c0ab0904c43eef9c20ff38fb56f7215e5743b", "log": "COLLECTIONS-363 TransformedMap is Serializable but its superclass doesn't define an accessible void constructor  ", "commit": "\n--- a/src/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n      */\n     public AbstractIterableGetMapDecorator(Map<K, V> decorated) {\n         this.map = decorated;\n+    }\n+\n+    /**\n+     * Constructor only used in deserialization, do not use otherwise.\n+     */\n+    protected AbstractIterableGetMapDecorator() {\n+        super();\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/splitmap/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/splitmap/TestTransformedMap.java\n  */\n package org.apache.commons.collections.splitmap;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n+import java.io.*;\n import java.math.BigInteger;\n import java.util.HashMap;\n \n         }\n     }\n \n-    public void TODOtestCollections363() throws Exception {\n+    public void testEmptyMap() throws IOException, ClassNotFoundException {\n         TransformedMap<String, String, String, String> map = TransformedMap.decorate(\n-                new HashMap<String, String>(), \n-                NOPTransformer.<String> getInstance(), \n-                NOPTransformer.<String> getInstance());\n-        \n-        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-        ObjectOutputStream out = new ObjectOutputStream(bytes);\n-        out.writeObject(map);\n-        out.close();\n-        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));\n+                new HashMap<String, String>(),\n+                NOPTransformer.<String>getInstance(),\n+                NOPTransformer.<String>getInstance() );\n+\n+        ObjectInputStream in = new ObjectInputStream( new FileInputStream( \"data/test/TransformedMap.emptyCollection.version3.2.obj\" ) );\n         Object readObject = in.readObject();\n         in.close();\n-        assertEquals(\"deserializing class: \" + map.getClass().getName(), map.getClass(), readObject\n-                .getClass());\n+\n+        TransformedMap<?, ?, ?, ?> readMap = (TransformedMap<?, ?, ?, ?>) readObject;\n+        assertTrue( \"Map should be empty\", readMap.size() == 0 );\n+        assertEquals( map.entrySet(), readMap.entrySet() );\n     }\n+\n+    public void testFullMap() throws IOException, ClassNotFoundException {\n+        TransformedMap<String, String, String, String> map = TransformedMap.decorate(\n+                new HashMap<String, String>(),\n+                NOPTransformer.<String>getInstance(),\n+                NOPTransformer.<String>getInstance() );\n+        map.put( \"a\", \"b\" );\n+        map.put( \"c\", \"d\" );\n+        map.put( \"e\", \"f\" );\n+        map.put( \"g\", \"h\" );\n+\n+        ObjectInputStream in = new ObjectInputStream( new FileInputStream( \"data/test/TransformedMap.fullCollection.version3.2.obj\" ) );\n+        Object readObject = in.readObject();\n+        in.close();\n+\n+        TransformedMap<?, ?, ?, ?> readMap = (TransformedMap<?, ?, ?, ?>) readObject;\n+        assertFalse( \"Map should not be empty\", readMap.size() == 0 );\n+        assertEquals( map.entrySet(), readMap.entrySet() );\n+    }\n+//\n+//    public void testCreate() throws IOException {\n+//        TransformedMap<String, String, String, String> map = TransformedMap.decorate(\n+//                new HashMap<String, String>(),\n+//                NOPTransformer.<String>getInstance(),\n+//                NOPTransformer.<String>getInstance() );\n+//\n+//        ObjectOutputStream out = new ObjectOutputStream(\n+//                new FileOutputStream( \"data/test/TransformedMap.emptyCollection.version3.2.obj\" ) );\n+//        out.writeObject( map );\n+//\n+//        map.put( \"a\", \"b\" );\n+//        map.put( \"c\", \"d\" );\n+//        map.put( \"e\", \"f\" );\n+//        map.put( \"g\", \"h\" );\n+//\n+//        out = new ObjectOutputStream(\n+//                new FileOutputStream( \"data/test/TransformedMap.fullCollection.version3.2.obj\" ) );\n+//        out.writeObject( map );\n+//    }\n }", "timestamp": 1292873069, "metainfo": ""}