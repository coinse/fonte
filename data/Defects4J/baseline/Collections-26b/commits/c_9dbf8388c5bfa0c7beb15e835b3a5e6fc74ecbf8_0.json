{"sha": "9dbf8388c5bfa0c7beb15e835b3a5e6fc74ecbf8", "log": "[COLLECTIONS-525] Fix PatriciaTrie.prefixMap(). Thanks to Zigler Zhang.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java\n+++ b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java\n         TrieEntry<K, V> current = root.left;\n         TrieEntry<K, V> path = root;\n         while(true) {\n-            if (current.bitIndex <= path.bitIndex || lengthInBits < current.bitIndex) {\n+            if (current.bitIndex <= path.bitIndex || lengthInBits <= current.bitIndex) {\n                 break;\n             }\n \n \n         // Found key's length-th bit differs from our key\n         // which means it cannot be the prefix...\n-        if (isBitSet(prefix, endIndexInBits, endIndexInBits)\n-                != isBitSet(entry.key, lengthInBits, lengthInBits(entry.key))) {\n+        if (isBitSet(prefix, endIndexInBits - 1, endIndexInBits)\n+                != isBitSet(entry.key, lengthInBits - 1, lengthInBits(entry.key))) {\n             return null;\n         }\n \n             if (prefixStart == null) {\n                 final Set<Map.Entry<K,V>> empty = Collections.emptySet();\n                 return empty.iterator();\n-            } else if (delegate.lengthInBits >= prefixStart.bitIndex) {\n+            } else if (delegate.lengthInBits > prefixStart.bitIndex) {\n                 return new SingletonIterator(prefixStart);\n             } else {\n                 return new EntryIterator(prefixStart, delegate.prefix, delegate.offsetInBits, delegate.lengthInBits);\n--- a/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java\n+++ b/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java\n \n import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.map.AbstractSortedMapTest;\n-\n import org.junit.Assert;\n \n /**\n         Assert.assertFalse(iter.hasNext());\n     }\n \n+    public void testPrefixMapSizes() {\n+        // COLLECTIONS-525\n+        PatriciaTrie<String> aTree = new PatriciaTrie<String>();\n+        aTree.put(\"\u70b9\u8bc4\", \"\u6d4b\u8bd5\");\n+        aTree.put(\"\u4e66\u8bc4\", \"\u6d4b\u8bd5\");\n+        assertTrue(aTree.prefixMap(\"\u70b9\").containsKey(\"\u70b9\u8bc4\"));\n+        assertEquals(\"\u6d4b\u8bd5\", aTree.prefixMap(\"\u70b9\").get(\"\u70b9\u8bc4\"));\n+        assertFalse(aTree.prefixMap(\"\u70b9\").isEmpty());\n+        assertEquals(1, aTree.prefixMap(\"\u70b9\").size());\n+        assertEquals(1, aTree.prefixMap(\"\u70b9\").keySet().size());\n+        assertEquals(1, aTree.prefixMap(\"\u70b9\").entrySet().size());\n+        assertEquals(1, aTree.prefixMap(\"\u70b9\u8bc4\").values().size());\n+\n+        aTree.clear();\n+        aTree.put(\"\u70b9\u8bc4\", \"\u8054\u76df\");\n+        aTree.put(\"\u70b9\u7248\", \"\u5b9a\u5411\");\n+        assertEquals(2, aTree.prefixMap(\"\u70b9\").keySet().size());\n+        assertEquals(2, aTree.prefixMap(\"\u70b9\").values().size());\n+    }\n+\n     //-----------------------------------------------------------------------\n \n     @Override", "timestamp": 1420146646, "metainfo": ""}