{"sha": "c324046a543ecb0661d1860404f8218426707e9d", "log": "Add size(Object) method to find the size of various collection-like objects bug 27909, from Steven Melzer   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.56 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.57 $ $Date: 2004/03/31 21:43:27 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Matthew Hawthorne\n  * @author Janek Bogucki\n  * @author Phil Steitz\n+ * @author Steven Melzer\n  */\n public class CollectionUtils {\n \n             return ((Object[])obj)[idx];\n         } \n         else if(obj instanceof Enumeration) {\n-            Enumeration enum = (Enumeration)obj;\n-            while(enum.hasMoreElements()) {\n+            Enumeration it = (Enumeration)obj;\n+            while(it.hasMoreElements()) {\n                 idx--;\n                 if(idx == -1) {\n-                    return enum.nextElement();\n+                    return it.nextElement();\n                 } else {\n-                    enum.nextElement();\n+                    it.nextElement();\n                 }\n             }\n         } \n      */\n     public static Object get(Object object, int index) {\n         if (index < 0) {\n-            throw new IndexOutOfBoundsException(\"Index cannot be negative.\");\n-        }\n-        if(object instanceof Map) {\n-            Map map = (Map)object;\n+            throw new IndexOutOfBoundsException(\"Index cannot be negative: \" + index);\n+        }\n+        if (object instanceof Map) {\n+            Map map = (Map) object;\n             Iterator iterator = map.entrySet().iterator();\n             return get(iterator, index);\n-        } \n-        else if(object instanceof List) {\n-            return ((List)object).get(index);\n-        } \n-        else if(object instanceof Object[]) {\n-            return ((Object[])object)[index];\n-        } \n-        else if(object instanceof Enumeration) {\n-            Enumeration enum = (Enumeration)object;\n-            while(enum.hasMoreElements()) {\n+        } else if (object instanceof List) {\n+            return ((List) object).get(index);\n+        } else if (object instanceof Object[]) {\n+            return ((Object[]) object)[index];\n+        } else if (object instanceof Enumeration) {\n+            Enumeration it = (Enumeration) object;\n+            while (it.hasMoreElements()) {\n                 index--;\n-                if(index == -1) {\n-                    return enum.nextElement();\n+                if (index == -1) {\n+                    return it.nextElement();\n                 } else {\n-                    enum.nextElement();\n-                }\n-            }\n-            throw new IndexOutOfBoundsException(\"Entry does not exist.\");\n-        } \n-        else if(object instanceof Iterator) {\n-            return get((Iterator)object, index);\n-        }\n-        else if(object instanceof Collection) {\n-            Iterator iterator = ((Collection)object).iterator();\n+                    it.nextElement();\n+                }\n+            }\n+            throw new IndexOutOfBoundsException(\"Entry does not exist: \" + index);\n+        } else if (object instanceof Iterator) {\n+            Iterator it = (Iterator) object;\n+            while (it.hasNext()) {\n+                index--;\n+                if (index == -1) {\n+                    return it.next();\n+                } else {\n+                    it.next();\n+                }\n+            }\n+            throw new IndexOutOfBoundsException(\"Entry does not exist: \" + index);\n+        } else if (object instanceof Collection) {\n+            Iterator iterator = ((Collection) object).iterator();\n             return get(iterator, index);\n         } else {\n-            throw new IllegalArgumentException(\"Unsupported object type.\");\n-        }\n-    }\n-    \n-    private static Object get(Iterator iterator, int index) {\n-        while(iterator.hasNext()) {\n-            index--;\n-            if(index == -1) {\n-                return iterator.next();\n-            } else {\n-                iterator.next();\n-            }\n-        }\n-        throw new IndexOutOfBoundsException(\"Entry does not exist.\");\n-    }\n-\n-    /** \n+            throw new IllegalArgumentException(\"Unsupported object type: \" +\n+                (object == null ? \"null\" : object.getClass().getName()));\n+        }\n+    }\n+    \n+    /** \n+     * Gets the size of the collection/iterator specified.\n+     * <p>\n+     * This method can handles objects as follows\n+     * <ul>\n+     * <li>Collection - the collection size\n+     * <li>Map - the map size\n+     * <li>Object array - the array size\n+     * <li>Iterator - the number of elements remaining in the iterator\n+     * <li>Enumeration - the number of elements remaining in the enumeration\n+     * </ul>\n+     * \n+     * @param object  the object to get the size of\n+     * @return the size of the specified collection\n+     * @throws IllegalArgumentException thrown if object is not recognised or null\n+     */\n+    public static int size(Object object) {\n+        int total = 0;\n+        if (object instanceof Map) {\n+            total = ((Map) object).size();\n+        } else if (object instanceof Collection) {\n+            total = ((Collection) object).size();\n+        } else if (object instanceof Object[]) {\n+            total = ((Object[]) object).length;\n+        } else if (object instanceof Iterator) {\n+            Iterator it = (Iterator) object;\n+            while (it.hasNext()) {\n+                total++;\n+                it.next();\n+            }\n+        } else if (object instanceof Enumeration) {\n+            Enumeration it = (Enumeration) object;\n+            while (it.hasMoreElements()) {\n+                total++;\n+                it.nextElement();\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported object type: \" +\n+                (object == null ? \"null\" : object.getClass().getName()));\n+        }\n+        return total;\n+    }\n+    \n+    /**\n      * Reverses the order of the given array.\n      * \n      * @param array  the array to reverse\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n+ * @author Steven Melzer\n  * \n- * @version $Revision: 1.35 $ $Date: 2004/02/18 01:20:35 $\n+ * @version $Revision: 1.36 $ $Date: 2004/03/31 21:43:27 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n         }\n     }\n \n-\n+    public void testSize_List() {\n+        List list = new ArrayList();\n+        assertEquals(0, CollectionUtils.size(list));\n+        list.add(\"a\");\n+        assertEquals(1, CollectionUtils.size(list));\n+        list.add(\"b\");\n+        assertEquals(2, CollectionUtils.size(list));\n+    }\n+    public void testSize_Map() {\n+        Map map = new HashMap();\n+        assertEquals(0, CollectionUtils.size(map));\n+        map.put(\"1\", \"a\");\n+        assertEquals(1, CollectionUtils.size(map));\n+        map.put(\"2\", \"b\");\n+        assertEquals(2, CollectionUtils.size(map));\n+    }\n+    public void testSize_Array() {\n+        Object[] objectArray = new Object[0];\n+        assertEquals(0, CollectionUtils.size(objectArray));\n+        \n+        String[] stringArray = new String[3];\n+        assertEquals(3, CollectionUtils.size(stringArray));\n+        stringArray[0] = \"a\";\n+        stringArray[1] = \"b\";\n+        stringArray[2] = \"c\";\n+        assertEquals(3, CollectionUtils.size(stringArray));\n+    }\n+    public void testSize_Enumeration() {\n+        Vector list = new Vector();\n+        assertEquals(0, CollectionUtils.size(list.elements()));\n+        list.add(\"a\");\n+        assertEquals(1, CollectionUtils.size(list.elements()));\n+        list.add(\"b\");\n+        assertEquals(2, CollectionUtils.size(list.elements()));\n+    }\n+    public void testSize_Iterator() {\n+        List list = new ArrayList();\n+        assertEquals(0, CollectionUtils.size(list.iterator()));\n+        list.add(\"a\");\n+        assertEquals(1, CollectionUtils.size(list.iterator()));\n+        list.add(\"b\");\n+        assertEquals(2, CollectionUtils.size(list.iterator()));\n+    }\n+    public void testSize_Other() {\n+        try {\n+            CollectionUtils.size(null);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {}\n+        try {\n+            CollectionUtils.size(\"not a list\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {}\n+        try {\n+            CollectionUtils.size(new int[0]);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     private static Predicate EQUALS_TWO = new Predicate() {\n         public boolean evaluate(Object input) {\n             return (input.equals(\"Two\"));", "timestamp": 1080769407, "metainfo": ""}