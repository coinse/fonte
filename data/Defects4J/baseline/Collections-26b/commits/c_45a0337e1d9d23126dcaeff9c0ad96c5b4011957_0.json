{"sha": "45a0337e1d9d23126dcaeff9c0ad96c5b4011957", "log": "[COLLECTIONS-540] Added CollectionUtils#get(Enumeration, int), simplified code of CollectionUtils#get(Object, int). Thanks to Daniel Stewart, Issam El Atif. This closes #6.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n     }\n \n     /**\n+     * Returns the <code>index</code>-th value in the {@link Enumeration}, throwing\n+     * <code>IndexOutOfBoundsException</code> if there is no such element.\n+     * <p>\n+     * The Enumeration is advanced to <code>index</code> (or to the end, if\n+     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n+     *\n+     * @param e  the enumeration to get a value from\n+     * @param index  the index to get\n+     * @param <T> the type of object in the {@link Enumeration}\n+     * @return the object at the specified index\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @throws IllegalArgumentException if the object type is invalid\n+     * @since 4.1\n+     */\n+    public static <T> T get(final Enumeration<T> e, final int index) {\n+        int i = index;\n+        checkIndexBounds(i);\n+        while (e.hasMoreElements()) {\n+            i--;\n+            if (i == -1) {\n+                return e.nextElement();\n+            } else {\n+                e.nextElement();\n+            }\n+        }\n+        throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n+    }\n+\n+    /**\n      * Ensures an index is not negative.\n      * @param index the index to check.\n      * @throws IndexOutOfBoundsException if the index is negative.\n             return ((Object[]) object)[i];\n         } else if (object instanceof Iterator<?>) {\n             final Iterator<?> it = (Iterator<?>) object;\n-            while (it.hasNext()) {\n-                i--;\n-                if (i == -1) {\n-                    return it.next();\n-                }\n-                it.next();\n-            }\n-            throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n+            return get(it, i);\n         } else if (object instanceof Collection<?>) {\n             final Iterator<?> iterator = ((Collection<?>) object).iterator();\n             return get(iterator, i);\n         } else if (object instanceof Enumeration<?>) {\n             final Enumeration<?> it = (Enumeration<?>) object;\n-            while (it.hasMoreElements()) {\n-                i--;\n-                if (i == -1) {\n-                    return it.nextElement();\n-                } else {\n-                    it.nextElement();\n-                }\n-            }\n-            throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n+            return get(it, i);\n         } else if (object == null) {\n             throw new IllegalArgumentException(\"Unsupported object type: null\");\n         } else {\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n         assertEquals(2, CollectionUtils.get((Object)collectionA, 2));\n         assertEquals(2, CollectionUtils.get((Object)collectionA.iterator(), 2));\n         final Map<Integer, Integer> map = CollectionUtils.getCardinalityMap(collectionA);\n-        assertEquals(map.entrySet().iterator().next(), CollectionUtils.get(\n-                (Object)map, 0));\n+        assertEquals(map.entrySet().iterator().next(), CollectionUtils.get((Object)map, 0));\n+    }\n+\n+    @Test\n+    public void getIterator() {\n+        final Iterator<Integer> it = collectionA.iterator();\n+        assertEquals(Integer.valueOf(2), CollectionUtils.get(it, 2));\n+        assertTrue(it.hasNext());\n+        assertEquals(Integer.valueOf(4), CollectionUtils.get(it, 6));\n+        assertFalse(it.hasNext());\n+    }\n+\n+    @Test\n+    public void getEnumeration() {\n+        final Vector<Integer> vectorA = new Vector<Integer>(collectionA);\n+        final Enumeration<Integer> e = vectorA.elements();\n+        assertEquals(Integer.valueOf(2), CollectionUtils.get(e, 2));\n+        assertTrue(e.hasMoreElements());\n+        assertEquals(Integer.valueOf(4), CollectionUtils.get(e, 6));\n+        assertFalse(e.hasMoreElements());\n     }\n \n     @Test", "timestamp": 1419591983, "metainfo": ""}