{"sha": "2724728c2c875c22e093503b893c873eb1e5c1a6", "log": "Javadoc lack of thread-safety  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+++ b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n  * <code>map.get(null)</code> returns <code>\"Three\"</code> and <code>map.get(\"ONE\")</code>\n  * returns <code>\"Four\".</code>  The <code>Set</code> returned by <code>keySet()</code>\n  * equals <code>{\"one\", \"two\", null}.</code>\n- * \n+ * <p>\n+ * <strong>Note that CaseInsensitiveMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n--- a/src/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/java/org/apache/commons/collections/map/CompositeMap.java\n  * Changes made to this map will actually be made on the decorated map.\n  * Add and remove operations require the use of a pluggable strategy. If no\n  * strategy is provided then add and remove are unsupported.\n+ * <p>\n+ * <strong>Note that CompositeMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n--- a/src/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/java/org/apache/commons/collections/map/DefaultedMap.java\n  * // obj == \"NULL\"\n  * </pre>\n  * After the above code is executed the map is still empty.\n- * \n+ * <p>\n+ * <strong>Note that DefaultedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ *\n  * @since Commons Collections 3.2\n  * @version $Revision: 1.7 $ $Date$\n  * \n--- a/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n  * IllegalArgumentException is thrown. This is because the put method can \n  * succeed if the mapping's key already exists in the map, so the put method\n  * is not always unsupported.\n+ * <p>\n+ * <strong>Note that FixedSizeMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n  * IllegalArgumentException is thrown. This is because the put method can \n  * succeed if the mapping's key already exists in the map, so the put method\n  * is not always unsupported.\n+ * <p>\n+ * <strong>Note that FixedSizeSortedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n  * This is because it contains no complex objects or arrays which slow the progress.\n  * <p>\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n- * \n+ * <p>\n+ * <strong>Note that Flat3Map is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n  * {@link org.apache.commons.collections.MapIterator MapIterator}\n  * functionality and many methods for subclassing.\n  * <p>\n+ * <strong>Note that HashedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n--- a/src/java/org/apache/commons/collections/map/IdentityMap.java\n+++ b/src/java/org/apache/commons/collections/map/IdentityMap.java\n  * <p>\n  * This map will violate the detail of various Map and map view contracts.\n  * As a general rule, don't compare this map to other maps.\n- * \n+ * <p>\n+ * <strong>Note that IdentityMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n  * All the available iterators can be reset back to the start by casting to\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * <p>\n- * <strong>Note</strong> as is the usual convention, this map must be protected\n- * from concurrent access by multiple threads for example by calling \n- * <code>Collections.synchronizeMap</code>. This class may throw \n+ * <strong>Note that LRUMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n  * <code>NullPointerException</code>'s when accessed by concurrent threads.\n- * \n+ *\n  * @since Commons Collections 3.0 (previously in main package v1.0)\n  * @version $Revision$ $Date$\n  *\n--- a/src/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazyMap.java\n  * After the above code is executed, <code>obj</code> will contain\n  * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n  * instance is mapped to the \"NOW\" key in the map.\n+ * <p>\n+ * <strong>Note that LazyMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazySortedMap.java\n  * After the above code is executed, <code>obj</code> will contain\n  * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n  * instance is mapped to the \"NOW\" key in the map.\n+ * <p>\n+ * <strong>Note that LazySortedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/LinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LinkedMap.java\n  * <p>\n  * The implementation is also designed to be subclassed, with lots of useful\n  * methods exposed.\n- * \n+ * <p>\n+ * <strong>Note that LinkedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n  * If an object is added to the Map for a second time, it will remain in the\n  * original position in the iteration.\n  * <p>\n+ * <strong>Note that ListOrderedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n--- a/src/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiKeyMap.java\n  *   return name;\n  * }\n  * </pre>\n+ * <p>\n+ * <strong>Note that MultiKeyMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. This class may throw exceptions when accessed\n+ * by concurrent threads without synchronization.\n  *\n  * @since Commons Collections 3.1\n  * @version $Revision$ $Date$\n--- a/src/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiValueMap.java\n  * for the values to be controlled. By default, an <code>ArrayList</code>\n  * is used, however a <code>Class</code> to instantiate may be specified,\n  * or a factory that returns a <code>Collection</code> instance.\n+ * <p>\n+ * <strong>Note that MultiValueMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. This class may throw exceptions when accessed\n+ * by concurrent threads without synchronization.\n  *\n  * @author James Carman\n  * @author Christopher Berry\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n  * <p>\n  * One usage would be to ensure that no null keys are added to the map.\n  * <pre>Map map = PredicatedSet.decorate(new HashMap(), NotNullPredicate.INSTANCE, null);</pre>\n+ * <p>\n+ * <strong>Note that PredicatedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n  * <p>\n  * One usage would be to ensure that no null keys are added to the map.\n  * <pre>SortedMap map = PredicatedSortedSet.decorate(new TreeMap(), NotNullPredicate.INSTANCE, null);</pre>\n+ * <p>\n+ * <strong>Note that PredicatedSortedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n  * <p>\n  * All the available iterators can be reset back to the start by casting to\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n+ * <p>\n+ * <strong>Note that ReferenceIdentityMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  *\n  * @see java.lang.ref.Reference\n  * \n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n  * <p>\n  * All the available iterators can be reset back to the start by casting to\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n+ * <p>\n+ * <strong>Note that ReferenceMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * NOTE: As from Commons Collections 3.1 this map extends <code>AbstractReferenceMap</code>\n  * (previously it extended AbstractMap). As a result, the implementation is now\n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n  * For example, if the transformation converts Strings to Integers, you must\n  * use the Integer form to remove objects.\n  * <p>\n+ * <strong>Note that TransformedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n+ * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n--- a/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n  * Thus objects must be removed or searched for using their transformed form.\n  * For example, if the transformation converts Strings to Integers, you must\n  * use the Integer form to remove objects.\n+ * <p>\n+ * <strong>Note that TransformedSortedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/TypedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TypedMap.java\n  * The validation of additions is performed via an instanceof test against \n  * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n+ * <p>\n+ * <strong>Note that TypedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * The returned implementation is Serializable from Commons Collections 3.1.\n  *\n--- a/src/java/org/apache/commons/collections/map/TypedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TypedSortedMap.java\n  * The validation of additions is performed via an instanceof test against \n  * a specified <code>Class</code>. If an object cannot be added to the\n  * collection, an IllegalArgumentException is thrown.\n+ * <p>\n+ * <strong>Note that TypedSortedMap is not synchronized and is not thread-safe.</strong>\n+ * If you wish to use this map from multiple threads concurrently, you must use\n+ * appropriate synchronization. The simplest approach is to wrap this map\n+ * using {@link java.util.Collections#synchronizedSortedMap}. This class may throw \n+ * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n  * The returned implementation is Serializable from Commons Collections 3.1.\n  *", "timestamp": 1132613577, "metainfo": ""}