{"sha": "ebdaf3cb688b5fc90a94eb4cf1af36e325f07ae4", "log": "Placed Abstract*ArrayList layer under Abstract*List layer.  Erased Serializable declarations from all abstract superclasses (but kept it in all concrete implementations).   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Abstract base class for lists backed by an <Code>int</Code> array.\n+ *\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractIntArrayList extends AbstractIntList {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+\n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n+    abstract public int capacity();\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>int</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n+    abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n+    abstract public void trimToSize();\n+\n+}\n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntList.java,v 1.1 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntList.java,v 1.2 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n /**\n  * Abstract base class for lists backed by an <Code>int</Code> array.\n  *\n- * @version $Revision: 1.1 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.2 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public abstract class AbstractIntList extends AbstractList implements List, Serializable {\n+public abstract class AbstractIntList extends AbstractList {\n \n     //------------------------------------------------------ Abstract Accessors\n-\n-    /**\n-     *  Returns the maximum size the list can reach before the array \n-     *  is resized.\n-     *\n-     *  @return the maximum size the list can reach before the array is resized\n-     */\n-    abstract public int capacity();\n-\n \n     /**\n      *  Returns the number of <Code>int</Code> elements currently in this\n      *  Removes all <Code>int</Code> values from this list.\n      */\n     abstract public void clear();\n-\n-    /**\n-     *  Ensures that the length of the internal <Code>int</Code> array is\n-     *  at list the given value.\n-     *\n-     *  @param mincap  the minimum capcity for this list\n-     */\n-    abstract public void ensureCapacity(int mincap);\n-\n-    /**\n-     *  Resizes the internal array such that {@link #capacity()} is equal\n-     *  to {@link #size()}.\n-     */\n-    abstract public void trimToSize();\n \n     //--------------------------------------------------------------- Modifiers\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Abstract base class for lists backed by a <Code>long</Code> array.\n+ *\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractLongArrayList extends AbstractLongList {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+    \n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n+    abstract public int capacity();\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>long</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n+    abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n+    abstract public void trimToSize();\n+\n+}\n--- a/src/java/org/apache/commons/collections/primitives/AbstractLongList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractLongList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongList.java,v 1.1 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractLongList.java,v 1.2 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n /**\n  * Abstract base class for lists backed by a <Code>long</Code> array.\n  *\n- * @version $Revision: 1.1 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.2 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public abstract class AbstractLongList extends AbstractList implements List, Serializable {\n+public abstract class AbstractLongList extends AbstractList {\n \n     //------------------------------------------------------ Abstract Accessors\n     \n-    /**\n-     *  Returns the maximum size the list can reach before the array \n-     *  is resized.\n-     *\n-     *  @return the maximum size the list can reach before the array is resized\n-     */\n-    abstract public int capacity();\n-\n     /**\n      *  Returns the number of <Code>long</Code> elements currently in this\n      *  list.\n      *  Removes all <Code>long</Code> values from this list.\n      */\n     abstract public void clear();\n-\n-    /**\n-     *  Ensures that the length of the internal <Code>long</Code> array is\n-     *  at list the given value.\n-     *\n-     *  @param mincap  the minimum capcity for this list\n-     */\n-    abstract public void ensureCapacity(int mincap);\n-\n-    /**\n-     *  Resizes the internal array such that {@link #capacity()} is equal\n-     *  to {@link #size()}.\n-     */\n-    abstract public void trimToSize();\n \n     //--------------------------------------------------------------- Modifiers\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Abstract base class for lists backed by a <Code>short</Code> array.\n+ *\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractShortArrayList extends AbstractShortList {\n+\n+    //------------------------------------------------------ Abstract Accessors\n+    \n+    /**\n+     *  Returns the maximum size the list can reach before the array \n+     *  is resized.\n+     *\n+     *  @return the maximum size the list can reach before the array is resized\n+     */\n+    abstract public int capacity();\n+\n+    //------------------------------------------------------ Abstract Modifiers\n+\n+    /**\n+     *  Ensures that the length of the internal <Code>short</Code> array is\n+     *  at list the given value.\n+     *\n+     *  @param mincap  the minimum capcity for this list\n+     */\n+    abstract public void ensureCapacity(int mincap);\n+\n+    /**\n+     *  Resizes the internal array such that {@link #capacity()} is equal\n+     *  to {@link #size()}.\n+     */\n+    abstract public void trimToSize();\n+\n+}\n--- a/src/java/org/apache/commons/collections/primitives/AbstractShortList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortList.java,v 1.1 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractShortList.java,v 1.2 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n /**\n  * Abstract base class for lists backed by a <Code>short</Code> array.\n  *\n- * @version $Revision: 1.1 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.2 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public abstract class AbstractShortList extends AbstractList implements List, Serializable {\n+public abstract class AbstractShortList extends AbstractList {\n \n     //------------------------------------------------------ Abstract Accessors\n     \n-    /**\n-     *  Returns the maximum size the list can reach before the array \n-     *  is resized.\n-     *\n-     *  @return the maximum size the list can reach before the array is resized\n-     */\n-    abstract public int capacity();\n-\n     /**\n      *  Returns the number of <Code>short</Code> elements currently in this\n      *  list.\n      *  Removes all <Code>short</Code> values from this list.\n      */\n     abstract public void clear();\n-\n-    /**\n-     *  Ensures that the length of the internal <Code>short</Code> array is\n-     *  at list the given value.\n-     *\n-     *  @param mincap  the minimum capcity for this list\n-     */\n-    abstract public void ensureCapacity(int mincap);\n-\n-    /**\n-     *  Resizes the internal array such that {@link #capacity()} is equal\n-     *  to {@link #size()}.\n-     */\n-    abstract public void trimToSize();\n \n     //--------------------------------------------------------------- Modifiers\n     \n--- a/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n /**\n  * A list of <Code>int</Code> elements.\n  *\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public class IntArrayList extends AbstractIntList implements List, Serializable {\n+public class IntArrayList extends AbstractIntArrayList implements Serializable {\n \n     //------------------------------------------------------------ Constructors  \n \n--- a/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/LongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/LongArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n /**\n  * A list of <Code>long</COde> elements.\n  *\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public class LongArrayList extends AbstractLongList implements List, Serializable {\n+public class LongArrayList extends AbstractLongArrayList implements Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ShortArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n /**\n  * A list of <Code>short</Code> elements.\n  * \n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public class ShortArrayList extends AbstractShortList implements List, Serializable {\n+public class ShortArrayList extends AbstractShortArrayList implements Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedByteArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedByteArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n  * Mutators on this class will reject any <Code>short</Code> that does not\n  * express an unsigned 8-bit value.\n  *\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public class UnsignedByteArrayList extends AbstractShortList implements List, Serializable {\n+public class UnsignedByteArrayList extends AbstractShortArrayList implements Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedIntArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedIntArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n  * Mutators on this class will reject any <Code>long</Code> that does not\n  * express an unsigned 16-bit value.\n  *\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public class UnsignedIntArrayList extends AbstractLongList implements List, Serializable {\n+public class UnsignedIntArrayList extends AbstractLongArrayList implements Serializable {\n \n     //------------------------------------------------------------ Constructors\n     \n--- a/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n+++ b/src/java/org/apache/commons/collections/primitives/UnsignedShortArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.3 2002/08/19 21:19:03 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/19 21:19:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/UnsignedShortArrayList.java,v 1.4 2002/08/21 23:54:18 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/21 23:54:18 $\n  *\n  * ====================================================================\n  *\n  * Mutators on this class will reject any <Code>int</Code> that does not\n  * express an unsigned 16-bit value.\n  *\n- * @version $Revision: 1.3 $ $Date: 2002/08/19 21:19:03 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/21 23:54:18 $\n  * @author Rodney Waldhoff \n  */\n-public class UnsignedShortArrayList extends AbstractIntList implements List, Serializable {\n+public class UnsignedShortArrayList extends AbstractIntArrayList implements Serializable {\n \n     //------------------------------------------------------------ Constructors\n     ", "timestamp": 1029974058, "metainfo": ""}