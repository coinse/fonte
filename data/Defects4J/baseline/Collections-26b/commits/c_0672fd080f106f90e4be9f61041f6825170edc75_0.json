{"sha": "0672fd080f106f90e4be9f61041f6825170edc75", "log": "Add tests to BidiMap and make part of main test suite   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.3 2003/09/29 23:24:18 matth Exp $\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowledgement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Map;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * JUnit tests.\n- * \n- * @author Matthew Hawthorne\n- * @version $Id: TestBidiMap.java,v 1.3 2003/09/29 23:24:18 matth Exp $\n- * @see org.apache.commons.collections.BidiMap\n- */\n-public abstract class TestBidiMap extends TestCase {\n-\n-    // Test data.\n-    private static final Object KEY = \"key1\";\n-    private static final Object VALUE = \"value1\";\n-\n-    private static final Object[][] entries =\n-        new Object[][] {\n-            new Object[] { KEY, VALUE },\n-            new Object[] { \"key2\", \"value2\" },\n-            new Object[] { \"key3\", \"value3\" }\n-    };\n-\n-    public TestBidiMap(String testName) {\n-        super(testName);\n-    }\n-\n-    /**\n-     * Creates an empty <code>BidiMap</code> implementation.\n-     * \n-     * @return an empty <code>BidiMap</code> implementation.\n-     */\n-    protected abstract BidiMap createBidiMap();\n-\n-    // testGetKey\n-\n-    public void testGetKey() {\n-        testGetKey(createBidiMapWithData(), entries[0][0], entries[0][1]);\n-    }\n-\n-    public void testGetKeyInverse() {\n-        testGetKey(\n-            createBidiMapWithData().inverseBidiMap(),\n-            entries[0][1],\n-            entries[0][0]);\n-    }\n-\n-    private final void testGetKey(BidiMap map, Object key, Object value) {\n-        assertEquals(\"Value not found for key.\", value, map.get(key));\n-        assertEquals(\"Key not found for value.\", key, map.getKey(value));\n-    }\n-\n-    // testInverse\n-\n-    public void testInverse() {\n-        final BidiMap map = createBidiMapWithData();\n-        final BidiMap inverseMap = map.inverseBidiMap();\n-\n-        assertSame(\n-            \"Inverse of inverse is not equal to original.\",\n-            map,\n-            inverseMap.inverseBidiMap());\n-\n-        assertEquals(\n-            \"Value not found for key.\",\n-            entries[0][0],\n-            inverseMap.get(entries[0][1]));\n-\n-        assertEquals(\n-            \"Key not found for value.\",\n-            entries[0][1],\n-            inverseMap.getKey(entries[0][0]));\n-    }\n-\n-    /**\n-     * Ensures that calling:\n-     * \n-     * <pre>\n-     * map.add(a, c)\n-     * map.add(b, c)\n-     * </pre>\n-     * \n-     * Removes the entry (a, c)\n-     */\n-    public void testAddDuplicateValue() {\n-        final BidiMap map = createBidiMap();\n-\n-        final Object key1 = \"key1\";\n-        final Object key2 = \"key2\";\n-        final Object value = \"value\";\n-\n-        map.put(key1, value);\n-        map.put(key2, value);\n-\n-        assertTrue(\n-            \"Key/value pair was not removed on duplicate value.\",\n-            !map.containsKey(key1));\n-\n-        assertEquals(\"Key/value mismatch\", key2, map.getKey(value));\n-    }\n-\n-    public void testModifyEntrySet() {\n-        modifyEntrySet(createBidiMapWithData());\n-        modifyEntrySet(createBidiMapWithData().inverseBidiMap());\n-    }\n-\n-    private final void modifyEntrySet(BidiMap map) {\n-        // Gets first entry\n-        final Map.Entry entry = (Map.Entry)map.entrySet().iterator().next();\n-\n-        // Gets key and value\n-        final Object key = entry.getKey();\n-        final Object oldValue = entry.getValue();\n-\n-        // Sets new value\n-        final Object newValue = \"newValue\";\n-        entry.setValue(newValue);\n-\n-        assertEquals(\n-            \"Modifying entrySet did not affect underlying Map.\",\n-            newValue,\n-            map.get(key));\n-\n-        assertNull(\n-            \"Modifying entrySet did not affect inverse Map.\",\n-            map.getKey(oldValue));\n-    }\n-\n-    // ----------------------------------------------------------------\n-    // Removal tests\n-    // ----------------------------------------------------------------\n-\n-    public void testClear() {\n-        BidiMap map = createBidiMapWithData();\n-        map.clear();\n-        assertTrue(\"Map was not cleared.\", map.isEmpty());\n-        assertTrue(\n-            \"Inverse map was not cleared.\",\n-            map.inverseBidiMap().isEmpty());\n-\n-        // Tests clear on inverse\n-        map = createBidiMapWithData().inverseBidiMap();\n-        map.clear();\n-        assertTrue(\"Map was not cleared.\", map.isEmpty());\n-        assertTrue(\n-            \"Inverse map was not cleared.\",\n-            map.inverseBidiMap().isEmpty());\n-\n-    }\n-\n-    public void testRemove() {\n-        remove(createBidiMapWithData(), KEY);\n-        remove(createBidiMapWithData().inverseBidiMap(), VALUE);\n-\n-        removeKey(createBidiMapWithData(), VALUE);\n-        removeKey(createBidiMapWithData().inverseBidiMap(), KEY);\n-    }\n-\n-    private final void remove(BidiMap map, Object key) {\n-        final Object value = map.remove(key);\n-        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n-        assertNull(\"Value was not removed.\", map.getKey(value));\n-    }\n-\n-    private final void removeKey(BidiMap map, Object value) {\n-        final Object key = map.removeKey(value);\n-        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n-        assertNull(\"Value was not removed.\", map.getKey(value));\n-    }\n-\n-    public void testRemoveByKeySet() {\n-        removeByKeySet(createBidiMapWithData(), KEY, VALUE);\n-        removeByKeySet(createBidiMapWithData().inverseBidiMap(), VALUE, KEY);\n-    }\n-\n-    private final void removeByKeySet(BidiMap map, Object key, Object value) {\n-        map.keySet().remove(key);\n-\n-        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n-        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n-\n-        assertTrue(\n-            \"Key was not removed from inverse map.\",\n-            !map.inverseBidiMap().containsValue(key));\n-        assertTrue(\n-            \"Value was not removed from inverse map.\",\n-            !map.inverseBidiMap().containsKey(value));\n-    }\n-\n-    public void testRemoveByEntrySet() {\n-        removeByEntrySet(createBidiMapWithData(), KEY, VALUE);\n-        removeByEntrySet(createBidiMapWithData().inverseBidiMap(), VALUE, KEY);\n-    }\n-\n-    private final void removeByEntrySet(\n-        BidiMap map,\n-        Object key,\n-        Object value) {\n-        map.entrySet().remove(new DefaultMapEntry(key, value));\n-\n-        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n-        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n-\n-        assertTrue(\n-            \"Key was not removed from inverse map.\",\n-            !map.inverseBidiMap().containsValue(key));\n-        assertTrue(\n-            \"Value was not removed from inverse map.\",\n-            !map.inverseBidiMap().containsKey(value));\n-    }\n-\n-    // ----------------------------------------------------------------\n-    // Data generation methods\n-    // ----------------------------------------------------------------\n-\n-    /**\n-     * This classes used to extend collections.TestMap, but can't anymore since \n-     * put() breaks a contract.\n-     */\n-    protected Map makeEmptyMap() {\n-        return createBidiMap();\n-    }\n-\n-    protected final BidiMap createBidiMapWithData() {\n-        final BidiMap map = createBidiMap();\n-        fillMap(map);\n-        return map;\n-    }\n-\n-    private static final void fillMap(BidiMap map) {\n-        for (int i = 0; i < entries.length; i++) {\n-            map.put(entries[i][0], entries[i][1]);\n-        }\n-    }\n-\n-} // TestBidiMap\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.4 2003/10/05 20:52:29 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Revision: 1.4 $ $Date: 2003/10/05 20:52:29 $\n+ * \n+ * @author Matthew Hawthorne\n+ */\n+public abstract class TestBidiMap extends AbstractTestMap {\n+\n+    // Test data.\n+    private static final Object KEY = \"key1\";\n+    private static final Object VALUE = \"value1\";\n+\n+    private static final Object[][] entriesKV =\n+        new Object[][] {\n+            new Object[] { KEY, VALUE },\n+            new Object[] { \"key2\", \"value2\" },\n+            new Object[] { \"key3\", \"value3\" }\n+    };\n+    private static final Object[][] entriesVK =\n+        new Object[][] {\n+            new Object[] { VALUE, KEY },\n+            new Object[] { \"value2\", \"key2\" },\n+            new Object[] { \"value3\", \"key3\" }\n+    };\n+    private final Object[][] entries;\n+\n+    public TestBidiMap(String testName) {\n+        super(testName);\n+        entries = entriesKV;\n+    }\n+\n+    public TestBidiMap() {\n+        super(\"Inverse\");\n+        entries = entriesVK;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement to create an empty <code>BidiMap</code>.\n+     * \n+     * @return an empty <code>BidiMap</code> implementation.\n+     */\n+    protected abstract BidiMap makeEmptyBidiMap();\n+\n+    /**\n+     * Override to create a full <code>BidiMap</code> other than the default.\n+     * \n+     * @return a full <code>BidiMap</code> implementation.\n+     */\n+    protected BidiMap makeFullBidiMap() {\n+        final BidiMap map = makeEmptyBidiMap();\n+        for (int i = 0; i < entries.length; i++) {\n+            map.put(entries[i][0], entries[i][1]);\n+        }\n+        return map;\n+    }\n+\n+    /**\n+     * Override to return the empty BidiMap.\n+     */\n+    protected final  Map makeEmptyMap() {\n+        return makeEmptyBidiMap();\n+    }\n+\n+    /**\n+     * Override to indicate to AbstractTestMap this is a BidiMap.\n+     */\n+    protected boolean useDuplicateValues() {\n+        return false;\n+    }\n+    \n+    /**\n+     * Override to prevent infinite recursion of tests.\n+     */\n+    protected String[] ignoredTests() {\n+        return new String[] {\"TestHashBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n+    }\n+    \n+    // BidiPut\n+    //-----------------------------------------------------------------------\n+    public void testBidiPut() {\n+        BidiMap map = makeEmptyBidiMap();\n+        BidiMap inverse = map.inverseBidiMap();\n+        assertEquals(0, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        \n+        map.put(\"A\", \"B\");\n+        assertEquals(1, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"B\", map.get(\"A\"));\n+        assertEquals(\"A\", inverse.get(\"B\"));\n+        \n+        map.put(\"A\", \"C\");\n+        assertEquals(1, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"C\", map.get(\"A\"));\n+        assertEquals(\"A\", inverse.get(\"C\"));\n+        \n+        map.put(\"B\", \"C\");\n+        assertEquals(1, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"C\", map.get(\"B\"));\n+        assertEquals(\"B\", inverse.get(\"C\"));\n+        \n+        map.put(\"E\", \"F\");\n+        assertEquals(2, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"F\", map.get(\"E\"));\n+        assertEquals(\"E\", inverse.get(\"F\"));\n+    }\n+\n+    // testGetKey\n+    //-----------------------------------------------------------------------\n+    public void testBidiGetKey() {\n+        doTestGetKey(makeFullBidiMap(), entries[0][0], entries[0][1]);\n+    }\n+\n+    public void testBidiGetKeyInverse() {\n+        doTestGetKey(\n+            makeFullBidiMap().inverseBidiMap(),\n+            entries[0][1],\n+            entries[0][0]);\n+    }\n+\n+    private final void doTestGetKey(BidiMap map, Object key, Object value) {\n+        assertEquals(\"Value not found for key.\", value, map.get(key));\n+        assertEquals(\"Key not found for value.\", key, map.getKey(value));\n+    }\n+\n+    // testInverse\n+    //-----------------------------------------------------------------------\n+    public void testBidiInverse() {\n+        final BidiMap map = makeFullBidiMap();\n+        final BidiMap inverseMap = map.inverseBidiMap();\n+\n+        assertSame(\n+            \"Inverse of inverse is not equal to original.\",\n+            map,\n+            inverseMap.inverseBidiMap());\n+\n+        assertEquals(\n+            \"Value not found for key.\",\n+            entries[0][0],\n+            inverseMap.get(entries[0][1]));\n+\n+        assertEquals(\n+            \"Key not found for value.\",\n+            entries[0][1],\n+            inverseMap.getKey(entries[0][0]));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiModifyEntrySet() {\n+        modifyEntrySet(makeFullBidiMap());\n+        modifyEntrySet(makeFullBidiMap().inverseBidiMap());\n+    }\n+\n+    private final void modifyEntrySet(BidiMap map) {\n+        // Gets first entry\n+        final Map.Entry entry = (Map.Entry)map.entrySet().iterator().next();\n+\n+        // Gets key and value\n+        final Object key = entry.getKey();\n+        final Object oldValue = entry.getValue();\n+\n+        // Sets new value\n+        final Object newValue = \"newValue\";\n+        entry.setValue(newValue);\n+\n+        assertEquals(\n+            \"Modifying entrySet did not affect underlying Map.\",\n+            newValue,\n+            map.get(key));\n+\n+        assertNull(\n+            \"Modifying entrySet did not affect inverse Map.\",\n+            map.getKey(oldValue));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiClear() {\n+        BidiMap map = makeFullBidiMap();\n+        map.clear();\n+        assertTrue(\"Map was not cleared.\", map.isEmpty());\n+        assertTrue(\"Inverse map was not cleared.\", map.inverseBidiMap().isEmpty());\n+\n+        // Tests clear on inverse\n+        map = makeFullBidiMap().inverseBidiMap();\n+        map.clear();\n+        assertTrue(\"Map was not cleared.\", map.isEmpty());\n+        assertTrue(\"Inverse map was not cleared.\", map.inverseBidiMap().isEmpty());\n+\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiRemove() {\n+        remove(makeFullBidiMap(), KEY);\n+        remove(makeFullBidiMap().inverseBidiMap(), VALUE);\n+\n+        removeKey(makeFullBidiMap(), VALUE);\n+        removeKey(makeFullBidiMap().inverseBidiMap(), KEY);\n+    }\n+\n+    private final void remove(BidiMap map, Object key) {\n+        final Object value = map.remove(key);\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertNull(\"Value was not removed.\", map.getKey(value));\n+    }\n+\n+    private final void removeKey(BidiMap map, Object value) {\n+        final Object key = map.removeKey(value);\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertNull(\"Value was not removed.\", map.getKey(value));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiRemoveByKeySet() {\n+        removeByKeySet(makeFullBidiMap(), KEY, VALUE);\n+        removeByKeySet(makeFullBidiMap().inverseBidiMap(), VALUE, KEY);\n+    }\n+\n+    private final void removeByKeySet(BidiMap map, Object key, Object value) {\n+        map.keySet().remove(key);\n+\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n+\n+        assertTrue(\n+            \"Key was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsValue(key));\n+        assertTrue(\n+            \"Value was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsKey(value));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiRemoveByEntrySet() {\n+        removeByEntrySet(makeFullBidiMap(), KEY, VALUE);\n+        removeByEntrySet(makeFullBidiMap().inverseBidiMap(), VALUE, KEY);\n+    }\n+\n+    private final void removeByEntrySet(BidiMap map, Object key, Object value) {\n+        Map temp = new HashMap();\n+        temp.put(key, value);\n+        map.entrySet().remove(temp.entrySet().iterator().next());\n+\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n+\n+        assertTrue(\n+            \"Key was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsValue(key));\n+        assertTrue(\n+            \"Value was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsKey(value));\n+    }\n+\n+    public BulkTest bulkTestInverseMap() {\n+        return new TestInverseBidiMap(this);\n+    }\n+\n+    class TestInverseBidiMap extends TestBidiMap {\n+        final TestBidiMap main;\n+        \n+        public TestInverseBidiMap(TestBidiMap main) {\n+            super();\n+            this.main = main;\n+        }\n+        protected BidiMap makeEmptyBidiMap() {\n+            return main.makeEmptyBidiMap().inverseBidiMap();\n+        }\n+        \n+        protected BidiMap makeFullBidiMap() {\n+            return main.makeFullBidiMap().inverseBidiMap();\n+        }\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/TestHashBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestHashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestHashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestHashBidiMap.java,v 1.2 2003/10/05 20:52:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n package org.apache.commons.collections;\n \n import junit.framework.Test;\n-import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n /**\n  * JUnit tests.\n  * \n+ * @version $Revision: 1.2 $ $Date: 2003/10/05 20:52:29 $\n+ * \n  * @author Matthew Hawthorne\n- * @version $Id: TestHashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n- * @see org.apache.commons.collections.HashBidiMap\n  */\n public class TestHashBidiMap extends TestBidiMap {\n \n     }\n     \n     public static Test suite() {\n-        return new TestSuite(TestHashBidiMap.class);\n+        return BulkTest.makeSuite(TestHashBidiMap.class);\n     }\n \n     public TestHashBidiMap(String testName) {\n         super(testName);\n     }\n \n-    protected BidiMap createBidiMap() {\n+    protected BidiMap makeEmptyBidiMap() {\n         return new HashBidiMap();\n     }\n \n-} // TestHashBidiMap\n+}", "timestamp": 1065387149, "metainfo": ""}