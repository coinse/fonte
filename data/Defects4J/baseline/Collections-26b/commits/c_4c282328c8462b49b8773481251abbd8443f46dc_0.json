{"sha": "4c282328c8462b49b8773481251abbd8443f46dc", "log": "Add DefaultedMap that returns a default value if the key is not in the map RFE 30911, by Rafael U. C. Afonso  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/DefaultedMap.java\n+/*\n+ *  Copyright 2005 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.functors.ConstantTransformer;\n+import org.apache.commons.collections.functors.FactoryTransformer;\n+\n+/**\n+ * Decorates another <code>Map</code> returning a default value if the map\n+ * does not contain the requested key.\n+ * <p>\n+ * When the {@link #get(Object)} method is called with a key that does not\n+ * exist in the map, this map will return the default value specified in\n+ * the constructor/factory. Only the get method is altered, so the\n+ * {@link Map#containsKey(Object)} can be used to determine if a key really\n+ * is in the map or not.\n+ * <p>\n+ * The defaulted value is not added to the map.\n+ * Compare this behaviour with {@link LazyMap}, which does add the value\n+ * to the map (via a Transformer).\n+ * <p>\n+ * For instance:\n+ * <pre>\n+ * Map map = new DefaultedMap(\"NULL\");\n+ * Object obj = map.get(\"Surname\");\n+ * // obj == \"NULL\"\n+ * </pre>\n+ * After the above code is executed the map is still empty.\n+ * \n+ * @since Commons Collections 3.2\n+ * @version $Revision: 1.7 $ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ * @author Rafael U.C. Afonso\n+ * @see LazyMap\n+ */\n+public class DefaultedMap\n+        extends AbstractMapDecorator\n+        implements Map, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 19698628745827L;\n+\n+    /** The transformer to use if the map does not contain a key */\n+    protected final Object value;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Factory method to create a defaulting map.\n+     * <p>\n+     * The value specified is returned when a missing key is found.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param defaultValue  the default value to return when the key is not found\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map, Object defaultValue) {\n+        if (defaultValue instanceof Transformer) {\n+            defaultValue = ConstantTransformer.getInstance(defaultValue);\n+        }\n+        return new DefaultedMap(map, defaultValue);\n+    }\n+\n+    /**\n+     * Factory method to create a defaulting map.\n+     * <p>\n+     * The factory specified is called when a missing key is found.\n+     * The result will be returned as the result of the map get(key) method.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static Map decorate(Map map, Factory factory) {\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"Factory must not be null\");\n+        }\n+        return new DefaultedMap(map, FactoryTransformer.getInstance(factory));\n+    }\n+\n+    /**\n+     * Factory method to create a defaulting map.\n+     * <p>\n+     * The transformer specified is called when a missing key is found.\n+     * The key is passed to the transformer as the input, and the result\n+     * will be returned as the result of the map get(key) method.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static Map decorate(Map map, Transformer factory) {\n+        if (factory == null) {\n+           throw new IllegalArgumentException(\"Transformer must not be null\");\n+       }\n+       return new DefaultedMap(map, factory);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a new empty <code>DefaultedMap</code> that decorates\n+     * a <code>HashMap</code>.\n+     * <p>\n+     * The object passed in will be returned by the map whenever an\n+     * unknown key is requested.\n+     * \n+     * @param defaultValue  the default value to return when the key is not found\n+     */\n+    public DefaultedMap(Object defaultValue) {\n+        super(new HashMap());\n+        if (defaultValue instanceof Transformer) {\n+            defaultValue = ConstantTransformer.getInstance(defaultValue);\n+        }\n+        this.value = defaultValue;\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param value  the value to use\n+     * @throws IllegalArgumentException if map or transformer is null\n+     */\n+    protected DefaultedMap(Map map, Object value) {\n+        super(map);\n+        this.value = value;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map) in.readObject();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get(Object key) {\n+        // create value for key if key is not currently in the map\n+        if (map.containsKey(key) == false) {\n+            if (value instanceof Transformer) {\n+                return ((Transformer) value).transform(key);\n+            }\n+            return value;\n+        }\n+        return map.get(key);\n+    }\n+\n+    // no need to wrap keySet, entrySet or values as they are views of\n+    // existing map entries - you can't do a map-style get on them.\n+}\n--- a/src/test/org/apache/commons/collections/map/TestAll.java\n+++ b/src/test/org/apache/commons/collections/map/TestAll.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         \n         suite.addTest(TestCaseInsensitiveMap.suite());\n         suite.addTest(TestCompositeMap.suite());\n+        suite.addTest(TestDefaultedMap.suite());\n         suite.addTest(TestFlat3Map.suite());\n         suite.addTest(TestHashedMap.suite());\n         suite.addTest(TestIdentityMap.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestDefaultedMap.java\n+/*\n+ *  Copyright 2005 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.FactoryUtils;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.functors.ConstantFactory;\n+\n+/**\n+ * Extension of {@link TestMap} for exercising the \n+ * {@link DefaultedMap} implementation.\n+ *\n+ * @since Commons Collections 3.2\n+ * @version $Revision: 155406 $ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestDefaultedMap extends AbstractTestMap {\n+\n+    protected static final Factory nullFactory = FactoryUtils.nullFactory();\n+\n+    public TestDefaultedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestDefaultedMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestDefaultedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public Map makeEmptyMap() {\n+        return DefaultedMap.decorate(new HashMap(), nullFactory);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testMapGet() {\n+        Map map = new DefaultedMap(\"NULL\");\n+        \n+        assertEquals(0, map.size());\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+        \n+        map.put(\"Key\", \"Value\");\n+        assertEquals(1, map.size());\n+        assertEquals(true, map.containsKey(\"Key\"));\n+        assertEquals(\"Value\", map.get(\"Key\"));\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+    }\n+\n+    public void testMapGet2() {\n+        HashMap base = new HashMap();\n+        Map map = DefaultedMap.decorate(base, \"NULL\");\n+        \n+        assertEquals(0, map.size());\n+        assertEquals(0, base.size());\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+        \n+        map.put(\"Key\", \"Value\");\n+        assertEquals(1, map.size());\n+        assertEquals(1, base.size());\n+        assertEquals(true, map.containsKey(\"Key\"));\n+        assertEquals(\"Value\", map.get(\"Key\"));\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+    }\n+\n+    public void testMapGet3() {\n+        HashMap base = new HashMap();\n+        Map map = DefaultedMap.decorate(base, ConstantFactory.getInstance(\"NULL\"));\n+        \n+        assertEquals(0, map.size());\n+        assertEquals(0, base.size());\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+        \n+        map.put(\"Key\", \"Value\");\n+        assertEquals(1, map.size());\n+        assertEquals(1, base.size());\n+        assertEquals(true, map.containsKey(\"Key\"));\n+        assertEquals(\"Value\", map.get(\"Key\"));\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+    }\n+\n+    public void testMapGet4() {\n+        HashMap base = new HashMap();\n+        Map map = DefaultedMap.decorate(base, new Transformer() {\n+            public Object transform(Object input) {\n+                if (input instanceof String) {\n+                    return \"NULL\";\n+                }\n+                return \"NULL_OBJECT\";\n+            }\n+        });\n+        \n+        assertEquals(0, map.size());\n+        assertEquals(0, base.size());\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+        assertEquals(\"NULL_OBJECT\", map.get(new Integer(0)));\n+        \n+        map.put(\"Key\", \"Value\");\n+        assertEquals(1, map.size());\n+        assertEquals(1, base.size());\n+        assertEquals(true, map.containsKey(\"Key\"));\n+        assertEquals(\"Value\", map.get(\"Key\"));\n+        assertEquals(false, map.containsKey(\"NotInMap\"));\n+        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n+        assertEquals(\"NULL_OBJECT\", map.get(new Integer(0)));\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.2\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"c:/commons/collections/data/test/DefaultedMap.emptyCollection.version3.2.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) map,\n+//            \"c:/commons/collections/data/test/DefaultedMap.fullCollection.version3.2.obj\");\n+//    }\n+\n+}", "timestamp": 1111532030, "metainfo": ""}