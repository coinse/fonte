{"sha": "1c4942acca1441065ccb714de38a05eb71db81dd", "log": "Add ObservableSortedBag/Set   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.13 2003/09/21 16:26:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.14 2003/09/28 21:54:35 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.UnmodifiableSortedBag;\n import org.apache.commons.collections.observed.ModificationListener;\n import org.apache.commons.collections.observed.ObservableBag;\n+import org.apache.commons.collections.observed.ObservableSortedBag;\n \n /**\n  * Provides utility methods and decorators for\n  * {@link Bag} and {@link SortedBag} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.13 $ $Date: 2003/09/21 16:26:08 $\n+ * @version $Revision: 1.14 $ $Date: 2003/09/28 21:54:35 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     public static SortedBag transformedSortedBag(SortedBag bag, Transformer transformer) {\n         return TransformedSortedBag.decorate(bag, transformer);\n     }\n+    \n+    /**\n+     * Returns an observable sorted bag where changes are notified to listeners.\n+     * <p>\n+     * This method creates an observable sorted bag and attaches the specified listener.\n+     * If more than one listener or other complex setup is required then the\n+     * ObservableSortedBag class should be accessed directly.\n+     *\n+     * @param bag  the bag to decorate, must not be null\n+     * @param listener  bag listener, must not be null\n+     * @return the observed bag\n+     * @throws IllegalArgumentException if the bag or listener is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableSortedBag observableSortedBag(SortedBag bag, ModificationListener listener) {\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Listener must not be null\");\n+        }\n+        return ObservableSortedBag.decorate(bag, listener);\n+    }\n         \n }\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.17 2003/09/21 16:26:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.18 2003/09/28 21:54:35 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.UnmodifiableSortedSet;\n import org.apache.commons.collections.observed.ModificationListener;\n import org.apache.commons.collections.observed.ObservableSet;\n+import org.apache.commons.collections.observed.ObservableSortedSet;\n \n /**\n  * Provides utility methods and decorators for\n  * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.17 $ $Date: 2003/09/21 16:26:08 $\n+ * @version $Revision: 1.18 $ $Date: 2003/09/28 21:54:35 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n         return TransformedSortedSet.decorate(set, transformer);\n     }\n     \n+    /**\n+     * Returns an observable sorted set where changes are notified to listeners.\n+     * <p>\n+     * This method creates an observable set and attaches the specified listener.\n+     * If more than one listener or other complex setup is required then the\n+     * ObservableSortedSet class should be accessed directly.\n+     *\n+     * @param set  the set to decorate, must not be null\n+     * @param listener  set listener, must not be null\n+     * @return the observed set\n+     * @throws IllegalArgumentException if the set or listener is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableSortedSet observableSortedSet(SortedSet set, ModificationListener listener) {\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Listener must not be null\");\n+        }\n+        return ObservableSortedSet.decorate(set, listener);\n+    }\n+    \n }", "timestamp": 1064786075, "metainfo": ""}