{"sha": "45240293533636c8603532a3ac8b05ecc7df03e6", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471166 | scolebourne | 2006-11-04 03:33:22 -0800 (Sat, 04 Nov 2006) | 1 line          Removed Typed* containers such as TypedList and TypedMap as generics now provides type safety     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n package org.apache.commons.collections;\n \n import org.apache.commons.collections.buffer.BlockingBuffer;\n+import org.apache.commons.collections.buffer.BoundedBuffer;\n import org.apache.commons.collections.buffer.PredicatedBuffer;\n import org.apache.commons.collections.buffer.SynchronizedBuffer;\n import org.apache.commons.collections.buffer.TransformedBuffer;\n-import org.apache.commons.collections.buffer.TypedBuffer;\n import org.apache.commons.collections.buffer.UnmodifiableBuffer;\n-import org.apache.commons.collections.buffer.BoundedBuffer;\n \n /**\n  * Provides utility methods and decorators for {@link Buffer} instances.\n     /**\n      * An empty unmodifiable buffer.\n      */\n-    public static final Buffer EMPTY_BUFFER = UnmodifiableBuffer.decorate(new ArrayStack(1));\n+    public static final Buffer<Object> EMPTY_BUFFER = UnmodifiableBuffer.decorate(new ArrayStack<Object>(1));\n \n     /**\n      * <code>BufferUtils</code> should not normally be instantiated.\n      * @return a synchronized buffer backed by that buffer\n      * @throws IllegalArgumentException  if the Buffer is null\n      */\n-    public static Buffer synchronizedBuffer(Buffer buffer) {\n+    public static <E> Buffer<E> synchronizedBuffer(Buffer<E> buffer) {\n         return SynchronizedBuffer.decorate(buffer);\n     }\n \n      * @return a blocking buffer backed by that buffer\n      * @throws IllegalArgumentException  if the Buffer is null\n      */\n-    public static Buffer blockingBuffer(Buffer buffer) {\n+    public static <E> Buffer<E> blockingBuffer(Buffer<E> buffer) {\n         return BlockingBuffer.decorate(buffer);\n     }\n \n      * @throws IllegalArgumentException  if the Buffer is null\n      * @since Commons Collections 3.2\n      */\n-    public static Buffer blockingBuffer(Buffer buffer, long timeoutMillis) {\n+    public static <E> Buffer<E> blockingBuffer(Buffer<E> buffer, long timeoutMillis) {\n         return BlockingBuffer.decorate(buffer, timeoutMillis);\n     }\n \n      * @throws IllegalArgumentException if the given buffer is null\n      * @since Commons Collections 3.2\n      */\n-    public static Buffer boundedBuffer(Buffer buffer, int maximumSize) {\n+    public static <E> Buffer<E> boundedBuffer(Buffer<E> buffer, int maximumSize) {\n         return BoundedBuffer.decorate(buffer, maximumSize);\n     }\n \n      * @throws IllegalArgumentException if the given buffer is null\n      * @since Commons Collections 3.2\n      */\n-    public static Buffer boundedBuffer(Buffer buffer, int maximumSize, long timeoutMillis) {\n+    public static <E> Buffer<E> boundedBuffer(Buffer<E> buffer, int maximumSize, long timeoutMillis) {\n         return BoundedBuffer.decorate(buffer, maximumSize, timeoutMillis);\n     }\n \n      * @return an unmodifiable buffer backed by that buffer\n      * @throws IllegalArgumentException  if the Buffer is null\n      */\n-    public static Buffer unmodifiableBuffer(Buffer buffer) {\n+    public static <E> Buffer<E> unmodifiableBuffer(Buffer<E> buffer) {\n         return UnmodifiableBuffer.decorate(buffer);\n     }\n \n      * @return a predicated buffer\n      * @throws IllegalArgumentException  if the Buffer or Predicate is null\n      */\n-    public static Buffer predicatedBuffer(Buffer buffer, Predicate predicate) {\n+    public static <E> Buffer<E> predicatedBuffer(Buffer<E> buffer, Predicate<? super E> predicate) {\n         return PredicatedBuffer.decorate(buffer, predicate);\n-    }\n-\n-    /**\n-     * Returns a typed buffer backed by the given buffer.\n-     * <p>\n-     * Only elements of the specified type can be added to the buffer.\n-     *\n-     * @param buffer  the buffer to predicate, must not be null\n-     * @param type  the type to allow into the buffer, must not be null\n-     * @return a typed buffer\n-     * @throws IllegalArgumentException  if the buffer or type is null\n-     */\n-    public static Buffer typedBuffer(Buffer buffer, Class type) {\n-        return TypedBuffer.decorate(buffer, type);\n     }\n \n     /**\n      * @return a transformed buffer backed by the given buffer\n      * @throws IllegalArgumentException  if the Buffer or Transformer is null\n      */\n-    public static Buffer transformedBuffer(Buffer buffer, Transformer transformer) {\n+    public static <E> Buffer<E> transformedBuffer(Buffer<E> buffer, Transformer<? super E, ? extends E> transformer) {\n         return TransformedBuffer.decorate(buffer, transformer);\n     }\n \n+    /**\n+     * Get an empty <code>Buffer</code>.\n+     * @param <E>\n+     * @return Buffer<E>\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <E> Buffer<E> emptyBuffer() {\n+        return (Buffer<E>) EMPTY_BUFFER;\n+    }\n }", "timestamp": 1252994176, "metainfo": ""}