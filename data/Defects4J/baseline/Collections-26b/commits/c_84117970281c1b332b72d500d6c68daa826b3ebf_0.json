{"sha": "84117970281c1b332b72d500d6c68daa826b3ebf", "log": "[COLLECTIONS-312] use known collection size when creating arrays / lists.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n \n         @Override\n         public Object[] toArray() {\n-            return toArray(new Object[0]);\n+            return toArray(new Object[size()]);\n         }\n \n         @Override\n         public <T> T[] toArray(final T[] arr) {\n             // special implementation to handle disappearing entries\n-            final ArrayList<Map.Entry<K, V>> list = new ArrayList<Map.Entry<K, V>>();\n+            final ArrayList<Map.Entry<K, V>> list = new ArrayList<Map.Entry<K, V>>(size());\n             for (final Map.Entry<K, V> entry : this) {\n                 list.add(new DefaultMapEntry<K, V>(entry));\n             }\n \n         @Override\n         public Object[] toArray() {\n-            return toArray(new Object[0]);\n+            return toArray(new Object[size()]);\n         }\n \n         @Override\n         public <T> T[] toArray(final T[] arr) {\n             // special implementation to handle disappearing keys\n-            final List<K> list = new ArrayList<K>(parent.size());\n+            final List<K> list = new ArrayList<K>(size());\n             for (final K key : this) {\n                 list.add(key);\n             }\n \n         @Override\n         public Object[] toArray() {\n-            return toArray(new Object[0]);\n+            return toArray(new Object[size()]);\n         }\n \n         @Override\n         public <T> T[] toArray(final T[] arr) {\n             // special implementation to handle disappearing values\n-            final List<V> list = new ArrayList<V>(parent.size());\n+            final List<V> list = new ArrayList<V>(size());\n             for (final V value : this) {\n                 list.add(value);\n             }", "timestamp": 1360249941, "metainfo": ""}