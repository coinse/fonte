{"sha": "fcf4320023d468df672d9773c3a2755b7857b296", "log": "Make fields private (and final) if possible  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bag/SynchronizedBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/SynchronizedBag.java\n      * @return the decorated bag\n      */\n     protected Bag<E> getBag() {\n-        return (Bag<E>) collection;\n+        return (Bag<E>) decorated();\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bag/SynchronizedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/SynchronizedSortedBag.java\n      * @return the decorated bag\n      */\n     protected SortedBag<E> getSortedBag() {\n-        return (SortedBag<E>) collection;\n+        return (SortedBag<E>) decorated();\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap.java\n     private static final long serialVersionUID = 721969328361809L;\n \n     /** The key comparator to use */\n-    protected final Comparator<? super K> comparator;\n+    private final Comparator<? super K> comparator;\n \n     /** The value comparator to use */\n-    protected final Comparator<? super V> valueComparator;\n+    private final Comparator<? super V> valueComparator;\n     \n     /**\n      * Creates an empty <code>DualTreeBidiMap</code>\n--- a/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n     abstract class ViewIterator {\n \n         /** Whether to return KEY or VALUE order. */\n-        protected final DataElement orderType;\n+        private final DataElement orderType;\n         /** The last node returned by the iterator. */\n-        protected Node<K, V> lastReturnedNode;\n+        Node<K, V> lastReturnedNode;\n         /** The next node to be returned by the iterator. */\n-        protected Node<K, V> nextNode;\n+        private Node<K, V> nextNode;\n         /** The previous node in the sequence returned by the iterator. */\n-        protected Node<K, V> previousNode;\n+        private Node<K, V> previousNode;\n         /** The modification count. */\n         private int expectedModifications;\n \n--- a/src/main/java/org/apache/commons/collections4/collection/CompositeCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/CompositeCollection.java\n     private static final long serialVersionUID = 8417515734108306801L;\n \n     /** CollectionMutator to handle changes to the collection */\n-    protected CollectionMutator<E> mutator;\n+    private CollectionMutator<E> mutator;\n \n     /** Collections in the composite */\n-    protected List<Collection<E>> all = new ArrayList<Collection<E>>();\n+    private final List<Collection<E>> all = new ArrayList<Collection<E>>();\n \n     /**\n      * Create an empty CompositeCollection.\n--- a/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/SynchronizedCollection.java\n     private static final long serialVersionUID = 2412805092710877986L;\n \n     /** The collection to decorate */\n-    protected final Collection<E> collection;\n+    private final Collection<E> collection;\n     /** The object to lock on, needed for List/SortedSet views */\n     protected final Object lock;\n \n--- a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n             if (coll instanceof AbstractCollectionDecorator) {\n                 coll = ((AbstractCollectionDecorator<E>) coll).collection;\n             } else if (coll instanceof SynchronizedCollection) {\n-                coll = ((SynchronizedCollection<E>) coll).collection;\n+                coll = ((SynchronizedCollection<E>) coll).decorated();\n             }\n         }\n \n--- a/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java\n     private static final long serialVersionUID = -721644942746081630L;\n \n     /** The list of comparators in the chain. */\n-    protected List<Comparator<E>> comparatorChain = null;\n+    private final List<Comparator<E>> comparatorChain;\n     /** Order - false (clear) = ascend; true (set) = descend. */\n-    protected BitSet orderingBits = null;\n+    private BitSet orderingBits = null;\n    /** Whether the chain has been \"locked\". */\n-    protected boolean isLocked = false;\n+    private boolean isLocked = false;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/comparators/TransformingComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/TransformingComparator.java\n     private static final long serialVersionUID = 3456940356043606220L;\n \n     /** The decorated comparator. */\n-    protected final Comparator<O> decorated;\n+    private final Comparator<O> decorated;\n     /** The transformer being used. */    \n-    protected final Transformer<? super I, ? extends O> transformer;\n+    private final Transformer<? super I, ? extends O> transformer;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java\n public class AbstractListIteratorDecorator<E> implements ListIterator<E> {\n \n     /** The iterator being decorated */\n-    protected final ListIterator<E> iterator;\n+    private final ListIterator<E> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java\n public class AbstractMapIteratorDecorator<K, V> implements MapIterator<K, V> {\n \n     /** The iterator being decorated */\n-    protected final MapIterator<K, V> iterator;\n+    private final MapIterator<K, V> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java\n public class AbstractOrderedMapIteratorDecorator<K, V> implements OrderedMapIterator<K, V> {\n \n     /** The iterator being decorated */\n-    protected final OrderedMapIterator<K, V> iterator;\n+    private final OrderedMapIterator<K, V> iterator;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java\n public abstract class AbstractUntypedIteratorDecorator<I, O> implements Iterator<O> {\n \n     /** The iterator being decorated */\n-    protected final Iterator<I> iterator;\n+    private final Iterator<I> iterator;\n \n     /**\n      * Create a new AbstractUntypedIteratorDecorator.\n--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java\n public class IteratorChain<E> implements Iterator<E> {\n \n     /** The chain of iterators */\n-    protected final List<Iterator<? extends E>> iteratorChain = new ArrayList<Iterator<? extends E>>();\n+    private final List<Iterator<? extends E>> iteratorChain = new ArrayList<Iterator<? extends E>>();\n \n     /** The index of the current iterator */\n-    protected int currentIteratorIndex = 0;\n+    private int currentIteratorIndex = 0;\n \n     /** The current iterator */\n-    protected Iterator<? extends E> currentIterator = null;\n+    private Iterator<? extends E> currentIterator = null;\n \n     /**\n      * The \"last used\" Iterator is the Iterator upon which next() or hasNext()\n      * was most recently called used for the remove() operation only\n      */\n-    protected Iterator<? extends E> lastUsedIterator = null;\n+    private Iterator<? extends E> lastUsedIterator = null;\n \n     /**\n      * ComparatorChain is \"locked\" after the first time compare(Object,Object)\n      * is called\n      */\n-    protected boolean isLocked = false;\n+    private boolean isLocked = false;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java\n     /** the original NodeList instance */\n     private final NodeList nodeList;\n     /** The current iterator index */\n-    protected int index = 0;\n+    private int index = 0;\n \n     /**\n      * Convenience constructor, which creates a new NodeListIterator from \n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java\n      * has yet been invoked. <code>lastItemIndex</code> is used to to implement the\n      * {@link #set} method.\n      */\n-    protected int lastItemIndex = -1;\n+    private int lastItemIndex = -1;\n \n     /**\n      * Constructor for use with <code>setArray</code>.\n--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java\n public abstract class AbstractMapEntryDecorator<K, V> implements Map.Entry<K, V>, KeyValue<K, V> {\n     \n     /** The <code>Map.Entry</code> to decorate */\n-    protected final Map.Entry<K, V> entry;\n+    private final Map.Entry<K, V> entry;\n \n     /**\n      * Constructor that wraps (not copies).\n--- a/src/main/java/org/apache/commons/collections4/list/PredicatedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/PredicatedList.java\n         @Override\n         public void add(final E object) {\n             validate(object);\n-            iterator.add(object);\n+            getListIterator().add(object);\n         }\n         \n         @Override\n         public void set(final E object) {\n             validate(object);\n-            iterator.set(object);\n+            getListIterator().set(object);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n         @Override\n         public void add(E object) {\n             object = transform(object);\n-            iterator.add(object);\n+            getListIterator().add(object);\n         }\n \n         @Override\n         public void set(E object) {\n             object = transform(object);\n-            iterator.set(object);\n+            getListIterator().set(object);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java\n \n         @Override\n         public Map.Entry<K, V> next() {\n-            final Map.Entry<K, V> entry = iterator.next();\n+            final Map.Entry<K, V> entry = getIterator().next();\n             return new MapEntry(entry, parent);\n         }\n     }\n         @Override\n         public V setValue(V value) {\n             value = parent.checkSetValue(value);\n-            return entry.setValue(value);\n+            return getMapEntry().setValue(value);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java\n+++ b/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java\n \n         @Override\n         public Map.Entry<K, V> next() {\n-            return new UnmodifiableEntry(iterator.next());\n+            return new UnmodifiableEntry(getIterator().next());\n         }\n \n         @Override\n--- a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n \n         @Override\n         public E next() {\n-            last = iterator.next();\n+            last = getIterator().next();\n             return last;\n         }\n \n         @Override\n         public void remove() {\n             set.remove(last);\n-            iterator.remove();\n+            getIterator().remove();\n             last = null;\n         }\n \n         public boolean hasPrevious() {\n-            return ((ListIterator<E>) iterator).hasPrevious();\n+            return ((ListIterator<E>) getIterator()).hasPrevious();\n         }\n \n         public E previous() {\n-            last = ((ListIterator<E>) iterator).previous();\n+            last = ((ListIterator<E>) getIterator()).previous();\n             return last;\n         }\n     }", "timestamp": 1367276330, "metainfo": ""}