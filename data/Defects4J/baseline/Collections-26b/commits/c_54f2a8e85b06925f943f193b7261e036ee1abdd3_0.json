{"sha": "54f2a8e85b06925f943f193b7261e036ee1abdd3", "log": "Adding SetList decorator from bug #22826   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/SetList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SetList.java,v 1.1 2003/10/02 22:34:44 matth Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * SetList combines the <code>List</code> and <code>Set</code> interfaces\n+ * in one implementation.\n+ * <p>\n+ * The <code>List</code> interface makes certain assumptions/requirements.\n+ * This implementation breaks these in certain ways, but this is merely the\n+ * result of rejecting duplicates.\n+ * Each violation is explained in the method, but it should not affect you.\n+ * <p>\n+ * The {@link org.apache.commons.collections.decorators.OrderedSet OrderedSet}\n+ * class provides an alternative approach, by wrapping an existing Set and\n+ * retaining insertion order in the iterator. This class offers the <code>List</code>\n+ * interface implementation as well.\n+ * <p>\n+ * If the <code>Set</code> aspects are important to you (fast add/contains/remove)\n+ * then <code>OrderedSet</code> is a better choice.\n+ * This implementation is based solely on <code>ArrayList</code>, and so has\n+ * slow add/contains/remove operations for all except small lists.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/02 22:34:44 $\n+ * \n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ */\n+public class SetList extends AbstractList {\n+\n+    /**\n+     * Delegate list.\n+     */\n+    private final List delegate = new ArrayList();\n+\n+    /**\n+     * Helps to maintain uniqueness.\n+     */\n+    private final Set set = new HashSet();\n+\n+    /**\n+     * Factory method to create a SetList.\n+     * @param list the list to decorate\n+     */\n+    public static SetList decorate(List list) {\n+        return new SetList(list);\n+    }\n+\n+    /**\n+     * Contructs an new list copying the specified elements.\n+     * @param coll  a collection to copy\n+     */\n+    protected SetList(List list) {\n+        addAll(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds an element to the list if it is not already present.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface requires that this method returns\n+     * <code>true</code> always. However this class may return <code>false</code>\n+     * because of the <code>Set</code> behaviour.\n+     * \n+     * @param object the object to add\n+     * @return true if object was added\n+     */\n+    public boolean add(Object object) {\n+        // gets initial size\n+        final int sizeBefore = size();\n+\n+        // adds element if unique\n+        add(size(), object);\n+\n+        // compares sizes to detect if collection changed\n+        return (sizeBefore != size());\n+    }\n+\n+    /**\n+     * Adds an element to a specific index in the list if it is not already present.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface makes the assumption that the element is\n+     * always inserted. This may not happen with this implementation.\n+     * \n+     * @param index  the index to insert at\n+     * @param object  the object to add\n+     */\n+    public void add(int index, Object object) {\n+        // Adds element if it is not contained already\n+        if (!set.contains(object)) {\n+            delegate.add(index, object);\n+            set.add(object);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a collection of objects to the end of the list avoiding duplicates.\n+     * <p>\n+     * Only elements that are not already in this list will be added, and\n+     * duplicates from the specified collection will be ignored.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface makes the assumption that the elements\n+     * are always inserted. This may not happen with this implementation.\n+     * \n+     * @param index  the index to insert at\n+     * @param coll  the collection to add in iterator order\n+     * @return true if this collection changed\n+     */\n+    public boolean addAll(int index, Collection coll) {\n+        // gets initial size\n+        final int sizeBefore = size();\n+\n+        // adds all elements\n+        for (final Iterator it = coll.iterator(); it.hasNext();) {\n+            add(it.next());\n+        }\n+\n+        // compares sizes to detect if collection changed\n+        return sizeBefore != size();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the value at the specified index avoiding duplicates.\n+     * <p>\n+     * The object is set into the specified index.\n+     * Afterwards, any previous duplicate is removed\n+     * If the object is not already in the list then a normal set occurs.\n+     * If it is present, then the old version is removed and re-added at this index\n+     * \n+     * @param index  the index to insert at\n+     * @param object  the object to set\n+     * @return the previous object\n+     */\n+    public Object set(int index, Object object) {\n+        int pos = indexOf(object);\n+        Object result = delegate.set(index, object);\n+        if (pos == -1 || pos == index) {\n+            return result;\n+        }\n+        return remove(pos);\n+    }\n+\n+    public Object get(int index) {\n+        return delegate.get(index);\n+    }\n+\n+    public int size() {\n+        return delegate.size();\n+    }\n+\n+    public Object remove(int index) {\n+        return delegate.remove(index);\n+    }\n+\n+    public void clear() {\n+        delegate.clear();\n+        set.clear();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.15 2003/09/20 16:57:20 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.16 2003/10/02 22:34:44 matth Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.15 $ $Date: 2003/09/20 16:57:20 $\n+ * @version $Revision: 1.16 $ $Date: 2003/10/02 22:34:44 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestLazySortedMap.suite());\n         \n         suite.addTest(TestOrderedSet.suite());\n+        suite.addTest(TestSetList.suite());\n         \n         suite.addTest(TestTransformedBag.suite());\n         suite.addTest(TestTransformedBuffer.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestSetList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestSetList.java,v 1.1 2003/10/02 22:34:44 matth Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.ListIterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/02 22:34:44 $\n+ * \n+ * @author Matthew Hawthorne\n+ */\n+public class TestSetList extends TestCase {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestSetList.class);\n+    }\n+\n+    public TestSetList(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        final SetList lset =\n+            new SetList(\n+                Arrays.asList(new Integer[] { new Integer(1), new Integer(1)}));\n+\n+        assertEquals(\"Duplicate element was added.\", 1, lset.size());\n+    }\n+\n+    public void testAdd() {\n+        final SetList lset = new SetList(new ArrayList());\n+\n+        // Duplicate element\n+        final Object obj = new Integer(1);\n+        lset.add(obj);\n+        lset.add(obj);\n+        assertEquals(\"Duplicate element was added.\", 1, lset.size());\n+\n+        // Unique element\n+        lset.add(new Integer(2));\n+        assertEquals(\"Unique element was not added.\", 2, lset.size());\n+    }\n+\n+    public void testAddAll() {\n+        final SetList lset = new SetList(new ArrayList());\n+\n+        lset.addAll(\n+            Arrays.asList(new Integer[] { new Integer(1), new Integer(1)}));\n+\n+        assertEquals(\"Duplicate element was added.\", 1, lset.size());\n+    }\n+\n+    public void testSet() {\n+        final SetList lset = new SetList(new ArrayList());\n+\n+        // Duplicate element\n+        final Object obj1 = new Integer(1);\n+        final Object obj2 = new Integer(2);\n+        final Object obj3 = new Integer(3);\n+\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj1);\n+        assertEquals(2, lset.size());\n+        assertSame(obj1, lset.get(0));\n+        assertSame(obj2, lset.get(1));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj2);\n+        assertEquals(1, lset.size());\n+        assertSame(obj2, lset.get(0));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj3);\n+        assertEquals(2, lset.size());\n+        assertSame(obj3, lset.get(0));\n+        assertSame(obj2, lset.get(1));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(1, obj1);\n+        assertEquals(1, lset.size());\n+        assertSame(obj1, lset.get(0));\n+    }\n+\n+    public void testListIterator() {\n+        final SetList lset = new SetList(new ArrayList());\n+\n+        final Object obj1 = new Integer(1);\n+        final Object obj2 = new Integer(2);\n+        lset.add(obj1);\n+        lset.add(obj2);\n+\n+        // Attempts to add a duplicate object\n+        for (final ListIterator it = lset.listIterator(); it.hasNext();) {\n+            it.next();\n+\n+            if (!it.hasNext()) {\n+                it.add(obj1);\n+                break;\n+            }\n+        }\n+\n+        assertEquals(\"Duplicate element was added\", 2, lset.size());\n+    }\n+\n+}", "timestamp": 1065134084, "metainfo": ""}