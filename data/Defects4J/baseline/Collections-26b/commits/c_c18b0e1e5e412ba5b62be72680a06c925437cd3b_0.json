{"sha": "c18b0e1e5e412ba5b62be72680a06c925437cd3b", "log": "Make MapUtils threadsafe and remove synchronized keyword. Change is partially backwards incompatible: - protected method is removed - two threads outputting a Map may now overlap   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.34 2003/09/17 19:59:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.35 2003/09/20 11:26:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.TypedSortedMap;\n \n /** \n- * A helper class for using {@link Map Map} instances.\n+ * Provides useful utility methods for {@link Map Map} instances.\n  * <p>\n  * It contains various typesafe methods\n  * as well as other useful features like deep copying.\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.34 $ $Date: 2003/09/17 19:59:45 $\n+ * @version $Revision: 1.35 $ $Date: 2003/09/20 11:26:32 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n      * This is not provided in the JDK.\n      */\n     public static final SortedMap EMPTY_SORTED_MAP = Collections.unmodifiableSortedMap(new TreeMap());\n-\n-    private static int indentDepth = 0;  // must be synchronized\n-\n+    /**\n+     * String used to indent the verbose and debug Map prints.\n+     */\n     private static final String INDENT_STRING = \"    \";\n \n     /**\n     \n     // Type safe getters\n     //-------------------------------------------------------------------------\n-\n     /**\n      *  Synonym for {@link Map#get(Object)}.\n      *\n \n     // Type safe getters with default values\n     //-------------------------------------------------------------------------\n-\n     /**\n      *  Looks up the given key in the given map, converting null into the\n      *  given default value.\n \n     // Conversion methods\n     //-------------------------------------------------------------------------\n-\n     /**\n      * Gets a new Properties object initialised with the values from a Map.\n      * A null input will return an empty properties object.\n  \n     // Printing methods\n     //-------------------------------------------------------------------------\n-\n     /**\n      * Prints the given map with nice line breaks.\n      * <p>\n      * This method prints a nicely formatted String describing the Map.\n      * Each map entry will be printed with key and value.\n      * When the value is a Map, recursive behaviour occurs.\n+     * <p>\n+     * This method is NOT thread-safe in any special way. You must manually\n+     * synchronize on either this class or the stream as required.\n      *\n      * @param out  the stream to print to, must not be null\n      * @param label  The label to be used, may be <code>null</code>.\n      *  If <code>null</code>, the text 'null' is output.\n      * @throws NullPointerException if the stream is <code>null</code>\n      */\n-    public static synchronized void verbosePrint(\n+    public static void verbosePrint(\n         final PrintStream out,\n         final Object label,\n         final Map map) {\n \n-        indentDepth = 0;\n         verbosePrintInternal(out, label, map, new ArrayStack(), false);\n     }\n \n      * This method prints a nicely formatted String describing the Map.\n      * Each map entry will be printed with key, value and value classname.\n      * When the value is a Map, recursive behaviour occurs.\n+     * <p>\n+     * This method is NOT thread-safe in any special way. You must manually\n+     * synchronize on either this class or the stream as required.\n      *\n      * @param out  the stream to print to, must not be null\n      * @param label  The label to be used, may be <code>null</code>.\n      *  If <code>null</code>, the text 'null' is output.\n      * @throws NullPointerException if the stream is <code>null</code>\n      */\n-    public static synchronized void debugPrint(\n+    public static void debugPrint(\n         final PrintStream out,\n         final Object label,\n         final Map map) {\n \n-        indentDepth = 0;\n         verbosePrintInternal(out, label, map, new ArrayStack(), true);\n     }\n \n     // Implementation methods\n     //-------------------------------------------------------------------------\n-\n-    /**\n-     * Writes indentation to the given stream.\n-     *\n-     * @param out  the stream to indent\n-     */\n-    protected static void printIndent(final PrintStream out) {\n-        for (int i = 0; i < indentDepth; i++) {\n-            out.print(INDENT_STRING);\n-        }\n-    }\n-    \n     /**\n      * Logs the given exception to <code>System.out</code>.\n+     * <p>\n+     * This method exists as Jakarta Collections does not depend on logging.\n      *\n      * @param ex  the exception to log\n      */\n      * @param lineage  a stack consisting of any maps in which the previous \n      *  argument is contained. This is checked to avoid infinite recursion when\n      *  printing the output\n-     *                   \n-     * @param debug flag indicating whether type names should be output.\n+     * @param debug  flag indicating whether type names should be output.\n      * @throws NullPointerException if the stream is <code>null</code>\n      */\n-    private static void verbosePrintInternal(  // externally synchronized\n+    private static void verbosePrintInternal(\n         final PrintStream out,\n         final Object label,\n         final Map map,\n         final ArrayStack lineage,\n         final boolean debug) {\n         \n-        printIndent(out);\n+        printIndent(out, lineage.size());\n \n         if (map == null) {\n             if (label != null) {\n             out.println(\" = \");\n         }\n \n-        printIndent(out);\n+        printIndent(out, lineage.size());\n         out.println(\"{\");\n \n-        indentDepth++;\n         lineage.push(map);\n \n         for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n                     lineage,\n                     debug);\n             } else {\n-                printIndent(out);\n+                printIndent(out, lineage.size());\n                 out.print(childKey);\n                 out.print(\" = \");\n                 \n         }\n         \n         lineage.pop();\n-        indentDepth--;\n-\n-        printIndent(out);\n+\n+        printIndent(out, lineage.size());\n         out.println(debug ? \"} \" + map.getClass().getName() : \"}\");\n     }\n \n+    /**\n+     * Writes indentation to the given stream.\n+     *\n+     * @param out  the stream to indent\n+     */\n+    private static void printIndent(final PrintStream out, final int indent) {\n+        for (int i = 0; i < indent; i++) {\n+            out.print(INDENT_STRING);\n+        }\n+    }\n+    \n     // Misc\n     //-----------------------------------------------------------------------\n     /**\n         }\n     }\n \n+    // Map decorators\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized map backed by the given map.\n         return LazyMap.decorate(map, transformerFactory);\n     }\n \n+    // SortedMap decorators\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized sorted map backed by the given sorted map.", "timestamp": 1064057192, "metainfo": ""}