{"sha": "c2307801a09fe3620c3f1e94bacf8ee3e7814dd2", "log": "ArrayStack and BinaryHeap now implement Buffer.  Submitted by: Paul Jack   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/java/org/apache/commons/collections/ArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.5 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.6 2002/07/03 02:09:06 mas Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/07/03 02:09:06 $\n  *\n  * ====================================================================\n  *\n  * is therefore operates faster in environments where you do not need to\n  * worry about multiple thread contention.\n  *\n+ * The removal order of an <Code>ArrayStack</Code> is based on insertion \n+ * order: The most recently added element is removed first.  The iteration\n+ * order is <I>not</I> the same as the removal order.  The iterator returns\n+ * elements from the bottom up, whereas the {@link remove()} method removes\n+ * them from the top down.\n+ *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.5 $ $Date: 2002/06/12 03:59:15 $\n+ * @version $Revision: 1.6 $ $Date: 2002/07/03 02:09:06 $\n  * @see java.util.Stack\n  */\n \n-public class ArrayStack extends ArrayList {\n-\n+public class ArrayStack extends ArrayList implements Buffer {\n+\n+\n+    final private static long serialVersionUID = 2130079159931574599L;\n+//, local class serialVersionUID = -3491241305852305742\n \n     // --------------------------------------------------------- Public Methods\n \n     }\n \n \n+    /**\n+     *  Returns the element on the top of the stack.\n+     *\n+     *  @return the element on the top of the stack\n+     *  @throws BufferUnderflowException if the stack is empty\n+     */\n+    public Object get() {\n+        int size = size();\n+        if (size == 0) throw new BufferUnderflowException();\n+        return get(size - 1);\n+    }\n+\n+\n+\n+    /**\n+     *  Removes the element on the top of the stack.\n+     *\n+     *  @return the removed element \n+     *  @throws BufferUnderflowException if the stack is empty\n+     */\n+    public Object remove() {\n+        int size = size();\n+        if (size == 0) throw new BufferUnderflowException();\n+        return remove(size - 1);\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.7 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.8 2002/07/03 02:09:06 mas Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/07/03 02:09:06 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.collections;\n \n+import java.util.AbstractCollection;\n+import java.util.Iterator;\n import java.util.NoSuchElementException;\n import java.util.Comparator;\n \n /**\n- * Binary heap implementation of {@link PriorityQueue}.\n+ * Binary heap implementation of {@link PriorityQueue} and {@link Buffer}.\n+ *\n+ * The removal order of a binary heap is based on either the natural sort\n+ * order of its elements or a specified {@link Comparator}.  The \n+ * {@link remove()} method always returns the first element as determined\n+ * by the sort order.  (The <Code>isMinHeap</Code> flag in the constructors\n+ * can be used to reverse the sort order, in which case {@link remove()}\n+ * will always remove the last element.)  The removal order is \n+ * <I>not</I> the same as the order of iteration; elements are\n+ * returned by the iterator in no particular order.<P>\n+ *\n+ * The {@link add(Object)} and {@link remove()} operations perform\n+ * in logarithmic time.  The {@link get()} operation performs in constant\n+ * time.  All other operations perform in linear time or worse.<P>\n+ *\n+ * Note that this implementation is not synchronized.  Use \n+ * {@link BufferUtils.synchronizedBuffer(Buffer)} to provide\n+ * synchronized access to a <Code>BinaryHeap</Code>:\n+ *\n+ * <Pre>\n+ * Buffer heap = BufferUtils.synchronizedBuffer(new BinaryHeap());\n+ * </Pre>\n  *\n  * @since 1.0\n  * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n  * @author  <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a>\n  * @author  <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * @author  Paul Jack\n  */\n-public final class BinaryHeap\n-    implements PriorityQueue\n+public final class BinaryHeap extends AbstractCollection\n+    implements PriorityQueue, Buffer\n {\n     protected final static int      DEFAULT_CAPACITY   = 13;\n \n \n         return sb.toString();\n     }\n+\n+\n+    /**\n+     *  Returns an iterator over this heap's elements.\n+     *\n+     *  @return an iterator over this heap's elements\n+     */\n+    public Iterator iterator() {\n+        return new Iterator() {\n+\n+            private int index = 1;\n+            private int lastReturnedIndex = -1;\n+\n+            public boolean hasNext() {\n+                return index <= m_size;\n+            }\n+\n+            public Object next() {\n+                if (!hasNext()) throw new NoSuchElementException();\n+                lastReturnedIndex = index;\n+                index++;\n+                return m_elements[lastReturnedIndex];\n+            }\n+\n+            public void remove() {\n+                if (lastReturnedIndex == -1) throw new IllegalStateException();\n+                m_elements[ lastReturnedIndex ] = m_elements[ m_size ];\n+                m_elements[ m_size ] = null;\n+                m_size--;\n+                if( m_size != 0 )\n+                {\n+                    //percolate top element to it's place in tree\n+                    if( m_isMinHeap ) percolateDownMinHeap( lastReturnedIndex );\n+                    else percolateDownMaxHeap( lastReturnedIndex );\n+                }\n+                index--;\n+                lastReturnedIndex = -1;        \n+            }\n+\n+        };\n+    }\n+\n+\n+    /**\n+     *  Adds an object to this heap.  Same as {@link insert(Object)}.\n+     *\n+     *  @param o  the object to add\n+     *  @return true, always\n+     */\n+    public boolean add(Object o) {\n+        insert(o);\n+        return true;\n+    }\n+\n+\n+    /**\n+     *  Returns the priority element.  Same as {@link peek()}.\n+     *\n+     *  @return the priority element\n+     *  @throws BufferUnderflowException if this heap is empty\n+     */\n+    public Object get() {\n+        try {\n+            return peek();\n+        } catch (NoSuchElementException e) {\n+            throw new BufferUnderflowException();\n+        }\n+    }\n+\n+\n+    /**\n+     *  Removes the priority element.  Same as {@link pop()}.\n+     *\n+     *  @return the removed priority element\n+     *  @throws BufferUnderflowException if this heap is empty\n+     */\n+    public Object remove() {\n+        try {\n+            return pop();\n+        } catch (NoSuchElementException e) {\n+            throw new BufferUnderflowException();\n+        }\n+    }\n+\n+\n+    /**\n+     *  Returns the number of elements in this heap.\n+     *\n+     *  @return the number of elements in this heap\n+     */\n+    public int size() {\n+        return m_size;\n+    }\n+\n+\n+    Comparator comparator() {\n+        return m_comparator;\n+    }\n }\n \n--- a/src/test/org/apache/commons/collections/TestBinaryHeap.java\n+++ b/src/test/org/apache/commons/collections/TestBinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.3 2002/06/11 02:41:47 mas Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/06/11 02:41:47 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.4 2002/07/03 02:09:06 mas Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/07/03 02:09:06 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections;\n \n import junit.framework.*;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n  * Tests the BinaryHeap.\n  * \n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n- * @version $Id: TestBinaryHeap.java,v 1.3 2002/06/11 02:41:47 mas Exp $\n+ * @version $Id: TestBinaryHeap.java,v 1.4 2002/07/03 02:09:06 mas Exp $\n  */\n-public class TestBinaryHeap extends TestObject {\n+public class TestBinaryHeap extends TestCollection {\n     \n   public static Test suite() {\n     return new TestSuite(TestBinaryHeap.class);\n   /**\n    * Return a new, empty {@link Object} to used for testing.\n    */\n-  public Object makeObject() {\n+  public Collection makeCollection() {\n     return new BinaryHeap();\n   }\n   \n+\n+  public Collection makeConfirmedCollection() {\n+    return new ArrayList();\n+  }\n+\n+  public Collection makeConfirmedFullCollection() {\n+    ArrayList list = new ArrayList();\n+    list.addAll(Arrays.asList(getFullElements()));\n+    return list;\n+  }\n+\n+  public Object[] getFullElements() {\n+      return getFullNonNullStringElements();\n+  }\n+\n+  public Object[] getOtherElements() {\n+      return getOtherNonNullStringElements();\n+  }\n+\n+  public void testCollectionIteratorFailFast() {\n+  }\n+\n   public void testBasicOps() {\n     BinaryHeap heap = new BinaryHeap();\n     \n       // expected\n     }     \n   }\n+\n+\n+  public void verify() {\n+      super.verify();\n+      BinaryHeap heap = (BinaryHeap)collection;\n+\n+      Comparator c = heap.comparator();\n+      if (c == null) c = ComparatorUtils.NATURAL;\n+      if (!heap.m_isMinHeap) c = ComparatorUtils.reverse(c);\n+\n+      Object[] tree = heap.m_elements;\n+      for (int i = 1; i <= heap.m_size; i++) {\n+          Object parent = tree[i];\n+          if (i * 2 <= heap.m_size) {\n+              assertTrue(\"Parent is less than or equal to its left child\", \n+                c.compare(parent, tree[i * 2]) <= 0);\n+          }\n+          if (i * 2 + 1 < heap.m_size) {\n+              assertTrue(\"Parent is less than or equal to its right child\", \n+                c.compare(parent, tree[i * 2 + 1]) <= 0);\n+          }\n+      }\n+  }\n }\n ", "timestamp": 1025662146, "metainfo": ""}