{"sha": "92c30814a91eed6452de1d13db8e26a6b4120e9e", "log": "Remove uneccessary public statements from interface   ", "commit": "\n--- a/src/java/org/apache/commons/collections/Bag.java\n+++ b/src/java/org/apache/commons/collections/Bag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.8 2003/05/11 12:13:58 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.9 2003/05/11 14:14:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * which unfortunately will break backwards compatibility with this version.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.8 $ $Date: 2003/05/11 12:13:58 $\n+ * @version $Revision: 1.9 $ $Date: 2003/05/11 14:14:58 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n     * @param object  the object to search for\n     * @return the number of occurrences of the object, zero if not found\n     */\n-   public int getCount(Object object);\n+   int getCount(Object object);\n \n    /**\n     * <i>(Violation)</i>\n     * @param object  the object to add\n     * @return <code>true</code> if the object was not already in the <code>uniqueSet</code>\n     */\n-   public boolean add(Object object);\n+   boolean add(Object object);\n \n    /**\n     * Adds <code>nCopies</code> copies of the specified object to the Bag.\n     * @param nCopies  the number of copies to add\n     * @return <code>true</code> if the object was not already in the <code>uniqueSet</code>\n     */\n-   public boolean add(Object object, int nCopies);\n+   boolean add(Object object, int nCopies);\n \n    /**\n     * <i>(Violation)</i>\n     *\n     * @return <code>true</code> if this call changed the collection\n     */\n-   public boolean remove(Object object);\n+   boolean remove(Object object);\n \n    /**\n     * Removes <code>nCopies</code> copies of the specified object from the Bag.\n     * @param nCopies  the number of copies to remove\n     * @return <code>true</code> if this call changed the collection\n     */\n-   public boolean remove(Object object, int nCopies);\n+   boolean remove(Object object, int nCopies);\n \n    /**\n     * Returns a {@link Set} of unique elements in the Bag.\n     * \n     * @return the Set of unique Bag elements\n     */\n-   public Set uniqueSet();\n+   Set uniqueSet();\n \n    /**\n     * Returns the total number of items in the bag across all types.\n     * \n     * @return the total size of the Bag\n     */\n-   public int size();\n+   int size();\n \n    /**\n     * <i>(Violation)</i>\n     * @param coll  the collection to check against\n     * @return <code>true</code> if the Bag contains all the collection\n     */\n-   public boolean containsAll(Collection coll);\n+   boolean containsAll(Collection coll);\n \n    /**\n     * <i>(Violation)</i>\n     * @param coll  the collection to remove\n     * @return <code>true</code> if this call changed the collection\n     */\n-   public boolean removeAll(Collection coll);\n+   boolean removeAll(Collection coll);\n \n    /**\n     * <i>(Violation)</i>\n     * @param coll  the collection to retain\n     * @return <code>true</code> if this call changed the collection\n     */\n-   public boolean retainAll(Collection coll);\n+   boolean retainAll(Collection coll);\n \n    /**\n     * Returns an {@link Iterator} over the entire set of members,\n     * \n     * @return iterator over all elements in the Bag\n     */\n-   public Iterator iterator();\n+   Iterator iterator();\n    \n }", "timestamp": 1052662498, "metainfo": ""}