{"sha": "b03a47129283461602420aeb3b90090ccecf3e98", "log": "Fix bug in DualBidiMaps caused by bad design of createMap method bug 29519   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n  * @see DualHashBidiMap\n  * @see DualTreeBidiMap\n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.12 2004/05/15 12:13:03 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.13 2004/06/11 23:27:37 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     /**\n      * Creates an empty map, initialised by <code>createMap</code>.\n      * <p>\n-     * The map array must be populated by the subclass.\n+     * This constructor remains in place for deserialization.\n+     * All other usage is deprecated in favour of\n+     * {@link #AbstractDualBidiMap(Map, Map)}.\n      */\n     protected AbstractDualBidiMap() {\n         super();\n         maps[0] = createMap();\n         maps[1] = createMap();\n+    }\n+\n+    /**\n+     * Creates an empty map using the two maps specified as storage.\n+     * <p>\n+     * The two maps must be a matching pair, normal and reverse.\n+     * They will typically both be empty.\n+     * <p>\n+     * Neither map is validated, so nulls may be passed in.\n+     * If you choose to do this then the subclass constructor must populate\n+     * the <code>maps[]</code> instance variable itself.\n+     * \n+     * @param normalMap  the normal direction map\n+     * @param reverseMap  the reverse direction map\n+     */\n+    protected AbstractDualBidiMap(Map normalMap, Map reverseMap) {\n+        super();\n+        maps[0] = normalMap;\n+        maps[1] = reverseMap;\n     }\n \n     /** \n     /**\n      * Creates a new instance of the map used by the subclass to store data.\n      * <p>\n-     * Do not change any instance variables from this method.\n+     * This design is deeply flawed and has been deprecated.\n+     * It relied on subclass data being used during a superclass constructor.\n      * \n      * @return the map to be used for internal storage\n-     */\n-    protected abstract Map createMap();\n+     * @deprecated For constructors, use the new two map constructor.\n+     * For deserialization, populate the maps array directly in readObject.\n+     */\n+    protected Map createMap() {\n+        return null;\n+    }\n \n     /**\n      * Creates a new instance of the subclass.\n--- a/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n \n /**\n  * Implementation of <code>BidiMap</code> that uses two <code>HashMap</code> instances.\n+ * <p>\n+ * Two <code>HashMap</code> instances are used in this class.\n+ * This provides fast lookups at the expense of storing two sets of map entries.\n+ * Commons Collections would welcome the addition of a direct hash-based\n+ * implementation of the <code>BidiMap</code> interface.\n+ * <p>\n+ * NOTE: From Commons Collections 3.1, all subclasses will use <code>HashMap</code>\n+ * and the flawed <code>createMap</code> method is ignored.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualHashBidiMap.java,v 1.6 2004/02/18 00:57:39 scolebourne Exp $\n+ * @version $Id: DualHashBidiMap.java,v 1.7 2004/06/11 23:27:37 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     private static final long serialVersionUID = 721969328361808L;\n \n     /**\n-     * Creates an empty <code>HashBidiMap</code>\n+     * Creates an empty <code>HashBidiMap</code>.\n      */\n     public DualHashBidiMap() {\n-        super();\n+        super(new HashMap(), new HashMap());\n     }\n \n     /** \n      * @param map  the map whose mappings are to be placed in this map\n      */\n     public DualHashBidiMap(Map map) {\n-        super();\n+        super(new HashMap(), new HashMap());\n         putAll(map);\n     }\n     \n      */\n     protected DualHashBidiMap(Map normalMap, Map reverseMap, BidiMap inverseBidiMap) {\n         super(normalMap, reverseMap, inverseBidiMap);\n-    }\n-\n-    /**\n-     * Creates a new instance of the map used by the subclass to store data.\n-     * \n-     * @return the map to be used for internal storage\n-     */\n-    protected Map createMap() {\n-        return new HashMap();\n     }\n \n     /**\n \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n+        maps[0] = new HashMap();\n+        maps[1] = new HashMap();\n         Map map = (Map) in.readObject();\n         putAll(map);\n     }\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n  * When considering whether to use this class, the {@link TreeBidiMap} class should\n  * also be considered. It implements the interface using a dedicated design, and does\n  * not store each object twice, which can save on memory use.\n+ * <p>\n+ * NOTE: From Commons Collections 3.1, all subclasses will use <code>TreeMap</code>\n+ * and the flawed <code>createMap</code> method is ignored.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualTreeBidiMap.java,v 1.13 2004/05/15 12:13:03 scolebourne Exp $\n+ * @version $Id: DualTreeBidiMap.java,v 1.14 2004/06/11 23:27:37 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n      * Creates an empty <code>DualTreeBidiMap</code>\n      */\n     public DualTreeBidiMap() {\n-        super();\n+        super(new TreeMap(), new TreeMap());\n         this.comparator = null;\n     }\n \n      * @param map  the map whose mappings are to be placed in this map\n      */\n     public DualTreeBidiMap(Map map) {\n-        super();\n+        super(new TreeMap(), new TreeMap());\n         putAll(map);\n         this.comparator = null;\n     }\n      * @param comparator  the Comparator\n      */\n     public DualTreeBidiMap(Comparator comparator) {\n-        super();\n+        super(new TreeMap(comparator), new TreeMap(comparator));\n         this.comparator = comparator;\n     }\n \n     /** \n-     * Constructs a <code>HashBidiMap</code> that decorates the specified maps.\n+     * Constructs a <code>DualTreeBidiMap</code> that decorates the specified maps.\n      *\n      * @param normalMap  the normal direction map\n      * @param reverseMap  the reverse direction map\n     protected DualTreeBidiMap(Map normalMap, Map reverseMap, BidiMap inverseBidiMap) {\n         super(normalMap, reverseMap, inverseBidiMap);\n         this.comparator = ((SortedMap) normalMap).comparator();\n-    }\n-    \n-    /**\n-     * Creates a new instance of the map used by the subclass to store data.\n-     * \n-     * @return the map to be used for internal storage\n-     */\n-    protected Map createMap() {\n-        return new TreeMap(comparator);\n     }\n \n     /**\n \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n+        maps[0] = new TreeMap(comparator);\n+        maps[1] = new TreeMap(comparator);\n         Map map = (Map) in.readObject();\n         putAll(map);\n     }", "timestamp": 1086996457, "metainfo": ""}