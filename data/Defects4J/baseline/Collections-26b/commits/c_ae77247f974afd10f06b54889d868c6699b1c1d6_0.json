{"sha": "ae77247f974afd10f06b54889d868c6699b1c1d6", "log": "Moving from StringBuffer API to StringBuilder  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n         int end = -1;\n         int prec = 0 - END_TOKEN.length();\n         String variable = null;\n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n \n         // FIXME: we should probably allow the escaping of the start token\n         while (((begin = base.indexOf(START_TOKEN, prec + END_TOKEN.length())) > -1)\n             if (priorVariables.contains(variable)) {\n                 String initialBase = priorVariables.remove(0).toString();\n                 priorVariables.add(variable);\n-                StringBuffer priorVariableSb = new StringBuffer();\n+                StringBuilder priorVariableSb = new StringBuilder();\n \n                 // create a nice trace of interpolated variables like so:\n                 // var1->var2->var3\n      * Inserts a backslash before every comma and backslash. \n      */\n     private static String escape(String s) {\n-        StringBuffer buf = new StringBuffer(s);\n+        StringBuilder buf = new StringBuilder(s);\n         for (int i = 0; i < buf.length(); i++) {\n             char c = buf.charAt(i);\n             if (c == ',' || c == '\\\\') {\n      * Removes a backslash from every pair of backslashes. \n      */\n     private static String unescape(String s) {\n-        StringBuffer buf = new StringBuffer(s);\n+        StringBuilder buf = new StringBuilder(s);\n         for (int i = 0; i < buf.length() - 1; i++) {\n             char c1 = buf.charAt(i);\n             char c2 = buf.charAt(i + 1);\n          * @throws IOException if there is difficulty reading the source.\n          */\n         public String readProperty() throws IOException {\n-            StringBuffer buffer = new StringBuffer();\n+            StringBuilder buffer = new StringBuilder();\n             String line = readLine();\n             while (line != null) {\n                 line = line.trim();\n          * @return A String.\n          */\n         public String nextToken() {\n-            StringBuffer buffer = new StringBuffer();\n+            StringBuilder buffer = new StringBuilder();\n \n             while (hasMoreTokens()) {\n                 String token = super.nextToken();\n             Object value = get(key);\n             if (value != null) {\n                 if (value instanceof String) {\n-                    StringBuffer currentOutput = new StringBuffer();\n+                    StringBuilder currentOutput = new StringBuilder();\n                     currentOutput.append(key);\n                     currentOutput.append(\"=\");\n                     currentOutput.append(escape((String) value));\n                     List values = (List) value;\n                     for (Iterator it = values.iterator(); it.hasNext(); ) {\n                         String currentElement = (String) it.next();\n-                        StringBuffer currentOutput = new StringBuffer();\n+                        StringBuilder currentOutput = new StringBuilder();\n                         currentOutput.append(key);\n                         currentOutput.append(\"=\");\n                         currentOutput.append(escape(currentElement));\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n         if (size() == 0) {\n             return \"[]\";\n         }\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append('[');\n         Iterator<E> it = uniqueSet().iterator();\n         while (it.hasNext()) {\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n         if (nodeCount == 0) {\n             return \"{}\";\n         }\n-        StringBuffer buf = new StringBuffer(nodeCount * 32);\n+        StringBuilder buf = new StringBuilder(nodeCount * 32);\n         buf.append('{');\n         MapIterator<?, ?> it = getMapIterator(dataElement);\n         boolean hasNext = it.hasNext();\n--- a/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n      * @return a string representation of this heap\n      */\n     public String toString() {\n-        final StringBuffer sb = new StringBuffer();\n+        final StringBuilder sb = new StringBuilder();\n \n         sb.append(\"[ \");\n \n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n      * @return a String view of the entry\n      */\n     public String toString() {\n-        return new StringBuffer()\n+        return new StringBuilder()\n             .append(getKey())\n             .append('=')\n             .append(getValue())\n--- a/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n         if (size() == 0) {\n             return \"[]\";\n         }\n-        StringBuffer buf = new StringBuffer(16 * size());\n+        StringBuilder buf = new StringBuilder(16 * size());\n         buf.append(\"[\");\n \n         Iterator<E> it = iterator();\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n         }\n \n         public String toString() {\n-            return new StringBuffer().append(getKey()).append('=').append(getValue()).toString();\n+            return new StringBuilder().append(getKey()).append('=').append(getValue()).toString();\n         }\n     }\n \n         if (size() == 0) {\n             return \"{}\";\n         }\n-        StringBuffer buf = new StringBuffer(32 * size());\n+        StringBuilder buf = new StringBuilder(32 * size());\n         buf.append('{');\n \n         MapIterator<K, V> it = mapIterator();\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n         if (size == 0) {\n             return \"{}\";\n         }\n-        StringBuffer buf = new StringBuffer(128);\n+        StringBuilder buf = new StringBuilder(128);\n         buf.append('{');\n         switch (size) {  // drop through\n             case 3:\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n         if (isEmpty()) {\n             return \"{}\";\n         }\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n         buf.append('{');\n         boolean first = true;\n         for (Map.Entry<K, V> entry : entrySet()) {\n--- a/src/java/org/apache/commons/collections/map/SingletonMap.java\n+++ b/src/java/org/apache/commons/collections/map/SingletonMap.java\n      * @return a string version of the map\n      */\n     public String toString() {\n-        return new StringBuffer(128)\n+        return new StringBuilder(128)\n             .append('{')\n             .append((getKey() == this ? \"(this Map)\" : getKey()))\n             .append('=')\n--- a/src/test/org/apache/commons/collections/AbstractTestObject.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestObject.java\n     }\n \n     protected String getCanonicalEmptyCollectionName(Object object) {\n-        StringBuffer retval = new StringBuffer();\n+        StringBuilder retval = new StringBuilder();\n         retval.append(\"data/test/\");\n         String colName = object.getClass().getName();\n         colName = colName.substring(colName.lastIndexOf(\".\") + 1, colName.length());\n     }\n \n     protected String getCanonicalFullCollectionName(Object object) {\n-        StringBuffer retval = new StringBuffer();\n+        StringBuilder retval = new StringBuilder();\n         retval.append(\"data/test/\");\n         String colName = object.getClass().getName();\n         colName = colName.substring(colName.lastIndexOf(\".\") + 1, colName.length());\n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n     //------------------------------------------------------------------\n \n     public void testNopClosure() {\n-        StringBuffer buf = new StringBuffer(\"Hello\");\n+        StringBuilder buf = new StringBuilder(\"Hello\");\n         ClosureUtils.nopClosure().execute(null);\n         assertEquals(\"Hello\", buf.toString());\n         ClosureUtils.nopClosure().execute(\"Hello\");\n     //------------------------------------------------------------------\n \n     public void testInvokeClosure() {\n-        StringBuffer buf = new StringBuffer(\"Hello\");\n+        StringBuilder buf = new StringBuilder(\"Hello\");\n         ClosureUtils.invokerClosure(\"reverse\").execute(buf);\n         assertEquals(\"olleH\", buf.toString());\n-        buf = new StringBuffer(\"Hello\");\n+        buf = new StringBuilder(\"Hello\");\n         ClosureUtils.invokerClosure(\"setLength\", new Class[] {Integer.TYPE}, new Object[] {new Integer(2)}).execute(buf);\n         assertEquals(\"He\", buf.toString());\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n      */\n     protected String showTree(PriorityBuffer<?> h) {\n         int count = 1;\n-        StringBuffer buffer = new StringBuffer();\n+        StringBuilder buffer = new StringBuilder();\n         for (int offset = 1; count < h.size() + 1; offset *= 2) {\n             for (int i = offset; i < offset * 2; i++) {\n                 if (i < h.elements.length && h.elements[i] != null)\n--- a/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n     }\n \n     public String getCanonicalComparatorName(Object object) {\n-        StringBuffer retval = new StringBuffer();\n+        StringBuilder retval = new StringBuilder();\n         retval.append(\"data/test/\");\n         String colName = object.getClass().getName();\n         colName = colName.substring(colName.lastIndexOf(\".\")+1,colName.length());\n--- a/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n         }\n \n         public String toString() {\n-            StringBuffer buf = new StringBuffer();\n+            StringBuilder buf = new StringBuilder();\n             buf.append(\"[\");\n             buf.append(cols[0]);\n             buf.append(\",\");\n--- a/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n         }\n \n         // random walk\n-        StringBuffer walkdescr = new StringBuffer(500);\n+        StringBuilder walkdescr = new StringBuilder(500);\n         for (int i = 0; i < 500; i++) {\n             if (random.nextBoolean()) {\n                 // step forward", "timestamp": 1276987316, "metainfo": ""}