{"sha": "22ae5553ac7a63538a6e310959b3921a378ba09e", "log": "* make AbstractIntCollection public * add copy constructor to AbstractIntCollection * add javadoc to AbstractIntCollection * hava AbstractRandomAccessIntList use AbstractIntCollection copy constructor   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntCollection.java,v 1.3 2003/01/11 21:28:02 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntCollection.java,v 1.4 2003/01/13 23:07:08 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n package org.apache.commons.collections.primitives;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/01/11 21:28:02 $\n+ * Abstract base class for {@link IntCollection}s.\n+ * <p />\n+ * Read-only subclasses must override {@link #iterator}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #add} and \n+ * {@link IntIterator#remove IntIterator.remove}.\n+ * All other methods have at least some base implementation \n+ * derived from these.  Subclasses may choose to override \n+ * these methods to provide a more efficient implementation. \n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.4 $ $Date: 2003/01/13 23:07:08 $\n+ * \n  * @author Rodney Waldhoff \n  */\n-abstract class AbstractIntCollection implements IntCollection {\n+public abstract class AbstractIntCollection implements IntCollection {\n     public abstract IntIterator iterator();\n     public abstract int size();\n           \n     protected AbstractIntCollection() { }\n+\n+    /** \n+     * Constructs a collection containing the elements of \n+     * the given collection, added in the order they are \n+     * returned by that collection's iterator.\n+     * \n+     * @see #addAll\n+     * @param that the non-<code>null</code> collection of <code>int</code>s \n+     *        to add\n+     * @throws NullPointerException if <i>that</i> is <code>null</code>\n+     * @throws UnsupportedOperationException if {@link #addAll addAll} does\n+     */\n+    protected AbstractIntCollection(IntCollection that) { \n+        addAll(that);\n+    }    \n               \n     /** Unsupported in this base implementation. */\n     public boolean add(int element) {\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.9 2003/01/13 21:52:28 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.10 2003/01/13 23:07:08 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * to provide a more efficient implementation.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.9 $ $Date: 2003/01/13 21:52:28 $\n+ * @version $Revision: 1.10 $ $Date: 2003/01/13 23:07:08 $\n  * \n  * @author Rodney Waldhoff \n  */\n      * @throws UnsupportedOperationException if {@link #addAll addAll} does\n      */\n     protected AbstractRandomAccessIntList(IntCollection that) { \n-        addAll(that);\n+        super(that);\n     }    \n \n     // fully abstract methods", "timestamp": 1042499228, "metainfo": ""}