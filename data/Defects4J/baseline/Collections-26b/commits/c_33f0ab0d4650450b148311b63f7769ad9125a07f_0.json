{"sha": "33f0ab0d4650450b148311b63f7769ad9125a07f", "log": "added test for concurrent modifications   ", "commit": "\n--- a/src/java/org/apache/commons/collections/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/LRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/LRUMap.java,v 1.13 2002/04/16 21:15:13 morgand Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/04/16 21:15:13 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/LRUMap.java,v 1.14 2002/05/08 18:11:36 morgand Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2002/05/08 18:11:36 $\n  *\n  * ====================================================================\n  *\n         maximumSize = i;\n     }\n \n+    /**\n+     * <p>Get the value for a key from the Map.  The key\n+     * will be promoted to the Most Recently Used position.\n+     * Note that get(Object) operations will modify\n+     * the underlying Collection.  Calling get(Object)\n+     * inside of an iteration over keys, values, etc. is\n+     * currently unsupported.</p>\n+     * \n+     * @param key    Key to retrieve\n+     * @return Returns the value.  Returns null if the key has a\n+     *         null value <i>or</i> if the key has no value.\n+     */\n+    public Object get(Object key) {\n+        Object value = remove(key);\n+        super.put(key,value);\n+        return value;\n+    }\n+\n      /**\n       * <p>Removes the key and its Object from the Map.</p>\n       * \n      */\n     protected void removeLRU() {\n         Object key = getFirstKey();\n-        Object value = get(key);\n+        // be sure to call super.get(key), or you're likely to \n+        // get infinite promotion recursion\n+        Object value = super.get(key);\n         \n         remove(key);\n \n         for( Iterator iterator = keySet().iterator(); iterator.hasNext(); ) {\n             Object key = iterator.next();\n             out.writeObject( key );\n-            Object value = get( key );\n+            // be sure to call super.get(key), or you're likely to \n+            // get infinite promotion recursion\n+            Object value = super.get( key );\n             out.writeObject( value );\n         }\n     }", "timestamp": 1020881496, "metainfo": ""}