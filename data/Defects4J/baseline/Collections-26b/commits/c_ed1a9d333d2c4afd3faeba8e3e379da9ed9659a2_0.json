{"sha": "ed1a9d333d2c4afd3faeba8e3e379da9ed9659a2", "log": "Added extra null validation   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java,v 1.2 2002/08/17 11:33:09 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/17 11:33:09 $\n  *\n  * ====================================================================\n  *\n import java.util.LinkedList;\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n-\n /**\n  * As the wrapped Iterator is traversed, ListIteratorWrapper\n  * builds a LinkedList of its values, permitting all required\n  * operations of ListIterator.\n  * \n+ * @since 2.1\n  * @author Morgan Delagrange\n- * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:51 $\n- * @since 2.1\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ListIteratorWrapper.java,v 1.2 2002/08/17 11:33:09 scolebourne Exp $\n  */\n public class ListIteratorWrapper implements ListIterator {\n \n-    // Constructor\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Constructs a new <Code>ListIteratorWrapper</Code> that will wrap\n-     *  the given iterator.\n-     *\n-     *  @param iterator  the iterator to wrap\n-     */\n-    public ListIteratorWrapper(Iterator iterator) {\n-        this.iterator = iterator;\n-    }\n-\n-    // ListIterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Throws {@link UnsupportedOperationException}.\n-     *\n-     *  @param o  ignored\n-     *  @throws UnsupportedOperationException always\n-     */\n-    public void add(Object o) throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n-    }\n-\n-\n-    /**\n-     *  Returns true if there are more elements in the iterator.\n-     *\n-     *  @return true if there are more elements\n-     */\n-    public boolean hasNext() {\n-        if (currentIndex == wrappedIteratorIndex) {\n-            return iterator.hasNext();\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     *  Returns true if there are previous elements in the iterator.\n-     *\n-     *  @return true if there are previous elements\n-     */\n-    public boolean hasPrevious() {\n-        if (currentIndex == 0) {\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     *  Returns the next element from the iterator.\n-     *\n-     *  @return the next element from the iterator\n-     *  @throws NoSuchElementException if there are no more elements\n-     */\n-    public Object next() throws NoSuchElementException {\n-        if (currentIndex < wrappedIteratorIndex) {\n-            ++currentIndex;\n-            return list.get(currentIndex - 1);\n-        }\n-\n-        Object retval = iterator.next();\n-        list.add(retval);\n-        ++currentIndex;\n-        ++wrappedIteratorIndex;\n-        return retval;\n-    }\n-\n-    /**\n-     *  Returns in the index of the next element.\n-     *\n-     *  @return the index of the next element\n-     */\n-    public int nextIndex() {\n-        return currentIndex;\n-    }\n-\n-    /**\n-     *  Returns the the previous element.\n-     *\n-     *  @return the previous element\n-     *  @throws NoSuchElementException  if there are no previous elements\n-     */\n-    public Object previous() throws NoSuchElementException {\n-        if (currentIndex == 0) {\n-            throw new NoSuchElementException();\n-        }\n-\n-        --currentIndex;\n-        return list.get(currentIndex);    \n-    }\n-\n-    /**\n-     *  Returns the index of the previous element.\n-     *\n-     *  @return  the index of the previous element\n-     */\n-    public int previousIndex() {\n-        return currentIndex - 1;\n-    }\n-\n-    /**\n-     *  Throws {@link UnsupportedOperationException}.\n-     *\n-     *  @throws UnsupportedOperationException always\n-     */\n-    public void remove() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n-    }\n-\n-    /**\n-     *  Throws {@link UnsupportedOperationException}.\n-     *\n-     *  @param o  ignored\n-     *  @throws UnsupportedOperationException always\n-     */\n-    public void set(Object o) throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n-    }\n-\n-    // Attributes\n-    //-------------------------------------------------------------------------\n-\n-    /** Holds value of property \"iterator\". */\n-    private Iterator iterator = null;\n-    private LinkedList list = new LinkedList();\n+    /** Holds value of property \"iterator\" */\n+    private final Iterator iterator;\n+    private final LinkedList list = new LinkedList();\n     \n     // position of this iterator\n     private int currentIndex = 0;\n     private static final String UNSUPPORTED_OPERATION_MESSAGE =\n         \"ListIteratorWrapper does not support optional operations of ListIterator.\";\n \n+    // Constructor\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     * Constructs a new <Code>ListIteratorWrapper</Code> that will wrap\n+     * the given iterator.\n+     *\n+     * @param iterator  the iterator to wrap\n+     * @throws NullPointerException if the iterator is null\n+     */\n+    public ListIteratorWrapper(Iterator iterator) {\n+        if (iterator == null) {\n+            throw new NullPointerException(\"Iterator must not be null\");\n+        }\n+        this.iterator = iterator;\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @param o  ignored\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void add(Object o) throws UnsupportedOperationException {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n+    }\n+\n+\n+    /**\n+     *  Returns true if there are more elements in the iterator.\n+     *\n+     *  @return true if there are more elements\n+     */\n+    public boolean hasNext() {\n+        if (currentIndex == wrappedIteratorIndex) {\n+            return iterator.hasNext();\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     *  Returns true if there are previous elements in the iterator.\n+     *\n+     *  @return true if there are previous elements\n+     */\n+    public boolean hasPrevious() {\n+        if (currentIndex == 0) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     *  Returns the next element from the iterator.\n+     *\n+     *  @return the next element from the iterator\n+     *  @throws NoSuchElementException if there are no more elements\n+     */\n+    public Object next() throws NoSuchElementException {\n+        if (currentIndex < wrappedIteratorIndex) {\n+            ++currentIndex;\n+            return list.get(currentIndex - 1);\n+        }\n+\n+        Object retval = iterator.next();\n+        list.add(retval);\n+        ++currentIndex;\n+        ++wrappedIteratorIndex;\n+        return retval;\n+    }\n+\n+    /**\n+     *  Returns in the index of the next element.\n+     *\n+     *  @return the index of the next element\n+     */\n+    public int nextIndex() {\n+        return currentIndex;\n+    }\n+\n+    /**\n+     *  Returns the the previous element.\n+     *\n+     *  @return the previous element\n+     *  @throws NoSuchElementException  if there are no previous elements\n+     */\n+    public Object previous() throws NoSuchElementException {\n+        if (currentIndex == 0) {\n+            throw new NoSuchElementException();\n+        }\n+\n+        --currentIndex;\n+        return list.get(currentIndex);    \n+    }\n+\n+    /**\n+     *  Returns the index of the previous element.\n+     *\n+     *  @return  the index of the previous element\n+     */\n+    public int previousIndex() {\n+        return currentIndex - 1;\n+    }\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void remove() throws UnsupportedOperationException {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n+    }\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @param o  ignored\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void set(Object o) throws UnsupportedOperationException {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n+    }\n+\n }\n ", "timestamp": 1029583989, "metainfo": ""}