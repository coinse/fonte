{"sha": "d4c9c2c7bf40044db837f1bdf55d87d27c047221", "log": "COLLECTIONS-364 DualTreeBidiMap.readObject() uses wrong comparator to create reverseMap  ", "commit": "\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         normalMap = new TreeMap(comparator);\n-        reverseMap = new TreeMap(comparator);\n+        reverseMap = new TreeMap(valueComparator);\n         Map map = (Map) in.readObject();\n         putAll(map);\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import java.util.TreeMap;\n  * @author Stephen Colebourne\n  * @author Jonas Van Poucke\n  */\n+@SuppressWarnings(\"boxing\")\n public class TestDualTreeBidiMap2<K extends Comparable<K>, V extends Comparable<V>> extends AbstractTestSortedBidiMap<K, V> {\n \n     public static Test suite() {\n         assertTrue(bidi.comparator() instanceof ReverseComparator);\n     }\n \n+    public void testComparator2() {\n+        DualTreeBidiMap<String, Integer> dtbm = new DualTreeBidiMap<String, Integer>(\n+                String.CASE_INSENSITIVE_ORDER, null);\n+        dtbm.put(\"two\", 0);\n+        dtbm.put(\"one\", 1);\n+        assertEquals(\"one\", dtbm.firstKey());\n+        assertEquals(\"two\", dtbm.lastKey());\n+        \n+    }\n+\n     public void testSerializeDeserializeCheckComparator() throws Exception {\n         SortedBidiMap<?, ?> obj = makeObject();\n         if (obj instanceof Serializable && isTestSerialization()) {\n             Object dest = in.readObject();\n             in.close();\n \n-            SortedBidiMap bidi = (SortedBidiMap) dest;\n+            SortedBidiMap<?,?> bidi = (SortedBidiMap<?,?>) dest;\n             assertNotNull(obj.comparator());\n             assertNotNull(bidi.comparator());\n             assertTrue(bidi.comparator() instanceof ReverseComparator);\n         }\n+    }\n+\n+    private static class IntegerComparator implements Comparator<Integer>, java.io.Serializable{\n+        private static final long serialVersionUID = 1L;\n+        public int compare(Integer o1, Integer o2) {\n+            return o1.compareTo(o2);\n+        }\n+    }\n+\n+    public void testCollections364() throws Exception {\n+        DualTreeBidiMap<String, Integer> original = new DualTreeBidiMap<String, Integer>(\n+                String.CASE_INSENSITIVE_ORDER, new IntegerComparator());\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(buffer);\n+        out.writeObject(original);\n+        out.close();\n+\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+        @SuppressWarnings(\"unchecked\")\n+        DualTreeBidiMap<String, Integer> deserialised = (DualTreeBidiMap<String, Integer>) in.readObject();\n+        in.close();\n+\n+        assertNotNull(original.comparator());\n+        assertNotNull(deserialised.comparator());\n+        assertEquals(original.comparator().getClass(), deserialised.comparator().getClass());\n+        assertEquals(original.valueComparator().getClass(), deserialised.valueComparator().getClass());\n     }\n \n     public void testSortOrder() throws Exception {", "timestamp": 1287428069, "metainfo": ""}