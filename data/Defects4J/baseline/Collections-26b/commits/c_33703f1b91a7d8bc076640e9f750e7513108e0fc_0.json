{"sha": "33703f1b91a7d8bc076640e9f750e7513108e0fc", "log": "Applying Mark Hindess' patch from COLLECTIONS-232 that cleans up the ordering of various assertEquals to be expected,actual and not actual,expected and also fixes various assertEquals to assertNulls where applicable  ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestArrayList.java\n+++ b/src/test/org/apache/commons/collections/TestArrayList.java\n     //-----------------------------------------------------------------------\n     public void testNewArrayList() {\n         assertTrue(\"New list is empty\", list.isEmpty());\n-        assertEquals(\"New list has size zero\", list.size(), 0);\n+        assertEquals(\"New list has size zero\", 0, list.size());\n \n         try {\n             list.get(1);\n     public void testSearch() {\n         list.add(\"First Item\");\n         list.add(\"Last Item\");\n-        assertEquals(\"First item is 'First Item'\", list.get(0), \"First Item\");\n-        assertEquals(\"Last Item is 'Last Item'\", list.get(1), \"Last Item\");\n+        assertEquals(\"First item is 'First Item'\", \"First Item\", list.get(0));\n+        assertEquals(\"Last Item is 'Last Item'\", \"Last Item\", list.get(1));\n     }\n \n }\n--- a/src/test/org/apache/commons/collections/TestArrayStack.java\n+++ b/src/test/org/apache/commons/collections/TestArrayStack.java\n     public void testNewStack() {\n \n         assertTrue(\"New stack is empty\", stack.empty());\n-        assertEquals(\"New stack has size zero\", stack.size(), 0);\n+        assertEquals(\"New stack has size zero\", 0, stack.size());\n \n         try {\n             stack.peek();\n \n         stack.push(\"First Item\");\n         assertTrue(\"Stack is not empty\", !stack.empty());\n-        assertEquals(\"Stack size is one\", stack.size(), 1);\n+        assertEquals(\"Stack size is one\", 1, stack.size());\n         assertEquals(\"Top item is 'First Item'\",\n-                     (String) stack.peek(), \"First Item\");\n-        assertEquals(\"Stack size is one\", stack.size(), 1);\n+                     \"First Item\", (String) stack.peek());\n+        assertEquals(\"Stack size is one\", 1, stack.size());\n \n         stack.push(\"Second Item\");\n-        assertEquals(\"Stack size is two\", stack.size(), 2);\n+        assertEquals(\"Stack size is two\", 2, stack.size());\n         assertEquals(\"Top item is 'Second Item'\",\n-                     (String) stack.peek(), \"Second Item\");\n-        assertEquals(\"Stack size is two\", stack.size(), 2);\n+                     \"Second Item\", (String) stack.peek());\n+        assertEquals(\"Stack size is two\", 2, stack.size());\n \n         assertEquals(\"Popped item is 'Second Item'\",\n-                     (String) stack.pop(), \"Second Item\");\n+                     \"Second Item\", (String) stack.pop());\n         assertEquals(\"Top item is 'First Item'\",\n-                     (String) stack.peek(), \"First Item\");\n-        assertEquals(\"Stack size is one\", stack.size(), 1);\n+                     \"First Item\", (String) stack.peek());\n+        assertEquals(\"Stack size is one\", 1, stack.size());\n \n         assertEquals(\"Popped item is 'First Item'\",\n-                     (String) stack.pop(), \"First Item\");\n-        assertEquals(\"Stack size is zero\", stack.size(), 0);\n+                     \"First Item\", (String) stack.pop());\n+        assertEquals(\"Stack size is zero\", 0, stack.size());\n \n     }\n \n         stack.push(\"First Item\");\n         stack.push(\"Second Item\");\n         assertEquals(\"Top item is 'Second Item'\",\n-                     stack.search(\"Second Item\"), 1);\n+                     1, stack.search(\"Second Item\"));\n         assertEquals(\"Next Item is 'First Item'\",\n-                     stack.search(\"First Item\"), 2);\n+                     2, stack.search(\"First Item\"));\n         assertEquals(\"Cannot find 'Missing Item'\",\n-                     stack.search(\"Missing Item\"), -1);\n+                     -1, stack.search(\"Missing Item\"));\n \n     }\n \n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n         testPredicate = PredicateUtils.equalPredicate(\"de\");\n         test = CollectionUtils.find(collectionA, testPredicate);\n         assertTrue(test == null);\n-        assertEquals(CollectionUtils.find(null,testPredicate), null);\n-        assertEquals(CollectionUtils.find(collectionA, null), null);\n+        assertNull(CollectionUtils.find(null,testPredicate));\n+        assertNull(CollectionUtils.find(collectionA, null));\n     }\n     \n     public void testForAllDo() {\n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n         /*\n          * should be empty and return null\n          */\n-        assertEquals(\"This returns null\", eprop.getProperty(\"foo\"), null);\n+        assertNull(\"This returns null\", eprop.getProperty(\"foo\"));\n \n         /*\n          *  add a real value, and get it two different ways\n          */\n         eprop.setProperty(\"number\", \"1\");\n-        assertEquals(\"This returns '1'\", eprop.getProperty(\"number\"), \"1\");\n-        assertEquals(\"This returns '1'\", eprop.getString(\"number\"), \"1\");\n+        assertEquals(\"This returns '1'\", \"1\", eprop.getProperty(\"number\"));\n+        assertEquals(\"This returns '1'\", \"1\", eprop.getString(\"number\"));\n \n         /*\n          * now add another and get a Vector/list\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n         Transformer transformer = TransformerUtils.asTransformer(factory);\n         map = MapUtils.lazyMap(new HashMap(), transformer);\n         assertTrue(map instanceof LazyMap);\n-         try {\n+        try {\n             map = MapUtils.lazyMap(new HashMap(), (Transformer) null);\n             fail(\"Expecting IllegalArgumentException for null transformer\");\n         } catch (IllegalArgumentException e) {\n         assertTrue( inKeySet.equals( outValSet ));\n         assertTrue( inValSet.equals( outKeySet ));\n \n-        assertEquals( out.get(\"A\"), \"1\" );\n-        assertEquals( out.get(\"B\"), \"2\" );\n-        assertEquals( out.get(\"C\"), \"3\" );\n-        assertEquals( out.get(\"D\"), \"4\" );\n-        assertEquals( out.get(\"E\"), \"5\" );\n+        assertEquals( \"1\", out.get(\"A\"));\n+        assertEquals( \"2\", out.get(\"B\"));\n+        assertEquals( \"3\", out.get(\"C\"));\n+        assertEquals( \"4\", out.get(\"D\"));\n+        assertEquals( \"5\", out.get(\"E\"));\n     }\n \n     public void testPutAll_Map_array() {\n--- a/src/test/org/apache/commons/collections/TestTreeMap.java\n+++ b/src/test/org/apache/commons/collections/TestTreeMap.java\n \n     public void testNewMap() {\n         assertTrue(\"New map is empty\", map.isEmpty());\n-        assertEquals(\"New map has size zero\", map.size(), 0);\n+        assertEquals(\"New map has size zero\", 0, map.size());\n     }\n \n     public void testSearch() {\n         map.put(\"first\", \"First Item\");\n         map.put(\"second\", \"Second Item\");\n-        assertEquals(\"Top item is 'Second Item'\", map.get(\"first\"), \"First Item\");\n-        assertEquals(\"Next Item is 'First Item'\", map.get(\"second\"), \"Second Item\");\n+        assertEquals(\"Top item is 'Second Item'\",\n+            \"First Item\", map.get(\"first\"));\n+        assertEquals(\"Next Item is 'First Item'\",\n+            \"Second Item\", map.get(\"second\"));\n     }\n }\n--- a/src/test/org/apache/commons/collections/buffer/TestPredicatedBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestPredicatedBuffer.java\n         buffer.add(\"one\");\n         buffer.add(\"two\");\n         buffer.add(\"three\");\n-        assertEquals(\"Buffer get\", buffer.get(), \"three\");\n+        assertEquals(\"Buffer get\", \"three\", buffer.get());\n     }\n     \n     public void testRemove() {\n         Buffer buffer = makeTestBuffer();\n         buffer.add(\"one\");\n-        assertEquals(\"Buffer get\", buffer.remove(), \"one\");\n+        assertEquals(\"Buffer get\", \"one\", buffer.remove());\n         try {\n             buffer.remove();\n             fail(\"Expecting BufferUnderflowException\");\n--- a/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n         Object[] a = new Object[] { new Object(), null, null };\n         Object[] array = collection.toArray(a);\n         assertEquals(\"Given array shouldn't shrink\", array, a);\n-        assertEquals(\"Last element should be set to null\", a[0], null);\n+        assertNull(\"Last element should be set to null\", a[0]);\n         verify();\n \n         resetFull();\n--- a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n         c.addComposited(one, two);    \n         c.removeComposited(one);\n         assertTrue(c.contains(\"1\"));\n-        assertEquals(c.size(), 2);\n+        assertEquals(2, c.size());\n     }\n }\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n         Object[] other = getOtherElements();\n         for (int i = 0; i < other.length; i++) {\n             assertEquals(\"indexOf should return -1 for nonexistent element\",\n-                list1.indexOf(other[i]), -1);\n+                -1, list1.indexOf(other[i]));\n             verify();\n         }\n     }\n         Object[] other = getOtherElements();\n         for (int i = 0; i < other.length; i++) {\n             assertEquals(\"lastIndexOf should return -1 for nonexistent \" +\n-              \"element\", list1.lastIndexOf(other[i]), -1);\n+                \"element\", -1, list1.lastIndexOf(other[i]));\n             verify();\n         }\n     }\n         while (i < max) {\n             assertTrue(\"Iterator should have next\", iter.hasNext());\n             assertEquals(\"Iterator.nextIndex should work\", \n-              iter.nextIndex(), i);\n+                i, iter.nextIndex());\n             assertEquals(\"Iterator.previousIndex should work\",\n-              iter.previousIndex(), i - 1);\n+                i - 1, iter.previousIndex());\n             Object o = iter.next();\n             assertEquals(\"Iterator returned correct element\", list.get(i), o);\n             i++;\n         }\n \n         assertTrue(\"Iterator shouldn't have next\", !iter.hasNext());\n-        assertEquals(\"nextIndex should be size\", iter.nextIndex(), max);\n+        assertEquals(\"nextIndex should be size\", max, iter.nextIndex());\n         assertEquals(\"previousIndex should be size - 1\", \n-          iter.previousIndex(), max - 1);\n+            max - 1, iter.previousIndex());\n \n         try {\n             iter.next();\n         List list = getList();\n \n         while (i > 0) {\n-            assertTrue(\"Iterator should have previous, i:\" + i, iter.hasPrevious());\n-            assertEquals(\"Iterator.nextIndex should work, i:\" + i, iter.nextIndex(), i);\n-            assertEquals(\"Iterator.previousIndex should work, i:\" + i, iter.previousIndex(), i - 1);\n+            assertTrue(\"Iterator should have previous, i:\" + i,\n+                iter.hasPrevious());\n+            assertEquals(\"Iterator.nextIndex should work, i:\" + i,\n+                i, iter.nextIndex());\n+            assertEquals(\"Iterator.previousIndex should work, i:\" + i,\n+                i - 1, iter.previousIndex());\n             Object o = iter.previous();\n-            assertEquals(\"Iterator returned correct element\", list.get(i - 1), o);\n+            assertEquals(\"Iterator returned correct element\",\n+                list.get(i - 1), o);\n             i--;\n         }\n \n         assertTrue(\"Iterator shouldn't have previous\", !iter.hasPrevious());\n         int nextIndex = iter.nextIndex();\n-        assertEquals(\"nextIndex should be 0, actual value: \" + nextIndex, nextIndex, 0);\n+        assertEquals(\"nextIndex should be 0\", 0, nextIndex);\n         int prevIndex = iter.previousIndex();\n-        assertEquals(\"previousIndex should be -1, actual value: \" + prevIndex, prevIndex, -1);\n+        assertEquals(\"previousIndex should be -1\", -1, prevIndex);\n \n         try {\n             iter.previous();\n         byte[] objekt = writeExternalFormToBytes((Serializable) list);\n         List list2 = (List) readExternalFormFromBytes(objekt);\n \n-        assertTrue(\"Both lists are empty\",list.size()  == 0);\n-        assertTrue(\"Both lists are empty\",list2.size() == 0);\n+        assertEquals(\"Both lists are empty\", 0, list.size());\n+        assertEquals(\"Both lists are empty\", 0, list2.size());\n     }\n \n     public void testFullListSerialization() \n         byte[] objekt = writeExternalFormToBytes((Serializable) list);\n         List list2 = (List) readExternalFormFromBytes(objekt);\n \n-        assertEquals(\"Both lists are same size\",list.size(), size);\n-        assertEquals(\"Both lists are same size\",list2.size(), size);\n+        assertEquals(\"Both lists are same size\", size, list.size());\n+        assertEquals(\"Both lists are same size\", size, list2.size());\n     }\n \n     /**\n         List list = makeEmptyList();\n         if(list instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             List list2 = (List) readExternalFormFromDisk(getCanonicalEmptyCollectionName(list));\n-            assertTrue(\"List is empty\",list2.size()  == 0);\n+            assertEquals(\"List is empty\", 0, list2.size());\n             assertEquals(list, list2);\n         }\n     }\n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n         int size = map.size();\n         for (int i = 0; i < other.length; i++) {\n             Object o = map.remove(other[i]);\n-            assertEquals(\"map.remove for nonexistent key should return null\",\n-                         o, null);\n+            assertNull(\"map.remove for nonexistent key should return null\", o);\n             assertEquals(\"map.remove for nonexistent key should not \" +\n                          \"shrink map\", size, map.size());\n         }\n--- a/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n         assertTrue(keys.contains(\"one\"));\n         assertTrue(keys.contains(\"two\"));\n         assertTrue(keys.contains(null));\n-        assertTrue(keys.size() == 3);\n+        assertEquals(3, keys.size());\n     }\n         \n     public void testPutAll() {\n         map.put(null, \"Four\");\n         map.put(new Integer(20), \"Five\");\n         Map caseInsensitiveMap = new CaseInsensitiveMap(map);\n-        assertTrue(caseInsensitiveMap.size() == 4); // ones collapsed\n+        assertEquals(4, caseInsensitiveMap.size()); // ones collapsed\n         Set keys = caseInsensitiveMap.keySet();\n         assertTrue(keys.contains(\"one\"));\n         assertTrue(keys.contains(\"two\"));\n         assertTrue(keys.contains(null));\n         assertTrue(keys.contains(Integer.toString(20)));\n-        assertTrue(keys.size() == 4);\n+        assertEquals(4, keys.size());\n         assertTrue(!caseInsensitiveMap.containsValue(\"One\") \n             || !caseInsensitiveMap.containsValue(\"Three\")); // ones collaped\n-        assertEquals(caseInsensitiveMap.get(null), \"Four\");\n+        assertEquals(\"Four\", caseInsensitiveMap.get(null));\n     } \n \n     public void testClone() {\n--- a/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n         map.put(\"A\",  \"a\");\n         map.get(\"B\"); // Entry with value \"One\" created\n         map.put(\"C\", \"c\");\n-        assertEquals(\"First key should be A\", map.firstKey(), \"A\");\n-        assertEquals(\"Last key should be C\", map.lastKey(), \"C\");\n+        assertEquals(\"First key should be A\", \"A\", map.firstKey());\n+        assertEquals(\"Last key should be C\", \"C\", map.lastKey());\n         assertEquals(\"First key in tail map should be B\", \n-            map.tailMap(\"B\").firstKey(), \"B\");\n+            \"B\", map.tailMap(\"B\").firstKey());\n         assertEquals(\"Last key in head map should be B\", \n-            map.headMap(\"C\").lastKey(), \"B\");\n+            \"B\", map.headMap(\"C\").lastKey());\n         assertEquals(\"Last key in submap should be B\",\n-           map.subMap(\"A\",\"C\").lastKey(), \"B\");\n+            \"B\", map.subMap(\"A\",\"C\").lastKey());\n         \n         Comparator c = map.comparator();\n         assertTrue(\"natural order, so comparator should be null\", \n--- a/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-        assertEquals(\"First key should be A\", map.firstKey(), \"A\");\n-        assertEquals(\"Last key should be C\", map.lastKey(), \"C\");\n+        assertEquals(\"First key should be A\", \"A\", map.firstKey());\n+        assertEquals(\"Last key should be C\", \"C\", map.lastKey());\n         assertEquals(\"First key in tail map should be B\", \n-            map.tailMap(\"B\").firstKey(), \"B\");\n+            \"B\", map.tailMap(\"B\").firstKey());\n         assertEquals(\"Last key in head map should be B\", \n-            map.headMap(\"C\").lastKey(), \"B\");\n+            \"B\", map.headMap(\"C\").lastKey());\n         assertEquals(\"Last key in submap should be B\",\n-           map.subMap(\"A\",\"C\").lastKey(), \"B\");\n+            \"B\", map.subMap(\"A\",\"C\").lastKey());\n         \n         Comparator c = map.comparator();\n         assertTrue(\"natural order, so comparator should be null\", ", "timestamp": 1178222084, "metainfo": ""}