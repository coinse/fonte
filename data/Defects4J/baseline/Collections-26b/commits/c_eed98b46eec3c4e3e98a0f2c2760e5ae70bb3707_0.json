{"sha": "eed98b46eec3c4e3e98a0f2c2760e5ae70bb3707", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471192 | scolebourne | 2006-11-04 06:04:46 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getList() - use decorated()     ------------------------------------------------------------------------     r471173 | scolebourne | 2006-11-04 04:07:39 -0800 (Sat, 04 Nov 2006) | 1 line          Abstract*Decorator - Generify and use covariant return types     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/AbstractListDecorator.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractListDecorator.java\n  * <p>\n  * Methods are forwarded directly to the decorated list.\n  *\n+ * @param <E> the type of the elements in the list\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractListDecorator extends AbstractCollectionDecorator implements List {\n+public abstract class AbstractListDecorator<E> extends AbstractCollectionDecorator<E> implements\n+        List<E> {\n+\n+    /** Serialization version--necessary in an abstract class? */\n+    private static final long serialVersionUID = 4500739654952315623L;\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    protected AbstractListDecorator(List list) {\n+    protected AbstractListDecorator(List<E> list) {\n         super(list);\n     }\n \n      * \n      * @return the decorated list\n      */\n-    protected List getList() {\n-        return (List) getCollection();\n+    protected List<E> decorated() {\n+        return (List<E>) super.decorated();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void add(int index, Object object) {\n-        getList().add(index, object);\n+    public void add(int index, E object) {\n+        decorated().add(index, object);\n     }\n \n-    public boolean addAll(int index, Collection coll) {\n-        return getList().addAll(index, coll);\n+    public boolean addAll(int index, Collection<? extends E> coll) {\n+        return decorated().addAll(index, coll);\n     }\n \n-    public Object get(int index) {\n-        return getList().get(index);\n+    public E get(int index) {\n+        return decorated().get(index);\n     }\n \n     public int indexOf(Object object) {\n-        return getList().indexOf(object);\n+        return decorated().indexOf(object);\n     }\n \n     public int lastIndexOf(Object object) {\n-        return getList().lastIndexOf(object);\n+        return decorated().lastIndexOf(object);\n     }\n \n-    public ListIterator listIterator() {\n-        return getList().listIterator();\n+    public ListIterator<E> listIterator() {\n+        return decorated().listIterator();\n     }\n \n-    public ListIterator listIterator(int index) {\n-        return getList().listIterator(index);\n+    public ListIterator<E> listIterator(int index) {\n+        return decorated().listIterator(index);\n     }\n \n-    public Object remove(int index) {\n-        return getList().remove(index);\n+    public E remove(int index) {\n+        return decorated().remove(index);\n     }\n \n-    public Object set(int index, Object object) {\n-        return getList().set(index, object);\n+    public E set(int index, E object) {\n+        return decorated().set(index, object);\n     }\n \n-    public List subList(int fromIndex, int toIndex) {\n-        return getList().subList(fromIndex, toIndex);\n+    public List<E> subList(int fromIndex, int toIndex) {\n+        return decorated().subList(fromIndex, toIndex);\n     }\n \n }", "timestamp": 1252994135, "metainfo": ""}