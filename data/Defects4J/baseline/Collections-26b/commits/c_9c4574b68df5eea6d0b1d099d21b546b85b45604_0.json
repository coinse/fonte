{"sha": "9c4574b68df5eea6d0b1d099d21b546b85b45604", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471202 | scolebourne | 2006-11-04 06:21:44 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getCollection() - use covariant decorated()     ------------------------------------------------------------------------     r471192 | scolebourne | 2006-11-04 06:04:46 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getList() - use decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n+++ b/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n  *\n  * @author Stephen Colebourne\n  */\n-public final class UnmodifiableList\n-        extends AbstractSerializableListDecorator\n+public final class UnmodifiableList<E>\n+        extends AbstractSerializableListDecorator<E>\n         implements Unmodifiable {\n \n     /** Serialization version */\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    public static List decorate(List list) {\n+    public static <E> List<E> decorate(List<E> list) {\n         if (list instanceof Unmodifiable) {\n             return list;\n         }\n-        return new UnmodifiableList(list);\n+        return new UnmodifiableList<E>(list);\n     }\n \n     //-----------------------------------------------------------------------\n      * \n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n+     * @since Commons Collection 5\n      */\n-    private UnmodifiableList(List list) {\n+    public UnmodifiableList(List<E> list) {\n         super(list);\n     }\n \n     //-----------------------------------------------------------------------\n-    public Iterator iterator() {\n-        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    public Iterator<E> iterator() {\n+        return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n     public boolean add(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean addAll(Collection coll) {\n+    public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean removeAll(Collection coll) {\n+    public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean retainAll(Collection coll) {\n+    public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n-    public ListIterator listIterator() {\n-        return UnmodifiableListIterator.decorate(getList().listIterator());\n+    public ListIterator<E> listIterator() {\n+        return UnmodifiableListIterator.decorate(decorated().listIterator());\n     }\n \n-    public ListIterator listIterator(int index) {\n-        return UnmodifiableListIterator.decorate(getList().listIterator(index));\n+    public ListIterator<E> listIterator(int index) {\n+        return UnmodifiableListIterator.decorate(decorated().listIterator(index));\n     }\n \n-    public void add(int index, Object object) {\n+    public void add(int index, E object) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public boolean addAll(int index, Collection coll) {\n+    public boolean addAll(int index, Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public Object remove(int index) {\n+    public E remove(int index) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public Object set(int index, Object object) {\n+    public E set(int index, E object) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public List subList(int fromIndex, int toIndex) {\n-        List sub = getList().subList(fromIndex, toIndex);\n-        return new UnmodifiableList(sub);\n+    public List<E> subList(int fromIndex, int toIndex) {\n+        List<E> sub = decorated().subList(fromIndex, toIndex);\n+        return new UnmodifiableList<E>(sub);\n     }\n \n }", "timestamp": 1252994147, "metainfo": ""}