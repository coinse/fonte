{"sha": "83119a80aa1551bea003ea6b9e65b616b7795246", "log": "Fields can be private  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/trie/PatriciaTrie.java\n+++ b/src/main/java/org/apache/commons/collections4/trie/PatriciaTrie.java\n        /** \n         * The key to start from, null if the beginning. \n         */\n-       protected final K fromKey;\n+       private final K fromKey;\n        \n        /** \n         * The key to end at, null if till the end. \n         */\n-       protected final K toKey;\n+       private final K toKey;\n        \n        /** \n         * Whether or not the 'from' is inclusive. \n         */\n-       protected final boolean fromInclusive;\n+       private final boolean fromInclusive;\n        \n        /** \n         * Whether or not the 'to' is inclusive. \n         */\n-       protected final boolean toInclusive;\n+       private final boolean toInclusive;\n        \n        /**\n         * Creates a {@link RangeEntryMap} with the fromKey included and\n         private final class EntryIterator extends TrieIterator<Map.Entry<K, V>> {\n             \n             // values to reset the subtree if we remove it.\n-            protected final K prefix; \n-            protected final int offset;\n-            protected final int lengthInBits;\n-            protected boolean lastOne;\n-            \n-            protected TrieEntry<K, V> subtree; // the subtree to search within\n+            private final K prefix; \n+            private final int offset;\n+            private final int lengthInBits;\n+            private boolean lastOne;\n+            \n+            private TrieEntry<K, V> subtree; // the subtree to search within\n             \n             /**\n              * Starts iteration at the given entry & search only ", "timestamp": 1367329479, "metainfo": ""}