{"sha": "b3d25eb72145d06d9ebe26edb454825737f04703", "log": "Add generic type description in javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ClosureUtils.java\n      *\n      * @see org.apache.commons.collections.functors.ExceptionClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @return the closure\n      */\n     public static <E> Closure<E> exceptionClosure() {\n      * This could be useful during testing as a placeholder.\n      *\n      * @see org.apache.commons.collections.functors.NOPClosure\n-     * \n+     *\n+     * @param <E>  the type that the closure acts on\n      * @return the closure\n      */\n     public static <E> Closure<E> nopClosure() {\n      *\n      * @see org.apache.commons.collections.functors.TransformerClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param transformer  the transformer to run each time in the closure, null means nop\n      * @return the closure\n      */\n      *\n      * @see org.apache.commons.collections.functors.ForClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param count  the number of times to loop\n      * @param closure  the closure to call repeatedly\n      * @return the <code>for</code> closure\n      *\n      * @see org.apache.commons.collections.functors.WhileClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param predicate  the predicate to use as an end of loop test, not null\n      * @param closure  the closure to call repeatedly, not null\n      * @return the <code>while</code> closure\n      *\n      * @see org.apache.commons.collections.functors.WhileClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param closure  the closure to call repeatedly, not null\n      * @param predicate  the predicate to use as an end of loop test, not null\n      * @return the <code>do-while</code> closure\n      * @throws IllegalArgumentException if either argument is null\n      */\n-    public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure, final Predicate<? super E> predicate) {\n+    public static <E> Closure<E> doWhileClosure(final Closure<? super E> closure,\n+                                                final Predicate<? super E> predicate) {\n         return WhileClosure.<E>whileClosure(predicate, closure, true);\n     }\n \n      * @see org.apache.commons.collections.functors.InvokerTransformer\n      * @see org.apache.commons.collections.functors.TransformerClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param methodName  the name of the method\n      * @return the <code>invoker</code> closure\n      * @throws IllegalArgumentException if the method name is null\n      *\n      * @see org.apache.commons.collections.functors.InvokerTransformer\n      * @see org.apache.commons.collections.functors.TransformerClosure\n-     * \n+     *\n+     * @param <E>  the type that the closure acts on\n      * @param methodName  the name of the method\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * \n      * @see org.apache.commons.collections.functors.ChainedClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param closure1  the first closure\n      * @param closure2  the second closure\n      * @return the <code>chained</code> closure\n      * \n      * @see org.apache.commons.collections.functors.ChainedClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param closures  an array of closures to chain\n      * @return the <code>chained</code> closure\n      * @throws IllegalArgumentException if the closures array is null\n      * \n      * @see org.apache.commons.collections.functors.ChainedClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param closures  a collection of closures to chain\n      * @return the <code>chained</code> closure\n      * @throws IllegalArgumentException if the closures collection is null\n      * \n      * @see org.apache.commons.collections.functors.IfClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param predicate  the validating predicate\n      * @param trueClosure  the closure called if the predicate is true\n      * @return the <code>if</code> closure\n      * \n      * @see org.apache.commons.collections.functors.IfClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param predicate  the predicate to switch on\n      * @param trueClosure  the closure called if the predicate is true\n      * @param falseClosure  the closure called if the predicate is false\n      * \n      * @see org.apache.commons.collections.functors.SwitchClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param predicates  an array of predicates to check, not null\n      * @param closures  an array of closures to call, not null\n      * @return the <code>switch</code> closure\n      * \n      * @see org.apache.commons.collections.functors.SwitchClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param predicates  an array of predicates to check, not null\n      * @param closures  an array of closures to call, not null\n      * @param defaultClosure  the default to call if no predicate matches\n      * \n      * @see org.apache.commons.collections.functors.SwitchClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param predicatesAndClosures  a map of predicates to closures\n      * @return the <code>switch</code> closure\n      * @throws IllegalArgumentException if the map is null\n      * \n      * @see org.apache.commons.collections.functors.SwitchClosure\n      * \n+     * @param <E>  the type that the closure acts on\n      * @param objectsAndClosures  a map of objects to closures\n      * @return the closure\n      * @throws IllegalArgumentException if the map is null", "timestamp": 1358771457, "metainfo": ""}