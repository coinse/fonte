{"sha": "ea11630b2d18338e21b27fb3d434395e1339fa83", "log": "Improve performance by not using local variables in iterator loops Javadoc null comment tidying from Peter KoBek   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.26 2003/01/20 01:29:30 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.27 2003/01/25 11:29:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A set of {@link Collection} related utility methods.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.26 $ $Date: 2003/01/20 01:29:30 $\n+ * @version $Revision: 1.27 $ $Date: 2003/01/25 11:29:37 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     /** \n      * Executes the given closure on each element in the collection.\n      * <p>\n-     * If the input collection is null, there is no change made.\n+     * If the input collection or closure is null, there is no change made.\n      * \n      * @param collection  the collection to get the input from, may be null\n-     * @param closure  the closure to perform, may not be null\n-     * @throws NullPointerException if the closure is null\n+     * @param closure  the closure to perform, may be null\n      */\n     public static void forAllDo(Collection collection, Closure closure) {\n-        if (collection != null) {\n-            for (Iterator iter = collection.iterator(); iter.hasNext();) {\n-                Object element = iter.next();\n-                closure.execute(element);\n+        if (collection != null && closure != null) {\n+            for (Iterator it = collection.iterator(); it.hasNext();) {\n+                closure.execute(it.next());\n             }\n         }\n     }\n      */\n     public static void filter(Collection collection, Predicate predicate) {\n         if (collection != null && predicate != null) {\n-            for (Iterator iter = collection.iterator(); iter.hasNext();) {\n-                Object element = iter.next();\n-                if (predicate.evaluate(element) == false) {\n-                    iter.remove();\n+            for (Iterator it = collection.iterator(); it.hasNext();) {\n+                if (predicate.evaluate(it.next()) == false) {\n+                    it.remove();\n                 }\n             }\n         }\n         if (collection != null && transformer != null) {\n             if (collection instanceof List) {\n                 List list = (List) collection;\n-                for (ListIterator iter = list.listIterator(); iter.hasNext();) {\n-                    Object element = iter.next();\n-                    iter.set(transformer.transform(element));\n+                for (ListIterator it = list.listIterator(); it.hasNext();) {\n+                    it.set(transformer.transform(it.next()));\n                 }\n             } else {\n                 Collection resultCollection = collect(collection, transformer);\n     /** \n      * Counts the number of elements in the input collection that match the predicate.\n      * <p>\n-     * A <code>null</code> predicate matches no elements.\n-     * \n-     * @param inputCollection  the collection to get the input from, may not be null\n+     * A <code>null</code> collection or predicate matches no elements.\n+     * \n+     * @param inputCollection  the collection to get the input from, may be null\n      * @param predicate  the predicate to use, may be null\n      * @return the number of matches for the predicate in the collection\n-     * @throws NullPointerException if the input collection is null\n      */\n     public static int countMatches(Collection inputCollection, Predicate predicate) {\n         int count = 0;\n         if (inputCollection != null && predicate != null) {\n             for (Iterator it = inputCollection.iterator(); it.hasNext();) {\n-                Object item = it.next();\n-                if (predicate.evaluate(item)) {\n+                if (predicate.evaluate(it.next())) {\n                     count++;\n                 }\n             }", "timestamp": 1043494177, "metainfo": ""}