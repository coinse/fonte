{"sha": "a9b11e2cf29b824a638f0a03b662d412d2c7b140", "log": "Cleanup of buffer package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n \n /**\n- * Decorates another <code>Buffer</code> to provide additional behaviour.\n+ * Decorates another {@link Buffer} to provide additional behaviour.\n  * <p>\n  * Methods are forwarded directly to the decorated buffer.\n  *\n  * @param <E> the type of the elements in the buffer\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n-public abstract class AbstractBufferDecorator<E> extends AbstractCollectionDecorator<E> implements\n-        Buffer<E> {\n+public abstract class AbstractBufferDecorator<E> extends AbstractCollectionDecorator<E>\n+        implements Buffer<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -2629815475789577029L;\n--- a/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n import org.apache.commons.collections.BufferUnderflowException;\n \n /**\n- * Decorates another <code>Buffer</code> to make {@link #get()} and\n+ * Decorates another {@link Buffer} to make {@link #get()} and\n  * {@link #remove()} block when the <code>Buffer</code> is empty.\n  * <p>\n  * If either <code>get</code> or <code>remove</code> is called on an empty\n- * <code>Buffer</code>, the calling thread waits for notification that\n+ * {@link Buffer}, the calling thread waits for notification that\n  * an <code>add</code> or <code>addAll</code> operation has completed.\n  * <p>\n- * When one or more entries are added to an empty <code>Buffer</code>,\n+ * When one or more entries are added to an empty {@link Buffer},\n  * all threads blocked in <code>get</code> or <code>remove</code> are notified.\n  * There is no guarantee that concurrent blocked <code>get</code> or\n  * <code>remove</code> requests will be \"unblocked\" and receive data in the\n  * This class contains an extra field in 3.2, however the serialization\n  * specification will handle this gracefully.\n  *\n- * @author Stephen Colebourne\n- * @author Janek Bogucki\n- * @author Phil Steitz\n- * @author James Carman\n  * @param <E> the type of the elements in the buffer\n  * @version $Revision$\n  * @since Commons Collections 3.0\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n \n /**\n- * Decorates another <code>Buffer</code> to ensure a fixed maximum size.\n+ * Decorates another {@link Buffer} to ensure a fixed maximum size.\n  * <p>\n  * Note: This class should only be used if you need to add bounded\n  * behaviour to another buffer. If you just want a bounded buffer then\n  * With a timeout, the add methods will wait for up to the timeout period\n  * to try and add the elements.\n  *\n- * @author James Carman\n- * @author Stephen Colebourne\n- * @version $Revision$\n  * @since Commons Collections 3.2\n+ * @version $Id$\n  */\n public class BoundedBuffer<E> extends SynchronizedBuffer<E> implements BoundedCollection<E> {\n \n      * Factory method to create a bounded buffer.\n      * <p>\n      * When the buffer is full, it will immediately throw a\n-     * <code>BufferOverflowException</code> on calling <code>add()</code>.\n+     * <code>BufferOverflowException</code> on calling {@link #add(Object)}.\n      *\n      * @param <E> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n         return new NotifyingIterator(collection.iterator());\n     }\n \n+    /**\n+     * Waits up to the specified timeout period that the given number of additions\n+     * can be made to the buffer.\n+     *\n+     * @param nAdditions the number of additions\n+     * @throws BufferOverflowException if the number of additions would overflow the buffer,\n+     * or the timeout has expired\n+     */\n     private void timeoutWait(final int nAdditions) {\n         // method synchronized by callers\n         if (nAdditions > maximumSize) {\n      */\n     private class NotifyingIterator extends AbstractIteratorDecorator<E> {\n \n+        /**\n+         * Create a new {@link NotifyingIterator}.\n+         * \n+         * @param it the decorated {@link Iterator}\n+         */\n         public NotifyingIterator(Iterator<E> it) {\n             super(it);\n         }\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n import org.apache.commons.collections.BufferUnderflowException;\n \n /**\n- * The BoundedFifoBuffer is a very efficient implementation of\n- * <code>Buffer</code> that is of a fixed size.\n+ * The {@link BoundedFifoBuffer} is a very efficient implementation of a\n+ * {@link Buffer} with a fixed size.\n  * <p>\n- * The removal order of a <code>BoundedFifoBuffer</code> is based on the\n+ * The removal order of a {@link BoundedFifoBuffer} is based on the\n  * insertion order; elements are removed in the same order in which they\n  * were added.  The iteration order is the same as the removal order.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision$\n- *\n- * @author Avalon\n- * @author Berin Loritsch\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Herve Quiroz\n+ * @version $Id$\n  */\n public class BoundedFifoBuffer<E> extends AbstractCollection<E>\n         implements Buffer<E>, BoundedCollection<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n  * CircularFifoBuffer is a first in first out buffer with a fixed size that\n  * replaces its oldest element if full.\n  * <p>\n- * The removal order of a <code>CircularFifoBuffer</code> is based on the\n+ * The removal order of a {@link CircularFifoBuffer} is based on the\n  * insertion order; elements are removed in the same order in which they\n  * were added.  The iteration order is the same as the removal order.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stefano Fornari\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class CircularFifoBuffer<E> extends BoundedFifoBuffer<E> {\n \n--- a/src/main/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n import org.apache.commons.collections.collection.PredicatedCollection;\n \n /**\n- * Decorates another <code>Buffer</code> to validate that additions\n+ * Decorates another {@link Buffer} to validate that additions\n  * match a specified predicate.\n  * <p>\n  * This buffer exists to provide validation for the decorated buffer.\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedBuffer<E> extends PredicatedCollection<E> implements Buffer<E> {\n \n--- a/src/main/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n import org.apache.commons.collections.comparators.ComparableComparator;\n \n /**\n- * Binary heap implementation of <code>Buffer</code> that provides for\n+ * Binary heap implementation of {@link Buffer} that provides for\n  * removal based on <code>Comparator</code> ordering.\n  * <p>\n  * The removal order of a binary heap is based on either the natural sort\n  * This class is Serializable from Commons Collections 3.2.\n  *\n  * @since Commons Collections 3.0 (previously BinaryHeap v1.0)\n- * @version $Revision$\n- *\n- * @author Peter Donald\n- * @author Ram Chidambaram\n- * @author Michael A. Smith\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Steve Phelps\n+ * @version $Id$\n  */\n public class PriorityBuffer<E> extends AbstractCollection<E> implements Buffer<E>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n import org.apache.commons.collections.collection.SynchronizedCollection;\n \n /**\n- * Decorates another <code>Buffer</code> to synchronize its behaviour\n+ * Decorates another {@link Buffer} to synchronize its behaviour\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated buffer.\n  *\n  * @param <E> the type of the elements in the buffer\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SynchronizedBuffer<E>\n         extends SynchronizedCollection<E>\n--- a/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n import org.apache.commons.collections.collection.TransformedCollection;\n \n /**\n- * Decorates another <code>Buffer</code> to transform objects that are added.\n+ * Decorates another {@link Buffer} to transform objects that are added.\n  * <p>\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedBuffer<E> extends TransformedCollection<E> implements Buffer<E> {\n \n--- a/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n \n /**\n  * UnboundedFifoBuffer is a very efficient implementation of\n- * <code>Buffer</code> that can grow to any size.\n+ * {@link Buffer} that can grow to any size.\n  * According to performance testing, it exhibits a constant access time, but it\n  * also outperforms ArrayList when used for the same purpose.\n  * <p>\n- * The removal order of an <code>UnboundedFifoBuffer</code> is based on the insertion\n+ * The removal order of an {@link UnboundedFifoBuffer} is based on the insertion\n  * order; elements are removed in the same order in which they were added.\n  * The iteration order is the same as the removal order.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision$\n- *\n- * @author Avalon\n- * @author Federico Barbieri\n- * @author Berin Loritsch\n- * @author Paul Jack\n- * @author Stephen Colebourne\n- * @author Andreas Schlosser\n- * @author Thomas Knych\n- * @author Jordan Krey\n+ * @version $Id$\n  */\n public class UnboundedFifoBuffer<E> extends AbstractCollection<E> implements Buffer<E>, Serializable {\n     // invariant: buffer.length > size()\n      * Write the buffer out using a custom routine.\n      *\n      * @param out  the output stream\n-     * @throws IOException\n+     * @throws IOException if an I/O error occurs while writing to the output stream\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * Read the buffer in using a custom routine.\n      *\n      * @param in  the input stream\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n+     * @throws IOException if an I/O error occurs while reading from the input stream\n+     * @throws ClassNotFoundException if the class of a serialized object can not be found\n      */\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n- * Decorates another <code>Buffer</code> to ensure it can't be altered.\n+ * Decorates another {@link Buffer} to ensure it can't be altered.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableBuffer<E>\n         extends AbstractBufferDecorator<E>\n      * Write the collection out using a custom routine.\n      * \n      * @param out  the output stream\n-     * @throws IOException\n+     * @throws IOException if an I/O error occurs while writing to the output stream\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * Read the collection in using a custom routine.\n      * \n      * @param in  the input stream\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n+     * @throws IOException if an I/O error occurs while reading from the input stream\n+     * @throws ClassNotFoundException if the class of a serialized object can not be found\n      */\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/buffer/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the\n+ * {@link org.apache.commons.collections.Buffer Buffer} interface.\n+ * <p>\n+ * The following implementations are provided in the package:\n+ * <ul>\n+ *   <li>PriorityBuffer - provides for removal based on a comparator ordering\n+ *   <li>BoundedFifoBuffer - implements a buffer with a fixed size that throws exceptions when full\n+ *   <li>CircularFifoBuffer - implements a buffer with a fixed size that discards oldest when full\n+ *   <li>UnboundedFifoBuffer - implements a buffer that grows in size if necessary\n+ * </ul>\n+ * <p>\n+ * The following decorators are provided in the package:\n+ * <ul>\n+ *   <li>Synchronized - synchronizes method access for multi-threaded environments\n+ *   <li>Unmodifiable - ensures the collection cannot be altered\n+ *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added\n+ *   <li>Typed - ensures that only elements that are of a specific type can be added\n+ *   <li>Transformed - transforms elements added to the buffer\n+ *   <li>Blocking - blocks on get and remove until an element is available\n+ * </ul>\n+ * \n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.buffer;", "timestamp": 1341347221, "metainfo": ""}