{"sha": "d684f950c4a29d10097590cbe4346ad6e82e5e25", "log": "[COLLECTIONS-551] First bunch of methods which take an Iterable/Iterator/Enumeration as input shall be moved to the appropriate Util classes. Mark existing methods in CollectionUtils as deprecated.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * @param transformer  the transformer to perform, may be null\n      */\n     public static <C> void transform(final Collection<C> collection,\n-            final Transformer<? super C, ? extends C> transformer) {\n+                                     final Transformer<? super C, ? extends C> transformer) {\n \n         if (collection != null && transformer != null) {\n             if (collection instanceof List<?>) {\n      * @param input  the {@link Iterable} to get the input from, may be null\n      * @param predicate  the predicate to use, may be null\n      * @return the number of matches for the predicate in the collection\n-     */\n+     * @deprecated since 4.1, use {@link IterableUtils#frequency(Iterable, Predicate)} instead\n+     */\n+    @Deprecated\n     public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n-        int count = 0;\n-        if (input != null && predicate != null) {\n-            for (final C o : input) {\n-                if (predicate.evaluate(o)) {\n-                    count++;\n-                }\n-            }\n-        }\n-        return count;\n+        return predicate == null ? 0 : (int) IterableUtils.frequency(input, predicate);\n     }\n \n     /**\n      * @param input  the {@link Iterable} to get the input from, may be null\n      * @param predicate  the predicate to use, may be null\n      * @return true if at least one element of the collection matches the predicate\n-     */\n+     * @deprecated since 4.1, use {@link IterableUtils#matchesAny(Iterable, Predicate)} instead\n+     */\n+    @Deprecated\n     public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n-        if (input != null && predicate != null) {\n-            for (final C o : input) {\n-                if (predicate.evaluate(o)) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n+        return predicate == null ? false : IterableUtils.matchesAny(input, predicate);\n     }\n \n     /**\n      * @return true if every element of the collection matches the predicate or if the\n      * collection is empty, false otherwise\n      * @since 4.0\n-     */\n+     * @deprecated since 4.1, use {@link IterableUtils#matchesAll(Iterable, Predicate)} instead\n+     */\n+    @Deprecated\n     public static <C> boolean matchesAll(final Iterable<C> input, final Predicate<? super C> predicate) {\n-        if (predicate == null) {\n-            return false;\n-        }\n-\n-        if (input != null) {\n-            for (final C o : input) {\n-                if (!predicate.evaluate(o)) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n+        return predicate == null ? false : IterableUtils.matchesAll(input, predicate);\n     }\n \n     /**\n      * @throws NullPointerException if the input collection is null\n      */\n     public static <O> Collection<O> select(final Iterable<? extends O> inputCollection,\n-            final Predicate<? super O> predicate) {\n+                                           final Predicate<? super O> predicate) {\n         final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                 new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n         return select(inputCollection, predicate, answer);\n      * @throws NullPointerException if the input collection is null\n      */\n     public static <O> Collection<O> selectRejected(final Iterable<? extends O> inputCollection,\n-            final Predicate<? super O> predicate) {\n+                                                   final Predicate<? super O> predicate) {\n         final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                 new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n         return selectRejected(inputCollection, predicate, answer);\n      * @since 4.1\n      */\n     public static <O> List<List<O>> partition(final Iterable<? extends O> inputCollection,\n-            final Predicate<? super O> predicate) {\n+                                              final Predicate<? super O> predicate) {\n \n         @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // safe\n         final Factory<List<O>> factory = FactoryUtils.instantiateFactory((Class) ArrayList.class);\n      * @since 4.1\n      */\n     public static <O> List<List<O>> partition(final Iterable<? extends O> inputCollection,\n-            final Predicate<? super O>... predicates) {\n+                                              final Predicate<? super O>... predicates) {\n \n         @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) // safe\n         final Factory<List<O>> factory = FactoryUtils.instantiateFactory((Class) ArrayList.class);\n     @Deprecated\n     public static <T> T get(final Iterator<T> iterator, final int index) {\n         return IteratorUtils.get(iterator, index);\n-    }\n-\n-    /**\n-     * Returns the <code>index</code>-th value in the {@link Enumeration}, throwing\n-     * <code>IndexOutOfBoundsException</code> if there is no such element.\n-     * <p>\n-     * The Enumeration is advanced to <code>index</code> (or to the end, if\n-     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n-     *\n-     * @param e  the enumeration to get a value from\n-     * @param index  the index to get\n-     * @param <T> the type of object in the {@link Enumeration}\n-     * @return the object at the specified index\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     * @throws IllegalArgumentException if the object type is invalid\n-     * @since 4.1\n-     */\n-    public static <T> T get(final Enumeration<T> e, final int index) {\n-        int i = index;\n-        checkIndexBounds(i);\n-        while (e.hasMoreElements()) {\n-            i--;\n-            if (i == -1) {\n-                return e.nextElement();\n-            } else {\n-                e.nextElement();\n-            }\n-        }\n-        throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n     }\n \n     /**\n         if (object instanceof Map<?,?>) {\n             final Map<?, ?> map = (Map<?, ?>) object;\n             final Iterator<?> iterator = map.entrySet().iterator();\n-            return get(iterator, i);\n+            return IteratorUtils.get(iterator, i);\n         } else if (object instanceof Object[]) {\n             return ((Object[]) object)[i];\n         } else if (object instanceof Iterator<?>) {\n             final Iterator<?> it = (Iterator<?>) object;\n-            return get(it, i);\n+            return IteratorUtils.get(it, i);\n+        } else if (object instanceof Iterable<?>) {\n+            final Iterable<?> iterable = (Iterable<?>) object;\n+            return IterableUtils.get(iterable, i);\n         } else if (object instanceof Collection<?>) {\n             final Iterator<?> iterator = ((Collection<?>) object).iterator();\n-            return get(iterator, i);\n+            return IteratorUtils.get(iterator, i);\n         } else if (object instanceof Enumeration<?>) {\n             final Enumeration<?> it = (Enumeration<?>) object;\n-            return get(it, i);\n+            return EnumerationUtils.get(it, i);\n         } else if (object == null) {\n             throw new IllegalArgumentException(\"Unsupported object type: null\");\n         } else {\n             total = ((Map<?, ?>) object).size();\n         } else if (object instanceof Collection<?>) {\n             total = ((Collection<?>) object).size();\n+        } else if (object instanceof Iterable<?>) {\n+            total = IterableUtils.size((Iterable<?>) object);\n         } else if (object instanceof Object[]) {\n             total = ((Object[]) object).length;\n         } else if (object instanceof Iterator<?>) {\n-            final Iterator<?> it = (Iterator<?>) object;\n-            while (it.hasNext()) {\n-                total++;\n-                it.next();\n-            }\n+            total = IteratorUtils.size((Iterator<?>) object);\n         } else if (object instanceof Enumeration<?>) {\n             final Enumeration<?> it = (Enumeration<?>) object;\n             while (it.hasMoreElements()) {\n             return true;\n         } else if (object instanceof Collection<?>) {\n             return ((Collection<?>) object).isEmpty();\n+        } else if (object instanceof Iterable<?>) {\n+            return IterableUtils.isEmpty((Iterable<?>) object);\n         } else if (object instanceof Map<?, ?>) {\n             return ((Map<?, ?>) object).isEmpty();\n         } else if (object instanceof Object[]) {\n      * @since 4.1\n      */\n     public static <E> boolean contains(final Collection<? extends E> collection, final E object,\n-            final Equator<? super E> equator) {\n+                                       final Equator<? super E> equator) {\n         for (final E obj : collection) {\n             if (equator.equate(obj, object)) {\n                 return true;\n--- a/src/main/java/org/apache/commons/collections4/EnumerationUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/EnumerationUtils.java\n     private EnumerationUtils() {}\n \n     /**\n+     * Returns the <code>index</code>-th value in the {@link Enumeration}, throwing\n+     * <code>IndexOutOfBoundsException</code> if there is no such element.\n+     * <p>\n+     * The Enumeration is advanced to <code>index</code> (or to the end, if\n+     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n+     *\n+     * @param e  the enumeration to get a value from\n+     * @param index  the index to get\n+     * @param <T> the type of object in the {@link Enumeration}\n+     * @return the object at the specified index\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @throws IllegalArgumentException if the object type is invalid\n+     * @since 4.1\n+     */\n+    public static <T> T get(final Enumeration<T> e, final int index) {\n+        int i = index;\n+        CollectionUtils.checkIndexBounds(i);\n+        while (e.hasMoreElements()) {\n+            i--;\n+            if (i == -1) {\n+                return e.nextElement();\n+            } else {\n+                e.nextElement();\n+            }\n+        }\n+        throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n+    }\n+\n+    /**\n      * Creates a list based on an enumeration.\n      *\n      * <p>As the enumeration is traversed, an ArrayList of its values is\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n \n /**\n  * Provides utility methods and decorators for {@link Iterable} instances.\n+ * <p>\n+ * <b>Note</b>: by design, all provided utility methods will treat a {@code null}\n+ * {@link Iterable} parameters the same way as an empty iterable. All other required\n+ * parameters which are null, e.g. a {@link Predicate}, will result in a\n+ * {@link NullPointerException}.\n  *\n  * @since 4.1\n  * @version $Id$\n     }\n \n     /**\n+     * Counts the number of elements in the input iterable that match the predicate.\n+     * <p>\n+     * A <code>null</code> iterable matches no elements.\n+     *\n+     * @param <E>  the type of object the {@link Iterable} contains\n+     * @param input  the {@link Iterable} to get the input from, may be null\n+     * @param predicate  the predicate to use, may not be null\n+     * @return the number of matches for the predicate in the collection\n+     * @throws NullPointerException if predicate is null\n+     */\n+    public static <E> long frequency(final Iterable<E> input, final Predicate<? super E> predicate) {\n+        if (predicate == null) {\n+            throw new NullPointerException(\"Predicate must not be null.\");\n+        }\n+        long count = 0;\n+        if (input != null) {\n+            for (final E o : input) {\n+                if (predicate.evaluate(o)) {\n+                    count++;\n+                }\n+            }\n+        }\n+        return count;\n+    }\n+\n+    /**\n      * Answers true if the provided iterable is empty.\n      * <p>\n      * A <code>null</code> iterable returns true.\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n      * @throws IllegalArgumentException if any iterator is null\n      * @since 4.1\n      */\n-    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b) {\n+    public static <E> ZippingIterator<E> zippingIterator(final Iterator<? extends E> a,\n+                                                         final Iterator<? extends E> b) {\n         return new ZippingIterator<E>(a, b);\n     }\n \n         if (obj instanceof Iterator) {\n             return (Iterator<?>) obj;\n         }\n-        if (obj instanceof Collection) {\n-            return ((Collection<?>) obj).iterator();\n+        if (obj instanceof Iterable) {\n+            return ((Iterable<?>) obj).iterator();\n         }\n         if (obj instanceof Object[]) {\n             return new ObjectArrayIterator<Object>((Object[]) obj);\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n     }\n \n     @Test\n+    @Deprecated\n     public void getFromIterator() throws Exception {\n         // Iterator, entry exists\n         Iterator<Integer> iterator = iterableA.iterator();\n     }\n \n     @Test\n+    @Deprecated\n     public void getFromEnumeration() throws Exception {\n         // Enumeration, entry exists\n         final Vector<String> vector = new Vector<String>();\n     }\n \n     @Test(expected = IndexOutOfBoundsException.class)\n+    @Deprecated\n     public void getFromIterable() throws Exception {\n         // Collection, entry exists\n         final Bag<String> bag = new HashBag<String>();\n     }\n \n     @Test(expected = IndexOutOfBoundsException.class)\n-    public void getFromPrimativeArray() throws Exception {\n+    public void getFromPrimitiveArray() throws Exception {\n         // Primitive array, entry exists\n         final int[] array = new int[2];\n         array[0] = 10;\n     }\n \n     @Test\n+    @Deprecated\n     public void countMatches() {\n         assertEquals(4, CollectionUtils.countMatches(iterableB, EQUALS_TWO));\n         assertEquals(0, CollectionUtils.countMatches(iterableA, null));\n     }\n \n     @Test\n+    @Deprecated\n     public void exists() {\n         final List<Integer> list = new ArrayList<Integer>();\n         assertFalse(CollectionUtils.exists(null, null));\n     }\n \n     @Test\n+    @Deprecated\n     public void testMatchesAll() {\n         assertFalse(CollectionUtils.matchesAll(null, null));\n         assertFalse(CollectionUtils.matchesAll(collectionA, null));\n--- a/src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n+import java.util.Enumeration;\n import java.util.Hashtable;\n import java.util.List;\n import java.util.StringTokenizer;\n+import java.util.Vector;\n \n-import junit.framework.Test;\n+import org.junit.Test;\n \n /**\n  * Tests EnumerationUtils.\n  *\n  * @version $Id$\n  */\n-public class EnumerationUtilsTest extends BulkTest {\n-\n-    public EnumerationUtilsTest(final String name) {\n-        super(name);\n-    }\n+public class EnumerationUtilsTest {\n \n     public static final String TO_LIST_FIXTURE = \"this is a test\";\n \n+    @Test\n     public void testToListWithStringTokenizer() {\n         final List<String> expectedList1 = new ArrayList<String>();\n         final StringTokenizer st = new StringTokenizer(TO_LIST_FIXTURE);\n         assertEquals(expectedList2, actualList);\n     }\n \n+    @Test\n     public void testToListWithHashtable() {\n         final Hashtable<String, Integer> expected = new Hashtable<String, Integer>();\n         expected.put(\"one\", Integer.valueOf(1));\n         assertTrue(actualKeyList.containsAll(expectedKeyList));\n     }\n \n-    public static Test suite() {\n-        return BulkTest.makeSuite(EnumerationUtilsTest.class);\n+    @Test\n+    public void getFromEnumeration() throws Exception {\n+        // Enumeration, entry exists\n+        final Vector<String> vector = new Vector<String>();\n+        vector.addElement(\"zero\");\n+        vector.addElement(\"one\");\n+        Enumeration<String> en = vector.elements();\n+        assertEquals(\"zero\", EnumerationUtils.get(en, 0));\n+        en = vector.elements();\n+        assertEquals(\"one\", EnumerationUtils.get(en, 1));\n+\n+        // Enumerator, non-existent entry\n+        try {\n+            EnumerationUtils.get(en, 3);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (final IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        assertTrue(!en.hasMoreElements());\n     }\n \n }\n--- a/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n import java.util.List;\n \n-import junit.framework.Test;\n+import org.apache.commons.collections4.bag.HashBag;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Tests for IterableUtils.\n  * @since 4.1\n  * @version $Id$\n  */\n-public class IterableUtilsTest extends BulkTest {\n+public class IterableUtilsTest {\n \n     /**\n      * Iterable of {@link Integer}s\n      */\n     private Iterable<Integer> iterableA = null;\n-    \n-    public IterableUtilsTest(final String name) {\n-        super(name);\n-    }\n-    \n-    public static Test suite() {\n-        return BulkTest.makeSuite(IterableUtilsTest.class);\n-    }\n-    \n-    @Override\n+\n+    /**\n+     * Iterable of {@link Long}s\n+     */\n+    private Iterable<Long> iterableB = null;\n+\n+    /**\n+     * An empty Iterable.\n+     */\n+    private Iterable<Integer> emptyIterable = null;\n+\n+    @Before\n     public void setUp() {\n         List<Integer> listA = new ArrayList<Integer>();\n         listA.add(1);\n         listA.add(4);\n         listA.add(4);\n         iterableA = listA;\n-    }\n-    \n+\n+        Collection<Long> collectionB = new LinkedList<Long>();\n+        collectionB.add(5L);\n+        collectionB.add(4L);\n+        collectionB.add(4L);\n+        collectionB.add(3L);\n+        collectionB.add(3L);\n+        collectionB.add(3L);\n+        collectionB.add(2L);\n+        collectionB.add(2L);\n+        collectionB.add(2L);\n+        collectionB.add(2L);\n+        iterableB = collectionB;\n+\n+        emptyIterable = Collections.emptyList();\n+    }\n+\n+    private static Predicate<Number> EQUALS_TWO = new Predicate<Number>() {\n+        public boolean evaluate(final Number input) {\n+            return input.intValue() == 2;\n+        }\n+    };\n+\n+    // -----------------------------------------------------------------------\n+    @Test\n+    public void frequency() {\n+        assertEquals(4, IterableUtils.frequency(iterableB, EQUALS_TWO));\n+        assertEquals(0, IterableUtils.frequency(null, EQUALS_TWO));\n+\n+        try {\n+            assertEquals(0, IterableUtils.frequency(iterableA, null));\n+            fail(\"predicate must not be null\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            assertEquals(0, IterableUtils.frequency(null, null));\n+            fail(\"predicate must not be null\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void matchesAny() {\n+        final List<Integer> list = new ArrayList<Integer>();\n+        \n+        try {\n+            assertFalse(IterableUtils.matchesAny(null, null));\n+            fail(\"predicate must not be null\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            assertFalse(IterableUtils.matchesAny(list, null));\n+            fail(\"predicate must not be null\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+\n+        assertFalse(IterableUtils.matchesAny(null, EQUALS_TWO));\n+        assertFalse(IterableUtils.matchesAny(list, EQUALS_TWO));\n+        list.add(1);\n+        list.add(3);\n+        list.add(4);\n+        assertFalse(IterableUtils.matchesAny(list, EQUALS_TWO));\n+\n+        list.add(2);\n+        assertEquals(true, IterableUtils.matchesAny(list, EQUALS_TWO));\n+    }\n+\n+    @Test\n+    public void matchesAll() {\n+        try {\n+            assertFalse(IterableUtils.matchesAll(null, null));\n+            fail(\"predicate must not be null\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            assertFalse(IterableUtils.matchesAll(iterableA, null));\n+            fail(\"predicate must not be null\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+\n+        Predicate<Integer> lessThanFive = new Predicate<Integer>() {\n+            public boolean evaluate(Integer object) {\n+                return object < 5;\n+            }\n+        };\n+        assertTrue(IterableUtils.matchesAll(iterableA, lessThanFive));\n+\n+        Predicate<Integer> lessThanFour = new Predicate<Integer>() {\n+            public boolean evaluate(Integer object) {\n+                return object < 4;\n+            }\n+        };\n+        assertFalse(IterableUtils.matchesAll(iterableA, lessThanFour));\n+\n+        assertTrue(IterableUtils.matchesAll(null, lessThanFour));\n+        assertTrue(IterableUtils.matchesAll(emptyIterable, lessThanFour));\n+    }\n+\n+    @Test(expected = IndexOutOfBoundsException.class)\n+    public void getFromIterable() throws Exception {\n+        // Collection, entry exists\n+        final Bag<String> bag = new HashBag<String>();\n+        bag.add(\"element\", 1);\n+        assertEquals(\"element\", IterableUtils.get(bag, 0));\n+\n+        // Collection, non-existent entry\n+        IterableUtils.get(bag, 1);\n+    }\n+\n+    @Test\n     public void testToString() {\n         String result = IterableUtils.toString(iterableA);\n         assertEquals(\"[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\", result);\n         });\n         assertEquals(\"[]\", result);\n     }\n-    \n+\n+    @Test\n     public void testToStringDelimiter() {\n         \n         Transformer<Integer, String> transformer = new Transformer<Integer, String>() {\n         result = IterableUtils.toString(new ArrayList<Integer>(), transformer, \"\", \"\", \"\");\n         assertEquals(\"\", result);\n     }\n-    \n+\n+    @Test\n     public void testToStringWithNullArguments() {\n         String result = IterableUtils.toString(null, new Transformer<Integer, String>() {\n             public String transform(Integer input) {\n--- a/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n \n-import junit.framework.Test;\n-\n import org.apache.commons.collections4.iterators.EmptyIterator;\n import org.apache.commons.collections4.iterators.EmptyListIterator;\n import org.apache.commons.collections4.iterators.EmptyMapIterator;\n import org.apache.commons.collections4.iterators.EmptyOrderedIterator;\n import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;\n+import org.junit.Before;\n+import org.junit.Test;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n \n  *\n  * @version $Id$\n  */\n-public class IteratorUtilsTest extends BulkTest {\n-\n-    public IteratorUtilsTest(final String name) {\n-        super(name);\n-    }\n-\n-    public static Test suite() {\n-        return BulkTest.makeSuite(IteratorUtilsTest.class);\n-    }\n-\n+public class IteratorUtilsTest {\n+\n+    /**\n+     * Collection of {@link Integer}s\n+     */\n+    private List<Integer> collectionA = null;\n+\n+    private Iterable<Integer> iterableA = null;\n+\n+    @Before\n+    public void setUp() {\n+        collectionA = new ArrayList<Integer>();\n+        collectionA.add(1);\n+        collectionA.add(2);\n+        collectionA.add(2);\n+        collectionA.add(3);\n+        collectionA.add(3);\n+        collectionA.add(3);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+\n+        iterableA = collectionA;\n+    }\n+\n+    @Test\n     public void testAsIterable() {\n         final List<Integer> list = new ArrayList<Integer>();\n         list.add(Integer.valueOf(0));\n         assertFalse(\"should not be able to iterate twice\", IteratorUtils.asIterable(iterator).iterator().hasNext());\n     }\n \n+    @Test\n     public void testAsIterableNull() {\n         try {\n             IteratorUtils.asIterable(null);\n         }\n     }\n \n+    @Test\n     public void testAsMultipleIterable() {\n         final List<Integer> list = new ArrayList<Integer>();\n         list.add(Integer.valueOf(0));\n         assertTrue(expected > 0);\n     }\n \n+    @Test\n     public void testAsMultipleIterableNull() {\n         try {\n             IteratorUtils.asMultipleUseIterable(null);\n         }\n     }\n \n+    @Test\n     public void testToList() {\n         final List<Object> list = new ArrayList<Object>();\n         list.add(Integer.valueOf(1));\n         assertEquals(list, result);\n     }\n \n+    @Test\n     public void testToArray() {\n         final List<Object> list = new ArrayList<Object>();\n         list.add(Integer.valueOf(1));\n         assertEquals(list, Arrays.asList(result));\n     }\n \n+    @Test\n     public void testToArray2() {\n         final List<String> list = new ArrayList<String>();\n         list.add(\"One\");\n         assertEquals(list, Arrays.asList(result));\n     }\n \n+    @Test\n     public void testArrayIterator() {\n         final Object[] objArray = {\"a\", \"b\", \"c\"};\n         ResettableIterator<Object> iterator = IteratorUtils.arrayIterator(objArray);\n         }\n     }\n \n+    @Test\n     public void testArrayListIterator() {\n         final Object[] objArray = {\"a\", \"b\", \"c\", \"d\"};\n         ResettableListIterator<Object> iterator = IteratorUtils.arrayListIterator(objArray);\n     /**\n      * Test empty iterator\n      */\n+    @Test\n     public void testEmptyIterator() {\n         assertSame(EmptyIterator.INSTANCE, IteratorUtils.EMPTY_ITERATOR);\n         assertSame(EmptyIterator.RESETTABLE_INSTANCE, IteratorUtils.EMPTY_ITERATOR);\n     /**\n      * Test empty list iterator\n      */\n+    @Test\n     public void testEmptyListIterator() {\n         assertSame(EmptyListIterator.INSTANCE, IteratorUtils.EMPTY_LIST_ITERATOR);\n         assertSame(EmptyListIterator.RESETTABLE_INSTANCE, IteratorUtils.EMPTY_LIST_ITERATOR);\n     /**\n      * Test empty map iterator\n      */\n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testEmptyMapIterator() {\n         assertSame(EmptyMapIterator.INSTANCE, IteratorUtils.EMPTY_MAP_ITERATOR);\n     /**\n      * Test empty map iterator\n      */\n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testEmptyOrderedIterator() {\n         assertSame(EmptyOrderedIterator.INSTANCE, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n     /**\n      * Test empty map iterator\n      */\n+    @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testEmptyOrderedMapIterator() {\n         assertSame(EmptyOrderedMapIterator.INSTANCE, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n     /**\n      * Test next() and hasNext() for an immutable Iterator.\n      */\n+    @Test\n     public void testUnmodifiableIteratorIteration() {\n         final Iterator<String> iterator = getImmutableIterator();\n \n      * Test next(), hasNext(), previous() and hasPrevious() for an immutable\n      * ListIterator.\n      */\n+    @Test\n     public void testUnmodifiableListIteratorIteration() {\n         final ListIterator<String> listIterator = getImmutableListIterator();\n \n     /**\n      * Test remove() for an immutable Iterator.\n      */\n+    @Test\n     public void testUnmodifiableIteratorImmutability() {\n         final Iterator<String> iterator = getImmutableIterator();\n \n     /**\n      * Test remove() for an immutable ListIterator.\n      */\n+    @Test\n     public void testUnmodifiableListIteratorImmutability() {\n         final ListIterator<String> listIterator = getImmutableListIterator();\n \n     /**\n      * Tests method nodeListIterator(NodeList)\n      */\n+    @Test\n     public void testNodeListIterator() {\n         final Node[] nodes = createNodes();\n         final NodeList nodeList = createNodeList(nodes);\n     /**\n      * Tests method nodeListIterator(Node)\n      */\n+    @Test\n     public void testNodeIterator() {\n         final Node[] nodes = createNodes();\n         final NodeList nodeList = createNodeList(nodes);\n         };\n     }\n \n+    @Test\n+    public void getFromIterator() throws Exception {\n+        // Iterator, entry exists\n+        Iterator<Integer> iterator = iterableA.iterator();\n+        assertEquals(1, (int) IteratorUtils.get(iterator, 0));\n+        iterator = iterableA.iterator();\n+        assertEquals(2, (int) IteratorUtils.get(iterator, 1));\n+\n+        // Iterator, non-existent entry\n+        try {\n+            IteratorUtils.get(iterator, 10);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (final IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        assertTrue(!iterator.hasNext());\n+    }\n+\n }", "timestamp": 1433195581, "metainfo": ""}