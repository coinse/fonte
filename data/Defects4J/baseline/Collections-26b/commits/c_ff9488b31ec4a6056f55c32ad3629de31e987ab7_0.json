{"sha": "ff9488b31ec4a6056f55c32ad3629de31e987ab7", "log": "[COLLECTIONS-441] Fixed IndexOutOfBoundsException when using ListOrderedMap.putAll. Thanks for Adrian Nistor for reporting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n      */\n     public void putAll(int index, Map<? extends K, ? extends V> map) {\n         for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n-            put(index, entry.getKey(), entry.getValue());\n-            index++;\n+            V old = put(index, entry.getKey(), entry.getValue());\n+            if (old == null) {\n+                // if no key was replaced, increment the index\n+                index++;\n+            } else {\n+                // otherwise put the next item after the currently inserted key\n+                index = indexOf(entry.getKey()) + 1;\n+            }\n         }\n     }\n \n      * <p>\n      * Thus the steps are: (1) remove the existing key-value mapping,\n      * then (2) insert the new key-value mapping at the position it\n-     * would have been inserted had the remove not ocurred.\n+     * would have been inserted had the remove not occurred.\n      *\n      * @param index  the index at which the mapping should be inserted\n      * @param key  the key\n--- a/src/test/java/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/java/org/apache/commons/collections/map/TestListOrderedMap.java\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.MapIterator;\n+import org.apache.commons.collections.OrderedMapIterator;\n import org.apache.commons.collections.list.AbstractTestList;\n \n /**\n         assertEquals(\"testInsert2v\", lom.getValue(4));\n     }\n \n+    public void testPutAllWithIndexBug441() {\n+        // see COLLECTIONS-441\n+        resetEmpty();\n+        ListOrderedMap<Integer, Boolean> lom = (ListOrderedMap<Integer, Boolean>) map;\n+\n+        int size = 5;\n+        for (int i = 0; i < size; i++) {\n+            lom.put(i, true);\n+        }\n+\n+        HashMap<Integer, Boolean> map = new HashMap<Integer, Boolean>();\n+        for (int i = 0; i < size; i++) {\n+            map.put(i, true);\n+        }\n+\n+        lom.putAll(3, map);\n+        \n+        List<Integer> orderedList = lom.asList();\n+        for (int i = 0; i < size; i++) {\n+            assertEquals(i, orderedList.get(i).intValue());\n+        }\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public void testValueList_getByIndex() {\n         resetFull();", "timestamp": 1340214805, "metainfo": ""}