{"sha": "1907fd5d4b8c1f4dc76b6dbb200dd02b04537bef", "log": "Rolled back last commit. Accidentally committed everything in commons when I just wanted to commit docs and xdocs. Doh!   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.9 2003/05/06 10:24:01 rdonkin Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.10 2003/05/06 11:19:26 rdonkin Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.9 $ $Date: 2003/05/06 10:24:01 $\n+ * @version $Revision: 1.10 $ $Date: 2003/05/06 11:19:26 $\n  * \n  * @author Paul Jack\n  */\n      *  @serial\n      */\n     private float loadFactor;\n-    \n-    /**\n-     * Should the value be automatically purged when the associated key has been collected?\n-     */\n-    private boolean purgeValues = false;\n \n \n     // -- Non-serialized instance variables\n     public ReferenceMap() {\n         this(HARD, SOFT);\n     }\n+\n \n     /**\n      *  Constructs a new <Code>ReferenceMap</Code> that will\n      *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n      *  @param valueType  the type of reference to use for values;\n      *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n-     *  @param purgeValues should the value be automatically purged when the \n-     *   key is garbage collected \n-     */\n-    public ReferenceMap(int keyType, int valueType, boolean purgeValues) {\n-        this(keyType, valueType);\n-        this.purgeValues = purgeValues;\n-    }\n-\n-    /**\n-     *  Constructs a new <Code>ReferenceMap</Code> that will\n-     *  use the specified types of references.\n-     *\n-     *  @param keyType  the type of reference to use for keys;\n-     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n-     *  @param valueType  the type of reference to use for values;\n-     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n      */\n     public ReferenceMap(int keyType, int valueType) {\n         this(keyType, valueType, 16, 0.75f);\n     }\n \n-    /**\n-     *  Constructs a new <Code>ReferenceMap</Code> with the\n-     *  specified reference types, load factor and initial\n-     *  capacity.\n-     *\n-     *  @param keyType  the type of reference to use for keys;\n-     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n-     *  @param valueType  the type of reference to use for values;\n-     *   must be {@link #HARD}, {@link #SOFT}, {@link #WEAK}\n-     *  @param capacity  the initial capacity for the map\n-     *  @param loadFactor  the load factor for the map\n-     *  @param purgeValues should the value be automatically purged when the \n-     *   key is garbage collected \n-     */\n-    public ReferenceMap(\n-                        int keyType, \n-                        int valueType, \n-                        int capacity, \n-                        float loadFactor, \n-                        boolean purgeValues) {\n-        this(keyType, valueType, capacity, loadFactor);\n-        this.purgeValues = purgeValues;\n-    }\n \n     /**\n      *  Constructs a new <Code>ReferenceMap</Code> with the\n             r = r || ((valueType > HARD) && (value == ref));\n             if (r) {\n                 if (keyType > HARD) ((Reference)key).clear();\n-                if (valueType > HARD) {\n-                    ((Reference)value).clear();\n-                } else if (purgeValues) {\n-                    value = null;\n-                }\n+                if (valueType > HARD) ((Reference)value).clear();\n             }\n             return r;\n         }\n--- a/src/test/org/apache/commons/collections/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/TestReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.6 2003/05/06 10:24:01 rdonkin Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/05/06 10:24:01 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestReferenceMap.java,v 1.7 2003/05/06 11:19:26 rdonkin Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/05/06 11:19:26 $\n  *\n  * ====================================================================\n  *\n \n package org.apache.commons.collections;\n \n-import java.lang.ref.WeakReference;\n-\n import java.util.Map;\n \n import junit.framework.Test;\n  * Tests for ReferenceMap. \n  *\n  * @author Paul Jack\n- * @version $Id: TestReferenceMap.java,v 1.6 2003/05/06 10:24:01 rdonkin Exp $\n+ * @version $Id: TestReferenceMap.java,v 1.7 2003/05/06 11:19:26 rdonkin Exp $\n  */\n public class TestReferenceMap extends TestMap {\n \n         return \"2.1\";\n     }\n \n-    /** Tests whether purge values setting works */\n-    public void testPurgeValues() throws Exception {\n-        // many thanks to Juozas Baliuka for suggesting this method\n-        Object key = new Object();\n-        Object value = new Object();\n-        \n-        WeakReference keyReference = new WeakReference(key);\n-        WeakReference valueReference = new WeakReference(value);\n-        \n-        Map testMap = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\n-        testMap.put(key, value);\n-        \n-        assertEquals(\"In map\", value, testMap.get(key));\n-        assertNotNull(\"Weak reference released early (1)\", keyReference.get());\n-        assertNotNull(\"Weak reference released early (2)\", valueReference.get());\n-        \n-        // dereference strong references\n-        key = null;\n-        value = null;\n-        \n-        int iterations = 0;\n-        int bytz = 2;\n-        while(true) {\n-            System.gc();\n-            if(iterations++ > 50){\n-                fail(\"Max iterations reached before resource released.\");\n-            }\n-            testMap.isEmpty();\n-            if( \n-                keyReference.get() == null &&\n-                valueReference.get() == null) {\n-                break;\n-                \n-            } else {\n-                // create garbage:\n-                byte[] b =  new byte[bytz];\n-                bytz = bytz * 2;\n-            }\n-        }\n-    }\n+\n }", "timestamp": 1052219966, "metainfo": ""}