{"sha": "9f53a81368c44b6b6ddb3a7550710959b645f3e7", "log": "New Transformed*Map factory decorateTransform() that transforms any existing entries in the map rfe 30959  ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n     /**\n      * Returns a transformed map backed by the given map.\n      * <p>\n+     * This method returns a new map (decorating the specified map) that\n+     * will transform any new entries added to it.\n+     * Existing entries in the specified map will not be transformed.\n+     * If you want that behaviour, see {@link TransformedMap#decorateTransform}.\n+     * <p>\n      * Each object is passed through the transformers as it is added to the\n      * Map. It is important not to use the original map after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n-     *\n-     * @param map  the map to transform, must not be null\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are NOT transformed.\n+     *\n+     * @param map  the map to transform, must not be null, typically empty\n      * @param keyTransformer  the transformer for the map keys, null means no transformation\n      * @param valueTransformer  the transformer for the map values, null means no transformation\n      * @return a transformed map backed by the given map\n     /**\n      * Returns a transformed sorted map backed by the given map.\n      * <p>\n+     * This method returns a new sorted map (decorating the specified map) that\n+     * will transform any new entries added to it.\n+     * Existing entries in the specified map will not be transformed.\n+     * If you want that behaviour, see {@link TransformedSortedMap#decorateTransform}.\n+     * <p>\n      * Each object is passed through the transformers as it is added to the\n      * Map. It is important not to use the original map after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n-     *\n-     * @param map  the map to transform, must not be null\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are NOT transformed.\n+     *\n+     * @param map  the map to transform, must not be null, typically empty\n      * @param keyTransformer  the transformer for the map keys, null means no transformation\n      * @param valueTransformer  the transformer for the map values, null means no transformation\n      * @return a transformed map backed by the given map\n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n      * <p>\n      * If there are any elements already in the map being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n+     * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n+        return new TransformedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    /**\n+     * Factory method to create a transforming map that will transform\n+     * existing contents of the specified map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n+     * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorateTransform(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n+        TransformedMap decorated = new TransformedMap(map, keyTransformer, valueTransformer);\n+        if (map.size() > 0) {\n+            Map transformed = decorated.transformMap(map);\n+            decorated.clear();\n+            decorated.getMap().putAll(transformed);  // avoids double transformation\n+        }\n+        return decorated;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n      * \n      * @param map  the map to decorate, must not be null\n      * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n      * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n-        return new TransformedMap(map, keyTransformer, valueTransformer);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the collection being decorated, they\n-     * are NOT transformed.\n-     * \n-     * @param map  the map to decorate, must not be null\n-     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n-     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n-     * @throws IllegalArgumentException if map is null\n-     */\n     protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n         super(map);\n         this.keyTransformer = keyTransformer;\n--- a/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2005 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n package org.apache.commons.collections.map;\n \n import java.util.Comparator;\n+import java.util.Map;\n import java.util.SortedMap;\n \n import org.apache.commons.collections.Transformer;\n      * <p>\n      * If there are any elements already in the map being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param map  the map to decorate, must not be null\n      * @param keyTransformer  the predicate to validate the keys, null means no transformation\n      */\n     public static SortedMap decorate(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n         return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    /**\n+     * Factory method to create a transforming sorted map that will transform\n+     * existing contents of the specified map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n+     * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static SortedMap decorateTransform(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n+        TransformedSortedMap decorated = new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+        if (map.size() > 0) {\n+            Map transformed = decorated.transformMap(map);\n+            decorated.clear();\n+            decorated.getMap().putAll(transformed);  // avoids double transformation\n+        }\n+        return decorated;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n         assertEquals(new Integer(88), map.get(entry.getKey()));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testFactory_Decorate() {\n+        Map base = new HashMap();\n+        base.put(\"A\", \"1\");\n+        base.put(\"B\", \"2\");\n+        base.put(\"C\", \"3\");\n+        \n+        Map trans = TransformedMap.decorate(base, null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(3, trans.size());\n+        assertEquals(\"1\", trans.get(\"A\"));\n+        assertEquals(\"2\", trans.get(\"B\"));\n+        assertEquals(\"3\", trans.get(\"C\"));\n+        trans.put(\"D\", \"4\");\n+        assertEquals(new Integer(4), trans.get(\"D\"));\n+    }\n+\n+    public void testFactory_decorateTransform() {\n+        Map base = new HashMap();\n+        base.put(\"A\", \"1\");\n+        base.put(\"B\", \"2\");\n+        base.put(\"C\", \"3\");\n+        \n+        Map trans = TransformedMap.decorateTransform(base, null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(3, trans.size());\n+        assertEquals(new Integer(1), trans.get(\"A\"));\n+        assertEquals(new Integer(2), trans.get(\"B\"));\n+        assertEquals(new Integer(3), trans.get(\"C\"));\n+        trans.put(\"D\", \"4\");\n+        assertEquals(new Integer(4), trans.get(\"D\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n \n import java.util.Map;\n import java.util.Set;\n+import java.util.SortedMap;\n import java.util.TreeMap;\n \n import junit.framework.Test;\n         assertEquals(new Integer(88), map.get(entry.getKey()));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testFactory_Decorate() {\n+        SortedMap base = new TreeMap();\n+        base.put(\"A\", \"1\");\n+        base.put(\"B\", \"2\");\n+        base.put(\"C\", \"3\");\n+        \n+        SortedMap trans = TransformedSortedMap.decorate(base, null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(3, trans.size());\n+        assertEquals(\"1\", trans.get(\"A\"));\n+        assertEquals(\"2\", trans.get(\"B\"));\n+        assertEquals(\"3\", trans.get(\"C\"));\n+        trans.put(\"D\", \"4\");\n+        assertEquals(new Integer(4), trans.get(\"D\"));\n+    }\n+\n+    public void testFactory_decorateTransform() {\n+        SortedMap base = new TreeMap();\n+        base.put(\"A\", \"1\");\n+        base.put(\"B\", \"2\");\n+        base.put(\"C\", \"3\");\n+        \n+        SortedMap trans = TransformedSortedMap.decorateTransform(base, null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(3, trans.size());\n+        assertEquals(new Integer(1), trans.get(\"A\"));\n+        assertEquals(new Integer(2), trans.get(\"B\"));\n+        assertEquals(new Integer(3), trans.get(\"C\"));\n+        trans.put(\"D\", \"4\");\n+        assertEquals(new Integer(4), trans.get(\"D\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }", "timestamp": 1121536440, "metainfo": ""}