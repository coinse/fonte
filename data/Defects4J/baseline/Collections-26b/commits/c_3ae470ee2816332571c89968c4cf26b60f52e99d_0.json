{"sha": "3ae470ee2816332571c89968c4cf26b60f52e99d", "log": "CollectionUtils.addIgnoreNull new method bug 30020, from Rafael U. C. Afonso   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.61 $ $Date: 2004/04/27 20:00:18 $\n+ * @version $Revision: 1.62 $ $Date: 2004/07/17 21:38:33 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n         return outputCollection;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds an element to the collection unless the element is null.\n+     * \n+     * @param collection  the collection to add to, must not be null\n+     * @param object  the object to add, if null it will not be added\n+     * @return true if the collection changed\n+     * @throws NullPointerException if the collection is null\n+     */\n+    public static boolean addIgnoreNull(Collection collection, Object object) {\n+        return (object == null ? false : collection.add(object));\n+    }\n+    \n     /**\n      * Adds all elements in the iteration to the given collection.\n      * \n-     * @param collection  the collection to add to\n-     * @param iterator  the iterator of elements to add, may not be null\n+     * @param collection  the collection to add to, must not be null\n+     * @param iterator  the iterator of elements to add, must not be null\n      * @throws NullPointerException if the collection or iterator is null\n      */\n     public static void addAll(Collection collection, Iterator iterator) {\n     /**\n      * Adds all elements in the enumeration to the given collection.\n      * \n-     * @param collection  the collection to add to\n-     * @param enumeration  the enumeration of elements to add, may not be null\n+     * @param collection  the collection to add to, must not be null\n+     * @param enumeration  the enumeration of elements to add, must not be null\n      * @throws NullPointerException if the collection or enumeration is null\n      */\n     public static void addAll(Collection collection, Enumeration enumeration) {\n     /** \n      * Adds all elements in the array to the given collection.\n      * \n-     * @param collection  the collection to add to, may not be null\n-     * @param elements  the array of elements to add, may not be null\n+     * @param collection  the collection to add to, must not be null\n+     * @param elements  the array of elements to add, must not be null\n      * @throws NullPointerException if the collection or array is null\n      */\n     public static void addAll(Collection collection, Object[] elements) {\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n  * @author Phil Steitz\n  * @author Steven Melzer\n  * \n- * @version $Revision: 1.39 $ $Date: 2004/06/26 10:00:42 $\n+ * @version $Revision: 1.40 $ $Date: 2004/07/17 21:38:33 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n         assertEquals(new Integer(4), set.iterator().next());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testAddIgnoreNull() {\n+        Set set = new HashSet();\n+        set.add(\"1\");\n+        set.add(\"2\");\n+        set.add(\"3\");\n+        assertEquals(false, CollectionUtils.addIgnoreNull(set, null));\n+        assertEquals(3, set.size());\n+        assertEquals(false, CollectionUtils.addIgnoreNull(set, \"1\"));\n+        assertEquals(3, set.size());\n+        assertEquals(true, CollectionUtils.addIgnoreNull(set, \"4\"));\n+        assertEquals(4, set.size());\n+        assertEquals(true, set.contains(\"4\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPredicatedCollection() {\n         Predicate predicate = new Predicate() {\n             public boolean evaluate(Object o) {", "timestamp": 1090100313, "metainfo": ""}