{"sha": "2bf26f1d365160ece54dba75583d0d96f05e189d", "log": "Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n  * strategy is provided then add and remove are unsupported.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:58:53 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/15 12:39:13 $\n  *\n  * @author Brian McCallister\n  * @author Stephen Colebourne\n      * <p>\n      * This implementation calls <code>contains()</code> on each collection.\n      *\n+     * @param obj  the object to search for\n      * @return true if obj is contained in any of the contained collections\n      */\n     public boolean contains(Object obj) {\n      * Returns an object array, populating the supplied array if possible.\n      * See <code>Collection</code> interface for full details.\n      *\n+     * @param array  the array to use, populating if possible\n      * @return an array of all the elements in the collection\n      */\n-    public Object[] toArray(Object array[]) {\n+    public Object[] toArray(Object[] array) {\n         int size = this.size();\n         Object[] result = null;\n         if (array.length >= size) {\n     \n     /**\n      * Add an additional collection to this composite.\n+     * \n+     * @param c  the collection to add\n      */\n     public void addComposited(Collection c) {\n         this.addComposited(new Collection[]{c});\n     }\n     \n     /**\n-     * Add two additional collection to this composite.\n+     * Add two additional collections to this composite.\n+     * \n+     * @param c  the first collection to add\n+     * @param d  the second collection to add\n      */\n     public void addComposited(Collection c, Collection d) {\n         this.addComposited(new Collection[]{c, d});\n--- a/src/java/org/apache/commons/collections/collection/PredicatedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/PredicatedCollection.java\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:58:53 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/15 12:39:13 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n      * \n      * @param coll  the collection to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n+     * @return a new predicated collection\n      * @throws IllegalArgumentException if collection or predicate is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n--- a/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n  * </pre>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:58:53 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/15 12:39:13 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create a synchronized collection.\n      * \n      * @param coll  the collection to decorate, must not be null\n+     * @return a new synchronized collection\n      * @throws IllegalArgumentException if collection is null\n      */\n     public static Collection decorate(Collection coll) {\n--- a/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:58:53 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/15 12:39:13 $\n  * \n  * @author Stephen Colebourne\n  */\n      * \n      * @param coll  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed collection\n      * @throws IllegalArgumentException if collection or transformer is null\n      */\n     public static Collection decorate(Collection coll, Transformer transformer) {\n--- a/src/java/org/apache/commons/collections/collection/TypedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/TypedCollection.java\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/05/07 23:28:38 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/15 12:39:13 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * \n      * @param coll  the collection to decorate, must not be null\n      * @param type  the type to allow into the collection, must not be null\n+     * @return a new typed collection\n      * @throws IllegalArgumentException if collection or type is null\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n      * Restrictive constructor.\n      */\n     protected TypedCollection() {\n+        super();\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n  * examining the package scope variables.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2004/04/14 20:11:45 $\n+ * @version $Revision: 1.8 $ $Date: 2004/05/15 12:39:13 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create an unmodifiable bounded collection.\n      * \n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n+     * @return a new unmodifiable bounded collection\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static BoundedCollection decorate(BoundedCollection coll) {\n      * to find a suitable BoundedCollection.\n      * \n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n+     * @return a new unmodifiable bounded collection\n      * @throws IllegalArgumentException if bag is null\n      */\n     public static BoundedCollection decorateUsing(Collection coll) {\n--- a/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n  * Decorates another <code>Collection</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/02/18 00:58:53 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/15 12:39:13 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     /**\n      * Factory method to create an unmodifiable collection.\n+     * <p>\n+     * If the collection passed in is already unmodifiable, it is returned.\n      * \n      * @param coll  the collection to decorate, must not be null\n+     * @return an unmodifiable collection\n      * @throws IllegalArgumentException if collection is null\n      */\n     public static Collection decorate(Collection coll) {", "timestamp": 1084624753, "metainfo": ""}