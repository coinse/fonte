{"sha": "901deeeeff22a4ec34c842c7bbac4d2205426cf8", "log": "Removed bounded decorators from the source.  We might resurrect these after the 2.1 release, if we can address their difficulties.  PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.4 2002/08/17 21:10:46 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/17 21:10:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.5 2002/08/18 20:11:37 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/18 20:11:37 $\n  *\n  * ====================================================================\n  *\n  *  and {@link SortedBag} instances.<P>\n  *\n  *  @author Paul Jack\n- *  @version $Id: BagUtils.java,v 1.4 2002/08/17 21:10:46 pjack Exp $\n+ *  @version $Id: BagUtils.java,v 1.5 2002/08/18 20:11:37 pjack Exp $\n  *  @since 2.1\n  */\n public class BagUtils {\n     }\n \n \n-    static class BoundedBag extends CollectionUtils.CollectionWrapper\n-    implements Bag {\n-\n-        final protected int maxSize;\n-\n-        public BoundedBag(Bag bag, int maxSize) {\n-            super(bag);\n-            if (maxSize < 0) {\n-                throw new IllegalArgumentException(\"maxSize must be nonnegative.\");\n-            }\n-            this.maxSize = maxSize;\n-        }\n-\n-        public boolean add(Object o) {\n-            validate(1);\n-            return collection.add(o);\n-        }\n-\n-        public boolean addAll(Collection c) {\n-            validate(c.size());\n-            return collection.addAll(c);\n-        }\n-\n-        public boolean add(Object o, int count) {\n-            validate(count);\n-            return getBag().add(o, count);\n-        }\n-\n-        public boolean remove(Object o, int count) {\n-            return getBag().remove(o, count);\n-        }\n-\n-        public Set uniqueSet() {\n-            return getBag().uniqueSet();\n-        }\n-\n-        public int getCount(Object o) {\n-            return getBag().getCount(o);\n-        }\n-\n-        private Bag getBag() {\n-            return (Bag)collection;\n-        }\n-\n-        protected void validate(int delta) {\n-            if (delta + size() > maxSize) {\n-                throw new IllegalStateException(\"Maximum size reached.\");\n-            }\n-        }\n-    }\n-\n-\n     static class PredicatedSortedBag extends PredicatedBag \n     implements SortedBag {\n \n \n         public UnmodifiableSortedBag(SortedBag bag) {\n             super(bag);\n-        }\n-\n-        public Comparator comparator() {\n-            return getSortedBag().comparator();\n-        }\n-\n-        public Object first() {\n-            return getSortedBag().first();\n-        }\n-\n-        public Object last() {\n-            return getSortedBag().last();\n-        }\n-\n-        private SortedBag getSortedBag() {\n-            return (SortedBag)collection;\n-        }\n-\n-    }\n-\n-\n-    static class BoundedSortedBag extends BoundedBag\n-    implements SortedBag {\n-\n-        public BoundedSortedBag(SortedBag bag, int maxSize) {\n-            super(bag, maxSize);\n         }\n \n         public Comparator comparator() {\n \n \n     /**\n-     *  Returns a bounded bag backed by the given bag.\n-     *  New elements may only be added to the returned bag if its \n-     *  size is less than the specified maximum; otherwise, an\n-     *  {@link IllegalStateException} will be thrown.\n-     *\n-     *  @param b  the bag whose size to bind\n-     *  @param maxSize  the maximum size of the returned bag\n-     *  @return  a bounded bag \n-     */\n-    public static Bag boundedBag(Bag b, int maxSize) {\n-        return new BoundedBag(b, maxSize);\n-    }\n-\n-\n-\n-\n-    /**\n      *  Returns a predicated sorted bag backed by the given sorted bag.  \n      *  Only objects that pass the test in the given predicate can be \n      *  added to the bag.\n     }\n \n \n-    /**\n-     *  Returns a bounded sorted bag backed by the given sorted bag.\n-     *  New elements may only be added to the returned bag if its \n-     *  size is less than the specified maximum; otherwise, an\n-     *  {@link IllegalStateException} will be thrown.\n-     *\n-     *  @param b  the bag whose size to bind\n-     *  @param maxSize  the maximum size of the returned bag\n-     *  @return  a bounded bag \n-     */\n-    public static SortedBag boundedSortedBag(SortedBag b, int maxSize) {\n-        return new BoundedSortedBag(b, maxSize);\n-    }\n-\n-\n }\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.7 2002/08/18 20:11:37 pjack Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/18 20:11:37 $\n  *\n  * ====================================================================\n  *\n  *  Contains static utility methods for operating on {@link Buffer} objects.\n  *\n  *  @author Paul Jack\n- *  @version $Id: BufferUtils.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n+ *  @version $Id: BufferUtils.java,v 1.7 2002/08/18 20:11:37 pjack Exp $\n  *  @since 2.1\n  */\n public class BufferUtils {\n     }\n \n \n-    /**\n-     *  Returns a bounded buffer backed by the given buffer.  New elements\n-     *  may only be added to the returned buffer if its size is less than\n-     *  the specified maximum; otherwise, an {@link IllegalStateException}\n-     *  will be thrown.\n-     *\n-     *  @param buf  the buffer whose size to bind\n-     *  @param maxSize  the maximum size of the returned buffer\n-     *  @return  a bounded buffer\n-     */\n-    public static Buffer boundedBuffer(Buffer buf, int maxSize) {\n-        return new BoundedBuffer(buf, maxSize);\n-    }\n-\n \n     private static class SynchronizedBuffer \n     extends CollectionUtils.SynchronizedCollection\n     }\n \n \n-    private static class BoundedBuffer\n-    extends CollectionUtils.BoundedCollection\n-    implements Buffer {\n-\n-        public BoundedBuffer(Buffer b, int maxSize) {\n-            super(b, maxSize);\n-        }\n-\n-        public Object get() {\n-            return ((Buffer)collection).get();\n-        }\n-\n-        public Object remove() {\n-            return ((Buffer)collection).remove();\n-        }\n-\n-    }\n-\n }\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.14 2002/08/18 15:26:20 scolebourne Exp $\n- * $Revision: 1.14 $\n- * $Date: 2002/08/18 15:26:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.15 2002/08/18 20:11:37 pjack Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2002/08/18 20:11:37 $\n  *\n  * ====================================================================\n  *\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CollectionUtils.java,v 1.14 2002/08/18 15:26:20 scolebourne Exp $\n+ * @version $Id: CollectionUtils.java,v 1.15 2002/08/18 20:11:37 pjack Exp $\n  */\n public class CollectionUtils {\n \n     }\n \n \n-    static class BoundedCollection extends CollectionWrapper {\n-\n-        final protected int maxSize;\n-\n-\n-        public BoundedCollection(Collection c, int maxSize) {\n-            super(c);\n-            if (maxSize < 0) {\n-                throw new IllegalArgumentException(\"maxSize must be nonnegative.\");\n-            }\n-            this.maxSize = maxSize;\n-        }\n-\n-        public boolean add(Object o) {\n-            if (!collection.contains(o)) {\n-                validate(1);\n-            }\n-            return collection.add(o);\n-        }\n-\n-        public boolean addAll(Collection c) {\n-            int delta = 0;\n-            for (Iterator iter = c.iterator(); iter.hasNext(); ) {\n-                if (!collection.contains(iter.next())) delta++;\n-            }\n-            validate(delta);\n-            return collection.addAll(c);\n-        }\n-\n-\n-        protected void validate(int delta) {\n-            if (delta + size() > maxSize) {\n-                throw new IllegalStateException(\"Maximum size reached.\");\n-            }\n-        }\n-\n-    }\n-\n-\n-\n-\n     static class SynchronizedCollection {\n \n         final protected Collection collection;\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.9 2002/08/17 21:10:46 pjack Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/08/17 21:10:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.10 2002/08/18 20:11:37 pjack Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/08/18 20:11:37 $\n  *\n  * ====================================================================\n  *\n \n         private List getList() {\n             return (List)collection;\n-        }\n-\n-    }\n-\n-\n-    static class BoundedList extends CollectionUtils.CollectionWrapper \n-    implements List {\n-\n-        final protected int maxSize;\n-\n-        public BoundedList(List list, int maxSize) {\n-            super(list);\n-            if (maxSize < 0) {\n-                throw new IllegalArgumentException(\"maxSize must be nonnegative.\");\n-            }\n-            this.maxSize = maxSize;\n-        }\n-\n-        public boolean addAll(Collection c) {\n-            validate(c.size());\n-            return collection.addAll(c);\n-        }\n-\n-        public boolean add(Object o) {\n-            validate(1);\n-            return collection.add(o);\n-        }\n-\n-        public boolean addAll(int i, Collection c) {\n-            validate(c.size());\n-            return getList().addAll(i, c);\n-        }\n-\n-        public void add(int i, Object o) {\n-            validate(1);\n-            getList().add(i, o);\n-        }\n-\n-        public Object get(int i) {\n-            return getList().get(i);\n-        }\n-\n-        public Object set(int i, Object o) {\n-            return getList().set(i, o);\n-        }\n-\n-        public Object remove(int i) {\n-            return getList().remove(i);\n-        }\n-\n-        public int indexOf(Object o) {\n-            return getList().indexOf(o);\n-        }\n-\n-        public int lastIndexOf(Object o) {\n-            return getList().lastIndexOf(o);\n-        }\n-\n-        public ListIterator listIterator() {\n-            return listIterator(0);\n-        }\n-\n-        public ListIterator listIterator(int i) {\n-            return new ListIteratorWrapper(getList().listIterator(i)) {\n-                public void add(Object o) {\n-                    validate(1);\n-                    iterator.add(o);\n-                }\n-            };\n-        }\n-\n-        public List subList(int i1, int i2) {\n-            return getList().subList(i1, i2);\n-        }\n-\n-        private List getList() {\n-            return (List)collection;\n-        }\n-\n-        private void validate(int delta) {\n-            if (delta + size() > maxSize) {\n-                throw new IllegalStateException(\"Maximum size reached.\");\n-            }\n         }\n \n     }\n     }\n \n \n-    /**\n-     *  Returns a bounded list backed by the given list.\n-     *  New elements may only be added to the returned list if its \n-     *  size is less than the specified maximum; otherwise, an\n-     *  {@link IllegalStateException} will be thrown.\n-     *\n-     *  @param list  the list whose size to bind\n-     *  @param maxSize  the maximum size of the returned list\n-     *  @return  a bounded list \n-     */\n-    public static List boundedList(List list, int maxSize) {\n-        return new BoundedList(list, maxSize);\n-    }\n-\n-\n }\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.10 2002/08/17 21:10:46 pjack Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/08/17 21:10:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.11 2002/08/18 20:11:37 pjack Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/08/18 20:11:37 $\n  *\n  * ====================================================================\n  *\n     }\n \n \n-    static class BoundedMap extends ProxyMap {\n-\n-        final protected int maxSize;\n-\n-        public BoundedMap(Map map, int maxSize) {\n-            super(map);\n-            if (map == null) {\n-                throw new IllegalArgumentException(\"map may not be null.\");\n-            }\n-            if (maxSize < 0) {\n-                throw new IllegalArgumentException(\"maxSize must be nonnegative.\");\n-            }\n-            this.maxSize = maxSize;\n-        }\n-\n-        public Object put(Object key, Object value) {\n-            if (!containsKey(key)) validate(1);\n-            return map.put(key, value);\n-        }\n-\n-        public void putAll(Map m) {\n-            int delta = 0;\n-            for (Iterator iter = m.keySet().iterator(); iter.hasNext(); ) {\n-                 if (!map.containsKey(iter.next())) delta++;\n-            }\n-            validate(delta);\n-            map.putAll(m);\n-        }\n-\n-\n-        protected void validate(int delta) {\n-            if (map.size() + delta > maxSize) {\n-                throw new IllegalStateException(\"Maximum size reached.\");\n-            }\n-        }\n-    }\n-\n-\n     static class FixedSizeMap extends ProxyMap {\n \n         public FixedSizeMap(Map map) {\n      */\n     public static Map predicatedMap(Map map, Predicate keyPred, Predicate valuePred) {\n         return new PredicatedMap(map, keyPred, valuePred);\n-    }\n-\n-\n-    /**\n-     *  Returns a bounded map backed by the given map.\n-     *  New pairs may only be added to the returned map if its \n-     *  size is less than the specified maximum; otherwise, an\n-     *  {@link IllegalStateException} will be thrown.\n-     *\n-     *  @param b  the map whose size to bind\n-     *  @param maxSize  the maximum size of the returned map\n-     *  @return  a bounded map \n-     */\n-    public static Map boundedMap(Map map, int maxSize) {\n-        return new BoundedMap(map, maxSize);\n     }\n \n \n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.4 2002/08/17 21:10:46 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/17 21:10:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.5 2002/08/18 20:11:37 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/18 20:11:37 $\n  *\n  * ====================================================================\n  *\n  *  and {@link SortedSet} instances.\n  *\n  *  @author Paul Jack\n- *  @version $Id: SetUtils.java,v 1.4 2002/08/17 21:10:46 pjack Exp $\n+ *  @version $Id: SetUtils.java,v 1.5 2002/08/18 20:11:37 pjack Exp $\n  *  @since 2.1\n  */\n public class SetUtils {\n \n         public PredicatedSet(Set set, Predicate p) {\n             super(set, p);\n-        }\n-\n-    }\n-\n-    static class BoundedSet extends CollectionUtils.CollectionWrapper\n-    implements Set {\n-\n-        final protected int maxSize;\n-\n-\n-        public BoundedSet(Set set, int maxSize) {\n-            super(set);\n-            if (maxSize < 0) {\n-                throw new IllegalArgumentException(\"maxSize must be nonnegative.\");\n-            }\n-            this.maxSize = maxSize;\n-        }\n-\n-        public boolean add(Object o) {\n-            if (!collection.contains(o)) {\n-                validate(1);\n-            }\n-            return collection.add(o);\n-        }\n-\n-        public boolean addAll(Collection c) {\n-            int delta = 0;\n-            for (Iterator iter = c.iterator(); iter.hasNext(); ) {\n-                if (!collection.contains(iter.next())) delta++;\n-            }\n-            validate(delta);\n-            return collection.addAll(c);\n-        }\n-\n-\n-        private void validate(int delta) {\n-            if (delta + size() > maxSize) {\n-                throw new IllegalStateException(\"Maximum size reached.\");\n-            }\n         }\n \n     }\n     }\n \n \n-    /**\n-     *  Returns a bounded set backed by the given set.\n-     *  New elements may only be added to the returned set if its \n-     *  size is less than the specified maximum; otherwise, an\n-     *  {@link IllegalStateException} will be thrown.\n-     *\n-     *  @param set  the set whose size to bind\n-     *  @param maxSize  the maximum size of the returned set\n-     *  @return  a bounded set \n-     */\n-    public static Set boundedSet(Set set, int maxSize) {\n-        return new BoundedSet(set, maxSize);\n-    }\n-\n \n     /**\n      *  Returns a predicated sorted set backed by the given sorted set.  \n--- a/src/test/org/apache/commons/collections/TestBufferUtils.java\n+++ b/src/test/org/apache/commons/collections/TestBufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.1 2002/08/13 00:26:52 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/13 00:26:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.2 2002/08/18 20:11:38 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/18 20:11:38 $\n  *\n  * ====================================================================\n  *\n     }\n \n \n-    public BulkTest bulkTestBoundedBuffer() {\n-        return new TestBoundedCollection(\"\") {\n-\n-            public Collection boundedCollection() {\n-                return BufferUtils.boundedBuffer(new ArrayStack(), 0);\n-            }\n-\n-            public BulkTest bulkTestAll() {\n-                return new TestCollection(\"\") {\n-                    public Collection makeCollection() {\n-                        Object[] full = getFullElements();\n-                        Object[] other = getOtherElements();\n-                        int maxSize = full.length + other.length;\n-                        return BufferUtils.boundedBuffer(new ArrayStack(), maxSize);\n-                    }\n-\n-                    public Collection makeConfirmedCollection() {\n-                        return new ArrayStack();\n-                    }\n-\n-                    public Collection makeConfirmedFullCollection() {\n-                        ArrayStack list = new ArrayStack();\n-                        list.addAll(java.util.Arrays.asList(getFullElements()));\n-                        return list;\n-                    }\n-\n-                };\n-            }\n-        };\n-    }\n-\n-\n     public BulkTest bulkTestUnmodifiableBuffer() {\n         return new TestCollection(\"\") {\n             public boolean isAddSupported() {\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.3 2002/08/15 20:09:38 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/15 20:09:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.4 2002/08/18 20:11:38 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/18 20:11:38 $\n  *\n  * ====================================================================\n  *\n     }\n \n \n-\n-    public BulkTest bulkTestBoundedList() {\n-        return new TestBoundedCollection(\"\") {\n-\n-            public Collection boundedCollection() {\n-                return ListUtils.boundedList(new ArrayList(), 0);\n-            }\n-\n-            public BulkTest bulkTestAll() {\n-                return new TestList(\"\") {\n-                    public List makeEmptyList() {\n-                        Object[] full = getFullElements();\n-                        Object[] other = getOtherElements();\n-                        int maxSize = full.length * 2; // + other.length;\n-                        return ListUtils.boundedList(new ArrayList(), maxSize);\n-                    }\n-\n-                };\n-            }\n-        };\n-    }\n-\n-\n     public void testLazyList() {\n         List list = ListUtils.lazyList(new ArrayList(), new Factory() {\n \n--- a/src/test/org/apache/commons/collections/TestSetUtils.java\n+++ b/src/test/org/apache/commons/collections/TestSetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.1 2002/08/13 00:26:52 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/13 00:26:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.2 2002/08/18 20:11:38 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/18 20:11:38 $\n  *\n  * ====================================================================\n  *\n     }\n \n \n-\n-    public BulkTest bulkTestBoundedSet() {\n-        return new TestBoundedCollection(\"\") {\n-\n-            public Collection boundedCollection() {\n-                return SetUtils.boundedSet(new HashSet(), 0);\n-            }\n-\n-            public BulkTest bulkTestAll() {\n-                return new TestSet(\"\") {\n-                    public Set makeEmptySet() {\n-                        Object[] full = getFullElements();\n-                        Object[] other = getOtherElements();\n-                        int maxSize = full.length + other.length;\n-                        return SetUtils.boundedSet(new HashSet(), maxSize);\n-                    }\n-\n-                };\n-            }\n-        };\n-    }\n-\n-\n-\n-\n }\n \n ", "timestamp": 1029701498, "metainfo": ""}