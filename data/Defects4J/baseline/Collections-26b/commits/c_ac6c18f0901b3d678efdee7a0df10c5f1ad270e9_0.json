{"sha": "ac6c18f0901b3d678efdee7a0df10c5f1ad270e9", "log": "Simplify the decorator serialization, add javadoc [18815]   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n  * IllegalArgumentException is thrown. This is because the put method can \n  * succeed if the mapping's key already exists in the map, so the put method\n  * is not always unsupported.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/04/02 21:15:05 $\n+ * @version $Revision: 1.7 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n     //-----------------------------------------------------------------------\n     /**\n      * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n \n     /**\n      * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.1\n      */\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n--- a/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.Comparator;\n import java.util.SortedMap;\n-\n-import org.apache.commons.collections.BoundedMap;\n-import org.apache.commons.collections.collection.UnmodifiableCollection;\n-import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>SortedMap</code> to fix the size blocking add/remove.\n  * IllegalArgumentException is thrown. This is because the put method can \n  * succeed if the mapping's key already exists in the map, so the put method\n  * is not always unsupported.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/04/02 23:12:34 $\n+ * @version $Revision: 1.7 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n public class FixedSizeSortedMap\n-        extends AbstractSortedMapDecorator\n-        implements SortedMap, BoundedMap, Serializable {\n+        extends FixedSizeMap\n+        implements SortedMap {\n \n     /**\n      * Factory method to create a fixed size sorted map.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Write the map out using a custom routine.\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n      */\n-    private void writeObject(ObjectOutputStream out) throws IOException {\n-        out.defaultWriteObject();\n-        out.writeObject(map);\n-    }\n-\n-    /**\n-     * Read the map in using a custom routine.\n-     */\n-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n-        map = (Map) in.readObject();\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public Object put(Object key, Object value) {\n-        if (map.containsKey(key) == false) {\n-            throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n-        }\n-        return map.put(key, value);\n-    }\n-\n-    public void putAll(Map mapToCopy) {\n-        for (Iterator it = mapToCopy.keySet().iterator(); it.hasNext(); ) {\n-            if (mapToCopy.containsKey(it.next()) == false) {\n-                throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n-            }\n-        }\n-        map.putAll(mapToCopy);\n-    }\n-\n-    public void clear() {\n-        throw new UnsupportedOperationException(\"Map is fixed size\");\n-    }\n-\n-    public Object remove(Object key) {\n-        throw new UnsupportedOperationException(\"Map is fixed size\");\n-    }\n-\n-    public Set entrySet() {\n-        Set set = map.entrySet();\n-        return UnmodifiableSet.decorate(set);\n-    }\n-\n-    public Set keySet() {\n-        Set set = map.keySet();\n-        return UnmodifiableSet.decorate(set);\n-    }\n-\n-    public Collection values() {\n-        Collection coll = map.values();\n-        return UnmodifiableCollection.decorate(coll);\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n     }\n \n     //-----------------------------------------------------------------------\n         return new FixedSizeSortedMap(map);\n     }\n \n-    public boolean isFull() {\n-        return true;\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n     }\n \n-    public int maxSize() {\n-        return size();\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n     }\n-   \n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n }\n--- a/src/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazyMap.java\n  * After the above code is executed, <code>obj</code> will contain\n  * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n  * instance is mapped to the \"NOW\" key in the map.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/04/07 23:05:37 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n     //-----------------------------------------------------------------------\n     /**\n      * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n \n     /**\n      * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.1\n      */\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n--- a/src/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazySortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n import java.util.Comparator;\n-import java.util.Map;\n import java.util.SortedMap;\n \n import org.apache.commons.collections.Factory;\n  * After the above code is executed, <code>obj</code> will contain\n  * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n  * instance is mapped to the \"NOW\" key in the map.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/04/07 23:05:37 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n public class LazySortedMap\n         extends LazyMap\n-        implements SortedMap, Serializable {\n+        implements SortedMap {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 2715322183617658933L;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Write the map out using a custom routine.\n-     */\n-    private void writeObject(ObjectOutputStream out) throws IOException {\n-        out.defaultWriteObject();\n-        out.writeObject(map);\n-    }\n-\n-    /**\n-     * Read the map in using a custom routine.\n-     */\n-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n-        map = (Map) in.readObject();\n-    }\n-\n-    /**\n      * Gets the map being decorated.\n      * \n      * @return the decorated map\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n  * <p>\n  * If an object is added to the Map for a second time, it will remain in the\n  * original position in the iteration.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.14 $ $Date: 2004/04/07 23:17:25 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n     //-----------------------------------------------------------------------\n     /**\n      * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n \n     /**\n      * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.1\n      */\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n  * <p>\n  * If an object cannot be added to the map, an IllegalArgumentException\n  * is thrown.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2004/04/09 09:43:09 $\n+ * @version $Revision: 1.9 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n import java.util.Comparator;\n-import java.util.Map;\n import java.util.SortedMap;\n \n import org.apache.commons.collections.Predicate;\n  * <p>\n  * If an object cannot be added to the map, an IllegalArgumentException\n  * is thrown.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/04/09 09:43:09 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n public class PredicatedSortedMap\n         extends PredicatedMap\n-        implements SortedMap, Serializable {\n+        implements SortedMap {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 3359846175935304332L;\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Write the map out using a custom routine.\n-     * \n-     * @param out  the output stream\n-     * @throws IOException\n-     * @since Commons Collections 3.1\n-     */\n-    private void writeObject(ObjectOutputStream out) throws IOException {\n-        out.defaultWriteObject();\n-        out.writeObject(map);\n-    }\n-\n-    /**\n-     * Read the map in using a custom routine.\n-     * \n-     * @param in  the input stream\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n-     */\n-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n-        map = (Map) in.readObject();\n-    }\n-\n     /**\n      * Gets the map being decorated.\n      * \n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n  * Thus objects must be removed or searched for using their transformed form.\n  * For example, if the transformation converts Strings to Integers, you must\n  * use the Integer form to remove objects.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2004/04/09 09:43:09 $\n+ * @version $Revision: 1.8 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n import java.util.Comparator;\n-import java.util.Map;\n import java.util.SortedMap;\n \n import org.apache.commons.collections.Transformer;\n  * Thus objects must be removed or searched for using their transformed form.\n  * For example, if the transformation converts Strings to Integers, you must\n  * use the Integer form to remove objects.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/04/09 09:43:09 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/09 10:36:01 $\n  * \n  * @author Stephen Colebourne\n  */\n public class TransformedSortedMap\n         extends TransformedMap\n-        implements SortedMap, Serializable {\n+        implements SortedMap {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -8751771676410385778L;\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Write the map out using a custom routine.\n-     * \n-     * @param out  the output stream\n-     * @throws IOException\n-     * @since Commons Collections 3.1\n-     */\n-    private void writeObject(ObjectOutputStream out) throws IOException {\n-        out.defaultWriteObject();\n-        out.writeObject(map);\n-    }\n-\n-    /**\n-     * Read the map in using a custom routine.\n-     * \n-     * @param in  the input stream\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n-     */\n-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n-        map = (Map) in.readObject();\n-    }\n-\n     /**\n      * Gets the map being decorated.\n      * ", "timestamp": 1081506962, "metainfo": ""}