{"sha": "cb3b31ed238aef9755ef50b911efbf045cb3604b", "log": "[COLLECTIONS-450] Added CollectionUtils.forAllButLastDo(...) methods. Thanks to J. Moldawski  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n             }\n         }\n         return closure;\n+    }\n+\n+    /**\n+     * Executes the given closure on each but the last element in the collection.\n+     * <p>\n+     * If the input collection or closure is null, there is no change made.\n+     *\n+     * @param <T>  the type of object the {@link Collection} contains\n+     * @param <C>  the closure type\n+     * @param collection  the collection to get the input from, may be null\n+     * @param closure  the closure to perform, may be null\n+     * @return the last element in the collection, or null if either collection or closure is null\n+     */\n+    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Collection<T> collection,\n+                                                                      final C closure) {\n+        return collection != null && closure != null ? forAllButLastDo(collection.iterator(), closure) : null;\n+    }\n+\n+    /**\n+     * Executes the given closure on each but the last element in the collection.\n+     * <p>\n+     * If the input collection or closure is null, there is no change made.\n+     *\n+     * @param <T>  the type of object the {@link Collection} contains\n+     * @param <C>  the closure type\n+     * @param iterator  the iterator to get the input from, may be null\n+     * @param closure  the closure to perform, may be null\n+     * @return the last element in the collection, or null if either iterator or closure is null\n+     */\n+    public static <T, C extends Closure<? super T>> T forAllButLastDo(final Iterator<T> iterator, final C closure) {\n+        if (iterator != null && closure != null) {\n+            while (iterator.hasNext()) {\n+                final T element = iterator.next();\n+                if (iterator.hasNext()) {\n+                    closure.execute(element);\n+                } else {\n+                    return element;\n+                }\n+            }\n+        }\n+        return null;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n     }\n \n     @Test\n+    public void forAllButLastDoCollection() {\n+        final Closure<List<? extends Number>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n+        final Collection<List<? extends Number>> col = new ArrayList<List<? extends Number>>();\n+        col.add(collectionA);\n+        col.add(collectionB);\n+        List<? extends Number> lastElement = CollectionUtils.forAllButLastDo(col, testClosure);\n+        assertSame(lastElement, collectionB);\n+        assertTrue(collectionA.isEmpty() && !collectionB.isEmpty());\n+\n+        col.clear();\n+        col.add(collectionB);\n+        lastElement = CollectionUtils.forAllButLastDo(col, testClosure);\n+        assertSame(lastElement, collectionB);\n+        assertTrue(!collectionB.isEmpty() );\n+\n+        col.clear();\n+        lastElement = CollectionUtils.forAllButLastDo(col, testClosure);\n+        assertNull(lastElement);\n+\n+        Collection<String> strings = Arrays.asList(new String[]{\"a\", \"b\", \"c\"});\n+        final StringBuffer result = new StringBuffer();\n+        result.append(CollectionUtils.forAllButLastDo(strings, new Closure<String>() {\n+            public void execute(String input) {\n+                result.append(input+\";\");\n+            }\n+        }));\n+        assertEquals(\"a;b;c\", result.toString());\n+\n+        Collection<String> oneString = Arrays.asList(new String[]{\"a\"});\n+        final StringBuffer resultOne = new StringBuffer();\n+        resultOne.append(CollectionUtils.forAllButLastDo(oneString, new Closure<String>() {\n+            public void execute(String input) {\n+                resultOne.append(input+\";\");\n+            }\n+        }));\n+        assertEquals(\"a\", resultOne.toString());\n+        assertNull(CollectionUtils.forAllButLastDo(strings, null));\n+        assertNull(CollectionUtils.forAllButLastDo((Collection<?>) null, null));\n+    }\n+\n+    @Test\n+    public void forAllButLastDoIterator() {\n+        final Closure<List<? extends Number>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n+        final Collection<List<? extends Number>> col = new ArrayList<List<? extends Number>>();\n+        col.add(collectionA);\n+        col.add(collectionB);\n+        List<? extends Number> lastElement = CollectionUtils.forAllButLastDo(col.iterator(), testClosure);\n+        assertSame(lastElement, collectionB);\n+        assertTrue(collectionA.isEmpty() && !collectionB.isEmpty());\n+        \n+        assertNull(CollectionUtils.forAllButLastDo(col.iterator(), null));\n+        assertNull(CollectionUtils.forAllButLastDo((Collection<?>) null, null));\n+    }\n+    \n+    @Test\n     public void getFromMap() {\n         // Unordered map, entries exist\n         final Map<String, String> expected = new HashMap<String, String>();", "timestamp": 1366920135, "metainfo": ""}