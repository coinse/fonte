{"sha": "8b04e571945fdeefb75a6278c4a53c493054c928", "log": "Make FluentIterable method covariant.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n      * @param other  the other iterable to combine, may be null\n      * @return a new iterable, combining this iterable with other\n      */\n-    public FluentIterable<E> append(final Iterable<E> other) {\n+    public FluentIterable<E> append(final Iterable<? extends E> other) {\n         return of(IterableUtils.chainedIterable(iterable, other));\n     }\n \n      * @return a new iterable, collating this iterable with the other in natural order\n      * @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}\n      */\n-    public FluentIterable<E> collate(final Iterable<E> other) {\n+    public FluentIterable<E> collate(final Iterable<? extends E> other) {\n         return of(IterableUtils.collatedIterable(iterable, other, null));\n     }\n \n      * @return a new iterable, collating this iterable with the other in natural order\n      * @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}\n      */\n-    public FluentIterable<E> collate(final Iterable<E> other, Comparator<? super E> comparator) {\n+    public FluentIterable<E> collate(final Iterable<? extends E> other,\n+                                     final Comparator<? super E> comparator) {\n         return of(IterableUtils.collatedIterable(iterable, other, comparator));\n     }\n \n      * @return a new iterable, providing a filtered view of this iterable\n      * @throws NullPointerException if predicate is null\n      */\n-    public FluentIterable<E> filter(final Predicate<E> predicate) {\n+    public FluentIterable<E> filter(final Predicate<? super E> predicate) {\n         return of(IterableUtils.filteredIterable(iterable, predicate));\n     }\n \n \n     /**\n      * Returns a new FluentIterable whose iterator will traverse\n-     * the elements of this iterable and the provided elements in\n-     * alternating order.\n-     *\n-     * @param elements  the elements to interleave\n-     * @return a new iterable, interleaving this iterable with the elements\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public FluentIterable<E> zip(final E... elements) {\n-        return zip(Arrays.asList(elements));\n-    }\n-\n-    /**\n-     * Returns a new FluentIterable whose iterator will traverse\n      * the elements of this iterable and the other iterable in\n      * alternating order.\n      *\n+     * @param other  the other iterable to interleave\n+     * @return a new iterable, interleaving this iterable with others\n+     */\n+    public FluentIterable<E> zip(final Iterable<? extends E> other) {\n+        return of(IterableUtils.zippingIterable(iterable, other));\n+    }\n+\n+    /**\n+     * Returns a new FluentIterable whose iterator will traverse\n+     * the elements of this iterable and the other iterables in\n+     * alternating order.\n+     *\n      * @param others  the iterables to interleave\n      * @return a new iterable, interleaving this iterable with others\n      */\n-    public FluentIterable<E> zip(final Iterable<E>... others) {\n+    public FluentIterable<E> zip(final Iterable<? extends E>... others) {\n         @SuppressWarnings(\"unchecked\")\n         Iterable<E>[] iterables = new Iterable[1 + others.length];\n         iterables[0] = iterable;\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n      * @return a new iterable, combining the provided iterables\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a, final Iterable<? extends E> b) {\n+    public static <E> Iterable<E> chainedIterable(final Iterable<? extends E> a,\n+                                                  final Iterable<? extends E> b) {\n         return chainedIterable(new Iterable[] {a, b});\n     }\n \n      *   may be null, in which case natural ordering will be used\n      * @return a filtered view on the specified iterable\n      */\n-    public static <E> Iterable<E> collatedIterable(final Iterable<E> a,\n-                                                   final Iterable<E> b,\n+    public static <E> Iterable<E> collatedIterable(final Iterable<? extends E> a,\n+                                                   final Iterable<? extends E> b,\n                                                    final Comparator<? super E> comparator) {\n         return new FluentIterable<E>() {\n             @Override\n      * @return a new iterable, interleaving the provided iterables\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <E> Iterable<E> zippingIterable(final Iterable<E> a, final Iterable<E> b) {\n+    public static <E> Iterable<E> zippingIterable(final Iterable<? extends E> a,\n+                                                  final Iterable<? extends E> b) {\n         return zippingIterable(new Iterable[] {a, b});\n     }\n \n      * @param iterables  the array of iterables to interleave\n      * @return a new iterable, interleaving the provided iterables\n      */\n-    public static <E> Iterable<E> zippingIterable(final Iterable<E>... iterables) {\n+    public static <E> Iterable<E> zippingIterable(final Iterable<? extends E>... iterables) {\n         return new FluentIterable<E>() {\n             @Override\n             public Iterator<E> iterator() {\n                 @SuppressWarnings(\"unchecked\")\n-                Iterator<E>[] iterators = new Iterator[iterables.length];\n+                Iterator<? extends E>[] iterators = new Iterator[iterables.length];\n                 for (int i = 0; i < iterables.length; i++) {\n                     iterators[i] = emptyIteratorIfNull(iterables[i]);\n                 }", "timestamp": 1433100675, "metainfo": ""}