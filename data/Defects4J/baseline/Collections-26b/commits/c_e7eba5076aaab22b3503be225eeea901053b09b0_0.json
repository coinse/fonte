{"sha": "e7eba5076aaab22b3503be225eeea901053b09b0", "log": "removed tabs   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.26 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.26 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.27 2003/10/02 03:42:03 bayard Exp $\n+ * $Revision: 1.27 $\n+ * $Date: 2003/10/02 03:42:03 $\n  *\n  * ====================================================================\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n- * @version $Revision: 1.26 $ $Date: 2003/08/31 17:28:43 $\n+ * @version $Revision: 1.27 $ $Date: 2003/10/02 03:42:03 $\n  */\n public abstract class TestMap extends TestObject {\n \n         resetFull();\n         for(int i = 0; i < keys.length; i++) {\n             assertTrue(\"Map must contain key for a mapping in the map. \" +\n-\t\t       \"Missing: \" + keys[i], map.containsKey(keys[i]));\n+                       \"Missing: \" + keys[i], map.containsKey(keys[i]));\n         }\n         verify();\n     }\n         verify();\n \n         resetFull();\n-\t// modify the HashMap created from the full map and make sure this\n-\t// change results in map.equals() to return false.\n+        // modify the HashMap created from the full map and make sure this\n+        // change results in map.equals() to return false.\n         Iterator iter = confirmed.keySet().iterator();\n         iter.next();\n         iter.remove();\n         resetFull();\n         assertTrue(\"equals(null) returned true.\", !map.equals(null));\n         assertTrue(\"equals(new Object()) returned true.\", \n-\t\t   !map.equals(new Object()));\n+                   !map.equals(new Object()));\n         verify();\n     }\n \n \n         for (int i = 0; i < keys.length; i++) {\n             assertTrue(\"Empty map.get() should return null.\", \n-\t\t       map.get(keys[i]) == null);\n+                       map.get(keys[i]) == null);\n         }\n         verify();\n \n         resetFull();\n         for (int i = 0; i < keys.length; i++) {\n-\t    assertEquals(\"Full map.get() should return value from mapping.\", \n-\t\t\t values[i], map.get(keys[i]));\n+            assertEquals(\"Full map.get() should return value from mapping.\", \n+                         values[i], map.get(keys[i]));\n         }\n     }\n \n     public void testMapHashCode() {\n         resetEmpty();\n         assertTrue(\"Empty maps have different hashCodes.\", \n-\t\t   map.hashCode() == confirmed.hashCode());\n+                   map.hashCode() == confirmed.hashCode());\n \n         resetFull();\n         assertTrue(\"Equal maps have different hashCodes.\", \n-\t\t   map.hashCode() == confirmed.hashCode());\n+                   map.hashCode() == confirmed.hashCode());\n     }\n \n     /**\n \n         resetEmpty();\n \n-\tObject[] keys = getSampleKeys();\n-\tObject[] values = getSampleValues();\n-\tObject[] newValues = getNewSampleValues();\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        Object[] newValues = getNewSampleValues();\n \n         for(int i = 0; i < keys.length; i++) {\n             Object o = map.put(keys[i], values[i]);\n             confirmed.put(keys[i], values[i]);\n             verify();\n-\t    assertTrue(\"First map.put should return null\", o == null);\n-\t    assertTrue(\"Map should contain key after put\", \n-\t\t       map.containsKey(keys[i]));\n-\t    assertTrue(\"Map should contain value after put\", \n-\t\t       map.containsValue(values[i]));\n-\t}\n-\t\n-\tfor(int i = 0; i < keys.length; i++) {\n-\t    Object o = map.put(keys[i], newValues[i]);\n+            assertTrue(\"First map.put should return null\", o == null);\n+            assertTrue(\"Map should contain key after put\", \n+                       map.containsKey(keys[i]));\n+            assertTrue(\"Map should contain value after put\", \n+                       map.containsValue(values[i]));\n+        }\n+        \n+        for(int i = 0; i < keys.length; i++) {\n+            Object o = map.put(keys[i], newValues[i]);\n             confirmed.put(keys[i], newValues[i]);\n             verify();\n-\t    assertEquals(\"Second map.put should return previous value\",\n-\t\t\t values[i], o);\n-\t    assertTrue(\"Map should still contain key after put\",\n-\t\t       map.containsKey(keys[i]));\n-\t    assertTrue(\"Map should contain new value after put\",\n-\t\t       map.containsValue(newValues[i]));\n-\n-\t    // if duplicates are allowed, we're not guaranteed that the value\n-\t    // no longer exists, so don't try checking that.\n-\t    if(!useDuplicateValues()) {\n-\t\tassertTrue(\"Map should not contain old value after second put\",\n-\t\t\t   !map.containsValue(values[i]));\n-\t    }\n-\t}\n+            assertEquals(\"Second map.put should return previous value\",\n+                         values[i], o);\n+            assertTrue(\"Map should still contain key after put\",\n+                       map.containsKey(keys[i]));\n+            assertTrue(\"Map should contain new value after put\",\n+                       map.containsValue(newValues[i]));\n+\n+            // if duplicates are allowed, we're not guaranteed that the value\n+            // no longer exists, so don't try checking that.\n+            if(!useDuplicateValues()) {\n+                assertTrue(\"Map should not contain old value after second put\",\n+                           !map.containsValue(values[i]));\n+            }\n+        }\n     }\n \n     /**\n \n         resetEmpty();\n \n-\tm2 = new HashMap();\n-\tObject[] keys = getSampleKeys();\n-\tObject[] values = getSampleValues();\n-\tfor(int i = 0; i < keys.length; i++) {\n-\t    m2.put(keys[i], values[i]);\n-\t}\n-\n-\tmap.putAll(m2);\n+        m2 = new HashMap();\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        for(int i = 0; i < keys.length; i++) {\n+            m2.put(keys[i], values[i]);\n+        }\n+\n+        map.putAll(m2);\n         confirmed.putAll(m2);\n         verify();\n     }\n \n         resetEmpty();\n \n-\tObject[] keys = getSampleKeys();\n-\tObject[] values = getSampleValues();\n-\tfor(int i = 0; i < keys.length; i++) {\n-\t    Object o = map.remove(keys[i]);\n-\t    assertTrue(\"First map.remove should return null\", o == null);\n-\t}\n-        verify();\n-\n-        resetFull();\n-\n-\tfor(int i = 0; i < keys.length; i++) {\n-\t    Object o = map.remove(keys[i]);\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        for(int i = 0; i < keys.length; i++) {\n+            Object o = map.remove(keys[i]);\n+            assertTrue(\"First map.remove should return null\", o == null);\n+        }\n+        verify();\n+\n+        resetFull();\n+\n+        for(int i = 0; i < keys.length; i++) {\n+            Object o = map.remove(keys[i]);\n             confirmed.remove(keys[i]);\n             verify();\n \n-\t    assertEquals(\"map.remove with valid key should return value\",\n-\t\t\t values[i], o);\n-\t}\n+            assertEquals(\"map.remove with valid key should return value\",\n+                         values[i], o);\n+        }\n \n         Object[] other = getOtherKeys();\n ", "timestamp": 1065066123, "metainfo": ""}