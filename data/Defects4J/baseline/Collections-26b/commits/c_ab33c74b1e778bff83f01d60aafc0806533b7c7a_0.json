{"sha": "ab33c74b1e778bff83f01d60aafc0806533b7c7a", "log": "Added Tests for BagUtils and typed bags.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.45 2003/08/31 17:28:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.46 2003/09/20 02:51:50 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Entry point for all Collections package tests.\n  * \n- * @version $Revision: 1.45 $ $Date: 2003/08/31 17:28:43 $\n+ * @version $Revision: 1.46 $ $Date: 2003/09/20 02:51:50 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n         suite.addTest(TestUnboundedFifoBuffer.suite());\n         suite.addTest(TestReferenceMap.suite());\n         suite.addTest(TestIteratorUtils.suite());\n+        suite.addTest(TestBagUtils.suite());\n         return suite;\n     }\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestBagUtils.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBagUtils.java,v 1.1 2003/09/20 02:51:50 psteitz Exp $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import org.apache.commons.collections.decorators.SynchronizedBag;\n+import org.apache.commons.collections.decorators.UnmodifiableBag;\n+import org.apache.commons.collections.decorators.PredicatedBag;\n+import org.apache.commons.collections.decorators.TypedBag;\n+import org.apache.commons.collections.decorators.TransformedBag;\n+import org.apache.commons.collections.decorators.SynchronizedSortedBag;\n+import org.apache.commons.collections.decorators.UnmodifiableSortedBag;\n+import org.apache.commons.collections.decorators.PredicatedSortedBag;\n+import org.apache.commons.collections.decorators.TypedSortedBag;\n+import org.apache.commons.collections.decorators.TransformedSortedBag;\n+\n+\n+import junit.framework.Test;\n+\n+\n+/**\n+ * Tests for BagUtils factory methods.\n+ *\n+ * @author Phil Steitz\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/09/20 02:51:50 $\n+ */\n+public class TestBagUtils extends BulkTest {\n+\n+    public TestBagUtils(String name) {\n+        super(name);\n+    }\n+\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestBagUtils.class);\n+    }\n+    \n+    //----------------------------------------------------------------------\n+\n+    protected Class stringClass = this.getName().getClass();\n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    protected Transformer nopTransformer = TransformerUtils.nopTransformer();\n+    \n+    //----------------------------------------------------------------------\n+    \n+    public void testSynchronizedBag() {\n+        Bag bag = BagUtils.synchronizedBag(new HashBag());\n+        assertTrue(\"Returned object should be a SynchronizedBag.\",\n+            bag instanceof SynchronizedBag);\n+        try {\n+            bag = BagUtils.synchronizedBag(null);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testUnmodifiableBag() {\n+        Bag bag = BagUtils.unmodifiableBag(new HashBag());\n+        assertTrue(\"Returned object should be an UnmodifiableBag.\",\n+            bag instanceof UnmodifiableBag);\n+        try {\n+            bag = BagUtils.unmodifiableBag(null);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testPredicatedBag() {\n+        Bag bag = BagUtils.predicatedBag(new HashBag(), truePredicate);\n+        assertTrue(\"Returned object should be a PredicatedBag.\",\n+            bag instanceof PredicatedBag);\n+        try {\n+            bag = BagUtils.predicatedBag(null,truePredicate);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            bag = BagUtils.predicatedBag(new HashBag(), null);\n+            fail(\"Expecting IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testTypedBag() {\n+        Bag bag = BagUtils.typedBag(new HashBag(), stringClass);      \n+        assertTrue(\"Returned object should be a TypedBag.\",\n+            bag instanceof PredicatedBag);\n+        try {\n+            bag = BagUtils.typedBag(null, stringClass);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            bag = BagUtils.typedBag(new HashBag(), null);\n+            fail(\"Expecting IllegalArgumentException for null type.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+     public void testTransformedBag() {\n+        Bag bag = BagUtils.transformedBag(new HashBag(), nopTransformer);      \n+        assertTrue(\"Returned object should be an TransformedBag.\",\n+            bag instanceof TransformedBag);\n+        try {\n+            bag = BagUtils.transformedBag(null, nopTransformer);      \n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            bag = BagUtils.transformedBag(new HashBag(), null);  \n+            fail(\"Expecting IllegalArgumentException for null transformer.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+     \n+    public void testSynchronizedSortedBag() {\n+        Bag bag = BagUtils.synchronizedSortedBag(new TreeBag());\n+        assertTrue(\"Returned object should be a SynchronizedSortedBag.\",\n+            bag instanceof SynchronizedSortedBag);\n+        try {\n+            bag = BagUtils.synchronizedSortedBag(null);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testUnmodifiableSortedBag() {\n+        Bag bag = BagUtils.unmodifiableSortedBag(new TreeBag());\n+        assertTrue(\"Returned object should be an UnmodifiableSortedBag.\",\n+            bag instanceof UnmodifiableSortedBag);\n+        try {\n+            bag = BagUtils.unmodifiableSortedBag(null);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testPredicatedSortedBag() {\n+        Bag bag = BagUtils.predicatedSortedBag(new TreeBag(), truePredicate);\n+        assertTrue(\"Returned object should be a PredicatedSortedBag.\",\n+            bag instanceof PredicatedSortedBag);\n+        try {\n+            bag = BagUtils.predicatedSortedBag(null, truePredicate);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            bag = BagUtils.predicatedSortedBag(new TreeBag(), null);\n+            fail(\"Expecting IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testTypedSortedBag() {\n+        Bag bag = BagUtils.typedSortedBag(new TreeBag(), stringClass);      \n+        assertTrue(\"Returned object should be a TypedSortedBag.\",\n+            bag instanceof PredicatedBag);\n+        try {\n+            bag = BagUtils.typedSortedBag(null, stringClass);\n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            bag = BagUtils.typedSortedBag(new TreeBag(), null);\n+            fail(\"Expecting IllegalArgumentException for null type.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+    \n+    public void testTransformedSortedBag() {\n+        Bag bag = BagUtils.transformedSortedBag(new TreeBag(), nopTransformer);      \n+        assertTrue(\"Returned object should be an TransformedSortedBag\",\n+            bag instanceof TransformedSortedBag);\n+        try {\n+            bag = BagUtils.transformedSortedBag(null, nopTransformer);      \n+            fail(\"Expecting IllegalArgumentException for null bag.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        } \n+        try {\n+            bag = BagUtils.transformedSortedBag(new TreeBag(), null);  \n+            fail(\"Expecting IllegalArgumentException for null transformer.\");\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }  \n+    }\n+}\n+\n+\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.13 2003/09/15 03:50:41 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.14 2003/09/20 02:51:50 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.13 $ $Date: 2003/09/15 03:50:41 $\n+ * @version $Revision: 1.14 $ $Date: 2003/09/20 02:51:50 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestLazyMap.suite());\n         suite.addTest(TestLazySortedMap.suite());\n         suite.addTest(TestBlockingBuffer.suite());\n+        suite.addTest(TestTypedBag.suite());\n+        suite.addTest(TestTypedSortedBag.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestTypedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTypedBag.java,v 1.1 2003/09/20 02:51:50 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n+import org.apache.commons.collections.TestBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link TypedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/20 02:51:50 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestTypedBag extends TestBag {\n+    \n+    public TestTypedBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTypedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTypedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    \n+    protected Class stringClass = this.getName().getClass();\n+    private Object obj = new Object();\n+    protected Class objectClass = obj.getClass();\n+    \n+    protected Bag decorateBag(HashBag bag, Class claz) {\n+        return TypedBag.decorate(bag, claz);\n+    }\n+\n+    public Bag makeBag() {\n+        return decorateBag(new HashBag(), objectClass);\n+    }\n+    \n+    public Bag makeTestBag() {\n+        return decorateBag(new HashBag(), stringClass);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    public void testlegalAddRemove() {\n+        Bag bag = makeTestBag();\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add(els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(els[i]));\n+        }\n+        Set set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set contains the first element\",set.contains(els[0]));\n+        assertEquals(true, bag.remove(els[0])); \n+        set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set now does not contain the first element\",\n+            !set.contains(els[0])); \n+    }\n+ \n+    public void testIllegalAdd() {\n+        Bag bag = makeTestBag();\n+        Integer i = new Integer(3);\n+        try {\n+            bag.add(i);\n+            fail(\"Integer should fail type check.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !bag.contains(i));   \n+    }\n+\n+    public void testIllegalDecorate() {\n+        HashBag elements = new HashBag();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            Bag bag = decorateBag(elements, stringClass);\n+            fail(\"Bag contains an element that should fail the type test.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            Bag bag = decorateBag(new HashBag(), null);\n+            fail(\"Expectiing IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }              \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestTypedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTypedSortedBag.java,v 1.1 2003/09/20 02:51:50 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.TreeBag;\n+import org.apache.commons.collections.TestBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link TypedSortedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/20 02:51:50 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestTypedSortedBag extends TestBag {\n+       \n+    public TestTypedSortedBag(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestTypedSortedBag.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTypedSortedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    protected Class stringClass = this.getName().getClass();\n+    private Object obj = new Object();\n+    protected Class objectClass = obj.getClass();\n+    protected SortedBag emptyBag = new TreeBag();\n+    protected SortedBag nullBag = null;\n+    \n+    protected SortedBag decorateBag(SortedBag bag, Class claz) {\n+        return TypedSortedBag.decorate(bag, claz);\n+    }\n+\n+    public Bag makeBag() {\n+        return decorateBag(emptyBag, objectClass);\n+    }\n+    \n+    public Bag makeTestBag() {\n+        return decorateBag(emptyBag, stringClass);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    public void testDecorate() {\n+        SortedBag bag = decorateBag(emptyBag, stringClass);\n+        try {\n+            SortedBag bag3 = decorateBag(emptyBag, null);\n+            fail(\"Expecting IllegalArgumentException for null predicate\");\n+        } catch (IllegalArgumentException e) {}\n+        try {\n+            SortedBag bag4 = decorateBag(nullBag, stringClass);\n+            fail(\"Expecting IllegalArgumentException for null bag\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n+    public void testSortOrder() {\n+        SortedBag bag = decorateBag(emptyBag, stringClass);\n+        String one = \"one\";\n+        String two = \"two\";\n+        String three = \"three\";\n+        bag.add(one);\n+        bag.add(two);\n+        bag.add(three);\n+        assertEquals(\"first element\", bag.first(), one);\n+        assertEquals(\"last element\", bag.last(), two); \n+        Comparator c = bag.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);\n+    }\n+}", "timestamp": 1064026310, "metainfo": ""}