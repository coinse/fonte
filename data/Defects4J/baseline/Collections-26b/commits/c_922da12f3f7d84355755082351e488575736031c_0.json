{"sha": "922da12f3f7d84355755082351e488575736031c", "log": "Cleanup of iterators package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyIterator.java\n  * Provides an implementation of an empty iterator.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n abstract class AbstractEmptyIterator<E> {\n  \n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java\n  * All methods are forwarded to the decorated iterator.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractIteratorDecorator<E> extends AbstractUntypedIteratorDecorator<E, E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n  * All methods are forwarded to the decorated list iterator.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Rodney Waldhoff\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class AbstractListIteratorDecorator<E> implements ListIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n  * All methods are forwarded to the decorated map iterator.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class AbstractMapIteratorDecorator<K, V> implements MapIterator<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractOrderedMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractOrderedMapIteratorDecorator.java\n  * All methods are forwarded to the decorated map iterator.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class AbstractOrderedMapIteratorDecorator<K, V> implements OrderedMapIterator<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ArrayIterator.java\n  * the iterator back to the start if required.\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Mauricio S. Moura\n- * @author Michael A. Smith\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ArrayIterator<E> implements ResettableIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n  * @see java.util.ListIterator\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n- * @author Phil Steitz\n+ * @version $Id$\n  */\n public class ArrayListIterator<E> extends ArrayIterator<E>\n         implements ListIterator<E>, ResettableListIterator<E> {\n--- a/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n  * lesser of <code>A.next()</code> and <code>B.next()</code>.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Rodney Waldhoff\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class CollatingIterator<E> implements Iterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyIterator.java\n  * 2.1.1 and 3.1 due to issues with <code>IteratorUtils</code>.\n  *\n  * @since 2.1.1 and 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class EmptyIterator<E> extends AbstractEmptyIterator<E> implements ResettableIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyListIterator.java\n  * due to issues with <code>IteratorUtils</code>.\n  *\n  * @since 2.1.1 and 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class EmptyListIterator<E> extends AbstractEmptyIterator<E> implements\n         ResettableListIterator<E> {\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyMapIterator.java\n  * Provides an implementation of an empty map iterator.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class EmptyMapIterator<K, V> extends AbstractEmptyMapIterator<K, V> implements\n         MapIterator<K, V>, ResettableIterator<K> {\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedIterator.java\n  * Provides an implementation of an empty ordered iterator.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n-public class EmptyOrderedIterator<E> extends AbstractEmptyIterator<E> implements OrderedIterator<E>, ResettableIterator<E> {\n+public class EmptyOrderedIterator<E> extends AbstractEmptyIterator<E>\n+        implements OrderedIterator<E>, ResettableIterator<E> {\n \n     /**\n      * Singleton instance of the iterator.\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedMapIterator.java\n  * Provides an implementation of an empty ordered map iterator.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n-public class EmptyOrderedMapIterator<K, V> extends AbstractEmptyMapIterator<K, V> implements\n-        OrderedMapIterator<K, V>, ResettableIterator<K> {\n+public class EmptyOrderedMapIterator<K, V> extends AbstractEmptyMapIterator<K, V>\n+        implements OrderedMapIterator<K, V>, ResettableIterator<K> {\n \n     /**\n      * Singleton instance of the iterator.\n--- a/src/main/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n  * </pre>\n  *  \n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableIterator<K> {\n     \n--- a/src/main/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n  * to be {@link Iterator Iterator} instances.\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n- * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n+ * @version $Id$\n  */\n public class EnumerationIterator<E> implements Iterator<E> {\n     \n--- a/src/main/java/org/apache/commons/collections/iterators/FilterIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/FilterIterator.java\n  * those elements that match the specified {@link Predicate Predicate}.\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Jan Sorensen\n- * @author Ralph Wagner\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class FilterIterator<E> implements Iterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/FilterListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/FilterListIterator.java\n  * those elements that match the specified {@link Predicate Predicate}.\n  *\n  * @since 2.0\n- * @version $Revision$\n- *\n- * @author Rodney Waldhoff\n+ * @version $Id$\n  */\n public class FilterListIterator<E> implements ListIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n  * this case the class will function as an empty iterator.\n  *\n  * @since 2.1\n- * @version $Revision$\n- * 2006) $\n- *\n- * @author Morgan Delagrange\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class IteratorChain<E> implements Iterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorEnumeration.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorEnumeration.java\n  * {@link Enumeration Enumeration} instance.\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @version $Id$\n  */\n public class IteratorEnumeration<E> implements Enumeration<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorIterable.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorIterable.java\n  * </p>\n  * \n  * @since 4.0\n- * @version $Revision$\n+ * @version $Id$\n  */\n public class IteratorIterable<E> implements Iterable<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n import java.util.ListIterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.ResettableIterator;\n import org.apache.commons.collections.ResettableListIterator;\n \n /**\n  * This class implements ResettableListIterator from Commons Collections 3.2.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Morgan Delagrange\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @version $Id$\n  */\n public class ListIteratorWrapper<E> implements ResettableListIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n  * implementations will throw a ConcurrentModificationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author <a href=\"mailto:joncrlsn@users.sf.net\">Jonathan Carlson</a>\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class LoopingIterator<E> implements ResettableIterator<E> {\n     \n--- a/src/main/java/org/apache/commons/collections/iterators/LoopingListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/LoopingListIterator.java\n  * ConcurrentModificationException.\n  *\n  * @since 3.2\n- * @version $Revision$\n- *\n- * @author Eric Crampton <ccesc@eonomine.com>\n+ * @version $Id$\n  */\n public class LoopingListIterator<E> implements ResettableListIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n  * back to the start if required.\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Mauricio S. Moura\n- * @author Michael A. Smith\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n- * @author Phil Steitz\n+ * @version $Id$\n  */\n public class ObjectArrayIterator<E>\n         implements Iterator<E>, ResettableIterator<E> {\n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n  * @see java.util.ListIterator\n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n- * @author Phil Steitz\n+ * @version $Id$\n  */\n public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>\n         implements ListIterator<E>, ResettableListIterator<E> {\n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n  * more efficient (and convenient) than using nested for loops to extract a list.\n  *\n  * @since 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class ObjectGraphIterator<E> implements Iterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/ReverseListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ReverseListIterator.java\n  * index in the list, thus it starts high and reduces as the iteration\n  * continues. The previous methods work similarly.\n  *\n- * @author Serge Knystautas\n- * @author Stephen Colebourne\n  * @since 3.2\n- * @version $Revision$\n+ * @version $Id$\n  */\n public class ReverseListIterator<E> implements ResettableListIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/SingletonIterator.java\n  * object instance.\n  *\n  * @since 2.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Stephen Colebourne\n- * @author Rodney Waldhoff\n+ * @version $Id$\n  */\n public class SingletonIterator<E>\n         implements Iterator<E>, ResettableIterator<E> {\n--- a/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n  * object instance.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Rodney Waldhoff\n+ * @version $Id$\n  */\n public class SingletonListIterator<E> implements ListIterator<E>, ResettableListIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/TransformIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/TransformIterator.java\n  * Decorates an iterator such that each element returned is transformed.\n  *\n  * @since 1.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformIterator<I, O> implements Iterator<O> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java\n  * and duplicate Objects are skipped.\n  *\n  * @since 2.1\n- * @version $Revision$\n- *\n- * @author Morgan Delagrange\n+ * @version $Id$\n  */\n public class UniqueFilterIterator<E> extends FilterIterator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableIterator<E> implements Iterator<E>, Unmodifiable {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableListIterator<E> implements ListIterator<E>, Unmodifiable {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableMapIterator<K, V> implements MapIterator<K, V>, Unmodifiable {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableOrderedMapIterator<K, V> implements OrderedMapIterator<K, V>,\n         Unmodifiable {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/iterators/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the\n+ * {@link java.util.Iterator Iterator} interface.\n+ * <p>\n+ * You may also consider using \n+ * {@link org.apache.commons.collections.IteratorUtils IteratorUtils},\n+ * which is a single class that uses static methods to construct instances\n+ * of the classes in this package.\n+ *\n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.iterators;", "timestamp": 1343554155, "metainfo": ""}