{"sha": "3290bbc85420176f53bad1968611bf53798b2770", "log": "Applying my patch from COLLECTIONS-307. Fixes the bug raised by Christian Semrau that SetUniqueList.subList() was not redefining the uniqueness set when creating the sublist.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n     }\n \n     public List subList(int fromIndex, int toIndex) {\n-        return new SetUniqueList(super.subList(fromIndex, toIndex), set);\n+        List superSubList = super.subList(fromIndex, toIndex);\n+        Set subSet = createSetBasedOnList(set, superSubList);\n+        return new SetUniqueList(superSubList, subSet);\n+    }\n+\n+    protected Set createSetBasedOnList(Set set, List list) {\n+        Set subSet = null;\n+        if(set.getClass().equals(HashSet.class)) {\n+            subSet = new HashSet();\n+        } else {\n+            try {\n+                subSet = (Set) set.getClass().newInstance();\n+            } catch(InstantiationException ie) {\n+                subSet = new HashSet();\n+            } catch(IllegalAccessException iae) {\n+                subSet = new HashSet();\n+            }\n+        }\n+        subSet.addAll(list);\n+        return subSet;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n import java.util.LinkedList;\n import java.util.List;\n import java.util.ListIterator;\n+import java.util.Set;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n         assertEquals(4, decoratedList.size());\n     }\n \n+    public void testCollections307() {\n+        List list = new ArrayList();\n+        List uniqueList = SetUniqueList.decorate(list);\n+\n+        String hello = \"Hello\";\n+        String world = \"World\";\n+        uniqueList.add(hello);\n+        uniqueList.add(world);\n+\n+        List subList = list.subList(0, 0);\n+        List subUniqueList = uniqueList.subList(0, 0);\n+\n+        assertFalse(subList.contains(world)); // passes\n+        assertFalse(subUniqueList.contains(world)); // fails\n+\n+        List worldList = new ArrayList();\n+        worldList.add(world);\n+        assertFalse(subList.contains(\"World\")); // passes\n+        assertFalse(subUniqueList.contains(\"World\")); // fails\n+\n+        // repeat the test with a different class than HashSet; \n+        // which means subclassing SetUniqueList below\n+        list = new ArrayList();\n+        uniqueList = new SetUniqueList307(list, new java.util.TreeSet());\n+\n+        uniqueList.add(hello);\n+        uniqueList.add(world);\n+\n+        subList = list.subList(0, 0);\n+        subUniqueList = uniqueList.subList(0, 0);\n+\n+        assertFalse(subList.contains(world)); // passes\n+        assertFalse(subUniqueList.contains(world)); // fails\n+\n+        worldList = new ArrayList();\n+        worldList.add(world);\n+        assertFalse(subList.contains(\"World\")); // passes\n+        assertFalse(subUniqueList.contains(\"World\")); // fails\n+    }\n+\n+    class SetUniqueList307 extends SetUniqueList {\n+        public SetUniqueList307(List list, Set set) {\n+            super(list, set);\n+        }\n+    }\n+\n }", "timestamp": 1231146595, "metainfo": ""}