{"sha": "23e3b0f0fcc4220a9731d56012143aabcad94b12", "log": "Javadoc formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/trie/KeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/KeyAnalyzer.java\n  * Defines the interface to analyze {@link Trie} keys on a bit level. \n  * {@link KeyAnalyzer}'s methods return the length of the key in bits, \n  * whether or not a bit is set, and bits per element in the key. \n- * \n- * <p>Additionally, a method determines if a key is a prefix of another \n+ * <p>\n+ * Additionally, a method determines if a key is a prefix of another \n  * key and returns the bit index where one key is different from another \n  * key (if the key and found key are equal than the return value is \n  * {@link #EQUAL_BIT_KEY}).\n     /**\n      * Returns the number of bits per element in the key.\n      * This is only useful for variable-length keys, such as Strings.\n+     * \n+     * @return the number of bits per element\n      */\n     public int bitsPerElement();\n     \n     /** \n-     * Returns the length of the Key in bits. \n+     * Returns the length of the Key in bits.\n+     * \n+     * @param key  the key\n+     * @return the bit length of the key\n      */\n     public int lengthInBits(K key);\n     \n     /** \n-     * Returns whether or not a bit is set \n+     * Returns whether or not a bit is set.\n      */\n     public boolean isBitSet(K key, int bitIndex, int lengthInBits);\n     \n     /**\n-     * Returns the n-th different bit between key and found.\n-     * This starts the comparison in key at 'keyStart' and goes\n-     * for 'keyLength' bits, and compares to the found key\n-     * starting at 'foundStart' and going for 'foundLength' bits.\n+     * Returns the n-th different bit between key and found. This starts the comparison in\n+     * key at 'keyStart' and goes for 'keyLength' bits, and compares to the found key starting\n+     * at 'foundStart' and going for 'foundLength' bits.\n      */\n-    public int bitIndex(K key, int offsetInBits, int lengthInBits, \n-            K other, int otherOffsetInBits, int otherLengthInBits);\n+    public int bitIndex(K key, int offsetInBits, int lengthInBits,\n+                        K other, int otherOffsetInBits, int otherLengthInBits);\n     \n     /**\n-     * Determines whether or not the given prefix (from offset to length)\n-     * is a prefix of the given key.\n+     * Determines whether or not the given prefix (from offset to length) is a prefix of the given key.\n      */\n     public boolean isPrefix(K prefix, int offsetInBits, int lengthInBits, K key);\n }\n--- a/src/main/java/org/apache/commons/collections/trie/PatriciaTrieBase.java\n+++ b/src/main/java/org/apache/commons/collections/trie/PatriciaTrieBase.java\n             }\n         }\n         \n-        throw new IndexOutOfBoundsException(\"Failed to put: \" \n-                + key + \" -> \" + value + \", \" + bitIndex);\n+        throw new IndexOutOfBoundsException(\"Failed to put: \" + key + \" -> \" + value + \", \" + bitIndex);\n     }\n     \n     /**", "timestamp": 1348165770, "metainfo": ""}