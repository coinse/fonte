{"sha": "d29ce53657c0b92b0b90143e12956c2bed503d13", "log": "Make ExtendedProperties support List rather than just Vector bug 36812, from Henning P. Schmiedehausen  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n  * @author Mohan Kishore\n  * @author Stephen Colebourne\n  * @author Shinobu Kawai\n+ * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  */\n public class ExtendedProperties extends Hashtable {\n     \n \n         if (current instanceof String) {\n             // one object already in map - convert it to a vector\n-            Vector v = new Vector(2);\n-            v.addElement(current);\n-            v.addElement(value);\n-            put(key, v);\n-            \n-        } else if (current instanceof Vector) {\n-            // already a vector - just add the new token\n-            ((Vector) current).addElement(value);\n+            List values = new Vector(2);\n+            values.add(current);\n+            values.add(value);\n+            put(key, values);\n+            \n+        } else if (current instanceof List) {\n+            // already a list - just add the new token\n+            ((List) current).add(value);\n             \n         } else {\n             // brand new key - store in keysAsListed to retain order\n                     currentOutput.append(escape((String) value));\n                     theWrtr.println(currentOutput.toString());\n                     \n-                } else if (value instanceof Vector) {\n-                    Vector values = (Vector) value;\n-                    Enumeration valuesEnum = values.elements();\n-                    while (valuesEnum.hasMoreElements()) {\n-                        String currentElement = (String) valuesEnum.nextElement();\n+                } else if (value instanceof List) {\n+                    List values = (List) value;\n+                    for (Iterator it = values.iterator(); it.hasNext(); ) {\n+                        String currentElement = (String) it.next();\n                         StringBuffer currentOutput = new StringBuffer();\n                         currentOutput.append(key);\n                         currentOutput.append(\"=\");\n             } else {\n                 return interpolate(defaultValue);\n             }\n-        } else if (value instanceof Vector) {\n-            return interpolate((String) ((Vector) value).get(0));\n+        } else if (value instanceof List) {\n+            return interpolate((String) ((List) value).get(0));\n         } else {\n             throw new ClassCastException('\\'' + key + \"' doesn't map to a String object\");\n         }\n      * @param key The configuration key.\n      * @return The associated properties if key is found.\n      * @throws ClassCastException is thrown if the key maps to an\n-     * object that is not a String/Vector.\n+     * object that is not a String/List.\n      * @throws IllegalArgumentException if one of the tokens is\n      * malformed (does not contain an equals sign).\n      */\n      * @param key The configuration key.\n      * @return The associated properties if key is found.\n      * @throws ClassCastException is thrown if the key maps to an\n-     * object that is not a String/Vector.\n+     * object that is not a String/List.\n      * @throws IllegalArgumentException if one of the tokens is\n      * malformed (does not contain an equals sign).\n      */\n      * @param key The configuration key.\n      * @return The associated string array if key is found.\n      * @throws ClassCastException is thrown if the key maps to an\n-     * object that is not a String/Vector.\n+     * object that is not a String/List.\n      */\n     public String[] getStringArray(String key) {\n         Object value = get(key);\n \n-        // What's your vector, Victor?\n-        Vector vector;\n+        List values;\n         if (value instanceof String) {\n-            vector = new Vector(1);\n-            vector.addElement(value);\n-            \n-        } else if (value instanceof Vector) {\n-            vector = (Vector) value;\n+            values = new Vector(1);\n+            values.add(value);\n+            \n+        } else if (value instanceof List) {\n+            values = (List) value;\n             \n         } else if (value == null) {\n             if (defaults != null) {\n                 return new String[0];\n             }\n         } else {\n-            throw new ClassCastException('\\'' + key + \"' doesn't map to a String/Vector object\");\n-        }\n-\n-        String[] tokens = new String[vector.size()];\n+            throw new ClassCastException('\\'' + key + \"' doesn't map to a String/List object\");\n+        }\n+\n+        String[] tokens = new String[values.size()];\n         for (int i = 0; i < tokens.length; i++) {\n-            tokens[i] = (String) vector.elementAt(i);\n+            tokens[i] = (String) values.get(i);\n         }\n \n         return tokens;\n     }\n \n     /**\n-     * Get a Vector of strings associated with the given configuration\n-     * key.\n+     * Get a Vector of strings associated with the given configuration key.\n+     * <p>\n+     * The list is a copy of the internal data of this object, and as\n+     * such you may alter it freely.\n      *\n      * @param key The configuration key.\n      * @param defaultValue The default value.\n     public Vector getVector(String key, Vector defaultValue) {\n         Object value = get(key);\n \n-        if (value instanceof Vector) {\n-            return (Vector) value;\n+        if (value instanceof List) {\n+            return new Vector((List) value);\n             \n         } else if (value instanceof String) {\n-            Vector v = new Vector(1);\n-            v.addElement(value);\n-            put(key, v);\n-            return v;\n+            Vector values = new Vector(1);\n+            values.add(value);\n+            put(key, values);\n+            return values;\n             \n         } else if (value == null) {\n             if (defaults != null) {\n             }\n         } else {\n             throw new ClassCastException('\\'' + key + \"' doesn't map to a Vector object\");\n+        }\n+    }\n+\n+    /**\n+     * Get a List of strings associated with the given configuration key.\n+     * <p>\n+     * The list is a copy of the internal data of this object, and as\n+     * such you may alter it freely.\n+     *\n+     * @param key The configuration key.\n+     * @return The associated List object.\n+     * @throws ClassCastException is thrown if the key maps to an\n+     * object that is not a List.\n+     */\n+    public List getList(String key) {\n+        return getList(key, null);\n+    }\n+\n+    /**\n+     * Get a List of strings associated with the given configuration key.\n+     * <p>\n+     * The list is a copy of the internal data of this object, and as\n+     * such you may alter it freely.\n+     *\n+     * @param key The configuration key.\n+     * @param defaultValue The default value.\n+     * @return The associated List.\n+     * @throws ClassCastException is thrown if the key maps to an\n+     * object that is not a List.\n+     */\n+    public List getList(String key, List defaultValue) {\n+        Object value = get(key);\n+\n+        if (value instanceof List) {\n+            return new ArrayList((List) value);\n+            \n+        } else if (value instanceof String) {\n+            List values = new ArrayList(1);\n+            values.add(value);\n+            put(key, values);\n+            return values;\n+            \n+        } else if (value == null) {\n+            if (defaults != null) {\n+                return defaults.getList(key, defaultValue);\n+            } else {\n+                return ((defaultValue == null) ? new ArrayList() : defaultValue);\n+            }\n+        } else {\n+            throw new ClassCastException('\\'' + key + \"' doesn't map to a List object\");\n         }\n     }\n \n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n  * @author Mohan Kishore\n  * @author Stephen Colebourne\n  * @author Shinobu Kawai\n+ * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  */\n public class TestExtendedProperties extends TestCase {\n     \n         assertEquals(\"This returns '1'\", eprop.getString(\"number\"), \"1\");\n \n         /*\n-         * now add another and get a Vector\n+         * now add another and get a Vector/list\n          */\n         eprop.addProperty(\"number\", \"2\");\n         assertTrue(\"This returns array\", (eprop.getVector(\"number\") instanceof java.util.Vector));\n+        assertTrue(\"This returns array\", (eprop.getList(\"number\") instanceof java.util.List));\n \n         /*\n          *  now test dan's new fix where we get the first scalar \n-         *  when we access a vector valued\n+         *  when we access a vector/list valued\n          *  property\n          */\n         assertTrue(\"This returns scalar\", (eprop.getString(\"number\") instanceof String));\n         String prop = \"hey, that's a test\";\n         eprop.setProperty(\"prop.string\", prop);\n         assertTrue(\"This returns vector\", (eprop.getVector(\"prop.string\") instanceof java.util.Vector));\n+        assertTrue(\"This returns list\", (eprop.getList(\"prop.string\") instanceof java.util.List));\n \n         String prop2 = \"hey\\\\, that's a test\";\n         eprop.remove(\"prop.string\");\n         assertTrue(\"Returns the full string\", subEprop.getString(\"string\").equals(prop));\n         assertTrue(\"This returns string for subset\", (subEprop.getString(\"string\") instanceof java.lang.String));\n         assertTrue(\"This returns array for subset\", (subEprop.getVector(\"string\") instanceof java.util.Vector));\n+        assertTrue(\"This returns array for subset\", (subEprop.getList(\"string\") instanceof java.util.List));\n \n     }\n \n                     \"Hello\", ep1.getVector(\"three\").get(0));\n             assertEquals(\"Commas not interpreted properly\", \n                     \"World\", ep1.getVector(\"three\").get(1));\n+\n+            assertEquals(\"Commas not interpreted properly\", \n+                    2, ep1.getList(\"three\").size());\n+            assertEquals(\"Commas not interpreted properly\", \n+                    \"Hello\", ep1.getList(\"three\").get(0));\n+            assertEquals(\"Commas not interpreted properly\", \n+                    \"World\", ep1.getList(\"three\").get(1));\n                     \n             ByteArrayOutputStream baos = new ByteArrayOutputStream();\n             ep1.save(baos, null);\n         ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n         ep1.load(bais);\n         assertEquals(1, ep1.size());\n+\n         assertEquals(3, ep1.getVector(\"one\").size());\n         assertEquals(\"a\", ep1.getVector(\"one\").get(0));\n         assertEquals(\"b\", ep1.getVector(\"one\").get(1));\n         assertEquals(\"c\", ep1.getVector(\"one\").get(2));\n+\n+        assertEquals(3, ep1.getList(\"one\").size());\n+        assertEquals(\"a\", ep1.getList(\"one\").get(0));\n+        assertEquals(\"b\", ep1.getList(\"one\").get(1));\n+        assertEquals(\"c\", ep1.getList(\"one\").get(2));\n     }\n     \n     public void testMultipleSameKey2() throws Exception {\n         ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n         ep1.load(bais);\n         assertEquals(1, ep1.size());\n+\n         assertEquals(4, ep1.getVector(\"one\").size());\n         assertEquals(\"a\", ep1.getVector(\"one\").get(0));\n         assertEquals(\"b\", ep1.getVector(\"one\").get(1));\n         assertEquals(\"c\", ep1.getVector(\"one\").get(2));\n         assertEquals(\"d\", ep1.getVector(\"one\").get(3));\n+\n+        assertEquals(4, ep1.getList(\"one\").size());\n+        assertEquals(\"a\", ep1.getList(\"one\").get(0));\n+        assertEquals(\"b\", ep1.getList(\"one\").get(1));\n+        assertEquals(\"c\", ep1.getList(\"one\").get(2));\n+        assertEquals(\"d\", ep1.getList(\"one\").get(3));\n     }\n     \n     public void testMultipleSameKey3() throws Exception {\n         ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n         ep1.load(bais);\n         assertEquals(1, ep1.size());\n+\n         assertEquals(3, ep1.getVector(\"one\").size());\n         assertEquals(\"a\", ep1.getVector(\"one\").get(0));\n         assertEquals(\"b\", ep1.getVector(\"one\").get(1));\n         assertEquals(\"c\", ep1.getVector(\"one\").get(2));\n+\n+        assertEquals(3, ep1.getList(\"one\").size());\n+        assertEquals(\"a\", ep1.getList(\"one\").get(0));\n+        assertEquals(\"b\", ep1.getList(\"one\").get(1));\n+        assertEquals(\"c\", ep1.getList(\"one\").get(2));\n     }\n     \n     public void testMultipleSameKeyByCode() throws Exception {\n \n         ep1.addProperty(\"one\", \"a\");\n         assertEquals(1, ep1.size());\n+\n         assertEquals(1, ep1.getVector(\"one\").size());\n         assertEquals(\"a\", ep1.getVector(\"one\").get(0));\n+\n+        assertEquals(1, ep1.getList(\"one\").size());\n+        assertEquals(\"a\", ep1.getList(\"one\").get(0));\n         \n         ep1.addProperty(\"one\", Boolean.TRUE);\n         assertEquals(1, ep1.size());\n+\n         assertEquals(2, ep1.getVector(\"one\").size());\n         assertEquals(\"a\", ep1.getVector(\"one\").get(0));\n         assertEquals(Boolean.TRUE, ep1.getVector(\"one\").get(1));\n+\n+        assertEquals(2, ep1.getList(\"one\").size());\n+        assertEquals(\"a\", ep1.getList(\"one\").get(0));\n+        assertEquals(Boolean.TRUE, ep1.getList(\"one\").get(1));\n         \n         ep1.addProperty(\"one\", \"c,d\");\n         assertEquals(1, ep1.size());\n+\n         assertEquals(4, ep1.getVector(\"one\").size());\n         assertEquals(\"a\", ep1.getVector(\"one\").get(0));\n         assertEquals(Boolean.TRUE, ep1.getVector(\"one\").get(1));\n         assertEquals(\"c\", ep1.getVector(\"one\").get(2));\n         assertEquals(\"d\", ep1.getVector(\"one\").get(3));\n+\n+        assertEquals(4, ep1.getList(\"one\").size());\n+        assertEquals(\"a\", ep1.getList(\"one\").get(0));\n+        assertEquals(Boolean.TRUE, ep1.getList(\"one\").get(1));\n+        assertEquals(\"c\", ep1.getList(\"one\").get(2));\n+        assertEquals(\"d\", ep1.getList(\"one\").get(3));\n     }\n \n     public void testInheritDefaultProperties() {", "timestamp": 1131901191, "metainfo": ""}