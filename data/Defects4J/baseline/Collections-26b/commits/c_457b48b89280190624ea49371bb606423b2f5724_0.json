{"sha": "457b48b89280190624ea49371bb606423b2f5724", "log": "Replace IteratorUtils calls with direct implementation calls   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MultiHashMap.java\n+++ b/src/java/org/apache/commons/collections/MultiHashMap.java\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Set;\n+\n+import org.apache.commons.collections.iterators.EmptyIterator;\n \n /** \n  * <code>MultiHashMap</code> is the default implementation of the \n  * <code>list</code> will be a list containing \"A\", \"B\", \"C\".\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.18 $ $Date: 2004/05/14 22:33:31 $\n+ * @version $Revision: 1.19 $ $Date: 2004/05/26 21:56:05 $\n  * \n  * @author Christopher Berry\n  * @author James Strachan\n     public Iterator iterator(Object key) {\n         Collection coll = getCollection(key);\n         if (coll == null) {\n-            return IteratorUtils.EMPTY_ITERATOR;\n+            return EmptyIterator.INSTANCE;\n         }\n         return coll.iterator();\n     }\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n import java.util.Set;\n \n import org.apache.commons.collections.BidiMap;\n-import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.KeyValue;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.OrderedBidiMap;\n import org.apache.commons.collections.OrderedIterator;\n import org.apache.commons.collections.OrderedMapIterator;\n+import org.apache.commons.collections.iterators.EmptyOrderedMapIterator;\n import org.apache.commons.collections.keyvalue.UnmodifiableMapEntry;\n \n /**\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.13 $ $Date: 2004/05/15 11:59:15 $\n+ * @version $Revision: 1.14 $ $Date: 2004/05/26 21:58:02 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n      */\n     public MapIterator mapIterator() {\n         if (isEmpty()) {\n-            return IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR;\n+            return EmptyOrderedMapIterator.INSTANCE;\n         }\n         return new ViewMapIterator(this, KEY);\n     }\n      */\n     public OrderedMapIterator orderedMapIterator() {\n         if (isEmpty()) {\n-            return IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR;\n+            return EmptyOrderedMapIterator.INSTANCE;\n         }\n         return new ViewMapIterator(this, KEY);\n     }\n         \n         public MapIterator mapIterator() {\n             if (isEmpty()) {\n-                return IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR;\n+                return EmptyOrderedMapIterator.INSTANCE;\n             }\n             return new ViewMapIterator(main, VALUE);\n         }\n \n         public OrderedMapIterator orderedMapIterator() {\n             if (isEmpty()) {\n-                return IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR;\n+                return EmptyOrderedMapIterator.INSTANCE;\n             }\n             return new ViewMapIterator(main, VALUE);\n         }\n--- a/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n import java.util.Collection;\n import java.util.Iterator;\n \n-import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.iterators.EmptyIterator;\n import org.apache.commons.collections.iterators.IteratorChain;\n import org.apache.commons.collections.list.UnmodifiableList;\n \n  * strategy is provided then add and remove are unsupported.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/05/15 12:39:13 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/26 21:58:02 $\n  *\n  * @author Brian McCallister\n  * @author Stephen Colebourne\n      */\n     public Iterator iterator() {\n         if (this.all.length == 0) {\n-            return IteratorUtils.EMPTY_ITERATOR;\n+            return EmptyIterator.INSTANCE;\n         }\n         IteratorChain chain = new IteratorChain();\n         for (int i = 0; i < this.all.length; ++i) {\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n  * iterators. In this case the class will function as an empty iterator.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.12 $ $Date: 2004/02/18 00:59:50 $\n+ * @version $Revision: 1.13 $ $Date: 2004/05/26 21:58:02 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n     protected void updateCurrentIterator() {\n         if (currentIterator == null) {\n             if (iteratorChain.isEmpty()) {\n-                currentIterator = IteratorUtils.EMPTY_ITERATOR;\n+                currentIterator = EmptyIterator.INSTANCE;\n             } else {\n                 currentIterator = (Iterator) iteratorChain.get(0);\n             }\n--- a/src/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/java/org/apache/commons/collections/list/TreeList.java\n  * does use sligtly more memory.\n  * \n  * @since Commons Collections 3.1\n- * @version $Revision: 1.2 $ $Date: 2004/05/12 23:24:45 $\n+ * @version $Revision: 1.3 $ $Date: 2004/05/26 21:56:05 $\n  *\n  * @author Joerg Schmuecker\n  * @author Stephen Colebourne\n      */\n     public ListIterator listIterator(int fromIndex) {\n         // override to go 75% faster\n-        // cannot use IteratorUtils.EMPTY_ITERATOR as iterator.add() must work\n+        // cannot use EmptyIterator as iterator.add() must work\n         checkInterval(fromIndex, 0, size());\n         return new TreeListIterator(this, fromIndex);\n     }\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n import java.util.Set;\n \n import org.apache.commons.collections.IterableMap;\n-import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.KeyValue;\n import org.apache.commons.collections.MapIterator;\n+import org.apache.commons.collections.iterators.EmptyIterator;\n+import org.apache.commons.collections.iterators.EmptyMapIterator;\n \n /**\n  * An abstract implementation of a hash-based map which provides numerous points for\n  * need for unusual subclasses is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.17 $ $Date: 2004/04/27 21:28:40 $\n+ * @version $Revision: 1.18 $ $Date: 2004/05/26 21:56:05 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n      */\n     public MapIterator mapIterator() {\n         if (size == 0) {\n-            return IteratorUtils.EMPTY_MAP_ITERATOR;\n+            return EmptyMapIterator.INSTANCE;\n         }\n         return new HashMapIterator(this);\n     }\n      */\n     protected Iterator createEntrySetIterator() {\n         if (size() == 0) {\n-            return IteratorUtils.EMPTY_ITERATOR;\n+            return EmptyIterator.INSTANCE;\n         }\n         return new EntrySetIterator(this);\n     }\n      */\n     protected Iterator createKeySetIterator() {\n         if (size() == 0) {\n-            return IteratorUtils.EMPTY_ITERATOR;\n+            return EmptyIterator.INSTANCE;\n         }\n         return new KeySetIterator(this);\n     }\n      */\n     protected Iterator createValuesIterator() {\n         if (size() == 0) {\n-            return IteratorUtils.EMPTY_ITERATOR;\n+            return EmptyIterator.INSTANCE;\n         }\n         return new ValuesIterator(this);\n     }\n--- a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n import java.util.Map;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.OrderedIterator;\n import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.OrderedMapIterator;\n import org.apache.commons.collections.ResettableIterator;\n+import org.apache.commons.collections.iterators.EmptyOrderedIterator;\n+import org.apache.commons.collections.iterators.EmptyOrderedMapIterator;\n \n /**\n  * An abstract implementation of a hash-based map that links entries to create an\n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.11 $ $Date: 2004/04/09 22:52:48 $\n+ * @version $Revision: 1.12 $ $Date: 2004/05/26 21:56:05 $\n  *\n  * @author java util LinkedHashMap\n  * @author Stephen Colebourne\n      */\n     public MapIterator mapIterator() {\n         if (size == 0) {\n-            return IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR;\n+            return EmptyOrderedMapIterator.INSTANCE;\n         }\n         return new LinkMapIterator(this);\n     }\n      */\n     public OrderedMapIterator orderedMapIterator() {\n         if (size == 0) {\n-            return IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR;\n+            return EmptyOrderedMapIterator.INSTANCE;\n         }\n         return new LinkMapIterator(this);\n     }\n      */\n     protected Iterator createEntrySetIterator() {\n         if (size() == 0) {\n-            return IteratorUtils.EMPTY_ORDERED_ITERATOR;\n+            return EmptyOrderedIterator.INSTANCE;\n         }\n         return new EntrySetIterator(this);\n     }\n      */\n     protected Iterator createKeySetIterator() {\n         if (size() == 0) {\n-            return IteratorUtils.EMPTY_ORDERED_ITERATOR;\n+            return EmptyOrderedIterator.INSTANCE;\n         }\n         return new KeySetIterator(this);\n     }\n      */\n     protected Iterator createValuesIterator() {\n         if (size() == 0) {\n-            return IteratorUtils.EMPTY_ORDERED_ITERATOR;\n+            return EmptyOrderedIterator.INSTANCE;\n         }\n         return new ValuesIterator(this);\n     }\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n import java.util.Set;\n \n import org.apache.commons.collections.IterableMap;\n-import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.ResettableIterator;\n+import org.apache.commons.collections.iterators.EmptyIterator;\n+import org.apache.commons.collections.iterators.EmptyMapIterator;\n \n /**\n  * A <code>Map</code> implementation that stores data in simple fields until\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.17 $ $Date: 2004/05/03 22:57:40 $\n+ * @version $Revision: 1.18 $ $Date: 2004/05/26 21:56:05 $\n  *\n  * @author Stephen Colebourne\n  */\n             return delegateMap.mapIterator();\n         }\n         if (size == 0) {\n-            return IteratorUtils.EMPTY_MAP_ITERATOR;\n+            return EmptyMapIterator.INSTANCE;\n         }\n         return new FlatMapIterator(this);\n     }\n                 return parent.delegateMap.entrySet().iterator();\n             }\n             if (parent.size() == 0) {\n-                return IteratorUtils.EMPTY_ITERATOR;\n+                return EmptyIterator.INSTANCE;\n             }\n             return new EntrySetIterator(parent);\n         }\n                 return parent.delegateMap.keySet().iterator();\n             }\n             if (parent.size() == 0) {\n-                return IteratorUtils.EMPTY_ITERATOR;\n+                return EmptyIterator.INSTANCE;\n             }\n             return new KeySetIterator(parent);\n         }\n                 return parent.delegateMap.values().iterator();\n             }\n             if (parent.size() == 0) {\n-                return IteratorUtils.EMPTY_ITERATOR;\n+                return EmptyIterator.INSTANCE;\n             }\n             return new ValuesIterator(parent);\n         }", "timestamp": 1085608768, "metainfo": ""}