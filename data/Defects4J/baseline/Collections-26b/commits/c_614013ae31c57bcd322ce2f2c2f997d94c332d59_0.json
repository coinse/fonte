{"sha": "614013ae31c57bcd322ce2f2c2f997d94c332d59", "log": "Checkstyle fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public K getKey() {\n         return entry.getKey();\n     }\n \n+    /** {@inheritDoc} */\n     public V getValue() {\n         return entry.getValue();\n     }\n \n+    /** {@inheritDoc} */\n     public V setValue(V object) {\n         return entry.setValue(object);\n     }\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public int size() {\n         return size;\n     }\n \n+    /** {@inheritDoc} */\n     public boolean isEmpty() {\n         return (size() == 0);\n     }\n \n+    /** {@inheritDoc} */\n     public E get(int index) {\n         Node<E> node = getNode(index, false);\n         return node.getValue();\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public Iterator<E> iterator() {\n         return listIterator();\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator() {\n         return new LinkedListIterator<E>(this, 0);\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator(int fromIndex) {\n         return new LinkedListIterator<E>(this, fromIndex);\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public int indexOf(Object value) {\n         int i = 0;\n         for (Node<E> node = header.next; node != header; node = node.next) {\n         return -1;\n     }\n \n+    /** {@inheritDoc} */\n     public int lastIndexOf(Object value) {\n         int i = size - 1;\n         for (Node<E> node = header.previous; node != header; node = node.previous) {\n         return -1;\n     }\n \n+    /** {@inheritDoc} */\n     public boolean contains(Object value) {\n         return indexOf(value) != -1;\n     }\n \n+    /** {@inheritDoc} */\n     public boolean containsAll(Collection<?> coll) {\n         for (Object o : coll) {\n             if (!contains(o)) {\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public Object[] toArray() {\n         return toArray(new Object[size]);\n     }\n \n+    /** {@inheritDoc} */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T[] toArray(T[] array) {\n         // Extend the array if needed\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public boolean add(E value) {\n         addLast(value);\n         return true;\n     }\n \n+    /** {@inheritDoc} */\n     public void add(int index, E value) {\n         Node<E> node = getNode(index, true);\n         addNodeBefore(node, value);\n     }\n \n+    /** {@inheritDoc} */\n     public boolean addAll(Collection<? extends E> coll) {\n         return addAll(size, coll);\n     }\n \n+    /** {@inheritDoc} */\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         Node<E> node = getNode(index, true);\n         for (E e : coll) {\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public E remove(int index) {\n         Node<E> node = getNode(index, false);\n         E oldValue = node.getValue();\n         return oldValue;\n     }\n \n+    /** {@inheritDoc} */\n     public boolean remove(Object value) {\n         for (Node<E> node = header.next; node != header; node = node.next) {\n             if (isEqualValue(node.getValue(), value)) {\n         return false;\n     }\n \n+    /** {@inheritDoc} */\n     public boolean removeAll(Collection<?> coll) {\n         boolean modified = false;\n         Iterator<E> it = iterator();\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public boolean retainAll(Collection<?> coll) {\n         boolean modified = false;\n         Iterator<E> it = iterator();\n         return modified;\n     }\n \n+    /** {@inheritDoc} */\n     public E set(int index, E value) {\n         Node<E> node = getNode(index, false);\n         E oldValue = node.getValue();\n         return oldValue;\n     }\n \n+    /** {@inheritDoc} */\n     public void clear() {\n         removeAllNodes();\n     }\n \n     //-----------------------------------------------------------------------\n+    \n     public E getFirst() {\n         Node<E> node = header.next;\n         if (node == header) {\n         while (it1.hasNext() && it2.hasNext()) {\n             Object o1 = it1.next();\n             Object o2 = it2.next();\n-            if (!(o1 == null ? o2 == null : o1.equals(o2)))\n+            if (!(o1 == null ? o2 == null : o1.equals(o2))) {\n                 return false;\n+            }\n         }\n         return !(it1.hasNext() || it2.hasNext());\n     }\n--- a/src/main/java/org/apache/commons/collections/list/AbstractListDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractListDecorator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public void add(int index, E object) {\n         decorated().add(index, object);\n     }\n \n+    /** {@inheritDoc} */\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         return decorated().addAll(index, coll);\n     }\n \n+    /** {@inheritDoc} */\n     public E get(int index) {\n         return decorated().get(index);\n     }\n \n+    /** {@inheritDoc} */\n     public int indexOf(Object object) {\n         return decorated().indexOf(object);\n     }\n \n+    /** {@inheritDoc} */\n     public int lastIndexOf(Object object) {\n         return decorated().lastIndexOf(object);\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator() {\n         return decorated().listIterator();\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator(int index) {\n         return decorated().listIterator(index);\n     }\n \n+    /** {@inheritDoc} */\n     public E remove(int index) {\n         return decorated().remove(index);\n     }\n \n+    /** {@inheritDoc} */\n     public E set(int index, E object) {\n         return decorated().set(index, object);\n     }\n \n+    /** {@inheritDoc} */\n     public List<E> subList(int fromIndex, int toIndex) {\n         return decorated().subList(fromIndex, toIndex);\n     }\n--- a/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n      * \n      * @param subList  the sublist to get an iterator for\n      * @param fromIndex  the index to start from, relative to the sublist\n+     * @return the list iterator for the sublist\n      */\n     @Override\n     protected ListIterator<E> createSubListListIterator(LinkedSubList<E> subList, int fromIndex) {\n         /**\n          * Constructs a new cursor.\n          * \n+         * @param parent  the parent list\n          * @param index  the index to start from\n          */\n         protected Cursor(CursorableLinkedList<E> parent, int index) {\n         /**\n          * Constructs a new cursor.\n          * \n+         * @param sub  the sub list\n          * @param index  the index to start from\n          */\n         protected SubCursor(LinkedSubList<E> sub, int index) {\n--- a/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n         }\n     }\n \n+    /** {@inheritDoc} */\n     public boolean isFull() {\n         return true;\n     }\n \n+    /** {@inheritDoc} */\n     public int maxSize() {\n         return size();\n     }\n--- a/src/main/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/main/java/org/apache/commons/collections/list/LazyList.java\n      * placeholder that is replaced with a factory object when requested.\n      * \n      * @param index  the index to retrieve\n+     * @return the element at the given index\n      */\n     @Override\n     public E get(int index) {\n--- a/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public E get(int index) {\n         return decorated().get(index);\n     }\n \n+    /** {@inheritDoc} */\n     public int indexOf(Object object) {\n         return decorated().indexOf(object);\n     }\n \n+    /** {@inheritDoc} */\n     public int lastIndexOf(Object object) {\n         return decorated().lastIndexOf(object);\n     }\n \n+    /** {@inheritDoc} */\n     public E remove(int index) {\n         return decorated().remove(index);\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public void add(int index, E object) {\n         validate(object);\n         decorated().add(index, object);\n     }\n \n+    /** {@inheritDoc} */\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         for (E aColl : coll) {\n             validate(aColl);\n         return decorated().addAll(index, coll);\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator() {\n         return listIterator(0);\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator(int i) {\n         return new PredicatedListIterator(decorated().listIterator(i));\n     }\n \n+    /** {@inheritDoc} */\n     public E set(int index, E object) {\n         validate(object);\n         return decorated().set(index, object);\n     }\n \n+    /** {@inheritDoc} */\n     public List<E> subList(int fromIndex, int toIndex) {\n         List<E> sub = decorated().subList(fromIndex, toIndex);\n         return new PredicatedList<E>(sub, predicate);\n      */\n     protected class PredicatedListIterator extends AbstractListIteratorDecorator<E> {\n         \n+        /**\n+         * Create a new predicated list iterator.\n+         * \n+         * @param iterator  the list iterator to decorate\n+         */\n         protected PredicatedListIterator(ListIterator<E> iterator) {\n             super(iterator);\n         }\n--- a/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public void add(int index, E object) {\n         synchronized (lock) {\n             getList().add(index, object);\n         }\n     }\n \n+    /** {@inheritDoc} */\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         synchronized (lock) {\n             return getList().addAll(index, coll);\n         }\n     }\n \n+    /** {@inheritDoc} */\n     public E get(int index) {\n         synchronized (lock) {\n             return getList().get(index);\n         }\n     }\n \n+    /** {@inheritDoc} */\n     public int indexOf(Object object) {\n         synchronized (lock) {\n             return getList().indexOf(object);\n         }\n     }\n \n+    /** {@inheritDoc} */\n     public int lastIndexOf(Object object) {\n         synchronized (lock) {\n             return getList().lastIndexOf(object);\n      *   // do stuff with iterator\n      * }\n      * \n+     * @param index  index of first element to be returned by this list iterator\n      * @return an iterator that must be manually synchronized on the collection\n      */\n     public ListIterator<E> listIterator(int index) {\n         return getList().listIterator(index);\n     }\n \n+    /** {@inheritDoc} */\n     public E remove(int index) {\n         synchronized (lock) {\n             return getList().remove(index);\n         }\n     }\n \n+    /** {@inheritDoc} */\n     public E set(int index, E object) {\n         synchronized (lock) {\n             return getList().set(index, object);\n         }\n     }\n \n+    /** {@inheritDoc} */\n     public List<E> subList(int fromIndex, int toIndex) {\n         synchronized (lock) {\n             List<E> list = getList().subList(fromIndex, toIndex);\n--- a/src/main/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TransformedList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public E get(int index) {\n         return getList().get(index);\n     }\n \n+    /** {@inheritDoc} */\n     public int indexOf(Object object) {\n         return getList().indexOf(object);\n     }\n \n+    /** {@inheritDoc} */\n     public int lastIndexOf(Object object) {\n         return getList().lastIndexOf(object);\n     }\n \n+    /** {@inheritDoc} */\n     public E remove(int index) {\n         return getList().remove(index);\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /** {@inheritDoc} */\n     public void add(int index, E object) {\n         object = transform(object);\n         getList().add(index, object);\n     }\n \n+    /** {@inheritDoc} */\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         coll = transform(coll);\n         return getList().addAll(index, coll);\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator() {\n         return listIterator(0);\n     }\n \n+    /** {@inheritDoc} */\n     public ListIterator<E> listIterator(int i) {\n         return new TransformedListIterator(getList().listIterator(i));\n     }\n \n+    /** {@inheritDoc} */\n     public E set(int index, E object) {\n         object = transform(object);\n         return getList().set(index, object);\n     }\n \n+    /** {@inheritDoc} */\n     public List<E> subList(int fromIndex, int toIndex) {\n         List<E> sub = getList().subList(fromIndex, toIndex);\n         return new TransformedList<E>(sub, transformer);\n      */\n     protected class TransformedListIterator extends AbstractListIteratorDecorator<E> {\n \n+        /**\n+         * Create a new transformed list iterator.\n+         * \n+         * @param iterator  the list iterator to decorate\n+         */\n         protected TransformedListIterator(ListIterator<E> iterator) {\n             super(iterator);\n         }\n--- a/src/main/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TreeList.java\n     /**\n      * Searches for the index of an object in the list.\n      *\n+     * @param object  the object to search\n      * @return the index of the object, -1 if not found\n      */\n     @Override\n     /**\n      * Searches for the presence of an object in the list.\n      *\n+     * @param object  the object to check\n      * @return true if the object is found\n      */\n     @Override", "timestamp": 1344280889, "metainfo": ""}