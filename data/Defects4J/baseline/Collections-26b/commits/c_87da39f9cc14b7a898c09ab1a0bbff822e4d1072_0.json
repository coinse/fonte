{"sha": "87da39f9cc14b7a898c09ab1a0bbff822e4d1072", "log": "Complete unmodifiable map implementations and tests   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.2 2003/11/20 22:35:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n  * Decorates another <code>Map</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/20 22:35:50 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableMap extends AbstractMapDecorator {\n+public final class UnmodifiableMap extends AbstractMapDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable map.\n      * @throws IllegalArgumentException if map is null\n      */\n     public static Map decorate(Map map) {\n+        if (map instanceof Unmodifiable) {\n+            return map;\n+        }\n         return new UnmodifiableMap(map);\n     }\n \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java,v 1.1 2003/11/20 22:35:50 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.iterators.OrderedMapIterator;\n+import org.apache.commons.collections.iterators.UnmodifiableMapIterator;\n+import org.apache.commons.collections.iterators.UnmodifiableOrderedMapIterator;\n+import org.apache.commons.collections.map.UnmodifiableMap.UnmodifiableEntrySet;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n+\n+/**\n+ * Decorates another <code>OrderedMap</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/20 22:35:50 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public final class UnmodifiableOrderedMap extends AbstractOrderedMapDecorator implements Unmodifiable {\n+\n+    /**\n+     * Factory method to create an unmodifiable sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static OrderedMap decorate(OrderedMap map) {\n+        if (map instanceof Unmodifiable) {\n+            return map;\n+        }\n+        return new UnmodifiableOrderedMap(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected UnmodifiableOrderedMap(OrderedMap map) {\n+        super(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public MapIterator mapIterator() {\n+        MapIterator it = getOrderedMap().mapIterator();\n+        return UnmodifiableMapIterator.decorate(it);\n+    }\n+\n+    public OrderedMapIterator orderedMapIterator() {\n+        OrderedMapIterator it = getOrderedMap().orderedMapIterator();\n+        return UnmodifiableOrderedMapIterator.decorate(it);\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object put(Object key, Object value) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object remove(Object key) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Set entrySet() {\n+        Set set = super.entrySet();\n+        return new UnmodifiableEntrySet(set);\n+    }\n+\n+    public Set keySet() {\n+        Set set = super.keySet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public Collection values() {\n+        Collection coll = super.values();\n+        return UnmodifiableCollection.decorate(coll);\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java,v 1.2 2003/11/20 22:35:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.map;\n \n+import java.util.Collection;\n import java.util.Comparator;\n import java.util.Map;\n+import java.util.Set;\n import java.util.SortedMap;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.map.UnmodifiableMap.UnmodifiableEntrySet;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>SortedMap</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/20 22:35:50 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableSortedMap extends UnmodifiableMap implements SortedMap {\n+public final class UnmodifiableSortedMap extends AbstractSortedMapDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable sorted map.\n      * @throws IllegalArgumentException if map is null\n      */\n     public static SortedMap decorate(SortedMap map) {\n+        if (map instanceof Unmodifiable) {\n+            return map;\n+        }\n         return new UnmodifiableSortedMap(map);\n     }\n \n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    protected UnmodifiableSortedMap(Map map) {\n+    protected UnmodifiableSortedMap(SortedMap map) {\n         super(map);\n     }\n \n-    /**\n-     * Gets the map being decorated.\n-     * \n-     * @return the decorated map\n-     */\n-    protected SortedMap getSortedMap() {\n-        return (SortedMap) map;\n+    //-----------------------------------------------------------------------\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object put(Object key, Object value) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object remove(Object key) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Set entrySet() {\n+        Set set = super.entrySet();\n+        return new UnmodifiableEntrySet(set);\n+    }\n+\n+    public Set keySet() {\n+        Set set = super.keySet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public Collection values() {\n+        Collection coll = super.values();\n+        return UnmodifiableCollection.decorate(coll);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/map/TestAll.java\n+++ b/src/test/org/apache/commons/collections/map/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.2 2003/11/18 23:23:05 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.3 2003/11/20 22:35:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/18 23:23:05 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/20 22:35:50 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestPredicatedMap.suite());\n         suite.addTest(TestPredicatedSortedMap.suite());\n         suite.addTest(TestUnmodifiableMap.suite());\n+        suite.addTest(TestUnmodifiableOrderedMap.suite());\n+        suite.addTest(TestUnmodifiableSortedMap.suite());\n         \n         return suite;\n     }\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.3 2003/11/18 22:37:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.4 2003/11/20 22:35:50 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.map;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.Map;\n-import java.util.Set;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Unmodifiable;\n \n /**\n  * Extension of {@link AbstractTestMap} for exercising the \n  * {@link UnmodifiableMap} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/18 22:37:17 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/20 22:35:50 $\n  * \n  * @author Phil Steitz\n  */\n         return UnmodifiableMap.decorate(m);\n     }\n     \n-    //--------------------------------------------------------------------\n-    protected UnmodifiableMap map = null;\n-    protected ArrayList array = null;\n-    \n-    protected void setupMap() {\n-        map = (UnmodifiableMap) makeFullMap();\n-        array = new ArrayList();\n-        array.add(\"one\");\n+    //-----------------------------------------------------------------------\n+    public void testUnmodifiable() {\n+        assertTrue(makeEmptyMap() instanceof Unmodifiable);\n+        assertTrue(makeFullMap() instanceof Unmodifiable);\n     }\n     \n-    public void testUnmodifiableBase() {\n-        setupMap();\n-        try {\n-            map.put(\"key\", \"value\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            map.putAll(new HashMap());\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            map.clear();\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            map.remove(\"x\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-    }\n-    \n-    /**\n-     * Verifies that the keyset is not modifiable -- effectively tests\n-     * protection of UnmodifiableSet decorator\n-     */\n-    public void testUnmodifiableKeySet() {\n-        setupMap();\n-        Set keys = map.keySet();\n-        try {\n-            keys.add(\"x\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            keys.addAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            keys.clear();\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            keys.remove(\"one\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            keys.removeAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            keys.retainAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            Iterator iterator = keys.iterator();\n-            iterator.next();\n-            iterator.remove();\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-    }\n-        \n-    /**\n-     * Verifies that the values collection is not modifiable -- effectively tests\n-     * protection of UnmodifiableCollection decorator\n-     */\n-    public void testUnmodifiableValues() {\n-        setupMap();\n-        Collection values = map.values();\n-        try {\n-            values.add(\"x\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            values.addAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            values.clear();\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            values.remove(\"one\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            values.removeAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            values.retainAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            Iterator iterator = values.iterator();\n-            iterator.next();\n-            iterator.remove();\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-    }\n-    \n-    /**\n-     * Verifies that the entrySet is not modifiable -- effectively tests\n-     * protection of UnmodifiableEntrySet \n-     */\n-    public void testUnmodifiableEntries() {\n-        setupMap();\n-        Set entries = map.entrySet();\n-        try {\n-            entries.add(\"x\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            entries.addAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            entries.clear();\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            entries.remove(\"one\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            entries.removeAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            entries.retainAll(array);\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n-        try {\n-            Iterator iterator = entries.iterator();\n-            iterator.next();\n-            iterator.remove();\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }\n+    public void testDecorateFactory() {\n+        Map map = makeFullMap();\n+        assertSame(map, UnmodifiableMap.decorate(map));\n         \n         try {\n-            Iterator iterator = entries.iterator();\n-            Map.Entry entry = (Map.Entry) iterator.next();\n-            entry.setValue(\"x\");\n-            fail(\"Expecting UnsupportedOperationException.\");\n-        } catch (UnsupportedOperationException e) {\n-            // expected\n-        }                 \n+            UnmodifiableMap.decorate(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n-    \n-    /**\n-     * Verifies that entries consists of Map.Entries corresponding to the parallel\n-     * keys and values arrays  (not necessarily in order)\n-     */\n-    protected void checkEntries(Object[] keys, Object[] values, Object[] entries,\n-        boolean checkLengths) {\n-        if (checkLengths) {\n-            assertEquals(keys.length, entries.length);\n-        }\n-        for (int i = 0; i < keys.length; i++) {\n-            Map.Entry entry = (Map.Entry) entries[i];\n-            boolean found = false;\n-            // Can't assume entries are in insertion order, so have\n-            // to search for the key\n-            for (int j = 0; j < keys.length; j++) {\n-                if (entry.getKey() == keys[j]) {\n-                    found = true;\n-                    assertEquals(entry.getValue(), values[j]);\n-                    break;\n-                }\n-            }\n-            assertTrue(found);\n-        }\n-    }\n-    \n-    /**\n-     * Tests EntrySet toArray() implementation\n-     */\n-    public void testToArray() {\n-        setupMap();\n-        Object[] keys = getSampleKeys();\n-        Object[] values = getSampleValues();\n-        Object[] entries = map.entrySet().toArray();\n-        assertTrue(keys.length == entries.length);\n-        checkEntries(keys, values, entries, true);\n-        entries = map.entrySet().toArray(entries);\n-        checkEntries(keys, values, entries, true);\n-        Object[] testArray = new Object[2];\n-        entries = map.entrySet().toArray(testArray);\n-        checkEntries(keys, values, entries, true);\n-        testArray = new Object[50];\n-        entries = map.entrySet().toArray(testArray);\n-        checkEntries(keys, values, entries, false);\n-        assertEquals(testArray[map.size()], null);\n-        testArray = new Object[0];\n-        Object[] resultArray = new Object[0];\n-        resultArray = map.entrySet().toArray(testArray);\n-        checkEntries(keys, values, resultArray, true);   \n-    }         \n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java,v 1.1 2003/11/20 22:35:50 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Extension of {@link AbstractTestOrderedMap} for exercising the \n+ * {@link UnmodifiableOrderedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/20 22:35:50 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestUnmodifiableOrderedMap extends AbstractTestOrderedMap {\n+    \n+    public TestUnmodifiableOrderedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableOrderedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableOrderedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //-------------------------------------------------------------------\n+    \n+    public Map makeEmptyMap() {\n+        return UnmodifiableOrderedMap.decorate(ListOrderedMap.decorate(new HashMap()));\n+    }\n+    \n+    public boolean isPutChangeSupported() {\n+        return false;\n+    }\n+    \n+    public boolean isPutAddSupported() {\n+        return false;\n+    }\n+    \n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+    \n+    public Map makeFullMap() {\n+        OrderedMap m = ListOrderedMap.decorate(new HashMap());\n+        addSampleMappings(m);\n+        return UnmodifiableOrderedMap.decorate(m);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testUnmodifiable() {\n+        assertTrue(makeEmptyMap() instanceof Unmodifiable);\n+        assertTrue(makeFullMap() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        Map map = makeFullMap();\n+        assertSame(map, UnmodifiableOrderedMap.decorate((OrderedMap) map));\n+        \n+        try {\n+            UnmodifiableOrderedMap.decorate(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableSortedMap.java,v 1.1 2003/11/20 22:35:50 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Extension of {@link AbstractTestSortedMap} for exercising the \n+ * {@link UnmodifiableSortedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/20 22:35:50 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestUnmodifiableSortedMap extends AbstractTestSortedMap {\n+    \n+    public TestUnmodifiableSortedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableSortedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //-------------------------------------------------------------------\n+    \n+    public Map makeEmptyMap() {\n+        return UnmodifiableSortedMap.decorate(new TreeMap());\n+    }\n+    \n+    public boolean isPutChangeSupported() {\n+        return false;\n+    }\n+    \n+    public boolean isPutAddSupported() {\n+        return false;\n+    }\n+    \n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+    \n+    public Map makeFullMap() {\n+        SortedMap m = new TreeMap();\n+        addSampleMappings(m);\n+        return UnmodifiableSortedMap.decorate(m);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testUnmodifiable() {\n+        assertTrue(makeEmptyMap() instanceof Unmodifiable);\n+        assertTrue(makeFullMap() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        Map map = makeFullMap();\n+        assertSame(map, UnmodifiableSortedMap.decorate((SortedMap) map));\n+        \n+        try {\n+            UnmodifiableSortedMap.decorate(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}", "timestamp": 1069367750, "metainfo": ""}