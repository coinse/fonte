{"sha": "c34c46965fe08b887814d52640d07a98b0d874d4", "log": "Fixing eol style as per sebb's email  ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections.map;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.Map;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-import org.apache.commons.collections.IteratorUtils;\n-import org.apache.commons.collections.MultiMap;\n-\n-/**\n- * TestMultiValueMap.\n- *\n- * @author <a href=\"mailto:jcarman@apache.org\">James Carman</a>\n- * @author Stephen Colebourne\n- * @since Commons Collections 3.2\n- */\n-public class TestMultiValueMap extends TestCase {\n-\n-    public TestMultiValueMap(String testName) {\n-        super(testName);\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(TestMultiValueMap.class);\n-    }\n-\n-    public static void main(String args[]) {\n-        String[] testCaseName = { TestMultiValueMap.class.getName()};\n-        junit.textui.TestRunner.main(testCaseName);\n-    }\n-\n-    public void testNoMappingReturnsNull() {\n-        final MultiValueMap map = createTestMap();\n-        assertNull(map.get(\"whatever\"));\n-    }\n-\n-    public void testValueCollectionType() {\n-        final MultiValueMap map = createTestMap(LinkedList.class);\n-        assertTrue(map.get(\"one\") instanceof LinkedList);\n-    }\n-\n-    public void testMultipleValues() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n-        final HashSet expected = new HashSet();\n-        expected.add(\"uno\");\n-        expected.add(\"un\");\n-        assertEquals(expected, map.get(\"one\"));\n-    }\n-\n-    public void testContainsValue() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n-        assertTrue(map.containsValue(\"uno\"));\n-        assertTrue(map.containsValue(\"un\"));\n-        assertTrue(map.containsValue(\"dos\"));\n-        assertTrue(map.containsValue(\"deux\"));\n-        assertTrue(map.containsValue(\"tres\"));\n-        assertTrue(map.containsValue(\"trois\"));\n-        assertFalse(map.containsValue(\"quatro\"));\n-    }\n-\n-    public void testKeyContainsValue() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n-        assertTrue(map.containsValue(\"one\", \"uno\"));\n-        assertTrue(map.containsValue(\"one\", \"un\"));\n-        assertTrue(map.containsValue(\"two\", \"dos\"));\n-        assertTrue(map.containsValue(\"two\", \"deux\"));\n-        assertTrue(map.containsValue(\"three\", \"tres\"));\n-        assertTrue(map.containsValue(\"three\", \"trois\"));\n-        assertFalse(map.containsValue(\"four\", \"quatro\"));\n-    }\n-\n-    public void testValues() {\n-        final MultiValueMap map = createTestMap(HashSet.class);\n-        final HashSet expected = new HashSet();\n-        expected.add(\"uno\");\n-        expected.add(\"dos\");\n-        expected.add(\"tres\");\n-        expected.add(\"un\");\n-        expected.add(\"deux\");\n-        expected.add(\"trois\");\n-        final Collection c = map.values();\n-        assertEquals(6, c.size());\n-        assertEquals(expected, new HashSet(c));\n-    }\n-\n-    private MultiValueMap createTestMap() {\n-        return createTestMap(ArrayList.class);\n-    }\n-\n-    private MultiValueMap createTestMap(Class collectionClass) {\n-        final MultiValueMap map = MultiValueMap.decorate(new HashMap(), collectionClass);\n-        map.put(\"one\", \"uno\");\n-        map.put(\"one\", \"un\");\n-        map.put(\"two\", \"dos\");\n-        map.put(\"two\", \"deux\");\n-        map.put(\"three\", \"tres\");\n-        map.put(\"three\", \"trois\");\n-        return map;\n-    }\n-\n-    public void testKeyedIterator() {\n-        final MultiValueMap map = createTestMap();\n-        final ArrayList actual = new ArrayList(IteratorUtils.toList(map.iterator(\"one\")));\n-        final ArrayList expected = new ArrayList(Arrays.asList(new String[]{\"uno\", \"un\"}));\n-        assertEquals(expected, actual);\n-    }\n-\n-    public void testRemoveAllViaIterator() {\n-        final MultiValueMap map = createTestMap();\n-        for(Iterator i = map.values().iterator(); i.hasNext();) {\n-            i.next();\n-            i.remove();\n-        }\n-        assertNull(map.get(\"one\"));\n-        assertTrue(map.isEmpty());\n-    }\n-\n-    public void testRemoveAllViaKeyedIterator() {\n-        final MultiValueMap map = createTestMap();\n-        for(Iterator i = map.iterator(\"one\"); i.hasNext();) {\n-            i.next();\n-            i.remove();\n-        }\n-        assertNull(map.get(\"one\"));\n-        assertEquals(4, map.totalSize());\n-    }\n-\n-    public void testTotalSizeA() {\n-        assertEquals(6, createTestMap().totalSize());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testMapEquals() {\n-        MultiValueMap one = new MultiValueMap();\n-        Integer value = new Integer(1);\n-        one.put(\"One\", value);\n-        one.remove(\"One\", value);\n-        \n-        MultiValueMap two = new MultiValueMap();\n-        assertEquals(two, one);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testGetCollection() {\n-        MultiValueMap map = new MultiValueMap();\n-        map.put(\"A\", \"AA\");\n-        assertSame(map.get(\"A\"), map.getCollection(\"A\"));\n-    }\n-    \n-    public void testTotalSize() {\n-        MultiValueMap map = new MultiValueMap();\n-        assertEquals(0, map.totalSize());\n-        map.put(\"A\", \"AA\");\n-        assertEquals(1, map.totalSize());\n-        map.put(\"B\", \"BA\");\n-        assertEquals(2, map.totalSize());\n-        map.put(\"B\", \"BB\");\n-        assertEquals(3, map.totalSize());\n-        map.put(\"B\", \"BC\");\n-        assertEquals(4, map.totalSize());\n-        map.remove(\"A\");\n-        assertEquals(3, map.totalSize());\n-        map.remove(\"B\", \"BC\");\n-        assertEquals(2, map.totalSize());\n-    }\n-    \n-    public void testSize() {\n-        MultiValueMap map = new MultiValueMap();\n-        assertEquals(0, map.size());\n-        map.put(\"A\", \"AA\");\n-        assertEquals(1, map.size());\n-        map.put(\"B\", \"BA\");\n-        assertEquals(2, map.size());\n-        map.put(\"B\", \"BB\");\n-        assertEquals(2, map.size());\n-        map.put(\"B\", \"BC\");\n-        assertEquals(2, map.size());\n-        map.remove(\"A\");\n-        assertEquals(1, map.size());\n-        map.remove(\"B\", \"BC\");\n-        assertEquals(1, map.size());\n-    }\n-    \n-    public void testSize_Key() {\n-        MultiValueMap map = new MultiValueMap();\n-        assertEquals(0, map.size(\"A\"));\n-        assertEquals(0, map.size(\"B\"));\n-        map.put(\"A\", \"AA\");\n-        assertEquals(1, map.size(\"A\"));\n-        assertEquals(0, map.size(\"B\"));\n-        map.put(\"B\", \"BA\");\n-        assertEquals(1, map.size(\"A\"));\n-        assertEquals(1, map.size(\"B\"));\n-        map.put(\"B\", \"BB\");\n-        assertEquals(1, map.size(\"A\"));\n-        assertEquals(2, map.size(\"B\"));\n-        map.put(\"B\", \"BC\");\n-        assertEquals(1, map.size(\"A\"));\n-        assertEquals(3, map.size(\"B\"));\n-        map.remove(\"A\");\n-        assertEquals(0, map.size(\"A\"));\n-        assertEquals(3, map.size(\"B\"));\n-        map.remove(\"B\", \"BC\");\n-        assertEquals(0, map.size(\"A\"));\n-        assertEquals(2, map.size(\"B\"));\n-    }\n-    \n-    public void testIterator_Key() {\n-        MultiValueMap map = new MultiValueMap();\n-        assertEquals(false, map.iterator(\"A\").hasNext());\n-        map.put(\"A\", \"AA\");\n-        Iterator it = map.iterator(\"A\");\n-        assertEquals(true, it.hasNext());\n-        it.next();\n-        assertEquals(false, it.hasNext());\n-    }\n-    \n-    public void testContainsValue_Key() {\n-        MultiValueMap map = new MultiValueMap();\n-        assertEquals(false, map.containsValue(\"A\", \"AA\"));\n-        assertEquals(false, map.containsValue(\"B\", \"BB\"));\n-        map.put(\"A\", \"AA\");\n-        assertEquals(true, map.containsValue(\"A\", \"AA\"));\n-        assertEquals(false, map.containsValue(\"A\", \"AB\"));\n-    }\n-\n-    public void testPutWithList() {\n-        MultiValueMap test = MultiValueMap.decorate(new HashMap(), ArrayList.class);\n-        assertEquals(\"a\", test.put(\"A\", \"a\"));\n-        assertEquals(\"b\", test.put(\"A\", \"b\"));\n-        assertEquals(1, test.size());\n-        assertEquals(2, test.size(\"A\"));\n-        assertEquals(2, test.totalSize());\n-    }\n-\n-    public void testPutWithSet() {\n-        MultiValueMap test = MultiValueMap.decorate(new HashMap(), HashSet.class);\n-        assertEquals(\"a\", test.put(\"A\", \"a\"));\n-        assertEquals(\"b\", test.put(\"A\", \"b\"));\n-        assertEquals(null, test.put(\"A\", \"a\"));\n-        assertEquals(1, test.size());\n-        assertEquals(2, test.size(\"A\"));\n-        assertEquals(2, test.totalSize());\n-    }\n-\n-    public void testPutAll_Map1() {\n-        MultiMap original = new MultiValueMap();\n-        original.put(\"key\", \"object1\");\n-        original.put(\"key\", \"object2\");\n-\n-        MultiValueMap test = new MultiValueMap();\n-        test.put(\"keyA\", \"objectA\");\n-        test.put(\"key\", \"object0\");\n-        test.putAll(original);\n-\n-        assertEquals(2, test.size());\n-        assertEquals(4, test.totalSize());\n-        assertEquals(1, test.getCollection(\"keyA\").size());\n-        assertEquals(3, test.getCollection(\"key\").size());\n-        assertEquals(true, test.containsValue(\"objectA\"));\n-        assertEquals(true, test.containsValue(\"object0\"));\n-        assertEquals(true, test.containsValue(\"object1\"));\n-        assertEquals(true, test.containsValue(\"object2\"));\n-    }\n-\n-    public void testPutAll_Map2() {\n-        Map original = new HashMap();\n-        original.put(\"keyX\", \"object1\");\n-        original.put(\"keyY\", \"object2\");\n-\n-        MultiValueMap test = new MultiValueMap();\n-        test.put(\"keyA\", \"objectA\");\n-        test.put(\"keyX\", \"object0\");\n-        test.putAll(original);\n-\n-        assertEquals(3, test.size());\n-        assertEquals(4, test.totalSize());\n-        assertEquals(1, test.getCollection(\"keyA\").size());\n-        assertEquals(2, test.getCollection(\"keyX\").size());\n-        assertEquals(1, test.getCollection(\"keyY\").size());\n-        assertEquals(true, test.containsValue(\"objectA\"));\n-        assertEquals(true, test.containsValue(\"object0\"));\n-        assertEquals(true, test.containsValue(\"object1\"));\n-        assertEquals(true, test.containsValue(\"object2\"));\n-    }\n-\n-    public void testPutAll_KeyCollection() {\n-        MultiValueMap map = new MultiValueMap();\n-        Collection coll = Arrays.asList(new Object[] {\"X\", \"Y\", \"Z\"});\n-        \n-        assertEquals(true, map.putAll(\"A\", coll));\n-        assertEquals(3, map.size(\"A\"));\n-        assertEquals(true, map.containsValue(\"A\", \"X\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n-        \n-        assertEquals(false, map.putAll(\"A\", null));\n-        assertEquals(3, map.size(\"A\"));\n-        assertEquals(true, map.containsValue(\"A\", \"X\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n-        \n-        assertEquals(false, map.putAll(\"A\", new ArrayList()));\n-        assertEquals(3, map.size(\"A\"));\n-        assertEquals(true, map.containsValue(\"A\", \"X\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n-        \n-        coll = Arrays.asList(new Object[] {\"M\"});\n-        assertEquals(true, map.putAll(\"A\", coll));\n-        assertEquals(4, map.size(\"A\"));\n-        assertEquals(true, map.containsValue(\"A\", \"X\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n-        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n-        assertEquals(true, map.containsValue(\"A\", \"M\"));\n-    }\n-\n-    public void testRemove_KeyItem() {\n-        MultiValueMap map = new MultiValueMap();\n-        map.put(\"A\", \"AA\");\n-        map.put(\"A\", \"AB\");\n-        map.put(\"A\", \"AC\");\n-        assertEquals(null, map.remove(\"C\", \"CA\"));\n-        assertEquals(null, map.remove(\"A\", \"AD\"));\n-        assertEquals(\"AC\", map.remove(\"A\", \"AC\"));\n-        assertEquals(\"AB\", map.remove(\"A\", \"AB\"));\n-        assertEquals(\"AA\", map.remove(\"A\", \"AA\"));\n-        assertEquals(new MultiValueMap(), map);\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.MultiMap;\n+\n+/**\n+ * TestMultiValueMap.\n+ *\n+ * @author <a href=\"mailto:jcarman@apache.org\">James Carman</a>\n+ * @author Stephen Colebourne\n+ * @since Commons Collections 3.2\n+ */\n+public class TestMultiValueMap extends TestCase {\n+\n+    public TestMultiValueMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestMultiValueMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestMultiValueMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public void testNoMappingReturnsNull() {\n+        final MultiValueMap map = createTestMap();\n+        assertNull(map.get(\"whatever\"));\n+    }\n+\n+    public void testValueCollectionType() {\n+        final MultiValueMap map = createTestMap(LinkedList.class);\n+        assertTrue(map.get(\"one\") instanceof LinkedList);\n+    }\n+\n+    public void testMultipleValues() {\n+        final MultiValueMap map = createTestMap(HashSet.class);\n+        final HashSet expected = new HashSet();\n+        expected.add(\"uno\");\n+        expected.add(\"un\");\n+        assertEquals(expected, map.get(\"one\"));\n+    }\n+\n+    public void testContainsValue() {\n+        final MultiValueMap map = createTestMap(HashSet.class);\n+        assertTrue(map.containsValue(\"uno\"));\n+        assertTrue(map.containsValue(\"un\"));\n+        assertTrue(map.containsValue(\"dos\"));\n+        assertTrue(map.containsValue(\"deux\"));\n+        assertTrue(map.containsValue(\"tres\"));\n+        assertTrue(map.containsValue(\"trois\"));\n+        assertFalse(map.containsValue(\"quatro\"));\n+    }\n+\n+    public void testKeyContainsValue() {\n+        final MultiValueMap map = createTestMap(HashSet.class);\n+        assertTrue(map.containsValue(\"one\", \"uno\"));\n+        assertTrue(map.containsValue(\"one\", \"un\"));\n+        assertTrue(map.containsValue(\"two\", \"dos\"));\n+        assertTrue(map.containsValue(\"two\", \"deux\"));\n+        assertTrue(map.containsValue(\"three\", \"tres\"));\n+        assertTrue(map.containsValue(\"three\", \"trois\"));\n+        assertFalse(map.containsValue(\"four\", \"quatro\"));\n+    }\n+\n+    public void testValues() {\n+        final MultiValueMap map = createTestMap(HashSet.class);\n+        final HashSet expected = new HashSet();\n+        expected.add(\"uno\");\n+        expected.add(\"dos\");\n+        expected.add(\"tres\");\n+        expected.add(\"un\");\n+        expected.add(\"deux\");\n+        expected.add(\"trois\");\n+        final Collection c = map.values();\n+        assertEquals(6, c.size());\n+        assertEquals(expected, new HashSet(c));\n+    }\n+\n+    private MultiValueMap createTestMap() {\n+        return createTestMap(ArrayList.class);\n+    }\n+\n+    private MultiValueMap createTestMap(Class collectionClass) {\n+        final MultiValueMap map = MultiValueMap.decorate(new HashMap(), collectionClass);\n+        map.put(\"one\", \"uno\");\n+        map.put(\"one\", \"un\");\n+        map.put(\"two\", \"dos\");\n+        map.put(\"two\", \"deux\");\n+        map.put(\"three\", \"tres\");\n+        map.put(\"three\", \"trois\");\n+        return map;\n+    }\n+\n+    public void testKeyedIterator() {\n+        final MultiValueMap map = createTestMap();\n+        final ArrayList actual = new ArrayList(IteratorUtils.toList(map.iterator(\"one\")));\n+        final ArrayList expected = new ArrayList(Arrays.asList(new String[]{\"uno\", \"un\"}));\n+        assertEquals(expected, actual);\n+    }\n+\n+    public void testRemoveAllViaIterator() {\n+        final MultiValueMap map = createTestMap();\n+        for(Iterator i = map.values().iterator(); i.hasNext();) {\n+            i.next();\n+            i.remove();\n+        }\n+        assertNull(map.get(\"one\"));\n+        assertTrue(map.isEmpty());\n+    }\n+\n+    public void testRemoveAllViaKeyedIterator() {\n+        final MultiValueMap map = createTestMap();\n+        for(Iterator i = map.iterator(\"one\"); i.hasNext();) {\n+            i.next();\n+            i.remove();\n+        }\n+        assertNull(map.get(\"one\"));\n+        assertEquals(4, map.totalSize());\n+    }\n+\n+    public void testTotalSizeA() {\n+        assertEquals(6, createTestMap().totalSize());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapEquals() {\n+        MultiValueMap one = new MultiValueMap();\n+        Integer value = new Integer(1);\n+        one.put(\"One\", value);\n+        one.remove(\"One\", value);\n+        \n+        MultiValueMap two = new MultiValueMap();\n+        assertEquals(two, one);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetCollection() {\n+        MultiValueMap map = new MultiValueMap();\n+        map.put(\"A\", \"AA\");\n+        assertSame(map.get(\"A\"), map.getCollection(\"A\"));\n+    }\n+    \n+    public void testTotalSize() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(0, map.totalSize());\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.totalSize());\n+        map.put(\"B\", \"BA\");\n+        assertEquals(2, map.totalSize());\n+        map.put(\"B\", \"BB\");\n+        assertEquals(3, map.totalSize());\n+        map.put(\"B\", \"BC\");\n+        assertEquals(4, map.totalSize());\n+        map.remove(\"A\");\n+        assertEquals(3, map.totalSize());\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(2, map.totalSize());\n+    }\n+    \n+    public void testSize() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(0, map.size());\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.size());\n+        map.put(\"B\", \"BA\");\n+        assertEquals(2, map.size());\n+        map.put(\"B\", \"BB\");\n+        assertEquals(2, map.size());\n+        map.put(\"B\", \"BC\");\n+        assertEquals(2, map.size());\n+        map.remove(\"A\");\n+        assertEquals(1, map.size());\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(1, map.size());\n+    }\n+    \n+    public void testSize_Key() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(0, map.size(\"B\"));\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(0, map.size(\"B\"));\n+        map.put(\"B\", \"BA\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(1, map.size(\"B\"));\n+        map.put(\"B\", \"BB\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(2, map.size(\"B\"));\n+        map.put(\"B\", \"BC\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(3, map.size(\"B\"));\n+        map.remove(\"A\");\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(3, map.size(\"B\"));\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(2, map.size(\"B\"));\n+    }\n+    \n+    public void testIterator_Key() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(false, map.iterator(\"A\").hasNext());\n+        map.put(\"A\", \"AA\");\n+        Iterator it = map.iterator(\"A\");\n+        assertEquals(true, it.hasNext());\n+        it.next();\n+        assertEquals(false, it.hasNext());\n+    }\n+    \n+    public void testContainsValue_Key() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(false, map.containsValue(\"A\", \"AA\"));\n+        assertEquals(false, map.containsValue(\"B\", \"BB\"));\n+        map.put(\"A\", \"AA\");\n+        assertEquals(true, map.containsValue(\"A\", \"AA\"));\n+        assertEquals(false, map.containsValue(\"A\", \"AB\"));\n+    }\n+\n+    public void testPutWithList() {\n+        MultiValueMap test = MultiValueMap.decorate(new HashMap(), ArrayList.class);\n+        assertEquals(\"a\", test.put(\"A\", \"a\"));\n+        assertEquals(\"b\", test.put(\"A\", \"b\"));\n+        assertEquals(1, test.size());\n+        assertEquals(2, test.size(\"A\"));\n+        assertEquals(2, test.totalSize());\n+    }\n+\n+    public void testPutWithSet() {\n+        MultiValueMap test = MultiValueMap.decorate(new HashMap(), HashSet.class);\n+        assertEquals(\"a\", test.put(\"A\", \"a\"));\n+        assertEquals(\"b\", test.put(\"A\", \"b\"));\n+        assertEquals(null, test.put(\"A\", \"a\"));\n+        assertEquals(1, test.size());\n+        assertEquals(2, test.size(\"A\"));\n+        assertEquals(2, test.totalSize());\n+    }\n+\n+    public void testPutAll_Map1() {\n+        MultiMap original = new MultiValueMap();\n+        original.put(\"key\", \"object1\");\n+        original.put(\"key\", \"object2\");\n+\n+        MultiValueMap test = new MultiValueMap();\n+        test.put(\"keyA\", \"objectA\");\n+        test.put(\"key\", \"object0\");\n+        test.putAll(original);\n+\n+        assertEquals(2, test.size());\n+        assertEquals(4, test.totalSize());\n+        assertEquals(1, test.getCollection(\"keyA\").size());\n+        assertEquals(3, test.getCollection(\"key\").size());\n+        assertEquals(true, test.containsValue(\"objectA\"));\n+        assertEquals(true, test.containsValue(\"object0\"));\n+        assertEquals(true, test.containsValue(\"object1\"));\n+        assertEquals(true, test.containsValue(\"object2\"));\n+    }\n+\n+    public void testPutAll_Map2() {\n+        Map original = new HashMap();\n+        original.put(\"keyX\", \"object1\");\n+        original.put(\"keyY\", \"object2\");\n+\n+        MultiValueMap test = new MultiValueMap();\n+        test.put(\"keyA\", \"objectA\");\n+        test.put(\"keyX\", \"object0\");\n+        test.putAll(original);\n+\n+        assertEquals(3, test.size());\n+        assertEquals(4, test.totalSize());\n+        assertEquals(1, test.getCollection(\"keyA\").size());\n+        assertEquals(2, test.getCollection(\"keyX\").size());\n+        assertEquals(1, test.getCollection(\"keyY\").size());\n+        assertEquals(true, test.containsValue(\"objectA\"));\n+        assertEquals(true, test.containsValue(\"object0\"));\n+        assertEquals(true, test.containsValue(\"object1\"));\n+        assertEquals(true, test.containsValue(\"object2\"));\n+    }\n+\n+    public void testPutAll_KeyCollection() {\n+        MultiValueMap map = new MultiValueMap();\n+        Collection coll = Arrays.asList(new Object[] {\"X\", \"Y\", \"Z\"});\n+        \n+        assertEquals(true, map.putAll(\"A\", coll));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        assertEquals(false, map.putAll(\"A\", null));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        assertEquals(false, map.putAll(\"A\", new ArrayList()));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        coll = Arrays.asList(new Object[] {\"M\"});\n+        assertEquals(true, map.putAll(\"A\", coll));\n+        assertEquals(4, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        assertEquals(true, map.containsValue(\"A\", \"M\"));\n+    }\n+\n+    public void testRemove_KeyItem() {\n+        MultiValueMap map = new MultiValueMap();\n+        map.put(\"A\", \"AA\");\n+        map.put(\"A\", \"AB\");\n+        map.put(\"A\", \"AC\");\n+        assertEquals(null, map.remove(\"C\", \"CA\"));\n+        assertEquals(null, map.remove(\"A\", \"AD\"));\n+        assertEquals(\"AC\", map.remove(\"A\", \"AC\"));\n+        assertEquals(\"AB\", map.remove(\"A\", \"AB\"));\n+        assertEquals(\"AA\", map.remove(\"A\", \"AA\"));\n+        assertEquals(new MultiValueMap(), map);\n+    }\n+\n+}", "timestamp": 1207887367, "metainfo": ""}