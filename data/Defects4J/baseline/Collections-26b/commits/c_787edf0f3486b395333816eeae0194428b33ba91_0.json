{"sha": "787edf0f3486b395333816eeae0194428b33ba91", "log": "moved some generic map tests up to TestMap, and implemented a marker interface to indicate when a TestMap class can test put(Object,Object) operations   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/TestLRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.13 2002/02/20 20:51:38 morgand Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/02/20 20:51:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.14 2002/02/20 22:38:46 morgand Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2002/02/20 22:38:46 $\n  *\n  * ====================================================================\n  *\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:morgand@apache.org\">Morgan Delagrange</a>\n- * @version $Id: TestLRUMap.java,v 1.13 2002/02/20 20:51:38 morgand Exp $\n+ * @version $Id: TestLRUMap.java,v 1.14 2002/02/20 22:38:46 morgand Exp $\n  */\n public class TestLRUMap extends TestSequencedHashMap\n {\n \n         assertTrue(\"last value should exist\",map2.get(new Integer(4)).equals(\"foo\"));\n         assertTrue(\"LRU should not exist\", map2.get(new Integer(1)) == null);\n-    }\n-\n-    public void testMultiplePuts() {\n-        LRUMap map2 = new LRUMap(2);\n-        map2.put(new Integer(4),\"foo\");\n-        map2.put(new Integer(4),\"bar\");\n-        map2.put(new Integer(4),\"foo\");\n-        map2.put(new Integer(4),\"bar\");\n-\n-        assertTrue(\"same key different value\",map2.get(new Integer(4)).equals(\"bar\"));\n-    }\n-\n-    public void testCapacity() {\n-        LRUMap map2 = new LRUMap(3);\n-        map2.put(new Integer(1),\"foo\");\n-        map2.put(new Integer(2),\"foo\");\n-        map2.put(new Integer(3),\"foo\");\n-        map2.put(new Integer(1),\"foo\");\n-        \n-        assertTrue(\"size of Map should be 3, but was \" + map2.size(), map2.size() == 3);\n     }\n \n     /**\n                    map2.size() == 3);\n         assertTrue(\"map should contain the Integer(4) object\",\n                    map2.containsKey(new Integer(4)));\n-    }\n-\n-\n-    public void testMapSupportsNullValues() {\n-        Map map = makeMap();\n-        map.put(new Integer(1),\"foo\");\n-        \n-        assertTrue(\"no null values in Map\",map.containsValue(null) == false);\n-\n-        map.put(new Integer(2),null);\n-\n-        assertTrue(\"null value in Map\",map.containsValue(null));\n-        assertTrue(\"key to a null value\",map.containsKey(new Integer(2)));\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.3 2002/02/15 20:48:18 morgand Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/15 20:48:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.4 2002/02/20 22:38:46 morgand Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/02/20 22:38:46 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Map} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestMap.java,v 1.3 2002/02/15 20:48:18 morgand Exp $\n+ * @version $Id: TestMap.java,v 1.4 2002/02/20 22:38:46 morgand Exp $\n  */\n public abstract class TestMap extends TestObject {\n     public TestMap(String testName) {\n         return makeMap();\n     }\n \n-    /*\n-\n-    // optional operation\n-    public void testMapClear() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapContainsKey() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapContainsValue() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapEntrySet() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapEquals() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapGet() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapHashCode() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapIsEmpty() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapKeySet() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testMapPut() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testMapPutAll() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testMapRemove() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapSize() {\n-        // XXX finish me\n-    }\n-\n-    public void testMapValues() {\n-        // XXX finish me\n-    }\n-\n-    */\n-\n-    /**\n+        /**\n      * Try to put the given pair into the given Collection.\n      *\n      * Fails any Throwable except UnsupportedOperationException,\n             return null; // never get here, since fail throws exception\n         }\n     }\n+\n+    /*\n+\n+    public void testMapContainsKey() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapContainsValue() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapEntrySet() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapEquals() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapGet() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapHashCode() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapIsEmpty() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapKeySet() {\n+        // XXX finish me\n+    }\n+    \n+    */\n+    \n+    //-------TEST AGAINST OPTIONAL OPERATIONS, ENABLE IN TEST SUBCLASSES\n+\n+    public void testMapSupportsNullValues() {\n+\n+        if ((this instanceof TestMap.SupportsPut) == false) {\n+            return;\n+        }\n+\n+        Map map = makeMap();\n+        map.put(new Integer(1),\"foo\");\n+        \n+        assertTrue(\"no null values in Map\",map.containsValue(null) == false);\n+\n+        map.put(new Integer(2),null);\n+\n+        assertTrue(\"null value in Map\",map.containsValue(null));\n+        assertTrue(\"key to a null value\",map.containsKey(new Integer(2)));\n+    }\n+\n+    public void testMultiplePuts() {\n+\n+        if ((this instanceof TestMap.SupportsPut) == false) {\n+            return;\n+        }\n+\n+        Map map = makeMap();\n+        map.put(new Integer(4),\"foo\");\n+        map.put(new Integer(4),\"bar\");\n+        map.put(new Integer(4),\"foo\");\n+        map.put(new Integer(4),\"bar\");\n+\n+        assertTrue(\"same key different value\",map.get(new Integer(4)).equals(\"bar\"));\n+    }\n+\n+\n+    public void testCapacity() {\n+\n+        if ((this instanceof TestMap.SupportsPut) == false) {\n+            return;\n+        }\n+\n+        Map map = makeMap();\n+        map.put(new Integer(1),\"foo\");\n+        map.put(new Integer(2),\"foo\");\n+        map.put(new Integer(3),\"foo\");\n+        map.put(new Integer(1),\"foo\");\n+        \n+        assertTrue(\"size of Map should be 3, but was \" + map.size(), map.size() == 3);\n+    }\n+\n+    /*\n+        // optional operation\n+public void testMapClear() {\n+    // XXX finish me\n }\n+\n+    // optional operation\n+    public void testMapPut() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testMapPutAll() {\n+        // XXX finish me\n+    }\n+\n+    // optional operation\n+    public void testMapRemove() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapSize() {\n+        // XXX finish me\n+    }\n+\n+    public void testMapValues() {\n+        // XXX finish me\n+    }\n+\n+    */\n+\n+    /**\n+     * Marker interface, indicating that a TestMap subclass\n+     * can test put(Object,Object) operations.\n+     */\n+    public interface SupportsPut {\n+\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestSequencedHashMap.java\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  */\n-public class TestSequencedHashMap extends TestMap\n+public class TestSequencedHashMap extends TestMap implements TestMap.SupportsPut\n {\n     /**\n      * The instance to experiment on.", "timestamp": 1014244726, "metainfo": ""}