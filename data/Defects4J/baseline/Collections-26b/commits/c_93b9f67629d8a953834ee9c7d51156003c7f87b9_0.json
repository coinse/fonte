{"sha": "93b9f67629d8a953834ee9c7d51156003c7f87b9", "log": "Rework array iterators to include Iterator and ListIterator implementations. Also add Object array versions for better performance.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.6 2002/12/08 15:42:35 scolebourne Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/12/08 15:42:35 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.7 2002/12/13 12:01:58 scolebourne Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/12/13 12:01:58 $\n  *\n  * ====================================================================\n  *\n import java.util.NoSuchElementException;\n \n import org.apache.commons.collections.iterators.ArrayIterator;\n+import org.apache.commons.collections.iterators.ArrayListIterator;\n import org.apache.commons.collections.iterators.CollatingIterator;\n import org.apache.commons.collections.iterators.EnumerationIterator;\n import org.apache.commons.collections.iterators.FilterIterator;\n import org.apache.commons.collections.iterators.IteratorEnumeration;\n import org.apache.commons.collections.iterators.ListIteratorWrapper;\n import org.apache.commons.collections.iterators.LoopingIterator;\n+import org.apache.commons.collections.iterators.ObjectArrayIterator;\n+import org.apache.commons.collections.iterators.ObjectArrayListIterator;\n import org.apache.commons.collections.iterators.SingletonIterator;\n import org.apache.commons.collections.iterators.SingletonListIterator;\n import org.apache.commons.collections.iterators.TransformIterator;\n  * <code>org.apache.commons.collections.iterators</code> subpackage.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: IteratorUtils.java,v 1.6 2002/12/08 15:42:35 scolebourne Exp $\n+ * @version $Id: IteratorUtils.java,v 1.7 2002/12/13 12:01:58 scolebourne Exp $\n  * @since 2.1\n  */\n public class IteratorUtils {\n         return new SingletonListIterator(object);\n     }\n \n-    /**\n-     * Gets an iterator over an array.\n+    // Arrays\n+    //----------------------------------------------------------------------\n+\n+    /**\n+     * Gets an iterator over an object array.\n      *\n      * @param array  the array over which to iterate\n      * @return  an iterator over the array\n      * @throws NullPointerException if array is null\n      */\n     public static Iterator arrayIterator(Object[] array) {\n+        return new ObjectArrayIterator(array);\n+    }\n+\n+    /**\n+     * Gets an iterator over an object or primitive array.\n+     * <p>\n+     * This method will handle primitive arrays as well as object arrays.\n+     * The primitives will be wrapped in the appropriate wrapper class.\n+     *\n+     * @param array  the array over which to iterate\n+     * @return  an iterator over the array\n+     * @throws IllegalArgumentException if the array is not an array\n+     * @throws NullPointerException if array is null\n+     */\n+    public static Iterator arrayIterator(Object array) {\n         return new ArrayIterator(array);\n     }\n \n     /**\n-     * Gets an iterator over the end part of an array.\n+     * Gets an iterator over the end part of an object array.\n      *\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @return an iterator over part of the array\n-     * @throws IllegalArgumentException if array bounds are invalid\n+     * @throws IndexOutOfBoundsException if start is less than zero\n      * @throws NullPointerException if array is null\n      */\n     public static Iterator arrayIterator(Object[] array, int start) {\n+        return new ObjectArrayIterator(array, start);\n+    }\n+\n+    /**\n+     * Gets an iterator over the end part of an object or primitive array.\n+     * <p>\n+     * This method will handle primitive arrays as well as object arrays.\n+     * The primitives will be wrapped in the appropriate wrapper class.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @return an iterator over part of the array\n+     * @throws IllegalArgumentException if the array is not an array\n+     * @throws IndexOutOfBoundsException if start is less than zero\n+     * @throws NullPointerException if array is null\n+     */\n+    public static Iterator arrayIterator(Object array, int start) {\n         return new ArrayIterator(array, start);\n     }\n \n     /**\n-     * Gets an iterator over part of an array.\n+     * Gets an iterator over part of an object array.\n      *\n      * @param array  the array over which to iterate\n      * @param start  the index to start iterating at\n      * @param end  the index to finish iterating at\n      * @return an iterator over part of the array\n-     * @throws IllegalArgumentException if array bounds are invalid\n+     * @throws IndexOutOfBoundsException if array bounds are invalid\n+     * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n     public static Iterator arrayIterator(Object[] array, int start, int end) {\n+        return new ObjectArrayIterator(array, start, end);\n+    }\n+\n+    /**\n+     * Gets an iterator over part of an object or primitive array.\n+     * <p>\n+     * This method will handle primitive arrays as well as object arrays.\n+     * The primitives will be wrapped in the appropriate wrapper class.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @param end  the index to finish iterating at\n+     * @return an iterator over part of the array\n+     * @throws IllegalArgumentException if the array is not an array\n+     * @throws IndexOutOfBoundsException if array bounds are invalid\n+     * @throws IllegalArgumentException if end is before start\n+     * @throws NullPointerException if array is null\n+     */\n+    public static Iterator arrayIterator(Object array, int start, int end) {\n         return new ArrayIterator(array, start, end);\n     }\n \n-//    /**\n-//     * Gets a list iterator over an array.\n-//     *\n-//     * @param array  the array over which to iterate\n-//     * @return  a list iterator over the array\n-//     * @throws NullPointerException if array is null\n-//     */\n-//    public static ListIterator arrayListIterator(Object[] array) {\n-//        return new ArrayListIterator(array);\n-//    }\n-//\n-//    /**\n-//     * Gets a list iterator over the end part of an array.\n-//     *\n-//     * @param array  the array over which to iterate\n-//     * @param start  the index to start iterating at\n-//     * @return a list iterator over part of the array\n-//     * @throws IllegalArgumentException if array bounds are invalid\n-//     * @throws NullPointerException if array is null\n-//     */\n-//    public static ListIterator arrayListIterator(Object[] array, int start) {\n-//        return new ArrayListIterator(array, start);\n-//    }\n-//\n-//    /**\n-//     * Gets a list iterator over part of an array.\n-//     *\n-//     * @param array  the array over which to iterate\n-//     * @param start  the index to start iterating at\n-//     * @param end  the index to finish iterating at\n-//     * @return a list iterator over part of the array\n-//     * @throws IllegalArgumentException if array bounds are invalid\n-//     * @throws NullPointerException if array is null\n-//     */\n-//    public static ListIterator arrayListIterator(Object[] array, int start, int end) {\n-//        return new ArrayListIterator(array, start, end);\n-//    }\n+    /**\n+     * Gets a list iterator over an object array.\n+     *\n+     * @param array  the array over which to iterate\n+     * @return  a list iterator over the array\n+     * @throws NullPointerException if array is null\n+     */\n+    public static ListIterator arrayListIterator(Object[] array) {\n+        return new ObjectArrayListIterator(array);\n+    }\n+\n+    /**\n+     * Gets a list iterator over an object or primitive array.\n+     * <p>\n+     * This method will handle primitive arrays as well as object arrays.\n+     * The primitives will be wrapped in the appropriate wrapper class.\n+     *\n+     * @param array  the array over which to iterate\n+     * @return  a list iterator over the array\n+     * @throws IllegalArgumentException if the array is not an array\n+     * @throws NullPointerException if array is null\n+     */\n+    public static ListIterator arrayListIterator(Object array) {\n+        return new ArrayListIterator(array);\n+    }\n+\n+    /**\n+     * Gets a list iterator over the end part of an object array.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @return a list iterator over part of the array\n+     * @throws IndexOutOfBoundsException if start is less than zero\n+     * @throws NullPointerException if array is null\n+     */\n+    public static ListIterator arrayListIterator(Object[] array, int start) {\n+        return new ObjectArrayListIterator(array, start);\n+    }\n+\n+    /**\n+     * Gets a list iterator over the end part of an object or primitive array.\n+     * <p>\n+     * This method will handle primitive arrays as well as object arrays.\n+     * The primitives will be wrapped in the appropriate wrapper class.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @return a list iterator over part of the array\n+     * @throws IllegalArgumentException if the array is not an array\n+     * @throws IndexOutOfBoundsException if start is less than zero\n+     * @throws NullPointerException if array is null\n+     */\n+    public static ListIterator arrayListIterator(Object array, int start) {\n+        return new ArrayListIterator(array, start);\n+    }\n+\n+    /**\n+     * Gets a list iterator over part of an object array.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @param end  the index to finish iterating at\n+     * @return a list iterator over part of the array\n+     * @throws IndexOutOfBoundsException if array bounds are invalid\n+     * @throws IllegalArgumentException if end is before start\n+     * @throws NullPointerException if array is null\n+     */\n+    public static ListIterator arrayListIterator(Object[] array, int start, int end) {\n+        return new ObjectArrayListIterator(array, start, end);\n+    }\n+    \n+    /**\n+     * Gets a list iterator over part of an object or primitive array.\n+     * <p>\n+     * This method will handle primitive arrays as well as object arrays.\n+     * The primitives will be wrapped in the appropriate wrapper class.\n+     *\n+     * @param array  the array over which to iterate\n+     * @param start  the index to start iterating at\n+     * @param end  the index to finish iterating at\n+     * @return a list iterator over part of the array\n+     * @throws IllegalArgumentException if the array is not an array\n+     * @throws IndexOutOfBoundsException if array bounds are invalid\n+     * @throws IllegalArgumentException if end is before start\n+     * @throws NullPointerException if array is null\n+     */\n+    public static ListIterator arrayListIterator(Object array, int start, int end) {\n+        return new ArrayListIterator(array, start, end);\n+    }\n     \n     // Iterator wrappers\n     //----------------------------------------------------------------------\n             return ((Collection) obj).iterator();\n             \n         } else if (obj instanceof Object[]) {\n-            return new ArrayIterator(obj);\n+            return new ObjectArrayIterator((Object[]) obj);\n             \n         } else if (obj instanceof Enumeration) {\n             return new EnumerationIterator((Enumeration) obj);\n--- a/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.2 2002/12/13 12:01:35 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/12/13 12:01:35 $\n  *\n  * ====================================================================\n  *\n import java.lang.reflect.Array;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n-\n-/** Implements an {@link Iterator} over an array of objects.\n-  *\n-  * @since 1.0\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  * @author Mauricio S. Moura\n-  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n-  * @version $Revision: 1.1 $\n-  */\n+/** \n+ * Implements an {@link java.util.Iterator Iterator} over an array.\n+ * <p>\n+ * The array can be either an array of object or of primitives. If you know \n+ * that you have an object array, the \n+ * {@link org.apache.commons.collections.iterators.ObjectArrayIterator ObjectArrayIterator}\n+ * class is a better choice, as it will perform better.\n+ * <p>\n+ * The iterator implements a {@link #reset} method, allowing the reset of the iterator\n+ * back to the start if required.\n+ *\n+ * @since 1.0\n+ * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author Mauricio S. Moura\n+ * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.2 $\n+ */\n public class ArrayIterator implements Iterator {\n+\n+    /** The array */    \n+    protected Object array;\n+    /** The start index to loop from */\n+    protected int startIndex = 0;\n+    /** The end index to loop to */\n+\tprotected int endIndex = 0;\n+    /** The current iterator index */\n+\tprotected int index = 0;\n     \n-    private Object array;\n-    private int length = 0;\n-    private int index = 0;\n-  \n-    \n-    /**\n-     *  Construct an ArrayIterator.  Using this constructor, the iterator is\n-     *  equivalent to an empty iterator until {@link #setArray(Object)} is\n-     *  called to establish the array to iterate over.\n-     **/\n+    /**\n+     * Constructor for use with <code>setArray</code>.\n+     * <p>\n+     * Using this constructor, the iterator is equivalent to an empty iterator\n+     * until {@link #setArray(Object)} is  called to establish the array to iterate over.\n+     */\n     public ArrayIterator() {\n     }\n    \n     /**\n-     *  Construct an ArrayIterator that will iterate over the values in the\n-     *  specified array.\n-     *\n-     *  @param array the array to iterate over.\n-     *\n-     *  @exception IllegalArgumentException if <code>array</code> is not an\n-     *  array.\n-     *\n-     *  @exception NullPointerException \n-     *  if <code>array</code> is <code>null</code>\n-     **/\n+     * Constructs an ArrayIterator that will iterate over the values in the\n+     * specified array.\n+     *\n+     * @param array the array to iterate over.\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n     public ArrayIterator(Object array) {\n         setArray( array );\n     }\n \n     /**\n-     *  Construct an ArrayIterator that will iterate over the values in the\n-     *  specified array.\n-     *\n-     *  @param array the array to iterate over.\n-     *  @param start the index to start iterating at.\n-     *\n-     *  @exception IllegalArgumentException if <code>array</code> is not an\n-     *  array.\n-     *\n-     *  @exception NullPointerException \n-     *  if <code>array</code> is <code>null</code>\n-     **/\n+     * Constructs an ArrayIterator that will iterate over the values in the\n+     * specified array from a specific start index.\n+     *\n+     * @param array  the array to iterate over.\n+     * @param start  the index to start iterating at.\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n     public ArrayIterator(Object array, int start) {\n         setArray( array );\n         checkBound(start, \"start\");\n+        this.startIndex = start;\n         this.index = start;\n     }\n \n     /**\n-     *  Construct an ArrayIterator that will iterate over the values in the\n-     *  specified array.\n-     *\n-     *  @param array the array to iterate over.\n-     *  @param start the index to start iterating at.\n-     *  @param end the index to finish iterating at.\n-     *\n-     *  @exception IllegalArgumentException if <code>array</code> is not an\n-     *  array.\n-     *\n-     *  @exception NullPointerException \n-     *  if <code>array</code> is <code>null</code>\n-     **/\n+     * Construct an ArrayIterator that will iterate over a range of values \n+     * in the specified array.\n+     *\n+     * @param array  the array to iterate over.\n+     * @param start  the index to start iterating at.\n+     * @param end  the index to finish iterating at.\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n     public ArrayIterator(Object array, int start, int end) {\n         setArray( array );\n         checkBound(start, \"start\");\n         checkBound(end, \"end\");\n-        if(end <= start) {\n-            throw new IllegalArgumentException(\n-                \"End index must be greater than start index. \"\n-            );\n-        }\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"End index must not be less than start index.\");\n+        }\n+        this.startIndex = start;\n+        this.endIndex = end;\n         this.index = start;\n-        this.length = end;\n-    }\n-\n-    private void checkBound(int bound, String type ) {\n-        if(bound > this.length) {\n+    }\n+\n+    protected void checkBound(int bound, String type ) {\n+        if (bound > this.endIndex) {\n             throw new ArrayIndexOutOfBoundsException(\n               \"Attempt to make an ArrayIterator that \"+type+\n               \"s beyond the end of the array. \"\n             );\n         }\n-        if(bound < 0) {\n+        if (bound < 0) {\n             throw new ArrayIndexOutOfBoundsException(\n               \"Attempt to make an ArrayIterator that \"+type+\n               \"s before the start of the array. \"\n      *  @return true if there is a next element to return\n      */\n     public boolean hasNext() {\n-        return index < length;\n+        return (index < endIndex);\n     }\n \n     /**\n      *    have already been returned\n      */\n     public Object next() {\n-        if(!hasNext()) {\n+        if (hasNext() == false) {\n             throw new NoSuchElementException();\n         }\n         return Array.get( array, index++ );\n      *  @return the array this iterator iterates over, or <code>null</code> if\n      *  the no-arg constructor was used and {@link #setArray(Object)} has never\n      *  been called with a valid array.\n-     **/\n+     */\n     public Object getArray() {\n         return array;\n     }\n      *  Note: Using i.setArray(i.getArray()) may throw a NullPointerException\n      *  if no array has ever been set for the iterator (see {@link\n      *  #getArray()})\n+     * <p>\n+     * The {@link #reset()} method is a better choice for resetting the iterator.\n      *\n      *  @param array the array that the iterator should iterate over.\n      *\n      *\n      *  @exception NullPointerException \n      *  if <code>array</code> is <code>null</code>\n-     **/\n+     */\n     public void setArray( Object array ) {\n         // Array.getLength throws IllegalArgumentException if the object is not\n         // an array or NullPointerException if the object is null.  This call\n         // is made before saving the array and resetting the index so that the\n         // array iterator remains in a consistent state if the argument is not\n         // an array or is null.\n-        this.length = Array.getLength( array );\n+        this.endIndex = Array.getLength( array );\n+        this.startIndex = 0;\n         this.array = array;\n         this.index = 0;\n     }\n+    \n+    /**\n+     * Resets the iterator back to the start index.\n+     */\n+    public void reset() {\n+        this.index = this.startIndex;\n+    }\n+\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java,v 1.1 2002/12/13 12:01:35 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/12/13 12:01:35 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.lang.reflect.Array;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+/**\n+ * Implements a {@link java.util.ListIterator ListIterator} over an array. \n+ * <p>\n+ * The array can be either an array of object or of primitives. If you know \n+ * that you have an object array, the \n+ * {@link org.apache.commons.collections.iterators.ObjectArrayListIterator ObjectArrayListIterator}\n+ * class is a better choice, as it will perform better.\n+ * \n+ * <p>\n+ * This iterator does not support {@link #add(Object)} or {@link #remove()}, as the array \n+ * cannot be changed in size. The {@link #set(Object)} method is supported however.\n+ *\n+ * @see org.apache.commons.collections.iterators.ArrayIterator\n+ * @see java.util.Iterator\n+ * @see java.util.ListIterator\n+ *\n+ * @since 2.2\n+ * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.1 $\n+ */\n+public class ArrayListIterator extends ArrayIterator implements ListIterator {\n+\n+    /**\n+     * Holds the index of the last item returned by a call to <code>next()</code> or <code>previous()</code>. This\n+     *  is set to <code>-1</code> if neither method has yet been invoked. <code>lastItemIndex</code> is used to to\n+     * implement the {@link #set} method.\n+     *\n+     */\n+    protected int lastItemIndex = -1;\n+\n+    /**\n+     * Constructor for use with <code>setArray</code>.\n+     * <p>\n+     * Using this constructor, the iterator is equivalent to an empty iterator\n+     * until {@link #setArray(Object)} is  called to establish the array to iterate over.\n+     */\n+    public ArrayListIterator() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs an ArrayListIterator that will iterate over the values in the\n+     * specified array.\n+     *\n+     * @param array the array to iterate over\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public ArrayListIterator(Object array) {\n+        super(array);\n+    }\n+\n+    /**\n+     * Constructs an ArrayListIterator that will iterate over the values in the\n+     * specified array from a specific start index.\n+     *\n+     * @param array  the array to iterate over\n+     * @param start  the index to start iterating at\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the start index is out of bounds\n+     */\n+    public ArrayListIterator(Object array, int start) {\n+        super(array, start);\n+        this.startIndex = start;\n+    }\n+\n+    /**\n+     * Construct an ArrayListIterator that will iterate over a range of values \n+     * in the specified array.\n+     *\n+     * @param array  the array to iterate over\n+     * @param start  the index to start iterating at\n+     * @param end  the index (exclusive) to finish iterating at\n+     * @throws IllegalArgumentException if <code>array</code> is not an array.\n+     * @throws IndexOutOfBoundsException if the start or end index is out of bounds\n+     * @throws IllegalArgumentException if end index is before the start\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public ArrayListIterator(Object array, int start, int end) {\n+        super(array, start, end);\n+        this.startIndex = start;\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     * Returns true if there are previous elements to return from the array.\n+     *\n+     * @return true if there is a previous element to return\n+     */\n+    public boolean hasPrevious() {\n+        return (this.index > this.startIndex);\n+    }\n+\n+    /**\n+     * Gets the previous element from the array.\n+     * \n+     * @return the previous element\n+     * @throws NoSuchElementException if there is no previous element\n+     */\n+    public Object previous() {\n+        if (hasPrevious() == false) {\n+            throw new NoSuchElementException();\n+        }\n+        this.lastItemIndex = --this.index;\n+        return Array.get(this.array, this.index);\n+    }\n+\n+    /**\n+     * Gets the next element from the array.\n+     * \n+     * @return the next element\n+     * @throws NoSuchElementException if there is no next element\n+     */\n+    public Object next() {\n+        if (hasNext() == false) {\n+            throw new NoSuchElementException();\n+        }\n+        this.lastItemIndex = this.index;\n+        return Array.get(this.array, this.index++);\n+    }\n+\n+    /**\n+     * Gets the next index to be retrieved.\n+     * \n+     * @return the index of the item to be retrieved next\n+     */\n+    public int nextIndex() {\n+        return this.index;\n+    }\n+\n+    /**\n+     * Gets the index of the item to be retrieved if {@link #previous()} is called.\n+     * \n+     * @return the index of the item to be retrieved next\n+     */\n+    public int previousIndex() {\n+        return this.index - 1;\n+    }\n+\n+    /**\n+     * This iterator does not support modification of its backing collection, and so will\n+     * always throw an {@link UnsupportedOperationException} when this method is invoked.\n+     *\n+     * @throws UnsupportedOperationException always thrown.\n+     * @see java.util.ListIterator#set\n+     */\n+    public void add(Object o) {\n+        throw new UnsupportedOperationException(\"add() method is not supported\");\n+    }\n+\n+    /**\n+     * Sets the element under the cursor.\n+     * <p>\n+     * This method sets the element that was returned by the last call \n+     * to {@link #next()} of {@link #previous()}. \n+     * <p>\n+     * <b>Note:</b> {@link ListIterator} implementations that support\n+     * <code>add()</code> and <code>remove()</code> only allow <code>set()</code> to be called\n+     * once per call to <code>next()</code> or <code>previous</code> (see the {@link ListIterator}\n+     * javadoc for more details). Since this implementation does\n+     * not support <code>add()</code> or <code>remove()</code>, <code>set()</code> may be\n+     * called as often as desired.\n+     *\n+     * @see java.util.ListIterator#set\n+     */\n+    public void set(Object o) {\n+        if (this.lastItemIndex == -1) {\n+            throw new IllegalStateException(\"must call next() or previous() before a call to set()\");\n+        }\n+\n+        Array.set(this.array, this.lastItemIndex, o);\n+    }\n+\n+    /**\n+     * Resets the iterator back to the start index.\n+     */\n+    public void reset() {\n+        super.reset();\n+        this.lastItemIndex = -1;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java,v 1.1 2002/12/13 12:01:35 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/12/13 12:01:35 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+/** \n+ * Implements an {@link java.util.Iterator Iterator} over an array of objects.\n+ * <p>\n+ * This iterator does not support {@link #remove}, as the object array cannot be\n+ * changed in size.\n+ * <p>\n+ * The iterator implements a {@link #reset} method, allowing the reset of the iterator\n+ * back to the start if required.\n+ *\n+ * @since 2.2\n+ * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author Mauricio S. Moura\n+ * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.1 $\n+ */\n+public class ObjectArrayIterator implements Iterator {\n+\n+    /** The array */\n+    protected Object[] array = null;\n+    /** The start index to loop from */\n+    protected int startIndex = 0;\n+    /** The end index to loop to */\n+    protected int endIndex = 0;\n+    /** The current iterator index */\n+    protected int index = 0;\n+\n+    /**\n+     * Constructor for use with <code>setArray</code>.\n+     * <p>\n+     * Using this constructor, the iterator is equivalent to an empty iterator\n+     * until {@link #setArray(Object)} is  called to establish the array to iterate over.\n+     */\n+    public ObjectArrayIterator() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs an ObjectArrayIterator that will iterate over the values in the\n+     * specified array.\n+     *\n+     * @param array the array to iterate over\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public ObjectArrayIterator(Object[] array) {\n+        this(array, 0, array.length);\n+    }\n+\n+    /**\n+     * Constructs an ObjectArrayIterator that will iterate over the values in the\n+     * specified array from a specific start index.\n+     *\n+     * @param array  the array to iterate over\n+     * @param start  the index to start iterating at\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the start index is out of bounds\n+     */\n+    public ObjectArrayIterator(Object array[], int start) {\n+        this(array, start, array.length);\n+    }\n+\n+    /**\n+     * Construct an ObjectArrayIterator that will iterate over a range of values \n+     * in the specified array.\n+     *\n+     * @param array  the array to iterate over\n+     * @param start  the index to start iterating at\n+     * @param end  the index (exclusive) to finish iterating at\n+     * @throws IndexOutOfBoundsException if the start or end index is out of bounds\n+     * @throws IllegalArgumentException if end index is before the start\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public ObjectArrayIterator(Object array[], int start, int end) {\n+        super();\n+        if (start < 0) {\n+            throw new ArrayIndexOutOfBoundsException(\"Start index must not be less than zero\");\n+        }\n+        if (end > array.length) {\n+            throw new ArrayIndexOutOfBoundsException(\"End index must not be greater than the array length\");\n+        }\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"End index must not be less than start index\");\n+        }\n+        this.array = array;\n+        this.startIndex = start;\n+        this.endIndex = end;\n+        this.index = start;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     * Returns true if there are more elements to return from the array.\n+     *\n+     * @return true if there is a next element to return\n+     */\n+    public boolean hasNext() {\n+        return (this.index < this.endIndex);\n+    }\n+\n+    /**\n+     * Returns the next element in the array.\n+     *\n+     * @return the next element in the array\n+     * @throws NoSuchElementException if all the elements in the array\n+     *    have already been returned\n+     */\n+    public Object next() {\n+        if (hasNext() == false) {\n+            throw new NoSuchElementException();\n+        }\n+        return this.array[this.index++];\n+    }\n+\n+    /**\n+     * Throws {@link UnsupportedOperationException}.\n+     *\n+     * @throws UnsupportedOperationException always\n+     */\n+    public void remove() {\n+        throw new UnsupportedOperationException(\"remove() method is not supported for an ObjectArrayIterator\");\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     * Gets the array that this iterator is iterating over. \n+     *\n+     * @return the array this iterator iterates over, or <code>null</code> if\n+     * the no-arg constructor was used and {@link #setArray(Object)} has never\n+     * been called with a valid array.\n+     */\n+    public Object[] getArray() {\n+        return this.array;\n+    }\n+\n+    /**\n+     * Sets the array that the ArrayIterator should iterate over.\n+     * <p>\n+     * This method may only be called once, otherwise an IllegalStateException\n+     * will occur.\n+     * <p>\n+     * The {@link #reset} method can be used to reset the iterator if required.\n+     *\n+     * @param array  the array that the iterator should iterate over\n+     * @throws IllegalStateException if the <code>array</code> was set in the constructor\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public void setArray(Object[] array) {\n+        if (this.array != null) {\n+            throw new IllegalStateException(\"The array to iterate over has already been set\");\n+        }\n+        this.array = array;\n+        this.startIndex = 0;\n+        this.endIndex = array.length;\n+        this.index = 0;\n+    }\n+\n+    /**\n+     * Gets the start index to loop from.\n+     * \n+     * @return the start index\n+     */\n+    public int getStartIndex() {\n+        return this.startIndex;\n+    }\n+\n+    /**\n+     * Gets the end index to loop to.\n+     * \n+     * @return the end index\n+     */\n+    public int getEndIndex() {\n+        return this.endIndex;\n+    }\n+\n+    /**\n+     * Resets the iterator back to the start index.\n+     */\n+    public void reset() {\n+        this.index = this.startIndex;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java,v 1.1 2002/12/13 12:01:35 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/12/13 12:01:35 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+/**\n+ * Implements a {@link java.util.ListIterator ListIterator} over an array of objects.\n+ * <p>\n+ * This iterator does not support {@link #add(Object)} or {@link #remove()}, as the object array \n+ * cannot be changed in size. The {@link #set(Object)} method is supported however.\n+ * <p>\n+ * The iterator implements a {@link #reset()} method, allowing the reset of the iterator\n+ * back to the start if required.\n+ *\n+ * @see org.apache.commons.collections.iterators.ObjectArrayIterator\n+ * @see java.util.Iterator\n+ * @see java.util.ListIterator\n+ *\n+ * @since 2.2\n+ * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.1 $\n+ */\n+public class ObjectArrayListIterator extends ObjectArrayIterator implements ListIterator {\n+\n+    /**\n+     * Holds the index of the last item returned by a call to <code>next()</code> \n+     * or <code>previous()</code>. This is set to <code>-1</code> if neither method\n+     * has yet been invoked. <code>lastItemIndex</code> is used to to implement the\n+     * {@link #set} method.\n+     */\n+    protected int lastItemIndex = -1;\n+\n+    /**\n+     * Constructor for use with <code>setArray</code>.\n+     * <p>\n+     * Using this constructor, the iterator is equivalent to an empty iterator\n+     * until {@link #setArray(Object)} is  called to establish the array to iterate over.\n+     */\n+    public ObjectArrayListIterator() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs an ObjectArrayListIterator that will iterate over the values in the\n+     * specified array.\n+     *\n+     * @param array the array to iterate over\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public ObjectArrayListIterator(Object[] array) {\n+        super(array);\n+    }\n+\n+    /**\n+     * Constructs an ObjectArrayListIterator that will iterate over the values in the\n+     * specified array from a specific start index.\n+     *\n+     * @param array  the array to iterate over\n+     * @param start  the index to start iterating at\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the start index is out of bounds\n+     */\n+    public ObjectArrayListIterator(Object[] array, int start) {\n+        super(array, start);\n+    }\n+    \n+    /**\n+     * Construct an ObjectArrayListIterator that will iterate over a range of values \n+     * in the specified array.\n+     *\n+     * @param array  the array to iterate over\n+     * @param start  the index to start iterating at\n+     * @param end  the index (exclusive) to finish iterating at\n+     * @throws IndexOutOfBoundsException if the start or end index is out of bounds\n+     * @throws IllegalArgumentException if end index is before the start\n+     * @throws NullPointerException if <code>array</code> is <code>null</code>\n+     */\n+    public ObjectArrayListIterator(Object[] array, int start, int end) {\n+        super(array, start, end);\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     * Returns true if there are previous elements to return from the array.\n+     *\n+     * @return true if there is a previous element to return\n+     */\n+    public boolean hasPrevious() {\n+        return (this.index > this.startIndex);\n+    }\n+\n+    /**\n+     * Gets the previous element from the array.\n+     * \n+     * @return the previous element\n+     * @throws NoSuchElementException if there is no previous element\n+     */\n+    public Object previous() {\n+        if (hasPrevious() == false) {\n+            throw new NoSuchElementException();\n+        }\n+        this.lastItemIndex = --this.index;\n+        return this.array[this.index];\n+    }\n+\n+    /**\n+     * Gets the next element from the array.\n+     * \n+     * @return the next element\n+     * @throws NoSuchElementException if there is no next element\n+     */\n+    public Object next() {\n+        if (hasNext() == false) {\n+            throw new NoSuchElementException();\n+        }\n+        this.lastItemIndex = this.index;\n+        return this.array[this.index++];\n+    }\n+\n+    /**\n+     * Gets the next index to be retrieved.\n+     * \n+     * @return the index of the item to be retrieved next\n+     */\n+    public int nextIndex() {\n+        return this.index;\n+    }\n+\n+    /**\n+     * Gets the index of the item to be retrieved if {@link #previous()} is called.\n+     * \n+     * @return the index of the item to be retrieved next\n+     */\n+    public int previousIndex() {\n+        return this.index - 1;\n+    }\n+\n+    /**\n+     * This iterator does not support modification of its backing array's size, and so will\n+     * always throw an {@link UnsupportedOperationException} when this method is invoked.\n+     *\n+     * @param obj  the object to add\n+     * @throws UnsupportedOperationException always thrown.\n+     */\n+    public void add(Object obj) {\n+        throw new UnsupportedOperationException(\"add() method is not supported\");\n+    }\n+\n+    /**\n+     * Sets the element under the cursor.\n+     * <p>\n+     * This method sets the element that was returned by the last call \n+     * to {@link #next()} of {@link #previous()}. \n+     * \n+     * <b>Note:</b> {@link ListIterator} implementations that support <code>add()</code>\n+     * and <code>remove()</code> only allow <code>set()</code> to be called once per call \n+     * to <code>next()</code> or <code>previous</code> (see the {@link ListIterator}\n+     * javadoc for more details). Since this implementation does not support \n+     * <code>add()</code> or <code>remove()</code>, <code>set()</code> may be\n+     * called as often as desired.\n+     * \n+     * @param obj  the object to set into the array\n+     * @throws IllegalStateException if next() has not yet been called.\n+     * @throws ClassCastException if the object type is unsuitable for the array\n+     */\n+    public void set(Object obj) {\n+        if (this.lastItemIndex == -1) {\n+            throw new IllegalStateException(\"must call next() or previous() before a call to set()\");\n+        }\n+\n+        this.array[this.lastItemIndex] = obj;\n+    }\n+\n+    /**\n+     * Resets the iterator back to the start index.\n+     */\n+    public void reset() {\n+        super.reset();\n+        this.lastItemIndex = -1;\n+    }\n+\n+}", "timestamp": 1039781056, "metainfo": ""}