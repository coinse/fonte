{"sha": "501b94143a4c0a40c2bd44499a3e63c361b056f0", "log": "[COLLECTIONS-229] removed remaining deprecated methods.  ", "commit": "\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n import org.apache.commons.collections.functors.AllPredicate;\n import org.apache.commons.collections.functors.AndPredicate;\n import org.apache.commons.collections.functors.AnyPredicate;\n-import org.apache.commons.collections.functors.EqualPredicate;\n import org.apache.commons.collections.functors.ExceptionPredicate;\n-import org.apache.commons.collections.functors.FalsePredicate;\n import org.apache.commons.collections.functors.IdentityPredicate;\n import org.apache.commons.collections.functors.InstanceofPredicate;\n import org.apache.commons.collections.functors.InvokerTransformer;\n import org.apache.commons.collections.functors.NullIsExceptionPredicate;\n import org.apache.commons.collections.functors.NullIsFalsePredicate;\n import org.apache.commons.collections.functors.NullIsTruePredicate;\n-import org.apache.commons.collections.functors.NullPredicate;\n import org.apache.commons.collections.functors.OnePredicate;\n import org.apache.commons.collections.functors.OrPredicate;\n import org.apache.commons.collections.functors.TransformedPredicate;\n import org.apache.commons.collections.functors.TransformerPredicate;\n-import org.apache.commons.collections.functors.TruePredicate;\n import org.apache.commons.collections.functors.UniquePredicate;\n \n /**\n     }\n \n     /**\n-     * Gets a Predicate that always returns true.\n-     *\n-     * @see org.apache.commons.collections.functors.TruePredicate\n-     *\n-     * @return the predicate\n-     * @deprecated use {@link TruePredicate#truePredicate()} instead.\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> truePredicate() {\n-        return TruePredicate.truePredicate();\n-    }\n-\n-    /**\n-     * Gets a Predicate that always returns false.\n-     *\n-     * @see org.apache.commons.collections.functors.FalsePredicate\n-     *\n-     * @return the predicate\n-     * @deprecated use {@link FalsePredicate#falsePredicate()} instead.\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> falsePredicate() {\n-        return FalsePredicate.<T>getInstance();\n-    }\n-\n-    /**\n-     * Gets a Predicate that checks if the input object passed in is null.\n-     *\n-     * @see org.apache.commons.collections.functors.NullPredicate\n-     *\n-     * @return the predicate\n-     * @deprecated use {@link NullPredicate#nullPredicate()} instead\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> nullPredicate() {\n-        return NullPredicate.nullPredicate();\n-    }\n-\n-    /**\n      * Gets a Predicate that checks if the input object passed in is not null.\n      *\n      * @see org.apache.commons.collections.functors.NotNullPredicate\n      */\n     public static <T> Predicate<T> notNullPredicate() {\n         return NotNullPredicate.<T>getInstance();\n-    }\n-\n-    /**\n-     * Creates a Predicate that checks if the input object is equal to the\n-     * specified object using equals().\n-     *\n-     * @see org.apache.commons.collections.functors.EqualPredicate\n-     *\n-     * @param value  the value to compare against\n-     * @return the predicate\n-     * @deprecated use {@link EqualPredicate#equalPredicate(Object)} instead.\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> equalPredicate(T value) {\n-        return EqualPredicate.equalPredicate(value);\n     }\n \n     /**\n \n     /**\n      * Create a new Predicate that returns true only if all of the specified\n-     * predicates are true.\n-     * If the array of predicates is empty, then this predicate returns true.\n-     *\n-     * @see org.apache.commons.collections.functors.AllPredicate\n-     *\n-     * @param predicates  an array of predicates to check, may not be null\n-     * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n-     * @deprecated use {@link AllPredicate#allPredicate(Predicate...)} instead.\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> allPredicate(Predicate<? super T>[] predicates) {\n-        return AllPredicate.allPredicate(predicates);\n-    }\n-\n-    /**\n-     * Create a new Predicate that returns true only if all of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns true.\n      *\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @deprecated Use {@link #allPredicate(Predicate...)} instead\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> getInstance(Predicate<? super T> ... predicates) {\n-        return allPredicate(predicates);\n-    }\n-\n-    /**\n-     * Factory to create the predicate.\n-     * <p>\n-     * If the array is size zero, the predicate always returns true.\n-     * If the array is size one, then that predicate is returned.\n-     *\n-     * @param predicates  the predicates to check, cloned, not null\n-     * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n      */\n     public static <T> Predicate<T> allPredicate(Predicate<? super T> ... predicates) {\n         FunctorUtils.validate(predicates);\n         }\n \n         return new AllPredicate<T>(FunctorUtils.copy(predicates));\n-    }\n-\n-    /**\n-     * Factory to create the predicate.\n-     * <p>\n-     * If the collection is size zero, the predicate always returns true.\n-     * If the collection is size one, then that predicate is returned.\n-     *\n-     * @param predicates  the predicates to check, cloned, not null\n-     * @return the <code>all</code> predicate\n-     * @throws IllegalArgumentException if the predicates array is null\n-     * @throws IllegalArgumentException if any predicate in the array is null\n-     * @deprecated Use {@link #allPredicate(Collection)} instead\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> getInstance(Collection<Predicate<T>> predicates) {\n-        return allPredicate(predicates);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n      * @param object  the object to compare to\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null\n-     * @deprecated use {@link #equalPredicate(Object)} instead.\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> getInstance(T object) {\n-        if (object == null) {\n-            return nullPredicate();\n-        }\n-        return new EqualPredicate<T>(object);\n-    }\n-\n-    /**\n-     * Factory to create the identity predicate.\n-     * \n-     * @param object  the object to compare to\n-     * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n      */\n     public static <T> Predicate<T> equalPredicate(T object) {\n         if (object == null) {\n--- a/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n      * Get a typed instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n-     * @deprecated use {@link #falsePredicate()} instead.\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> getInstance() {\n-        return FalsePredicate.<T>falsePredicate();\n-    }\n-\n-    /**\n-     * Get a typed instance.\n-     *\n-     * @return the singleton instance\n      * @since Commons Collections 5\n      */\n     @SuppressWarnings(\"unchecked\")\n--- a/src/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullPredicate.java\n      *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n-     * @deprecated use {@link #nullPredicate()} instead.\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> getInstance() {\n-        return nullPredicate();\n-    }\n-\n-    /**\n-     * Factory returning the singleton instance.\n-     *\n-     * @return the singleton instance\n-     * @since Commons Collections 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> nullPredicate() {\n--- a/src/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TruePredicate.java\n      *\n      * @return the singleton instance\n      * @since Commons Collections 3.1\n-     * @deprecated\n-     */\n-    @Deprecated\n-    public static <T> Predicate<T> getInstance() {\n-        return truePredicate();\n-    }\n-\n-    /**\n-     * Factory returning the singleton instance.\n-     *\n-     * @return the singleton instance\n-     * @since Commons Collections 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> truePredicate() {\n--- a/src/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazyMap.java\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n-     * @deprecated use {@link #getLazyMap(Map, Factory)} instead.\n-     */\n-    @Deprecated\n-    public static <K,V> Map<K,V> decorate(Map<K,V> map, Factory<? extends V> factory) {\n-        return getLazyMap(map, factory);\n-    }\n-\n-    /**\n-     * Factory method to create a lazily instantiated map.\n-     * \n-     * @param map  the map to decorate, must not be null\n-     * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n      */\n     public static <K, V> LazyMap<K, V> getLazyMap(Map<K, V> map, Factory< ? extends V> factory) {\n         return new LazyMap<K,V>(map, factory);\n-    }\n-\n-    /**\n-     * Factory method to create a lazily instantiated map.\n-     * \n-     * @param map  the map to decorate, must not be null\n-     * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n-     * @deprecated use {@link #getLazyMap(Map, Transformer)} instead.\n-     */\n-    @Deprecated\n-    public static <K,V> Map<K,V> decorate(Map<K,V> map, Transformer<? super K, ? extends V> factory) {\n-        return getLazyMap(map, factory);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazySortedMap.java\n     /** Serialization version */\n     private static final long serialVersionUID = 2715322183617658933L;\n \n-    /**\n-     * Factory method to create a lazily instantiated sorted map.\n-     * \n-     * @param map  the map to decorate, must not be null\n-     * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n-     * @deprecated\n-     */\n-    @Deprecated\n-    public static <K,V> SortedMap<K,V> decorate(SortedMap<K,V> map, Factory<? extends V> factory) {\n-        return getLazySortedMap(map, factory);\n-    }\n \n     /**\n      * Factory method to create a lazily instantiated sorted map.\n      */\n     public static <K, V> SortedMap<K, V> getLazySortedMap(SortedMap<K, V> map, Factory<? extends V> factory) {\n         return new LazySortedMap<K,V>(map, factory);\n-    }\n-\n-    /**\n-     * Factory method to create a lazily instantiated sorted map.\n-     * \n-     * @param map  the map to decorate, must not be null\n-     * @param factory  the factory to use, must not be null\n-     * @throws IllegalArgumentException if map or factory is null\n-     * @deprecated\n-     */\n-    @Deprecated\n-    public static <K,V> SortedMap<K,V> decorate(SortedMap<K,V> map, Transformer<? super K, ? extends V> factory) {\n-        return getLazySortedMap(map, factory);\n     }\n \n     /**", "timestamp": 1305896684, "metainfo": ""}