{"sha": "51ed546f9c880b8e3a5088626e0ba892564c36bf", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471186 | scolebourne | 2006-11-04 05:47:51 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getSet() and getSortedSet() - use decorated()     ------------------------------------------------------------------------     r471173 | scolebourne | 2006-11-04 04:07:39 -0800 (Sat, 04 Nov 2006) | 1 line          Abstract*Decorator - Generify and use covariant return types     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n+++ b/src/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n  * <p>\n  * Methods are forwarded directly to the decorated set.\n  *\n+ * @param <E> the type of the elements in the sorted set\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  *\n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractSortedSetDecorator extends AbstractSetDecorator implements SortedSet {\n+public abstract class AbstractSortedSetDecorator<E>\n+        extends AbstractSetDecorator<E>\n+        implements SortedSet<E> {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = -3462240946294214398L;\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    protected AbstractSortedSetDecorator(Set set) {\n+    protected AbstractSortedSetDecorator(Set<E> set) {\n         super(set);\n     }\n \n     /**\n-     * Gets the sorted set being decorated.\n+     * Gets the set being decorated.\n      * \n      * @return the decorated set\n      */\n-    protected SortedSet getSortedSet() {\n-        return (SortedSet) getCollection();\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public SortedSet subSet(Object fromElement, Object toElement) {\n-        return getSortedSet().subSet(fromElement, toElement);\n+    protected SortedSet<E> decorated() {\n+        return (SortedSet<E>) super.decorated();\n     }\n \n-    public SortedSet headSet(Object toElement) {\n-        return getSortedSet().headSet(toElement);\n+    //-----------------------------------------------------------------------\n+    public SortedSet<E> subSet(E fromElement, E toElement) {\n+        return decorated().subSet(fromElement, toElement);\n     }\n \n-    public SortedSet tailSet(Object fromElement) {\n-        return getSortedSet().tailSet(fromElement);\n+    public SortedSet<E> headSet(E toElement) {\n+        return decorated().headSet(toElement);\n     }\n \n-    public Object first() {\n-        return getSortedSet().first();\n+    public SortedSet<E> tailSet(E fromElement) {\n+        return decorated().tailSet(fromElement);\n     }\n \n-    public Object last() {\n-        return getSortedSet().last();\n+    public E first() {\n+        return decorated().first();\n     }\n \n-    public Comparator comparator() {\n-        return getSortedSet().comparator();\n+    public E last() {\n+        return decorated().last();\n+    }\n+\n+    public Comparator<? super E> comparator() {\n+        return decorated().comparator();\n     }\n \n }", "timestamp": 1252994198, "metainfo": ""}