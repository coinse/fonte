{"sha": "49f3fe1be6fd692b6b8632d62b0bfa34f74e6308", "log": "Rename methods Add chainedComparator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/java/org/apache/commons/collections/ComparatorUtils.java\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n-\n package org.apache.commons.collections;\n \n-\n+import java.util.Collection;\n import java.util.Comparator;\n+\n import org.apache.commons.collections.comparators.ComparableComparator;\n+import org.apache.commons.collections.comparators.ComparatorChain;\n+import org.apache.commons.collections.comparators.NullComparator;\n import org.apache.commons.collections.comparators.ReverseComparator;\n-import org.apache.commons.collections.comparators.NullComparator;\n import org.apache.commons.collections.comparators.TransformingComparator;\n-\n-\n /**\n- *  Provides convenient static utility methods for <Code>Comparator</Code>\n- *  objects.<P>\n- *\n- *  Most of the utility in this class can also be found in the \n- *  <Code>comparators</Code> package; this class merely provides a \n- *  convenient central place if you have use for more than one class\n- *  in the <Code>comparators</Code> subpackage.<P>\n- *\n- *  Note that <I>every</I> method in this class allows you to specify\n- *  <Code>null</Code> instead of a comparator, in which case \n- *  {@link #NATURAL} will be used.\n- *\n- *  @author Paul Jack\n- *  @version $Id$\n- *  @since 2.1\n+ * Provides convenient static utility methods for <Code>Comparator</Code>\n+ * objects.\n+ * <p>\n+ * Most of the utility in this class can also be found in the \n+ * <code>comparators</code> package. This class merely provides a \n+ * convenient central place if you have use for more than one class\n+ * in the <code>comparators</code> subpackage.\n+ * <p>\n+ * Note that <i>every</i> method in this class allows you to specify\n+ * <code>null</code> instead of a comparator, in which case \n+ * {@link #NATURAL} will be used.\n+ *\n+ * @since 2.1\n+ * @author Paul Jack\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: $\n  */\n public class ComparatorUtils {\n \n-\n+    /**\n+     * Restrictive constructor\n+     */\n     private ComparatorUtils() {\n     }\n \n-\n-    /**\n-     *  Comparator for natural sort order.\n-     *\n-     *  @see ComparableComparator#getInstance\n-     */\n-    final public static Comparator NATURAL = \n-      ComparableComparator.getInstance();\n-\n-\n-    /**\n-     *  Returns a comparator that reverses the order of the given \n-     *  comparator.\n-     *\n-     *  @param comparator  the comparator whose order to reverse\n-     *  @return  a comparator who reverses that order\n-     *  @see ReverseComparator\n-     */\n-    public static Comparator reverse(Comparator comparator) {\n-        if (comparator == null) comparator = NATURAL;\n+    /**\n+     * Comparator for natural sort order.\n+     *\n+     * @see ComparableComparator#getInstance\n+     */\n+    final public static Comparator NATURAL = ComparableComparator.getInstance();\n+\n+    /**\n+     * Gets a comparator that uses the natural order of the objects.\n+     *\n+     * @return  a comparator which uses natural order\n+     */\n+    public static Comparator naturalComparator() {\n+        return NATURAL;\n+    }\n+\n+    /**\n+     * Gets a comparator that compares using two {@link Comparator}s.\n+     * <p>\n+     * The second comparator is used if the first comparator returns\n+     * that equal.\n+     *\n+     * @param comparator1  the first comparator to use, not null\n+     * @param comparator2  the first comparator to use, not null\n+     * @return a combination comparator over the comparators\n+     * @throws NullPointerException if either comparator is null\n+     */\n+    public static Comparator chainedComparator(Comparator comparator1, Comparator comparator2) {\n+        return chainedComparator(new Comparator[] {comparator1, comparator2});\n+    }\n+\n+    /**\n+     * Gets a comparator that compares using an array of {@link Comparator}s.\n+     * <p>\n+     * The second comparator is used if the first comparator returns\n+     * that equal and so on.\n+     *\n+     * @param iterators  the comparators to use, not null or empty or contain nulls\n+     * @return a combination comparator over the comparators\n+     * @throws NullPointerException if comparators array is null or contains a null\n+     */\n+    public static Comparator chainedComparator(Comparator[] comparators) {\n+        ComparatorChain chain = new ComparatorChain();\n+        for (int i = 0; i < comparators.length; i++) {\n+            if (comparators[i] == null) {\n+                throw new NullPointerException(\"Comparator cannot be null\");\n+            }\n+            chain.addComparator(comparators[i]);\n+        }\n+        return chain;\n+    }\n+\n+    /**\n+     * Gets a comparator that compares using a collection of {@link Comparator}s.\n+     * <p>\n+     * The second comparator is used if the first comparator returns\n+     * that equal and so on.\n+     *\n+     * @param comparators  the comparators to use, not null or empty or contain nulls\n+     * @return a combination comparator over the comparators\n+     * @throws NullPointerException if comparators collection is null or contains a null\n+     * @throws ClassCastException if the comparators collection contains the wrong object type\n+     */\n+    public static Comparator chainedComparator(Collection comparators) {\n+        return chainedComparator(\n+            (Comparator[]) comparators.toArray(new Comparator[comparators.size()])\n+        );\n+    }\n+\n+    /**\n+     * Gets a comparator that reverses the order of the given \n+     * comparator.\n+     *\n+     * @param comparator  the comparator whose order to reverse\n+     * @return  a comparator who reverses that order\n+     * @see ReverseComparator\n+     */\n+    public static Comparator reversedComparator(Comparator comparator) {\n+        if (comparator == null) {\n+            comparator = NATURAL;\n+        }\n         return new ReverseComparator(comparator);\n     }\n \n-\n-    /**\n-     *  Allows the given comparator to compare <Code>null</Code> values.<P>\n-     *\n-     *  The returned comparator will consider a null value to be less than\n-     *  any nonnull value, and equal to any other null value.  Two nonnull\n-     *  values will be evaluated with the given comparator.<P>\n-     *\n-     *  @param comparator the comparator that wants to allow nulls\n-     *  @return  a version of that comparator that allows nulls\n-     *  @see NullComparator\n-     */\n-    public static Comparator nullLow(Comparator comparator) {\n-        if (comparator == null) comparator = NATURAL;\n+    /**\n+     * Gets a Comparator that controls the comparison of <code>null</code> values.\n+     * <p>\n+     * The returned comparator will consider a null value to be less than\n+     * any nonnull value, and equal to any other null value.  Two nonnull\n+     * values will be evaluated with the given comparator.<P>\n+     *\n+     * @param comparator the comparator that wants to allow nulls\n+     * @return  a version of that comparator that allows nulls\n+     * @see NullComparator\n+     */\n+    public static Comparator nullLowComparator(Comparator comparator) {\n+        if (comparator == null) {\n+            comparator = NATURAL;\n+        }\n         return new NullComparator(comparator, false);\n     }\n \n-\n-    /**\n-     *  Allows the given comparator to compare <Code>null</Code> values.<P>\n-     *\n-     *  The returned comparator will consider a null value to be greater than\n-     *  any nonnull value, and equal to any other null value.  Two nonnull\n-     *  values will be evaluated with the given comparator.<P>\n-     *\n-     *  @param comparator the comparator that wants to allow nulls\n-     *  @return  a version of that comparator that allows nulls\n-     *  @see NullComparator\n-     */\n-    public static Comparator nullHigh(Comparator comparator) {\n-        if (comparator == null) comparator = NATURAL;\n+    /**\n+     * Gets a Comparator that controls the comparison of <code>null</code> values.\n+     * <p>\n+     * The returned comparator will consider a null value to be greater than\n+     * any nonnull value, and equal to any other null value.  Two nonnull\n+     * values will be evaluated with the given comparator.<P>\n+     *\n+     * @param comparator the comparator that wants to allow nulls\n+     * @return  a version of that comparator that allows nulls\n+     * @see NullComparator\n+     */\n+    public static Comparator nullHighComparator(Comparator comparator) {\n+        if (comparator == null) {\n+            comparator = NATURAL;\n+        }\n         return new NullComparator(comparator, true);\n     }\n \n-\n-    \n-    /**\n-     *  Passes transformed objects to the given comparator.<P>\n-     *\n-     *  Objects passed to the returned comparator will first be transformed\n-     *  by the given transformer before they are compared by the given\n-     *  comparator.<P>\n-     *\n-     *  @param comparator  the sort order to use\n-     *  @param t  the transformer to use\n-     *  @return  a comparator that transforms its input objects before \n-     *    comparing them\n-     *  @see  TransformingComparator\n-     */\n-    public static Comparator transform(Comparator comparator, Transformer t) {\n-        if (comparator == null) comparator = NATURAL;\n-        return new TransformingComparator(t, comparator);\n-    }\n-\n+    /**\n+     * Gets a Comparator that passes transformed objects to the given comparator.\n+     * <p>\n+     * Objects passed to the returned comparator will first be transformed\n+     * by the given transformer before they are compared by the given\n+     * comparator.\n+     *\n+     * @param comparator  the sort order to use\n+     * @param transformer  the transformer to use\n+     * @return  a comparator that transforms its input objects before comparing them\n+     * @see  TransformingComparator\n+     */\n+    public static Comparator transformedComparator(Comparator comparator, Transformer transformer) {\n+        if (comparator == null) {\n+            comparator = NATURAL;\n+        }\n+        return new TransformingComparator(transformer, comparator);\n+    }\n \n     /**\n      *  Returns the smaller of the given objects according to the given \n      *  @return  the smaller of the two objects\n      */\n     public static Object min(Object o1, Object o2, Comparator comparator) {\n-        if (comparator == null) comparator = NATURAL;\n+        if (comparator == null) {\n+            comparator = NATURAL;\n+        }\n         int c = comparator.compare(o1, o2);\n-        return (c < 0) ? o1 : o2;        \n-    }\n-\n+        return (c < 0) ? o1 : o2;\n+    }\n \n     /**\n      *  Returns the smaller of the given objects according to the given \n      *  @return  the smaller of the two objects\n      */\n     public static Object max(Object o1, Object o2, Comparator comparator) {\n-        if (comparator == null) comparator = NATURAL;\n+        if (comparator == null) {\n+            comparator = NATURAL;\n+        }\n         int c = comparator.compare(o1, o2);\n-        return (c > 0) ? o1 : o2;        \n+        return (c > 0) ? o1 : o2;\n     }\n }", "timestamp": 1029586016, "metainfo": ""}