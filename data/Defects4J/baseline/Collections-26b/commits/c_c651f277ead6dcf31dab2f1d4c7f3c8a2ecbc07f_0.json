{"sha": "c651f277ead6dcf31dab2f1d4c7f3c8a2ecbc07f", "log": "[COLLECTIONS-258] Added new DualLinkedHashBidiMap implementation. Thanks to Nathan Blomquist for the patch.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMap.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bidimap;\n+\n+import org.apache.commons.collections.BidiMap;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Implementation of <code>BidiMap</code> that uses two <code>LinkedHashMap</code> instances.\n+ * <p>\n+ * Two <code>LinkedHashMap</code> instances are used in this class.\n+ * This provides fast lookups at the expense of storing two sets of map entries and two linked lists.\n+ *\n+ * @version $Id $\n+ * @since 4.0\n+ */\n+public class DualLinkedHashBidiMap<K, V> extends AbstractDualBidiMap<K, V> implements Serializable {\n+\n+    /** Ensure serialization compatibility */\n+    private static final long serialVersionUID = 721969328361810L;\n+\n+    /**\n+     * Creates an empty <code>HashBidiMap</code>.\n+     */\n+    public DualLinkedHashBidiMap() {\n+        super(new LinkedHashMap<K, V>(), new LinkedHashMap<V, K>());\n+    }\n+\n+    /**\n+     * Constructs a <code>LinkedHashBidiMap</code> and copies the mappings from\n+     * specified <code>Map</code>.\n+     *\n+     * @param map the map whose mappings are to be placed in this map\n+     */\n+    public DualLinkedHashBidiMap(Map<K, V> map) {\n+        super(new LinkedHashMap<K, V>(), new LinkedHashMap<V, K>());\n+        putAll(map);\n+    }\n+\n+    /**\n+     * Constructs a <code>LinkedHashBidiMap</code> that decorates the specified maps.\n+     *\n+     * @param normalMap      the normal direction map\n+     * @param reverseMap     the reverse direction map\n+     * @param inverseBidiMap the inverse BidiMap\n+     */\n+    protected DualLinkedHashBidiMap(Map<K, V> normalMap, Map<V, K> reverseMap, BidiMap<V, K> inverseBidiMap) {\n+        super(normalMap, reverseMap, inverseBidiMap);\n+    }\n+\n+    /**\n+     * Creates a new instance of this object.\n+     *\n+     * @param normalMap      the normal direction map\n+     * @param reverseMap     the reverse direction map\n+     * @param inverseBidiMap the inverse BidiMap\n+     * @return new bidi map\n+     */\n+    protected BidiMap<V, K> createBidiMap(final Map<V, K> normalMap, final Map<K, V> reverseMap,\n+            final BidiMap<K, V> inverseBidiMap) {\n+        return new DualLinkedHashBidiMap<V, K>(normalMap, reverseMap, inverseBidiMap);\n+    }\n+    \n+    // Serialization\n+    //-----------------------------------------------------------------------\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(normalMap);\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        normalMap = new LinkedHashMap<K, V>();\n+        reverseMap = new LinkedHashMap<V, K>();\n+        @SuppressWarnings(\"unchecked\") // will fail at runtime if stream is incorrect\n+        Map<K, V> map = (Map<K, V>) in.readObject();\n+        putAll(map);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMapTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bidimap;\n+\n+import junit.framework.Test;\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * JUnit tests.\n+ *\n+ * @version $Id $\n+ */\n+public class DualLinkedHashBidiMapTest<K, V> extends AbstractBidiMapTest<K, V> {\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(DualLinkedHashBidiMapTest.class);\n+    }\n+\n+    public DualLinkedHashBidiMapTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public DualLinkedHashBidiMap<K, V> makeObject() {\n+        return new DualLinkedHashBidiMap<K, V>();\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n+    /**\n+     * Override to prevent infinite recursion of tests.\n+     */\n+    @Override\n+    public String[] ignoredTests() {\n+        return new String[] { \"DualLinkedHashBidiMapTest.bulkTestInverseMap.bulkTestInverseMap\" };\n+    }\n+    \n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((Serializable) map, \"src/test/resources/data/test/DualLinkedHashBidiMap.emptyCollection.version4.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((Serializable) map, \"src/test/resources/data/test/DualLinkedHashBidiMap.fullCollection.version4.obj\");\n+//    }\n+}", "timestamp": 1362085131, "metainfo": ""}