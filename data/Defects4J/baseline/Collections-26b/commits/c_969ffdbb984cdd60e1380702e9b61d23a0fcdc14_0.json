{"sha": "969ffdbb984cdd60e1380702e9b61d23a0fcdc14", "log": "[COLLECTIONS-456] Added ListUtils.longestCommonSubsequence(List, List).   ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/ListUtils.java\n import org.apache.commons.collections4.list.PredicatedList;\n import org.apache.commons.collections4.list.TransformedList;\n import org.apache.commons.collections4.list.UnmodifiableList;\n+import org.apache.commons.collections4.sequence.CommandVisitor;\n+import org.apache.commons.collections4.sequence.EditScript;\n+import org.apache.commons.collections4.sequence.SequencesComparator;\n \n /**\n  * Provides utility methods and decorators for {@link List} instances.\n         return FixedSizeList.fixedSizeList(list);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Finds the first index in the given List which matches the given predicate.\n      * <p>\n         return -1;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the longest common subsequence (LCS) of two sequences (lists).\n+     * \n+     * @param <T>  the element type\n+     * @param a  the first list\n+     * @param b  the second list\n+     * @return the longest common subsequence\n+     * @throws IllegalArgumentException if either list is {@code null}\n+     * @since 4.0\n+     */\n+    public static <T> List<T> longestCommonSubsequence(final List<T> a, final List<T> b) {\n+        if (a == null || b == null) {\n+            throw new IllegalArgumentException(\"List must not be null\");          \n+        }\n+\n+        final SequencesComparator<T> comparator = new SequencesComparator<T>(a, b);\n+        final EditScript<T> script = comparator.getScript();\n+        final LcsVisitor<T> visitor = new LcsVisitor<T>();\n+        script.visit(visitor);\n+        return visitor.getSubSequence();\n+    }\n+\n+    /**\n+     * A helper class used to construct the longest common subsequence.\n+     */\n+    private static final class LcsVisitor<E> implements CommandVisitor<E> {\n+        private ArrayList<E> sequence;\n+\n+        public LcsVisitor() {\n+            sequence = new ArrayList<E>();\n+        }\n+\n+        public void visitInsertCommand(final E object) {}\n+\n+        public void visitDeleteCommand(final E object) {}\n+\n+        public void visitKeepCommand(final E object) {\n+            sequence.add(object);\n+        }\n+\n+        public List<E> getSubSequence() {\n+            return sequence;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns consecutive {@link List#subList(int, int) sublists} of a\n      * list, each of the same size (the final list may be smaller). For example,\n--- a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.functors.EqualPredicate;\n import org.apache.commons.collections4.list.PredicatedList;\n+import org.junit.Assert;\n \n /**\n  * Tests for ListUtils.\n         \n         assertEquals(ListUtils.indexOf(null,testPredicate), -1);\n         assertEquals(ListUtils.indexOf(fullList, null), -1);\n+    }\n+    \n+    public void testLongestCommonSubsequence() {\n+        \n+        try {\n+            ListUtils.longestCommonSubsequence(null, null);\n+            fail(\"failed to check for null argument\");\n+        } catch (final IllegalArgumentException e) {}\n+\n+        try {\n+            ListUtils.longestCommonSubsequence(Arrays.asList('A'), null);\n+            fail(\"failed to check for null argument\");\n+        } catch (final IllegalArgumentException e) {}\n+\n+        try {\n+            ListUtils.longestCommonSubsequence(null, Arrays.asList('A'));\n+            fail(\"failed to check for null argument\");\n+        } catch (final IllegalArgumentException e) {}\n+\n+        @SuppressWarnings(\"unchecked\")\n+        List<Character> lcs = ListUtils.longestCommonSubsequence(Collections.EMPTY_LIST, Collections.EMPTY_LIST);\n+        assertTrue(lcs.isEmpty());\n+\n+        List<Character> list1 = Arrays.asList('B', 'A', 'N', 'A', 'N', 'A');\n+        List<Character> list2 = Arrays.asList('A', 'N', 'A', 'N', 'A', 'S');\n+        lcs = ListUtils.longestCommonSubsequence(list1, list2);\n+        \n+        List<Character> expected = Arrays.asList('A', 'N', 'A', 'N', 'A');\n+        assertEquals(expected, lcs);\n+\n+        List<Character> list3 = Arrays.asList('A', 'T', 'A', 'N', 'A');\n+        lcs = ListUtils.longestCommonSubsequence(list1, list3);\n+        \n+        expected = Arrays.asList('A', 'A', 'N', 'A');\n+        assertEquals(expected, lcs);\n+\n+        List<Character> listZorro = Arrays.asList('Z', 'O', 'R', 'R', 'O');\n+        lcs = ListUtils.longestCommonSubsequence(list1, listZorro);\n+        \n+        assertTrue(lcs.isEmpty());\n     }\n     \n     public void testPartition() {", "timestamp": 1367266126, "metainfo": ""}