{"sha": "4658bffcb6969cd17fb29c11cb4b3dc763657680", "log": "New buffer implementation that overwrites the oldest entry when full from Stefano Fornari   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/CircularFifoBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CircularFifoBuffer.java,v 1.1 2003/04/26 15:10:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.BoundedFifoBuffer;\n+\n+/** \n+ * CircularFifoBuffer is a first in first out buffer with a fixed size that\n+ * replaces its oldest element if full.\n+ * <p>\n+ * The removal order of a <code>CircularFifoBuffer</code> is based on the \n+ * insertion order; elements are removed in the same order in which they\n+ * were added.  The iteration order is the same as the removal order.\n+ * <p>\n+ * The {@link #add(Object)}, {@link #remove()} and {@link #get()} operations\n+ * all perform in constant time.  All other operations perform in linear\n+ * time or worse.\n+ * <p>\n+ * Note that this implementation is not synchronized.  The following can be\n+ * used to provide synchronized access to your <code>CircularFifoBuffer</code>:\n+ * <pre>\n+ *   Buffer fifo = BufferUtils.synchronizedBuffer(new CircularFifoBuffer());\n+ * </pre>\n+ * <p>\n+ * This buffer prevents null objects from being added.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/26 15:10:56 $\n+ * \n+ * @author Stefano Fornari\n+ * @author Stephen Colebourne\n+ */\n+public class CircularFifoBuffer extends BoundedFifoBuffer {\n+\n+    /**\n+     * Constructor that creates a buffer with the default size of 32.\n+     */\n+    public CircularFifoBuffer() {\n+        super(32);\n+    }\n+\n+    /**\n+     * Constructor that creates a buffer with the specified size.\n+     * \n+     * @param size  the size of the buffer (cannot be changed)\n+     * @throws IllegalArgumentException  if the size is less than 1\n+     */\n+    public CircularFifoBuffer(int size) {\n+        super(size);\n+    }\n+\n+    /**\n+     * Constructor that creates a buffer from the specified collection.\n+     * The collection size also sets the buffer size\n+     * \n+     * @param coll  the collection to copy into the buffer, may not be null\n+     * @throws NullPointerException if the collection is null\n+     */\n+    public CircularFifoBuffer(Collection coll) {\n+        super(coll);\n+    }\n+\n+    /**\n+     * If the buffer is full, the least recently added element is discarded so\n+     * that a new element can be inserted.\n+     *\n+     * @param element the element to add\n+     * @return true, always\n+     */\n+    public boolean add(Object element) {\n+        if (isFull()) {\n+            remove();\n+        }\n+        return super.add(element);\n+    }\n+    \n+}", "timestamp": 1051369856, "metainfo": ""}