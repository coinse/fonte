{"sha": "afe7736f6241cdadb1b634530bb513b17d47ed8c", "log": "Added initial implementation of HashBidiMap, plus tests.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/HashBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/HashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.AbstractMap;\n+import java.util.AbstractSet;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Default implementation of <code>BidiMap</code>.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Id: HashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * \n+ * @author Matthew Hawthorne\n+ */\n+public class HashBidiMap extends AbstractMap implements BidiMap {\n+\n+    /**\n+     * Delegate map array.  The first map contains standards entries, and the \n+     * second contains inverses.\n+     */\n+    final Map[] maps = new Map[] { new HashMap(), new HashMap()};\n+\n+    /**\n+     * Inverse view of this map.\n+     */\n+    private final BidiMap inverseBidiMap = new InverseBidiMap();\n+\n+    /**\n+     * Creates an empty <code>HashBidiMap</code>\n+     */\n+    public HashBidiMap() {}\n+\n+    /** \n+     * Constructs a new <tt>HashMap</tt> with the same mappings as the\n+     * specified <tt>Map</tt>.  \n+     *\n+     * @param   m the map whose mappings are to be placed in this map.\n+     */\n+    public HashBidiMap(Map m) {\n+        putAll(m);\n+    }\n+\n+    public Object getKey(Object value) {\n+        return maps[1].get(value);\n+    }\n+\n+    public BidiMap inverseBidiMap() {\n+        return inverseBidiMap;\n+    }\n+\n+    public Object removeKey(Object value) {\n+        final Object key = maps[1].get(value);\n+        return remove(key);\n+    }\n+\n+    public Object put(Object key, Object value) {\n+        final Object obj = maps[0].put(key, value);\n+        maps[1].put(value, key);\n+        return obj;\n+    }\n+\n+    public Set entrySet() {\n+        // The entrySet is the root of most Map methods, care must be taken not \n+        // to reference instance methods like size()\n+        \n+        // Creates anonymous AbstractSet\n+        return new AbstractSet() {\n+            \n+            public Iterator iterator() {\n+                // Creates anonymous Iterator\n+                return new Iterator() {\n+\n+                    // Delegate iterator.\n+                    final Iterator it = maps[0].entrySet().iterator();\n+                    \n+                    // Current iterator entry\n+                    Map.Entry currentEntry;\n+\n+                    public void remove() {\n+                        // Removes from standard and inverse Maps.\n+                        \n+                        // Object must be removed using the iterator or a \n+                        // ConcurrentModificationException is thrown\n+                        it.remove();\n+                        HashBidiMap.this.maps[1].remove(\n+                            currentEntry.getValue());\n+                    }\n+\n+                    public boolean hasNext() {\n+                        return it.hasNext();\n+                    }\n+\n+                    public Object next() {\n+                        currentEntry = (Map.Entry)it.next();\n+                        return currentEntry;\n+                    };\n+                }; // anonymous Iterator\n+            }\n+\n+            public boolean remove(Object obj) {\n+                // XXX Throws ClassCastException if obj is not a Map.Entry.\n+                // Is this acceptable?\n+                final Object removed =\n+                    HashBidiMap.this.remove(((Map.Entry)obj).getKey());\n+                return removed != null;\n+            }\n+\n+            public int size() {\n+                return HashBidiMap.this.maps[0].size();\n+            }\n+            \n+        }; // anonymous AbstractSet\n+\n+    } // entrySet()\n+\n+    /**\n+     * Inverse view of this BidiMap.\n+     */\n+    private final class InverseBidiMap extends AbstractMap implements BidiMap {\n+\n+        public Object getKey(Object value) {\n+            return HashBidiMap.this.get(value);\n+        }\n+\n+        public BidiMap inverseBidiMap() {\n+            return HashBidiMap.this;\n+        }\n+\n+        public Object removeKey(Object value) {\n+            return HashBidiMap.this.remove(value);\n+        }\n+\n+        public Set entrySet() {\n+            // Gets entry set from outer class\n+            final Set entrySet = HashBidiMap.this.entrySet();\n+\n+            // Returns anonymous Set\n+            return new AbstractSet() {\n+\n+                public int size() {\n+                    return HashBidiMap.this.size();\n+                }\n+\n+                public Iterator iterator() {\n+                    final Iterator delegate = entrySet.iterator();\n+\n+                    // Returns anonymous Iterator\n+                    return new Iterator() {\n+\n+                        public boolean hasNext() {\n+                            return delegate.hasNext();\n+                        }\n+\n+                        public Object next() {\n+                            final Map.Entry entry = (Map.Entry)delegate.next();\n+                            return new DefaultMapEntry(\n+                                entry.getValue(),\n+                                entry.getKey());\n+                        }\n+\n+                        public void remove() {\n+                            delegate.remove();\n+                        }\n+\n+                    }; // anonymous Iterator\n+                }\n+\n+            };  // anonymous AbstractSet\n+            \n+        } // entrySet()\n+\n+    } // InverseBidiMap\n+\n+} // HashBidiMap\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.47 2003/09/20 16:58:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.48 2003/09/23 20:29:34 matth Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Entry point for all Collections package tests.\n  * \n- * @version $Revision: 1.47 $ $Date: 2003/09/20 16:58:19 $\n+ * @version $Revision: 1.48 $ $Date: 2003/09/23 20:29:34 $\n  * \n  * @author Rodney Waldhoff\n  * @author Stephen Colebourne\n         suite.addTest(TestFastTreeMap.suite());\n         suite.addTest(TestFastTreeMap1.suite());\n         suite.addTest(TestHashBag.suite());\n+        suite.addTest(TestHashBidiMap.suite());\n         suite.addTest(TestIteratorUtils.suite());\n         suite.addTest(TestLRUMap.suite());\n         suite.addTest(TestMultiHashMap.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @author Matthew Hawthorne\n+ * @version $Id: TestBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * @see org.apache.commons.collections.BidiMap\n+ */\n+public abstract class TestBidiMap extends TestMap {\n+\n+    // Test data.\n+    private static final Object KEY = \"key1\";\n+    private static final Object VALUE = \"value1\";\n+\n+    private static final Object[][] entries =\n+        new Object[][] {\n+            new Object[] { KEY, VALUE },\n+            new Object[] { \"key2\", \"value2\" },\n+            new Object[] { \"key3\", \"value3\" }\n+    };\n+\n+    public TestBidiMap(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Creates an empty <code>BidiMap</code> implementation.\n+     * \n+     * @return an empty <code>BidiMap</code> implementation.\n+     */\n+    protected abstract BidiMap createBidiMap();\n+\n+    // testGetKey\n+\n+    public void testGetKey() {\n+        testGetKey(createBidiMapWithData(), entries[0][0], entries[0][1]);\n+    }\n+\n+    public void testGetKeyInverse() {\n+        testGetKey(\n+            createBidiMapWithData().inverseBidiMap(),\n+            entries[0][1],\n+            entries[0][0]);\n+    }\n+\n+    private final void testGetKey(BidiMap map, Object key, Object value) {\n+        assertEquals(\"Value not found for key.\", value, map.get(key));\n+        assertEquals(\"Key not found for value.\", key, map.getKey(value));\n+    }\n+\n+    // testInverse\n+\n+    public void testInverse() {\n+        final BidiMap map = createBidiMapWithData();\n+        final BidiMap inverseMap = map.inverseBidiMap();\n+\n+        assertSame(\n+            \"Inverse of inverse is not equal to original.\",\n+            map,\n+            inverseMap.inverseBidiMap());\n+\n+        assertEquals(\n+            \"Value not found for key.\",\n+            entries[0][0],\n+            inverseMap.get(entries[0][1]));\n+\n+        assertEquals(\n+            \"Key not found for value.\",\n+            entries[0][1],\n+            inverseMap.getKey(entries[0][0]));\n+    }\n+\n+    // Removal tests\n+\n+    public void testClear() {\n+        BidiMap map = createBidiMapWithData();\n+        map.clear();\n+        assertTrue(\"Map was not cleared.\", map.isEmpty());\n+        assertTrue(\n+            \"Inverse map was not cleared.\",\n+            map.inverseBidiMap().isEmpty());\n+\n+        // Tests clear on inverse\n+        map = createBidiMapWithData().inverseBidiMap();\n+        map.clear();\n+        assertTrue(\"Map was not cleared.\", map.isEmpty());\n+        assertTrue(\n+            \"Inverse map was not cleared.\",\n+            map.inverseBidiMap().isEmpty());\n+\n+    }\n+\n+    public void testRemove() {\n+        remove(createBidiMapWithData(), KEY);\n+        remove(createBidiMapWithData().inverseBidiMap(), VALUE);\n+        \n+        removeKey(createBidiMapWithData(), VALUE);\n+        removeKey(createBidiMapWithData().inverseBidiMap(), KEY);\n+    }\n+\n+    private final void remove(BidiMap map, Object key) {\n+        final Object value = map.remove(key);\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertNull(\"Value was not removed.\", map.getKey(value));\n+    }\n+    \n+    private final void removeKey(BidiMap map, Object value) {\n+        final Object key = map.removeKey(value);\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertNull(\"Value was not removed.\", map.getKey(value));\n+    }\n+\n+    public void testRemoveByKeySet() {\n+        removeByKeySet(createBidiMapWithData(), KEY, VALUE);\n+        removeByKeySet(createBidiMapWithData().inverseBidiMap(), VALUE, KEY);\n+    }\n+\n+    private final void removeByKeySet(BidiMap map, Object key, Object value) {\n+        map.keySet().remove(key);\n+\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n+\n+        assertTrue(\n+            \"Key was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsValue(key));\n+        assertTrue(\n+            \"Value was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsKey(value));\n+    }\n+\n+    public void testRemoveByEntrySet() {\n+        removeByEntrySet(createBidiMapWithData(), KEY, VALUE);\n+        removeByEntrySet(createBidiMapWithData().inverseBidiMap(), VALUE, KEY);\n+    }\n+\n+    private final void removeByEntrySet(\n+        BidiMap map,\n+        Object key,\n+        Object value) {\n+        map.entrySet().remove(new DefaultMapEntry(key, value));\n+\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n+\n+        assertTrue(\n+            \"Key was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsValue(key));\n+        assertTrue(\n+            \"Value was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsKey(value));\n+    }\n+\n+    // ----------------------------------------------------------------\n+    // Data generation methods\n+    // ----------------------------------------------------------------\n+\n+    protected Map makeEmptyMap() {\n+        return createBidiMap();\n+    }\n+\n+    private final BidiMap createBidiMapWithData() {\n+        final BidiMap map = createBidiMap();\n+        fillMap(map);\n+        return map;\n+    }\n+\n+    private static final void fillMap(BidiMap map) {\n+        for (int i = 0; i < entries.length; i++) {\n+            map.put(entries[i][0], entries[i][1]);\n+        }\n+    }\n+\n+} // TestBidiMap\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestHashBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestHashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @author Matthew Hawthorne\n+ * @version $Id: TestHashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * @see org.apache.commons.collections.HashBidiMap\n+ */\n+public class TestHashBidiMap extends TestBidiMap {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestHashBidiMap.class);\n+    }\n+\n+    public TestHashBidiMap(String testName) {\n+        super(testName);\n+    }\n+\n+    protected BidiMap createBidiMap() {\n+        return new HashBidiMap();\n+    }\n+\n+} // TestHashBidiMap", "timestamp": 1064348974, "metainfo": ""}