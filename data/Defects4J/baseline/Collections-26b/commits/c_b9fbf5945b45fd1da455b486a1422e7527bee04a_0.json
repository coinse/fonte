{"sha": "b9fbf5945b45fd1da455b486a1422e7527bee04a", "log": "better handling of serializablity w.r.t. sublists make some types final   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractIntCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractIntCollectionCollection.java,v 1.1 2003/02/28 21:21:51 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 21:21:51 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractIntCollectionCollection implements Collection {\n+    \n+    public boolean add(Object element) {\n+        return getIntCollection().add(((Number)element).intValue());\n+    }\n+\n+    public boolean addAll(Collection c) {\n+        return getIntCollection().addAll(CollectionIntCollection.wrap(c));\n+    }\n+        \n+    public void clear() {\n+        getIntCollection().clear();\n+    }\n+\n+    public boolean contains(Object element) {\n+        return getIntCollection().contains(((Number)element).intValue());\n+    }\n+   \n+    \n+    public boolean containsAll(Collection c) {\n+        return getIntCollection().containsAll(CollectionIntCollection.wrap(c));\n+    }        \n+        \n+    public String toString() {\n+        return getIntCollection().toString();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return getIntCollection().isEmpty();\n+    }\n+    \n+    /**\n+     * {@link IntIteratorIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.IntIterator IntIterator}\n+     * returned by my underlying \n+     * {@link IntCollection IntCollection}, \n+     * if any.\n+     */\n+    public Iterator iterator() {\n+        return IntIteratorIterator.wrap(getIntCollection().iterator());\n+    }\n+     \n+    public boolean remove(Object element) {\n+        return getIntCollection().removeElement(((Number)element).intValue());\n+    }\n+    \n+    public boolean removeAll(Collection c) {\n+        return getIntCollection().removeAll(CollectionIntCollection.wrap(c));\n+    }\n+    \n+    public boolean retainAll(Collection c) {\n+        return getIntCollection().retainAll(CollectionIntCollection.wrap(c));\n+    }\n+    \n+    public int size() {\n+        return getIntCollection().size();\n+    }\n+    \n+    public Object[] toArray() {\n+        int[] a = getIntCollection().toArray();\n+        Object[] A = new Object[a.length];\n+        for(int i=0;i<a.length;i++) {\n+            A[i] = new Integer(a[i]);\n+        }\n+        return A;\n+    }\n+    \n+    public Object[] toArray(Object[] A) {\n+        int[] a = getIntCollection().toArray();\n+        if(A.length < a.length) {\n+            A = (Object[])(Array.newInstance(A.getClass().getComponentType(), a.length));\n+        }\n+        for(int i=0;i<a.length;i++) {\n+            A[i] = new Integer(a[i]);\n+        }\n+        if(A.length > a.length) {\n+            A[a.length] = null;\n+        }\n+\n+        return A;\n+    }\n+\n+    protected abstract IntCollection getIntCollection();            \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractIntListList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractIntListList.java,v 1.1 2003/02/28 21:21:51 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+import org.apache.commons.collections.primitives.IntList;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 21:21:51 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractIntListList extends AbstractIntCollectionCollection implements List {\n+    \n+    public void add(int index, Object element) {\n+        getIntList().add(index,((Number)element).intValue());\n+    }\n+\n+    public boolean addAll(int index, Collection c) {\n+        return getIntList().addAll(index,CollectionIntCollection.wrap(c));\n+    }\n+\n+    public Object get(int index) {\n+        return new Integer(getIntList().get(index));\n+    }\n+\n+    public int indexOf(Object element) {\n+        return getIntList().indexOf(((Number)element).intValue());\n+    }\n+\n+    public int lastIndexOf(Object element) {\n+        return getIntList().lastIndexOf(((Number)element).intValue());\n+    }\n+\n+    /**\n+     * {@link IntListIteratorListIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.IntListIterator IntListIterator}\n+     * returned by my underlying \n+     * {@link IntList IntList}, \n+     * if any.\n+     */\n+    public ListIterator listIterator() {\n+        return IntListIteratorListIterator.wrap(getIntList().listIterator());\n+    }\n+\n+    /**\n+     * {@link IntListIteratorListIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.IntListIterator IntListIterator}\n+     * returned by my underlying \n+     * {@link IntList IntList}, \n+     * if any.\n+     */\n+    public ListIterator listIterator(int index) {\n+        return IntListIteratorListIterator.wrap(getIntList().listIterator(index));\n+    }\n+\n+    public Object remove(int index) {\n+        return new Integer(getIntList().removeElementAt(index));\n+    }\n+\n+    public Object set(int index, Object element) {\n+        return new Integer(getIntList().set(index, ((Number)element).intValue() ));\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        return IntListList.wrap(getIntList().subList(fromIndex,toIndex));\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if(obj instanceof List) {\n+            List that = (List)obj;\n+            if(this == that) {\n+                return true;\n+            } else if(this.size() != that.size()) {\n+                return false;            \n+            } else {\n+                Iterator thisiter = iterator();\n+                Iterator thatiter = that.iterator();\n+                while(thisiter.hasNext()) {\n+                    Object thiselt = thisiter.next();\n+                    Object thatelt = thatiter.next();\n+                    if(null == thiselt ? null != thatelt : !(thiselt.equals(thatelt))) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    public int hashCode() {\n+        return getIntList().hashCode();\n+    }\n+    \n+    protected final IntCollection getIntCollection() {\n+        return getIntList();\n+    }\n+    \n+    protected abstract IntList getIntList();\n+        \n+\n+}\n--- a/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.5 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.6 2003/02/28 21:21:51 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * implementation in the \"obvious\" way.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.5 $ $Date: 2003/02/28 00:17:53 $\n+ * @version $Revision: 1.6 $ $Date: 2003/02/28 21:21:51 $\n  * @author Rodney Waldhoff \n  */\n-public class CollectionIntCollection extends AbstractCollectionIntCollection implements Serializable {\n+final public class CollectionIntCollection extends AbstractCollectionIntCollection implements Serializable {\n     /**\n      * Create an {@link IntCollection IntCollection} wrapping\n      * the specified {@link Collection Collection}.  When\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntCollectionCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntCollectionCollection.java,v 1.4 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntCollectionCollection.java,v 1.5 2003/02/28 21:21:51 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n package org.apache.commons.collections.primitives.adapters;\n \n import java.io.Serializable;\n-import java.lang.reflect.Array;\n import java.util.Collection;\n-import java.util.Iterator;\n \n import org.apache.commons.collections.primitives.IntCollection;\n \n  * implementation in the \"obvious\" way.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/02/28 21:21:51 $\n  * @author Rodney Waldhoff \n  */\n-public class IntCollectionCollection implements Collection, Serializable {\n+final public class IntCollectionCollection extends AbstractIntCollectionCollection implements Serializable {\n     \n     /**\n      * Create a {@link Collection Collection} wrapping\n      *         <code>null</code>.\n      */\n     public static Collection wrap(IntCollection collection) {\n-        return null == collection ? null : new IntCollectionCollection(collection);\n+        if(null == collection) {\n+            return null;\n+        } else if(collection instanceof Serializable) {\n+            return new IntCollectionCollection(collection);\n+        } else {\n+            return new NonSerializableIntCollectionCollection(collection);\n+        }\n     }\n     \n     /**\n         _collection = collection;\n     }\n     \n-    public boolean add(Object element) {\n-        return _collection.add(((Number)element).intValue());\n-    }\n \n-    public boolean addAll(Collection c) {\n-        return _collection.addAll(CollectionIntCollection.wrap(c));\n+    protected IntCollection getIntCollection() {\n+        return _collection;\n     }\n         \n-    public void clear() {\n-        _collection.clear();\n-    }\n-\n-    public boolean contains(Object element) {\n-        return _collection.contains(((Number)element).intValue());\n-    }\n-   \n-    \n-    public boolean containsAll(Collection c) {\n-        return _collection.containsAll(CollectionIntCollection.wrap(c));\n-    }        \n-    \n-    /**\n-     * If <i>that</i> is a {@link Collection Collection}, \n-     * it is {@link CollectionIntCollection#wrap wrapped} and\n-     * compared to my underlying \n-     * {@link org.apache.commons.collections.primitives.IntCollection IntCollection},\n-     * otherwise this method simply delegates to my underlying \n-     * <code>IntCollection</code>.\n-     */\n-    public boolean equals(Object that) {\n-        if(that instanceof Collection) {\n-            try {\n-                return _collection.equals(CollectionIntCollection.wrap((Collection)that));\n-            } catch(ClassCastException e) {\n-                return false;\n-            } catch(NullPointerException e) {\n-                return false;\n-            }\n-        } else {\n-            return _collection.equals(that);\n-        }\n-    }\n-    \n-    public int hashCode() {\n-        return _collection.hashCode();\n-    }\n-    \n-    public String toString() {\n-        return _collection.toString();\n-    }\n-    \n-    public boolean isEmpty() {\n-        return _collection.isEmpty();\n-    }\n-    \n-    /**\n-     * {@link IntIteratorIterator#wrap wraps} the \n-     * {@link org.apache.commons.collections.primitives.IntIterator IntIterator}\n-     * returned by my underlying \n-     * {@link IntCollection IntCollection}, \n-     * if any.\n-     */\n-    public Iterator iterator() {\n-        return IntIteratorIterator.wrap(_collection.iterator());\n-    }\n-     \n-    public boolean remove(Object element) {\n-        return _collection.removeElement(((Number)element).intValue());\n-    }\n-    \n-    public boolean removeAll(Collection c) {\n-        return _collection.removeAll(CollectionIntCollection.wrap(c));\n-    }\n-    \n-    public boolean retainAll(Collection c) {\n-        return _collection.retainAll(CollectionIntCollection.wrap(c));\n-    }\n-    \n-    public int size() {\n-        return _collection.size();\n-    }\n-    \n-    public Object[] toArray() {\n-        int[] a = _collection.toArray();\n-        Object[] A = new Object[a.length];\n-        for(int i=0;i<a.length;i++) {\n-            A[i] = new Integer(a[i]);\n-        }\n-        return A;\n-    }\n-    \n-    public Object[] toArray(Object[] A) {\n-        int[] a = _collection.toArray();\n-        if(A.length < a.length) {\n-            A = (Object[])(Array.newInstance(A.getClass().getComponentType(), a.length));\n-        }\n-        for(int i=0;i<a.length;i++) {\n-            A[i] = new Integer(a[i]);\n-        }\n-        if(A.length > a.length) {\n-            A[a.length] = null;\n-        }\n-\n-        return A;\n-    }\n-    \n     private IntCollection _collection = null;\n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntListList.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListList.java,v 1.4 2003/02/26 19:17:23 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListList.java,v 1.5 2003/02/28 21:21:51 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n package org.apache.commons.collections.primitives.adapters;\n \n import java.io.Serializable;\n-import java.util.Collection;\n-import java.util.Iterator;\n import java.util.List;\n-import java.util.ListIterator;\n \n import org.apache.commons.collections.primitives.IntList;\n \n  * implementation in the \"obvious\" way.\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.4 $ $Date: 2003/02/26 19:17:23 $\n+ * @version $Revision: 1.5 $ $Date: 2003/02/28 21:21:51 $\n  * @author Rodney Waldhoff \n  */\n-public class IntListList extends IntCollectionCollection implements List, Serializable {\n+final public class IntListList extends AbstractIntListList implements Serializable {\n     \n     /**\n      * Create a {@link List List} wrapping\n      *         <code>null</code>.\n      */\n     public static List wrap(IntList list) {\n-        return null == list ? null : new IntListList(list);\n+        if(null == list) {\n+            return null;\n+        } else if(list instanceof Serializable) {\n+            return new IntListList(list);\n+        } else {\n+            return new NonSerializableIntListList(list);\n+        }\n     }\n \n     /**\n      * @see #wrap\n      */\n     public IntListList(IntList list) {\n-        super(list);        \n         _list = list;\n     }\n     \n-    public void add(int index, Object element) {\n-        _list.add(index,((Number)element).intValue());\n-    }\n-\n-    public boolean addAll(int index, Collection c) {\n-        return _list.addAll(index,CollectionIntCollection.wrap(c));\n-    }\n-\n-    public Object get(int index) {\n-        return new Integer(_list.get(index));\n-    }\n-\n-    public int indexOf(Object element) {\n-        return _list.indexOf(((Number)element).intValue());\n-    }\n-\n-    public int lastIndexOf(Object element) {\n-        return _list.lastIndexOf(((Number)element).intValue());\n-    }\n-\n-    /**\n-     * {@link IntListIteratorListIterator#wrap wraps} the \n-     * {@link org.apache.commons.collections.primitives.IntListIterator IntListIterator}\n-     * returned by my underlying \n-     * {@link IntList IntList}, \n-     * if any.\n-     */\n-    public ListIterator listIterator() {\n-        return IntListIteratorListIterator.wrap(_list.listIterator());\n-    }\n-\n-    /**\n-     * {@link IntListIteratorListIterator#wrap wraps} the \n-     * {@link org.apache.commons.collections.primitives.IntListIterator IntListIterator}\n-     * returned by my underlying \n-     * {@link IntList IntList}, \n-     * if any.\n-     */\n-    public ListIterator listIterator(int index) {\n-        return IntListIteratorListIterator.wrap(_list.listIterator(index));\n-    }\n-\n-    public Object remove(int index) {\n-        return new Integer(_list.removeElementAt(index));\n-    }\n-\n-    public Object set(int index, Object element) {\n-        return new Integer(_list.set(index, ((Number)element).intValue() ));\n-    }\n-\n-    public List subList(int fromIndex, int toIndex) {\n-        return IntListList.wrap(_list.subList(fromIndex,toIndex));\n-    }\n-\n-    public boolean equals(Object obj) {\n-        if(obj instanceof List) {\n-            List that = (List)obj;\n-            if(this == that) {\n-                return true;\n-            } else if(this.size() != that.size()) {\n-                return false;            \n-            } else {\n-                Iterator thisiter = iterator();\n-                Iterator thatiter = that.iterator();\n-                while(thisiter.hasNext()) {\n-                    Object thiselt = thisiter.next();\n-                    Object thatelt = thatiter.next();\n-                    if(null == thiselt ? null != thatelt : !(thiselt.equals(thatelt))) {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-        } else {\n-            return false;\n-        }\n-    }\n+    protected IntList getIntList() {\n+        return _list;\n+    }    \n     \n     private IntList _list = null;\n-\n }\n--- a/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableCollectionIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableCollectionIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableCollectionIntCollection.java,v 1.1 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableCollectionIntCollection.java,v 1.2 2003/02/28 21:21:51 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n /**\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.1 $ $Date: 2003/02/28 00:17:53 $\n+ * @version $Revision: 1.2 $ $Date: 2003/02/28 21:21:51 $\n  * @author Rodney Waldhoff \n  */\n-class NonSerializableCollectionIntCollection extends AbstractCollectionIntCollection {\n+final class NonSerializableCollectionIntCollection extends AbstractCollectionIntCollection {\n     public NonSerializableCollectionIntCollection(Collection collection) {\n         _collection = collection;\n     }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableIntCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableIntCollectionCollection.java,v 1.1 2003/02/28 21:21:51 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import org.apache.commons.collections.primitives.IntCollection;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 21:21:51 $\n+ * @author Rodney Waldhoff \n+ */\n+final class NonSerializableIntCollectionCollection extends AbstractIntCollectionCollection {\n+    \n+    /**\n+     * Creates a {@link Collection Collection} wrapping\n+     * the specified {@link IntCollection IntCollection}.\n+     */\n+    public NonSerializableIntCollectionCollection(IntCollection collection) {\n+        _collection = collection;\n+    }\n+\n+    protected IntCollection getIntCollection() {\n+        return _collection;\n+    }\n+        \n+    private IntCollection _collection = null;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableIntListList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableIntListList.java,v 1.1 2003/02/28 21:21:51 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import org.apache.commons.collections.primitives.IntList;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/02/28 21:21:51 $\n+ * @author Rodney Waldhoff \n+ */\n+final class NonSerializableIntListList extends AbstractIntListList {\n+    \n+    /**\n+     * Creates a {@link List List} wrapping\n+     * the specified {@link IntList IntList}.\n+     */\n+    public NonSerializableIntListList(IntList list) {\n+        _list = list;\n+    }\n+\n+    protected IntList getIntList() {\n+        return _list;\n+    }    \n+    \n+    private IntList _list = null;\n+\n+}\n--- a/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableListIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableListIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableListIntList.java,v 1.1 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableListIntList.java,v 1.2 2003/02/28 21:21:51 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n /**\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.1 $ $Date: 2003/02/28 00:17:53 $\n+ * @version $Revision: 1.2 $ $Date: 2003/02/28 21:21:51 $\n  * @author Rodney Waldhoff \n  */\n-class NonSerializableListIntList extends AbstractListIntList {\n+final class NonSerializableListIntList extends AbstractListIntList {\n \n     protected NonSerializableListIntList(List list) {\n         _list = list;\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.9 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.10 2003/02/28 21:21:51 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.9 $ $Date: 2003/02/28 00:17:53 $\n+ * @version $Revision: 1.10 $ $Date: 2003/02/28 21:21:51 $\n  * @author Rodney Waldhoff\n  */\n public class TestArrayIntList extends TestIntList {\n     }\n \n     public static Test suite() {\n-        // BulkTests won't work, sublists are not serializable\n-        TestSuite suite = new TestSuite(TestArrayIntList.class);\n+        TestSuite suite = BulkTest.makeSuite(TestArrayIntList.class);\n         return suite;\n     }\n \n \n     protected IntList makeEmptyIntList() {\n         return new ArrayIntList();\n+    }\n+\n+    public String[] ignoredSimpleTests() {\n+        // sublists are not serializable\n+        return new String[] { \n+            \"TestArrayIntList.bulkTestSubList.testFullListSerialization\",\n+            \"TestArrayIntList.bulkTestSubList.testEmptyListSerialization\",\n+            \"TestArrayIntList.bulkTestSubList.testCanonicalEmptyCollectionExists\",\n+            \"TestArrayIntList.bulkTestSubList.testCanonicalFullCollectionExists\",\n+            \"TestArrayIntList.bulkTestSubList.testEmptyListCompatibility\",\n+            \"TestArrayIntList.bulkTestSubList.testFullListCompatibility\",\n+            \"TestArrayIntList.bulkTestSubList.testSerializeDeserializeThenCompare\",\n+            \"TestArrayIntList.bulkTestSubList.testSimpleSerialization\"\n+        };\n     }\n \n     // tests\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.9 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.10 2003/02/28 21:21:51 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.BulkTest;\n \n /**\n- * @version $Revision: 1.9 $ $Date: 2003/02/28 00:17:53 $\n+ * @version $Revision: 1.10 $ $Date: 2003/02/28 21:21:51 $\n  * @author Rodney Waldhoff\n  */\n public class TestArrayUnsignedShortList extends TestIntList {\n     }\n \n     public static Test suite() {\n-        // BulkTests won't work, sublists are not serializable\n-        return new TestSuite(TestArrayUnsignedShortList.class);\n+        TestSuite suite = BulkTest.makeSuite(TestArrayUnsignedShortList.class);\n+        return suite;\n     }\n \n     // collections testing framework\n \n     protected IntList makeEmptyIntList() {\n         return new ArrayUnsignedShortList();\n+    }\n+\n+    public String[] ignoredSimpleTests() {\n+        // sublists are not serializable\n+        return new String[] { \n+            \"TestArrayUnsignedShortList.bulkTestSubList.testFullListSerialization\",\n+            \"TestArrayUnsignedShortList.bulkTestSubList.testEmptyListSerialization\",\n+            \"TestArrayUnsignedShortList.bulkTestSubList.testCanonicalEmptyCollectionExists\",\n+            \"TestArrayUnsignedShortList.bulkTestSubList.testCanonicalFullCollectionExists\",\n+            \"TestArrayUnsignedShortList.bulkTestSubList.testEmptyListCompatibility\",\n+            \"TestArrayUnsignedShortList.bulkTestSubList.testFullListCompatibility\",\n+            \"TestArrayUnsignedShortList.bulkTestSubList.testSerializeDeserializeThenCompare\",\n+            \"TestArrayUnsignedShortList.bulkTestSubList.testSimpleSerialization\"\n+        };\n     }\n \n     // tests", "timestamp": 1046467311, "metainfo": ""}