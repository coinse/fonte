{"sha": "5dd750e7454aaec16f78b5ebf45d805392b2164b", "log": "Add missing 'final' for parameters.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n         }\n \n         final Transformer transformer = new Transformer() {\n-            public EquatorWrapper<?> transform(Object input) {\n+            public EquatorWrapper<?> transform(final Object input) {\n                 return new EquatorWrapper(equator, input);\n             }\n         };\n         }\n         \n         @Override\n-        public boolean equals(Object obj) {\n+        public boolean equals(final Object obj) {\n             if (!(obj instanceof EquatorWrapper)) {\n                 return false;\n             }\n--- a/src/main/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMap.java\n      *\n      * @param map the map whose mappings are to be placed in this map\n      */\n-    public DualLinkedHashBidiMap(Map<K, V> map) {\n+    public DualLinkedHashBidiMap(final Map<K, V> map) {\n         super(new LinkedHashMap<K, V>(), new LinkedHashMap<V, K>());\n         putAll(map);\n     }\n      * @param reverseMap     the reverse direction map\n      * @param inverseBidiMap the inverse BidiMap\n      */\n-    protected DualLinkedHashBidiMap(Map<K, V> normalMap, Map<V, K> reverseMap, BidiMap<V, K> inverseBidiMap) {\n+    protected DualLinkedHashBidiMap(final Map<K, V> normalMap, final Map<V, K> reverseMap, final BidiMap<V, K> inverseBidiMap) {\n         super(normalMap, reverseMap, inverseBidiMap);\n     }\n \n     \n     // Serialization\n     //-----------------------------------------------------------------------\n-    private void writeObject(ObjectOutputStream out) throws IOException {\n+    private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n         out.writeObject(normalMap);\n     }\n \n-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         normalMap = new LinkedHashMap<K, V>();\n         reverseMap = new LinkedHashMap<V, K>();\n--- a/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n      * @return a new instantiate factory\n      */\n     public static <T> Factory<T> instantiateFactory(final Class<T> classToInstantiate,\n-                                                    Class<?>[] paramTypes,\n-                                                    Object[] args) {\n+                                                    final Class<?>[] paramTypes,\n+                                                    final Object[] args) {\n         if (classToInstantiate == null) {\n             throw new IllegalArgumentException(\"Class to instantiate must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections/iterators/NodeListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/NodeListIterator.java\n      * @param node Node, who's child nodes are wrapped by this class. Must not be null\n      * @throws IllegalArgumentException if node is null\n      */\n-    public NodeListIterator(Node node) {\n+    public NodeListIterator(final Node node) {\n         if (node == null) {\n             throw new IllegalArgumentException(\"node must not be null!\");\n         }\n      * @param nodeList node list, which is wrapped by this class. Must not be null\n      * @throws IllegalArgumentException if nodeList is null\n      */\n-    public NodeListIterator(NodeList nodeList) {\n+    public NodeListIterator(final NodeList nodeList) {\n         if (nodeList == null) {\n             throw new IllegalArgumentException(\"nodeList must not be null!\");\n         }\n--- a/src/main/java/org/apache/commons/collections/queue/AbstractQueueDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/queue/AbstractQueueDecorator.java\n \n     //-----------------------------------------------------------------------\n \n-    public boolean offer(E obj) {\n+    public boolean offer(final E obj) {\n         return decorated().offer(obj);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/queue/PredicatedQueue.java\n+++ b/src/main/java/org/apache/commons/collections/queue/PredicatedQueue.java\n      * @return the result of adding to the underlying queue\n      * @throws IllegalArgumentException if the add is invalid\n      */\n-    public boolean offer(E object) {\n+    public boolean offer(final E object) {\n         validate(object);\n         return decorated().offer(object);\n     }\n--- a/src/main/java/org/apache/commons/collections/queue/TransformedQueue.java\n+++ b/src/main/java/org/apache/commons/collections/queue/TransformedQueue.java\n \n     //-----------------------------------------------------------------------\n \n-    public boolean offer(E obj) {\n+    public boolean offer(final E obj) {\n         return getQueue().offer(transform(obj));\n     }\n \n--- a/src/main/java/org/apache/commons/collections/queue/UnmodifiableQueue.java\n+++ b/src/main/java/org/apache/commons/collections/queue/UnmodifiableQueue.java\n     //-----------------------------------------------------------------------\n     \n     @Override\n-    public boolean offer(E obj) {\n+    public boolean offer(final E obj) {\n         throw new UnsupportedOperationException();\n     }\n \n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n \n         // odd / even equator\n         final Equator<Integer> e = new Equator<Integer>() {\n-            public boolean equate(Integer o1, Integer o2) {\n+            public boolean equate(final Integer o1, final Integer o2) {\n                 if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) {\n                     return false;\n                 } else {\n                 }\n             }\n \n-            public int hash(Integer o) {\n+            public int hash(final Integer o) {\n                 return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n             }\n         };\n--- a/src/test/java/org/apache/commons/collections/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/IteratorUtilsTest.java\n      */\n     private NodeList createNodeList(final Node[] nodes) {\n         return new NodeList() {\n-            public Node item(int index) {\n+            public Node item(final int index) {\n                 return nodes[index];\n             }\n             public int getLength() {\n--- a/src/test/java/org/apache/commons/collections/collection/CompositeCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/CompositeCollectionTest.java\n         setUpTest();\n         c.setMutator(new CompositeCollection.CollectionMutator<E>() {\n             \n-            public boolean add(CompositeCollection<E> composite, List<Collection<E>> collections, E obj) {\n+            public boolean add(final CompositeCollection<E> composite, final List<Collection<E>> collections, final E obj) {\n                 for (final Collection<E> coll : collections) {\n                     coll.add(obj);\n                 }\n--- a/src/test/java/org/apache/commons/collections/iterators/LazyIteratorChainTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/LazyIteratorChainTest.java\n     public LazyIteratorChain<String> makeEmptyIterator() {\n         return new LazyIteratorChain<String>() {\n             @Override\n-            protected Iterator<String> nextIterator(int count) {\n+            protected Iterator<String> nextIterator(final int count) {\n                 return null;\n             }\n         };\n     public LazyIteratorChain<String> makeObject() {\n         final LazyIteratorChain<String> chain = new LazyIteratorChain<String>() {\n             @Override\n-            protected Iterator<String> nextIterator(int count) {\n+            protected Iterator<String> nextIterator(final int count) {\n                 switch (count) {\n                 case 1:\n                     return list1.iterator();\n         notEmpty.add(\"C\");\n         final LazyIteratorChain<String> chain = new LazyIteratorChain<String>() {\n             @Override\n-            protected Iterator<String> nextIterator(int count) {\n+            protected Iterator<String> nextIterator(final int count) {\n                 switch (count) {\n                 case 1:\n                     return empty.iterator();\n--- a/src/test/java/org/apache/commons/collections/iterators/NodeListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/NodeListIteratorTest.java\n     @Override\n     public Iterator<Node> makeEmptyIterator() {\n         NodeList emptyNodeList = new NodeList() {\n-            public Node item(int index) {\n+            public Node item(final int index) {\n                 throw new IndexOutOfBoundsException();\n             }\n             public int getLength() {\n     @Override\n     public Iterator<Node> makeObject() {\n         NodeList nodeList = new NodeList() {\n-            public Node item(int index) {\n+            public Node item(final int index) {\n                 return nodes[index];\n             }\n             public int getLength() {", "timestamp": 1363626938, "metainfo": ""}