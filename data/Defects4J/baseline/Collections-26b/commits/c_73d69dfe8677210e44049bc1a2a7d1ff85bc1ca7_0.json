{"sha": "73d69dfe8677210e44049bc1a2a7d1ff85bc1ca7", "log": "[COLLECTIONS-566] Use natural ordering in IteratorUtils#collate when the provided comparator is null.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n                                                    final Iterator<? extends E> iterator1,\n                                                    final Iterator<? extends E> iterator2) {\n-        return new CollatingIterator<E>(comparator, iterator1, iterator2);\n+        @SuppressWarnings(\"unchecked\")\n+        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n+        return new CollatingIterator<E>(comp, iterator1, iterator2);\n     }\n \n     /**\n      */\n     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n                                                    final Iterator<? extends E>... iterators) {\n-        return new CollatingIterator<E>(comparator, iterators);\n+        @SuppressWarnings(\"unchecked\")\n+        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n+        return new CollatingIterator<E>(comp, iterators);\n     }\n \n     /**\n      * @throws ClassCastException if the iterators collection contains the wrong object type\n      */\n     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n-            final Collection<Iterator<? extends E>> iterators) {\n-        return new CollatingIterator<E>(comparator, iterators);\n+                                                   final Collection<Iterator<? extends E>> iterators) {\n+        @SuppressWarnings(\"unchecked\")\n+        final Comparator<E> comp = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n+        return new CollatingIterator<E>(comp, iterators);\n     }\n \n     // Object Graph\n--- a/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n      */\n     private List<Integer> collectionA = null;\n \n+    /**\n+     * Collection of even {@link Integer}s\n+     */\n+    private List<Integer> collectionEven = null;\n+\n+    /**\n+     * Collection of odd {@link Integer}s\n+     */\n+    private List<Integer> collectionOdd = null;\n+\n     private Iterable<Integer> iterableA = null;\n+\n+    private Collection<Integer> emptyCollection = new ArrayList<Integer>(1);\n \n     @Before\n     public void setUp() {\n         collectionA.add(4);\n \n         iterableA = collectionA;\n+\n+        collectionEven = Arrays.asList(2, 4, 6, 8, 10, 12);\n+        collectionOdd = Arrays.asList(1, 3, 5, 7, 9, 11);\n     }\n \n     @Test\n         };\n     }\n \n+    /**\n+     * Tests methods collatedIterator(...)\n+     */\n+    @Test\n+    public void testCollatedIterator() {\n+        try {\n+            IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+\n+        try {\n+            IteratorUtils.collatedIterator(null, null, collectionEven.iterator());\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+\n+        // natural ordering\n+        Iterator<Integer> it = \n+                IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionEven.iterator());\n+\n+        List<Integer> result = IteratorUtils.toList(it);\n+        assertEquals(12, result.size());\n+\n+        List<Integer> combinedList = new ArrayList<Integer>();\n+        combinedList.addAll(collectionOdd);\n+        combinedList.addAll(collectionEven);\n+        Collections.sort(combinedList);\n+\n+        assertEquals(combinedList, result);\n+\n+        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n+        result = IteratorUtils.toList(it);\n+        assertEquals(collectionOdd, result);\n+\n+        final Comparator<Integer> reverseComparator =\n+                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n+\n+        Collections.reverse((List<Integer>) collectionOdd);\n+        Collections.reverse((List<Integer>) collectionEven);\n+        Collections.reverse(combinedList);\n+\n+        it = IteratorUtils.collatedIterator(reverseComparator,\n+                                            collectionOdd.iterator(),\n+                                            collectionEven.iterator());\n+        result = IteratorUtils.toList(it);\n+        assertEquals(combinedList, result);\n+    }\n+\n     // -----------------------------------------------------------------------\n     @Test\n     public void apply() {", "timestamp": 1433450185, "metainfo": ""}