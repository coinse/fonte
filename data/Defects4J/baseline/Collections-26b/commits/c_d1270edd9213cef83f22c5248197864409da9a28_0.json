{"sha": "d1270edd9213cef83f22c5248197864409da9a28", "log": "Formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java\n      * manually added using the {@link #addIterator(Iterator)} method.\n      *\n      * @param comp the comparator to use to sort; must not be null,\n-     *   unless you'll be invoking {@link #setComparator(Comparator)}\n-     *   later on.\n+     *   unless you'll be invoking {@link #setComparator(Comparator)} later on.\n      */\n     public CollatingIterator(final Comparator<? super E> comp) {\n         this(comp, 2);\n      * {@link #addIterator(Iterator)} method.\n      *\n      * @param comp the comparator to use to sort; must not be null,\n-     *   unless you'll be invoking {@link #setComparator(Comparator)}\n-     *   later on.\n+     *   unless you'll be invoking {@link #setComparator(Comparator)} later on.\n      * @param initIterCapacity the initial capacity for the internal list of\n-     * child iterators\n+     *   child iterators\n      */\n     public CollatingIterator(final Comparator<? super E> comp, final int initIterCapacity) {\n         iterators = new ArrayList<Iterator<? extends E>>(initIterCapacity);\n      * iterators.\n      *\n      * @param comp the comparator to use to sort; must not be null,\n-     *   unless you'll be invoking {@link #setComparator(Comparator)}\n-     *   later on.\n+     *   unless you'll be invoking {@link #setComparator(Comparator)} later on.\n      * @param a the first child ordered iterator\n      * @param b the second child ordered iterator\n      * @throws NullPointerException if either iterator is null\n      * iterators.\n      *\n      * @param comp the comparator to use to sort; must not be null,\n-     *   unless you'll be invoking {@link #setComparator(Comparator)}\n-     *   later on.\n+     *   unless you'll be invoking {@link #setComparator(Comparator)} later on.\n      * @param iterators the array of iterators\n      * @throws NullPointerException if iterators array is or contains null\n      */\n      * iterators.\n      *\n      * @param comp the comparator to use to sort; must not be null,\n-     *   unless you'll be invoking {@link #setComparator(Comparator)}\n-     *   later on.\n+     *   unless you'll be invoking {@link #setComparator(Comparator)} later on.\n      * @param iterators the collection of iterators\n-     * @throws NullPointerException if the iterators collection is or contains\n-     * null\n+     * @throws NullPointerException if the iterators collection is or contains null\n      * @throws ClassCastException if the iterators collection contains an\n-     * element that's not an {@link Iterator}\n+     *   element that's not an {@link Iterator}\n      */\n     public CollatingIterator(final Comparator<? super E> comp, final Collection<Iterator<? extends E>> iterators) {\n         this(comp, iterators.size());\n     }\n \n     /**\n-     * Removes the last returned element from the child iterator that produced\n-     * it.\n+     * Removes the last returned element from the child iterator that produced it.\n      *\n      * @throws IllegalStateException if there is no last returned element, or if\n      * the last returned element has already been removed", "timestamp": 1433450283, "metainfo": ""}