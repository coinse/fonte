{"sha": "d7321ef14da783fa0fda9c0d25300a1a436b3bb1", "log": "Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n  * Predicate implementation that returns true if all the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if all predicates return true.\n+     * \n+     * @param object  the input object\n+     * @return true if all decorated predicates return true\n      */\n     public boolean evaluate(Object object) {\n         for (int i = 0; i < iPredicates.length; i++) {\n \n     /**\n      * Gets the predicates, do not modify the array.\n+     * \n      * @return the predicates\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/AndPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AndPredicate.java\n  * Predicate implementation that returns true if both the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if both predicates return true.\n+     * \n+     * @param object  the input object\n+     * @return true if both decorated predicates return true\n      */\n     public boolean evaluate(Object object) {\n        return (iPredicate1.evaluate(object) && iPredicate2.evaluate(object));\n \n     /**\n      * Gets the first predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n \n     /**\n      * Gets the second predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n  * Predicate implementation that returns true if any of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if any predicate returns true.\n+     * \n+     * @param object  the input object\n+     * @return true if any decorated predicate return true\n      */\n     public boolean evaluate(Object object) {\n         for (int i = 0; i < iPredicates.length; i++) {\n \n     /**\n      * Gets the predicates, do not modify the array.\n+     * \n      * @return the predicates\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n  * as the one stored in this predicate by equals.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if the input equals the stored value.\n+     * \n+     * @param object  the input object\n+     * @return true if input object equals stored value\n      */\n     public boolean evaluate(Object object) {\n         return (iValue.equals(object));\n \n     /**\n      * Gets the value.\n+     * \n      * @return the value\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n  * Predicate implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Always throw an exception\n+     * Evaluates the predicate always throwing an exception.\n+     * \n+     * @param object  the input object\n+     * @return never\n+     * @throws FunctorException always\n      */\n     public boolean evaluate(Object object) {\n         throw new FunctorException(\"ExceptionPredicate invoked\");\n--- a/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n  * Predicate implementation that always returns false.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Always return true.\n+     * Evaluates the predicate returning false always.\n+     * \n+     * @param object  the input object\n+     * @return false always\n      */\n     public boolean evaluate(Object object) {\n         return false;\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/IdentityPredicate.java\n  * as the one stored in this predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if the input object is identical to\n+     * the stored object.\n+     * \n+     * @param object  the input object\n+     * @return true if input is the same object as the stored value\n      */\n     public boolean evaluate(Object object) {\n         return (iValue == object);\n \n     /**\n      * Gets the value.\n+     * \n      * @return the value\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n  * the type stored in this predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if the input object is of the correct type.\n+     * \n+     * @param object  the input object\n+     * @return true if input is of stored type\n      */\n     public boolean evaluate(Object object) {\n         return (iType.isInstance(object));\n \n     /**\n      * Gets the type to compare to.\n+     * \n      * @return the type\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NonePredicate.java\n  * Predicate implementation that returns true if none of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning false if any stored predicate returns false.\n+     * \n+     * @param object  the input object\n+     * @return true if none of decorated predicates return true\n      */\n     public boolean evaluate(Object object) {\n         for (int i = 0; i < iPredicates.length; i++) {\n \n     /**\n      * Gets the predicates, do not modify the array.\n+     * \n      * @return the predicates\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/NotPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotPredicate.java\n  * Predicate implementation that returns the opposite of the decorated predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the negated predicate result.\n+     * Evaluates the predicate returning the opposite to the stored predicate.\n+     * \n+     * @param object  the input object\n+     * @return true if predicate returns false\n      */\n     public boolean evaluate(Object object) {\n         return !(iPredicate.evaluate(object));\n \n     /**\n      * Gets the predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n  * Predicate implementation that throws an exception if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return true if the object equals null else call the decorated predicate.\n+     * Evaluates the predicate returning the result of the decorated predicate\n+     * once a null check is performed.\n+     * \n+     * @param object  the input object\n+     * @return true if decorated predicate returns true\n+     * @throws FunctorException if input is null\n      */\n     public boolean evaluate(Object object) {\n         if (object == null) {\n \n     /**\n      * Gets the predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n  * Predicate implementation that returns false if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return false if the object equals null else call the decorated predicate.\n+     * Evaluates the predicate returning the result of the decorated predicate\n+     * once a null check is performed.\n+     * \n+     * @param object  the input object\n+     * @return true if decorated predicate returns true, false if input is null\n      */\n     public boolean evaluate(Object object) {\n         if (object == null) {\n \n     /**\n      * Gets the predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n  * Predicate implementation that returns true if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return true if the object equals null else call the decorated predicate.\n+     * Evaluates the predicate returning the result of the decorated predicate\n+     * once a null check is performed.\n+     * \n+     * @param object  the input object\n+     * @return true if decorated predicate returns true or input is null\n      */\n     public boolean evaluate(Object object) {\n         if (object == null) {\n \n     /**\n      * Gets the predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullPredicate.java\n  * Predicate implementation that returns true if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return true if the object equals null.\n+     * Evaluates the predicate returning true if the input is null.\n+     * \n+     * @param object  the input object\n+     * @return true if input is null\n      */\n     public boolean evaluate(Object object) {\n         return (object == null);\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OnePredicate.java\n  * Predicate implementation that returns true if only one of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if only one decorated predicate\n+     * returns true.\n+     * \n+     * @param object  the input object\n+     * @return true if only one decorated predicate returns true\n      */\n     public boolean evaluate(Object object) {\n         boolean match = false;\n \n     /**\n      * Gets the predicates, do not modify the array.\n+     * \n      * @return the predicates\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/OrPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OrPredicate.java\n  * Predicate implementation that returns true if either of the predicates return true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if either predicate returns true.\n+     * \n+     * @param object  the input object\n+     * @return true if either decorated predicate returns true\n      */\n     public boolean evaluate(Object object) {\n        return (iPredicate1.evaluate(object) || iPredicate2.evaluate(object));\n \n     /**\n      * Gets the first predicate.\n+     * \n      * @return the predicate\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/TransformedPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformedPredicate.java\n  * another <code>Predicate</code>.\n  * \n  * @since Commons Collections 3.1\n- * @version $Revision: 1.2 $ $Date: 2004/03/13 17:15:17 $\n+ * @version $Revision: 1.3 $ $Date: 2004/05/16 11:16:01 $\n  * @author Alban Peignier\n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor that performs no validation.\n      * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param transformer  the transformer to use\n+     * @param predicate  the predicate to decorate\n      */\n     public TransformedPredicate(Transformer transformer, Predicate predicate) {\n         iTransformer = transformer;\n     }\n     \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning the result of the decorated predicate\n+     * once the input has been transformed\n+     * \n+     * @param object  the input object which will be transformed\n+     * @return true if decorated predicate returns true\n      */\n     public boolean evaluate(Object object) {\n         Object result = iTransformer.transform(object);\n \n     /**\n      * Gets the predicate in use.\n+     * \n      * @return the predicate\n      */\n     public Predicate getPredicate() {\n \n     /**\n      * Gets the transformer in use.\n+     * \n      * @return the transformer\n      */\n     public Transformer getTransformer() {\n--- a/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n  * Predicate implementation that returns the result of a transformer.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/13 17:17:03 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     /**\n      * Factory to create the predicate.\n      * \n-     * @return the transformer\n+     * @param transformer  the transformer to decorate\n+     * @return the predicate\n      * @throws IllegalArgumentException if the transformer is null\n      */\n     public static Predicate getInstance(Transformer transformer) {\n     /**\n      * Constructor that performs no validation.\n      * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param transformer  the transformer to decorate\n      */\n     public TransformerPredicate(Transformer transformer) {\n         super();\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning the result of the decorated transformer.\n+     * \n+     * @param object  the input object\n+     * @return true if decorated transformer returns Boolean.TRUE\n+     * @throws FunctorException if the transformer returns an invalid type\n      */\n     public boolean evaluate(Object object) {\n         Object result = iTransformer.transform(object);\n \n     /**\n      * Gets the transformer.\n+     * \n      * @return the transformer\n      * @since Commons Collections 3.1\n      */\n--- a/src/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TruePredicate.java\n  * Predicate implementation that always returns true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/03/31 23:13:04 $\n+ * @version $Revision: 1.6 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Always return true.\n+     * Evaluates the predicate returning true always.\n+     * \n+     * @param object  the input object\n+     * @return true always\n      */\n     public boolean evaluate(Object object) {\n         return true;\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/collections/functors/UniquePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/UniquePredicate.java\n  * passed into the predicate.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/16 11:16:01 $\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Return the predicate result.\n+     * Evaluates the predicate returning true if the input object hasn't been\n+     * received yet.\n+     * \n+     * @param object  the input object\n+     * @return true if this is the first time the object is seen\n      */\n     public boolean evaluate(Object object) {\n         return iSet.add(object);\n     }\n-    \n+\n }", "timestamp": 1084706161, "metainfo": ""}