{"sha": "cc4a7e8a16c9303b525e30e8daa8b469e598c443", "log": "Add functors subpackage   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/java/org/apache/commons/collections/ClosureUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ClosureUtils.java,v 1.3 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ClosureUtils.java,v 1.4 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n+\n+import org.apache.commons.collections.functors.FunctorException;\n \n /**\n  * <code>ClosureUtils</code> provides reference implementations and utilities\n  * All the supplied closures are Serializable.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/23 14:41:27 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/java/org/apache/commons/collections/FactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.8 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.9 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n+import org.apache.commons.collections.functors.FunctorException;\n+\n /**\n  * <code>FactoryUtils</code> provides reference implementations and utilities\n  * for the Factory functor interface. The supplied factories are:\n  * All the supplied factories are Serializable.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/23 14:41:27 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/FunctorException.java\n+++ b/src/java/org/apache/commons/collections/FunctorException.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FunctorException.java,v 1.2 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FunctorException.java,v 1.3 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import java.io.PrintStream;\n-import java.io.PrintWriter;\n-\n /**\n  * Exception thrown from functors.\n  * If required, a root cause error can be wrapped within this one.\n  * \n+ * @deprecated TO BE DELETED BEFORE v3.0\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/23 14:41:27 $\n  *\n  * @author Stephen Colebourne\n  */\n-public class FunctorException extends RuntimeException {\n+public class FunctorException extends org.apache.commons.collections.functors.FunctorException {\n     \n-    /**\n-     * Does JDK support nested exceptions\n-     */\n-    private static final boolean JDK_SUPPORTS_NESTED;\n-    \n-    static {\n-        boolean flag = false;\n-        try {\n-            Throwable.class.getDeclaredMethod(\"getCause\", new Class[0]);\n-            flag = true;\n-        } catch (NoSuchMethodException ex) {\n-            flag = false;\n-        }\n-        JDK_SUPPORTS_NESTED = flag;\n-    }\n-    \n-    /**\n-     * Root cause of the exception\n-     */\n-    private final Throwable iThrowable;\n-\n-    /**\n-     * Constructs a new <code>FunctorException</code> without specified\n-     * detail message.\n-     */\n     public FunctorException() {\n         super();\n-        iThrowable = null;\n     }\n \n-    /**\n-     * Constructs a new <code>FunctorException</code> with specified\n-     * detail message.\n-     *\n-     * @param msg  the error message.\n-     */\n     public FunctorException(String msg) {\n         super(msg);\n-        iThrowable = null;\n     }\n \n-    /**\n-     * Constructs a new <code>FunctorException</code> with specified\n-     * nested <code>Throwable</code> root cause.\n-     *\n-     * @param rootCause  the exception or error that caused this exception\n-     *                   to be thrown.\n-     */\n     public FunctorException(Throwable rootCause) {\n-        super((rootCause == null ? null : rootCause.getMessage()));\n-        iThrowable = rootCause;\n+        super(rootCause);\n     }\n \n-    /**\n-     * Constructs a new <code>FunctorException</code> with specified\n-     * detail message and nested <code>Throwable</code> root cause.\n-     *\n-     * @param msg        the error message.\n-     * @param rootCause  the exception or error that caused this exception\n-     *                   to be thrown.\n-     */\n     public FunctorException(String msg, Throwable rootCause) {\n-        super(msg);\n-        iThrowable = rootCause;\n-    }\n-\n-    /**\n-     * Gets the cause of this throwable.\n-     * \n-     * @return  the cause of this throwable, or <code>null</code>\n-     */\n-    public Throwable getCause() {\n-        return iThrowable;\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the standard error stream.\n-     */\n-    public void printStackTrace() {\n-        printStackTrace(System.err);\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the specified stream.\n-     *\n-     * @param out  the <code>PrintStream</code> to use for output\n-     */\n-    public void printStackTrace(PrintStream out) {\n-        synchronized (out) {\n-            PrintWriter pw = new PrintWriter(out, false);\n-            printStackTrace(pw);\n-            // Flush the PrintWriter before it's GC'ed.\n-            pw.flush();\n-        }\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the specified writer.\n-     *\n-     * @param out  the <code>PrintWriter</code> to use for output\n-     */\n-    public void printStackTrace(PrintWriter out) {\n-        synchronized (out) {\n-            super.printStackTrace(out);\n-            if (iThrowable != null && JDK_SUPPORTS_NESTED == false) {\n-                out.print(\"Caused by: \");\n-                iThrowable.printStackTrace(out);\n-            }\n-        }\n+        super(msg, rootCause);\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.10 2003/10/29 23:21:39 ggregory Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.11 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n+\n+import org.apache.commons.collections.functors.FunctorException;\n \n /**\n  * <code>PredicateUtils</code> provides reference implementations and utilities\n  * All the supplied predicates are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.10 $ $Date: 2003/10/29 23:21:39 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/23 14:41:27 $\n  * \n  * @author Stephen Colebourne\n  * @author Ola Berg\n--- a/src/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/java/org/apache/commons/collections/TransformerUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.5 2003/10/09 20:58:52 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.6 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n+\n+import org.apache.commons.collections.functors.FunctorException;\n \n /**\n  * <code>TransformerUtils</code> provides reference implementations and \n  * All the supplied transformers are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/10/09 20:58:52 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/23 14:41:27 $\n  * \n  * @author Stephen Colebourne\n  * @author James Carman\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/FunctorException.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/Attic/FunctorException.java,v 1.1 2003/11/23 14:41:27 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+/**\n+ * Exception thrown from functors.\n+ * If required, a root cause error can be wrapped within this one.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 14:41:27 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class FunctorException extends RuntimeException {\n+    \n+    /**\n+     * Does JDK support nested exceptions\n+     */\n+    private static final boolean JDK_SUPPORTS_NESTED;\n+    \n+    static {\n+        boolean flag = false;\n+        try {\n+            Throwable.class.getDeclaredMethod(\"getCause\", new Class[0]);\n+            flag = true;\n+        } catch (NoSuchMethodException ex) {\n+            flag = false;\n+        }\n+        JDK_SUPPORTS_NESTED = flag;\n+    }\n+    \n+    /**\n+     * Root cause of the exception\n+     */\n+    private final Throwable iThrowable;\n+\n+    /**\n+     * Constructs a new <code>FunctorException</code> without specified\n+     * detail message.\n+     */\n+    public FunctorException() {\n+        super();\n+        iThrowable = null;\n+    }\n+\n+    /**\n+     * Constructs a new <code>FunctorException</code> with specified\n+     * detail message.\n+     *\n+     * @param msg  the error message.\n+     */\n+    public FunctorException(String msg) {\n+        super(msg);\n+        iThrowable = null;\n+    }\n+\n+    /**\n+     * Constructs a new <code>FunctorException</code> with specified\n+     * nested <code>Throwable</code> root cause.\n+     *\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n+    public FunctorException(Throwable rootCause) {\n+        super((rootCause == null ? null : rootCause.getMessage()));\n+        iThrowable = rootCause;\n+    }\n+\n+    /**\n+     * Constructs a new <code>FunctorException</code> with specified\n+     * detail message and nested <code>Throwable</code> root cause.\n+     *\n+     * @param msg        the error message.\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n+    public FunctorException(String msg, Throwable rootCause) {\n+        super(msg);\n+        iThrowable = rootCause;\n+    }\n+\n+    /**\n+     * Gets the cause of this throwable.\n+     * \n+     * @return  the cause of this throwable, or <code>null</code>\n+     */\n+    public Throwable getCause() {\n+        return iThrowable;\n+    }\n+\n+    /**\n+     * Prints the stack trace of this exception to the standard error stream.\n+     */\n+    public void printStackTrace() {\n+        printStackTrace(System.err);\n+    }\n+\n+    /**\n+     * Prints the stack trace of this exception to the specified stream.\n+     *\n+     * @param out  the <code>PrintStream</code> to use for output\n+     */\n+    public void printStackTrace(PrintStream out) {\n+        synchronized (out) {\n+            PrintWriter pw = new PrintWriter(out, false);\n+            printStackTrace(pw);\n+            // Flush the PrintWriter before it's GC'ed.\n+            pw.flush();\n+        }\n+    }\n+\n+    /**\n+     * Prints the stack trace of this exception to the specified writer.\n+     *\n+     * @param out  the <code>PrintWriter</code> to use for output\n+     */\n+    public void printStackTrace(PrintWriter out) {\n+        synchronized (out) {\n+            super.printStackTrace(out);\n+            if (iThrowable != null && JDK_SUPPORTS_NESTED == false) {\n+                out.print(\"Caused by: \");\n+                iThrowable.printStackTrace(out);\n+            }\n+        }\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestClosureUtils.java,v 1.3 2003/10/05 21:11:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestClosureUtils.java,v 1.4 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.functors.FunctorException;\n+\n /**\n  * Tests the org.apache.commons.collections.ClosureUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/05 21:11:06 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/23 14:41:27 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.31 2003/11/16 22:15:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.32 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.collection.SynchronizedCollection;\n import org.apache.commons.collections.collection.TransformedCollection;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.functors.FunctorException;\n \n /**\n  * Tests for CollectionUtils.\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.31 $ $Date: 2003/11/16 22:15:09 $\n+ * @version $Revision: 1.32 $ $Date: 2003/11/23 14:41:27 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n--- a/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.5 2003/10/05 21:11:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.6 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Date;\n import java.util.TimeZone;\n \n+import org.apache.commons.collections.functors.FunctorException;\n+\n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n  * Tests the org.apache.commons.collections.FactoryUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/10/05 21:11:06 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/23 14:41:27 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestPredicateUtils.java,v 1.3 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestPredicateUtils.java,v 1.4 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.commons.collections.functors.FunctorException;\n+\n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n  * Tests the org.apache.commons.collections.PredicateUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/23 14:41:27 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestTransformerUtils.java\n+++ b/src/test/org/apache/commons/collections/TestTransformerUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTransformerUtils.java,v 1.4 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTransformerUtils.java,v 1.5 2003/11/23 14:41:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.functors.FunctorException;\n+\n /**\n  * Tests the org.apache.commons.collections.TransformerUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/23 14:41:27 $\n  *\n  * @author Stephen Colebourne\n  * @author James Carman", "timestamp": 1069598487, "metainfo": ""}