{"sha": "8ee4f391d044ff3569e5c43990d071c25cf01f87", "log": "Javadoc fixes  ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/FilterIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/FilterIterator.java\n /*\n- *  Copyright 1999-2004 The Apache Software Foundation\n+ *  Copyright 1999-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n      * Returns true if the underlying iterator contains an object that \n      * matches the predicate.\n      *\n-     * @return true if there is another object that matches the predicate \n+     * @return true if there is another object that matches the predicate\n+     * @throws NullPointerException if either the iterator or predicate are null\n      */\n     public boolean hasNext() {\n         if (nextObjectSet) {\n \n     /** \n      * Returns the next object that matches the predicate.\n-     * \n+     *\n      * @return the next object which matches the given predicate\n+     * @throws NullPointerException if either the iterator or predicate are null\n      * @throws NoSuchElementException if there are no more elements that\n      *  match the predicate \n      */\n      * if <code>next()</code> was called, but not after\n      * <code>hasNext()</code>, because the <code>hasNext()</code> call\n      * changes the base iterator.\n-     * \n+     *\n      * @throws IllegalStateException if <code>hasNext()</code> has already\n      *  been called.\n      */\n     //-----------------------------------------------------------------------\n     /** \n      * Gets the iterator this iterator is using.\n-     * \n-     * @return the iterator.\n+     *\n+     * @return the iterator\n      */\n     public Iterator getIterator() {\n         return iterator;\n     /** \n      * Sets the iterator for this iterator to use.\n      * If iteration has started, this effectively resets the iterator.\n-     * \n+     *\n      * @param iterator  the iterator to use\n      */\n     public void setIterator(Iterator iterator) {\n     //-----------------------------------------------------------------------\n     /** \n      * Gets the predicate this iterator is using.\n-     * \n-     * @return the predicate.\n+     *\n+     * @return the predicate\n      */\n     public Predicate getPredicate() {\n         return predicate;\n \n     /** \n      * Sets the predicate this the iterator to use.\n-     * \n-     * @param predicate  the transformer to use\n+     *\n+     * @param predicate  the predicate to use\n      */\n     public void setPredicate(Predicate predicate) {\n         this.predicate = predicate;\n         }\n         return false;\n     }\n+\n }", "timestamp": 1136584610, "metainfo": ""}