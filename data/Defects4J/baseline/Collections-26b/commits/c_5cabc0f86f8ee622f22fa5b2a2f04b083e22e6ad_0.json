{"sha": "5cabc0f86f8ee622f22fa5b2a2f04b083e22e6ad", "log": "Add missing @Override markers  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n          *\n          * @return True if the object has more tokens.\n          */\n+        @Override\n         public boolean hasMoreTokens() {\n             return super.hasMoreTokens();\n         }\n          *\n          * @return A String.\n          */\n+        @Override\n         public String nextToken() {\n             StringBuilder buffer = new StringBuilder();\n \n      * @param value for the property\n      * @return old value of the property\n      */\n+    @Override\n     public Object put(Object key, Object value) {\n         String strKey = String.valueOf(key);\n         Object ret = getProperty(strKey);\n      *\n      * @param map full of key/value pair data\n      */\n+    @Override\n     public void putAll(Map map) {\n         if (map instanceof ExtendedProperties) {\n             for (Iterator it = ((ExtendedProperties) map).getKeys(); it.hasNext(); ) {\n      * @param key specifying the property\n      * @return old value of the property\n      */\n+    @Override\n     public Object remove(Object key) {\n         String strKey = String.valueOf(key);\n         Object ret = getProperty(strKey);\n--- a/src/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n      * \n      * @return the decorated bag\n      */\n+    @Override\n     protected Bag<E> decorated() {\n         return (Bag<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n             this.value = value;\n         }\n \n+        @Override\n         public boolean equals(Object obj) {\n             if (obj instanceof MutableInteger == false) {\n                 return false;\n             return ((MutableInteger) obj).value == value;\n         }\n \n+        @Override\n         public int hashCode() {\n             return value;\n         }\n      * @param object the Bag to compare to\n      * @return true if equal\n      */\n+    @Override\n     public boolean equals(Object object) {\n         if (object == this) {\n             return true;\n      * \n      * @return the hash code of the Bag\n      */\n+    @Override\n     public int hashCode() {\n         int total = 0;\n         for (Iterator<Map.Entry<E, MutableInteger>> it = map.entrySet().iterator(); it.hasNext();) {\n      * \n      * @return a debugging toString\n      */\n+    @Override\n     public String toString() {\n         if (size() == 0) {\n             return \"[]\";\n--- a/src/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n      * \n      * @return the decorated bag\n      */\n+    @Override\n     protected SortedBag<E> decorated() {\n         return (SortedBag<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/bag/PredicatedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedBag.java\n      * \n      * @return the decorated bag\n      */\n+    @Override\n     protected Bag<E> decorated() {\n         return (Bag<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n      * \n      * @return the decorated bag\n      */\n+    @Override\n     protected SortedBag<E> decorated() {\n         return (SortedBag<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TreeBag.java\n \n     //-----------------------------------------------------------------------\n     // TODO: Generics - should this be E<? extends Comparable> or some such?\n+    @Override\n     public boolean add(E object) {\n         if(comparator() == null && !(object instanceof Comparable)) {\n             throw new IllegalArgumentException(\"Objects of type \" + object.getClass() + \" cannot be added to \" + \n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.<E>decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public boolean add(E object, int count) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object, int count) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public Set<E> uniqueSet() {\n         Set<E> set = decorated().uniqueSet();\n         return UnmodifiableSet.<E>decorate(set);\n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public boolean add(E object, int count) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object, int count) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public Set<E> uniqueSet() {\n         Set<E> set = decorated().uniqueSet();\n         return UnmodifiableSet.decorate(set);\n--- a/src/java/org/apache/commons/collections/bidimap/AbstractBidiMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/bidimap/AbstractBidiMapDecorator.java\n      * \n      * @return the decorated map\n      */\n+    @Override\n     protected BidiMap<K, V> decorated() {\n         return (BidiMap<K, V>) super.decorated();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public MapIterator<K, V> mapIterator() {\n         return decorated().mapIterator();\n     }\n--- a/src/java/org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator.java\n      * \n      * @return the decorated map\n      */\n+    @Override\n     protected SortedBidiMap<K, V> decorated() {\n         return (SortedBidiMap<K, V>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n      * @param inverseMap  the inverse BidiMap\n      * @return new bidi map\n      */\n+    @Override\n     protected DualTreeBidiMap<V, K> createBidiMap(Map<V, K> normalMap, Map<K, V> reverseMap, BidiMap<K, V> inverseMap) {\n         return new DualTreeBidiMap<V, K>(normalMap, reverseMap, inverseMap);\n     }\n      *\n      * @return a new ordered map iterator\n      */\n+    @Override\n     public OrderedMapIterator<K, V> mapIterator() {\n         return new BidiOrderedMapIterator<K, V>(this);\n     }\n             this.bidi = (DualTreeBidiMap<K, V>) decorated();\n         }\n \n+        @Override\n         public boolean containsValue(Object value) {\n             // override as default implementation uses reverseMap\n             return decorated().normalMap.containsValue(value);\n         }\n \n+        @Override\n         public void clear() {\n             // override as default implementation uses reverseMap\n             for (Iterator<K> it = keySet().iterator(); it.hasNext();) {\n             }\n         }\n \n+        @Override\n         public SortedMap<K, V> headMap(K toKey) {\n             return new ViewMap<K, V>(decorated(), super.headMap(toKey));\n         }\n \n+        @Override\n         public SortedMap<K, V> tailMap(K fromKey) {\n             return new ViewMap<K, V>(decorated(), super.tailMap(fromKey));\n         }\n \n+        @Override\n         public SortedMap<K, V> subMap(K fromKey, K toKey) {\n             return new ViewMap<K, V>(decorated(), super.subMap(fromKey, toKey));\n         }\n             return (DualTreeBidiMap<K, V>) super.decorated();\n         }\n \n+        @Override\n         public K previousKey(K key) {\n             return decorated().previousKey(key);\n         };\n \n+        @Override\n         public K nextKey(K key) {\n             return decorated().nextKey(key);\n         };\n             last = null;\n         }\n \n+        @Override\n         public String toString() {\n             if (last != null) {\n                 return \"MapIterator[\" + getKey() + \"=\" + getValue() + \"]\";\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n      * @param obj  the object to compare to\n      * @return true if equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         return this.doEquals(obj, KEY);\n     }\n      *\n      * @return the hash code value for this map\n      */\n+    @Override\n     public int hashCode() {\n         return this.doHashCode(KEY);\n     }\n      *\n      * @return a standard format string version of the map\n      */\n+    @Override\n     public String toString() {\n         return this.doToString(KEY);\n     }\n             this.orderType = orderType;\n         }\n \n+        @Override\n         public int size() {\n             return TreeBidiMap.this.size();\n         }\n \n+        @Override\n         public void clear() {\n             TreeBidiMap.this.clear();\n         }\n             super(KEY);\n         }\n \n+        @Override\n         public boolean contains(Object obj) {\n             if (obj instanceof Map.Entry == false) {\n                 return false;\n             return node != null && node.getValue().equals(value);\n         }\n \n+        @Override\n         public boolean remove(Object obj) {\n             if (obj instanceof Map.Entry == false) {\n                 return false;\n             super(VALUE);\n         }\n \n+        @Override\n         public boolean contains(Object obj) {\n             if (obj instanceof Map.Entry == false) {\n                 return false;\n             return node != null && node.getKey().equals(value);\n         }\n \n+        @Override\n         public boolean remove(Object obj) {\n             if (obj instanceof Map.Entry == false) {\n                 return false;\n          * @param obj  the object to be compared for equality with this entry.\n          * @return true if the specified object is equal to this entry.\n          */\n+        @Override\n         public boolean equals(final Object obj) {\n             if (obj == this) {\n                 return true;\n         /**\n          * @return the hash code value for this map entry.\n          */\n+        @Override\n         public int hashCode() {\n             if (!calculatedHashCode) {\n                 hashcodeValue = getKey().hashCode() ^ getValue().hashCode();\n             return TreeBidiMap.this;\n         }\n \n+        @Override\n         public boolean equals(Object obj) {\n             return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);\n         }\n \n+        @Override\n         public int hashCode() {\n             return TreeBidiMap.this.doHashCode(DataElement.VALUE);\n         }\n \n+        @Override\n         public String toString() {\n             return TreeBidiMap.this.doToString(DataElement.VALUE);\n         }\n--- a/src/java/org/apache/commons/collections/bidimap/UnmodifiableBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/UnmodifiableBidiMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V put(K key, V value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         Set<Map.Entry<K, V>> set = super.entrySet();\n         return UnmodifiableEntrySet.decorate(set);\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         Set<K> set = super.keySet();\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public Collection<V> values() {\n         Collection<V> coll = super.values();\n         return UnmodifiableCollection.decorate(coll);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public K removeValue(Object value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public MapIterator<K, V> mapIterator() {\n         MapIterator<K, V> it = decorated().mapIterator();\n         return UnmodifiableMapIterator.decorate(it);\n     }\n \n+    @Override\n     public synchronized BidiMap<V, K> inverseBidiMap() {\n         if (inverse == null) {\n             inverse = new UnmodifiableBidiMap<V, K>(decorated().inverseBidiMap());\n--- a/src/java/org/apache/commons/collections/bidimap/UnmodifiableOrderedBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/UnmodifiableOrderedBidiMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V put(K key, V value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         Set<Map.Entry<K, V>> set = super.entrySet();\n         return UnmodifiableEntrySet.decorate(set);\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         Set<K> set = super.keySet();\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public Collection<V> values() {\n         Collection<V> coll = super.values();\n         return UnmodifiableCollection.decorate(coll);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public K removeValue(Object value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public OrderedBidiMap<V, K> inverseBidiMap() {\n         return inverseOrderedBidiMap();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public OrderedMapIterator<K, V> mapIterator() {\n         OrderedMapIterator<K, V> it = decorated().mapIterator();\n         return UnmodifiableOrderedMapIterator.decorate(it);\n--- a/src/java/org/apache/commons/collections/bidimap/UnmodifiableSortedBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/UnmodifiableSortedBidiMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V put(K key, V value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         Set<Map.Entry<K, V>> set = super.entrySet();\n         return UnmodifiableEntrySet.decorate(set);\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         Set<K> set = super.keySet();\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public Collection<V> values() {\n         Collection<V> coll = super.values();\n         return UnmodifiableCollection.decorate(coll);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public K removeValue(Object value) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public OrderedMapIterator<K, V> mapIterator() {\n         OrderedMapIterator<K, V> it = decorated().mapIterator();\n         return UnmodifiableOrderedMapIterator.decorate(it);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public SortedBidiMap<V, K> inverseBidiMap() {\n         if (inverse == null) {\n             inverse = new UnmodifiableSortedBidiMap<V, K>(decorated().inverseBidiMap());\n         return inverse;\n     }\n \n+    @Override\n     public SortedMap<K, V> subMap(K fromKey, K toKey) {\n         SortedMap<K, V> sm = decorated().subMap(fromKey, toKey);\n         return UnmodifiableSortedMap.decorate(sm);\n     }\n \n+    @Override\n     public SortedMap<K, V> headMap(K toKey) {\n         SortedMap<K, V> sm = decorated().headMap(toKey);\n         return UnmodifiableSortedMap.decorate(sm);\n     }\n \n+    @Override\n     public SortedMap<K, V> tailMap(K fromKey) {\n         SortedMap<K, V> sm = decorated().tailMap(fromKey);\n         return UnmodifiableSortedMap.decorate(sm);\n--- a/src/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n+++ b/src/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n      * \n      * @return the decorated buffer\n      */\n+    @Override\n     protected Buffer<E> decorated() {\n         return (Buffer<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public boolean add(E o) {\n         synchronized (lock) {\n             boolean result = collection.add(o);\n         }\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> c) {\n         synchronized (lock) {\n             boolean result = collection.addAll(c);\n      *\n      * @throws BufferUnderflowException if an interrupt is received\n      */\n+    @Override\n     public E get() {\n         synchronized (lock) {\n             while (collection.isEmpty()) {\n      *\n      * @throws BufferUnderflowException if an interrupt is received\n      */\n+    @Override\n     public E remove() {\n         synchronized (lock) {\n             while (collection.isEmpty()) {\n--- a/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public E remove() {\n         synchronized (lock) {\n             E returnValue = decorated().remove();\n         }\n     }\n \n+    @Override\n     public boolean add(E o) {\n         synchronized (lock) {\n             timeoutWait(1);\n         }\n     }\n \n+    @Override\n     public boolean addAll(final Collection<? extends E> c) {\n         synchronized (lock) {\n             timeoutWait(c.size());\n         }\n     }\n \n+    @Override\n     public Iterator<E> iterator() {\n         return new NotifyingIterator(collection.iterator());\n     }\n             super(it);\n         }\n \n+        @Override\n         public void remove() {\n             synchronized (lock) {\n                 iterator.remove();\n--- a/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n      *\n      * @return this buffer's size\n      */\n+    @Override\n     public int size() {\n         int size = 0;\n \n      *\n      * @return true if this buffer is empty\n      */\n+    @Override\n     public boolean isEmpty() {\n         return size() == 0;\n     }\n     /**\n      * Clears this buffer.\n      */\n+    @Override\n     public void clear() {\n         full = false;\n         start = 0;\n      * @throws NullPointerException  if the given element is null\n      * @throws BufferOverflowException  if this buffer is full\n      */\n+    @Override\n     public boolean add(E element) {\n         if (null == element) {\n             throw new NullPointerException(\"Attempted to add null object to buffer\");\n      *\n      * @return an iterator over this buffer's elements\n      */\n+    @Override\n     public Iterator<E> iterator() {\n         return new Iterator<E>() {\n \n--- a/src/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n      * @param element the element to add\n      * @return true, always\n      */\n+    @Override\n     public boolean add(E element) {\n         if (isFull()) {\n             remove();\n--- a/src/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n      * \n      * @return the decorated buffer\n      */\n+    @Override\n     protected Buffer<E> decorated() {\n         return (Buffer<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n      *\n      * @return the number of elements in this buffer\n      */\n+    @Override\n     public int size() {\n         return size;\n     }\n     /**\n      * Clears all elements from the buffer.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void clear() {\n         elements = (E[]) new Object[elements.length]; // for gc\n      * @param element  the element to be added\n      * @return true always\n      */\n+    @Override\n     public boolean add(E element) {\n         if (isAtCapacity()) {\n             grow();\n      *\n      * @return an iterator over this heap's elements\n      */\n+    @Override\n     public Iterator<E> iterator() {\n         return new Iterator<E>() {\n \n      *\n      * @return a string representation of this heap\n      */\n+    @Override\n     public String toString() {\n         final StringBuilder sb = new StringBuilder();\n \n--- a/src/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n      * \n      * @return the decorated buffer\n      */\n+    @Override\n     protected Buffer<E> decorated() {\n         return (Buffer<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n      *\n      * @return this buffer's size\n      */\n+    @Override\n     public int size() {\n         int size = 0;\n \n      *\n      * @return true if this buffer is empty\n      */\n+    @Override\n     public boolean isEmpty() {\n         return (size() == 0);\n     }\n      * @return true, always\n      * @throws NullPointerException  if the given element is null\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean add(final E obj) {\n         if (obj == null) {\n      *\n      * @return an iterator over this buffer's elements\n      */\n+    @Override\n     public Iterator<E> iterator() {\n         return new Iterator<E>() {\n \n--- a/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public E remove() {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java\n+++ b/src/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java\n         return decorated().retainAll(coll);\n     }\n \n+    @Override\n     public boolean equals(Object object) {\n         return object == this || decorated().equals(object);\n     }\n \n+    @Override\n     public int hashCode() {\n         return decorated().hashCode();\n     }\n \n+    @Override\n     public String toString() {\n         return decorated().toString();\n     }\n--- a/src/java/org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator.java\n+++ b/src/java/org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator.java\n         return decorated().retainAll(coll);\n     }\n \n+    @Override\n     public boolean equals(Object object) {\n         return object == this || decorated().equals(object);\n     }\n \n+    @Override\n     public int hashCode() {\n         return decorated().hashCode();\n     }\n \n+    @Override\n     public String toString() {\n         return decorated().toString();\n     }\n--- a/src/java/org/apache/commons/collections/collection/PredicatedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/PredicatedCollection.java\n      * @return the result of adding to the underlying collection\n      * @throws IllegalArgumentException if the add is invalid\n      */\n+    @Override\n     public boolean add(E object) {\n         validate(object);\n         return decorated().add(object);\n      * @return the result of adding to the underlying collection\n      * @throws IllegalArgumentException if the add is invalid\n      */\n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         for (E item : coll) {\n             validate(item);\n--- a/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n         }\n     }\n \n+    @Override\n     public boolean equals(Object object) {\n         synchronized (lock) {\n             if (object == this) {\n         }\n     }\n \n+    @Override\n     public int hashCode() {\n         synchronized (lock) {\n             return decorated().hashCode();\n         }\n     }\n \n+    @Override\n     public String toString() {\n         synchronized (lock) {\n             return decorated().toString();\n--- a/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public boolean add(E object) {\n         return decorated().add(transform(object));\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         return decorated().addAll(transform(coll));\n     }\n--- a/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n      *\n      * @return a hash code for this comparator.\n      */\n+    @Override\n     public int hashCode() {\n         int hash = \"BooleanComparator\".hashCode();\n         return trueFirst ? -1 * hash : hash;\n      * @param object  the object to compare to\n      * @return true if equal\n      */\n+    @Override\n     public boolean equals(Object object) {\n         return (this == object) || \n                ((object instanceof BooleanComparator) && \n--- a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n      * @return a hash code for this comparator.\n      * @since Commons Collections 3.0\n      */\n+    @Override\n     public int hashCode() {\n         return \"ComparableComparator\".hashCode();\n     }\n      * @return true if equal\n      * @since Commons Collections 3.0\n      */\n+    @Override\n     public boolean equals(Object object) {\n         return (this == object) || \n                ((null != object) && (object.getClass().equals(this.getClass())));\n--- a/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n      * @return a suitable hash code\n      * @since Commons Collections 3.0\n      */\n+    @Override\n     public int hashCode() {\n         int hash = 0;\n         if (null != comparatorChain) {\n      * @return true if equal\n      * @since Commons Collections 3.0\n      */\n+    @Override\n     public boolean equals(Object object) {\n         if (this == object) {\n             return true;\n--- a/src/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/NullComparator.java\n      *\n      *  @return a hash code for this comparator.\n      **/\n+    @Override\n     public int hashCode() {\n         return (nullsAreHigh ? -1 : 1) * nonNullComparator.hashCode();\n     }\n      *  (i.e. <code>null</code> high or low) and with equivalent underlying\n      *  non-<code>null</code> object comparators.\n      **/\n+    @Override\n     public boolean equals(Object obj) {\n         if(obj == null) { return false; }\n         if(obj == this) { return true; }\n--- a/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n      * @return a suitable hash code\n      * @since Commons Collections 3.0\n      */\n+    @Override\n     public int hashCode() {\n         return \"ReverseComparator\".hashCode() ^ comparator.hashCode();\n     }\n      * @return true if equal\n      * @since Commons Collections 3.0\n      */\n+    @Override\n     public boolean equals(Object object) {\n         if (this == object) {\n             return true;\n--- a/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n      * @return the next element\n      * @throws NoSuchElementException if there is no next element\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E next() {\n         if (hasNext() == false) {\n     /**\n      * Resets the iterator back to the start index.\n      */\n+    @Override\n     public void reset() {\n         super.reset();\n         this.lastItemIndex = -1;\n--- a/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n      * \n      * @return a string version of the iterator\n      */    \n+    @Override\n     public String toString() {\n         if (last != null) {\n             return \"MapIterator[\" + getKey() + \"=\" + getValue() + \"]\";\n--- a/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n      * @return the next element\n      * @throws NoSuchElementException if there is no next element\n      */\n+    @Override\n     public E next() {\n         if (hasNext() == false) {\n             throw new NoSuchElementException();\n     /**\n      * Resets the iterator back to the start index.\n      */\n+    @Override\n     public void reset() {\n         super.reset();\n         this.lastItemIndex = -1;\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n      * \n      * @return a String view of the entry\n      */\n+    @Override\n     public String toString() {\n         return new StringBuilder()\n             .append(getKey())\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n      * @param obj  the object to compare to\n      * @return true if equal key and value\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n      * \n      * @return a suitable hash code\n      */\n+    @Override\n     public int hashCode() {\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n                (getValue() == null ? 0 : getValue().hashCode()); \n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n         return entry.setValue(object);\n     }\n    \n+    @Override\n     public boolean equals(Object object) {\n         if (object == this) {\n             return true;\n         return entry.equals(object);\n     }\n \n+    @Override\n     public int hashCode() {\n         return entry.hashCode();\n     }\n \n+    @Override\n     public String toString() {\n         return entry.toString();\n     }\n--- a/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n      * @param obj  the object to compare to\n      * @return true if equal key and value\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(final Object obj) {\n         if (obj == this) {\n      * \n      * @return a suitable hash code\n      */\n+    @Override\n     public int hashCode() {\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n                (getValue() == null ? 0 : getValue().hashCode());\n--- a/src/java/org/apache/commons/collections/keyvalue/MultiKey.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/MultiKey.java\n      * @param other  the other object to compare to\n      * @return true if equal\n      */\n+    @Override\n     public boolean equals(Object other) {\n         if (other == this) {\n             return true;\n      * \n      * @return the hash code\n      */\n+    @Override\n     public int hashCode() {\n         return hashCode;\n     }\n      * \n      * @return a debugging string\n      */\n+    @Override\n     public String toString() {\n         return \"MultiKey\" + Arrays.asList(keys).toString();\n     }\n--- a/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n      * @param obj  the object to compare to\n      * @return true if equal key and value\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n      * \n      * @return a suitable hash code\n      */\n+    @Override\n     public int hashCode() {\n         Object value = getValue();\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n      * \n      * @return entry as a string\n      */\n+    @Override\n     public String toString() {\n         return getKey() + \"=\" + getValue();\n     }\n--- a/src/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n      * @return the previous value\n      * @throws UnsupportedOperationException always\n      */\n+    @Override\n     public V setValue(V value) {\n         throw new UnsupportedOperationException(\"setValue() is not supported\");\n     }\n--- a/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n         return !(it1.hasNext() || it2.hasNext());\n     }\n \n+    @Override\n     public int hashCode() {\n         int hashCode = 1;\n         for (E e : this) {\n         return hashCode;\n     }\n \n+    @Override\n     public String toString() {\n         if (size() == 0) {\n             return \"[]\";\n             this.sub = sub;\n         }\n \n+        @Override\n         public boolean hasNext() {\n             return (nextIndex() < sub.size);\n         }\n \n+        @Override\n         public boolean hasPrevious() {\n             return (previousIndex() >= 0);\n         }\n \n+        @Override\n         public int nextIndex() {\n             return (super.nextIndex() - sub.offset);\n         }\n \n+        @Override\n         public void add(E obj) {\n             super.add(obj);\n             sub.expectedModCount = parent.modCount;\n             sub.size++;\n         }\n \n+        @Override\n         public void remove() {\n             super.remove();\n             sub.expectedModCount = parent.modCount;\n             this.expectedModCount = parent.modCount;\n         }\n \n+        @Override\n         public int size() {\n             checkModCount();\n             return size;\n         }\n \n+        @Override\n         public E get(int index) {\n             rangeCheck(index, size);\n             checkModCount();\n             return parent.get(index + offset);\n         }\n \n+        @Override\n         public void add(int index, E obj) {\n             rangeCheck(index, size + 1);\n             checkModCount();\n             LinkedSubList.this.modCount++;\n         }\n \n+        @Override\n         public E remove(int index) {\n             rangeCheck(index, size);\n             checkModCount();\n             return result;\n         }\n \n+        @Override\n         public boolean addAll(Collection<? extends E> coll) {\n             return addAll(size, coll);\n         }\n \n+        @Override\n         public boolean addAll(int index, Collection<? extends E> coll) {\n             rangeCheck(index, size + 1);\n             int cSize = coll.size();\n             return true;\n         }\n \n+        @Override\n         public E set(int index, E obj) {\n             rangeCheck(index, size);\n             checkModCount();\n             return parent.set(index + offset, obj);\n         }\n \n+        @Override\n         public void clear() {\n             checkModCount();\n             Iterator<E> it = iterator();\n             }\n         }\n \n+        @Override\n         public Iterator<E> iterator() {\n             checkModCount();\n             return parent.createSubListIterator(this);\n         }\n \n+        @Override\n         public ListIterator<E> listIterator(final int index) {\n             rangeCheck(index, size + 1);\n             checkModCount();\n             return parent.createSubListListIterator(this, index);\n         }\n \n+        @Override\n         public List<E> subList(int fromIndexInclusive, int toIndexExclusive) {\n             return new LinkedSubList<E>(parent, fromIndexInclusive + offset, toIndexExclusive + offset);\n         }\n--- a/src/java/org/apache/commons/collections/list/AbstractListDecorator.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractListDecorator.java\n      * \n      * @return the decorated list\n      */\n+    @Override\n     protected List<E> decorated() {\n         return (List<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/list/GrowthList.java\n+++ b/src/java/org/apache/commons/collections/list/GrowthList.java\n      * @throws ClassCastException if the underlying list rejects the element\n      * @throws IllegalArgumentException if the underlying list rejects the element\n      */\n+    @Override\n     public void add(int index, E element) {\n         int size = decorated().size();\n         if (index > size) {\n      * @throws ClassCastException if the underlying list rejects the element\n      * @throws IllegalArgumentException if the underlying list rejects the element\n      */\n+    @Override\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         int size = decorated().size();\n         boolean result = false;\n      * @throws ClassCastException if the underlying list rejects the element\n      * @throws IllegalArgumentException if the underlying list rejects the element\n      */\n+    @Override\n     public E set(int index, E element) {\n         int size = decorated().size();\n         if (index >= size) {\n--- a/src/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/java/org/apache/commons/collections/list/LazyList.java\n      * \n      * @param index  the index to retrieve\n      */\n+    @Override\n     public E get(int index) {\n         int size = decorated().size();\n         if (index < size) {\n         return object;\n     }\n \n+    @Override\n     public List<E> subList(int fromIndex, int toIndex) {\n         List<E> sub = decorated().subList(fromIndex, toIndex);\n         return new LazyList<E>(sub, factory);\n--- a/src/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n      * @param value  value of the new node\n      * @return the newly created node\n      */\n+    @Override\n     protected Node<E> createNode(E value) {\n         Node<E> cachedNode = getNodeFromCache();\n         if (cachedNode == null) {\n      * \n      * @param node  the node to remove\n      */\n+    @Override\n     protected void removeNode(Node<E> node) {\n         super.removeNode(node);\n         addNodeToCache(node);\n      * cache for reuse.\n      * \n      */\n+    @Override\n     protected void removeAllNodes() {\n         // Add the removed nodes to the cache, then remove the rest.\n         // We can add them to the cache before removing them, since\n--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n      * @param object the object to add\n      * @return true if object was added\n      */\n+    @Override\n     public boolean add(E object) {\n         // gets initial size\n         final int sizeBefore = size();\n      * @param index  the index to insert at\n      * @param object  the object to add\n      */\n+    @Override\n     public void add(int index, E object) {\n         // adds element if it is not contained already\n         if (set.contains(object) == false) {\n      * @param coll  the collection to add in iterator order\n      * @return true if this collection changed\n      */\n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         return addAll(size(), coll);\n     }\n      * @param coll  the collection to add in iterator order\n      * @return true if this collection changed\n      */\n+    @Override\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         HashSet<E> temp = new HashSet<E>(coll);\n         temp.removeAll(set);\n      * @param object  the object to set\n      * @return the previous object\n      */\n+    @Override\n     public E set(int index, E object) {\n         int pos = indexOf(object);\n         E removed = super.set(index, object);\n         return removed;  // return the item deleted by the set\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         boolean result = super.remove(object);\n         set.remove(object);\n         return result;\n     }\n \n+    @Override\n     public E remove(int index) {\n         E result = super.remove(index);\n         set.remove(result);\n         return result;\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         boolean result = super.removeAll(coll);\n         set.removeAll(coll);\n         return result;\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         boolean result = super.retainAll(coll);\n         set.retainAll(coll);\n         return result;\n     }\n \n+    @Override\n     public void clear() {\n         super.clear();\n         set.clear();\n     }\n \n+    @Override\n     public boolean contains(Object object) {\n         return set.contains(object);\n     }\n \n+    @Override\n     public boolean containsAll(Collection<?> coll) {\n         return set.containsAll(coll);\n     }\n \n+    @Override\n     public Iterator<E> iterator() {\n         return new SetListIterator<E>(super.iterator(), set);\n     }\n \n+    @Override\n     public ListIterator<E> listIterator() {\n         return new SetListListIterator<E>(super.listIterator(), set);\n     }\n \n+    @Override\n     public ListIterator<E> listIterator(int index) {\n         return new SetListListIterator<E>(super.listIterator(index), set);\n     }\n \n+    @Override\n     public List<E> subList(int fromIndex, int toIndex) {\n         List<E> superSubList = super.subList(fromIndex, toIndex);\n         Set<E> subSet = createSetBasedOnList(set, superSubList);\n             this.set = set;\n         }\n \n+        @Override\n         public E next() {\n             last = super.next();\n             return last;\n         }\n \n+        @Override\n         public void remove() {\n             super.remove();\n             set.remove(last);\n             this.set = set;\n         }\n \n+        @Override\n         public E next() {\n             last = super.next();\n             return last;\n         }\n \n+        @Override\n         public E previous() {\n             last = super.previous();\n             return last;\n         }\n \n+        @Override\n         public void remove() {\n             super.remove();\n             set.remove(last);\n             last = null;\n         }\n \n+        @Override\n         public void add(E object) {\n             if (set.contains(object) == false) {\n                 super.add(object);\n             }\n         }\n \n+        @Override\n         public void set(E object) {\n             throw new UnsupportedOperationException(\"ListIterator does not support set\");\n         }\n--- a/src/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/java/org/apache/commons/collections/list/TransformedList.java\n             super(iterator);\n         }\n \n+        @Override\n         public void add(E object) {\n             object = transform(object);\n             iterator.add(object);\n         }\n \n+        @Override\n         public void set(E object) {\n             object = transform(object);\n             iterator.set(object);\n--- a/src/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/java/org/apache/commons/collections/list/TreeList.java\n      * @param index  the index to retrieve\n      * @return the element at the specified index\n      */\n+    @Override\n     public E get(int index) {\n         checkInterval(index, 0, size() - 1);\n         return root.get(index).getValue();\n      *\n      * @return the current size\n      */\n+    @Override\n     public int size() {\n         return size;\n     }\n      *\n      * @return an iterator over the list\n      */\n+    @Override\n     public Iterator<E> iterator() {\n         // override to go 75% faster\n         return listIterator(0);\n      *\n      * @return the new iterator\n      */\n+    @Override\n     public ListIterator<E> listIterator() {\n         // override to go 75% faster\n         return listIterator(0);\n      * @param fromIndex  the index to start from\n      * @return the new iterator\n      */\n+    @Override\n     public ListIterator<E> listIterator(int fromIndex) {\n         // override to go 75% faster\n         // cannot use EmptyIterator as iterator.add() must work\n      *\n      * @return the index of the object, -1 if not found\n      */\n+    @Override\n     public int indexOf(Object object) {\n         // override to go 75% faster\n         if (root == null) {\n      *\n      * @return true if the object is found\n      */\n+    @Override\n     public boolean contains(Object object) {\n         return (indexOf(object) >= 0);\n     }\n      *\n      * @return the list as an array\n      */\n+    @Override\n     public Object[] toArray() {\n         // override to go 20% faster\n         Object[] array = new Object[size()];\n      * @param index  the index to add before\n      * @param obj  the element to add\n      */\n+    @Override\n     public void add(int index, E obj) {\n         modCount++;\n         checkInterval(index, 0, size());\n      * @return the previous object at that index\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n+    @Override\n     public E set(int index, E obj) {\n         checkInterval(index, 0, size() - 1);\n         AVLNode<E> node = root.get(index);\n      * @param index  the index to remove\n      * @return the previous object at that index\n      */\n+    @Override\n     public E remove(int index) {\n         modCount++;\n         checkInterval(index, 0, size() - 1);\n     /**\n      * Clears the list, removing all entries.\n      */\n+    @Override\n     public void clear() {\n         modCount++;\n         root = null;\n         /**\n          * Used for debugging.\n          */\n+        @Override\n         public String toString() {\n             return \"AVLNode(\" + relativePosition + \",\" + (left != null) + \",\" + value +\n                 \",\" + (getRightSubTree() != null) + \", faedelung \" + rightIsNext + \" )\";\n--- a/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n+++ b/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public ListIterator<E> listIterator() {\n         return UnmodifiableListIterator.decorate(decorated().listIterator());\n     }\n \n+    @Override\n     public ListIterator<E> listIterator(int index) {\n         return UnmodifiableListIterator.decorate(decorated().listIterator(index));\n     }\n \n+    @Override\n     public void add(int index, E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public E remove(int index) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public E set(int index, E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public List<E> subList(int fromIndex, int toIndex) {\n         List<E> sub = decorated().subList(fromIndex, toIndex);\n         return new UnmodifiableList<E>(sub);\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n      * @param key  the key\n      * @return the mapped value, null if no match\n      */\n+    @Override\n     public V get(Object key) {\n         key = convertKey(key);\n         int hashCode = hash(key);\n      *\n      * @return the size\n      */\n+    @Override\n     public int size() {\n         return size;\n     }\n      *\n      * @return true if the map is currently size zero\n      */\n+    @Override\n     public boolean isEmpty() {\n         return (size == 0);\n     }\n      * @param key  the key to search for\n      * @return true if the map contains the key\n      */\n+    @Override\n     public boolean containsKey(Object key) {\n         key = convertKey(key);\n         int hashCode = hash(key);\n      * @param value  the value to search for\n      * @return true if the map contains the value\n      */\n+    @Override\n     public boolean containsValue(Object value) {\n         if (value == null) {\n             for (int i = 0, isize = data.length; i < isize; i++) {\n      * @param value  the value to add\n      * @return the value previously mapped to this key, null if none\n      */\n+    @Override\n     public V put(K key, V value) {\n         Object convertedKey = convertKey(key);\n         int hashCode = hash(convertedKey);\n      * @param map  the map to add\n      * @throws NullPointerException if the map is null\n      */\n+    @Override\n     public void putAll(Map<? extends K, ? extends V> map) {\n         _putAll(map);\n     }\n      * @param key  the mapping to remove\n      * @return the value mapped to the removed key, null if key not in map\n      */\n+    @Override\n     public V remove(Object key) {\n         key = convertKey(key);\n         int hashCode = hash(key);\n      * Clears the map, resetting the size to zero and nullifying references\n      * to avoid garbage collection issues.\n      */\n+    @Override\n     public void clear() {\n         modCount++;\n         HashEntry<K, V>[] data = this.data;\n      *\n      * @return the entrySet view\n      */\n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         if (entrySet == null) {\n             entrySet = new EntrySet<K, V>(this);\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return parent.size();\n         }\n \n+        @Override\n         public void clear() {\n             parent.clear();\n         }\n \n+        @Override\n         public boolean contains(Object entry) {\n             if (entry instanceof Map.Entry) {\n                 Map.Entry<?, ?> e = (Map.Entry<?, ?>) entry;\n             return false;\n         }\n \n+        @Override\n         public boolean remove(Object obj) {\n             if (obj instanceof Map.Entry == false) {\n                 return false;\n             return true;\n         }\n \n+        @Override\n         public Iterator<Map.Entry<K, V>> iterator() {\n             return parent.createEntrySetIterator();\n         }\n      *\n      * @return the keySet view\n      */\n+    @Override\n     public Set<K> keySet() {\n         if (keySet == null) {\n             keySet = new KeySet<K>(this);\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return parent.size();\n         }\n \n+        @Override\n         public void clear() {\n             parent.clear();\n         }\n \n+        @Override\n         public boolean contains(Object key) {\n             return parent.containsKey(key);\n         }\n \n+        @Override\n         public boolean remove(Object key) {\n             boolean result = parent.containsKey(key);\n             parent.remove(key);\n             return result;\n         }\n \n+        @Override\n         public Iterator<K> iterator() {\n             return parent.createKeySetIterator();\n         }\n      *\n      * @return the values view\n      */\n+    @Override\n     public Collection<V> values() {\n         if (values == null) {\n             values = new Values<V>(this);\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return parent.size();\n         }\n \n+        @Override\n         public void clear() {\n             parent.clear();\n         }\n \n+        @Override\n         public boolean contains(Object value) {\n             return parent.containsValue(value);\n         }\n \n+        @Override\n         public Iterator<V> iterator() {\n             return parent.createValuesIterator();\n         }\n             return (V) old;\n         }\n \n+        @Override\n         public boolean equals(Object obj) {\n             if (obj == this) {\n                 return true;\n                 (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n         }\n \n+        @Override\n         public int hashCode() {\n             return (getKey() == null ? 0 : getKey().hashCode()) ^\n                    (getValue() == null ? 0 : getValue().hashCode());\n         }\n \n+        @Override\n         public String toString() {\n             return new StringBuilder().append(getKey()).append('=').append(getValue()).toString();\n         }\n             expectedModCount = parent.modCount;\n         }\n \n+        @Override\n         public String toString() {\n             if (last != null) {\n                 return \"Iterator[\" + last.getKey() + \"=\" + last.getValue() + \"]\";\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     protected AbstractHashedMap<K, V> clone() {\n         try {\n      * @param obj  the object to compare to\n      * @return true if equal\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n      *\n      * @return the hash code defined in the Map interface\n      */\n+    @Override\n     public int hashCode() {\n         int total = 0;\n         Iterator<Map.Entry<K, V>> it = createEntrySetIterator();\n      *\n      * @return a string version of the map\n      */\n+    @Override\n     public String toString() {\n         if (size() == 0) {\n             return \"{}\";\n--- a/src/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         if (isSetValueChecking()) {\n             return new EntrySet(map.entrySet(), this);\n             this.parent = parent;\n         }\n \n+        @Override\n         public Iterator<Map.Entry<K, V>> iterator() {\n             return new EntrySetIterator(collection.iterator(), parent);\n         }\n         \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public Object[] toArray() {\n             Object[] array = collection.toArray();\n             return array;\n         }\n         \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T[] toArray(T[] array) {\n             Object[] result = array;\n             this.parent = parent;\n         }\n \n+        @Override\n         public Map.Entry<K, V> next() {\n             Map.Entry<K, V> entry = iterator.next();\n             return new MapEntry(entry, parent);\n             this.parent = parent;\n         }\n \n+        @Override\n         public V setValue(V value) {\n             value = parent.checkSetValue(value);\n             return entry.setValue(value);\n--- a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n      * {@link #createEntry(HashEntry, int, Object, Object)} to create\n      * the map entry object.\n      */\n+    @Override\n     protected void init() {\n         header = createEntry(null, -1, null, null);\n         header.before = header.after = header;\n      * @param value  the value to search for\n      * @return true if the map contains the value\n      */\n+    @Override\n     public boolean containsValue(Object value) {\n         // override uses faster iterator\n         if (value == null) {\n      * Clears the map, resetting the size to zero and nullifying references\n      * to avoid garbage collection issues.\n      */\n+    @Override\n     public void clear() {\n         // override to reset the linked list\n         super.clear();\n         return (entry == null || entry.after == header ? null : entry.after.getKey());\n     }\n \n+    @Override\n     protected LinkEntry<K, V> getEntry(Object key) {\n         return (LinkEntry<K, V>) super.getEntry(key);\n     }\n      * @param link  the entry to add\n      * @param hashIndex  the index into the data array to store at\n      */\n+    @Override\n     protected void addEntry(HashEntry<K, V> entry, int hashIndex) {\n         LinkEntry<K, V> link = (LinkEntry<K, V>) entry;\n         link.after  = header;\n      * @param value  the value to store\n      * @return the newly created entry\n      */\n+    @Override\n     protected LinkEntry<K, V> createEntry(HashEntry<K, V> next, int hashCode, K key, V value) {\n         return new LinkEntry<K, V>(next, hashCode, convertKey(key), value);\n     }\n      * @param hashIndex  the index into the data structure\n      * @param previous  the previous entry in the chain\n      */\n+    @Override\n     protected void removeEntry(HashEntry<K, V> entry, int hashIndex, HashEntry<K, V> previous) {\n         LinkEntry<K, V> link = (LinkEntry<K, V>) entry;\n         link.before.after = link.after;\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public OrderedMapIterator<K, V> mapIterator() {\n         if (size == 0) {\n             return EmptyOrderedMapIterator.<K, V>getInstance();\n      * \n      * @return the entrySet iterator\n      */\n+    @Override\n     protected Iterator<Map.Entry<K, V>> createEntrySetIterator() {\n         if (size() == 0) {\n             return EmptyOrderedIterator.<Map.Entry<K, V>>getInstance();\n      * \n      * @return the keySet iterator\n      */\n+    @Override\n     protected Iterator<K> createKeySetIterator() {\n         if (size() == 0) {\n             return EmptyOrderedIterator.<K>getInstance();\n      * \n      * @return the values iterator\n      */\n+    @Override\n     protected Iterator<V> createValuesIterator() {\n         if (size() == 0) {\n             return EmptyOrderedIterator.<V>getInstance();\n             next = parent.header.after;\n         }\n \n+        @Override\n         public String toString() {\n             if (last != null) {\n                 return \"Iterator[\" + last.getKey() + \"=\" + last.getValue() + \"]\";\n--- a/src/java/org/apache/commons/collections/map/AbstractMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractMapDecorator.java\n         return decorated().values();\n     }\n    \n+    @Override\n     public boolean equals(Object object) {\n         if (object == this) {\n             return true;\n         return decorated().equals(object);\n     }\n \n+    @Override\n     public int hashCode() {\n         return decorated().hashCode();\n     }\n \n+    @Override\n     public String toString() {\n         return decorated().toString();\n     }\n--- a/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n      * \n      * @return the decorated map\n      */\n+    @Override\n     protected OrderedMap<K, V> decorated() {\n         return (OrderedMap<K, V>) super.decorated();\n     }\n         return decorated().previousKey(key);\n     }\n \n+    @Override\n     public OrderedMapIterator<K, V> mapIterator() {\n         return decorated().mapIterator();\n     }\n--- a/src/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n     /**\n      * Initialise this subclass during construction, cloning or deserialization.\n      */\n+    @Override\n     protected void init() {\n         queue = new ReferenceQueue<Object>();\n     }\n      *\n      * @return the size\n      */\n+    @Override\n     public int size() {\n         purgeBeforeRead();\n         return super.size();\n      *\n      * @return true if the map is currently size zero\n      */\n+    @Override\n     public boolean isEmpty() {\n         purgeBeforeRead();\n         return super.isEmpty();\n      * @param key  the key to search for\n      * @return true if the map contains the key\n      */\n+    @Override\n     public boolean containsKey(Object key) {\n         purgeBeforeRead();\n         Entry<K, V> entry = getEntry(key);\n      * @param value  the value to search for\n      * @return true if the map contains the value\n      */\n+    @Override\n     public boolean containsValue(Object value) {\n         purgeBeforeRead();\n         if (value == null) {\n      * @param key  the key\n      * @return the mapped value, null if no match\n      */\n+    @Override\n     public V get(Object key) {\n         purgeBeforeRead();\n         Entry<K, V> entry = getEntry(key);\n      * @return the value previously mapped to this key, null if none\n      * @throws NullPointerException if either the key or value is null\n      */\n+    @Override\n     public V put(K key, V value) {\n         if (key == null) {\n             throw new NullPointerException(\"null keys not allowed\");\n      * @param key  the mapping to remove\n      * @return the value mapped to the removed key, null if key not in map\n      */\n+    @Override\n     public V remove(Object key) {\n         if (key == null) {\n             return null;\n     /**\n      * Clears this map.\n      */\n+    @Override\n     public void clear() {\n         super.clear();\n         while (queue.poll() != null) {} // drain the queue\n      *\n      * @return a map iterator\n      */\n+    @Override\n     public MapIterator<K, V> mapIterator() {\n         return new ReferenceMapIterator<K, V>(this);\n     }\n      *\n      * @return a set view of this map's entries\n      */\n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         if (entrySet == null) {\n             entrySet = new ReferenceEntrySet<K, V>(this);\n      *\n      * @return a set view of this map's keys\n      */\n+    @Override\n     public Set<K> keySet() {\n         if (keySet == null) {\n             keySet = new ReferenceKeySet<K>(this);\n      *\n      * @return a set view of this map's values\n      */\n+    @Override\n     public Collection<V> values() {\n         if (values == null) {\n             values = new ReferenceValues<V>(this);\n      * @param key  the key\n      * @return the entry, null if no match\n      */\n+    @Override\n     protected HashEntry<K, V> getEntry(Object key) {\n         if (key == null) {\n             return null;\n      * @param key2  the second key extracted from the entry via <code>entry.key</code>\n      * @return true if equal\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     protected boolean isEqualKey(Object key1, Object key2) {\n         key2 = (keyType == ReferenceStrength.HARD ? key2 : ((Reference<K>) key2).get());\n      * @param value  the value to store\n      * @return the newly created entry\n      */\n+    @Override\n     protected ReferenceEntry<K, V> createEntry(HashEntry<K, V> next, int hashCode, K key, V value) {\n         return new ReferenceEntry<K, V>(this, next, hashCode, key, value);\n     }\n      *\n      * @return the entrySet iterator\n      */\n+    @Override\n     protected Iterator<Map.Entry<K, V>> createEntrySetIterator() {\n         return new ReferenceEntrySetIterator<K, V>(this);\n     }\n      *\n      * @return the keySet iterator\n      */\n+    @Override\n     protected Iterator<K> createKeySetIterator() {\n         return new ReferenceKeySetIterator<K>(this);\n     }\n      *\n      * @return the values iterator\n      */\n+    @Override\n     protected Iterator<V> createValuesIterator() {\n         return new ReferenceValuesIterator<V>(this);\n     }\n             super(parent);\n         }\n \n+        @Override\n         public Object[] toArray() {\n             return toArray(new Object[0]);\n         }\n \n+        @Override\n         public <T> T[] toArray(T[] arr) {\n             // special implementation to handle disappearing entries\n             ArrayList<Map.Entry<K, V>> list = new ArrayList<Map.Entry<K, V>>();\n             super(parent);\n         }\n \n+        @Override\n         public Object[] toArray() {\n             return toArray(new Object[0]);\n         }\n \n+        @Override\n         public <T> T[] toArray(T[] arr) {\n             // special implementation to handle disappearing keys\n             List<K> list = new ArrayList<K>(parent.size());\n             super(parent);\n         }\n \n+        @Override\n         public Object[] toArray() {\n             return toArray(new Object[0]);\n         }\n \n+        @Override\n         public <T> T[] toArray(T[] arr) {\n             // special implementation to handle disappearing values\n             List<V> list = new ArrayList<V>(parent.size());\n          *\n          * @return the key, which may be null if it was garbage collected\n          */\n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public K getKey() {\n             return (K) ((parent.keyType == ReferenceStrength.HARD) ? key : ((Reference<K>) key).get());\n          *\n          * @return the value, which may be null if it was garbage collected\n          */\n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public V getValue() {\n             return (V) ((parent.valueType == ReferenceStrength.HARD) ? value : ((Reference<V>) value).get());\n          * @param obj  the object to store\n          * @return the previous value\n          */\n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public V setValue(V obj) {\n             V old = getValue();\n          * @param obj  the other map entry to compare to\n          * @return true if equal, false if not\n          */\n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public boolean equals(Object obj) {\n             if (obj == this) {\n          *\n          * @return the hashcode of the entry\n          */\n+        @Override\n         public int hashCode() {\n             return parent.hashEntry(getKey(), getValue());\n         }\n             this.hash = hash;\n         }\n \n+        @Override\n         public int hashCode() {\n             return hash;\n         }\n             this.hash = hash;\n         }\n \n+        @Override\n         public int hashCode() {\n             return hash;\n         }\n      *\n      * @param out  the output stream\n      */\n+    @Override\n     protected void doWriteObject(ObjectOutputStream out) throws IOException {\n         out.writeInt(keyType.value);\n         out.writeInt(valueType.value);\n      *\n      * @param in  the input stream\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     protected void doReadObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         this.keyType = ReferenceStrength.resolve(in.readInt());\n--- a/src/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n      * \n      * @return the decorated map\n      */\n+    @Override\n     protected SortedMap<K, V> decorated() {\n         return (SortedMap<K, V>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+++ b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n      * @param key  the key convert\n      * @return the converted key\n      */\n+    @Override\n     protected Object convertKey(Object key) {\n         if (key != null) {\n             char[] chars = key.toString().toCharArray();\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     public CaseInsensitiveMap<K, V> clone() {\n         return (CaseInsensitiveMap<K, V>) super.clone();\n     }\n--- a/src/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/java/org/apache/commons/collections/map/CompositeMap.java\n      * @param obj  the object to compare to\n      * @return true if the maps are equal\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj instanceof Map) {\n     /**\n      * Gets a hash code for the Map as per the Map specification.\n      */\n+    @Override\n     public int hashCode() {\n         int code = 0;\n         for (Map.Entry<K, V> entry : entrySet()) {\n--- a/src/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/java/org/apache/commons/collections/map/DefaultedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public V get(Object key) {\n         // create value for key if key is not currently in the map\n--- a/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public V put(K key, V value) {\n         if (map.containsKey(key) == false) {\n             throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n         return map.put(key, value);\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         for (K key : mapToCopy.keySet()) {\n             if (!containsKey(key)) {\n         map.putAll(mapToCopy);\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException(\"Map is fixed size\");\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException(\"Map is fixed size\");\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         Set<Map.Entry<K, V>> set = map.entrySet();\n         // unmodifiable set will still allow modification via Map.Entry objects\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         Set<K> set = map.keySet();\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public Collection<V> values() {\n         Collection<V> coll = map.values();\n         return UnmodifiableCollection.decorate(coll);\n--- a/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public V put(K key, V value) {\n         if (map.containsKey(key) == false) {\n             throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n         return map.put(key, value);\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         if (CollectionUtils.isSubCollection(mapToCopy.keySet(), keySet())) {\n             throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n         map.putAll(mapToCopy);\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException(\"Map is fixed size\");\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException(\"Map is fixed size\");\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         return UnmodifiableSet.decorate(map.entrySet());\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         return UnmodifiableSet.decorate(map.keySet());\n     }\n \n+    @Override\n     public Collection<V> values() {\n         return UnmodifiableCollection.decorate(map.values());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public SortedMap<K, V> subMap(K fromKey, K toKey) {\n         return new FixedSizeSortedMap<K, V>(getSortedMap().subMap(fromKey, toKey));\n     }\n \n+    @Override\n     public SortedMap<K, V> headMap(K toKey) {\n         return new FixedSizeSortedMap<K, V>(getSortedMap().headMap(toKey));\n     }\n \n+    @Override\n     public SortedMap<K, V> tailMap(K fromKey) {\n         return new FixedSizeSortedMap<K, V>(getSortedMap().tailMap(fromKey));\n     }\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n             canRemove = false;\n         }\n \n+        @Override\n         public String toString() {\n             if (canRemove) {\n                 return \"Iterator[\" + getKey() + \"=\" + getValue() + \"]\";\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return parent.size();\n         }\n \n+        @Override\n         public void clear() {\n             parent.clear();\n         }\n \n+        @Override\n         public boolean remove(Object obj) {\n             if (obj instanceof Map.Entry == false) {\n                 return false;\n             return result;\n         }\n \n+        @Override\n         public Iterator<Map.Entry<K, V>> iterator() {\n             if (parent.delegateMap != null) {\n                 return parent.delegateMap.entrySet().iterator();\n             return nextEntry();\n         }\n \n+        @Override\n         public boolean equals(Object obj) {\n             if (canRemove == false) {\n                 return false;\n                    (value == null ? other.getValue() == null : value.equals(other.getValue()));\n         }\n \n+        @Override\n         public int hashCode() {\n             if (canRemove == false) {\n                 return 0;\n                    (value == null ? 0 : value.hashCode());\n         }\n \n+        @Override\n         public String toString() {\n             if (canRemove) {\n                 return getKey() + \"=\" + getValue();\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return parent.size();\n         }\n \n+        @Override\n         public void clear() {\n             parent.clear();\n         }\n \n+        @Override\n         public boolean contains(Object key) {\n             return parent.containsKey(key);\n         }\n \n+        @Override\n         public boolean remove(Object key) {\n             boolean result = parent.containsKey(key);\n             parent.remove(key);\n             return result;\n         }\n \n+        @Override\n         public Iterator<K> iterator() {\n             if (parent.delegateMap != null) {\n                 return parent.delegateMap.keySet().iterator();\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return parent.size();\n         }\n \n+        @Override\n         public void clear() {\n             parent.clear();\n         }\n \n+        @Override\n         public boolean contains(Object value) {\n             return parent.containsValue(value);\n         }\n \n+        @Override\n         public Iterator<V> iterator() {\n             if (parent.delegateMap != null) {\n                 return parent.delegateMap.values().iterator();\n      * @return a shallow clone\n      * @since Commons Collections 3.1\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Flat3Map<K, V> clone() {\n         try {\n      * @param obj  the object to compare to\n      * @return true if equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return the hash code defined in the Map interface\n      */\n+    @Override\n     public int hashCode() {\n         if (delegateMap != null) {\n             return delegateMap.hashCode();\n      *\n      * @return a string version of the map\n      */\n+    @Override\n     public String toString() {\n         if (delegateMap != null) {\n             return delegateMap.toString();\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     public HashedMap<K, V> clone() {\n         return (HashedMap<K, V>) super.clone();\n     }\n--- a/src/java/org/apache/commons/collections/map/IdentityMap.java\n+++ b/src/java/org/apache/commons/collections/map/IdentityMap.java\n      * @param key  the key to get a hash code for\n      * @return the hash code\n      */\n+    @Override\n     protected int hash(Object key) {\n         return System.identityHashCode(key);\n     }\n      * @param key2  the second key to compare\n      * @return true if equal by identity\n      */\n+    @Override\n     protected boolean isEqualKey(Object key1, Object key2) {\n         return (key1 == key2);\n     }\n      * @param value2  the second value to compare\n      * @return true if equal by identity\n      */\n+    @Override\n     protected boolean isEqualValue(Object value1, Object value2) {\n         return (value1 == value2);\n     }\n      * @param value  the value to store\n      * @return the newly created entry\n      */\n+    @Override\n     protected IdentityEntry<K, V> createEntry(HashEntry<K, V> next, int hashCode, K key, V value) {\n         return new IdentityEntry<K, V>(next, hashCode, key, value);\n     }\n             super(next, hashCode, key, value);\n         }\n \n+        @Override\n         public boolean equals(Object obj) {\n             if (obj == this) {\n                 return true;\n                 (getValue() == other.getValue());\n         }\n \n+        @Override\n         public int hashCode() {\n             return System.identityHashCode(getKey()) ^\n                    System.identityHashCode(getValue());\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     public IdentityMap<K, V> clone() {\n         return (IdentityMap<K, V>) super.clone();\n     }\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n      * @param key  the key\n      * @return the mapped value, null if no match\n      */\n+    @Override\n     public V get(Object key) {\n         LinkEntry<K, V> entry = getEntry(key);\n         if (entry == null) {\n      * @param entry  the entry to update\n      * @param newValue  the new value to store\n      */\n+    @Override\n     protected void updateEntry(HashEntry<K, V> entry, V newValue) {\n         moveToMRU((LinkEntry<K, V>) entry);  // handles modCount\n         entry.setValue(newValue);\n      * @param key  the key to add\n      * @param value  the value to add\n      */\n+    @Override\n     protected void addMapping(int hashIndex, int hashCode, K key, V value) {\n         if (isFull()) {\n             LinkEntry<K, V> reuse = header.after;\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     public LRUMap<K, V> clone() {\n         return (LRUMap<K, V>) super.clone();\n     }\n     /**\n      * Writes the data necessary for <code>put()</code> to work in deserialization.\n      */\n+    @Override\n     protected void doWriteObject(ObjectOutputStream out) throws IOException {\n         out.writeInt(maxSize);\n         super.doWriteObject(out);\n     /**\n      * Reads the data necessary for <code>put()</code> to work in the superclass.\n      */\n+    @Override\n     protected void doReadObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         maxSize = in.readInt();\n         super.doReadObject(in);\n--- a/src/java/org/apache/commons/collections/map/LinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LinkedMap.java\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     public LinkedMap<K, V> clone() {\n         return (LinkedMap<K, V>) super.clone();\n     }\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return parent.size();\n         }\n \n+        @Override\n         public K get(int index) {\n             return parent.get(index);\n         }\n \n+        @Override\n         public boolean contains(Object obj) {\n             return parent.containsKey(obj);\n         }\n \n+        @Override\n         public int indexOf(Object obj) {\n             return parent.indexOf(obj);\n         }\n \n+        @Override\n         public int lastIndexOf(Object obj) {\n             return parent.indexOf(obj);\n         }\n \n+        @Override\n         public boolean containsAll(Collection<?> coll) {\n             return parent.keySet().containsAll(coll);\n         }\n \n+        @Override\n         public K remove(int index) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public boolean remove(Object obj) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public boolean removeAll(Collection<?> coll) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public boolean retainAll(Collection<?> coll) {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public void clear() {\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n         public Object[] toArray() {\n             return parent.keySet().toArray();\n         }\n \n+        @Override\n         public <T> T[] toArray(T[] array) {\n             return parent.keySet().toArray(array);\n         }\n \n+        @Override\n         public Iterator<K> iterator() {\n             return UnmodifiableIterator.decorate(parent.keySet().iterator());\n         }\n \n+        @Override\n         public ListIterator<K> listIterator() {\n             return UnmodifiableListIterator.decorate(super.listIterator());\n         }\n \n+        @Override\n         public ListIterator<K> listIterator(int fromIndex) {\n             return UnmodifiableListIterator.decorate(super.listIterator(fromIndex));\n         }\n \n+        @Override\n         public List<K> subList(int fromIndexInclusive, int toIndexExclusive) {\n             return UnmodifiableList.decorate(super.subList(fromIndexInclusive, toIndexExclusive));\n         }\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n \n     // Implement OrderedMap\n     //-----------------------------------------------------------------------\n+    @Override\n     public OrderedMapIterator<K, V> mapIterator() {\n         return new ListOrderedMapIterator<K, V>(this);\n     }\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public V put(K key, V value) {\n         if (decorated().containsKey(key)) {\n             // re-adding doesn't change order\n         }\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> map) {\n         for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n             put(entry.getKey(), entry.getValue());\n         }\n     }\n \n+    @Override\n     public V remove(Object key) {\n         V result = decorated().remove(key);\n         insertOrder.remove(key);\n         return result;\n     }\n \n+    @Override\n     public void clear() {\n         decorated().clear();\n         insertOrder.clear();\n      * @see #keyList()\n      * @return the fully modifiable collection view over the keys\n      */\n+    @Override\n     public Set<K> keySet() {\n         return new KeySetView<K>(this);\n     }\n      * @see #valueList()\n      * @return the fully modifiable collection view over the values\n      */\n+    @Override\n     public Collection<V> values() {\n         return new ValuesView<V>(this);\n     }\n      *\n      * @return the fully modifiable set view over the entries\n      */\n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         return new EntrySetView<K, V>(this, this.insertOrder);\n     }\n      * \n      * @return the Map as a String\n      */\n+    @Override\n     public String toString() {\n         if (isEmpty()) {\n             return \"{}\";\n             this.parent = (ListOrderedMap<Object, V>) parent;\n         }\n \n+        @Override\n         public int size() {\n             return this.parent.size();\n         }\n \n+        @Override\n         public boolean contains(Object value) {\n             return this.parent.containsValue(value);\n         }\n \n+        @Override\n         public void clear() {\n             this.parent.clear();\n         }\n \n+        @Override\n         public Iterator<V> iterator() {\n             return new AbstractUntypedIteratorDecorator<Map.Entry<Object, V>, V>(parent.entrySet().iterator()) {\n                 public V next() {\n             };\n         }\n \n+        @Override\n         public V get(int index) {\n             return this.parent.getValue(index);\n         }\n \n+        @Override\n         public V set(int index, V value) {\n             return this.parent.setValue(index, value);\n         }\n \n+        @Override\n         public V remove(int index) {\n             return this.parent.remove(index);\n         }\n             this.parent = (ListOrderedMap<K, Object>) parent;\n         }\n \n+        @Override\n         public int size() {\n             return this.parent.size();\n         }\n \n+        @Override\n         public boolean contains(Object value) {\n             return this.parent.containsKey(value);\n         }\n \n+        @Override\n         public void clear() {\n             this.parent.clear();\n         }\n \n+        @Override\n         public Iterator<K> iterator() {\n             return new AbstractUntypedIteratorDecorator<Map.Entry<K, Object>, K>(parent.entrySet().iterator()) {\n                 public K next() {\n             return entrySet;\n         }\n         \n+        @Override\n         public int size() {\n             return this.parent.size();\n         }\n+        @Override\n         public boolean isEmpty() {\n             return this.parent.isEmpty();\n         }\n \n+        @Override\n         public boolean contains(Object obj) {\n             return getEntrySet().contains(obj);\n         }\n \n+        @Override\n         public boolean containsAll(Collection<?> coll) {\n             return getEntrySet().containsAll(coll);\n         }\n \n+        @Override\n         @SuppressWarnings(\"unchecked\")\n         public boolean remove(Object obj) {\n             if (obj instanceof Map.Entry == false) {\n             return false;\n         }\n \n+        @Override\n         public void clear() {\n             this.parent.clear();\n         }\n \n+        @Override\n         public boolean equals(Object obj) {\n             if (obj == this) {\n                 return true;\n             return getEntrySet().equals(obj);\n         }\n \n+        @Override\n         public int hashCode() {\n             return getEntrySet().hashCode();\n         }\n \n+        @Override\n         public String toString() {\n             return getEntrySet().toString();\n         }\n \n+        @Override\n         public Iterator<Map.Entry<K, V>> iterator() {\n             return new ListOrderedIterator<K, V>(parent, insertOrder);\n         }\n             return new ListOrderedMapEntry<K, V>(parent, last);\n         }\n \n+        @Override\n         public void remove() {\n             super.remove();\n             parent.decorated().remove(last);\n             this.parent = parent;\n         }\n \n+        @Override\n         public V getValue() {\n             return parent.get(key);\n         }\n \n+        @Override\n         public V setValue(V value) {\n             return parent.decorated().put(key, value);\n         }\n             readable = false;\n         }\n \n+        @Override\n         public String toString() {\n             if (readable == true) {\n                 return \"Iterator[\" + getKey() + \"=\" + getValue() + \"]\";\n--- a/src/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiKeyMap.java\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     public MultiKeyMap<K, V> clone() {\n         return new MultiKeyMap<K, V>(decorated().clone());\n     }\n      * @throws NullPointerException if the key is null\n      * @throws ClassCastException if the key is not a MultiKey\n      */\n+    @Override\n     public V put(MultiKey<? extends K> key, V value) {\n         checkKey(key);\n         return super.put(key, value);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public MapIterator<MultiKey<? extends K>, V> mapIterator() {\n         return decorated().mapIterator();\n     }\n--- a/src/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiValueMap.java\n     /**\n      * Clear the map.\n      */\n+    @Override\n     public void clear() {\n         // If you believe that you have GC issues here, try uncommenting this code\n //        Set pairs = getMap().entrySet();\n      * @param value  the value to search for\n      * @return true if the map contains the value\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean containsValue(Object value) {\n         Set<Map.Entry<K, Object>> pairs = decorated().entrySet();\n      * @param value  the value to add to the collection at the key\n      * @return the value added if the map changed and null if the map did not change\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Object put(K key, Object value) {\n         boolean result = false;\n      *\n      * @param map  the map to copy (either a normal or multi map)\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void putAll(Map<? extends K, ?> map) {\n         if (map instanceof MultiMap) {\n      *\n      * @return a collection view of the values contained in this map\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Collection<Object> values() {\n         Collection<V> vs = valuesView;\n      * Inner class that provides the values view.\n      */\n     private class Values extends AbstractCollection<V> {\n+        @Override\n         public Iterator<V> iterator() {\n             final IteratorChain<V> chain = new IteratorChain<V>();\n             for (Iterator<K> it = keySet().iterator(); it.hasNext();) {\n             return chain;\n         }\n \n+        @Override\n         public int size() {\n             return totalSize();\n         }\n \n+        @Override\n         public void clear() {\n             MultiValueMap.this.clear();\n         }\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n      * @throws IllegalArgumentException if invalid\n      * @since Commons Collections 3.1\n      */\n+    @Override\n     protected V checkSetValue(V value) {\n         if (valuePredicate.evaluate(value) == false) {\n             throw new IllegalArgumentException(\"Cannot set value - Predicate rejected it\");\n      * @return true if a value predicate is in use\n      * @since Commons Collections 3.1\n      */\n+    @Override\n     protected boolean isSetValueChecking() {\n         return (valuePredicate != null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public V put(K key, V value) {\n         validate(key, value);\n         return map.put(key, value);\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         for (Map.Entry<? extends K, ? extends V> entry : mapToCopy.entrySet()) {\n             validate(entry.getKey(), entry.getValue());\n--- a/src/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n      * @param key  the key to get a hash code for\n      * @return the hash code\n      */\n+    @Override\n     protected int hash(Object key) {\n         return System.identityHashCode(key);\n     }\n      * @param value  the value to get a hash code for, may be null\n      * @return the hash code, as per the MapEntry specification\n      */\n+    @Override\n     protected int hashEntry(Object key, Object value) {\n         return System.identityHashCode(key) ^\n                System.identityHashCode(value);\n      * @param key2  the second key extracted from the entry via <code>entry.key</code>\n      * @return true if equal by identity\n      */\n+    @Override\n     protected boolean isEqualKey(Object key1, Object key2) {\n         key2 = keyType == ReferenceStrength.HARD ? key2 : ((Reference<?>) key2).get();\n         return key1 == key2;\n      * @param value2  the second value extracted from the entry via <code>getValue()</code>\n      * @return true if equal by identity\n      */\n+    @Override\n     protected boolean isEqualValue(Object value1, Object value2) {\n         return value1 == value2;\n     }\n--- a/src/java/org/apache/commons/collections/map/SingletonMap.java\n+++ b/src/java/org/apache/commons/collections/map/SingletonMap.java\n             hasNext = true;\n         }\n         \n+        @Override\n         public String toString() {\n             if (hasNext) {\n                 return \"Iterator[]\";\n             this.parent = parent;\n         }\n \n+        @Override\n         public int size() {\n             return 1;\n         }\n+        @Override\n         public boolean isEmpty() {\n             return false;\n         }\n+        @Override\n         public boolean contains(Object object) {\n             return parent.containsValue(object);\n         }\n+        @Override\n         public void clear() {\n             throw new UnsupportedOperationException();\n         }\n+        @Override\n         public Iterator<V> iterator() {\n             return new SingletonIterator<V>(parent.getValue(), false);\n         }\n      *\n      * @return a shallow clone\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SingletonMap<K, V> clone() {\n         try {\n      * @param obj  the object to compare to\n      * @return true if equal\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n      * \n      * @return the hash code defined in the Map interface\n      */\n+    @Override\n     public int hashCode() {\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n                (getValue() == null ? 0 : getValue().hashCode()); \n      * \n      * @return a string version of the map\n      */\n+    @Override\n     public String toString() {\n         return new StringBuilder(128)\n             .append('{')\n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n      * @return the transformed value\n      * @since Commons Collections 3.1\n      */\n+    @Override\n     protected V checkSetValue(V value) {\n         return valueTransformer.transform(value);\n     }\n      * @return true if a value transformer is in use\n      * @since Commons Collections 3.1\n      */\n+    @Override\n     protected boolean isSetValueChecking() {\n         return (valueTransformer != null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public V put(K key, V value) {\n         key = transformKey(key);\n         value = transformValue(value);\n         return decorated().put(key, value);\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         mapToCopy = transformMap(mapToCopy);\n         decorated().putAll(mapToCopy);\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public boolean add(Map.Entry<K, V> object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends Map.Entry<K, V>> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<Map.Entry<K, V>> iterator() {\n         return new UnmodifiableEntrySetIterator(collection.iterator());\n     }\n     \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Object[] toArray() {\n         Object[] array = collection.toArray();\n         return array;\n     }\n     \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T[] toArray(T[] array) {\n         Object[] result = array;\n             super(iterator);\n         }\n \n+        @Override\n         public Map.Entry<K, V> next() {\n             return new UnmodifiableEntry(iterator.next());\n         }\n \n+        @Override\n         public void remove() {\n             throw new UnsupportedOperationException();\n         }\n             super(entry);\n         }\n \n+        @Override\n         public V setValue(V obj) {\n             throw new UnsupportedOperationException();\n         }\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V put(K key, V value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public MapIterator<K, V> mapIterator() {\n         if (map instanceof IterableMap) {\n             MapIterator<K, V> it = ((IterableMap<K, V>) map).mapIterator();\n         return UnmodifiableMapIterator.decorate(it);\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         Set<Map.Entry<K, V>> set = super.entrySet();\n         return UnmodifiableEntrySet.decorate(set);\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         Set<K> set = super.keySet();\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public Collection<V> values() {\n         Collection<V> coll = super.values();\n         return UnmodifiableCollection.decorate(coll);\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public OrderedMapIterator<K, V> mapIterator() {\n         OrderedMapIterator<K, V> it = decorated().mapIterator();\n         return UnmodifiableOrderedMapIterator.decorate(it);\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V put(K key, V value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         Set<Map.Entry<K, V>> set = super.entrySet();\n         return UnmodifiableEntrySet.decorate(set);\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         Set<K> set = super.keySet();\n         return UnmodifiableSet.decorate(set);\n     }\n \n+    @Override\n     public Collection<V> values() {\n         Collection<V> coll = super.values();\n         return UnmodifiableCollection.decorate(coll);\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V put(K key, V value) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public V remove(Object key) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public Set<Map.Entry<K, V>> entrySet() {\n         return UnmodifiableEntrySet.decorate(super.entrySet());\n     }\n \n+    @Override\n     public Set<K> keySet() {\n         return UnmodifiableSet.decorate(super.keySet());\n     }\n \n+    @Override\n     public Collection<V> values() {\n         return UnmodifiableCollection.decorate(super.values());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public K firstKey() {\n         return decorated().firstKey();\n     }\n \n+    @Override\n     public K lastKey() {\n         return decorated().lastKey();\n     }\n \n+    @Override\n     public Comparator<? super K> comparator() {\n         return decorated().comparator();\n     }\n \n+    @Override\n     public SortedMap<K, V> subMap(K fromKey, K toKey) {\n         return new UnmodifiableSortedMap<K, V>(decorated().subMap(fromKey, toKey));\n     }\n \n+    @Override\n     public SortedMap<K, V> headMap(K toKey) {\n         return new UnmodifiableSortedMap<K, V>(decorated().headMap(toKey));\n     }\n \n+    @Override\n     public SortedMap<K, V> tailMap(K fromKey) {\n         return new UnmodifiableSortedMap<K, V>(decorated().tailMap(fromKey));\n     }\n--- a/src/java/org/apache/commons/collections/set/AbstractSetDecorator.java\n+++ b/src/java/org/apache/commons/collections/set/AbstractSetDecorator.java\n      * \n      * @return the decorated set\n      */\n+    @Override\n     protected Set<E> decorated() {\n         return (Set<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n+++ b/src/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n      * \n      * @return the decorated set\n      */\n+    @Override\n     protected SortedSet<E> decorated() {\n         return (SortedSet<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/set/CompositeSet.java\n+++ b/src/java/org/apache/commons/collections/set/CompositeSet.java\n      * @see org.apache.commons.collections.collection.CompositeCollection.CollectionMutator\n      * @see SetMutator\n      */\n+    @Override\n     public synchronized void addComposited(Collection<E> c) {\n         if (!(c instanceof Set)) {\n             throw new IllegalArgumentException(\"Collections added must implement java.util.Set\");\n      *\n      * @throws IllegalArgumentException if c or d does not implement java.util.Set\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public synchronized void addComposited(Collection<E> c, Collection<E> d) {\n         if (!(c instanceof Set)) throw new IllegalArgumentException(\"Argument must implement java.util.Set\");\n      * @param comps\n      * @throws IllegalArgumentException if any of the collections in comps do not implement Set\n      */\n+    @Override\n     public synchronized void addComposited(Collection<E>[] comps) {\n         for (int i = comps.length - 1; i >= 0; --i) {\n             this.addComposited(comps[i]);\n      * composited sets will throw IllegalArgumentException\n      * <p>\n      */\n+    @Override\n     public void setMutator(CollectionMutator<E> mutator) {\n         super.setMutator(mutator);\n     }\n      * @param obj Object to be removed\n      * @return true if the object is removed, false otherwise\n      */\n+    @Override\n     public boolean remove(Object obj) {\n         for (Set<? extends E> set : getCollections()) {\n             if (set.contains(obj)) return set.remove(obj);\n     /**\n      * @see Set#equals\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj instanceof Set) {\n     /**\n      * @see Set#hashCode\n      */\n+    @Override\n     public int hashCode() {\n         int code = 0;\n         for (E e : this) {\n--- a/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public void clear() {\n         collection.clear();\n         setOrder.clear();\n     }\n \n+    @Override\n     public OrderedIterator<E> iterator() {\n         return new OrderedSetIterator<E>(setOrder.listIterator(), collection);\n     }\n \n+    @Override\n     public boolean add(E object) {\n         if (collection.add(object)) {\n             setOrder.add(object);\n         return false;\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         boolean result = false;\n         for (E e : coll) {\n         return result;\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         boolean result = collection.remove(object);\n         setOrder.remove(object);\n         return result;\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         boolean result = false;\n         for (Iterator<?> it = coll.iterator(); it.hasNext();) {\n         return result;\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         boolean result = collection.retainAll(coll);\n         if (result == false) {\n         return result;\n     }\n \n+    @Override\n     public Object[] toArray() {\n         return setOrder.toArray();\n     }\n \n+    @Override\n     public <T> T[] toArray(T a[]) {\n         return setOrder.toArray(a);\n     }\n      * any custom toStrings will be ignored.\n      */\n     // Fortunately List.toString and Set.toString look the same\n+    @Override\n     public String toString() {\n         return setOrder.toString();\n     }\n             this.set = set;\n         }\n \n+        @Override\n         public E next() {\n             last = iterator.next();\n             return last;\n         }\n \n+        @Override\n         public void remove() {\n             set.remove(last);\n             iterator.remove();\n--- a/src/java/org/apache/commons/collections/set/MapBackedSet.java\n+++ b/src/java/org/apache/commons/collections/set/MapBackedSet.java\n         return map.keySet().toArray(array);\n     }\n \n+    @Override\n     public boolean equals(Object obj) {\n         return map.keySet().equals(obj);\n     }\n \n+    @Override\n     public int hashCode() {\n         return map.keySet().hashCode();\n     }\n--- a/src/java/org/apache/commons/collections/set/PredicatedSet.java\n+++ b/src/java/org/apache/commons/collections/set/PredicatedSet.java\n      * \n      * @return the decorated set\n      */\n+    @Override\n     protected Set<E> decorated() {\n         return (Set<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n      * \n      * @return the decorated sorted set\n      */\n+    @Override\n     protected SortedSet<E> decorated() {\n         return (SortedSet<E>) super.decorated();\n     }\n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSet.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.<E>decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Iterator<E> iterator() {\n         return UnmodifiableIterator.decorate(decorated().iterator());\n     }\n \n+    @Override\n     public boolean add(E object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean addAll(Collection<? extends E> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public void clear() {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean remove(Object object) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean removeAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override\n     public boolean retainAll(Collection<?> coll) {\n         throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public SortedSet<E> subSet(E fromElement, E toElement) {\n         SortedSet<E> sub = decorated().subSet(fromElement, toElement);\n         return new UnmodifiableSortedSet<E>(sub);\n     }\n \n+    @Override\n     public SortedSet<E> headSet(E toElement) {\n         SortedSet<E> sub = decorated().headSet(toElement);\n         return new UnmodifiableSortedSet<E>(sub);\n     }\n \n+    @Override\n     public SortedSet<E> tailSet(E fromElement) {\n         SortedSet<E> sub = decorated().tailSet(fromElement);\n         return new UnmodifiableSortedSet<E>(sub);\n--- a/src/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public boolean equals(Object object) {\n         if (object == this) {\n             return true;\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public int hashCode() {\n         return decorated().hashCode();\n     }\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public String toString() {\n         return decorated().toString();\n     }\n--- a/src/test/org/apache/commons/collections/BulkTest.java\n+++ b/src/test/org/apache/commons/collections/BulkTest.java\n      *\n      *  @return  a clone of this <code>BulkTest</code>\n      */\n+    @Override\n     public Object clone() {\n         try {\n             return super.clone();\n      *\n      *  @return the display name of this <code>BulkTest</code>\n      */\n+    @Override\n     public String toString() {\n         return getName() + \"(\" + verboseName + \") \";\n     }\n--- a/src/test/org/apache/commons/collections/LocalTestNode.java\n+++ b/src/test/org/apache/commons/collections/LocalTestNode.java\n      *\n      * @return true if equal\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object o) {\n \n     /**\n      * @return hash code\n      */\n+    @Override\n     public int hashCode() {\n         return getKey().hashCode() ^ getValue().hashCode();\n     }\n--- a/src/test/org/apache/commons/collections/TestArrayStack.java\n+++ b/src/test/org/apache/commons/collections/TestArrayStack.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public ArrayStack<E> makeObject() {\n         return new ArrayStack<E>();\n     }\n \n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testSearch() {\n         ArrayStack<E> stack = makeObject();\n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n     /**\n      * Set up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp() {\n     }\n \n     /**\n      * Tear down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown() {\n     }\n \n--- a/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n     /**\n      * Set up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp() {\n     }\n \n     /**\n      * Tear down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown() {\n     }\n \n         public Mock1(Mock1 mock) {\n             iVal = mock.iVal;\n         }\n+        @Override\n         public boolean equals(Object obj) {\n             if (obj instanceof Mock1) {\n                 if (iVal == ((Mock1) obj).iVal) {\n         public Mock2(Object val) {\n             iVal = val;\n         }\n+        @Override\n         public boolean equals(Object obj) {\n             if (obj instanceof Mock2) {\n                 if (iVal == ((Mock2) obj).iVal) {\n--- a/src/test/org/apache/commons/collections/TestLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestLinkedList.java\n         super(testName);\n     }\n \n+    @Override\n     public abstract LinkedList<T> makeObject();\n \n     /**\n      *\n      *  @return the collection field as a List\n      */\n+    @Override\n     public LinkedList<T> getCollection() {\n         return (LinkedList<T>) super.getCollection();\n     }\n     /**\n      *  Returns an empty {@link LinkedList}.\n      */\n+    @Override\n     public Collection<T> makeConfirmedCollection() {\n         return new LinkedList<T>();\n     }\n     /**\n      *  Returns a full {@link LinkedList}.\n      */\n+    @Override\n     public Collection<T> makeConfirmedFullCollection() {\n         List<T> list = new LinkedList<T>();\n         list.addAll(Arrays.asList(getFullElements()));\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n         return BulkTest.makeSuite(TestListUtils.class);\n     }\n \n+    @Override\n     public void setUp() {\n         fullArray = new String[]{a, b, c, d, e};\n         fullList = new ArrayList<String>(Arrays.asList(fullArray));\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n         in.put(\"5\", \"E\");\n \n         ResourceBundle b = new ListResourceBundle() {\n+            @Override\n             public Object[][] getContents() {\n                 final Object[][] contents = new Object[ in.size() ][2];\n                 final Iterator<String> i = in.keySet().iterator();\n--- a/src/test/org/apache/commons/collections/TestTransformerUtils.java\n+++ b/src/test/org/apache/commons/collections/TestTransformerUtils.java\n     /**\n      * Set up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp() {\n     }\n \n     /**\n      * Tear down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown() {\n     }\n \n--- a/src/test/org/apache/commons/collections/TestTreeMap.java\n+++ b/src/test/org/apache/commons/collections/TestTreeMap.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n      * \n      * @return the bag to be tested\n      */\n+    @Override\n     public abstract Bag<T> makeObject();\n \n     //-----------------------------------------------------------------------\n      *\n      * TODO: store a new serialized object on the disk.\n      */\n+    @Override\n     protected boolean skipSerializedCanonicalTests() {\n         return true;\n     }\n--- a/src/test/org/apache/commons/collections/bag/TestHashBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestHashBag.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public Bag<T> makeObject() {\n         return new HashBag<T>();\n     }\n     \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n--- a/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java\n         return PredicatedBag.decorate(bag, predicate);\n     }\n \n+    @Override\n     public Bag<T> makeObject() {\n         return decorateBag(new HashBag<T>(), truePredicate);\n     }\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n         return PredicatedSortedBag.decorate(bag, predicate);\n     }\n \n+    @Override\n     public SortedBag<T> makeObject() {\n         return decorateBag(new TreeBag<T>(), truePredicate);\n     }\n         assertTrue(\"natural order, so comparator should be null\", c == null);\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Bag<T> makeObject() {\n         return TransformedBag.decorate(new HashBag<T>(), (Transformer<T, T>) TestTransformedCollection.NOOP_TRANSFORMER);\n         assertEquals(true, bag.remove(new Integer((String) els[0])));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SortedBag<T> makeObject() {\n         return TransformedSortedBag.decorate(new TreeBag<T>(), (Transformer<T, T>) TestTransformedCollection.NOOP_TRANSFORMER);\n         assertEquals(true, bag.remove(new Integer((String) els[0])));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/bag/TestTreeBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTreeBag.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public SortedBag<T> makeObject() {\n         return new TreeBag<T>();\n     }\n         assertEquals(\"Should get last key\", \"D\", ((SortedBag<T>) bag).last());\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n     /**\n      * Override to return the empty BidiMap.\n      */\n+    @Override\n     public abstract BidiMap<K, V> makeObject();\n \n     /**\n      * Override to indicate to AbstractTestMap this is a BidiMap.\n      */\n+    @Override\n     public boolean isAllowDuplicateValues() {\n         return false;\n     }\n     /**\n      * Override as DualHashBidiMap didn't exist until version 3.\n      */\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n      * <p>\n      * This implementation checks the inverse map as well.\n      */\n+    @Override\n     public void verify() {\n         verifyInverse();\n         super.verify();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public BulkTest bulkTestMapEntrySet() {\n         return new TestBidiMapEntrySet();\n     }\n             this.main = main;\n         }\n \n+        @Override\n         public BidiMap<V, K> makeObject() {\n             return main.makeObject().inverseBidiMap();\n         }\n \n+        @Override\n         public BidiMap<V, K> makeFullMap() {\n             return main.makeFullMap().inverseBidiMap();\n         }\n \n+        @Override\n         public V[] getSampleKeys() {\n             return main.getSampleValues();\n         }\n+        @Override\n         public K[] getSampleValues() {\n             return main.getSampleKeys();\n         }\n \n+        @Override\n         public String getCompatibilityVersion() {\n             return main.getCompatibilityVersion();\n         }\n \n+        @Override\n         public boolean isAllowNullKey() {\n             return main.isAllowNullKey();\n         }\n \n+        @Override\n         public boolean isAllowNullValue() {\n             return main.isAllowNullValue();\n         }\n \n+        @Override\n         public boolean isPutAddSupported() {\n             return main.isPutAddSupported();\n         }\n \n+        @Override\n         public boolean isPutChangeSupported() {\n             return main.isPutChangeSupported();\n         }\n \n+        @Override\n         public boolean isSetValueSupported() {\n             return main.isSetValueSupported();\n         }\n \n+        @Override\n         public boolean isRemoveSupported() {\n             return main.isRemoveSupported();\n         }\n             super(\"TestBidiMapIterator\");\n         }\n \n+        @Override\n         public V[] addSetValues() {\n             return AbstractTestBidiMap.this.getNewSampleValues();\n         }\n \n+        @Override\n         public boolean supportsRemove() {\n             return AbstractTestBidiMap.this.isRemoveSupported();\n         }\n \n+        @Override\n         public boolean supportsSetValue() {\n             return AbstractTestBidiMap.this.isSetValueSupported();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeEmptyIterator() {\n             resetEmpty();\n             return AbstractTestBidiMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeObject() {\n             resetFull();\n             return AbstractTestBidiMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public BidiMap<K, V> getMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestBidiMap.this.getMap();\n         }\n \n+        @Override\n         public Map<K, V> getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestBidiMap.this.getConfirmed();\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             AbstractTestBidiMap.this.verify();\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestOrderedBidiMap.java\n             super(\"TestBidiOrderedMapIterator\");\n         }\n \n+        @Override\n         public V[] addSetValues() {\n             return AbstractTestOrderedBidiMap.this.getNewSampleValues();\n         }\n \n+        @Override\n         public boolean supportsRemove() {\n             return AbstractTestOrderedBidiMap.this.isRemoveSupported();\n         }\n \n+        @Override\n         public boolean supportsSetValue() {\n             return AbstractTestOrderedBidiMap.this.isSetValueSupported();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeEmptyIterator() {\n             resetEmpty();\n             return AbstractTestOrderedBidiMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public MapIterator<K, V> makeObject() {\n             resetFull();\n             return AbstractTestOrderedBidiMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public Map<K, V> getMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestOrderedBidiMap.this.map;\n         }\n \n+        @Override\n         public Map<K, V> getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestOrderedBidiMap.this.confirmed;\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             AbstractTestOrderedBidiMap.this.verify();\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n //    }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullValue() {\n         return false;\n     }\n         return (SortedBidiMap<K, V>) super.makeFullMap();\n     }\n \n+    @Override\n     public SortedMap<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>();\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestAbstractOrderedBidiMapDecorator.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestAbstractOrderedBidiMapDecorator.java\n         return new TestOrderedBidiMap<K, V>();\n     }\n \n+    @Override\n     public SortedMap<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>();\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullValue() {\n         return false;\n     }\n \n+    @Override\n     public boolean isSetValueSupported() {\n         return true;\n     }\n             super(map);\n         }\n \n+        @Override\n         public OrderedBidiMap<V, K> inverseBidiMap() {\n             if (inverse == null) {\n                 inverse = new TestOrderedBidiMap<V, K>(decorated().inverseBidiMap());\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualHashBidiMap.java\n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n+    @Override\n     public String[] ignoredTests() {\n         return new String[] { \"TestDualHashBidiMap.bulkTestInverseMap.bulkTestInverseMap\" };\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap.java\n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n+    @Override\n     public String[] ignoredTests() {\n         return new String[] {\"TestDualTreeBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n         super(testName);\n     }\n \n+    @Override\n     public DualTreeBidiMap<K, V> makeObject() {\n         return new DualTreeBidiMap<K, V>(\n                 new ReverseComparator<K>(ComparableComparator.<K> getInstance()),\n                 new ReverseComparator<V>(ComparableComparator.<V> getInstance()));\n     }\n \n+    @Override\n     public TreeMap<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>(new ReverseComparator<K>(ComparableComparator.<K>getInstance()));\n     }\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.Test2\";\n     }\n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n+    @Override\n     public String[] ignoredTests() {\n         return new String[] {\"TestDualTreeBidiMap2.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestTreeBidiMap.java\n         super(testName);\n     }\n \n+    @Override\n     public BidiMap<K, V> makeObject() {\n         return new TreeBidiMap<K, V>();\n     }\n     \n+    @Override\n     public TreeMap<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>();\n     }\n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n+    @Override\n     public String[] ignoredTests() {\n         return new String[] {\"TestTreeBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n     \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n     \n+    @Override\n     public boolean isAllowNullValue() {\n         return false;\n     }\n     \n+    @Override\n     public boolean isSetValueSupported() {\n         return false;\n     }\n     \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.3\";\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestUnmodifiableBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestUnmodifiableBidiMap.java\n         super(testName);\n     }\n \n+    @Override\n     public BidiMap<K, V> makeObject() {\n         return UnmodifiableBidiMap.decorate(new DualHashBidiMap<K, V>());\n     }\n \n+    @Override\n     public BidiMap<K, V> makeFullMap() {\n         BidiMap<K, V> bidi = new DualHashBidiMap<K, V>();\n         addSampleMappings(bidi);\n         return UnmodifiableBidiMap.decorate(bidi);\n     }\n \n+    @Override\n     public Map<K, V> makeConfirmedMap() {\n         return new HashMap<K, V>();\n     }\n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n+    @Override\n     public String[] ignoredTests() {\n         return new String[] {\"TestUnmodifiableBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutChangeSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestUnmodifiableOrderedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestUnmodifiableOrderedBidiMap.java\n         super(testName);\n     }\n \n+    @Override\n     public OrderedBidiMap<K, V> makeObject() {\n         return UnmodifiableOrderedBidiMap.decorate(new TreeBidiMap<K, V>());\n     }\n \n+    @Override\n     public BidiMap<K, V> makeFullMap() {\n         OrderedBidiMap<K, V> bidi = new TreeBidiMap<K, V>();\n         addSampleMappings(bidi);\n         return UnmodifiableOrderedBidiMap.decorate(bidi);\n     }\n \n+    @Override\n     public Map<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>();\n     }\n     /**\n      * Override to prevent infinite recursion of tests.\n      */\n+    @Override\n     public String[] ignoredTests() {\n         return new String[] {\"TestUnmodifiableOrderedBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullValue() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutChangeSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/bidimap/TestUnmodifiableSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestUnmodifiableSortedBidiMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public SortedBidiMap<K, V> makeObject() {\n         return UnmodifiableSortedBidiMap.decorate(new DualTreeBidiMap<K, V>());\n     }\n \n+    @Override\n     public SortedBidiMap<K, V> makeFullMap() {\n         SortedBidiMap<K, V> bidi = new DualTreeBidiMap<K, V>();\n         addSampleMappings(bidi);\n         return UnmodifiableSortedBidiMap.decorate(bidi);\n     }\n \n+    @Override\n     public SortedMap<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>();\n     }\n \n+    @Override\n     public boolean isSubMapViewsSerializable() {\n         // TreeMap sub map views have a bug in deserialization.\n         return false;\n     }\n \n+    @Override\n     public String[] ignoredTests() {\n         // Override to prevent infinite recursion of tests.\n         return new String[] {\"TestUnmodifiableSortedBidiMap.bulkTestInverseMap.bulkTestInverseMap\"};\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullValue() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutChangeSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public Buffer<E> makeObject() {\n         return BlockingBuffer.decorate(new MyBuffer<E>());\n     }\n \n+    @Override\n     public boolean isEqualsCheckable() {\n         return false;\n     }\n             this.obj = obj;\n         }\n \n+        @Override\n         public void run() {\n             try {\n                 // wait for other thread to block on get() or remove()\n             this.obj = obj;\n         }\n \n+        @Override\n         public void run() {\n             try {\n                 // wait for other thread to block on get() or remove()\n             this.action = action;\n         }\n \n+        @Override\n         public void run() {\n             try {\n                 if (action == \"get\") {\n             return get(0);\n         }\n \n+        @Override\n         public E remove() {\n             if (isEmpty()) {\n                 throw new BufferUnderflowException();\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestBoundedBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBoundedBuffer.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.2\";\n     }\n \n+    @Override\n     public boolean isEqualsCheckable() {\n         return false;\n     }\n \n+    @Override\n     public Buffer<E> makeObject() {\n         return BoundedBuffer.decorate(new UnboundedFifoBuffer<E>(), 1);\n     }\n             this(buffer, delay, 1);\n         }\n \n+        @Override\n         public void run() {\n             try {\n                 Thread.sleep(delay);\n             this(buffer, delay, 1);\n         }\n \n+        @Override\n         public void run() {\n             try {\n                 Thread.sleep(delay);\n--- a/src/test/org/apache/commons/collections/buffer/TestBoundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBoundedFifoBuffer.java\n      *  the buffer contains the same elements in the same sequence as the\n      *  list.\n      */\n+    @Override\n     public void verify() {\n         super.verify();\n         Iterator<E> iterator1 = getCollection().iterator();\n      * Overridden because UnboundedFifoBuffer doesn't allow null elements.\n      * @return false\n      */\n+    @Override\n     public boolean isNullSupported() {\n         return false;\n     }\n      * Overridden because UnboundedFifoBuffer isn't fail fast.\n      * @return false\n      */\n+    @Override\n     public boolean isFailFastSupported() {\n         return false;\n     }\n      *\n      *  @return an empty ArrayList\n      */\n+    @Override\n     public List<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n      *\n      *  @return a full ArrayList\n      */\n+    @Override\n     public List<E> makeConfirmedFullCollection() {\n         List<E> c = makeConfirmedCollection();\n         c.addAll(java.util.Arrays.asList(getFullElements()));\n      *\n      *  @return an empty BoundedFifoBuffer\n      */\n+    @Override\n     public BoundedFifoBuffer<E> makeObject() {\n         return new BoundedFifoBuffer<E>(100);\n     }\n         fail();\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestBoundedFifoBuffer2.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBoundedFifoBuffer2.java\n      *\n      *  @return a full BoundedFifoBuffer\n      */\n+    @Override\n     public Collection<E> makeFullCollection() {\n         return new BoundedFifoBuffer<E>(Arrays.asList(getFullElements()));\n     }\n      *\n      *  @return false\n      */\n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n      *  Overridden because the add operations raise BufferOverflowException\n      *  instead of UnsupportedOperationException.\n      */\n+    @Override\n     public void testUnsupportedAdd() {\n     }\n \n--- a/src/test/org/apache/commons/collections/buffer/TestCircularFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestCircularFifoBuffer.java\n      *  the buffer contains the same elements in the same sequence as the\n      *  list.\n      */\n+    @Override\n     public void verify() {\n         super.verify();\n         Iterator<E> iterator1 = getCollection().iterator();\n      * Overridden because UnboundedFifoBuffer doesn't allow null elements.\n      * @return false\n      */\n+    @Override\n     public boolean isNullSupported() {\n         return false;\n     }\n      * Overridden because UnboundedFifoBuffer isn't fail fast.\n      * @return false\n      */\n+    @Override\n     public boolean isFailFastSupported() {\n         return false;\n     }\n      *\n      * @return an empty ArrayList\n      */\n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n      *\n      * @return a full ArrayList\n      */\n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         Collection<E> c = makeConfirmedCollection();\n         c.addAll(java.util.Arrays.asList(getFullElements()));\n      *\n      * @return an empty BoundedFifoBuffer\n      */\n+    @Override\n     public Collection<E> makeObject() {\n         return new CircularFifoBuffer<E>(100);\n     }\n         assertEquals(true, b3.contains(\"c\"));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestPredicatedBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestPredicatedBuffer.java\n         return PredicatedBuffer.decorate(buffer, predicate);\n     }\n \n+    @Override\n     public Buffer<E> makeObject() {\n         return decorateCollection(new ArrayStack<E>(), truePredicate);\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayStack<E>();\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         ArrayStack<E> list = new ArrayStack<E>();\n         list.addAll(java.util.Arrays.asList(getFullElements()));\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestPriorityBuffer.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void verify() {\n         super.verify();\n      * Overridden because BinaryBuffer isn't fail fast.\n      * @return false\n      */\n+    @Override\n     public boolean isFailFastSupported() {\n         return false;\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         ArrayList<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n     /**\n      * Return a new, empty {@link Object} to used for testing.\n      */\n+    @Override\n     public Buffer<E> makeObject() {\n         return new PriorityBuffer<E>();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getFullElements() {\n         return (E[]) getFullNonNullStringElements();\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getOtherElements() {\n         return (E[]) getOtherNonNullStringElements();\n         return h1;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.2\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestSynchronizedBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestSynchronizedBuffer.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Buffer<E> makeObject() {\n         return SynchronizedBuffer.decorate(new UnboundedFifoBuffer<E>());\n     }\n \n+    @Override\n     public Collection<E> makeFullCollection() {\n         Buffer<E> buffer = new UnboundedFifoBuffer<E>();\n         buffer.addAll(Arrays.asList(getFullElements()));\n         return SynchronizedBuffer.decorate(buffer);\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayStack<E>();\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         ArrayStack<E> list = new ArrayStack<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n     }\n \n+    @Override\n     public boolean isNullSupported() {\n         return false;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestUnboundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestUnboundedFifoBuffer.java\n      *  Verifies that the ArrayList has the same elements in the same \n      *  sequence as the UnboundedFifoBuffer.\n      */\n+    @Override\n     public void verify() {\n         super.verify();\n         Iterator<E> iterator1 = getCollection().iterator();\n      * Overridden because UnboundedFifoBuffer doesn't allow null elements.\n      * @return false\n      */\n+    @Override\n     public boolean isNullSupported() {\n         return false;\n     }\n      * Overridden because UnboundedFifoBuffer isn't fail fast.\n      * @return false\n      */\n+    @Override\n     public boolean isFailFastSupported() {\n         return false;\n     }\n      *\n      *  @return an empty ArrayList\n      */\n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n      *\n      *  @return a full ArrayList\n      */\n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         Collection<E> c = makeConfirmedCollection();\n         c.addAll(java.util.Arrays.asList(getFullElements()));\n      *\n      *  @return an empty UnboundedFifoBuffer\n      */\n+    @Override\n     public Collection<E> makeObject() {\n         return new UnboundedFifoBuffer<E>(5);\n     }\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestUnmodifiableBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestUnmodifiableBuffer.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Collection<E> makeObject() {\n         return UnmodifiableBuffer.decorate(new UnboundedFifoBuffer<E>());\n     }\n \n+    @Override\n     public Collection<E> makeFullCollection() {\n         Buffer<E> buffer = new UnboundedFifoBuffer<E>();\n         buffer.addAll(Arrays.asList(getFullElements()));\n         return UnmodifiableBuffer.decorate(buffer);\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayStack<E>();\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         ArrayStack<E> list = new ArrayStack<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n     }\n \n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isNullSupported() {\n         return false;\n     }\n         } catch (UnsupportedOperationException ex) {}\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/AbstractTestCollection.java\n      * Returns true to indicate that the collection supports equals() comparisons.\n      * This implementation returns false;\n      */\n+    @Override\n     public boolean isEqualsCheckable() {\n         return false;\n     }\n     /**\n      * Return a new, empty {@link Collection} to be used for testing.\n      */\n+    @Override\n     public abstract Collection<E> makeObject();\n \n     /**\n         }\n     }\n \n+    @Override\n     public void testSerializeDeserializeThenCompare() throws Exception {\n         Object obj = makeObject();\n         if (obj instanceof Serializable && isTestSerialization()) {\n--- a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n     /**\n      * Run stock collection tests without Mutator, so turn off add, remove\n      */\n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n     /**\n      * Empty collection is empty composite\n      */\n+    @Override\n     public Collection<E> makeObject() {\n         return new CompositeCollection<E>();\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new HashSet<E>();\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getFullElements() {\n         return (E[]) new Object[] { \"1\", \"2\", \"3\", \"4\" };\n     /**\n      * Full collection consists of 4 collections, each with one element\n      */\n+    @Override\n     public Collection<E> makeFullCollection() {\n         CompositeCollection<E> compositeCollection = new CompositeCollection<E>();\n         E[] elements = getFullElements();\n     /**\n      * Full collection should look like a collection with 4 elements\n      */\n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         Collection<E> collection = new HashSet<E>();\n         collection.addAll(Arrays.asList(getFullElements()));\n      * Override testUnsupportedRemove, since the default impl expects removeAll,\n      * retainAll and iterator().remove to throw\n      */\n+    @Override\n     public void testUnsupportedRemove() {\n         resetFull();\n         try {\n         assertEquals(2, c.size());\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.3\";\n     }\n--- a/src/test/org/apache/commons/collections/collection/TestPredicatedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestPredicatedCollection.java\n         return PredicatedCollection.decorate(collection, predicate);\n     }\n \n+    @Override\n     public Collection<E> makeObject() {\n         return decorateCollection(new ArrayList<E>(), truePredicate);\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getFullElements() {\n         return (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n     }\n \n+    @Override\n     public Collection<E> makeFullCollection() {\n         List<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return decorateCollection(list, truePredicate);\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         List<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         assertTrue(\"Collection shouldn't contain illegal element\", !c.contains(\"four\"));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/collection/TestSynchronizedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestSynchronizedCollection.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Collection<E> makeObject() {\n         return SynchronizedCollection.decorate(new ArrayList<E>());\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         ArrayList<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Collection<Object> makeConfirmedCollection() {\n         return new ArrayList<Object>();\n     }\n \n+    @Override\n     public Collection<Object> makeConfirmedFullCollection() {\n         List<Object> list = new ArrayList<Object>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n     }\n     \n+    @Override\n     public Collection<Object> makeObject() {\n         return TransformedCollection.decorate(new ArrayList<Object>(), NOOP_TRANSFORMER);\n     }\n \n+    @Override\n     public Collection<Object> makeFullCollection() {\n         List<Object> list = new ArrayList<Object>();\n         list.addAll(Arrays.asList(getFullElements()));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Override\n     public Object[] getFullElements() {\n         return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n     }\n \n+    @Override\n     public Object[] getOtherElements() {\n         return new Object[] {\"9\", \"88\", \"678\", \"87\", \"98\", \"78\", \"99\"};\n     }\n         assertEquals(true, collection.remove(new Integer((String) els[0])));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/collection/TestUnmodifiableCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestUnmodifiableCollection.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public Collection<E> makeObject() {\n         return UnmodifiableCollection.decorate(new ArrayList<E>());\n     }\n \n+    @Override\n     public Collection<E> makeFullCollection() {\n         List<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return UnmodifiableCollection.decorate(list);\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n \n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         ArrayList<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n     }\n \n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n      * \n      * @return a full iterator\n      */\n+    @Override\n     public abstract Comparator<T> makeObject();\n \n     /**\n      * Overrides superclass to block tests.\n      */\n+    @Override\n     public boolean supportsEmptyCollections() {\n         return false;\n     }\n     /**\n      * Overrides superclass to block tests.\n      */\n+    @Override\n     public boolean supportsFullCollections() {\n         return false;\n     }\n      * Overrides superclass to set the compatability to version 2\n      * as there were no Comparators in version 1.x.\n      */\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"2\";\n     }\n--- a/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestBooleanComparator.java\n     // collections testing framework\n     // ------------------------------------------------------------------------\n \n+    @Override\n     public Comparator<Boolean> makeObject() {\n         return new BooleanComparator();\n     }\n \n+    @Override\n     public List<Boolean> getComparableObjectsOrdered() {\n         List<Boolean> list = new ArrayList<Boolean>();\n         list.add(new Boolean(false));\n         return list;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n--- a/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java\n         return new TestSuite(TestComparableComparator.class);\n     }\n \n+    @Override\n     public Comparator<Integer> makeObject() {\n         return new ComparableComparator<Integer>();\n     }\n \n+    @Override\n     public List<Integer> getComparableObjectsOrdered() {\n         List<Integer> list = new LinkedList<Integer>();\n         list.add(1);\n--- a/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n         return new TestSuite(TestComparatorChain.class);\n     }\n \n+    @Override\n     public Comparator<PseudoRow> makeObject() {\n         ComparatorChain<PseudoRow> chain = new ComparatorChain<PseudoRow>(new ColumnComparator(0));\n         chain.addComparator(new ColumnComparator(1), true); // reverse the second column\n         assertTrue(chain.compare(new Integer(4), new Integer(4)) == 0);\n     }\n \n+    @Override\n     public List<PseudoRow> getComparableObjectsOrdered() {\n         List<PseudoRow> list = new LinkedList<PseudoRow>();\n         // this is the correct order assuming a\n             return cols[colIndex];\n         }\n \n+        @Override\n         public String toString() {\n             StringBuilder buf = new StringBuilder();\n             buf.append(\"[\");\n             return buf.toString();\n         }\n \n+        @Override\n         public boolean equals(Object o) {\n             if (!(o instanceof PseudoRow)) {\n                 return false;\n             return 0;\n         }\n \n+        @Override\n         public int hashCode() {\n             return colIndex;\n         }\n \n+        @Override\n         public boolean equals(Object that) {\n             return that instanceof ColumnComparator && colIndex == ((ColumnComparator) that).colIndex;\n         }\n--- a/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n             super(testName);\n         }\n \n+        @Override\n         public Comparator<Integer> makeObject() {\n             return new NullComparator<Integer>();\n         }\n \n+        @Override\n         public List<Integer> getComparableObjectsOrdered() {\n             List<Integer> list = new LinkedList<Integer>();\n             list.add(new Integer(1));\n             return list;\n         }\n \n+        @Override\n         public String getCanonicalComparatorName(Object object) {\n             return super.getCanonicalComparatorName(object) + \"1\";\n         }\n             super(testName);\n         }\n \n+        @Override\n         public Comparator<Integer> makeObject() {\n             return new NullComparator<Integer>(false);\n         }\n \n+        @Override\n         public List<Integer> getComparableObjectsOrdered() {\n             List<Integer> list = new LinkedList<Integer>();\n             list.add(null);\n             return list;\n         }\n \n+        @Override\n         public String getCanonicalComparatorName(Object object) {\n             return super.getCanonicalComparatorName(object) + \"2\";\n         }\n--- a/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n      *\n      * @return Comparator that returns \"natural\" order\n      */\n+    @Override\n     public Comparator<Integer> makeObject() {\n         return new ReverseComparator<Integer>(Collections.<Integer>reverseOrder());\n     }\n \n+    @Override\n     public List<Integer> getComparableObjectsOrdered() {\n         List<Integer> list = new LinkedList<Integer>();\n         list.add(new Integer(1));\n      * doesn't adhere to the \"soft\" Comparator contract, and we've\n      * already \"cannonized\" the comparator returned by makeComparator.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testSerializeDeserializeThenCompare() throws Exception {\n         Comparator comp = new ReverseComparator(new ComparableComparator());\n--- a/src/test/org/apache/commons/collections/functors/TestAnyAllOnePredicate.java\n+++ b/src/test/org/apache/commons/collections/functors/TestAnyAllOnePredicate.java\n     /**\n      * Tests whether <code>getInstance</code> with a one element array returns the first element in the array.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     @Test\n     public final void singleElementArrayToGetInstance() {\n      * Tests that passing a singleton collection to <code>getInstance</code> returns the single element in the\n      * collection.\n      */\n+    @Override\n     @Test\n     public final void singletonCollectionToGetInstance() {\n         final Predicate<T> predicate = createMockPredicate(null);\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n      * \n      * @return a full iterator\n      */\n+    @Override\n     public abstract Iterator<E> makeObject();\n \n     /**\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestListIterator.java\n      *\n      * @return an empty iterator\n      */\n+    @Override\n     public abstract ListIterator<E> makeEmptyIterator();\n \n     /**\n      *\n      * @return a full iterator\n      */\n+    @Override\n     public abstract ListIterator<E> makeObject();\n \n     /**\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n      *\n      * @return an empty iterator\n      */\n+    @Override\n     public abstract MapIterator<K, V> makeEmptyIterator();\n \n     /**\n      *\n      * @return a full iterator\n      */\n+    @Override\n     public abstract MapIterator<K, V> makeObject();\n \n     /**\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public void testRemove() { // override\n         MapIterator<K, V> it = makeObject();\n         Map<K, V> map = getMap();\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestOrderedMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestOrderedMapIterator.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public abstract OrderedMapIterator<K, V> makeEmptyIterator();\n \n+    @Override\n     public abstract OrderedMapIterator<K, V> makeObject();\n \n     //-----------------------------------------------------------------------\n     /**\n      * Test that the empty list iterator contract is correct.\n      */\n+    @Override\n     public void testEmptyMapIterator() {\n         if (supportsEmptyIterator() == false) {\n             return;\n     /**\n      * Test that the full list iterator contract is correct.\n      */\n+    @Override\n     public void testFullMapIterator() {\n         if (supportsFullIterator() == false) {\n             return;\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java\n         super(testName);\n     }\n \n+    @Override\n     public ArrayIterator<E> makeEmptyIterator() {\n         return new ArrayIterator<E>(new Object[0]);\n     }\n \n+    @Override\n     public ArrayIterator<E> makeObject() {\n         return new ArrayIterator<E>(testArray);\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java\n         super(testName);\n     }\n \n+    @Override\n     public ArrayIterator<E> makeEmptyIterator() {\n         return new ArrayIterator<E>(new int[0]);\n     }\n \n+    @Override\n     public ArrayIterator<E> makeObject() {\n         return new ArrayIterator<E>(testArray);\n     }\n         return new ArrayIterator<E>(array, start, end);\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java\n         return new TestSuite(TestArrayListIterator.class);\n     }\n \n+    @Override\n     public ArrayListIterator<E> makeEmptyIterator() {\n         return new ArrayListIterator<E>(new Object[0]);\n     }\n \n+    @Override\n     public ArrayListIterator<E> makeObject() {\n         return new ArrayListIterator<E>(testArray);\n     }\n         return new ArrayListIterator<E>(array);\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java\n         return new TestSuite(TestArrayListIterator2.class);\n     }\n \n+    @Override\n     public ArrayListIterator<E> makeEmptyIterator() {\n         return new ArrayListIterator<E>(new int[0]);\n     }\n \n+    @Override\n     public ArrayListIterator<E> makeObject() {\n         return new ArrayListIterator<E>(testArray);\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n     private ArrayList<Integer> odds = null;\n     private ArrayList<Integer> fib = null;\n \n+    @Override\n     public void setUp() throws Exception {\n         super.setUp();\n         comparator = new ComparableComparator<Integer>();\n \n     //---------------------------------------------------- TestIterator Methods\n \n+    @Override\n     public CollatingIterator<Integer> makeEmptyIterator() {\n         return new CollatingIterator<Integer>(comparator);\n     }\n \n+    @Override\n     public CollatingIterator<Integer> makeObject() {\n         CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator);\n         iter.addIterator(evens.iterator());\n--- a/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java\n     /**\n      * Set up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp() {\n         array = new String[] { \"a\", \"b\", \"c\" };\n         initIterator();\n     /**\n      * Tear down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown() throws Exception {\n         iterator = null;\n     }\n      *\n      * @return \"empty\" FilterIterator\n      */\n+    @Override\n     public FilterIterator<E> makeEmptyIterator() {\n         return makeBlockAllFilter(new ArrayIterator<E>(array));\n     }\n      * \n      * @return a filtered iterator\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public FilterIterator<E> makeObject() {\n         list = new ArrayList<E>(Arrays.asList((E[]) array));\n--- a/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n     private Predicate<Integer> fourPred = null;\n     private Random random = new Random();\n \n+    @Override\n     public void setUp() {\n         list = new ArrayList<Integer>();\n         odds = new ArrayList<Integer>();\n \n     }\n \n+    @Override\n     public void tearDown() throws Exception {\n         list = null;\n         odds = null;\n--- a/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n         super(testName);\n     }\n \n+    @Override\n     public void setUp() {\n         list1 = new ArrayList<String>();\n         list1.add(\"One\");\n         list3.add(\"Six\");        \n     }\n \n+    @Override\n     public IteratorChain<String> makeEmptyIterator() {\n         ArrayList<String> list = new ArrayList<String>();\n         return new IteratorChain<String>(list.iterator());\n     }\n \n+    @Override\n     public IteratorChain<String> makeObject() {\n         IteratorChain<String> chain = new IteratorChain<String>();\n \n         assertEquals(1, list2.size());\n     }\n     \n+    @Override\n     public void testRemove() {\n         Iterator<String> iter = makeObject();\n \n--- a/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n         super(testName);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void setUp() {\n         list1 = new ArrayList<E>();\n         list1.add((E) \"Six\");\n     }\n \n+    @Override\n     public ResettableListIterator<E> makeEmptyIterator() {\n         ArrayList<E> list = new ArrayList<E>();\n         return new ListIteratorWrapper<E>(list.iterator());\n     }\n \n+    @Override\n     public ResettableListIterator<E> makeObject() {\n         return new ListIteratorWrapper<E>(list1.iterator());\n     }\n \n     }\n \n+    @Override\n     public void testRemove() {\n         ListIterator<E> iter = makeObject();\n \n--- a/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper2.java\n         super(testName);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void setUp() {\n         list1 = new ArrayList<E>();\n         list1.add((E) \"Six\");\n     }\n \n+    @Override\n     public ResettableListIterator<E> makeEmptyIterator() {\n         ArrayList<E> list = new ArrayList<E>();\n         return new ListIteratorWrapper<E>(list.listIterator());\n     }\n \n+    @Override\n     public ResettableListIterator<E> makeObject() {\n         return new ListIteratorWrapper<E>(list1.listIterator());\n     }\n \n     }\n \n+    @Override\n     public void testRemove() {\n         ListIterator<E> iter = makeObject();\n \n--- a/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java\n         super(testName);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public ObjectArrayIterator<E> makeEmptyIterator() {\n         return new ObjectArrayIterator<E>((E[]) new Object[0]);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public ObjectArrayIterator<E> makeObject() {\n         return new ObjectArrayIterator<E>((E[]) testArray);\n         return new ObjectArrayIterator<E>(array, start, end);\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java\n         return new TestSuite(TestObjectArrayListIterator.class);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public ObjectArrayListIterator<E> makeEmptyIterator() {\n         return new ObjectArrayListIterator<E>((E[]) new Object[0]);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public ObjectArrayListIterator<E> makeObject() {\n         return new ObjectArrayListIterator<E>((E[]) testArray);\n--- a/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator2.java\n         return new TestSuite(TestObjectArrayListIterator2.class);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public ObjectArrayListIterator<E> makeEmptyIterator() {\n         return new ObjectArrayListIterator<E>((E[]) new Object[0]);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public ObjectArrayListIterator<E> makeObject() {\n         return new ObjectArrayListIterator<E>((E[]) testArray);\n         return new ObjectArrayListIterator<E>(array);\n     }\n \n+    @Override\n     public boolean supportsAdd() {\n         return false;\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestObjectGraphIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectGraphIterator.java\n         return new TestSuite(TestObjectGraphIterator.class);\n     }\n \n+    @Override\n     public void setUp() {\n         list1 = new ArrayList<String>();\n         list1.add(\"One\");\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public ObjectGraphIterator<Object> makeEmptyIterator() {\n         ArrayList<Object> list = new ArrayList<Object>();\n         return new ObjectGraphIterator<Object>(list.iterator());\n     }\n \n+    @Override\n     public ObjectGraphIterator<Object> makeObject() {\n         return new ObjectGraphIterator<Object>(iteratorList.iterator());\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestReverseListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestReverseListIterator.java\n         super(testName);\n     }\n \n+    @Override\n     public ListIterator<E> makeEmptyIterator() {\n         return new ReverseListIterator<E>(new ArrayList<E>());\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public ReverseListIterator<E> makeObject() {\n         List<E> list = new ArrayList<E>(Arrays.asList((E[]) testArray));\n \n     // overrides\n     //-----------------------------------------------------------------------\n+    @Override\n     public void testEmptyListIteratorIsIndeedEmpty() {\n         ListIterator<E> it = makeEmptyIterator();\n \n         }\n     }\n \n+    @Override\n     public void testWalkForwardAndBack() {\n         ArrayList<E> list = new ArrayList<E>();\n         ListIterator<E> it = makeObject();\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n      * Returns a SingletonIterator from which\n      * the element has already been removed.\n      */\n+    @Override\n     public SingletonIterator<E> makeEmptyIterator() {\n         SingletonIterator<E> iter = makeObject();\n         iter.next();\n         return iter;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SingletonIterator<E> makeObject() {\n         return new SingletonIterator<E>((E) testValue);\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return true;\n     }\n \n+    @Override\n     public boolean supportsEmptyIterator() {\n         return true;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonIterator2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonIterator2.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SingletonIterator<E> makeEmptyIterator() {\n         SingletonIterator<E> iter = new SingletonIterator<E>((E) testValue);\n         return iter;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SingletonIterator<E> makeObject() {\n         return new SingletonIterator<E>((E) testValue, false);\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n \n+    @Override\n     public boolean supportsEmptyIterator() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n      * Returns a SingletonListIterator from which \n      * the element has already been removed.\n      */\n+    @Override\n     public SingletonListIterator<E> makeEmptyIterator() {\n         SingletonListIterator<E> iter = makeObject();\n         iter.next();\n         return iter;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SingletonListIterator<E> makeObject() {\n         return new SingletonListIterator<E>((E) testValue);\n     }\n \n+    @Override\n     public boolean supportsAdd() {\n         return false;\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return true;\n     }\n \n+    @Override\n     public boolean supportsEmptyIterator() {\n         return true;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java\n         super(testName);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void setUp() {\n         list1 = new ArrayList<E>();\n         list1.add((E) \"Five\");\n     }\n \n+    @Override\n     public UniqueFilterIterator<E> makeEmptyIterator() {\n         ArrayList<E> list = new ArrayList<E>();\n         return new UniqueFilterIterator<E>(list.iterator());\n     }\n \n+    @Override\n     public UniqueFilterIterator<E> makeObject() {\n         Iterator<E> i = list1.iterator();\n         return new UniqueFilterIterator<E>(i);\n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableIterator.java\n         testList = new ArrayList<E>(Arrays.asList((E[]) testArray));\n     }\n \n+    @Override\n     public Iterator<E> makeEmptyIterator() {\n         return UnmodifiableIterator.decorate(Collections.<E>emptyList().iterator());\n     }\n \n+    @Override\n     public Iterator<E> makeObject() {\n         return UnmodifiableIterator.decorate(testList.iterator());\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableListIterator.java\n         testList = new ArrayList<E>(Arrays.asList((E[]) testArray));\n     }\n \n+    @Override\n     public ListIterator<E> makeEmptyIterator() {\n         return UnmodifiableListIterator.decorate(Collections.<E>emptyList().listIterator());\n     }\n \n+    @Override\n     public ListIterator<E> makeObject() {\n         return UnmodifiableListIterator.decorate(testList.listIterator());\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n \n+    @Override\n     public boolean supportsAdd() {\n         return false;\n     }\n \n+    @Override\n     public boolean supportsSet() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n         super(testName);\n     }\n \n+    @Override\n     public MapIterator<K, V> makeEmptyIterator() {\n         return UnmodifiableMapIterator.decorate(new DualHashBidiMap<K, V>().mapIterator());\n     }\n \n+    @Override\n     public MapIterator<K, V> makeObject() {\n         return UnmodifiableMapIterator.decorate(getMap().mapIterator());\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public IterableMap<K, V> getMap() {\n         IterableMap<K, V> testMap = new DualHashBidiMap<K, V>();\n         return testMap;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map<K, V> getConfirmedMap() {\n         Map<K, V> testMap = new HashMap<K, V>();\n         return testMap;\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n \n+    @Override\n     public boolean supportsSetValue() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableOrderedMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableOrderedMapIterator.java\n         super(testName);\n     }\n \n+    @Override\n     public OrderedMapIterator<K, V> makeEmptyIterator() {\n         return UnmodifiableOrderedMapIterator.decorate(\n                 ListOrderedMap.decorate(new HashMap<K, V>()).mapIterator());\n     }\n \n+    @Override\n     public OrderedMapIterator<K, V> makeObject() {\n         return UnmodifiableOrderedMapIterator.decorate(getMap().mapIterator());\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public OrderedMap<K, V> getMap() {\n         OrderedMap<K, V> testMap = ListOrderedMap.decorate(new HashMap<K, V>());\n         return testMap;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map<K, V> getConfirmedMap() {\n         Map<K, V> testMap = new TreeMap<K, V>();\n         return testMap;\n     }\n \n+    @Override\n     public boolean supportsRemove() {\n         return false;\n     }\n \n+    @Override\n     public boolean supportsSetValue() {\n         return false;\n     }\n--- a/src/test/org/apache/commons/collections/keyvalue/TestDefaultMapEntry.java\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestDefaultMapEntry.java\n      * Subclasses should override this method to return a Map.Entry\n      * of the type being tested.\n      */\n+    @Override\n     public Map.Entry<K, V> makeMapEntry() {\n         return new DefaultMapEntry<K, V>(null, null);\n     }\n      * Subclasses should override this method to return a Map.Entry\n      * of the type being tested.\n      */\n+    @Override\n     public Map.Entry<K, V> makeMapEntry(K key, V value) {\n         return new DefaultMapEntry<K, V>(key, value);\n     }\n      * Subclasses should override this method.\n      *\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testConstructors() {\n         // 1. test key-value constructor\n         assertSame(value, entry2.getValue());\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testSelfReferenceHandling() {\n         Map.Entry<K, V> entry = makeMapEntry();\n--- a/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n             this.name = name;\n         }\n \n+        @Override\n         public boolean equals(Object obj)\n         {\n             return obj instanceof SystemHashCodeSimulatingKey \n                 && name.equals(((SystemHashCodeSimulatingKey)obj).name);\n         }\n \n+        @Override\n         public int hashCode()\n         {\n             return hashCode;\n--- a/src/test/org/apache/commons/collections/keyvalue/TestTiedMapEntry.java\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestTiedMapEntry.java\n     /**\n      * Gets the instance to test\n      */\n+    @Override\n     public Map.Entry<K, V> makeMapEntry(K key, V value) {\n         Map<K, V> map = new HashMap<K, V>();\n         map.put(key, value);\n     /**\n      * Tests the constructors.\n      */\n+    @Override\n     public void testConstructors() {\n         // ignore\n     }\n--- a/src/test/org/apache/commons/collections/keyvalue/TestUnmodifiableMapEntry.java\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestUnmodifiableMapEntry.java\n      * Subclasses should override this method to return a Map.Entry\n      * of the type being tested.\n      */\n+    @Override\n     public Map.Entry<K, V> makeMapEntry() {\n         return new UnmodifiableMapEntry<K, V>(null, null);\n     }\n      * Subclasses should override this method to return a Map.Entry\n      * of the type being tested.\n      */\n+    @Override\n     public Map.Entry<K, V> makeMapEntry(K key, V value) {\n         return new UnmodifiableMapEntry<K, V>(key, value);\n     }\n      * Subclasses should override this method.\n      *\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testConstructors() {\n         // 1. test key-value constructor\n         assertTrue(entry instanceof Unmodifiable);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testAccessorsAndMutators() {\n         Map.Entry<K, V> entry = makeMapEntry((K) key, (V) value);\n         assertSame(null, entry.getValue());\n     }\n \n+    @Override\n     public void testSelfReferenceHandling() {\n         // block\n     }\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n      *  Verifies that the test list implementation matches the confirmed list\n      *  implementation.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void verify() {\n         super.verify();\n     /**\n      * List equals method is defined.\n      */\n+    @Override\n     public boolean isEqualsCheckable() {\n         return true;\n     }\n     /**\n      * Returns an empty {@link ArrayList}.\n      */\n+    @Override\n     public Collection<E> makeConfirmedCollection() {\n         ArrayList<E> list = new ArrayList<E>();\n         return list;\n     /**\n      * Returns a full {@link ArrayList}.\n      */\n+    @Override\n     public Collection<E> makeConfirmedFullCollection() {\n         ArrayList<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n      *\n      * @return an empty list to be used for testing\n      */\n+    @Override\n     public abstract List<E> makeObject();\n \n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public List<E> makeFullCollection() {\n         // only works if list supports optional \"addAll(Collection)\"\n         List<E> list = makeObject();\n      *\n      * @return the confirmed field as a List\n      */\n+    @Override\n     public List<E> getConfirmed() {\n         return (List<E>) super.getConfirmed();\n     }\n \n         final List<E> listForC = Arrays.asList(getFullElements());\n         Collection<E> c = new AbstractCollection<E>() {\n+            @Override\n             public int size() {\n                 return listForC.size();\n             }\n \n+            @Override\n             public Iterator<E> iterator() {\n                 return listForC.iterator();\n             }\n      *\n      * TODO: store new serialized objects in CVS.\n      */\n+    @Override\n     protected boolean skipSerializedCanonicalTests() {\n         return true;\n     }\n            this.outer = outer;\n        }\n \n+       @Override\n        @SuppressWarnings(\"unchecked\")\n        public E[] getFullElements() {\n            List<E> l = Arrays.asList(outer.getFullElements());\n            return (E[]) l.subList(3, l.size() - 3).toArray();\n        }\n \n+       @Override\n        public E[] getOtherElements() {\n            return outer.getOtherElements();\n        }\n \n+       @Override\n        public boolean isAddSupported() {\n            return outer.isAddSupported();\n        }\n \n+       @Override\n        public boolean isSetSupported() {\n            return outer.isSetSupported();\n        }\n \n+       @Override\n        public boolean isRemoveSupported() {\n            return outer.isRemoveSupported();\n        }\n \n+       @Override\n        public List<E> makeObject() {\n            return outer.makeFullCollection().subList(4, 4);\n        }\n \n+       @Override\n        public List<E> makeFullCollection() {\n            int size = getFullElements().length;\n            return outer.makeFullCollection().subList(3, size - 3);\n        }\n \n+       @Override\n        public void resetEmpty() {\n            outer.resetFull();\n            this.setCollection(outer.getCollection().subList(4, 4));\n            this.setConfirmed(outer.getConfirmed().subList(4, 4));\n        }\n \n+       @Override\n        public void resetFull() {\n            outer.resetFull();\n            int size = outer.getConfirmed().size();\n            this.setConfirmed(outer.getConfirmed().subList(3, size - 3));\n        }\n \n+       @Override\n        public void verify() {\n            super.verify();\n            outer.verify();\n        }\n \n+       @Override\n        public boolean isTestSerialization() {\n            return false;\n        }\n            super(\"TestListIterator\");\n        }\n \n+       @Override\n        public E addSetValue() {\n            return AbstractTestList.this.getOtherElements()[0];\n        }\n \n+       @Override\n        public boolean supportsRemove() {\n            return AbstractTestList.this.isRemoveSupported();\n        }\n \n+       @Override\n        public boolean supportsAdd() {\n            return AbstractTestList.this.isAddSupported();\n        }\n \n+       @Override\n        public boolean supportsSet() {\n            return AbstractTestList.this.isSetSupported();\n        }\n \n+       @Override\n        public ListIterator<E> makeEmptyIterator() {\n            resetEmpty();\n            return AbstractTestList.this.getCollection().listIterator();\n        }\n \n+       @Override\n        public ListIterator<E> makeObject() {\n            resetFull();\n            return AbstractTestList.this.getCollection().listIterator();\n--- a/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestCursorableLinkedList.java\n \n     private CursorableLinkedList<E> list;\n \n+    @Override\n     public void setUp() {\n         list = new CursorableLinkedList<E>();\n     }\n \n+    @Override\n     public CursorableLinkedList<E> makeObject() {\n         return new CursorableLinkedList<E>();\n     }\n         assertEquals(0, it.nextIndex());\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testListIteratorSet() {\n         list.add((E) \"1\");\n         assertEquals(\"[]\",list.toString());\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testListIteratorAdd() {\n         ListIterator<E> it = list.listIterator();\n      *\n      *  @return an array of sublist serialization test names\n      */\n+    @Override\n     public String[] ignoredTests() {\n         ArrayList<String> list = new ArrayList<String>();\n         String prefix = \"TestCursorableLinkedList\";\n         return (String[]) list.toArray(new String[0]);\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"4.0\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestFixedSizeList.java\n+++ b/src/test/org/apache/commons/collections/list/TestFixedSizeList.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public List<E> makeObject() {\n         return FixedSizeList.decorate(new ArrayList<E>());\n     }\n \n+    @Override\n     public List<E> makeFullCollection() {\n         List<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return FixedSizeList.decorate(list);\n     }\n \n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestGrowthList.java\n+++ b/src/test/org/apache/commons/collections/list/TestGrowthList.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public List<E> makeObject() {\n         return new GrowthList<E>();\n     }\n \n+    @Override\n     public List<E> makeFullCollection() {\n         List<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n     /**\n      * Override.\n      */\n+    @Override\n     public void testListAddByIndexBoundsChecking() {\n         List<E> list;\n         E element = getOtherElements()[0];\n     /**\n      * Override.\n      */\n+    @Override\n     public void testListAddByIndexBoundsChecking2() {\n         List<E> list;\n         E element = getOtherElements()[0];\n     /**\n      * Override.\n      */\n+    @Override\n     public void testListSetByIndexBoundsChecking() {\n         List<E> list = makeObject();\n         E element = getOtherElements()[0];\n     /**\n      * Override.\n      */\n+    @Override\n     public void testListSetByIndexBoundsChecking2() {\n         List<E> list = makeFullCollection();\n         E element = getOtherElements()[0];\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.2\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestNodeCachingLinkedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestNodeCachingLinkedList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public NodeCachingLinkedList<E> makeObject() {\n         return new NodeCachingLinkedList<E>();\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestPredicatedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestPredicatedList.java\n         return PredicatedList.decorate(list, predicate);\n     }\n \n+    @Override\n     public List<E> makeObject() {\n         return decorateList(new ArrayList<E>(), truePredicate);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getFullElements() {\n         return (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n          list.contains(\"three\"));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public List<E> makeObject() {\n         return new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n     }\n \n+    @Override\n     public void testListIteratorSet() {\n         // override to block\n         resetFull();\n         } catch (UnsupportedOperationException ex) {}\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public E[] getFullNonNullElements() {\n         // override to avoid duplicate \"One\"\n         };\n     }\n \n+    @Override\n     public void testListIteratorAdd() {\n         // override to cope with Set behaviour\n         resetEmpty();\n         }\n     }\n \n+    @Override\n     public void testCollectionAddAll() {\n         // override for set behaviour\n         resetEmpty();\n       assertEquals(\"Third new element should be at index 0\", thirdNewElement, list.get(0));\n     }\n     \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void testListSetByIndex() {\n         // override for set behaviour\n     }\n \n     boolean extraVerify = true;\n+    @Override\n     public void testCollectionIteratorRemove() {\n         try {\n             extraVerify = false;\n         }\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public void verify() {\n         super.verify();\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestSynchronizedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestSynchronizedList.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public List<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n \n+    @Override\n     public List<E> makeObject() {\n         return SynchronizedList.decorate(new ArrayList<E>());\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestTransformedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTransformedList.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public List<E> makeConfirmedCollection() {\n         return new ArrayList<E>();\n     }\n \n+    @Override\n     public List<E> makeConfirmedFullCollection() {\n         List<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return list;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<E> makeObject() {\n         return TransformedList.decorate(new ArrayList<E>(), (Transformer<E, E>) TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<E> makeFullCollection() {\n         List<E> list = new ArrayList<E>();\n         assertEquals(true, list.remove(new Integer((String) els[0])));\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestTreeList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTreeList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public TreeList<E> makeObject() {\n         return new TreeList<E>();\n     }\n--- a/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n+++ b/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public UnmodifiableList<E> makeObject() {\n         return new UnmodifiableList<E>(new ArrayList<E>());\n     }\n \n+    @Override\n     public UnmodifiableList<E> makeFullCollection() {\n         ArrayList<E> list = new ArrayList<E>();\n         list.addAll(Arrays.asList(getFullElements()));\n         return new UnmodifiableList<E>(list);\n     }\n \n+    @Override\n     public boolean isSetSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestOrderedMap.java\n      *\n      * @return a map that is known to be valid\n      */\n+    @Override\n     public Map<K, V> makeConfirmedMap() {\n         return new TreeMap<K, V>(new NullComparator<K>());\n     }\n      * The only confirmed collection we have that is ordered is the sorted one.\n      * Thus, sort the keys.\n      */\n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public K[] getSampleKeys() {\n         List<K> list = new ArrayList<K>(Arrays.asList(super.getSampleKeys()));\n             super(\"InnerTestOrderedMapIterator\");\n         }\n \n+        @Override\n         public boolean supportsRemove() {\n             return AbstractTestOrderedMap.this.isRemoveSupported();\n         }\n \n+        @Override\n         public boolean isGetStructuralModify() {\n             return AbstractTestOrderedMap.this.isGetStructuralModify();\n         }\n \n+        @Override\n         public boolean supportsSetValue() {\n             return AbstractTestOrderedMap.this.isSetValueSupported();\n         }\n \n+        @Override\n         public OrderedMapIterator<K, V> makeEmptyIterator() {\n             resetEmpty();\n             return AbstractTestOrderedMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public OrderedMapIterator<K, V> makeObject() {\n             resetFull();\n             return AbstractTestOrderedMap.this.getMap().mapIterator();\n         }\n \n+        @Override\n         public OrderedMap<K, V> getMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestOrderedMap.this.getMap();\n         }\n \n+        @Override\n         public Map<K, V> getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n             return AbstractTestOrderedMap.this.getConfirmed();\n         }\n \n+        @Override\n         public void verify() {\n             super.verify();\n             AbstractTestOrderedMap.this.verify();\n--- a/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n //        return BulkTest.makeSuite(TestIdentityMap.class);  // causes race condition!\n     }\n \n+    @Override\n     public IdentityMap<K, V> makeObject() {\n         return new IdentityMap<K, V>();\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLRUMap.java\n         return BulkTest.makeSuite(TestLRUMap.class);\n     }\n \n+    @Override\n     public LRUMap<K, V> makeObject() {\n         return new LRUMap<K, V>();\n     }\n         return (LRUMap<K, V>) super.makeFullMap();\n     }\n \n+    @Override\n     public boolean isGetStructuralModify() {\n         return true;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n             super(size);\n         }\n \n+        @Override\n         protected boolean removeLRU(LinkEntry<K, V> entry) {\n             this.entry = entry;\n             this.key = entry.getKey();\n             super(size, scanUntilRemove);\n         }\n \n+        @Override\n         protected boolean removeLRU(LinkEntry<K, V> entry) {\n             return false;\n         }\n             super(size, true);\n         }\n \n+        @Override\n         protected boolean removeLRU(LinkEntry<K, V> entry) {\n             if (\"a\".equals(entry.getValue())) {\n                 return false;\n         SingleHashCode(String code) {\n             this.code = code;\n         }\n+        @Override\n         public int hashCode() {\n             // always return the same hashcode\n             // that way, it will end up in the same bucket\n             return 12;\n         }\n+        @Override\n         public String toString() {\n             return \"SingleHashCode:\" + code;\n         }\n         \n         final Map exceptions = new HashMap();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n+            @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                 exceptions.put(e, t.getName());\n                 super.uncaughtException(t, e);\n         for (int i = 0; i < threads.length; ++i) {\n             threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n \n+                @Override\n                 public void run() {\n                     int i = 0;\n                     try {\n         \n         final Map exceptions = new HashMap();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n+            @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                 exceptions.put(e, t.getName());\n                 super.uncaughtException(t, e);\n         for (int i = 0; i < threads.length; ++i) {\n             threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n \n+                @Override\n                 public void run() {\n                     int i = 0;\n                     try {\n         \n         final Map exceptions = new HashMap();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n+            @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                 exceptions.put(e, t.getName());\n                 super.uncaughtException(t, e);\n         for (int i = 0; i < threads.length; ++i) {\n             threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n \n+                @Override\n                 public void run() {\n                     int i = 0;\n                     try {\n         \n         final Map exceptions = new HashMap();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n+            @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                 exceptions.put(e, t.getName());\n                 super.uncaughtException(t, e);\n         for (int i = 0; i < threads.length; ++i) {\n             threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n \n+                @Override\n                 public void run() {\n                     int i = 0;\n                     try {\n--- a/src/test/org/apache/commons/collections/map/TestLinkedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLinkedMap.java\n         return BulkTest.makeSuite(TestLinkedMap.class);\n     }\n \n+    @Override\n     public LinkedMap<K, V> makeObject() {\n         return new LinkedMap<K, V>();\n     }\n         return (LinkedMap<K, V>) super.makeFullMap();\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3\";\n     }\n             super(\"TestListView\");\n         }\n \n+        @Override\n         public List<K> makeObject() {\n             return TestLinkedMap.this.makeObject().asList();\n         }\n \n+        @Override\n         public List<K> makeFullCollection() {\n             return TestLinkedMap.this.makeFullMap().asList();\n         }\n \n+        @Override\n         public K[] getFullElements() {\n             return TestLinkedMap.this.getSampleKeys();\n         }\n+        @Override\n         public boolean isAddSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isRemoveSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isSetSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isNullSupported() {\n             return TestLinkedMap.this.isAllowNullKey();\n         }\n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public ListOrderedMap<K, V> makeObject() {\n         return (ListOrderedMap<K, V>) ListOrderedMap.decorate(new HashMap<K, V>());\n     }\n             super(\"TestKeyListView\");\n         }\n \n+        @Override\n         public List<K> makeObject() {\n             return TestListOrderedMap.this.makeObject().keyList();\n         }\n+        @Override\n         public List<K> makeFullCollection() {\n             return TestListOrderedMap.this.makeFullMap().keyList();\n         }\n \n+        @Override\n         public K[] getFullElements() {\n             return TestListOrderedMap.this.getSampleKeys();\n         }\n+        @Override\n         public boolean isAddSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isRemoveSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isSetSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isNullSupported() {\n             return TestListOrderedMap.this.isAllowNullKey();\n         }\n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n             super(\"TestValueListView\");\n         }\n \n+        @Override\n         public List<V> makeObject() {\n             return TestListOrderedMap.this.makeObject().valueList();\n         }\n+        @Override\n         public List<V> makeFullCollection() {\n             return TestListOrderedMap.this.makeFullMap().valueList();\n         }\n \n+        @Override\n         public V[] getFullElements() {\n             return TestListOrderedMap.this.getSampleValues();\n         }\n+        @Override\n         public boolean isAddSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isRemoveSupported() {\n             return true;\n         }\n+        @Override\n         public boolean isSetSupported() {\n             return true;\n         }\n+        @Override\n         public boolean isNullSupported() {\n             return TestListOrderedMap.this.isAllowNullKey();\n         }\n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestListOrderedMap2.java\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap2.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public ListOrderedMap<K, V> makeObject() {\n         return new ListOrderedMap<K, V>();\n     }\n             super(\"TestListView\");\n         }\n \n+        @Override\n         public List<K> makeObject() {\n             return TestListOrderedMap2.this.makeObject().asList();\n         }\n \n+        @Override\n         public List<K> makeFullCollection() {\n             return TestListOrderedMap2.this.makeFullMap().asList();\n         }\n \n+        @Override\n         public K[] getFullElements() {\n             return TestListOrderedMap2.this.getSampleKeys();\n         }\n+        @Override\n         public boolean isAddSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isRemoveSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isSetSupported() {\n             return false;\n         }\n+        @Override\n         public boolean isNullSupported() {\n             return TestListOrderedMap2.this.isAllowNullKey();\n         }\n+        @Override\n         public boolean isTestSerialization() {\n             return false;\n         }\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestMultiKeyMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestMultiKeyMap.java\n         return BulkTest.makeSuite(TestMultiKeyMap.class);\n     }\n \n+    @Override\n     public MultiKeyMap<K, V> makeObject() {\n         return new MultiKeyMap<K, V>();\n     }\n \n+    @Override\n     public MultiKey<K>[] getSampleKeys() {\n         return getMultiKeyKeys();\n     }\n         };\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public V[] getSampleValues() {\n         return (V[]) new Object[] {\n         };\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public V[] getNewSampleValues() {\n         return (V[]) new Object[] {\n         };\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public MultiKey<K>[] getOtherKeys() {\n         return (MultiKey<K>[]) new MultiKey[] {\n         };\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n     // extend the AbstractTestMap\n     //-----------------------------------------------------------------------\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.3\";\n     }\n \n+    @Override\n     public Object makeObject() {\n         Map m = makeEmptyMap();\n         m.put(\"a\", \"1\");\n--- a/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n         return PredicatedMap.decorate(map, keyPredicate, valuePredicate);\n     }\n \n+    @Override\n     public IterableMap<K, V> makeObject() {\n         return decorateMap(new HashMap<K, V>(), truePredicate, truePredicate);\n     }\n \n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n         return PredicatedSortedMap.decorate(map, keyPredicate, valuePredicate);\n     }\n \n+    @Override\n     public SortedMap<K, V> makeObject() {\n         return decorateMap(new TreeMap<K, V>(), truePredicate, truePredicate);\n     }\n         return decorateMap(new TreeMap<K, V>(), testPredicate, testPredicate);\n     }\n \n+    @Override\n     public boolean isSubMapViewsSerializable() {\n         // TreeMap sub map views have a bug in deserialization.\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n             c == null);\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestReferenceIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestReferenceIdentityMap.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public ReferenceIdentityMap<K, V> makeObject() {\n         return new ReferenceIdentityMap<K, V>(ReferenceStrength.WEAK, ReferenceStrength.WEAK);\n     }\n \n+    @Override\n     public Map<K, V> makeConfirmedMap() {\n         // Testing against another [collections] class generally isn't a good idea,\n         // but the closest alternative is IdentityHashMap, which propagates reference-equality down to keySet and values.\n         return new IdentityMap<K, V>();\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullValue() {\n         return false;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public ReferenceMap<K, V> makeObject() {\n         return new ReferenceMap<K, V>(ReferenceStrength.WEAK, ReferenceStrength.WEAK);\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullValue() {\n         return false;\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestSingletonMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestSingletonMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public OrderedMap<K, V> makeObject() {\n         // need an empty singleton map, but thats not possible\n         // use a ridiculous fake instead to make the tests pass\n         return UnmodifiableOrderedMap.decorate(ListOrderedMap.decorate(new HashMap<K, V>()));\n     }\n \n+    @Override\n     public String[] ignoredTests() {\n         // the ridiculous map above still doesn't pass these tests\n         // but its not relevant, so we ignore them\n         };\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public SingletonMap<K, V> makeFullMap() {\n         return new SingletonMap<K, V>((K) ONE, (V) TWO);\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public K[] getSampleKeys() {\n         return (K[]) new Object[] { ONE };\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public V[] getSampleValues() {\n         return (V[]) new Object[] { TWO };\n     }\n \n+    @Override\n     @SuppressWarnings(\"unchecked\")\n     public V[] getNewSampleValues() {\n         return (V[]) new Object[] { TEN };\n //        }\n //    }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestStaticBucketMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestStaticBucketMap.java\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    @Override\n     public StaticBucketMap<K, V> makeObject() {\n         return new StaticBucketMap<K, V>(30);\n     }\n         return false;\n     }\n \n+    @Override\n     public String[] ignoredTests() {\n         String pre = \"TestStaticBucketMap.bulkTestMap\";\n         String post = \".testCollectionIteratorFailFast\";\n--- a/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public IterableMap<K, V> makeObject() {\n         return TransformedMap.decorate(new HashMap<K, V>(), TransformerUtils.<K> nopTransformer(),\n                 TransformerUtils.<V> nopTransformer());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n \n     //-------------------------------------------------------------------\n \n+    @Override\n     public IterableMap<K, V> makeObject() {\n         return (IterableMap<K, V>) UnmodifiableMap.decorate(new HashMap<K, V>());\n     }\n \n+    @Override\n     public boolean isPutChangeSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public IterableMap<K, V> makeFullMap() {\n         Map<K, V> m = new HashMap<K, V>();\n         addSampleMappings(m);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableOrderedMap.java\n \n     //-------------------------------------------------------------------\n \n+    @Override\n     public OrderedMap<K, V> makeObject() {\n         return UnmodifiableOrderedMap.decorate(ListOrderedMap.decorate(new HashMap<K, V>()));\n     }\n \n+    @Override\n     public boolean isPutChangeSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public OrderedMap<K, V> makeFullMap() {\n         OrderedMap<K, V> m = ListOrderedMap.decorate(new HashMap<K, V>());\n         addSampleMappings(m);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/map/TestUnmodifiableSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableSortedMap.java\n \n     //-------------------------------------------------------------------\n \n+    @Override\n     public SortedMap<K, V> makeObject() {\n         return UnmodifiableSortedMap.decorate(new TreeMap<K, V>());\n     }\n \n+    @Override\n     public boolean isPutChangeSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isPutAddSupported() {\n         return false;\n     }\n \n+    @Override\n     public boolean isRemoveSupported() {\n         return false;\n     }\n \n+    @Override\n     public SortedMap<K, V> makeFullMap() {\n         SortedMap<K, V> m = new TreeMap<K, V>();\n         addSampleMappings(m);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }", "timestamp": 1279733989, "metainfo": ""}