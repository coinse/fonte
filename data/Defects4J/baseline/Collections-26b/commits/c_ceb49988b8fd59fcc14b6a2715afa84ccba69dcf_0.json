{"sha": "ceb49988b8fd59fcc14b6a2715afa84ccba69dcf", "log": "Update serialization handling with tests   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.5 2003/12/07 01:15:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.6 2003/12/24 23:09:26 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/07 01:15:36 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/24 23:09:26 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n         this.map = map;\n         int entrySize = in.readInt();\n         for (int i = 0; i < entrySize; i++) {\n-            Object key = in.readObject();\n-            int value = in.readInt();\n-            map.put(key, new MutableInteger(value));\n+            Object obj = in.readObject();\n+            int count = in.readInt();\n+            map.put(obj, new MutableInteger(count));\n+            size += count;\n         }\n     }\n     \n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.3 2003/12/02 23:36:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.4 2003/12/24 23:09:26 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.bag;\n \n+import java.io.IOException;\n+import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Bag} fails.\n  *\n- * @version $Revision: 1.3 $ $Date: 2003/12/02 23:36:12 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/24 23:09:26 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n         assertEquals(1, c);\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n+        Bag bag = makeBag();\n+        if (!(bag instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n+        Bag bag2 = (Bag) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Bag should be empty\",0, bag.size());\n+        assertEquals(\"Bag should be empty\",0, bag2.size());\n+    }\n+\n+    public void testFullBagSerialization() throws IOException, ClassNotFoundException {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        int size = bag.size();\n+        if (!(bag instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n+        Bag bag2 = (Bag) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Bag should be same size\", size, bag.size());\n+        assertEquals(\"Bag should be same size\", size, bag2.size());\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in CVS.\n+     */\n+    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        Bag bag = makeBag();\n+        if(bag instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            Bag bag2 = (Bag) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n+            assertTrue(\"Bag is empty\",bag2.size()  == 0);\n+            assertEquals(bag, bag2);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in CVS.\n+     */\n+    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        if(bag instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            Bag bag2 = (Bag) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n+            assertEquals(\"Bag is the right size\",bag.size(), bag2.size());\n+            assertEquals(bag, bag2);\n+        }\n+    }\n }", "timestamp": 1072307366, "metainfo": ""}