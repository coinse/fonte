{"sha": "e97baa4b4aaf468afe1fe44b5d30a374754eceee", "log": "Fix spellings and javadoc bug 25937, from Janek Bogucki   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.11 2004/01/08 22:26:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.12 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n- * @version $Revision: 1.11 $ $Date: 2004/01/08 22:26:08 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n     //-----------------------------------------------------------------------\n     /**\n      * Compares this Bag to another.\n-     * This Bag equals another Bag if it contains the same number of occurances of\n+     * This Bag equals another Bag if it contains the same number of occurrences of\n      * the same elements.\n      * \n      * @param object  the Bag to compare to\n     }\n \n     /**\n-     * Gets a hash code for the Bag compatable with the definition of equals.\n+     * Gets a hash code for the Bag compatible with the definition of equals.\n      * The hash code is defined as the sum total of a hash code for each element.\n      * The per element hash code is defined as\n      * <code>(e==null ? 0 : e.hashCode()) ^ noOccurances)</code>.\n-     * This hash code is compatable with the Set interface.\n+     * This hash code is compatible with the Set interface.\n      * \n      * @return the hash code of the Bag\n      */\n--- a/src/java/org/apache/commons/collections/bag/HashBag.java\n+++ b/src/java/org/apache/commons/collections/bag/HashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/HashBag.java,v 1.5 2004/01/05 21:54:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/HashBag.java,v 1.6 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * data storage. This is the standard implementation of a bag.\n  * <p>\n  * A <code>Bag</code> stores each object in the collection together with a\n- * count of occurances. Extra methods on the interface allow multiple copies\n+ * count of occurrences. Extra methods on the interface allow multiple copies\n  * of an object to be added or removed at once. It is important to read the\n  * interface javadoc carefully as several methods violate the\n  * <code>Collection</code> interface specification.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.0)\n- * @version $Revision: 1.5 $ $Date: 2004/01/05 21:54:06 $\n+ * @version $Revision: 1.6 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.6 2004/01/05 21:54:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.7 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * iterator.\n  * <p>\n  * A <code>Bag</code> stores each object in the collection together with a\n- * count of occurances. Extra methods on the interface allow multiple copies\n+ * count of occurrences. Extra methods on the interface allow multiple copies\n  * of an object to be added or removed at once. It is important to read the\n  * interface javadoc carefully as several methods violate the\n  * <code>Collection</code> interface specification.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.0)\n- * @version $Revision: 1.6 $ $Date: 2004/01/05 21:54:06 $\n+ * @version $Revision: 1.7 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java,v 1.3 2004/01/05 21:46:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java,v 1.4 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Implementation of <code>BidiMap</code> that uses two <code>HashMap</code> instances.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualHashBidiMap.java,v 1.3 2004/01/05 21:46:49 scolebourne Exp $\n+ * @version $Id: DualHashBidiMap.java,v 1.4 2004/01/08 22:37:30 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n public class DualHashBidiMap\n         extends AbstractDualBidiMap implements Serializable {\n \n-    /** Ensure serialization compatability */\n+    /** Ensure serialization compatibility */\n     private static final long serialVersionUID = 721969328361808L;\n \n     /**\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.9 2004/01/05 21:46:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java,v 1.10 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * not store each object twice, which can save on memory use.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualTreeBidiMap.java,v 1.9 2004/01/05 21:46:49 scolebourne Exp $\n+ * @version $Id: DualTreeBidiMap.java,v 1.10 2004/01/08 22:37:30 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n public class DualTreeBidiMap\n         extends AbstractDualBidiMap implements SortedBidiMap, Serializable {\n \n-    /** Ensure serialization compatability */\n+    /** Ensure serialization compatibility */\n     private static final long serialVersionUID = 721969328361809L;\n     /** The comparator to use */\n     protected final Comparator comparator;\n--- a/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java,v 1.1 2004/01/02 02:14:29 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/PriorityBuffer.java,v 1.2 2004/01/08 22:37:31 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * </pre>\n  *\n  * @since Commons Collections 3.0 (previously BinaryHeap v1.0)\n- * @version $Revision: 1.1 $ $Date: 2004/01/02 02:14:29 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:31 $\n  * \n  * @author Peter Donald\n  * @author Ram Chidambaram\n     /**\n      * Percolates element down heap from the position given by the index.\n      * <p>\n-     * Assumes it is a mimimum heap.\n+     * Assumes it is a minimum heap.\n      *\n      * @param index the index for the element\n      */\n--- a/src/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/NullComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/NullComparator.java,v 1.9 2003/10/09 20:44:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/NullComparator.java,v 1.10 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * other objects.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.9 $ $Date: 2003/10/09 20:44:32 $ \n+ * @version $Revision: 1.10 $ $Date: 2004/01/08 22:37:29 $ \n  *\n  * @author Michael A. Smith\n  */\n     }\n     \n     /**\n-     *  Cosntruct an instance that sorts <code>null</code> higher or lower than\n+     *  Construct an instance that sorts <code>null</code> higher or lower than\n      *  any non-<code>null</code> object it is compared with.  When comparing\n      *  two non-<code>null</code> objects, the specified {@link Comparator} is\n      *  used.\n--- a/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ChainedClosure.java,v 1.1 2003/11/23 17:01:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ChainedClosure.java,v 1.2 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.Closure;\n \n /**\n- * Closure implementation that chains the specifed closures together.\n+ * Closure implementation that chains the specified closures together.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:01:35 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:29 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ChainedTransformer.java,v 1.2 2004/01/02 01:36:51 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ChainedTransformer.java,v 1.3 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Transformer implementation that chains the specifed closures together.\n+ * Transformer implementation that chains the specified closures together.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2004/01/02 01:36:51 $\n+ * @version $Revision: 1.3 $ $Date: 2004/01/08 22:37:29 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/StringValueTransformer.java,v 1.1 2003/11/23 23:25:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/StringValueTransformer.java,v 1.2 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Transformer implementation that returns the <code>String.valueof</code>.\n+ * Transformer implementation that returns the <code>String.valueOf</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 23:25:33 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:29 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.8 2003/12/01 22:49:00 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.9 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * the iterator back to the start if required.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.8 $ $Date: 2003/12/01 22:49:00 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/08 22:37:29 $\n  *\n  * @author James Strachan\n  * @author Mauricio S. Moura\n      * Checks whether the index is valid or not.\n      * \n      * @param bound  the index to check\n-     * @param type  the index type (for error messges)\n+     * @param type  the index type (for error messages)\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     protected void checkBound(final int bound, final String type ) {\n--- a/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.9 2004/01/08 22:26:07 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.10 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * An IteratorChain is an Iterator that wraps a number of Iterators.\n  * <p>\n- * This class makes mutiple iterators look like one to the caller\n+ * This class makes multiple iterators look like one to the caller\n  * When any method from the Iterator interface is called, the IteratorChain\n  * will delegate to a single underlying Iterator. The IteratorChain will\n  * invoke the Iterators in sequence until all Iterators are exhausted.\n  * iterators. In this case the class will function as an empty iterator.\n  * \n  * @since Commons Collections 2.1\n- * @version $Revision: 1.9 $ $Date: 2004/01/08 22:26:07 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/08 22:37:29 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java,v 1.2 2003/12/03 12:27:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java,v 1.3 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates an iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 12:27:37 $\n+ * @version $Revision: 1.3 $ $Date: 2004/01/08 22:37:29 $\n  * \n  * @author Stephen Colebourne\n  */\n      * <p>\n      * If the iterator is already unmodifiable it is returned directly.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      * @throws IllegalArgumentException if the iterator is null\n      */\n     public static Iterator decorate(Iterator iterator) {\n     /**\n      * Constructor.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      */\n     private UnmodifiableIterator(Iterator iterator) {\n         super();\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java,v 1.2 2003/12/03 12:27:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java,v 1.3 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates a list iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 12:27:37 $\n+ * @version $Revision: 1.3 $ $Date: 2004/01/08 22:37:29 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Decorates the specified iterator such that it cannot be modified.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      * @throws IllegalArgumentException if the iterator is null\n      */\n     public static ListIterator decorate(ListIterator iterator) {\n     /**\n      * Constructor.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      */\n     private UnmodifiableListIterator(ListIterator iterator) {\n         super();\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java,v 1.4 2003/12/03 12:27:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java,v 1.5 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates a map iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/03 12:27:37 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/08 22:37:29 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Decorates the specified iterator such that it cannot be modified.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      * @throws IllegalArgumentException if the iterator is null\n      */\n     public static MapIterator decorate(MapIterator iterator) {\n     /**\n      * Constructor.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      */\n     private UnmodifiableMapIterator(MapIterator iterator) {\n         super();\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java,v 1.3 2003/12/03 12:27:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java,v 1.4 2004/01/08 22:37:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates an ordered map iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:37 $\n+ * @version $Revision: 1.4 $ $Date: 2004/01/08 22:37:29 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Decorates the specified iterator such that it cannot be modified.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      * @throws IllegalArgumentException if the iterator is null\n      */\n     public static OrderedMapIterator decorate(OrderedMapIterator iterator) {\n     /**\n      * Constructor.\n      *\n-     * @param iterator  the iterator to decoarate\n+     * @param iterator  the iterator to decorate\n      */\n     private UnmodifiableOrderedMapIterator(OrderedMapIterator iterator) {\n         super();\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java,v 1.2 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Abstract Pair class to assist with creating correct Map Entry implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n      * \n-     * @return a suitable hashcode\n+     * @return a suitable hash code\n      */\n     public int hashCode() {\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n--- a/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java,v 1.2 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * itself as a key or value.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n      * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()},\n      * however subclasses may override this.\n      * \n-     * @return a suitable hashcode\n+     * @return a suitable hash code\n      */\n     public int hashCode() {\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n--- a/src/java/org/apache/commons/collections/keyvalue/MultiKey.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/MultiKey.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/MultiKey.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/MultiKey.java,v 1.2 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * can be used instead by creating an instance passing in the key and locale.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author Howard Lewis Ship\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * Gets the combined hashcode that is computed from all the keys.\n+     * Gets the combined hash code that is computed from all the keys.\n      * <p>\n      * This value is computed once and then cached, so elements should not\n      * change their hash codes once created (note that this is the same \n      * constraint that would be used if the individual keys elements were\n      * themselves {@link java.util.Map Map} keys.\n      * \n-     * @return the hashcode\n+     * @return the hash code\n      */\n     public int hashCode() {\n         return hashCode;\n--- a/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java,v 1.2 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * map, however this will probably mess up any iterators.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author Stephen Colebourne\n  */\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n      * \n-     * @return a suitable hashcode\n+     * @return a suitable hash code\n      */\n     public int hashCode() {\n         Object value = getValue();\n--- a/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/AbstractLinkedList.java,v 1.5 2003/12/29 01:04:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/AbstractLinkedList.java,v 1.6 2004/01/08 22:37:31 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/29 01:04:44 $\n+ * @version $Revision: 1.6 $ $Date: 2004/01/08 22:37:31 $\n  *\n  * @author Rich Dougherty\n  * @author Phil Steitz\n          * #previous()}. Set to <code>null</code> if {@link #next()} or {@link\n          * #previous()} haven't been called, or if the node has been removed\n          * with {@link #remove()} or a new node added with {@link #add(Object)}.\n-         * Should be accesed through {@link #getLastNodeReturned()} to enforce\n+         * Should be accessed through {@link #getLastNodeReturned()} to enforce\n          * this behaviour.\n          */\n         protected Node current;\n--- a/src/java/org/apache/commons/collections/list/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/CursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/CursorableLinkedList.java,v 1.2 2003/12/29 00:38:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/CursorableLinkedList.java,v 1.3 2004/01/08 22:37:31 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * with changes to the iterator. Note that the {@link #iterator()} method and\n  * sublists  do <b>not</b> provide this cursor behaviour.\n  * <p>\n- * The <code>Cursor</code> class is provided partly for backwards compatability\n+ * The <code>Cursor</code> class is provided partly for backwards compatibility\n  * and partly because it allows the cursor to be directly closed. Closing the\n  * cursor is optional because references are held via a <code>WeakReference</code>.\n  * For most purposes, simply modify the iterator and list at will, and then let\n  *\n  * @see java.util.LinkedList\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/29 00:38:08 $\n+ * @version $Revision: 1.3 $ $Date: 2004/01/08 22:37:31 $\n  * \n  * @author Rodney Waldhoff\n  * @author Janek Bogucki\n  */\n public class CursorableLinkedList extends AbstractLinkedList implements Serializable {\n \n-    /** Ensure serialization compatability */\n+    /** Ensure serialization compatibility */\n     private static final long serialVersionUID = 8836393098519411393L;\n \n     /** A list of the cursor currently open on this list */\n--- a/src/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/java/org/apache/commons/collections/list/LazyList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/LazyList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/LazyList.java,v 1.2 2004/01/08 22:37:31 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * and third element are all set to <code>null</code>.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * @version $Revision: 1.2 $ $Date: 2004/01/08 22:37:31 $\n  * \n  * @author Stephen Colebourne\n  * @author Arron Bates\n      * <p>\n      * If the requested index is greater than the current size, the list will \n      * grow to the new size and a new object will be returned from the factory.\n-     * Indexes inbetween the old size and the requested size are left with a \n+     * Indexes in-between the old size and the requested size are left with a \n      * placeholder that is replaced with a factory object when requested.\n      * \n      * @param index  the index to retrieve\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.8 2004/01/05 22:04:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.9 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * need for unusual subclasses is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2004/01/05 22:04:19 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/08 22:37:30 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n      * \n      * @param initialCapacity  the initial capacity, must be a power of two\n      * @param loadFactor  the load factor, must be &gt; 0.0f and generally &lt; 1.0f\n-     * @param threshhold  the threshold, must be sensible\n-     */\n-    protected AbstractHashedMap(int initialCapacity, float loadFactor, int threshhold) {\n+     * @param threshold  the threshold, must be sensible\n+     */\n+    protected AbstractHashedMap(int initialCapacity, float loadFactor, int threshold) {\n         super();\n         this.loadFactor = loadFactor;\n         this.data = new HashEntry[initialCapacity];\n-        this.threshold = threshhold;\n+        this.threshold = threshold;\n         init();\n     }\n \n      * A MapIterator returns the keys in the map. It also provides convenient\n      * methods to get the key and value, and set the value.\n      * It avoids the need to create an entrySet/keySet/values object.\n-     * It also avoids creating the Mep Entry object.\n+     * It also avoids creating the Map.Entry object.\n      * \n      * @return the map iterator\n      */\n     /**\n      * Gets the standard Map hashCode.\n      * \n-     * @return the hashcode defined in the Map interface\n+     * @return the hash code defined in the Map interface\n      */\n     public int hashCode() {\n         int total = 0;\n--- a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java,v 1.6 2004/01/05 22:04:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java,v 1.7 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/01/05 22:04:19 $\n+ * @version $Revision: 1.7 $ $Date: 2004/01/08 22:37:30 $\n  *\n  * @author java util LinkedHashMap\n  * @author Stephen Colebourne\n      * \n      * @param initialCapacity  the initial capacity, must be a power of two\n      * @param loadFactor  the load factor, must be > 0.0f and generally < 1.0f\n-     * @param threshhold  the threshold, must be sensible\n-     */\n-    protected AbstractLinkedMap(int initialCapacity, float loadFactor, int threshhold) {\n-        super(initialCapacity, loadFactor, threshhold);\n+     * @param threshold  the threshold, must be sensible\n+     */\n+    protected AbstractLinkedMap(int initialCapacity, float loadFactor, int threshold) {\n+        super(initialCapacity, loadFactor, threshold);\n     }\n \n     /**\n      * A MapIterator returns the keys in the map. It also provides convenient\n      * methods to get the key and value, and set the value.\n      * It avoids the need to create an entrySet/keySet/values object.\n-     * It also avoids creating the Mep Entry object.\n      * \n      * @return the map iterator\n      */\n      * A MapIterator returns the keys in the map. It also provides convenient\n      * methods to get the key and value, and set the value.\n      * It avoids the need to create an entrySet/keySet/values object.\n-     * It also avoids creating the Mep Entry object.\n      * \n      * @return the map iterator\n      */\n--- a/src/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/java/org/apache/commons/collections/map/CompositeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/CompositeMap.java,v 1.4 2004/01/05 22:04:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/CompositeMap.java,v 1.5 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * strategy is provided then add and remove are unsupported.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/01/05 22:04:19 $\n+ * @version $Revision: 1.5 $ $Date: 2004/01/08 22:37:30 $\n  *\n  * @author Brian McCallister\n  */\n          * Called when adding a new Composited Map results in a\n          * key collision.\n          *\n-         * @param composite  the CompositeMap withthe collision\n+         * @param composite  the CompositeMap with the collision\n          * @param existing  the Map already in the composite which contains the\n          *        offending key\n          * @param added  the Map being added\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.10 2004/01/05 22:04:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/Flat3Map.java,v 1.11 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.10 $ $Date: 2004/01/05 22:04:19 $\n+ * @version $Revision: 1.11 $ $Date: 2004/01/08 22:37:30 $\n  *\n  * @author Stephen Colebourne\n  */\n     /**\n      * Gets the standard Map hashCode.\n      * \n-     * @return the hashcode defined in the Map interface\n+     * @return the hash code defined in the Map interface\n      */\n     public int hashCode() {\n         if (delegateMap != null) {\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.12 2004/01/05 22:04:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.13 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A <code>Map</code> implementation that is a general purpose alternative\n  * to <code>HashMap</code>.\n  * <p>\n- * This implementation improves on the JDK1.4 HahMap by adding the \n+ * This implementation improves on the JDK1.4 HashMap by adding the \n  * {@link org.apache.commons.collections.MapIterator MapIterator}\n  * functionality and many methods for subclassing.\n  * <p>\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.12 $ $Date: 2004/01/05 22:04:19 $\n+ * @version $Revision: 1.13 $ $Date: 2004/01/08 22:37:30 $\n  *\n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.8 2004/01/05 22:15:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.9 2004/01/08 22:37:30 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link #remove(Object) remove} and {@link #containsKey(Object) containsKey}\n  * operations, assuming (approximate) uniform hashing and\n  * that the number of entries does not exceed the number of buckets.  If the\n- * number of entries exceeds the number of buckets or if the hashcodes of the\n+ * number of entries exceeds the number of buckets or if the hash codes of the\n  * objects are not uniformly distributed, these operations have a worst case\n  * scenario that is proportional to the number of elements in the map\n  * (<i>O(n)</i>).<p>\n  * operations will affect the map.<p>\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.8 $ $Date: 2004/01/05 22:15:14 $\n+ * @version $Revision: 1.9 $ $Date: 2004/01/08 22:37:30 $\n  * \n  * @author Berin Loritsch\n  * @author Gerhard Froehlich\n     }\n \n     /**\n-     * Gets the hashcode, as per the Map specification.\n-     * \n-     * @return the hashcode\n+     * Gets the hash code, as per the Map specification.\n+     * \n+     * @return the hash code\n      */\n     public int hashCode() {\n         int hashCode = 0;", "timestamp": 1073601451, "metainfo": ""}