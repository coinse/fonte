{"sha": "ff9345bae1512e398400fd8c81f7a69cd6c9d135", "log": "Reverted to [collections] javadoc style   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.37 2003/09/07 08:45:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.38 2003/09/07 15:09:34 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A set of {@link Collection} related utility methods.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.37 $ $Date: 2003/09/07 08:45:16 $\n+ * @version $Revision: 1.38 $ $Date: 2003/09/07 15:09:34 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      *    <li><code>a.size()</code> and <code>b.size()</code> represent the \n      *    total cardinality of <i>a</i> and <i>b</i>, resp. </li>\n      *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n-     * </ul></p>\n+     * </ul>\n      *\n      * @see #isSubCollection\n      * @see Collection#containsAll\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.5 2003/09/05 03:35:07 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.6 2003/09/07 15:09:34 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that additions match a specified predicate.\n  * <p>\n  * If an object cannot be added to the map, an IllegalArgumentException\n- * is thrown.</p>\n+ * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/09/05 03:35:07 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/07 15:09:34 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n      * Factory method to create a predicated (validating) map.\n      * <p>\n      * If there are any elements already in the list being decorated, they\n-     * are validated.</p>\n+     * are validated.\n      * \n      * @param map  the map to decorate, must not be null\n      * @param keyPredicate  the predicate to validate the keys, null means no check\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedMap.java,v 1.4 2003/09/05 03:35:07 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedMap.java,v 1.5 2003/09/07 15:09:34 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to validate that additions match a specified predicate.\n  * <p>\n  * If an object cannot be added to the map, an IllegalArgumentException\n- * is thrown.</p>\n+ * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/05 03:35:07 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/07 15:09:34 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n      * Factory method to create a predicated (validating) sorted map.\n      * <p>\n      * If there are any elements already in the list being decorated, they\n-     * are validated.</p>\n+     * are validated.\n      * \n      * @param map  the map to decorate, must not be null\n      * @param keyPredicate  the predicate to validate the keys, null means no check\n--- a/src/java/org/apache/commons/collections/decorators/TransformedSortedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSortedMap.java,v 1.3 2003/09/05 03:35:07 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSortedMap.java,v 1.4 2003/09/07 15:09:34 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/09/05 03:35:07 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/07 15:09:34 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create a transforming sorted map.\n      * <p>\n      * If there are any elements already in the map being decorated, they\n-     * are NOT transformed.</p>\n+     * are NOT transformed.\n      * \n      * @param map  the map to decorate, must not be null\n      * @param keyTransformer  the predicate to validate the keys, null means no transformation\n--- a/src/java/org/apache/commons/collections/decorators/UnmodifiableBoundedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableBoundedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableBoundedCollection.java,v 1.3 2003/09/05 03:35:07 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableBoundedCollection.java,v 1.4 2003/09/07 15:09:34 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * examining the package scope variables.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/09/05 03:35:07 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/07 15:09:34 $\n  * \n  * @author Stephen Colebourne\n  */\n      * Factory method to create an unmodifiable bounded collection.\n      * <p>\n      * This method is capable of drilling down through up to 1000 other decorators \n-     * to find a suitable BoundedCollection.</p>\n+     * to find a suitable BoundedCollection.\n      * \n      * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n      * @throws IllegalArgumentException if bag is null", "timestamp": 1062947374, "metainfo": ""}