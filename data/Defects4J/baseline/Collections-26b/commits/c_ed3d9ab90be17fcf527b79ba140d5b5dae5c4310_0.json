{"sha": "ed3d9ab90be17fcf527b79ba140d5b5dae5c4310", "log": "[COLLECTIONS-330] javadoc: add warning about calling get() while iterating  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n import java.util.Map;\n \n import org.apache.commons.collections.BoundedMap;\n+import org.apache.commons.collections.MapIterator;\n \n /**\n  * A <code>Map</code> implementation with a fixed maximum size which removes\n  * Iteration of any kind, including setting the value by iteration, does not\n  * change the order. Queries such as containsKey and containsValue or access\n  * via views also do not change the order.\n+ * <p>\n+ * A somewhat subtle ramification of the least recently used\n+ * algorithm is that calls to {@link #get(Object)} stand a very good chance\n+ * of modifying the map's iteration order and thus invalidating any\n+ * iterators currently in use.  It is therefore suggested that iterations\n+ * over an {@link LRUMap} instance access entry values only through a\n+ * {@link MapIterator} or {@link #entrySet()} iterator.\n  * <p>\n  * The map implements <code>OrderedMap</code> and entries may be queried using\n  * the bidirectional <code>OrderedMapIterator</code>. The order returned is", "timestamp": 1297382279, "metainfo": ""}