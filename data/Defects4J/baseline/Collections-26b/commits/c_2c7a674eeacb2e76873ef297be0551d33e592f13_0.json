{"sha": "2c7a674eeacb2e76873ef297be0551d33e592f13", "log": "add IntList to List adapter   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/IntListList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListList.java,v 1.1 2003/01/06 03:57:42 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/06 03:57:42 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * Adapts an {@link IntList} to the\n+ * {@link java.util.List List} interface.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/06 03:57:42 $\n+ * @author Rodney Waldhoff \n+ */\n+public class IntListList extends IntCollectionCollection implements List {\n+    \n+    public IntListList(IntList list) {\n+        super(list);        \n+        _list = list;\n+    }\n+    \n+    public void add(int index, Object element) {\n+        _list.add(index,((Number)element).intValue());\n+    }\n+\n+    public boolean addAll(int index, Collection c) {\n+        return _list.addAll(index,CollectionIntCollection.wrap(c));\n+    }\n+\n+    public Object get(int index) {\n+        return new Integer(_list.get(index));\n+    }\n+\n+    public int indexOf(Object element) {\n+        return _list.indexOf(((Number)element).intValue());\n+    }\n+\n+    public int lastIndexOf(Object element) {\n+        return _list.lastIndexOf(((Number)element).intValue());\n+    }\n+\n+    public ListIterator listIterator() {\n+        return IntListIteratorListIterator.wrap(_list.listIterator());\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return IntListIteratorListIterator.wrap(_list.listIterator(index));\n+    }\n+\n+    public Object remove(int index) {\n+        return new Integer(_list.removeElementAt(index));\n+    }\n+\n+    public Object set(int index, Object element) {\n+        return new Integer(_list.set(index, ((Number)element).intValue() ));\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        return IntListList.wrap(_list.subList(fromIndex,toIndex));\n+    }\n+\n+    public static List wrap(IntList list) {\n+        return null == list ? null : new IntListList(list);\n+    }\n+\n+    private IntList _list = null;\n+\n+}", "timestamp": 1041825462, "metainfo": ""}