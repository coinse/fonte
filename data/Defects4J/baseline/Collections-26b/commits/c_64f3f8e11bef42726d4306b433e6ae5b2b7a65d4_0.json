{"sha": "64f3f8e11bef42726d4306b433e6ae5b2b7a65d4", "log": "Rename BidiMap removeKey to removeValue   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.8 2003/11/02 19:48:39 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.9 2003/11/08 18:40:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.AbstractMapEntryDecorator;\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.ResetableMapIterator;\n-import org.apache.commons.collections.pairs.TiedMapEntry;\n \n /**\n  * Abstract <code>BidiMap</code> implemented using two maps.\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.8 2003/11/02 19:48:39 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.9 2003/11/08 18:40:17 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n         return maps[1].get(value);\n     }\n \n-    public Object removeKey(Object value) {\n+    public Object removeValue(Object value) {\n         Object key = null;\n         if (maps[1].containsKey(value)) {\n             key = maps[1].remove(value);\n             canRemove = false;\n         }\n         \n-        public Map.Entry asMapEntry() {\n-            return new TiedMapEntry(map, getKey()) {\n-                public Object setValue(Object value) {\n-                    if (map.maps[1].containsKey(value) &&\n-                        map.maps[1].get(value) != last.getKey()) {\n-                        throw new IllegalArgumentException(\"Cannot use setValue() when the object being set is already in the map\");\n-                    }\n-                    return super.setValue(value);\n-                }\n-            };\n-        }\n-        \n         public String toString() {\n             if (last == null) {\n                 return \"MapIterator[\" + getKey() + \"=\" + getValue() + \"]\";\n--- a/src/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.5 2003/11/02 15:27:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.6 2003/11/08 18:40:17 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * \n  * @see org.apache.commons.collections.DualHashBidiMap\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/11/02 15:27:53 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/08 18:40:17 $\n  *\n  * @author Stephen Colebourne\n  */\n      * @throws UnsupportedOperationException if this method is not supported\n      *  by the implementation\n      */\n-    Object removeKey(Object value);\n+    Object removeValue(Object value);\n     \n     /**\n      * Gets a view of this map where the keys and values are reversed.", "timestamp": 1068316817, "metainfo": ""}