{"sha": "cb39538c27f4fb7a0d8949998861dd2438f2b1cc", "log": "Fix ListOrderedSet to add new factory and direct constructor   ", "commit": "\n--- a/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2004/06/03 22:02:13 $\n+ * @version $Revision: 1.9 $ $Date: 2004/06/07 21:42:12 $\n  * \n  * @author Stephen Colebourne\n  * @author Henning P. Schmiedehausen\n     protected final List setOrder;\n \n     /**\n+     * Factory method to create an ordered set specifying the list and set to use.\n+     * \n+     * @param set  the set to decorate, must be empty and not null\n+     * @param list  the list to decorate, must be empty and not null\n+     * @throws IllegalArgumentException if set or list is null\n+     * @throws IllegalArgumentException if either the set or list is not empty\n+     * @since Commons Collections 3.1\n+     */\n+    public static ListOrderedSet decorate(Set set, List list) {\n+        if (set == null) {\n+            throw new IllegalArgumentException(\"Set must not be null\");\n+        }\n+        if (list == null) {\n+            throw new IllegalArgumentException(\"List must not be null\");\n+        }\n+        if (set.size() > 0 || list.size() > 0) {\n+            throw new IllegalArgumentException(\"Set and List must be empty\");\n+        }\n+        return new ListOrderedSet(set, list);\n+    }\n+\n+    /**\n      * Factory method to create an ordered set.\n      * <p>\n      * An <code>ArrayList</code> is used to retain order.\n      * A <code>HashSet</code> is used for the set behaviour.\n      * \n      * @param list  the list to decorate, must not be null\n-     * @throws IllegalArgumentException if set is null\n+     * @throws IllegalArgumentException if list is null\n      */\n     public static ListOrderedSet decorate(List list) {\n+        if (list == null) {\n+            throw new IllegalArgumentException(\"List must not be null\");\n+        }\n         Set set = new HashSet(list);\n         list.retainAll(set);\n         \n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a new empty <code>ListOrderedSet</code> using\n+     * a <code>HashSet</code> and an <code>ArrayList</code> internally.\n+     * \n+     * @since Commons Collections 3.1\n+     */\n+    public ListOrderedSet() {\n+        super(new HashSet());\n+        setOrder = new ArrayList();\n+    }\n+\n     /**\n      * Constructor that wraps (not copies).\n      * \n--- a/src/test/org/apache/commons/collections/set/TestAll.java\n+++ b/src/test/org/apache/commons/collections/set/TestAll.java\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2004/06/02 22:12:14 $\n+ * @version $Revision: 1.9 $ $Date: 2004/06/07 21:42:12 $\n  * \n  * @author Stephen Colebourne\n  */\n         \n         suite.addTest(TestCompositeSet.suite());\n         suite.addTest(TestListOrderedSet.suite());\n+        suite.addTest(TestListOrderedSet2.suite());\n         suite.addTest(TestMapBackedSet.suite());\n         suite.addTest(TestMapBackedSet2.suite());\n         suite.addTest(TestPredicatedSet.suite());\n--- a/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/06/02 22:12:14 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/07 21:42:12 $\n  * \n  * @author Henning P. Schmiedehausen\n  * @author Stephen Colebourne\n         assertSame(TWO, set.get(2));\n         assertSame(ONE, set.get(3));\n     }\n-    \n+\n+    public void testDecorator() {\n+        try {\n+            ListOrderedSet.decorate((List) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.decorate((Set) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.decorate(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.decorate(new HashSet(), null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.decorate(null, new ArrayList());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet2.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Extension of {@link TestSet} for exercising the {@link ListOrderedSet}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/06/07 21:42:12 $\n+ * \n+ * @author Henning P. Schmiedehausen\n+ * @author Stephen Colebourne\n+ */\n+public class TestListOrderedSet2 extends AbstractTestSet {\n+\n+    public TestListOrderedSet2(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestListOrderedSet2.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestListOrderedSet2.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Set makeEmptySet() {\n+        return new ListOrderedSet();\n+    }\n+\n+    protected Set setupSet() {\n+        Set set = makeEmptySet();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    public void testOrdering() {\n+        Set set = setupSet();\n+        Iterator it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+    \n+    private static final Integer ZERO = new Integer(0);\n+    private static final Integer ONE = new Integer(1);\n+    private static final Integer TWO = new Integer(2);\n+    private static final Integer THREE = new Integer(3);\n+    \n+    public void testListAddRemove() {\n+        ListOrderedSet set = (ListOrderedSet) makeEmptySet();\n+        List view = set.asList();\n+        set.add(ZERO);\n+        set.add(ONE);\n+        set.add(TWO);\n+        \n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertEquals(3, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(ONE, view.get(1));\n+        assertSame(TWO, view.get(2));\n+        \n+        assertEquals(0, set.indexOf(ZERO));\n+        assertEquals(1, set.indexOf(ONE));\n+        assertEquals(2, set.indexOf(TWO));\n+        \n+        set.remove(1);\n+        assertEquals(2, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(TWO, set.get(1));\n+        assertEquals(2, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(TWO, view.get(1));\n+    }        \n+    \n+    public void testListAddIndexed() {\n+        ListOrderedSet set = (ListOrderedSet) makeEmptySet();\n+        List view = set.asList();\n+        set.add(ZERO);\n+        set.add(TWO);\n+        \n+        set.add(1, ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        set.add(0, ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        List list = new ArrayList();\n+        list.add(ZERO);\n+        list.add(TWO);\n+        \n+        set.addAll(0, list);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        list.add(0, THREE); // list = [3,0,2]\n+        set.remove(TWO);    //  set = [0,1]\n+        set.addAll(1, list);\n+        assertEquals(4, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(THREE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertSame(ONE, set.get(3));\n+    }\n+    \n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}", "timestamp": 1086644532, "metainfo": ""}