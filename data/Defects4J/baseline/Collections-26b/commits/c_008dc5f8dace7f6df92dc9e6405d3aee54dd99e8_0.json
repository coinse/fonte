{"sha": "008dc5f8dace7f6df92dc9e6405d3aee54dd99e8", "log": "Remove incorrect comment about using hashCode to determine whether objects in the bag are equal.  Fix numerous javadoc cross reference problems.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/Bag.java\n+++ b/src/java/org/apache/commons/collections/Bag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.4 2002/03/13 05:40:30 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/03/13 05:40:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.5 2002/03/13 06:00:20 mas Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/03/13 06:00:20 $\n  *\n  * ====================================================================\n  *\n import java.util.Set;\n \n /**\n- * A {@link Collection} that keeps a count of its members of the same\n- * type, using <code>hashCode</code> to check for equality. Suppose\n- * you have a Bag that contains <code>{a, a, b, c}</code>.  Calling\n- * {@link #getCount} on <code>a</code> would return 2, while calling\n- * {@link #uniqueSet} would return <code>{a, b, c}</code>.\n+ * A {@link Collection} that counts the number of times an object appears in\n+ * the collection.  Suppose you have a Bag that contains <code>{a, a, b,\n+ * c}</code>.  Calling {@link #getCount(Object)} on <code>a</code> would return\n+ * 2, while calling {@link #uniqueSet()} would return <code>{a, b, c}</code>.\n  *\n  * @author Chuck Burdick\n  **/\n \n    /**\n     * Add the given object to the bag and keep a count. If the object\n-    * is already in the {@link #uniqueSet} then increment its count as\n-    * reported by {@link #getCount}. Otherwise add it to the {@link\n-    * #uniqueSet} and report its count as 1.\n+    * is already in the {@link #uniqueSet()} then increment its count as\n+    * reported by {@link #getCount(Object)}. Otherwise add it to the {@link\n+    * #uniqueSet()} and report its count as 1.\n     * @return <code>true</code> if the object was not already in the\n     *         <code>uniqueSet</code>\n-    * @see #getCount\n+    * @see #getCount(Object)\n     **/\n    public boolean add(Object o);\n \n     * @return <code>true</code> if the object was not already in the\n     *         <code>uniqueSet</code>\n     * @see #add(Object)\n-    * @see #getCount\n+    * @see #getCount(Object)\n     **/\n    public boolean add(Object o, int i);\n \n    /**\n     * Remove all occurrences of the given object from the bag, and do\n-    * not represent the object in the {@link #uniqueSet}.\n+    * not represent the object in the {@link #uniqueSet()}.\n     * @see #remove(Object, int)\n     * @return <code>true</code> if this call changed the collection\n     **/\n    /**\n     * Remove the given number of occurrences from the bag. If the bag\n     * contains <code>i</code> occurrences or less, the item will be\n-    * removed from the {@link #uniqueSet}.\n-    * @see #getCount\n+    * removed from the {@link #uniqueSet()}.\n+    * @see #getCount(Object)\n     * @see #remove(Object)\n     * @return <code>true</code> if this call changed the collection\n     **/\n \n    /**\n     * Returns the total number of items in the bag across all types.\n-    * @see #size\n     **/\n    public int size();\n \n     * Returns <code>true</code> if the bag contains all elements in\n     * the given collection, respecting cardinality.  That is, if the\n     * given collection <code>C</code> contains <code>n</code> copies\n-    * of a given object, calling {@link #getCount} on that object must\n-    * be >= <code>n</code> for all <code>n</code> in <code>C</code>.\n+    * of a given object, calling {@link #getCount(Object)} on that object must\n+    * be <code>&gt;= n</code> for all <code>n</code> in <code>C</code>.\n     **/\n    public boolean containsAll(Collection c);\n ", "timestamp": 1015999220, "metainfo": ""}