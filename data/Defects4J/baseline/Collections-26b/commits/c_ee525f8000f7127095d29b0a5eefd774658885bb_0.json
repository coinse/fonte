{"sha": "ee525f8000f7127095d29b0a5eefd774658885bb", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r751857 | mbenson | 2009-03-09 14:43:53 -0700 (Mon, 09 Mar 2009) | 1 line          handle more ListIterator functionality when possible     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n  */\n package org.apache.commons.collections.iterators;\n \n+import java.text.MessageFormat;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.NoSuchElementException;\n \n+import org.apache.commons.collections.ResettableIterator;\n import org.apache.commons.collections.ResettableListIterator;\n \n /**\n- * Converts an iterator into a list iterator by caching the returned entries.\n+ * Converts an {@link Iterator} into a {@link ResettableListIterator}.\n+ * For plain <code>Iterator</code>s this is accomplished by caching the returned\n+ * elements.  This class can also be used to simply add {@link ResettableIterator}\n+ * functionality to a given {@link ListIterator}.\n  * <p>\n  * The <code>ListIterator</code> interface has additional useful methods\n  * for navigation - <code>previous()</code> and the index methods.\n  * <code>ListIterator</code>. It achieves this by building a list internally\n  * of as the underlying iterator is traversed.\n  * <p>\n- * The optional operations of <code>ListIterator</code> are not supported.\n+ * The optional operations of <code>ListIterator</code> are not supported for plain <code>Iterator</code>s.\n  * <p>\n  * This class implements ResettableListIterator from Commons Collections 3.2.\n  *\n  *\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n+ * @author Matt Benson\n  */\n-public class ListIteratorWrapper implements ResettableListIterator {\n-\n-    /** Message used when remove, set or add are called. */\n+public class ListIteratorWrapper<E> implements ResettableListIterator<E> {\n+\n+    /** Message used when set or add are called. */\n     private static final String UNSUPPORTED_OPERATION_MESSAGE =\n         \"ListIteratorWrapper does not support optional operations of ListIterator.\";\n \n+    /** Message used when set or add are called. */\n+    private static final String CANNOT_REMOVE_MESSAGE = \"Cannot remove element at index {0}.\";\n+\n     /** The underlying iterator being decorated. */\n-    private final Iterator iterator;\n+    private final Iterator<? extends E> iterator;\n     /** The list being used to cache the iterator. */\n-    private final List list = new ArrayList();\n+    private final List<E> list = new ArrayList<E>();\n \n     /** The current index of this iterator. */\n     private int currentIndex = 0;\n     /** The current index of the wrapped iterator. */\n     private int wrappedIteratorIndex = 0;\n+    /** recall whether the wrapped iterator's \"cursor\" is in such a state as to allow remove() to be called */\n+    private boolean removeState;\n \n     // Constructor\n     //-------------------------------------------------------------------------\n      * @param iterator  the iterator to wrap\n      * @throws NullPointerException if the iterator is null\n      */\n-    public ListIteratorWrapper(Iterator iterator) {\n+    public ListIteratorWrapper(Iterator<? extends E> iterator) {\n         super();\n         if (iterator == null) {\n             throw new NullPointerException(\"Iterator must not be null\");\n     // ListIterator interface\n     //-------------------------------------------------------------------------\n     /**\n-     * Throws {@link UnsupportedOperationException}.\n-     *\n-     * @param obj  the object to add, ignored\n-     * @throws UnsupportedOperationException always\n-     */\n-    public void add(Object obj) throws UnsupportedOperationException {\n+     * Throws {@link UnsupportedOperationException}\n+     * unless the underlying <code>Iterator</code> is a <code>ListIterator</code>.\n+     *\n+     * @param obj  the object to add\n+     * @throws UnsupportedOperationException\n+     */\n+    public void add(E obj) throws UnsupportedOperationException {\n+        if (iterator instanceof ListIterator) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListIterator<E> li = (ListIterator<E>) iterator;\n+            li.add(obj);\n+            return;\n+        }\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n      * @return true if there are more elements\n      */\n     public boolean hasNext() {\n-        if (currentIndex == wrappedIteratorIndex) {\n+        if (currentIndex == wrappedIteratorIndex || iterator instanceof ListIterator) {\n             return iterator.hasNext();\n         }\n         return true;\n      * @return true if there are previous elements\n      */\n     public boolean hasPrevious() {\n-        if (currentIndex == 0) {\n-            return false;\n-        }\n-        return true;\n+        if (iterator instanceof ListIterator) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListIterator li = (ListIterator) iterator;\n+            return li.hasPrevious();\n+        }\n+        return currentIndex > 0;\n     }\n \n     /**\n      * @return the next element from the iterator\n      * @throws NoSuchElementException if there are no more elements\n      */\n-    public Object next() throws NoSuchElementException {\n+    public E next() throws NoSuchElementException {\n+        if (iterator instanceof ListIterator) {\n+            return iterator.next();\n+        }\n+\n         if (currentIndex < wrappedIteratorIndex) {\n             ++currentIndex;\n             return list.get(currentIndex - 1);\n         }\n \n-        Object retval = iterator.next();\n+        E retval = iterator.next();\n         list.add(retval);\n         ++currentIndex;\n         ++wrappedIteratorIndex;\n+        removeState = true;\n         return retval;\n     }\n \n     /**\n-     * Returns in the index of the next element.\n+     * Returns the index of the next element.\n      *\n      * @return the index of the next element\n      */\n     public int nextIndex() {\n+        if (iterator instanceof ListIterator) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListIterator li = (ListIterator) iterator;\n+            return li.nextIndex();\n+        }\n         return currentIndex;\n     }\n \n      * @return the previous element\n      * @throws NoSuchElementException  if there are no previous elements\n      */\n-    public Object previous() throws NoSuchElementException {\n+    public E previous() throws NoSuchElementException {\n+        if (iterator instanceof ListIterator) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListIterator<E> li = (ListIterator<E>) iterator;\n+            return li.previous();\n+        }\n+\n         if (currentIndex == 0) {\n             throw new NoSuchElementException();\n         }\n-        --currentIndex;\n-        return list.get(currentIndex);    \n+        removeState = wrappedIteratorIndex == currentIndex;\n+        return list.get(--currentIndex);\n     }\n \n     /**\n      * @return  the index of the previous element\n      */\n     public int previousIndex() {\n+        if (iterator instanceof ListIterator) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListIterator li = (ListIterator) iterator;\n+            return li.previousIndex();\n+        }\n         return currentIndex - 1;\n     }\n \n     /**\n-     * Throws {@link UnsupportedOperationException}.\n+     * Throws {@link UnsupportedOperationException} if {@link #previous()} has ever been called.\n      *\n      * @throws UnsupportedOperationException always\n      */\n     public void remove() throws UnsupportedOperationException {\n-        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n-    }\n-\n-    /**\n-     * Throws {@link UnsupportedOperationException}.\n-     *\n-     * @param obj  the object to set, ignored\n-     * @throws UnsupportedOperationException always\n-     */\n-    public void set(Object obj) throws UnsupportedOperationException {\n+        if (iterator instanceof ListIterator) {\n+            iterator.remove();\n+            return;\n+        }\n+        int removeIndex = currentIndex;\n+        if (currentIndex == wrappedIteratorIndex) {\n+            --removeIndex;\n+        }\n+        if (!removeState || wrappedIteratorIndex - currentIndex > 1) {\n+            throw new IllegalStateException(MessageFormat.format(CANNOT_REMOVE_MESSAGE, removeIndex));\n+        }\n+        iterator.remove();\n+        list.remove(removeIndex);\n+        currentIndex = removeIndex;\n+        wrappedIteratorIndex--;\n+        removeState = false;\n+    }\n+\n+    /**\n+     * Throws {@link UnsupportedOperationException}\n+     * unless the underlying <code>Iterator</code> is a <code>ListIterator</code>.\n+     *\n+     * @param obj  the object to set\n+     * @throws UnsupportedOperationException\n+     */\n+    public void set(E obj) throws UnsupportedOperationException {\n+        if (iterator instanceof ListIterator) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListIterator<E> li = (ListIterator<E>) iterator;\n+            li.set(obj);\n+            return;\n+        }\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n      * @since Commons Collections 3.2\n      */\n     public void reset()  {\n+        if (iterator instanceof ListIterator) {\n+            @SuppressWarnings(\"unchecked\")\n+            ListIterator li = (ListIterator) iterator;\n+            while (li.previousIndex() >= 0) {\n+                li.previous();\n+            }\n+            return;\n+        }\n         currentIndex = 0;\n     }\n ", "timestamp": 1252994131, "metainfo": ""}