{"sha": "c4161ee29051c6e44773fd1837d2080489727dbf", "log": "using tryToAdd() where appropriate   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollection.java\n+++ b/src/test/org/apache/commons/collections/TestCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.2 2001/04/20 16:54:08 rwaldhoff Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/04/20 16:54:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollection.java,v 1.3 2001/04/24 23:35:13 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/04/24 23:35:13 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Collection} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestCollection.java,v 1.2 2001/04/20 16:54:08 rwaldhoff Exp $\n+ * @version $Id: TestCollection.java,v 1.3 2001/04/24 23:35:13 rwaldhoff Exp $\n  */\n public abstract class TestCollection extends TestObject {\n     public TestCollection(String testName) {\n     public void testCollectionIsEmpty() {\n         Collection c = makeCollection();\n         assert(\"New Collection should be empty.\",c.isEmpty());\n-        boolean added = false;\n-        try {\n-            added = c.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        boolean added = tryToAdd(c,\"element1\");\n         if(added) {\n             assert(\"If an element was added, the Collection.isEmpty() should return false.\",!c.isEmpty());\n         }\n             fail(\"Collection.iterator.next() should only throw NoSuchElementException. Found \" + t.toString());\n         }\n \n-        boolean added = false;\n-        try {\n-            added = c.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        boolean added = tryToAdd(c,\"element1\");\n         if(added) {\n             Iterator it2 = c.iterator();\n             assert(\"Iterator for non-empty Collection should have next.\",it2.hasNext());\n     // optional operation\n     public void testCollectionRemove() {\n         Collection c = makeCollection();\n-        boolean added = false;\n-        try {\n-            added = c.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        boolean added = tryToAdd(c,\"element1\");\n \n         try {\n             assert(\"Shouldn't be able to remove an element that wasn't added.\",!c.remove(\"element2\"));\n         }\n         assert(\"Collection is still empty.\",c.isEmpty());\n \n-        boolean added = false;\n-        try {\n-            added = c.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        boolean added = tryToAdd(c,\"element1\");\n         if(added) {\n             assert(\"Collection is not empty.\",!c.isEmpty());\n             try {\n     public void testCollectionSize() {\n         Collection c = makeCollection();\n         assertEquals(\"Size of new Collection is 0.\",0,c.size());\n-        boolean added = false;\n-        try {\n-            added = c.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        boolean added = tryToAdd(c,\"element1\");\n         if(added) {\n             assertEquals(\"If one element was added, the Collection.size() should be 1.\",1,c.size());\n         }\n     public void testCollectionToArray() {\n         Collection c = makeCollection();\n         assertEquals(\"Empty Collection should return empty array for toArray\",0,c.toArray().length);\n-        boolean added = false;\n-        try {\n-            added = c.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        boolean added = tryToAdd(c,\"element1\");\n         if(added) {\n             assertEquals(\"If an element was added, the Collection.toArray().length should be 1.\",1,c.toArray().length);\n         } else {\n             assertEquals(\"Empty Collection should return empty array for toArray\",0,c.toArray().length);\n         }\n \n-        boolean added2 = false;\n-        try {\n-            added2 = c.add(\"element1\");\n-        } catch(UnsupportedOperationException e) {\n-            // ignored, must not be supported\n-        } catch(ClassCastException e) {\n-            // ignored, type must not be supported\n-        } catch(IllegalArgumentException e) {\n-            // ignored, element must not be supported\n-        } catch(Throwable t) {\n-            t.printStackTrace();\n-            fail(\"Collection.add should only throw UnsupportedOperationException, ClassCastException or IllegalArgumentException. Found \" + t.toString());\n-        }\n+        boolean added2 = tryToAdd(c,\"element2\");\n         if(added && added2) {\n             assertEquals(\"If another element was added, the Collection.toArray().length should be 2.\",2,c.toArray().length);\n         } else if(added2) {", "timestamp": 988155313, "metainfo": ""}