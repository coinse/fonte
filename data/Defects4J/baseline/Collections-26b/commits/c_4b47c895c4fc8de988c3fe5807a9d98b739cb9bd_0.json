{"sha": "4b47c895c4fc8de988c3fe5807a9d98b739cb9bd", "log": "* reduce ComparableComparator.compare to \"return ((Comparable)o1).compareTo(o2)\" * some javadoc fixes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/BooleanComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/BooleanComparator.java,v 1.3 2003/01/11 01:07:13 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/BooleanComparator.java,v 1.4 2003/01/13 22:34:57 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * \n  * @since Commons Collections 2.2\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/01/11 01:07:13 $\n+ * @version $Revision: 1.4 $ $Date: 2003/01/13 22:34:57 $\n  * \n  * @author Rodney Waldhoff\n  */\n      * I sort <code>true</code> values before \n      * <code>false</code> values.  In other words,\n      * returns <code>true</code> iff\n-     * {@link #compare(Boolean,Boolean) compare(Boolean.TRUE,Boolean.FALSE)}\n+     * {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}\n      * returns a positive value.\n      */\n     public boolean sortsTrueFirst() {\n--- a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n-package org.apache.commons.collections.comparators;\n-\n-/* ====================================================================\n+/* \n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparableComparator.java,v 1.9 2003/01/13 22:34:57 rwaldhoff Exp $\n+ * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n  *\n  */\n \n+package org.apache.commons.collections.comparators;\n+\n import java.io.Serializable;\n import java.util.Comparator;\n \n /**\n- * A Comparator that compares Comparable objects.\n- * Throws ClassCastExceptions if the objects are not \n- * Comparable, or if either is null.\n- * \n- * Throws ClassCastException if the compareTo of both \n- * objects do not provide an inverse result of each other \n- * as per the Comparable javadoc.  This Comparator is useful, for example,\n+ * A {@link Comparator Comparator} that compares \n+ * {@link Comparable Comparable} objects.\n+ * <p />\n+ * This Comparator is useful, for example,\n  * for enforcing the natural order in custom implementations\n  * of SortedSet and SortedMap.\n+ * <p />\n+ * Note: In the 2.0 and 2.1 releases of Commons Collections, \n+ * this class would throw a {@link ClassCastException} if\n+ * either of the arguments to {@link #compare compare}\n+ * were <code>null</code>, not {@link Comparable Comparable},\n+ * or for which {@link Comparable#compareTo compareTo} gave\n+ * inconsistent results.  This is no longer the case.  See\n+ * {@link #compare} for details.\n  *\n  * @since Commons Collections 2.0\n+ * @version $Revision: 1.9 $ $Date: 2003/01/13 22:34:57 $\n+ *\n  * @author bayard@generationjava.com\n- * @version $Revision: 1.8 $ $Date: 2003/01/10 20:21:23 $\n+ *\n+ * @see java.util.Collections#reverseOrder\n  */\n-public class ComparableComparator implements Comparator,Serializable {\n-\n-    private static final ComparableComparator instance = \n-        new ComparableComparator();\n+public class ComparableComparator implements Comparator, Serializable {\n \n     /**\n      *  Return a shared instance of a ComparableComparator.  Developers are\n         return instance;\n     }\n \n-    private static final long serialVersionUID=-291439688585137865L;\n-\n     public ComparableComparator() {\n     }\n \n+    /**\n+     * Compare the two {@link Comparable Comparable} arguments.\n+     * This method is equivalent to:\n+     * <pre>(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)</pre>\n+     * @throws NullPointerException when <i>o1</i> is <code>null</code>, \n+     *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n+     * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable}, \n+     *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n+     */\n     public int compare(Object o1, Object o2) {\n-        if( (o1 == null) || (o2 == null) ) {\n-            throw new ClassCastException(\n-                \"There were nulls in the arguments for this method: \"+\n-                \"compare(\"+o1 + \", \" + o2 + \")\"\n-                );\n-        }\n-        \n-        if(o1 instanceof Comparable) {\n-            if(o2 instanceof Comparable) {\n-                int result1 = ((Comparable)o1).compareTo(o2);\n-                int result2 = ((Comparable)o2).compareTo(o1);\n-\n-                // enforce comparable contract\n-                if(result1 == 0 && result2 == 0) {\n-                    return 0;\n-                } else\n-                if(result1 < 0 && result2 > 0) {\n-                    return result1;\n-                } else\n-                if(result1 > 0 && result2 < 0) {\n-                    return result1;\n-                } else {\n-                    // results inconsistent\n-                    throw new ClassCastException(\"o1 not comparable to o2\");\n-                }\n-            } else {\n-                // o2 wasn't comparable\n-                throw new ClassCastException(\n-                    \"The first argument of this method was not a Comparable: \" +\n-                    o2.getClass().getName()\n-                    );\n-            }\n-        } else \n-        if(o2 instanceof Comparable) {\n-            // o1 wasn't comparable\n-            throw new ClassCastException(\n-                \"The second argument of this method was not a Comparable: \" +\n-                o1.getClass().getName()\n-                );\n-        } else {\n-            // neither were comparable\n-            throw new ClassCastException(\n-                \"Both arguments of this method were not Comparables: \" +\n-                o1.getClass().getName() + \" and \" + o2.getClass().getName()\n-                );\n-        }\n+        return ((Comparable)o1).compareTo(o2);\n     }\n \n     /**\n \n     /**\n      * Returns <code>true</code> iff <i>that</i> Object is \n-     * is a {@link Comparator} whose ordering is known to be \n-     * equivalent to mine.\n+     * is a {@link Comparator Comparator} whose ordering is \n+     * known to be equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n      * iff <code><i>that</i>.{@link Object#getClass getClass()}</code>\n         return (this == that) || \n                ((null != that) && (that.getClass().equals(this.getClass())));\n     }\n+\n+    private static final ComparableComparator instance = \n+        new ComparableComparator();\n+\n+    private static final long serialVersionUID=-291439688585137865L;\n+\n }\n--- a/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ReverseComparator.java,v 1.11 2003/01/10 20:21:25 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ReverseComparator.java,v 1.12 2003/01/13 22:34:57 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n /**\n  * Reverses the order of another comparator by \n- * reversing the arguments to its {@link #compare} \n+ * reversing the arguments to its {@link #compare compare} \n  * method.\n  * \n  * @since Commons Collections 2.0\n- * @version $Revision: 1.11 $ $Date: 2003/01/10 20:21:25 $\n+ * @version $Revision: 1.12 $ $Date: 2003/01/13 22:34:57 $\n  *\n  * @author bayard@generationjava.com\n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * \n+ * @see java.util.Collections#reverseOrder\n  */\n public class ReverseComparator implements Comparator,Serializable {\n-\n-    private Comparator comparator;\n \n     /**\n      * Creates a comparator that compares objects based on the inverse of their\n      * that is functionaly identical to the Comparator returned by\n      * java.util.Collections.<b>reverseOrder()</b>.\n      * \n-     * @see java.util.Collections#reverseOrder()\n+     * @see java.util.Collections#reverseOrder\n      */\n     public ReverseComparator() {\n         this(null);\n     }\n \n     /**\n-     * Creates a reverse comparator that inverts the comparison\n-     * of the passed in comparator.  If you pass in a null,\n+     * Creates a comparator that inverts the comparison\n+     * of the given comparator.  If you pass in <code>null</code>,\n      * the ReverseComparator defaults to reversing the\n      * natural order, as per \n-     * java.util.Collections.<b>reverseOrder()</b>.\n+     * {@link java.util.Collections#reverseOrder}</b>.\n      * \n      * @param comparator Comparator to reverse\n      */\n     }\n \n     // use serialVersionUID from Collections 2.0 for interoperability\n-    private static final long serialVersionUID = 2858887242028539265L;;\n+    private static final long serialVersionUID = 2858887242028539265L;\n+\n+    private Comparator comparator;\n }", "timestamp": 1042497297, "metainfo": ""}