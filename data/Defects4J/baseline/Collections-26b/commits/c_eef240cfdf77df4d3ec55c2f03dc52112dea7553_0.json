{"sha": "eef240cfdf77df4d3ec55c2f03dc52112dea7553", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java\n \n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param queue  the queue to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n \n     /**\n      * Gets the queue being decorated.\n-     * \n+     *\n      * @return the decorated queue\n      */\n     @Override\n     public E element() {\n         return decorated().element();\n     }\n-    \n+\n     public E remove() {\n         return decorated().remove();\n     }\n--- a/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java\n                     String.format(\"The specified index (%1$d) is outside the available range [0, %2$d)\",\n                                   Integer.valueOf(index), Integer.valueOf(sz)));\n         }\n-        \n+\n         final int idx = (start + index) % maxElements;\n         return elements[idx];\n     }\n- \n+\n     //-----------------------------------------------------------------------\n \n     /**\n \n         };\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java\n      * <p>\n      * If there are any elements already in the queue being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param <E> the type of the elements in the queue\n      * @param Queue  the queue to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n                                                           final Predicate<? super E> predicate) {\n         return new PredicatedQueue<E>(Queue, predicate);\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the collection being decorated, they\n      * are validated.\n-     * \n+     *\n      * @param queue  the queue to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @throws IllegalArgumentException if Queue or predicate is null\n \n     /**\n      * Gets the queue being decorated.\n-     * \n+     *\n      * @return the decorated queue\n      */\n     @Override\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     /**\n      * Override to validate the object being added to ensure it matches\n      * the predicate.\n-     * \n+     *\n      * @param object  the object being added\n      * @return the result of adding to the underlying queue\n      * @throws IllegalArgumentException if the add is invalid\n--- a/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java\n      * If there are any elements already in the queue being decorated, they\n      * are NOT transformed.\n      * Contrast this with {@link #transformedQueue(Queue, Transformer)}.\n-     * \n+     *\n      * @param <E> the type of the elements in the queue\n      * @param queue  the queue to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n                                                             final Transformer<? super E, ? extends E> transformer) {\n         return new TransformedQueue<E>(queue, transformer);\n     }\n-    \n+\n     /**\n      * Factory method to create a transforming queue that will transform\n      * existing contents of the specified queue.\n      * If there are any elements already in the queue being decorated, they\n      * will be transformed by this method.\n      * Contrast this with {@link #transformingQueue(Queue, Transformer)}.\n-     * \n+     *\n      * @param <E> the type of the elements in the queue\n      * @param queue  the queue to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n     public static <E> TransformedQueue<E> transformedQueue(final Queue<E> queue,\n                                                            final Transformer<? super E, ? extends E> transformer) {\n         // throws IAE if queue or transformer is null\n-        final TransformedQueue<E> decorated = new TransformedQueue<E>(queue, transformer); \n+        final TransformedQueue<E> decorated = new TransformedQueue<E>(queue, transformer);\n         if (queue.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // queue is type <E>\n             final E[] values = (E[]) queue.toArray(); // NOPMD - false positive for generics\n      * <p>\n      * If there are any elements already in the queue being decorated, they\n      * are NOT transformed.\n-     * \n+     *\n      * @param queue  the queue to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @throws IllegalArgumentException if queue or transformer is null\n \n     /**\n      * Gets the decorated queue.\n-     * \n+     *\n      * @return the decorated queue\n      */\n     protected Queue<E> getQueue() {\n     public E element() {\n         return getQueue().element();\n     }\n-    \n+\n     public E remove() {\n         return getQueue().remove();\n     }\n--- a/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java\n /**\n  * Decorates another {@link Queue} to ensure it can't be altered.\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.\n  *\n  * @since 4.0\n  * @version $Id$\n      * Factory method to create an unmodifiable queue.\n      * <p>\n      * If the queue passed in is already unmodifiable, it is returned.\n-     * \n+     *\n      * @param <E> the type of the elements in the queue\n      * @param queue  the queue to decorate, must not be null\n      * @return an unmodifiable Queue\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param queue  the queue to decorate, must not be null\n      * @throws IllegalArgumentException if queue is null\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Write the collection out using a custom routine.\n-     * \n+     *\n      * @param out  the output stream\n      * @throws IOException if an I/O error occurs while writing to the output stream\n      */\n \n     /**\n      * Read the collection in using a custom routine.\n-     * \n+     *\n      * @param in  the input stream\n      * @throws IOException if an I/O error occurs while reading from the input stream\n      * @throws ClassNotFoundException if the class of a serialized object can not be found\n     }\n \n     //-----------------------------------------------------------------------\n-    \n+\n     @Override\n     public boolean offer(final E obj) {\n         throw new UnsupportedOperationException();\n     public E poll() {\n         throw new UnsupportedOperationException();\n     }\n-    \n+\n     @Override\n     public E remove() {\n         throw new UnsupportedOperationException();\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/queue/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/package-info.java\n  *   <li>Transformed - transforms elements added to the queue\n  *   <li>Unmodifiable - ensures the collection cannot be altered\n  * </ul>\n- * \n+ *\n  * @version $Id$\n  */\n package org.apache.commons.collections4.queue;", "timestamp": 1367347057, "metainfo": ""}