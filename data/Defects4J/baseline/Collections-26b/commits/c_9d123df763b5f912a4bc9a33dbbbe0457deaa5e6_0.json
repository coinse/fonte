{"sha": "9d123df763b5f912a4bc9a33dbbbe0457deaa5e6", "log": "Add LoopingIterator, from Jonathan Carlson   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/LoopingIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/LoopingIterator.java,v 1.1 2002/11/21 23:09:01 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/21 23:09:01 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+/**\n+ * <code>LoopingIterator</code> provides an Iterator that restarts when it\n+ * reaches the end.\n+ * <p>\n+ * The iterator will loop continuously around the provided elements, unless \n+ * there are no elements in the collection to begin with, or all the elements\n+ * are removed using the {@link remove} method.\n+ * <p>\n+ * Concurrent modifications are not directly supported, and for most collection\n+ * implementations will throw a ConcurrentModificationException. \n+ *\n+ * @since 2.2\n+ * @author <a href=\"mailto:joncrlsn@users.sf.net\">Jonathan Carlson</a>\n+ * @author Stephen Colebourne\n+ * @version $Revision: 1.1 $\n+ */\n+public class LoopingIterator implements Iterator {\n+    /** The collection to base the iterator on */\n+    private Collection collection;\n+    /** The current iterator */\n+    private Iterator iterator;\n+\n+    /**\n+     * Constructor that wraps a collection.\n+     * <p>\n+     * There is no way to reset an Iterator instance without recreating it from\n+     * the original source, so the Collection must be passed in.\n+     * \n+     * @param coll  the collection to wrap\n+     * @throws NullPointerException if the collection is null\n+     */\n+    public LoopingIterator(Collection coll) {\n+        if (coll == null) {\n+            throw new NullPointerException(\"The collection must not be null\");\n+        }\n+        collection = coll;\n+        reset();\n+    }\n+\n+    /** \n+     * Has the iterator any more elements.\n+     * <p>\n+     * Returns false only if the collection originally had zero elements, or\n+     * all the elements have been removed using {@link #remove}.\n+     * \n+     * @return <code>true</code> if there are more elements\n+     */\n+    public boolean hasNext() {\n+        return (collection.size() > 0);\n+    }\n+\n+    /**\n+     * Returns the next object in the collection.\n+     * <p>\n+     * If at the end of the collection, return the first element.\n+     * \n+     * @throws NoSuchElementException if there are no elements\n+     *         at all.  Use {@link #hasNext} to avoid this error.\n+     */\n+    public Object next() {\n+        if (collection.size() == 0) {\n+            throw new NoSuchElementException(\"There are no elements for this iterator to loop on\");\n+        }\n+        if (iterator.hasNext() == false) {\n+            reset();\n+        }\n+        return iterator.next();\n+    }\n+\n+    /**\n+     * Removes the previously retrieved item from the underlying collection.\n+     * <p>\n+     * This feature is only supported if the underlying collection's \n+     * {@link #iterator} method returns an implementation that supports it.\n+     * <p>\n+     * This method can only be called after at least one {@link #next} method call.\n+     * After a removal, the remove method may not be called again until another\n+     * next has been performed. If the {@link #reset} is called, then remove may\n+     * not be called until {@link #next} is called again.\n+     */\n+    public void remove() {\n+        iterator.remove();\n+    }\n+\n+    /**\n+     * Resets the iterator back to the start of the collection.\n+     */\n+    public void reset() {\n+        iterator = collection.iterator();\n+    }\n+\n+    /**\n+     * Gets the size of the collection underlying the iterator.\n+     * \n+     * @return the current collection size\n+     */\n+    public int size() {\n+        return collection.size();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/iterators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.2 2002/08/17 11:39:16 scolebourne Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/17 11:39:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.3 2002/11/21 23:09:26 scolebourne Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/11/21 23:09:26 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.2 2002/08/17 11:39:16 scolebourne Exp $\n+ * @version $Id: TestAll.java,v 1.3 2002/11/21 23:09:26 scolebourne Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestFilterListIterator.suite());\n         suite.addTest(TestIteratorChain.suite());\n         suite.addTest(TestListIteratorWrapper.suite());\n+        suite.addTest(TestLoopingIterator.suite());\n         suite.addTest(TestSingletonIterator.suite());\n         suite.addTest(TestSingletonListIterator.suite());\n         suite.addTest(TestUniqueFilterIterator.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestLoopingIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestLoopingIterator.java,v 1.1 2002/11/21 23:09:26 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/21 23:09:26 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Tests the LoopingIterator class using jUnit.\n+ * \n+ * @author <a href=\"mailto:joncrlsn@users.sf.net\">Jonathan Carlson</a>\n+ * @author Stephen Colebourne\n+ */\n+public class TestLoopingIterator extends TestCase {\n+\n+    public TestLoopingIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestLoopingIterator.class);\n+    }\n+\n+    /**\n+     * Tests constructor exception.\n+     */\n+    public void testConstructorEx() throws Exception {\n+        try {\n+            new LoopingIterator(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+    }\n+    \n+    /**\n+     * Tests whether an empty looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping0() throws Exception {\n+        List list = new ArrayList();\n+        LoopingIterator loop = new LoopingIterator(list);\n+        assertTrue(\"hasNext should return false\", loop.hasNext() == false);\n+\n+        try {\n+            loop.next();\n+            fail(\"NoSuchElementException was not thrown during next() call.\");\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests whether a populated looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping1() throws Exception {\n+        List list = new ArrayList(Arrays.asList(new String[] { \"a\" }));\n+        LoopingIterator loop = new LoopingIterator(list);\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+    }\n+\n+    /**\n+     * Tests whether a populated looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping2() throws Exception {\n+        List list = new ArrayList(Arrays.asList(new String[] { \"a\", \"b\" }));\n+        LoopingIterator loop = new LoopingIterator(list);\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"b\", loop.next());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+    }\n+\n+    /**\n+     * Tests whether a populated looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping3() throws Exception {\n+        List list = new ArrayList(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingIterator loop = new LoopingIterator(list);\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"b\", loop.next());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"c\", loop.next());\n+\n+        assertTrue(\"4th hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+    }\n+\n+    /**\n+     * Tests the remove() method on a LoopingIterator wrapped ArrayList.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testRemoving1() throws Exception {\n+        List list = new ArrayList(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingIterator loop = new LoopingIterator(list);\n+        assertEquals(\"list should have 3 elements.\", 3, list.size());\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+        loop.remove();  // removes a\n+        assertEquals(\"list should have 2 elements.\", 2, list.size());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"b\", loop.next());\n+        loop.remove();  // removes b\n+        assertEquals(\"list should have 1 elements.\", 1, list.size());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"c\", loop.next());\n+        loop.remove();  // removes c\n+        assertEquals(\"list should have 0 elements.\", 0, list.size());\n+\n+        assertTrue(\"4th hasNext should return false\", loop.hasNext() == false);\n+        try {\n+            loop.next();\n+            fail(\"Expected NoSuchElementException to be thrown.\");\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests the reset() method on a LoopingIterator wrapped ArrayList.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testReset() throws Exception {\n+        List list = new ArrayList(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingIterator loop = new LoopingIterator(list);\n+\n+        assertEquals(\"a\", loop.next());\n+        assertEquals(\"b\", loop.next());\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());\n+        assertEquals(\"b\", loop.next());\n+        assertEquals(\"c\", loop.next());\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());\n+        assertEquals(\"b\", loop.next());\n+        assertEquals(\"c\", loop.next());\n+    }\n+    \n+    /**\n+     * Tests the size() method on a LoopingIterator wrapped ArrayList.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testSize() throws Exception {\n+        List list = new ArrayList(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingIterator loop = new LoopingIterator(list);\n+\n+        assertEquals(3, loop.size());\n+        loop.next();\n+        loop.next();\n+        assertEquals(3, loop.size());\n+        loop.reset();\n+        assertEquals(3, loop.size());\n+        loop.next();\n+        loop.remove();\n+        assertEquals(2, loop.size());\n+    }\n+\n+}", "timestamp": 1037920166, "metainfo": ""}