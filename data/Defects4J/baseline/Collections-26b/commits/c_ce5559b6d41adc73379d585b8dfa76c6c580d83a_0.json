{"sha": "ce5559b6d41adc73379d585b8dfa76c6c580d83a", "log": "added methods for testing serialization and a simple sanity check for all serializable collections   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestObject.java\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.1 2001/04/20 16:54:03 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/04/20 16:54:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.2 2002/02/20 21:50:16 morgand Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/02/20 21:50:16 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections;\n \n import junit.framework.*;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+\n import java.util.Collection;\n import java.util.ArrayList;\n import java.util.Iterator;\n  * test case (method) your {@link Object} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestObject.java,v 1.1 2001/04/20 16:54:03 rwaldhoff Exp $\n+ * @version $Id: TestObject.java,v 1.2 2002/02/20 21:50:16 morgand Exp $\n  */\n public abstract class TestObject extends TestCase {\n     public TestObject(String testName) {\n             assertEquals(\"[2] When two objects are equal, their hashCodes should be also.\",obj1.hashCode(),obj2.hashCode());\n         }\n     }\n+\n+    private void writeExternalFormToStream(Serializable o, OutputStream stream) \n+    throws IOException {\n+        ObjectOutputStream oStream = new ObjectOutputStream(stream);\n+        oStream.writeObject(o);\n+    }\n+\n+    /**\n+     * Write a Serializable or Externalizable object as\n+     * a file at the given path.  NOT USEFUL as part\n+     * of a unit test; this is just a utility method\n+     * for creating disk-based objects in CVS that can become\n+     * the basis for compatibility tests using\n+     * readExternalFormFromDisk(String path)\n+     * \n+     * @param o Object to serialize\n+     * @param path path to write the serialized Object\n+     * @exception IOException\n+     */\n+    protected void writeExternalFormToDisk(Serializable o, String path) \n+    throws IOException {\n+        FileOutputStream fileStream = new FileOutputStream(path);\n+        writeExternalFormToStream(o,fileStream);\n+    }\n+\n+    /**\n+     * Converts a Serializable or Externalizable object to\n+     * bytes.  Useful for in-memory tests of serialization\n+     * \n+     * @param o Object to convert to bytes\n+     * @return serialized form of the Object\n+     * @exception IOException\n+     */\n+    protected byte[] writeExternalFormToBytes(Serializable o) \n+    throws IOException {\n+        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n+        writeExternalFormToStream(o,byteStream);\n+        return byteStream.toByteArray();\n+    }\n+\n+    private Object readExternalFormFromStream(InputStream stream) \n+    throws IOException, ClassNotFoundException {\n+        ObjectInputStream oStream = new ObjectInputStream(stream);\n+        return oStream.readObject();\n+    }\n+\n+    /**\n+     * Reads a Serialized or Externalized Object from disk.\n+     * Useful for creating compatibility tests betweeen\n+     * different CVS versions of the same class\n+     * \n+     * @param path path to the serialized Object\n+     * @return the Object at the given path\n+     * @exception IOException\n+     * @exception ClassNotFoundException\n+     */\n+    protected Object readExternalFormFromDisk(String path) \n+    throws IOException, ClassNotFoundException {\n+        FileInputStream stream = new FileInputStream(path);\n+        return readExternalFormFromStream(stream);\n+    }\n+\n+    /**\n+     * Read a Serialized or Externalized Object from bytes.\n+     * Useful for verifying serialization in memory.\n+     * \n+     * @param b byte array containing a serialized Object\n+     * @return Object contained in the bytes\n+     * @exception IOException\n+     * @exception ClassNotFoundException\n+     */\n+    protected Object readExternalFormFromBytes(byte[] b) \n+    throws IOException, ClassNotFoundException {\n+        ByteArrayInputStream stream = new ByteArrayInputStream(b);\n+        return readExternalFormFromStream(stream);\n+    }\n+\n+    /**\n+     * Sanity check method, makes sure that any Serializable\n+     * class can be serialized and de-serialized in memory, \n+     * using the handy makeObject() method\n+     * \n+     * @exception IOException\n+     * @exception ClassNotFoundException\n+     */\n+    public void testSimpleSerialization() \n+    throws IOException, ClassNotFoundException {\n+        Object o = makeObject();\n+        if (o instanceof Serializable) {\n+            byte[] objekt = writeExternalFormToBytes((Serializable) o);\n+            Object p = readExternalFormFromBytes(objekt);\n+        }\n+    }\n }", "timestamp": 1014241816, "metainfo": ""}