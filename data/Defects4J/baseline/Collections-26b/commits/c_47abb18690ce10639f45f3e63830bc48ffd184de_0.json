{"sha": "47abb18690ce10639f45f3e63830bc48ffd184de", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.Predicate;\n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Extension of {@link AbstractTestMap} for exercising the \n  *\n  * @author Phil Steitz\n  */\n-public class TestPredicatedMap extends AbstractTestMap{\n-    \n-    protected static final Predicate truePredicate = PredicateUtils.truePredicate();\n-    protected static final Predicate testPredicate = new Predicate() {\n+public class TestPredicatedMap<K, V> extends AbstractTestIterableMap<K, V> {\n+\n+    protected static final Predicate<Object> truePredicate = TruePredicate.<Object>truePredicate();\n+\n+    protected static final Predicate<Object> testPredicate = new Predicate<Object>() {\n         public boolean evaluate(Object o) {\n             return (o instanceof String);\n         }\n     };\n-    \n-    \n+\n     public TestPredicatedMap(String testName) {\n         super(testName);\n     }\n-    \n+\n     public static Test suite() {\n         return new TestSuite(TestPredicatedMap.class);\n     }\n-    \n+\n     public static void main(String args[]) {\n         String[] testCaseName = { TestPredicatedMap.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n     //-----------------------------------------------------------------------\n-    protected Map decorateMap(Map map, Predicate keyPredicate, \n-        Predicate valuePredicate) {\n+    protected IterableMap<K, V> decorateMap(Map<K, V> map, Predicate<? super K> keyPredicate,\n+        Predicate<? super V> valuePredicate) {\n         return PredicatedMap.decorate(map, keyPredicate, valuePredicate);\n     }\n-    \n-    public Map makeEmptyMap() {\n-        return decorateMap(new HashMap(), truePredicate, truePredicate);\n+\n+    public IterableMap<K, V> makeObject() {\n+        return decorateMap(new HashMap<K, V>(), truePredicate, truePredicate);\n     }\n-    \n-    public Map makeTestMap() {\n-        return decorateMap(new HashMap(), testPredicate, testPredicate);\n+\n+    public IterableMap<K, V> makeTestMap() {\n+        return decorateMap(new HashMap<K, V>(), testPredicate, testPredicate);\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testEntrySet() {\n-        Map map = makeTestMap();\n+        Map<K, V> map = makeTestMap();\n         assertTrue(\"returned entryset should not be null\",\n             map.entrySet() != null);\n-        map = decorateMap(new HashMap(), null, null);\n-        map.put(\"oneKey\", \"oneValue\");\n+        map = decorateMap(new HashMap<K, V>(), null, null);\n+        map.put((K) \"oneKey\", (V) \"oneValue\");\n         assertTrue(\"returned entryset should contain one entry\",\n-            map.entrySet().size() == 1); \n+            map.entrySet().size() == 1);\n         map = decorateMap(map, null, null);\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testPut() {\n-        Map map = makeTestMap();\n+        Map<K, V> map = makeTestMap();\n         try {\n-            map.put(\"Hi\", new Integer(3));\n+            map.put((K) \"Hi\", (V) new Integer(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n \n         try {\n-            map.put(new Integer(3), \"Hi\");\n+            map.put((K) new Integer(3), (V) \"Hi\");\n             fail(\"Illegal key should raise IllegalArgument\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         assertTrue(!map.containsKey(new Integer(3)));\n         assertTrue(!map.containsValue(new Integer(3)));\n \n-        Map map2 = new HashMap();\n-        map2.put(\"A\", \"a\");\n-        map2.put(\"B\", \"b\");\n-        map2.put(\"C\", \"c\");\n-        map2.put(\"c\", new Integer(3));\n+        Map<K, V> map2 = new HashMap<K, V>();\n+        map2.put((K) \"A\", (V) \"a\");\n+        map2.put((K) \"B\", (V) \"b\");\n+        map2.put((K) \"C\", (V) \"c\");\n+        map2.put((K) \"c\", (V) new Integer(3));\n \n         try {\n             map.putAll(map2);\n             // expected\n         }\n \n-        map.put(\"E\", \"e\");\n-        Iterator iterator = map.entrySet().iterator();\n+        map.put((K) \"E\", (V) \"e\");\n+        Iterator<Map.Entry<K, V>> iterator = map.entrySet().iterator();\n         try {\n-            Map.Entry entry = (Map.Entry)iterator.next();\n-            entry.setValue(new Integer(3));\n+            Map.Entry<K, V> entry = iterator.next();\n+            entry.setValue((V) new Integer(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n-        \n-        map.put(\"F\", \"f\");\n+\n+        map.put((K) \"F\", (V) \"f\");\n         iterator = map.entrySet().iterator();\n-        Map.Entry entry = (Map.Entry)iterator.next();\n-        entry.setValue(\"x\");\n-        \n+        Map.Entry<K, V> entry = iterator.next();\n+        entry.setValue((V) \"x\");\n+\n     }\n \n     public String getCompatibilityVersion() {\n //            (java.io.Serializable) map,\n //            \"D:/dev/collections/data/test/PredicatedMap.fullCollection.version3.1.obj\");\n //    }\n-}\n+}", "timestamp": 1252994256, "metainfo": ""}