{"sha": "b653182a8a6340296aba0b62bc0309489d5052f7", "log": "Add ComparatorUtilsTest.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Comparator;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Tests ComparatorUtils.\n+ *\n+ * @version $Id$\n+ */\n+public class ComparatorUtilsTest {\n+\n+    @Test\n+    public void booleanComparator() {\n+        Comparator<Boolean> comp = ComparatorUtils.booleanComparator(true);\n+        assertTrue(comp.compare(Boolean.TRUE, Boolean.FALSE) < 0);\n+        assertTrue(comp.compare(Boolean.TRUE, Boolean.TRUE) == 0);\n+        assertTrue(comp.compare(Boolean.FALSE, Boolean.TRUE) > 0);\n+\n+        comp = ComparatorUtils.booleanComparator(false);\n+        assertTrue(comp.compare(Boolean.TRUE, Boolean.FALSE) > 0);\n+        assertTrue(comp.compare(Boolean.TRUE, Boolean.TRUE) == 0);\n+        assertTrue(comp.compare(Boolean.FALSE, Boolean.TRUE) < 0);\n+    }\n+\n+    @Test\n+    public void chainedComparator() {\n+        // simple test: chain 2 natural comparators\n+        Comparator<Integer> comp = ComparatorUtils.chainedComparator(ComparatorUtils.<Integer>naturalComparator(),\n+                                                                     ComparatorUtils.<Integer>naturalComparator());\n+        assertTrue(comp.compare(1, 2) < 0);\n+        assertTrue(comp.compare(1, 1) == 0);\n+        assertTrue(comp.compare(2, 1) > 0);\n+    }\n+\n+    @Test\n+    public void max() {\n+        Comparator<Integer> reversed =\n+                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n+\n+        assertEquals(Integer.valueOf(10), ComparatorUtils.max(1, 10, null));\n+        assertEquals(Integer.valueOf(10), ComparatorUtils.max(10, -10, null));\n+        \n+        assertEquals(Integer.valueOf(1), ComparatorUtils.max(1, 10, reversed));\n+        assertEquals(Integer.valueOf(-10), ComparatorUtils.max(10, -10, reversed));\n+\n+        try {\n+            ComparatorUtils.max(1, null, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+\n+        try {\n+            ComparatorUtils.max(null, 10, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void min() {\n+        Comparator<Integer> reversed =\n+                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n+\n+        assertEquals(Integer.valueOf(1), ComparatorUtils.min(1, 10, null));\n+        assertEquals(Integer.valueOf(-10), ComparatorUtils.min(10, -10, null));\n+        \n+        assertEquals(Integer.valueOf(10), ComparatorUtils.min(1, 10, reversed));\n+        assertEquals(Integer.valueOf(10), ComparatorUtils.min(10, -10, reversed));\n+\n+        try {\n+            ComparatorUtils.min(1, null, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+\n+        try {\n+            ComparatorUtils.min(null, 10, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void nullLowComparator() {\n+        Comparator<Integer> comp = ComparatorUtils.nullLowComparator(null);\n+        assertTrue(comp.compare(null, 10) < 0);\n+        assertTrue(comp.compare(null, null) == 0);\n+        assertTrue(comp.compare(10, null) > 0);\n+    }\n+\n+    @Test\n+    public void nullHighComparator() {\n+        Comparator<Integer> comp = ComparatorUtils.nullHighComparator(null);\n+        assertTrue(comp.compare(null, 10) > 0);\n+        assertTrue(comp.compare(null, null) == 0);\n+        assertTrue(comp.compare(10, null) < 0);\n+    }\n+\n+}", "timestamp": 1433793937, "metainfo": ""}