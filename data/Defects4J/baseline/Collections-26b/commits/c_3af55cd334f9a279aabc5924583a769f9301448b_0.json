{"sha": "3af55cd334f9a279aabc5924583a769f9301448b", "log": "Applying my patch for COLLECTIONS-256 - adding a decorateTransform method as used with Maps to all of the collection classes  ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n      * Each object is passed through the transformer as it is added to the\n      * Bag. It is important not to use the original bag after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n+     * <p>\n+     * Existing entries in the specified bag will not be transformed.\n+     * If you want that behaviour, see {@link TransformedBag#decorateTransform}.\n      *\n      * @param bag  the bag to predicate, must not be null\n      * @param transformer  the transformer for the bag, must not be null\n      * Each object is passed through the transformer as it is added to the\n      * Bag. It is important not to use the original bag after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n+     * <p>\n+     * Existing entries in the specified bag will not be transformed.\n+     * If you want that behaviour, see {@link TransformedSortedBag#decorateTransform}.\n      *\n      * @param bag  the bag to predicate, must not be null\n      * @param transformer  the transformer for the bag, must not be null\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n      * Each object is passed through the transformer as it is added to the\n      * Buffer. It is important not to use the original buffer after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n+     * <p>\n+     * Existing entries in the specified buffer will not be transformed.\n+     * If you want that behaviour, see {@link TransformedBuffer#decorateTransform}.\n      *\n      * @param buffer  the buffer to predicate, must not be null\n      * @param transformer  the transformer for the buffer, must not be null\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n      * Each object is passed through the transformer as it is added to the\n      * Collection. It is important not to use the original collection after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n+     * <p>\n+     * Existing entries in the specified collection will not be transformed.\n+     * If you want that behaviour, see {@link TransformedCollection#decorateTransform}.\n      *\n      * @param collection  the collection to predicate, must not be null\n      * @param transformer  the transformer for the collection, must not be null\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n      * Each object is passed through the transformer as it is added to the\n      * List. It is important not to use the original list after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n+     * <p>\n+     * Existing entries in the specified list will not be transformed.\n+     * If you want that behaviour, see {@link TransformedList#decorateTransform}.\n      *\n      * @param list  the list to predicate, must not be null\n      * @param transformer  the transformer for the list, must not be null\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n      * Each object is passed through the transformer as it is added to the\n      * Set. It is important not to use the original set after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n+     * <p>\n+     * Existing entries in the specified set will not be transformed.\n+     * If you want that behaviour, see {@link TransformedSet#decorateTransform}.\n      *\n      * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * Each object is passed through the transformer as it is added to the\n      * Set. It is important not to use the original set after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n+     * <p>\n+     * Existing entries in the specified set will not be transformed.\n+     * If you want that behaviour, see {@link TransformedSortedSet#decorateTransform}.\n      *\n      * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n--- a/src/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TransformedBag.java\n package org.apache.commons.collections.bag;\n \n import java.util.Set;\n+import java.util.Collection;\n \n import org.apache.commons.collections.Bag;\n import org.apache.commons.collections.Transformer;\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n         return new TransformedBag(bag, transformer);\n     }\n     \n+    /**\n+     * Factory method to create a transforming bag that will transform\n+     * existing contents of the specified bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed Bag\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     * @since Commons Collections 3.3\n+     */\n+    public static Bag decorateTransform(Bag bag, Transformer transformer) {\n+        TransformedBag decorated = new TransformedBag(bag, transformer);\n+        if (transformer != null && bag != null && bag.size() > 0) {\n+            Object[] values = bag.toArray();\n+            bag.clear();\n+            for(int i=0; i<values.length; i++) {\n+                decorated.getCollection().add(transformer.transform(values[i]));\n+            }\n+        }\n+        return decorated;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n--- a/src/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n         return new TransformedSortedBag(bag, transformer);\n     }\n     \n+    /**\n+     * Factory method to create a transforming sorted bag that will transform\n+     * existing contents of the specified sorted bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed SortedBag\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     * @since Commons Collections 3.3\n+     */\n+    public static SortedBag decorateTransform(SortedBag bag, Transformer transformer) {\n+        TransformedSortedBag decorated = new TransformedSortedBag(bag, transformer);\n+        if (transformer != null && bag != null && bag.size() > 0) {\n+            Object[] values = bag.toArray();\n+            bag.clear();\n+            for(int i=0; i<values.length; i++) {\n+                decorated.getCollection().add(transformer.transform(values[i]));\n+            }\n+        }\n+        return decorated;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n--- a/src/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n      * <p>\n      * If there are any elements already in the buffer being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param buffer  the buffer to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n         return new TransformedBuffer(buffer, transformer);\n     }\n     \n+    /**\n+     * Factory method to create a transforming buffer that will transform\n+     * existing contents of the specified buffer.\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed Buffer\n+     * @throws IllegalArgumentException if buffer or transformer is null\n+     * @since Commons Collections 3.3\n+     */\n+    public static Buffer decorateTransform(Buffer buffer, Transformer transformer) {\n+        TransformedBuffer decorated = new TransformedBuffer(buffer, transformer);\n+        if (transformer != null && buffer != null && buffer.size() > 0) {\n+            Object[] values = buffer.toArray();\n+            buffer.clear();\n+            for(int i=0; i<values.length; i++) {\n+                decorated.getCollection().add(transformer.transform(values[i]));\n+            }\n+        }\n+        return decorated;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n--- a/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n      * <p>\n      * If there are any elements already in the collection being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param coll  the collection to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n         return new TransformedCollection(coll, transformer);\n     }\n     \n+    /**\n+     * Factory method to create a transforming collection that will transform\n+     * existing contents of the specified collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param collection  the collection to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed Collection\n+     * @throws IllegalArgumentException if collection or transformer is null\n+     * @since Commons Collections 3.3\n+     */\n+    public static Collection decorateTransform(Collection collection, Transformer transformer) {\n+        TransformedCollection decorated = new TransformedCollection(collection, transformer);\n+        if (transformer != null && collection != null && collection.size() > 0) {\n+            Object[] values = collection.toArray();\n+            collection.clear();\n+            for(int i=0; i<values.length; i++) {\n+                decorated.getCollection().add(transformer.transform(values[i]));\n+            }\n+        }\n+        return decorated;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n--- a/src/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/java/org/apache/commons/collections/list/TransformedList.java\n      * <p>\n      * If there are any elements already in the list being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param list  the list to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n         return new TransformedList(list, transformer);\n     }\n     \n+    /**\n+     * Factory method to create a transforming list that will transform\n+     * existing contents of the specified list.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed List\n+     * @throws IllegalArgumentException if list or transformer is null\n+     * @since Commons Collections 3.3\n+     */\n+    public static List decorateTransform(List list, Transformer transformer) {\n+        TransformedList decorated = new TransformedList(list, transformer);\n+        if (transformer != null && list != null && list.size() > 0) {\n+            Object[] values = list.toArray();\n+            list.clear();\n+            for(int i=0; i<values.length; i++) {\n+                decorated.getCollection().add(transformer.transform(values[i]));\n+            }\n+        }\n+        return decorated;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n--- a/src/java/org/apache/commons/collections/set/TransformedSet.java\n+++ b/src/java/org/apache/commons/collections/set/TransformedSet.java\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n         return new TransformedSet(set, transformer);\n     }\n     \n+    /**\n+     * Factory method to create a transforming set that will transform\n+     * existing contents of the specified set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed Set\n+     * @throws IllegalArgumentException if set or transformer is null\n+     * @since Commons Collections 3.3\n+     */\n+    public static Set decorateTransform(Set set, Transformer transformer) {\n+        TransformedSet decorated = new TransformedSet(set, transformer);\n+        if (transformer != null && set != null && set.size() > 0) {\n+            Object[] values = set.toArray();\n+            set.clear();\n+            for(int i=0; i<values.length; i++) {\n+                decorated.getCollection().add(transformer.transform(values[i]));\n+            }\n+        }\n+        return decorated;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n--- a/src/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/TransformedSortedSet.java\n      * <p>\n      * If there are any elements already in the set being decorated, they\n      * are NOT transformed.\n+     * Constrast this with {@link #decorateTransform}.\n      * \n      * @param set  the set to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n         return new TransformedSortedSet(set, transformer);\n     }\n     \n+    /**\n+     * Factory method to create a transforming sorted set that will transform\n+     * existing contents of the specified sorted set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * will be transformed by this method.\n+     * Constrast this with {@link #decorate}.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed SortedSet\n+     * @throws IllegalArgumentException if set or transformer is null\n+     * @since Commons Collections 3.3\n+     */\n+    public static SortedSet decorateTransform(SortedSet set, Transformer transformer) {\n+        TransformedSortedSet decorated = new TransformedSortedSet(set, transformer);\n+        if (transformer != null && set != null && set.size() > 0) {\n+            Object[] values = set.toArray();\n+            set.clear();\n+            for(int i=0; i<values.length; i++) {\n+                decorated.getCollection().add(transformer.transform(values[i]));\n+            }\n+        }\n+        return decorated;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n--- a/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n         \n         assertEquals(false, bag.remove(els[0]));\n         assertEquals(true, bag.remove(new Integer((String) els[0])));\n+    }\n+\n+    public void testTransformedBag_decorateTransform() {\n+        Bag originalBag = new HashBag();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalBag.add(els[i]);\n+        }\n+        Bag bag = TransformedBag.decorateTransform(originalBag, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, bag.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+            assertEquals(false, bag.contains(els[i]));\n+        }\n         \n+        assertEquals(false, bag.remove(els[0]));\n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n     }\n \n     public String getCompatibilityVersion() {\n--- a/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n         \n     }\n \n+    public void testTransformedBag_decorateTransform() {\n+        Bag originalBag = new TreeBag();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalBag.add(els[i]);\n+        }\n+        Bag bag = TransformedBag.decorateTransform(originalBag, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, bag.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+    }\n+\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/buffer/TestTransformedBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestTransformedBuffer.java\n         assertEquals(true, buffer.remove(new Integer((String) els[0])));\n         \n     }\n+\n+    public void testTransformedBuffer_decorateTransform() {\n+        Buffer originalBuffer = new ArrayStack();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalBuffer.add(els[i]);\n+        }\n+        Buffer buffer = TransformedBuffer.decorateTransform(originalBuffer, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, buffer.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, buffer.contains(new Integer((String) els[i])));\n+            assertEquals(false, buffer.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, buffer.remove(els[0]));\n+        assertEquals(true, buffer.remove(new Integer((String) els[0])));\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n }\n--- a/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n         assertEquals(true, coll.remove(new Integer((String) els[0])));\n     }\n \n+    public void testTransformedCollection_decorateTransform() {\n+        Collection originalCollection = new ArrayList();\n+        Object[] els = getFullElements();\n+        for (int i = 0; i < els.length; i++) {\n+            originalCollection.add(els[i]);\n+        }\n+        Collection collection = TransformedCollection.decorateTransform(originalCollection, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, collection.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, collection.contains(new Integer((String) els[i])));\n+            assertEquals(false, collection.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, collection.remove(els[0]));\n+        assertEquals(true, collection.remove(new Integer((String) els[0])));\n+    }\n+\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/list/TestTransformedList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTransformedList.java\n         assertEquals(new Integer(2), list.get(2));\n     }\n \n+    public void testTransformedList_decorateTransform() {\n+        List originalList = new ArrayList();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalList.add(els[i]);\n+        }\n+        List list = TransformedList.decorateTransform(originalList, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, list.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, list.contains(new Integer((String) els[i])));\n+            assertEquals(false, list.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, list.remove(els[0]));\n+        assertEquals(true, list.remove(new Integer((String) els[0])));\n+    }\n+\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n         \n     }\n \n+    public void testTransformedSet_decorateTransform() {\n+        Set originalSet = new HashSet();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalSet.add(els[i]);\n+        }\n+        Set set = TransformedSet.decorateTransform(originalSet, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, set.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+            assertEquals(false, set.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, set.remove(els[0]));\n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+    }\n+\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n package org.apache.commons.collections.set;\n \n import java.util.Arrays;\n-import java.util.HashSet;\n+import java.util.TreeSet;\n import java.util.Set;\n import java.util.SortedSet;\n-import java.util.TreeSet;\n \n import junit.framework.Test;\n \n     \n     //-----------------------------------------------------------------------   \n     public void testTransformedSet() {\n-        Set set = TransformedSortedSet.decorate(new HashSet(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        Set set = TransformedSortedSet.decorate(new TreeSet(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, set.size());\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n         for (int i = 0; i < els.length; i++) {\n             set.add(els[i]);\n             assertEquals(i + 1, set.size());\n             assertEquals(true, set.contains(new Integer((String) els[i])));\n-            assertEquals(false, set.contains(els[i]));\n         }\n         \n-        assertEquals(false, set.remove(els[0]));\n         assertEquals(true, set.remove(new Integer((String) els[0])));\n         \n     } \n+\n+    public void testTransformedSet_decorateTransform() {\n+        Set originalSet = new TreeSet();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalSet.add(els[i]);\n+        }\n+        Set set = TransformedSortedSet.decorateTransform(originalSet, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, set.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+    }\n \n     public String getCompatibilityVersion() {\n         return \"3.1\";", "timestamp": 1188999527, "metainfo": ""}