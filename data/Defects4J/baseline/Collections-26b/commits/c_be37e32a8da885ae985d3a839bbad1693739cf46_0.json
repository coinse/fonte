{"sha": "be37e32a8da885ae985d3a839bbad1693739cf46", "log": "Add PriorityQueueUtils and two decorators Deprecate SynchronizedPriorityQueue in main package   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/PriorityQueueUtils.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/PriorityQueueUtils.java,v 1.1 2003/05/16 15:30:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import org.apache.commons.collections.decorators.SynchronizedPriorityQueue;\n+import org.apache.commons.collections.decorators.UnmodifiablePriorityQueue;\n+\n+/**\n+ * Provides static utility methods and decorators for {@link PriorityQueue}.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/16 15:30:36 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class PriorityQueueUtils {\n+\n+    /**\n+     * An empty unmodifiable priority queue.\n+     */\n+    public static final PriorityQueue EMPTY_PRIORITY_QUEUE = UnmodifiablePriorityQueue.decorate(new BinaryHeap());\n+\n+    /**\n+     * <code>PriorityQueueUtils</code> should not normally be instantiated.\n+     */\n+    public PriorityQueueUtils() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a synchronized priority queue backed by the given priority queue.\n+     * \n+     * @param priorityQueue  the priority queue to synchronize, must not be null\n+     * @return a synchronized priority queue backed by the given priority queue\n+     * @throws IllegalArgumentException  if the priority queue is null\n+     */\n+    public static PriorityQueue synchronizedPriorityQueue(PriorityQueue priorityQueue) {\n+        return SynchronizedPriorityQueue.decorate(priorityQueue);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable priority queue backed by the given priority queue.\n+     *\n+     * @param priorityQueue  the priority queue to make unmodifiable, must not be null\n+     * @return an unmodifiable priority queue backed by the given priority queue\n+     * @throws IllegalArgumentException  if the priority queue is null\n+     */\n+    public static PriorityQueue unmodifiablePriorityQueue(PriorityQueue priorityQueue) {\n+        return UnmodifiablePriorityQueue.decorate(priorityQueue);\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java,v 1.6 2003/05/16 14:58:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java,v 1.7 2003/05/16 15:30:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Provides synchronized wrapper methods for all the methods \n  * defined in the PriorityQueue interface.\n  *\n+ * @deprecated Moved to decorators subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.6 $ $Date: 2003/05/16 14:58:42 $\n+ * @version $Revision: 1.7 $ $Date: 2003/05/16 15:30:36 $\n  * \n  * @author  <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a> \n  */\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/SynchronizedPriorityQueue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/SynchronizedPriorityQueue.java,v 1.1 2003/05/16 15:30:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.PriorityQueue;\n+\n+/**\n+ * <code>SynchronizedPriorityQueue</code> decorates another <code>PriorityQueue</code>\n+ * to synchronize its behaviour for a multi-threaded environment.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/16 15:30:36 $\n+ * \n+ * @author <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a>\n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedPriorityQueue implements PriorityQueue {\n+\n+    /** The priority queue to decorate */\n+    protected final PriorityQueue priorityQueue;\n+\n+    /**\n+     * Factory method to create a synchronized priority queue.\n+     * \n+     * @param priorityQueue  the priority queue to decorate, must not be null\n+     * @throws IllegalArgumentException if priority queue is null\n+     */\n+    public static PriorityQueue decorate(PriorityQueue priorityQueue) {\n+        return new SynchronizedPriorityQueue(priorityQueue);\n+    }\n+    \n+    /**\n+     * Constructs a new synchronized priority queue.\n+     *\n+     * @param priorityQueue  the priority queue to synchronize\n+     */\n+    protected SynchronizedPriorityQueue(PriorityQueue priorityQueue) {\n+        if (priorityQueue == null) {\n+            throw new IllegalArgumentException(\"PriorityQueue must not be null\");\n+        }\n+        this.priorityQueue = priorityQueue;\n+    }\n+\n+    /**\n+     * Clear all elements from queue.\n+     */\n+    public synchronized void clear() {\n+        priorityQueue.clear();\n+    }\n+\n+    /**\n+     * Test if queue is empty.\n+     *\n+     * @return true if queue is empty else false.\n+     */\n+    public synchronized boolean isEmpty() {\n+        return priorityQueue.isEmpty();\n+    }\n+\n+    /**\n+     * Insert an element into queue.\n+     *\n+     * @param element the element to be inserted\n+     */\n+    public synchronized void insert(Object element) {\n+        priorityQueue.insert(element);\n+    }\n+\n+    /**\n+     * Return element on top of heap but don't remove it.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object peek() throws NoSuchElementException {\n+        return priorityQueue.peek();\n+    }\n+\n+    /**\n+     * Return element on top of heap and remove it.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object pop() throws NoSuchElementException {\n+        return priorityQueue.pop();\n+    }\n+\n+    /**\n+     * Returns a string representation of the underlying queue.\n+     *\n+     * @return a string representation of the underlying queue\n+     */\n+    public synchronized String toString() {\n+        return priorityQueue.toString();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiablePriorityQueue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiablePriorityQueue.java,v 1.1 2003/05/16 15:30:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.PriorityQueue;\n+\n+/**\n+ * <code>UnmodifiablePriorityQueue</code> decorates another <code>PriorityQueue</code>\n+ * to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/16 15:30:36 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiablePriorityQueue implements PriorityQueue {\n+\n+    /** The priority queue to decorate */\n+    protected final PriorityQueue priorityQueue;\n+\n+    /**\n+     * Factory method to create an unmodifiable priority queue.\n+     * \n+     * @param priorityQueue  the priority queue to decorate, must not be null\n+     * @throws IllegalArgumentException if priority queue is null\n+     */\n+    public static PriorityQueue decorate(PriorityQueue priorityQueue) {\n+        return new UnmodifiablePriorityQueue(priorityQueue);\n+    }\n+    \n+    /**\n+     * Constructs a new synchronized priority queue.\n+     *\n+     * @param priorityQueue  the priority queue to synchronize\n+     */\n+    protected UnmodifiablePriorityQueue(PriorityQueue priorityQueue) {\n+        if (priorityQueue == null) {\n+            throw new IllegalArgumentException(\"PriorityQueue must not be null\");\n+        }\n+        this.priorityQueue = priorityQueue;\n+    }\n+\n+    /**\n+     * Clear all elements from queue - Unsupported as unmodifiable.\n+     */\n+    public synchronized void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Test if queue is empty.\n+     *\n+     * @return true if queue is empty else false.\n+     */\n+    public synchronized boolean isEmpty() {\n+        return priorityQueue.isEmpty();\n+    }\n+\n+    /**\n+     * Insert an element into queue - Unsupported as unmodifiable.\n+     *\n+     * @param element the element to be inserted\n+     */\n+    public synchronized void insert(Object element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Return element on top of heap but don't remove it.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object peek() throws NoSuchElementException {\n+        return priorityQueue.peek();\n+    }\n+\n+    /**\n+     * Return element on top of heap and remove it - Unsupported as unmodifiable.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object pop() throws NoSuchElementException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Returns a string representation of the underlying queue.\n+     *\n+     * @return a string representation of the underlying queue\n+     */\n+    public synchronized String toString() {\n+        return priorityQueue.toString();\n+    }\n+    \n+}", "timestamp": 1053099036, "metainfo": ""}