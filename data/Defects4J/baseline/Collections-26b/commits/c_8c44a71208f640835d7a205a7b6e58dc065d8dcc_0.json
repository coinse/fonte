{"sha": "8c44a71208f640835d7a205a7b6e58dc065d8dcc", "log": "Added SingletonIterator for iterating over a single value together with a JUnit test case   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/SingletonIterator.java\n+/*\n+ * Copyright (C) The Apache Software Foundation. All rights reserved.\n+ *\n+ * This software is published under the terms of the Apache Software License\n+ * version 1.1, a copy of which has been included with this distribution in\n+ * the LICENSE file.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/** <p><code>SingleIterator</code> is an {@link Iterator} over a single \n+  * object instance.</p>\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @version $Revision: 1.1 $\n+  */\n+public class SingletonIterator implements Iterator {\n+\n+    private boolean first = true;\n+    private Object object;\n+    \n+    public SingletonIterator(Object object) {\n+        this.object = object;\n+    }\n+\n+    public boolean hasNext() {\n+        return first;\n+    }\n+\n+    public Object next() {\n+        if (! first ) {\n+            throw new NoSuchElementException();\n+        }\n+        Object answer = object;\n+        object = null;\n+        first = false;\n+        return answer;\n+    }\n+\n+    public void remove() {\n+        throw new UnsupportedOperationException( \"remove() is not supported by this iterator\" );\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestSingletonIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSingletonIterator.java,v 1.1 2001/08/22 07:43:53 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/22 07:43:53 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the SingletonIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ *\n+ * @author James Strachan\n+ * @version $Id: TestSingletonIterator.java,v 1.1 2001/08/22 07:43:53 jstrachan Exp $\n+ */\n+public class TestSingletonIterator extends TestObject {\n+\n+    private static final Object testValue = \"foo\";\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestSingletonIterator.class);\n+    }\n+    \n+    public TestSingletonIterator(String testName) {\n+        super(testName);\n+    }\n+    \n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return new SingletonIterator( testValue );\n+    }\n+    \n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeObject();\n+        assertTrue( \"Iterator has a first item\", iter.hasNext() );\n+        \n+        Object iterValue = iter.next();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+\ttry {\n+\t    Object testValue = iter.next();\n+\t} \n+        catch (Exception e) {\n+\t  assertTrue(\"NoSuchElementException must be thrown\", \n+\t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n+\t}\n+    }\n+}\n+", "timestamp": 998466233, "metainfo": ""}