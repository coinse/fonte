{"sha": "cae889f3c01cd6e022d98530e867eb48abc03427", "log": "[COLLECTIONS-412] Improved performance of CollectionUtils#subtract. Thanks to Adrian Nistor for report and patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.commons.collections.bag.HashBag;\n import org.apache.commons.collections.collection.PredicatedCollection;\n import org.apache.commons.collections.collection.SynchronizedCollection;\n import org.apache.commons.collections.collection.TransformedCollection;\n      * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n      * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n      * condition, <i>p</i> are subtracted from <i>a</i>.\n+     * \n+     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection}\n+     * that satisfies the predicate condition will be the cardinality of <i>e</i> in <i>a</i>\n+     * minus the cardinality of <i>e</i> in <i>b</i>, or zero, whichever is greater.</p>\n+     * <p>The cardinality of each element <i>e</i> in the returned {@link Collection} that does <b>not</b>\n+     * satisfy the predicate condition will be equal to the cardinality of <i>e</i> in <i>a</i>.</p>\n      *\n      * @param a  the collection to subtract from, must not be null\n      * @param b  the collection to subtract, must not be null\n      * @since 4.0\n      * @see Collection#removeAll\n      */\n-    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p) {\n-        ArrayList<O> list = new ArrayList<O>();\n-        addAll(list, a);\n+    public static <O> Collection<O> subtract(final Iterable<? extends O> a,\n+                                             final Iterable<? extends O> b,\n+                                             final Predicate<O> p) {\n+        final ArrayList<O> list = new ArrayList<O>();\n+        final HashBag<O> bag = new HashBag<O>();\n         for (O element : b) {\n             if (p.evaluate(element)) {\n-                list.remove(element);\n+                bag.add(element);\n+            }\n+        }\n+        for (O element : a) {\n+            if (!bag.remove(element, 1)) {\n+                list.add(element);\n             }\n         }\n         return list;", "timestamp": 1340451114, "metainfo": ""}