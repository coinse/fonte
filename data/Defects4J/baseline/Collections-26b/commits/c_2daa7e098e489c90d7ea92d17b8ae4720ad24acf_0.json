{"sha": "2daa7e098e489c90d7ea92d17b8ae4720ad24acf", "log": "Modified TestPredicatedBag, TestPredicatedSortedBag to use identically true predicate in makeBag override.  Previous versions depended on the fact that TestBag only adds Strings.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/decorators/TestPredicatedBag.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedBag.java,v 1.1 2003/09/09 03:03:57 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedBag.java,v 1.2 2003/09/19 22:21:53 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.HashBag;\n import org.apache.commons.collections.TestBag;\n import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n \n /**\n  * Extension of {@link TestBag} for exercising the {@link PredicatedBag}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/09 03:03:57 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/19 22:21:53 $\n  * \n  * @author Phil Steitz\n  */\n         String[] testCaseName = { TestPredicatedBag.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n+    \n+    //--------------------------------------------------------------------------\n \n-    protected Predicate getPredicate() {\n+    protected Predicate stringPredicate() {\n         return new Predicate() {\n             public boolean evaluate(Object o) {\n                 return o instanceof String;\n             }\n         };\n-    }\n+    }   \n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n     \n     protected Bag decorateBag(HashBag bag, Predicate predicate) {\n         return PredicatedBag.decorate(bag, predicate);\n     }\n \n     public Bag makeBag() {\n-        return decorateBag(new HashBag(), getPredicate());\n+        return decorateBag(new HashBag(), truePredicate);\n     }\n+    \n+    public Bag makeTestBag() {\n+        return decorateBag(new HashBag(), stringPredicate());\n+    }\n+    \n+    //--------------------------------------------------------------------------\n \n     public void testlegalAddRemove() {\n-        Bag bag = makeBag();\n+        Bag bag = makeTestBag();\n         assertEquals(0, bag.size());\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\"};\n         for (int i = 0; i < els.length; i++) {\n     }\n  \n     public void testIllegalAdd() {\n-        Bag bag = makeBag();\n+        Bag bag = makeTestBag();\n         Integer i = new Integer(3);\n         try {\n             bag.add(i);\n         elements.add(new Integer(3));\n         elements.add(\"four\");\n         try {\n-            Bag bag = decorateBag(elements, getPredicate());\n+            Bag bag = decorateBag(elements, stringPredicate());\n             fail(\"Bag contains an element that should fail the predicate.\");\n         } catch (IllegalArgumentException e) {\n             // expected\n--- a/src/test/org/apache/commons/collections/decorators/TestPredicatedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSortedBag.java,v 1.1 2003/09/09 03:03:57 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSortedBag.java,v 1.2 2003/09/19 22:21:53 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.TreeBag;\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.TestBag;\n+import org.apache.commons.collections.PredicateUtils;\n \n /**\n  * Extension of {@link TestBag} for exercising the {@link PredicatedSortedBag}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/09 03:03:57 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/19 22:21:53 $\n  * \n  * @author Phil Steitz\n  */\n         super(testName);\n     }\n     \n-    protected Predicate getPredicate() {\n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedSortedBag.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    protected Predicate stringPredicate() {\n         return new Predicate() {\n             public boolean evaluate(Object o) {\n                 return o instanceof String;\n             }\n         };\n-    }\n+    }   \n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n     \n     protected SortedBag decorateBag(SortedBag bag, Predicate predicate) {\n         return PredicatedSortedBag.decorate(bag, predicate);\n     }\n     \n     public Bag makeBag() {\n-        return decorateBag(emptyBag, getPredicate());\n-    }\n-\n-    public static Test suite() {\n-        return new TestSuite(TestPredicatedSortedBag.class);\n-    }\n-\n-    public static void main(String args[]) {\n-        String[] testCaseName = { TestPredicatedSortedBag.class.getName()};\n-        junit.textui.TestRunner.main(testCaseName);\n+        return decorateBag(emptyBag, truePredicate);\n     }\n     \n+    public Bag makeTestBag() {\n+        return decorateBag(emptyBag, stringPredicate());\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n     public void testDecorate() {\n-        SortedBag bag = decorateBag(emptyBag, getPredicate());\n+        SortedBag bag = decorateBag(emptyBag, stringPredicate());\n         SortedBag bag2 = ((PredicatedSortedBag) bag).getSortedBag();\n         try {\n             SortedBag bag3 = decorateBag(emptyBag, null);\n             fail(\"Expecting IllegalArgumentException for null predicate\");\n         } catch (IllegalArgumentException e) {}\n         try {\n-            SortedBag bag4 = decorateBag(nullBag, getPredicate());\n+            SortedBag bag4 = decorateBag(nullBag, stringPredicate());\n             fail(\"Expecting IllegalArgumentException for null bag\");\n         } catch (IllegalArgumentException e) {}\n     }\n     \n     public void testSortOrder() {\n-        PredicatedSortedBag bag = \n-            (PredicatedSortedBag) decorateBag(emptyBag, getPredicate());\n+        SortedBag bag = decorateBag(emptyBag, stringPredicate());\n         String one = \"one\";\n         String two = \"two\";\n         String three = \"three\";", "timestamp": 1064010113, "metainfo": ""}