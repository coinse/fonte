{"sha": "2d2aefe3613c2b80b24d55331aa806ddbeca6b09", "log": "Fix up generics and other warnings  ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n      * this purpose. However they could be cast to Set or List which might be\n      * undesirable. This implementation only implements Collection.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.decorate(new ArrayList<Object>());\n \n     /**\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n      * @param obj  the object to convert to an iterator\n      * @return a suitable iterator, never null\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static Iterator<?> getIterator(Object obj) {\n         if (obj == null) {\n             return emptyIterator();\n         }\n         if (obj instanceof Iterator) {\n-            return (Iterator) obj;\n+            return (Iterator<?>) obj;\n         }\n         if (obj instanceof Collection) {\n-            return ((Collection) obj).iterator();\n+            return ((Collection<?>) obj).iterator();\n         }\n         if (obj instanceof Object[]) {\n-            return new ObjectArrayIterator((Object[]) obj);\n+            return new ObjectArrayIterator<Object>((Object[]) obj);\n         }\n         if (obj instanceof Enumeration) {\n-            return new EnumerationIterator((Enumeration) obj);\n+            return new EnumerationIterator<Object>((Enumeration<?>) obj);\n         }\n         if (obj instanceof Map) {\n-            return ((Map) obj).values().iterator();\n+            return ((Map<?, ?>) obj).values().iterator();\n         }\n         if (obj instanceof Dictionary) {\n-            return new EnumerationIterator(((Dictionary) obj).elements());\n+            return new EnumerationIterator<Object>(((Dictionary<?, ?>) obj).elements());\n         } else if (obj.getClass().isArray()) {\n-            return new ArrayIterator(obj);\n+            return new ArrayIterator<Object>(obj);\n         }\n         try {\n             Method method = obj.getClass().getMethod(\"iterator\", (Class[]) null);\n             if (Iterator.class.isAssignableFrom(method.getReturnType())) {\n-                Iterator it = (Iterator) method.invoke(obj, (Object[]) null);\n+                Iterator<?> it = (Iterator<?>) method.invoke(obj, (Object[]) null);\n                 if (it != null) {\n                     return it;\n                 }\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n      * @param coll the collection to check against\n      * @return <code>true</code> if the Bag contains all the collection\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public boolean containsAll(Collection<?> coll) {\n         if (coll instanceof Bag) {\n             return containsAll((Bag<?>) coll);\n         }\n-        return containsAll(new HashBag<Object>((Collection<Object>) coll));\n+        return containsAll(new HashBag<Object>(coll));\n     }\n \n     /**\n                 throw new ConcurrentModificationException();\n             }\n             if (itemCount == 0) {\n-                current = (Map.Entry<E, MutableInteger>) entryIterator.next();\n+                current = entryIterator.next();\n                 itemCount = current.getValue().value;\n             }\n             canRemove = true;\n      * @param coll the collection to retain\n      * @return true if this call changed the collection\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public boolean retainAll(Collection<?> coll) {\n         if (coll instanceof Bag) {\n             return retainAll((Bag<?>) coll);\n         }\n-        return retainAll(new HashBag<Object>((Collection<Object>) coll));\n+        return retainAll(new HashBag<Object>(coll));\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n     }\n \n     public SortedBidiMap<V, K> inverseSortedBidiMap() {\n-        return (SortedBidiMap<V, K>) inverseBidiMap();\n+        return inverseBidiMap();\n     }\n \n     public OrderedBidiMap<V, K> inverseOrderedBidiMap() {\n-        return (OrderedBidiMap<V, K>) inverseBidiMap();\n+        return inverseBidiMap();\n     }\n \n     //-----------------------------------------------------------------------\n             // use the normalMap as the filtered map, but reverseMap as the full map\n             // this forces containsValue and clear to be overridden\n             super(new DualTreeBidiMap<K, V>(sm, bidi.reverseMap, bidi.inverseBidiMap));\n-            this.bidi = (DualTreeBidiMap<K, V>) decorated();\n+            this.bidi = decorated();\n         }\n \n         @Override\n         @Override\n         public K previousKey(K key) {\n             return decorated().previousKey(key);\n-        };\n+        }\n \n         @Override\n         public K nextKey(K key) {\n             return decorated().nextKey(key);\n-        };\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n     /**\n      * Factory method to create a blocking buffer with a timeout value.\n      *\n-     * @param <t> the type of the elements in the buffer\n      * @param buffer  the buffer to decorate, must not be null\n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n      * @return a new blocking buffer\n--- a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n     private static final long serialVersionUID=-291439688585137865L;\n \n     /** The singleton instance. */\n-    @SuppressWarnings(\"unchecked\")\n     public static final ComparableComparator<?> INSTANCE = new ComparableComparator();\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n      * @return negative if obj1 is less, positive if greater, zero if equal\n      * @throws IllegalArgumentException if obj1 or obj2 are not known\n      *  to this Comparator and an alternative behavior has not been set\n-     *  via {@link #setUnknownObjectBehavior(int)}.\n+     *  via {@link #setUnknownObjectBehavior(UnknownObjectBehavior)}.\n      */\n     public int compare(T obj1, T obj2) {\n         isLocked = true;\n--- a/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n         Closure<? super E>[] cmds = new Closure[closures.size()];\n         int i = 0;\n         for (Closure<? super E> closure : closures) {\n-            cmds[i++] = (Closure<E>) closure;\n+            cmds[i++] = closure;\n         }\n         FunctorUtils.validate(cmds);\n         return new ChainedClosure<E>(cmds);\n--- a/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n         if (paramTypes == null || paramTypes.length == 0) {\n             return new InstantiateTransformer<T>();\n         }\n-        paramTypes = (Class[]) paramTypes.clone();\n-        args = (Object[]) args.clone();\n+        paramTypes = paramTypes.clone();\n+        args = args.clone();\n         return new InstantiateTransformer<T>(paramTypes, args);\n     }\n \n--- a/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n         if (paramTypes == null || paramTypes.length == 0) {\n             return new InvokerTransformer<I, O>(methodName);\n         } else {\n-            paramTypes = (Class[]) paramTypes.clone();\n-            args = (Object[]) args.clone();\n+            paramTypes = paramTypes.clone();\n+            args = args.clone();\n             return new InvokerTransformer<I, O>(methodName, paramTypes, args);\n         }\n     }\n--- a/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n      * @throws java.util.NoSuchElementException if the iteration is finished\n      */\n     public K next() {\n-        last = (Map.Entry<K, V>) iterator.next();\n+        last = iterator.next();\n         canRemove = true;\n         return last.getKey();\n     }\n--- a/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n      */\n     public boolean hasPrevious() {\n         if (iterator instanceof ListIterator) {\n-            @SuppressWarnings(\"unchecked\")\n-            ListIterator li = (ListIterator) iterator;\n+            ListIterator<?> li = (ListIterator<?>) iterator;\n             return li.hasPrevious();\n         }\n         return currentIndex > 0;\n      */\n     public int nextIndex() {\n         if (iterator instanceof ListIterator) {\n-            @SuppressWarnings(\"unchecked\")\n-            ListIterator li = (ListIterator) iterator;\n+            ListIterator<?> li = (ListIterator<?>) iterator;\n             return li.nextIndex();\n         }\n         return currentIndex;\n      */\n     public int previousIndex() {\n         if (iterator instanceof ListIterator) {\n-            @SuppressWarnings(\"unchecked\")\n-            ListIterator li = (ListIterator) iterator;\n+            ListIterator<?> li = (ListIterator<?>) iterator;\n             return li.previousIndex();\n         }\n         return currentIndex - 1;\n      */\n     public void reset()  {\n         if (iterator instanceof ListIterator) {\n-            @SuppressWarnings(\"unchecked\")\n-            ListIterator li = (ListIterator) iterator;\n+            ListIterator<?> li = (ListIterator<?>) iterator;\n             while (li.previousIndex() >= 0) {\n                 li.previous();\n             }\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n      * @return true if equal key and value\n      */\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n         if (obj instanceof Map.Entry == false) {\n             return false;\n         }\n-        Map.Entry other = (Map.Entry) obj;\n+        Map.Entry<?, ?> other = (Map.Entry<?, ?>) obj;\n         return\n             (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n             (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n--- a/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n      * @return true if equal key and value\n      */\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean equals(final Object obj) {\n         if (obj == this) {\n             return true;\n             return false;\n         }\n \n-        DefaultKeyValue other = (DefaultKeyValue) obj;\n+        DefaultKeyValue<?, ?> other = (DefaultKeyValue<?, ?>) obj;\n         return \n             (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n             (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n--- a/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/java/org/apache/commons/collections/list/AbstractLinkedList.java\n     public <T> T[] toArray(T[] array) {\n         // Extend the array if needed\n         if (array.length < size) {\n-            Class componentType = array.getClass().getComponentType();\n+            Class<?> componentType = array.getClass().getComponentType();\n             array = (T[]) Array.newInstance(componentType, size);\n         }\n         // Copy the values into the array\n \n     //-----------------------------------------------------------------------\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n         if (obj instanceof List == false) {\n             return false;\n         }\n-        List other = (List) obj;\n+        List<?> other = (List<?>) obj;\n         if (other.size() != size()) {\n             return false;\n         }\n-        ListIterator it1 = listIterator();\n-        ListIterator it2 = other.listIterator();\n+        ListIterator<?> it1 = listIterator();\n+        ListIterator<?> it2 = other.listIterator();\n         while (it1.hasNext() && it2.hasNext()) {\n             Object o1 = it1.next();\n             Object o2 = it2.next();\n--- a/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n             subSet = new HashSet<E>(list.size());\n         } else {\n             try {\n-                subSet = (Set<E>) set.getClass().newInstance();\n+                subSet = set.getClass().newInstance();\n             } catch (InstantiationException ie) {\n                 subSet = new HashSet<E>();\n             } catch (IllegalAccessException iae) {\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n             threshold = calculateThreshold(newCapacity, loadFactor);\n             data = new HashEntry[newCapacity];\n         } else {\n-            HashEntry oldEntries[] = data;\n-            HashEntry newEntries[] = new HashEntry[newCapacity];\n+            HashEntry<K, V> oldEntries[] = data;\n+            HashEntry<K, V> newEntries[] = new HashEntry[newCapacity];\n \n             modCount++;\n             for (int i = oldCapacity - 1; i >= 0; i--) {\n-                HashEntry entry = oldEntries[i];\n+                HashEntry<K, V> entry = oldEntries[i];\n                 if (entry != null) {\n                     oldEntries[i] = null;  // gc\n                     do {\n-                        HashEntry next = entry.next;\n+                        HashEntry<K, V> next = entry.next;\n                         int index = hashIndex(entry.hashCode, newCapacity);\n                         entry.next = newEntries[index];\n                         newEntries[index] = entry;\n      * @return true if equal\n      */\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n--- a/src/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n          * @return true if equal, false if not\n          */\n         @Override\n-        @SuppressWarnings(\"unchecked\")\n         public boolean equals(Object obj) {\n             if (obj == this) {\n                 return true;\n                 return false;\n             }\n \n-            Map.Entry entry = (Map.Entry)obj;\n+            Map.Entry<?, ?> entry = (Map.Entry<?, ?>)obj;\n             Object entryKey = entry.getKey();  // convert to hard reference\n             Object entryValue = entry.getValue();  // convert to hard reference\n             if ((entryKey == null) || (entryValue == null)) {\n--- a/src/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n     public K previousKey(K key) {\n         SortedMap<K, V> headMap = headMap(key);\n         return headMap.isEmpty() ? null : headMap.lastKey();\n-    };\n+    }\n \n     public K nextKey(K key) {\n         Iterator<K> it = tailMap(key).keySet().iterator();\n         it.next();\n         return it.hasNext() ? it.next() : null;\n-    };\n+    }\n \n     /**\n      * {@inheritDoc}\n--- a/src/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/java/org/apache/commons/collections/map/CompositeMap.java\n      * @return true if the maps are equal\n      */\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj instanceof Map) {\n-            Map map = (Map) obj;\n+            Map<?, ?> map = (Map<?, ?>) obj;\n             return (this.entrySet().equals(map.entrySet()));\n         }\n         return false;\n--- a/src/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/java/org/apache/commons/collections/map/DefaultedMap.java\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        map = (Map) in.readObject();\n+        map = (Map<K, V>) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n+++ b/src/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n      */\n     public V setValue(V value) {\n         return current().setValue(value);\n-    };\n+    }\n \n     /**\n      * {@inheritDoc}\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n         try {\n             Flat3Map<K, V> cloned = (Flat3Map<K, V>) super.clone();\n             if (cloned.delegateMap != null) {\n-                cloned.delegateMap = (HashedMap<K, V>) cloned.delegateMap.clone();\n+                cloned.delegateMap = cloned.delegateMap.clone();\n             }\n             return cloned;\n         } catch (CloneNotSupportedException ex) {\n--- a/src/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazyMap.java\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        map = (Map) in.readObject();\n+        map = (Map<K, V>) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiValueMap.java\n             }\n         } else {\n             for (Map.Entry<? extends K, ?> entry : map.entrySet()) {\n-                put(entry.getKey(), (V) entry.getValue());\n+                put(entry.getKey(), entry.getValue());\n             }\n         }\n     }\n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n         Map<K, V> result = new LinkedMap<K, V>(map.size());\n \n         for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {\n-            result.put((K) transformKey(entry.getKey()), transformValue(entry.getValue()));\n+            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));\n         }\n         return result;\n     }\n--- a/src/java/org/apache/commons/collections/set/CompositeSet.java\n+++ b/src/java/org/apache/commons/collections/set/CompositeSet.java\n      * @see Set#equals\n      */\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object obj) {\n         if (obj instanceof Set) {\n-            Set set = (Set) obj;\n+            Set<?> set = (Set<?>) obj;\n             return set.containsAll(this) && set.size() == this.size();\n         }\n         return false;\n--- a/src/java/org/apache/commons/collections/splitmap/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/splitmap/TransformedMap.java\n         Map<K, V> result = new LinkedMap<K, V>(map.size());\n \n         for (Map.Entry<? extends J, ? extends U> entry : map.entrySet()) {\n-            result.put((K) transformKey(entry.getKey()), transformValue(entry.getValue()));\n+            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));\n         }\n         return result;\n     }", "timestamp": 1279739272, "metainfo": ""}