{"sha": "28749901a9705b49ca77d88a5b8d5b41e69227d4", "log": "Comments and formatting  ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/java/org/apache/commons/collections/list/TreeList.java\n /*\n- *  Copyright 2004-2005 The Apache Software Foundation\n+ *  Copyright 2004-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n             return balance();\n         }\n \n+        /**\n+         * Removes this node from the tree.\n+         *\n+         * @return the node that replaces this one in the parent\n+         */\n         private AVLNode removeSelf() {\n-            if (getRightSubTree() == null && getLeftSubTree() == null)\n+            if (getRightSubTree() == null && getLeftSubTree() == null) {\n                 return null;\n+            }\n             if (getRightSubTree() == null) {\n                 if (relativePosition > 0) {\n                     left.relativePosition += relativePosition + (relativePosition > 0 ? 0 : 1);\n             }\n \n             if (heightRightMinusLeft() > 0) {\n+                // more on the right, so delete from the right\n                 AVLNode rightMin = right.min();\n                 value = rightMin.value;\n                 if (leftIsPrevious) {\n                     relativePosition++;\n                 }\n             } else {\n+                // more on the left or equal, so delete from the left\n                 AVLNode leftMax = left.max();\n                 value = leftMax.value;\n                 if (rightIsNext) {\n             return newTop;\n         }\n \n+        /**\n+         * Sets the left field to the node, or the previous node if that is null\n+         *\n+         * @param node  the new left subtree node\n+         * @param previous  the previous node in the linked list\n+         */\n         private void setLeft(AVLNode node, AVLNode previous) {\n             leftIsPrevious = (node == null);\n             left = (leftIsPrevious ? previous : node);\n             recalcHeight();\n         }\n \n+        /**\n+         * Sets the right field to the node, or the next node if that is null\n+         *\n+         * @param node  the new left subtree node\n+         * @param next  the next node in the linked list\n+         */\n         private void setRight(AVLNode node, AVLNode next) {\n             rightIsNext = (node == null);\n             right = (rightIsNext ? next : node);", "timestamp": 1137807838, "metainfo": ""}