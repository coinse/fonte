{"sha": "7fe55f624be83ab0e6dbab1a2d7d1ade2424c3f4", "log": "Test reworked array iterators to include Iterator and ListIterator implementations. Also test Object array versions.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/iterators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.3 2002/11/21 23:09:26 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/11/21 23:09:26 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.4 2002/12/13 12:10:48 scolebourne Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/12/13 12:10:48 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.3 2002/11/21 23:09:26 scolebourne Exp $\n+ * @version $Id: TestAll.java,v 1.4 2002/12/13 12:10:48 scolebourne Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestArrayIterator.suite());\n         suite.addTest(TestArrayIterator2.suite());\n+        suite.addTest(TestArrayListIterator.suite());\n+        suite.addTest(TestArrayListIterator2.suite());\n+        suite.addTest(TestObjectArrayIterator.suite());\n+        suite.addTest(TestObjectArrayListIterator.suite());\n         suite.addTest(TestCollatingIterator.suite());\n         suite.addTest(TestFilterIterator.suite());\n         suite.addTest(TestFilterListIterator.suite());\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java,v 1.2 2002/12/13 12:10:48 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/12/13 12:10:48 $\n  *\n  * ====================================================================\n  *\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections.iterators;\n \n import junit.framework.*;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n-\n /**\n  * Tests the ArrayIterator to ensure that the next() method will actually\n  * perform the iteration rather than the hasNext() method.\n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Morgan Delagrange\n- * @version $Id: TestArrayIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * @author Stephen Colebourne\n+ * @version $Id: TestArrayIterator.java,v 1.2 2002/12/13 12:10:48 scolebourne Exp $\n  */\n public class TestArrayIterator extends TestIterator {\n-    \n-    protected String[] testArray = {\n-        \"One\", \"Two\", \"Three\"\n-    };\n-    \n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+\n     public static Test suite() {\n         return new TestSuite(TestArrayIterator.class);\n     }\n-    \n+\n     public TestArrayIterator(String testName) {\n         super(testName);\n     }\n     public Iterator makeFullIterator() {\n         return new ArrayIterator(testArray);\n     }\n-    \n+\n     /**\n      * Return a new, empty {@link Object} to used for testing.\n      */\n     public Object makeObject() {\n         return makeFullIterator();\n     }\n-    \n+\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+\n     public void testIterator() {\n         Iterator iter = (Iterator) makeFullIterator();\n-        for ( int i = 0; i < testArray.length; i++ ) {\n-            Object testValue = testArray[i];            \n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n             Object iterValue = iter.next();\n-            \n-            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n         }\n-        \n-        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n \n-\ttry {\n-\t    Object testValue = iter.next();\n-\t} catch (Exception e) {\n-\t  assertTrue(\"NoSuchElementException must be thrown\", \n-\t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n-\t}\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            Object testValue = iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n     }\n \n     public void testNullArray() {\n         try {\n             Iterator iter = new ArrayIterator(null);\n-            \n-            fail(\"Constructor should throw a NullPointerException when \" +\n-                 \"constructed with a null array\");\n+\n+            fail(\"Constructor should throw a NullPointerException when constructed with a null array\");\n         } catch (NullPointerException e) {\n             // expected\n         }\n             // expected\n         }\n     }\n+    \n+    public void testReset() {\n+        ArrayIterator it = (ArrayIterator) makeFullIterator();\n+        it.next();\n+        it.reset();\n+        assertEquals(\"One\", it.next());\n+    }\n+\n }\n-\n--- a/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java,v 1.2 2002/12/13 12:10:48 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/12/13 12:10:48 $\n  *\n  * ====================================================================\n  *\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections.iterators;\n \n import junit.framework.*;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n-\n /**\n  * Tests the ArrayIterator with primitive type arrays\n  * \n  * @author Morgan Delagrange\n  * @author James Strachan\n- * @version $Id: TestArrayIterator2.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * @version $Id: TestArrayIterator2.java,v 1.2 2002/12/13 12:10:48 scolebourne Exp $\n  */\n public class TestArrayIterator2 extends TestIterator {\n-    \n-    protected int[] testArray = {\n-        2, 4, 6, 8\n-    };\n-    \n+\n+    protected int[] testArray = { 2, 4, 6, 8 };\n+\n     public static Test suite() {\n         return new TestSuite(TestArrayIterator2.class);\n     }\n-    \n+\n     public TestArrayIterator2(String testName) {\n         super(testName);\n     }\n-    \n+\n     public Iterator makeEmptyIterator() {\n         return new ArrayIterator(new int[0]);\n     }\n     public Object makeObject() {\n         return makeFullIterator();\n     }\n-    \n+\n+    /*\n+     * We use these <code>makeArrayIterator</code> factory methods instead of\n+     * directly calling the constructor so as to allow subclasses\n+     * (e.g. TestArrayListIterator2) to use the existing test code.\n+     * \n+     * @return ArrayIterator\n+     */\n+    public ArrayIterator makeArrayIterator() {\n+        return (ArrayIterator) makeEmptyIterator();\n+    }\n+    public ArrayIterator makeArrayIterator(Object array) {\n+        return new ArrayIterator(array);\n+    }\n+    public ArrayIterator makeArrayIterator(Object array, int index) {\n+        return new ArrayIterator(array, index);\n+    }\n+    public ArrayIterator makeArrayIterator(Object array, int start, int end) {\n+        return new ArrayIterator(array, start, end);\n+    }\n+\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+\n     public void testIterator() {\n         Iterator iter = (Iterator) makeFullIterator();\n-        for ( int i = 0; i < testArray.length; i++ ) {\n-            Integer testValue = new Integer( testArray[i] );            \n+        for (int i = 0; i < testArray.length; i++) {\n+            Integer testValue = new Integer(testArray[i]);\n             Number iterValue = (Number) iter.next();\n-            \n-            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n-        }\n-        \n-        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n-\n-\ttry {\n-\t    Object testValue = iter.next();\n-\t} catch (Exception e) {\n-\t  assertTrue(\"NoSuchElementException must be thrown\", \n-\t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n-\t}\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            Object testValue = iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n     }\n \n     // proves that an ArrayIterator set with the constructor has the same number of elements\n     // as an ArrayIterator set with setArray(Object) \n     public void testSetArray() {\n-        Iterator iter1 = new ArrayIterator(testArray);\n+        Iterator iter1 = makeArrayIterator(testArray);\n         int count1 = 0;\n         while (iter1.hasNext()) {\n             ++count1;\n             iter1.next();\n         }\n \n-        assertEquals(\"the count should be right using the constructor\",\n-                     count1,testArray.length);\n-\n-        ArrayIterator iter2 = new ArrayIterator();\n+        assertEquals(\"the count should be right using the constructor\", count1, testArray.length);\n+\n+        ArrayIterator iter2 = makeArrayIterator();\n         iter2.setArray(testArray);\n         int count2 = 0;\n         while (iter2.hasNext()) {\n             iter2.next();\n         }\n \n-        assertEquals(\"the count should be right using setArray(Object)\",\n-                     count2,testArray.length);\n+        assertEquals(\"the count should be right using setArray(Object)\", count2, testArray.length);\n     }\n \n     public void testIndexedArray() {\n-        Iterator iter = new ArrayIterator(testArray,2);\n+        Iterator iter = makeArrayIterator(testArray, 2);\n         int count = 0;\n         while (iter.hasNext()) {\n             ++count;\n             iter.next();\n         }\n \n-        assertEquals(\"the count should be right using ArrayIterator(Object,2) \",\n-                     count,testArray.length-2);\n-\n-        iter = new ArrayIterator(testArray,1,testArray.length-1);\n+        assertEquals(\"the count should be right using ArrayIterator(Object,2) \", count, testArray.length - 2);\n+\n+        iter = makeArrayIterator(testArray, 1, testArray.length - 1);\n         count = 0;\n         while (iter.hasNext()) {\n             ++count;\n             iter.next();\n         }\n \n-        assertEquals(\"the count should be right using ArrayIterator(Object,1,\"+\n-                     (testArray.length-1)+\") \", count, testArray.length-2);\n-\n-        try {\n-            iter = new ArrayIterator(testArray,-1);\n-            fail(\"new ArrayIterator(Object,-1) should throw an \"+\n-                 \"ArrayIndexOutOfBoundsException\");\n-        } catch(ArrayIndexOutOfBoundsException aioobe) {\n-            // expected\n-        }\n-\n-        try {\n-            iter = new ArrayIterator(testArray,testArray.length+1);\n-            fail(\"new ArrayIterator(Object,length+1) should throw an \"+\n-                 \"ArrayIndexOutOfBoundsException\");\n-        } catch(ArrayIndexOutOfBoundsException aioobe) {\n-            // expected\n-        }\n-\n-        try {\n-            iter = new ArrayIterator(testArray,0,-1);\n-            fail(\"new ArrayIterator(Object,0,-1) should throw an \"+\n-                 \"ArrayIndexOutOfBoundsException\");\n-        } catch(ArrayIndexOutOfBoundsException aioobe) {\n-            // expected\n-        }\n-\n-        try {\n-            iter = new ArrayIterator(testArray,0,testArray.length+1);\n-            fail(\"new ArrayIterator(Object,0,length+1) should throw an \"+\n-                 \"ArrayIndexOutOfBoundsException\");\n-        } catch(ArrayIndexOutOfBoundsException aioobe) {\n-            // expected\n-        }\n-\n-        try {\n-            iter = new ArrayIterator(testArray,1,1);\n-            fail(\"new ArrayIterator(Object,1,1) should throw an \"+\n-                 \"IllegalArgumentException\");\n-        } catch(IllegalArgumentException iae) {\n-            // expected\n-        }\n-\n-        try {\n-            iter = new ArrayIterator(testArray,testArray.length-1,testArray.length-2);\n-            fail(\"new ArrayIterator(Object,length-2,length-1) should throw an \"+\n-                 \"IllegalArgumentException\");\n-        } catch(IllegalArgumentException iae) {\n+        assertEquals(\n+            \"the count should be right using ArrayIterator(Object,1,\" + (testArray.length - 1) + \") \",\n+            count,\n+            testArray.length - 2);\n+\n+        try {\n+            iter = makeArrayIterator(testArray, -1);\n+            fail(\"new ArrayIterator(Object,-1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, testArray.length + 1);\n+            fail(\"new ArrayIterator(Object,length+1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, 0, -1);\n+            fail(\"new ArrayIterator(Object,0,-1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, 0, testArray.length + 1);\n+            fail(\"new ArrayIterator(Object,0,length+1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, 1, 1);\n+            // expected not to fail\n+        } catch (IllegalArgumentException iae) {\n+            // MODIFIED: an iterator over a zero-length section of array\n+            //  should be perfectly legal behavior\n+            fail(\"new ArrayIterator(Object,1,1) should NOT throw an IllegalArgumentException\");\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, testArray.length - 1, testArray.length - 2);\n+            fail(\"new ArrayIterator(Object,length-2,length-1) should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n             // expected\n         }\n     }\n }\n-\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayListIterator.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/12/13 12:10:48 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+/**\n+ * \n+ * @author Neil O'Toole - <a href=\"mailto:neilotoole@users.sourceforge.net\">neilotoole@users.sourceforge.net</a>\n+ * @version $Id: TestArrayListIterator.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ */\n+public class TestArrayListIterator extends TestArrayIterator {\n+\n+    public TestArrayListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestArrayListIterator.class);\n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        return new ArrayListIterator(new Object[0]);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new ArrayListIterator(testArray);\n+    }\n+\n+    public ListIterator makeArrayListIterator(Object array) {\n+        return new ArrayListIterator(array);\n+    }\n+\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    /**\n+     * Test the basic ListIterator functionality - going backwards using\n+     * <code>previous()</code>.\n+     */\n+    public void testListIterator() {\n+        ListIterator iter = (ListIterator) makeFullIterator();\n+\n+        // TestArrayIterator#testIterator() has already tested the iterator forward,\n+        //  now we need to test it in reverse\n+\n+        // fast-forward the iterator to the end...\n+        while (iter.hasNext()) {\n+            iter.next();\n+        }\n+\n+        for (int x = testArray.length - 1; x >= 0; x--) {\n+            Object testValue = testArray[x];\n+            Object iterValue = iter.previous();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasPrevious());\n+\n+        try {\n+            Object testValue = iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+    }\n+\n+    /**\n+     * Tests the {@link java.util.ListIterator#set} operation.\n+     */\n+    public void testListIteratorSet() {\n+        String[] testData = new String[] { \"a\", \"b\", \"c\" };\n+\n+        String[] result = new String[] { \"0\", \"1\", \"2\" };\n+\n+        ListIterator iter = (ListIterator) makeArrayListIterator(testData);\n+        int x = 0;\n+\n+        while (iter.hasNext()) {\n+            iter.next();\n+            iter.set(Integer.toString(x));\n+            x++;\n+        }\n+\n+        assertTrue(\"The two arrays should have the same value, i.e. {0,1,2}\", Arrays.equals(testData, result));\n+\n+        // a call to set() before a call to next() or previous() should throw an IllegalStateException\n+        iter = makeArrayListIterator(testArray);\n+\n+        try {\n+            iter.set(\"should fail\");\n+            fail(\"ListIterator#set should fail if next() or previous() have not yet been called.\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        } catch (Throwable t) { // should never happen\n+            fail(t.toString());\n+        }\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayListIterator2.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/12/13 12:10:48 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+/**\n+ * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n+ * @see org.apache.commons.collections.iterators.TestArrayIterator2\n+ * @version $Id: TestArrayListIterator2.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ */\n+public class TestArrayListIterator2 extends TestArrayIterator2 {\n+\n+    public TestArrayListIterator2(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestArrayListIterator2.class);\n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        return new ArrayListIterator(new int[0]);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new ArrayListIterator(testArray);\n+    }\n+\n+    public ArrayIterator makeArrayIterator() {\n+        return (ArrayIterator) makeEmptyIterator();\n+    }\n+\n+    public ArrayIterator makeArrayIterator(Object array) {\n+        return new ArrayListIterator(array);\n+    }\n+\n+    public ArrayIterator makeArrayIterator(Object array, int index) {\n+        return new ArrayListIterator(array, index);\n+    }\n+\n+    public ArrayIterator makeArrayIterator(Object array, int start, int end) {\n+        return new ArrayListIterator(array, start, end);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestObjectArrayIterator.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/12/13 12:10:48 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+/**\n+ * Tests the ObjectArrayIterator.\n+ * \n+ * @author James Strachan\n+ * @author Mauricio S. Moura\n+ * @author Morgan Delagrange\n+ * @author Stephen Colebourne\n+ * @version $Id: TestObjectArrayIterator.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ */\n+public class TestObjectArrayIterator extends TestIterator {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObjectArrayIterator.class);\n+    }\n+\n+    public TestObjectArrayIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        return new ObjectArrayIterator(new Object[0]);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new ObjectArrayIterator(testArray);\n+    }\n+\n+    public ObjectArrayIterator makeArrayIterator() {\n+        return new ObjectArrayIterator();\n+    }\n+\n+    public ObjectArrayIterator makeArrayIterator(Object[] array) {\n+        return new ObjectArrayIterator(array);\n+    }\n+\n+    public ObjectArrayIterator makeArrayIterator(Object[] array, int index) {\n+        return new ObjectArrayIterator(array, index);\n+    }\n+\n+    public ObjectArrayIterator makeArrayIterator(Object[] array, int start, int end) {\n+        return new ObjectArrayIterator(array, start, end);\n+    }\n+\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+\n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            Object testValue = iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testNullArray() {\n+        try {\n+            Iterator iter = makeArrayIterator(null);\n+\n+            fail(\"Constructor should throw a NullPointerException when constructed with a null array\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        ObjectArrayIterator iter = makeArrayIterator();\n+        try {\n+            iter.setArray(null);\n+\n+            fail(\"setArray(null) should throw a NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testDoubleSet() {\n+        ObjectArrayIterator it = makeArrayIterator();\n+        it.setArray(new String[0]);\n+        try {\n+            it.setArray(new String[0]);\n+            fail();\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    public void testReset() {\n+        ObjectArrayIterator it = makeArrayIterator(testArray);\n+        it.next();\n+        it.reset();\n+        assertEquals(\"One\", it.next());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestObjectArrayListIterator.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/12/13 12:10:48 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+/**\n+ * \n+ * @author <a href=\"mailto:neilotoole@users.sourceforge.net\">Neil O'Toole</a>\n+ * @version $Id: TestObjectArrayListIterator.java,v 1.1 2002/12/13 12:10:48 scolebourne Exp $\n+ */\n+public class TestObjectArrayListIterator extends TestObjectArrayIterator {\n+\n+    public TestObjectArrayListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObjectArrayListIterator.class);\n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        return new ObjectArrayListIterator(new Object[0]);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new ObjectArrayListIterator(testArray);\n+    }\n+\n+    public ListIterator makeArrayListIterator(Object[] array) {\n+        return new ObjectArrayListIterator(array);\n+    }\n+\n+    /**\n+     * Test the basic ListIterator functionality - going backwards using\n+     * <code>previous()</code>.\n+     */\n+    public void testListIterator() {\n+        ListIterator iter = (ListIterator) makeFullIterator();\n+\n+        // TestArrayIterator#testIterator() has already tested the iterator forward,\n+        //  now we need to test it in reverse\n+\n+        // fast-forward the iterator to the end...\n+        while (iter.hasNext()) {\n+            iter.next();\n+        }\n+\n+        for (int x = testArray.length - 1; x >= 0; x--) {\n+            Object testValue = testArray[x];\n+            Object iterValue = iter.previous();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasPrevious());\n+\n+        try {\n+            Object testValue = iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+    }\n+\n+    /**\n+     * Tests the {@link java.util.ListIterator#set} operation.\n+     */\n+    public void testListIteratorSet() {\n+        String[] testData = new String[] { \"a\", \"b\", \"c\" };\n+\n+        String[] result = new String[] { \"0\", \"1\", \"2\" };\n+\n+        ListIterator iter = (ListIterator) makeArrayListIterator(testData);\n+        int x = 0;\n+\n+        while (iter.hasNext()) {\n+            iter.next();\n+            iter.set(Integer.toString(x));\n+            x++;\n+        }\n+\n+        assertTrue(\"The two arrays should have the same value, i.e. {0,1,2}\", Arrays.equals(testData, result));\n+\n+        // a call to set() before a call to next() or previous() should throw an IllegalStateException\n+        iter = makeArrayListIterator(testArray);\n+\n+        try {\n+            iter.set(\"should fail\");\n+            fail(\"ListIterator#set should fail if next() or previous() have not yet been called.\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        } catch (Throwable t) { // should never happen\n+            fail(t.toString());\n+        }\n+\n+    }\n+\n+}", "timestamp": 1039781448, "metainfo": ""}