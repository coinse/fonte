{"sha": "075ed28c88e7500841c5c7663c981218628ed149", "log": "Add testing for null parameters passed to filter, transform and countMatches   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.10 2002/12/08 15:29:26 scolebourne Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/12/08 15:29:26 $\n+ * $Id: TestCollectionUtils.java,v 1.11 2003/01/25 11:31:12 scolebourne Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2003/01/25 11:31:12 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Revision: 1.10 $ $Date: 2002/12/08 15:29:26 $\n+ * @version $Revision: 1.11 $ $Date: 2003/01/25 11:31:12 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n     }\n \n \n+    private static Predicate EQUALS_TWO = new Predicate() {\n+        public boolean evaluate(Object input) {\n+            return (input.equals(\"Two\"));\n+        }\n+    };\n+    \n     public void testFilter() {\n         List list = new ArrayList();\n         list.add(\"One\");\n         list.add(\"Two\");\n         list.add(\"Three\");\n         list.add(\"Four\");\n-        CollectionUtils.filter(list, new Predicate() {\n-            public boolean evaluate(Object input) {\n-                return (input.equals(\"Two\"));\n-            }\n-        });\n+        CollectionUtils.filter(list, EQUALS_TWO);\n         assertEquals(1, list.size());\n         assertEquals(\"Two\", list.get(0));\n+        \n+        list = new ArrayList();\n+        list.add(\"One\");\n+        list.add(\"Two\");\n+        list.add(\"Three\");\n+        list.add(\"Four\");\n+        CollectionUtils.filter(list, null);\n+        assertEquals(4, list.size());\n+        CollectionUtils.filter(null, EQUALS_TWO);\n+        assertEquals(4, list.size());\n+        CollectionUtils.filter(null, null);\n+        assertEquals(4, list.size());\n     }\n \n     public void testCountMatches() {\n         list.add(\"Two\");\n         list.add(\"Three\");\n         list.add(\"Four\");\n-        int count = CollectionUtils.countMatches(list, new Predicate() {\n-            public boolean evaluate(Object input) {\n-                return (input.equals(\"Two\"));\n-            }\n-        });\n+        int count = CollectionUtils.countMatches(list, EQUALS_TWO);\n         assertEquals(4, list.size());\n         assertEquals(1, count);\n+        assertEquals(0, CollectionUtils.countMatches(list, null));\n+        assertEquals(0, CollectionUtils.countMatches(null, EQUALS_TWO));\n+        assertEquals(0, CollectionUtils.countMatches(null, null));\n     }\n \n     public void testSelect() {\n         list.add(\"Two\");\n         list.add(\"Three\");\n         list.add(\"Four\");\n-        Collection output = CollectionUtils.select(list, new Predicate() {\n-            public boolean evaluate(Object input) {\n-                return (input.equals(\"Two\"));\n-            }\n-        });\n+        Collection output = CollectionUtils.select(list, EQUALS_TWO);\n         assertEquals(4, list.size());\n         assertEquals(1, output.size());\n         assertEquals(\"Two\", output.iterator().next());\n         list.add(\"Two\");\n         list.add(\"Three\");\n         list.add(\"Four\");\n-        Collection output = CollectionUtils.selectRejected(list, new Predicate() {\n-            public boolean evaluate(Object input) {\n-                return (input.equals(\"Two\"));\n-            }\n-        });\n+        Collection output = CollectionUtils.selectRejected(list, EQUALS_TWO);\n         assertEquals(4, list.size());\n         assertEquals(3, output.size());\n         assertTrue(output.contains(\"One\"));\n         assertTrue(output.contains(\"Four\"));\n     }\n \n+    Transformer TRANSFORM_TO_INTEGER = new Transformer() {\n+        public Object transform(Object input) {\n+            return new Integer((String) input);\n+        }\n+    };\n+    \n     public void testTransform1() {\n         List list = new ArrayList();\n         list.add(\"1\");\n         list.add(\"2\");\n         list.add(\"3\");\n-        CollectionUtils.transform(list, new Transformer() {\n-            public Object transform(Object input) {\n-                return new Integer((String) input);\n-            }\n-        });\n+        CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);\n         assertEquals(3, list.size());\n         assertEquals(new Integer(1), list.get(0));\n         assertEquals(new Integer(2), list.get(1));\n         assertEquals(new Integer(3), list.get(2));\n+        \n+        list = new ArrayList();\n+        list.add(\"1\");\n+        list.add(\"2\");\n+        list.add(\"3\");\n+        CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);\n+        assertEquals(3, list.size());\n+        CollectionUtils.transform(list, null);\n+        assertEquals(3, list.size());\n+        CollectionUtils.transform(null, null);\n+        assertEquals(3, list.size());\n     }\n     \n     public void testTransform2() {", "timestamp": 1043494272, "metainfo": ""}