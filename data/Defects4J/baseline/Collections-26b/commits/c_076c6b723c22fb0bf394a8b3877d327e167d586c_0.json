{"sha": "076c6b723c22fb0bf394a8b3877d327e167d586c", "log": "Add generic type description in javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n     /**\n      * Gets a comparator that uses the natural order of the objects.\n      *\n+     * @param <E>  the object type to compare\n      * @return  a comparator which uses natural order\n      */\n     @SuppressWarnings(\"unchecked\")\n      * <p>\n      * The second comparator is used if the first comparator returns equal.\n      *\n+     * @param <E>  the object type to compare\n      * @param comparator1  the first comparator to use, not null\n      * @param comparator2  the first comparator to use, not null\n      * @return a {@link ComparatorChain} formed from the two comparators\n      * Gets a comparator that compares using an array of {@link Comparator}s, applied\n      * in sequence until one returns not equal or the array is exhausted.\n      *\n+     * @param <E>  the object type to compare\n      * @param comparators  the comparators to use, not null or empty or containing nulls\n      * @return a {@link ComparatorChain} formed from the input comparators\n      * @throws NullPointerException if comparators array is null or contains a null\n      * applied in (default iterator) sequence until one returns not equal or the \n      * collection is exhausted.\n      *\n+     * @param <E>  the object type to compare\n      * @param comparators  the comparators to use, not null or empty or containing nulls\n      * @return a {@link ComparatorChain} formed from the input comparators\n      * @throws NullPointerException if comparators collection is null or contains a null\n     /**\n      * Gets a comparator that reverses the order of the given comparator.\n      *\n+     * @param <E>  the object type to compare\n      * @param comparator  the comparator to reverse\n      * @return  a comparator that reverses the order of the input comparator\n      * @see ReverseComparator\n      * any nonnull value, and equal to any other null value.  Two nonnull\n      * values will be evaluated with the given comparator.\n      *\n+     * @param <E>  the object type to compare\n      * @param comparator the comparator that wants to allow nulls\n      * @return  a version of that comparator that allows nulls\n      * @see NullComparator\n      * any nonnull value, and equal to any other null value.  Two nonnull\n      * values will be evaluated with the given comparator.\n      *\n+     * @param <E>  the object type to compare\n      * @param comparator the comparator that wants to allow nulls\n      * @return  a version of that comparator that allows nulls\n      * @see NullComparator\n      * by the given transformer before they are compared by the given\n      * comparator.\n      *\n+     * @param <E>  the object type to compare\n      * @param comparator  the sort order to use\n      * @param transformer  the transformer to use\n      * @return  a comparator that transforms its input objects before comparing them\n     }\n \n     /**\n-     *  Returns the smaller of the given objects according to the given \n-     *  comparator, returning the second object if the comparator\n-     *  returns equal.\n-     * \n-     *  @param o1  the first object to compare\n-     *  @param o2  the second object to compare\n-     *  @param comparator  the sort order to use\n-     *  @return  the smaller of the two objects\n+     * Returns the smaller of the given objects according to the given \n+     * comparator, returning the second object if the comparator\n+     * returns equal.\n+     *\n+     * @param <E>  the object type to compare\n+     * @param o1  the first object to compare\n+     * @param o2  the second object to compare\n+     * @param comparator  the sort order to use\n+     * @return  the smaller of the two objects\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> E min(final E o1, final E o2, Comparator<E> comparator) {\n     }\n \n     /**\n-     *  Returns the larger of the given objects according to the given \n-     *  comparator, returning the second object if the comparator \n-     *  returns equal.\n-     * \n-     *  @param o1  the first object to compare\n-     *  @param o2  the second object to compare\n-     *  @param comparator  the sort order to use\n-     *  @return  the larger of the two objects\n+     * Returns the larger of the given objects according to the given \n+     * comparator, returning the second object if the comparator \n+     * returns equal.\n+     *\n+     * @param <E>  the object type to compare\n+     * @param o1  the first object to compare\n+     * @param o2  the second object to compare\n+     * @param comparator  the sort order to use\n+     * @return  the larger of the two objects\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> E max(final E o1, final E o2, Comparator<E> comparator) {", "timestamp": 1358771590, "metainfo": ""}