{"sha": "8aff2c25f4d7ef3ab2b1c63c7c5a345d03b352ae", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r751890 | mbenson | 2009-03-09 15:45:37 -0700 (Mon, 09 Mar 2009) | 1 line          extract Put, Get, and IterableGet interfaces from IterableMap such that our Maps, which all implement IterableMap, can have their read/write functionality exposed separately.     ------------------------------------------------------------------------   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/IterableGet.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+/**\n+ * The \"read\" subset of the {@link Map} interface.\n+ * @since Commons Collections 5\n+ * @TODO fix version\n+ * @version $Revision$ $Date$\n+ * @see Put\n+ * @author Matt Benson\n+ */\n+public interface IterableGet<K, V> extends Get<K, V> {\n+    /**\n+     * Obtains a <code>MapIterator</code> over the map.\n+     * <p>\n+     * A map iterator is an efficient way of iterating over maps.\n+     * There is no need to access the entry set or use Map Entry objects.\n+     * <pre>\n+     * IterableMap<String,Integer> map = new HashedMap<String,Integer>();\n+     * MapIterator<String,Integer> it = map.mapIterator();\n+     * while (it.hasNext()) {\n+     *   String key = it.next();\n+     *   Integer value = it.getValue();\n+     *   it.setValue(value + 1);\n+     * }\n+     * </pre>\n+     * \n+     * @return a map iterator\n+     */\n+    MapIterator<K, V> mapIterator();\n+\n+}", "timestamp": 1252994304, "metainfo": ""}