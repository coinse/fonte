{"sha": "a68c67c121f870bec52b6a869014048bae68d808", "log": "Tab and trailing space removal  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n         List<? extends E> smaller = list1;\n         List<? extends E> larger = list2;\n         if (list1.size() > list2.size()) {\n-        \tsmaller = list2;\n-        \tlarger = list1;\n+            smaller = list2;\n+            larger = list1;\n         }\n         \n         HashSet<E> hashSet = new HashSet<E>(smaller);\n--- a/src/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n /**\n  * Predicate that compares the input object with the one stored in the predicate using a comparator.\n  * In addition, the comparator result can be evaluated in accordance to a supplied criterion value.\n- * \n+ *\n  * In order to demonstrate the use of the predicate, the following variables are declared:\n  *\n  * <pre>\n  * Integer ONE = new Integer(1);\n  * Integer TWO = new Integer(2);\n- * \n+ *\n  * Comparator comparator = new Comparator() {\n  *\n  *     public int compare(Object first, Object second) {\n- *\t       return ((Integer) second) - ((Integer) first);\n- *\t   }\n+ *         return ((Integer) second) - ((Integer) first);\n+ *     }\n  *\n  * };\n  * </pre>\n- * \n+ *\n  * Using the declared variables, the <code>ComparatorPredicate</code> can be used used in the\n- * following way: \n- * \n+ * following way:\n+ *\n  * <pre>\n- * ComparatorPredicate.getInstance(ONE, comparator).evaluate(TWO); \n- * </pre> \n- * \n+ * ComparatorPredicate.getInstance(ONE, comparator).evaluate(TWO);\n+ * </pre>\n+ *\n  * The input variable <code>TWO</code> in compared to the stored variable <code>ONE</code> using\n  * the supplied <code>comparator</code>. This is the default usage of the predicate and will return\n- * <code>true</code> if the underlying comparator returns <code>0</code>. In addition to the default \n- * usage of the predicate, it is possible to evaluate the comparator's result in several ways. The \n+ * <code>true</code> if the underlying comparator returns <code>0</code>. In addition to the default\n+ * usage of the predicate, it is possible to evaluate the comparator's result in several ways. The\n  * following {@link Criterion} enumeration values are provided by the predicate:\n  * </p>\n- * \n+ *\n  * <ul>\n  *     <li>EQUAL</li>\n  *     <li>GREATER</li>\n  *     <li>GREATER_OR_EQUAL</li>\n  *     <li>LESS</li>\n  *     <li>LESS_OR_EQUAL</li>\n- * </ul> \n- * \n+ * </ul>\n+ *\n  * The following examples demonstrates how these constants can be used in order to manipulate the\n  * evaluation of a comparator result.\n- * \n+ *\n  * <pre>\n  * ComparatorPredicate.getInstance(ONE, comparator, <b>ComparatorPredicate.Criterion.GREATER</b>).evaluate(TWO);\n  * </pre>\n- * \n+ *\n  * The input variable TWO is compared to the stored variable ONE using the supplied <code>comparator</code>\n  * using the <code>GREATER</code> evaluation criterion constant. This instructs the predicate to\n- * return <code>true</code> if the comparator returns a value greater than <code>0</code>.  \n+ * return <code>true</code> if the comparator returns a value greater than <code>0</code>.\n  *\n  * @since Commons Collections 4.0\n  * @version $Revision: $ $Date: $\n     private static final long serialVersionUID = -1863209236504077399L;\n \n     public enum Criterion {\n-        EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL, \n+        EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL,\n     }\n \n-\t// Instance variables:\n-\t\n-\t/** The internal object to compare with */\n-\tprivate final T object;\n+    // Instance variables:\n \n-\t/** The comparator to use for comparison */\n-\tprivate final Comparator<T> comparator;\n+    /** The internal object to compare with */\n+    private final T object;\n \n-\t/** The comparison evaluation criterion to use */\n-\tprivate final Criterion criterion;\n+    /** The comparator to use for comparison */\n+    private final Comparator<T> comparator;\n \n-\t/**\n-\t * Factory to create the comparator predicate\n-\t * \n-\t * @param object  the object to compare to\n-\t * @param comparator  the comparator to use for comparison\n-\t * @return the predicate\n-\t * @throws IllegalArgumentException if comparator is null\n-\t */\n-\tpublic static <T> Predicate<T> getInstance(T object, Comparator<T> comparator) {\n-\t\treturn getInstance(object, comparator, Criterion.EQUAL);\n-\t}\n+    /** The comparison evaluation criterion to use */\n+    private final Criterion criterion;\n \n-\t/**\n-\t * Factory to create the comparator predicate\n-\t * \n-\t * @param object  the object to compare to\n-\t * @param comparator  the comparator to use for comparison\n-\t * @param criterion  the criterion to use to evaluate comparison\n-\t * @return the predicate\n-\t * @throws IllegalArgumentException if comparator is null of criterion is invalid\n-\t */\n-\tpublic static <T> Predicate<T> getInstance(T object, Comparator<T> comparator, Criterion criterion) {\n+    /**\n+     * Factory to create the comparator predicate\n+     *\n+     * @param object  the object to compare to\n+     * @param comparator  the comparator to use for comparison\n+     * @return the predicate\n+     * @throws IllegalArgumentException if comparator is null\n+     */\n+    public static <T> Predicate<T> getInstance(T object, Comparator<T> comparator) {\n+        return getInstance(object, comparator, Criterion.EQUAL);\n+    }\n+\n+    /**\n+     * Factory to create the comparator predicate\n+     *\n+     * @param object  the object to compare to\n+     * @param comparator  the comparator to use for comparison\n+     * @param criterion  the criterion to use to evaluate comparison\n+     * @return the predicate\n+     * @throws IllegalArgumentException if comparator is null of criterion is invalid\n+     */\n+    public static <T> Predicate<T> getInstance(T object, Comparator<T> comparator, Criterion criterion) {\n         if (comparator == null) {\n             throw new IllegalArgumentException(\"Comparator must not be null.\");\n         }\n         if (criterion == null) {\n             throw new IllegalArgumentException(\"Criterion must not be null.\");\n         }\n-\t\treturn new ComparatorPredicate<T>(object, comparator, criterion);\n-\t}\n+        return new ComparatorPredicate<T>(object, comparator, criterion);\n+    }\n \n-\t/**\n-\t * Constructor that performs no validation.\n-\t * Use <code>getInstance</code> if you want.\n-\t * \n-\t * @param object  the object to compare to\n-\t * @param comparator  the comparator to use for comparison\n-\t * @param criterion  the criterion to use to evaluate comparison\n-\t */\n-\tpublic ComparatorPredicate(T object, Comparator<T> comparator, Criterion criterion) {\n-\t    super();\n-\t\tthis.object = object;\n-\t\tthis.comparator = comparator;\n-\t\tthis.criterion = criterion;\n-\t}\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want.\n+     *\n+     * @param object  the object to compare to\n+     * @param comparator  the comparator to use for comparison\n+     * @param criterion  the criterion to use to evaluate comparison\n+     */\n+    public ComparatorPredicate(T object, Comparator<T> comparator, Criterion criterion) {\n+        super();\n+        this.object = object;\n+        this.comparator = comparator;\n+        this.criterion = criterion;\n+    }\n \n-\t/**\n-\t * Evaluates the predicate. The predicate evaluates to <code>true</code> in the following cases:\n-\t * \n-\t * <ul>\n-\t *     <li><code>comparator.compare(object, input) == 0 && criterion == EQUAL</code></li>\n-\t *     <li><code>comparator.compare(object, input) < 0 && criterion == LESS</code></li>\n-\t *     <li><code>comparator.compare(object, input) > 0 && criterion == GREATER</code></li>\n-\t *     <li><code>comparator.compare(object, input) >= 0 && criterion == GREATER_OR_EQUAL</code></li>\n-\t *     <li><code>comparator.compare(object, input) <= 0 && criterion == LESS_OR_EQUAL</code></li>\n-\t * </ul>\n-\t * \n-\t * @see org.apache.commons.collections.Predicate#evaluate(java.lang.Object)\n-\t * @see java.util.Comparator#compare(java.lang.Object first, java.lang.Object second)\n-\t * \n-\t * @throws IllegalStateException if the criterion is invalid (really not possible)\n-\t */\n-\tpublic boolean evaluate(T target) {\n+    /**\n+     * Evaluates the predicate. The predicate evaluates to <code>true</code> in the following cases:\n+     *\n+     * <ul>\n+     *     <li><code>comparator.compare(object, input) == 0 && criterion == EQUAL</code></li>\n+     *     <li><code>comparator.compare(object, input) < 0 && criterion == LESS</code></li>\n+     *     <li><code>comparator.compare(object, input) > 0 && criterion == GREATER</code></li>\n+     *     <li><code>comparator.compare(object, input) >= 0 && criterion == GREATER_OR_EQUAL</code></li>\n+     *     <li><code>comparator.compare(object, input) <= 0 && criterion == LESS_OR_EQUAL</code></li>\n+     * </ul>\n+     *\n+     * @see org.apache.commons.collections.Predicate#evaluate(java.lang.Object)\n+     * @see java.util.Comparator#compare(java.lang.Object first, java.lang.Object second)\n+     *\n+     * @throws IllegalStateException if the criterion is invalid (really not possible)\n+     */\n+    public boolean evaluate(T target) {\n \n-\t\tboolean result = false;\n-\t\tint comparison = comparator.compare(object, target);\n+        boolean result = false;\n+        int comparison = comparator.compare(object, target);\n         switch (criterion) {\n-\t\tcase EQUAL:\n-\t\t\tresult = (comparison == 0);\n-\t\t\tbreak;\n-\t\tcase GREATER:\n-\t\t\tresult = (comparison > 0);\n-\t\t\tbreak;\n-\t\tcase LESS:\n-\t\t\tresult = (comparison < 0);\n-\t\t\tbreak;\n-\t\tcase GREATER_OR_EQUAL:\n-\t\t\tresult = (comparison >= 0);\n-\t\t\tbreak;\n-\t\tcase LESS_OR_EQUAL:\n-\t\t\tresult = (comparison <= 0);\n-\t\t\tbreak;\n-\t\tdefault:\n-\t\t\tthrow new IllegalStateException(\"The current criterion '\" + criterion + \"' is invalid.\");\n-\t\t}\n+        case EQUAL:\n+            result = (comparison == 0);\n+            break;\n+        case GREATER:\n+            result = (comparison > 0);\n+            break;\n+        case LESS:\n+            result = (comparison < 0);\n+            break;\n+        case GREATER_OR_EQUAL:\n+            result = (comparison >= 0);\n+            break;\n+        case LESS_OR_EQUAL:\n+            result = (comparison <= 0);\n+            break;\n+        default:\n+            throw new IllegalStateException(\"The current criterion '\" + criterion + \"' is invalid.\");\n+        }\n \n-\t\treturn result;\n-\t}\n+        return result;\n+    }\n }\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n      * Tests intersecting two lists in different orders.\n      */\n     public void testIntersectionOrderInsensitivity() {\n-\t\tList<String> one = new ArrayList<String>();\n-\t\tList<String> two = new ArrayList<String>();\n-\t\tone.add(\"a\");\n-\t\tone.add(\"b\");\n-\t\ttwo.add(\"a\");\n-\t\ttwo.add(\"a\");\n-\t\ttwo.add(\"b\");\n-\t\ttwo.add(\"b\");\n-\t\tassertEquals(ListUtils.intersection(one,two),ListUtils.intersection(two, one));\n+        List<String> one = new ArrayList<String>();\n+        List<String> two = new ArrayList<String>();\n+        one.add(\"a\");\n+        one.add(\"b\");\n+        two.add(\"a\");\n+        two.add(\"a\");\n+        two.add(\"b\");\n+        two.add(\"b\");\n+        assertEquals(ListUtils.intersection(one,two),ListUtils.intersection(two, one));\n     }\n \n     public void testPredicatedList() {", "timestamp": 1287420329, "metainfo": ""}