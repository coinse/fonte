{"sha": "cce4634e79fd3d74d6086ae09672fc716509c4c9", "log": "Use final for read-only local variables.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n                 return false;\n             }\n             @SuppressWarnings(\"unchecked\")\n+            final\n             EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n             return equator.equate(object, otherObj.getObject());\n         }\n--- a/src/main/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMap.java\n         normalMap = new LinkedHashMap<K, V>();\n         reverseMap = new LinkedHashMap<V, K>();\n         @SuppressWarnings(\"unchecked\") // will fail at runtime if stream is incorrect\n+        final\n         Map<K, V> map = (Map<K, V>) in.readObject();\n         putAll(map);\n     }\n--- a/src/main/java/org/apache/commons/collections/collection/IndexedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/IndexedCollection.java\n      */\n     public C get(final K key) {\n         @SuppressWarnings(\"unchecked\") // index is a MultiMap which returns a Collection\n+        final\n         Collection<C> coll = (Collection<C>) index.get(key);\n         return coll == null ? null : coll.iterator().next();\n     }\n--- a/src/main/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TreeList.java\n             if (relativePosition >= 0) {\n                 relativePosition++;\n             }\n-            AVLNode<E> ret = balance();\n+            final AVLNode<E> ret = balance();\n             recalcHeight();\n             return ret;\n         }\n             if (relativePosition < 0) {\n                 relativePosition--;\n             }\n-            AVLNode<E> ret = balance();\n+            final AVLNode<E> ret = balance();\n             recalcHeight();\n             return ret;\n         }\n--- a/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n     public MultiKeyMap<K, V> clone() {\n         try {\n             return (MultiKeyMap<K, V>) super.clone();\n-        } catch (CloneNotSupportedException e) {\n+        } catch (final CloneNotSupportedException e) {\n             throw new InternalError();\n         }\n     }\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n \n     @Test\n     public void testIsEqualCollectionEquator() {\n-        Collection<Integer> collB = CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);\n+        final Collection<Integer> collB = CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);\n \n         // odd / even equator\n         final Equator<Integer> e = new Equator<Integer>() {\n \n     @Test\n     public void filterInverse() {\n-        List<Integer> ints = new ArrayList<Integer>();\n+        final List<Integer> ints = new ArrayList<Integer>();\n         ints.add(1);\n         ints.add(2);\n         ints.add(3);\n         ints.add(3);\n-        Iterable<Integer> iterable = ints;\n+        final Iterable<Integer> iterable = ints;\n         assertTrue(CollectionUtils.filterInverse(iterable, EQUALS_TWO));\n         assertEquals(3, ints.size());\n         assertEquals(1, (int) ints.get(0));\n         \n     @Test\n     public void filterInverseNullParameters() throws Exception {\n-        List<Long> longs = Collections.nCopies(4, 10L);\n+        final List<Long> longs = Collections.nCopies(4, 10L);\n         assertFalse(CollectionUtils.filterInverse(longs, null));\n         assertEquals(4, longs.size());\n         assertFalse(CollectionUtils.filterInverse(null, EQUALS_TWO));\n--- a/src/test/java/org/apache/commons/collections/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/IteratorUtilsTest.java\n      * Tests method nodeListIterator(NodeList)\n      */\n     public void testNodeListIterator() {\n-        Node[] nodes = createNodes();\n-        NodeList nodeList = createNodeList(nodes);\n+        final Node[] nodes = createNodes();\n+        final NodeList nodeList = createNodeList(nodes);\n         \n         final Iterator<Node> iterator = IteratorUtils.nodeListIterator(nodeList);\n         int expectedNodeIndex = 0;\n      * Tests method nodeListIterator(Node)\n      */\n     public void testNodeIterator() {\n-        Node[] nodes = createNodes();\n-        NodeList nodeList = createNodeList(nodes);\n-        Node parentNode = createMock(Node.class);\n+        final Node[] nodes = createNodes();\n+        final NodeList nodeList = createNodeList(nodes);\n+        final Node parentNode = createMock(Node.class);\n         expect(parentNode.getChildNodes()).andStubReturn(nodeList);\n         replay(parentNode);\n         \n      * @return \n      */\n     private Node[] createNodes() {\n-        Node node1 = createMock(Node.class);\n-        Node node2 = createMock(Node.class);\n-        Node node3 = createMock(Node.class);\n-        Node node4 = createMock(Node.class);\n+        final Node node1 = createMock(Node.class);\n+        final Node node2 = createMock(Node.class);\n+        final Node node3 = createMock(Node.class);\n+        final Node node4 = createMock(Node.class);\n         replay(node1);\n         replay(node2);\n         replay(node3);\n--- a/src/test/java/org/apache/commons/collections/collection/IndexedCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/IndexedCollectionTest.java\n         try {\n             coll.add(\"1\");\n             fail();\n-        } catch (IllegalArgumentException e) {\n+        } catch (final IllegalArgumentException e) {\n             // expected\n         }\n     }\n     \n     public void testDecoratedCollectionIsIndexedOnCreation() throws Exception {\n-        Collection<String> original = makeFullCollection();\n-        IndexedCollection<Integer, String> indexed = decorateUniqueCollection(original);\n+        final Collection<String> original = makeFullCollection();\n+        final IndexedCollection<Integer, String> indexed = decorateUniqueCollection(original);\n         \n         assertEquals(\"1\", indexed.get(1));\n         assertEquals(\"2\", indexed.get(2));\n     }\n     \n     public void testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately() throws Exception {\n-        Collection<String> original = new ArrayList<String>();\n-        IndexedCollection<Integer, String> indexed = decorateUniqueCollection(original);\n+        final Collection<String> original = new ArrayList<String>();\n+        final IndexedCollection<Integer, String> indexed = decorateUniqueCollection(original);\n         \n         original.add(\"1\");\n         original.add(\"2\");\n--- a/src/test/java/org/apache/commons/collections/iterators/NodeListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/NodeListIteratorTest.java\n         \n         \n         // create mocked Node Instances and fill Node[] to be used by test cases\n-        Node node1 = createMock(Element.class);\n-        Node node2 = createMock(Element.class);\n-        Node node3 = createMock(Text.class);\n-        Node node4 = createMock(Element.class);\n+        final Node node1 = createMock(Element.class);\n+        final Node node2 = createMock(Element.class);\n+        final Node node3 = createMock(Text.class);\n+        final Node node4 = createMock(Element.class);\n         nodes = new Node[] {node1, node2, node3, node4};\n         \n         replay(node1);\n \n     @Override\n     public Iterator<Node> makeEmptyIterator() {\n-        NodeList emptyNodeList = new NodeList() {\n+        final NodeList emptyNodeList = new NodeList() {\n             public Node item(final int index) {\n                 throw new IndexOutOfBoundsException();\n             }\n         if (createIteratorWithStandardConstr) {\n             return new NodeListIterator(emptyNodeList);\n         } else {\n-            Node parentNode = createMock(Node.class);\n+            final Node parentNode = createMock(Node.class);\n             expect(parentNode.getChildNodes()).andStubReturn(emptyNodeList);\n             replay(parentNode);\n             \n \n     @Override\n     public Iterator<Node> makeObject() {\n-        NodeList nodeList = new NodeList() {\n+        final NodeList nodeList = new NodeList() {\n             public Node item(final int index) {\n                 return nodes[index];\n             }\n     public void testNullConstructor(){\n         try{\n             @SuppressWarnings(\"unused\")\n+            final\n             NodeListIterator iter = new NodeListIterator((Node) null);\n             fail(\"IllegalArgumentException expected!\");\n-        }catch(IllegalArgumentException e){\n+        }catch(final IllegalArgumentException e){\n             // expected.\n         }\n     }", "timestamp": 1363627002, "metainfo": ""}