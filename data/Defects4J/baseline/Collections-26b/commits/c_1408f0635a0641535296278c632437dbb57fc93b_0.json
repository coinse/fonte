{"sha": "1408f0635a0641535296278c632437dbb57fc93b", "log": "Change to standard variable naming and braces style   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/PredicatedMap.java,v 1.3 2003/12/25 00:49:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/PredicatedMap.java,v 1.4 2003/12/29 15:08:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/25 00:49:14 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/29 15:08:15 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n             this.predicate = valuePredicate;\n         }\n \n-        public Object setValue(Object o) {\n-            if (predicate != null && predicate.evaluate(o) == false) {\n+        public Object setValue(Object obj) {\n+            if (predicate != null && predicate.evaluate(obj) == false) {\n                 throw new IllegalArgumentException(\"Cannot set value - Predicate rejected it\");\n             }\n-            return entry.setValue(o);\n+            return entry.setValue(obj);\n         }\n     }\n \n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.5 2003/12/29 14:54:58 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.6 2003/12/29 15:08:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.5 $ $Date: 2003/12/29 14:54:58 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/29 15:08:15 $\n  * \n  * @author Paul Jack\n  */\n      *  @throws IOException  if the stream raises it\n      *  @throws ClassNotFoundException  if the stream raises it\n      */\n-    private void readObject(ObjectInputStream inp) throws IOException, ClassNotFoundException {\n-        inp.defaultReadObject();\n-        table = new Entry[inp.readInt()];\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        table = new Entry[in.readInt()];\n         threshold = (int)(table.length * loadFactor);\n         queue = new ReferenceQueue();\n-        Object key = inp.readObject();\n+        Object key = in.readObject();\n         while (key != null) {\n-            Object value = inp.readObject();\n+            Object value = in.readObject();\n             put(key, value);\n-            key = inp.readObject();\n+            key = in.readObject();\n         }\n     }\n \n      *    if the key is not in this map\n      */\n     private Entry getEntry(Object key) {\n-        if (key == null) return null;\n+        if (key == null) {\n+            return null;\n+        }\n         int hash = key.hashCode();\n         int index = indexFor(hash);\n         for (Entry entry = table[index]; entry != null; entry = entry.next) {\n         Entry entry = table[index];\n         while (entry != null) {\n             if (entry.purge(ref)) {\n-                if (previous == null) table[index] = entry.next;\n-                else previous.next = entry.next;\n+                if (previous == null) {\n+                    table[index] = entry.next;\n+                } else {\n+                    previous.next = entry.next;\n+                }\n                 this.size--;\n                 return;\n             }\n     public boolean containsKey(Object key) {\n         purge();\n         Entry entry = getEntry(key);\n-        if (entry == null) return false;\n+        if (entry == null) {\n+            return false;\n+        }\n         return entry.getValue() != null;\n     }\n \n     public Object get(Object key) {\n         purge();\n         Entry entry = getEntry(key);\n-        if (entry == null) return null;\n+        if (entry == null) {\n+            return null;\n+        }\n         return entry.getValue();\n     }\n \n      *   is null\n      */\n     public Object put(Object key, Object value) {\n-        if (key == null) throw new NullPointerException(\"null keys not allowed\");\n-        if (value == null) throw new NullPointerException(\"null values not allowed\");\n+        if (key == null) {\n+            throw new NullPointerException(\"null keys not allowed\");\n+        }\n+        if (value == null) {\n+            throw new NullPointerException(\"null values not allowed\");\n+        }\n \n         purge();\n-        if (size + 1 > threshold) resize();\n+        if (size + 1 > threshold) {\n+            resize();\n+        }\n \n         int hash = key.hashCode();\n         int index = indexFor(hash);\n      *   the key was not in the map\n      */\n     public Object remove(Object key) {\n-        if (key == null) return null;\n+        if (key == null) {\n+            return null;\n+        }\n         purge();\n         int hash = key.hashCode();\n         int index = indexFor(hash);\n         Entry entry = table[index];\n         while (entry != null) {\n             if ((hash == entry.hash) && key.equals(entry.getKey())) {\n-                if (previous == null) table[index] = entry.next;\n-                else previous.next = entry.next;\n+                if (previous == null) {\n+                    table[index] = entry.next;\n+                } else {\n+                    previous.next = entry.next;\n+                }\n                 this.size--;\n                 modCount++;\n                 return entry.getValue();\n     public void clear() {\n         Arrays.fill(table, null);\n         size = 0;\n-        while (queue.poll() != null); // drain the queue\n+        while (queue.poll() != null) {}; // drain the queue\n     }\n \n \n                 ReferenceMap.this.clear();\n             }\n \n-            public boolean contains(Object o) {\n-                if (o == null) return false;\n-                if (!(o instanceof Map.Entry)) return false;\n-                Map.Entry e = (Map.Entry)o;\n+            public boolean contains(Object obj) {\n+                if (obj == null) {\n+                    return false;\n+                }\n+                if (obj instanceof Map.Entry == false) {\n+                    return false;\n+                }\n+                Map.Entry e = (Map.Entry) obj;\n                 Entry e2 = getEntry(e.getKey());\n                 return (e2 != null) && e.equals(e2);\n             }\n \n-            public boolean remove(Object o) {\n-                boolean r = contains(o);\n+            public boolean remove(Object obj) {\n+                boolean r = contains(obj);\n                 if (r) {\n-                    Map.Entry e = (Map.Entry)o;\n+                    Map.Entry e = (Map.Entry) obj;\n                     ReferenceMap.this.remove(e.getKey());\n                 }\n                 return r;\n                 return new KeyIterator();\n             }\n \n-            public boolean contains(Object o) {\n-                return containsKey(o);\n-            }\n-\n-\n-            public boolean remove(Object o) {\n-                Object r = ReferenceMap.this.remove(o);\n+            public boolean contains(Object obj) {\n+                return containsKey(obj);\n+            }\n+\n+\n+            public boolean remove(Object obj) {\n+                Object r = ReferenceMap.this.remove(obj);\n                 return r != null;\n             }\n \n--- a/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.4 2003/12/28 16:36:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.5 2003/12/29 15:08:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * operations will affect the map.<p>\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.4 $ $Date: 2003/12/28 16:36:48 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/29 15:08:15 $\n  * \n  * @author Berin Loritsch\n  * @author Gerhard Froehlich\n                     (value == null ? 0 : value.hashCode()));\n         }\n \n-        public boolean equals(Object o) {\n-            if (o == this) {\n+        public boolean equals(Object obj) {\n+            if (obj == this) {\n                 return true;\n             }\n-            if (o instanceof Map.Entry == false) {\n+            if (obj instanceof Map.Entry == false) {\n                 return false;\n             }\n \n-            Map.Entry e2 = (Map.Entry) o;\n+            Map.Entry e2 = (Map.Entry) obj;\n             return (\n                 (key == null ? e2.getKey() == null : key.equals(e2.getKey())) &&\n                 (value == null ? e2.getValue() == null : value.equals(e2.getValue())));\n         }\n \n-        public Object setValue(Object val) {\n+        public Object setValue(Object obj) {\n             Object retVal = value;\n-            value = val;\n+            value = obj;\n             return retVal;\n         }\n     }\n             return new EntryIterator();\n         }\n \n-        public boolean contains(Object o) {\n-            Map.Entry entry = (Map.Entry)o;\n+        public boolean contains(Object obj) {\n+            Map.Entry entry = (Map.Entry) obj;\n             int hash = getHash(entry.getKey());\n             synchronized (m_locks[hash]) {\n                 for (Node n = m_buckets[hash]; n != null; n = n.next) {\n             if (obj instanceof Map.Entry == false) {\n                 return false;\n             }\n-            Map.Entry entry = (Map.Entry)obj;\n+            Map.Entry entry = (Map.Entry) obj;\n             int hash = getHash(entry.getKey());\n             synchronized (m_locks[hash]) {\n                 for (Node n = m_buckets[hash]; n != null; n = n.next) {\n             return new KeyIterator();\n         }\n \n-        public boolean contains(Object o) {\n-            return StaticBucketMap.this.containsKey(o);\n-        }\n-\n-        public boolean remove(Object o) {\n-            int hash = getHash(o);\n+        public boolean contains(Object obj) {\n+            return StaticBucketMap.this.containsKey(obj);\n+        }\n+\n+        public boolean remove(Object obj) {\n+            int hash = getHash(obj);\n             synchronized (m_locks[hash]) {\n                 for (Node n = m_buckets[hash]; n != null; n = n.next) {\n                     Object k = n.getKey();\n-                    if ((k == o) || ((k != null) && k.equals(o))) {\n+                    if ((k == obj) || ((k != null) && k.equals(obj))) {\n                         StaticBucketMap.this.remove(k);\n                         return true;\n                     }\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java,v 1.2 2003/12/05 20:23:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java,v 1.3 2003/12/29 15:08:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates a map entry <code>Set</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/05 20:23:57 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/29 15:08:15 $\n  * \n  * @author Stephen Colebourne\n  */\n             super(entry);\n         }\n \n-        public Object setValue(Object o) {\n+        public Object setValue(Object obj) {\n             throw new UnsupportedOperationException();\n         }\n     }", "timestamp": 1072710495, "metainfo": ""}