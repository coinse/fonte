{"sha": "902ee25dcfb3f2a14d3dd8a9778f16b68611baaa", "log": "[COLLECTIONS-231] return specific type rather than base type in factory methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n      * @param defaultValue  the default value to return when the key is not found\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static <K, V> Map<K, V> defaultedMap(Map<K, V> map, V defaultValue) {\n+    public static <K, V> DefaultedMap<K, V> defaultedMap(Map<K, V> map, V defaultValue) {\n         return new DefaultedMap<K, V>(map, ConstantTransformer.constantTransformer(defaultValue));\n     }\n \n      * @param factory  the factory to use to create entries, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    public static <K, V> IterableMap<K, V> defaultedMap(Map<K, V> map, Factory<? extends V> factory) {\n+    public static <K, V> DefaultedMap<K, V> defaultedMap(Map<K, V> map, Factory<? extends V> factory) {\n         if (factory == null) {\n             throw new IllegalArgumentException(\"Factory must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static <K, V> IterableMap<K, V> fixedSizeMap(Map<K, V> map) {\n+    public static <K, V> FixedSizeMap<K, V> fixedSizeMap(Map<K, V> map) {\n         return new FixedSizeMap<K, V>(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static <K, V> SortedMap<K, V> fixedSizeSortedMap(SortedMap<K, V> map) {\n+    public static <K, V> FixedSizeSortedMap<K, V> fixedSizeSortedMap(SortedMap<K, V> map) {\n         return new FixedSizeSortedMap<K, V>(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    public static <K, V> SortedMap<K, V> lazySortedMap(SortedMap<K, V> map, Factory<? extends V> factory) {\n+    public static <K, V> LazySortedMap<K, V> lazySortedMap(SortedMap<K, V> map, Factory<? extends V> factory) {\n         return new LazySortedMap<K,V>(map, factory);\n     }\n \n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    public static <K, V> SortedMap<K, V> lazySortedMap(SortedMap<K, V> map, Transformer<? super K, ? extends V> factory) {\n+    public static <K, V> LazySortedMap<K, V> lazySortedMap(SortedMap<K, V> map,\n+                                                           Transformer<? super K, ? extends V> factory) {\n         return new LazySortedMap<K,V>(map, factory);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static <K, V> OrderedMap<K, V> listOrderedMap(Map<K, V> map) {\n+    public static <K, V> ListOrderedMap<K, V> listOrderedMap(Map<K, V> map) {\n         return new ListOrderedMap<K, V>(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n      * @param map  the map to wrap\n      * @param collectionClass  the type of the collection class\n      */\n-    public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(Map<K, ? super C> map, Class<C> collectionClass) {\n+    public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(Map<K, ? super C> map,\n+                                                                                    Class<C> collectionClass) {\n         return new MultiValueMap<K, V>(map, new ReflectionFactory<C>(collectionClass));\n     }\n \n      * @param map  the map to decorate\n      * @param collectionFactory  the collection factory (must return a Collection object).\n      */\n-    public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(Map<K, ? super C> map, Factory<C> collectionFactory) {\n+    public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(Map<K, ? super C> map,\n+                                                                                    Factory<C> collectionFactory) {\n         return new MultiValueMap<K, V>(map, collectionFactory);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n      * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n-    public static <K, V> IterableMap<K, V> predicatedMap(Map<K, V> map, Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate) {\n+    public static <K, V> PredicatedMap<K, V> predicatedMap(Map<K, V> map,\n+                                                           Predicate<? super K> keyPredicate,\n+                                                           Predicate<? super V> valuePredicate) {\n         return new PredicatedMap<K, V>(map, keyPredicate, valuePredicate);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n      * @param valuePredicate  the predicate to validate to values, null means no check\n      * @throws IllegalArgumentException if the map is null\n      */\n-    public static <K, V> SortedMap<K, V> predicatedSortedMap(SortedMap<K, V> map,\n+    public static <K, V> PredicatedSortedMap<K, V> predicatedSortedMap(SortedMap<K, V> map,\n             Predicate<? super K> keyPredicate, Predicate<? super V> valuePredicate) {\n         return new PredicatedSortedMap<K, V>(map, keyPredicate, valuePredicate);\n     }\n--- a/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n      * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static <K, V> IterableMap<K, V> transformingMap(Map<K, V> map,\n+    public static <K, V> TransformedMap<K, V> transformingMap(Map<K, V> map,\n             Transformer<? super K, ? extends K> keyTransformer,\n             Transformer<? super V, ? extends V> valueTransformer) {\n         return new TransformedMap<K, V>(map, keyTransformer, valueTransformer);\n      * @throws IllegalArgumentException if map is null\n      * @since Commons Collections 3.2\n      */\n-    public static <K, V> Map<K, V> transformedMap(Map<K, V> map,\n+    public static <K, V> TransformedMap<K, V> transformedMap(Map<K, V> map,\n             Transformer<? super K, ? extends K> keyTransformer,\n             Transformer<? super V, ? extends V> valueTransformer) {\n         TransformedMap<K, V> decorated = new TransformedMap<K, V>(map, keyTransformer, valueTransformer);\n--- a/src/main/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/TransformedSortedMap.java\n      * @param valueTransformer  the predicate to validate to values, null means no transformation\n      * @throws IllegalArgumentException if the map is null\n      */\n-    public static <K, V> SortedMap<K, V> transformingSortedMap(SortedMap<K, V> map,\n+    public static <K, V> TransformedSortedMap<K, V> transformingSortedMap(SortedMap<K, V> map,\n             Transformer<? super K, ? extends K> keyTransformer,\n             Transformer<? super V, ? extends V> valueTransformer) {\n         return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);\n      * @throws IllegalArgumentException if map is null\n      * @since Commons Collections 3.2\n      */\n-    public static <K, V> SortedMap<K, V> transformedSortedMap(SortedMap<K, V> map,\n+    public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(SortedMap<K, V> map,\n             Transformer<? super K, ? extends K> keyTransformer,\n             Transformer<? super V, ? extends V> valueTransformer) {\n         TransformedSortedMap<K, V> decorated = new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);", "timestamp": 1340462028, "metainfo": ""}