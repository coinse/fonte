{"sha": "95ec15aac07f3f32407428e07c36fc211f4c1187", "log": "Fix code formatting from one of my previous commits.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n                 return false;\n             }\n             @SuppressWarnings(\"unchecked\")\n-            final\n-            EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n+            final EquatorWrapper<O> otherObj = (EquatorWrapper<O>) obj;\n             return equator.equate(object, otherObj.getObject());\n         }\n \n--- a/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n         final int entrySize = in.readInt();\n         for (int i = 0; i < entrySize; i++) {\n             @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n-            final\n-            E obj = (E) in.readObject();\n+            final E obj = (E) in.readObject();\n             final int count = in.readInt();\n             map.put(obj, new MutableInteger(count));\n             size += count;\n--- a/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         @SuppressWarnings(\"unchecked\")  // This will fail at runtime if the stream is incorrect\n-        final\n-        Comparator<? super E> comp = (Comparator<? super E>) in.readObject();\n+        final Comparator<? super E> comp = (Comparator<? super E>) in.readObject();\n         super.doReadObject(new TreeMap<E, MutableInteger>(comp), in);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualLinkedHashBidiMap.java\n         normalMap = new LinkedHashMap<K, V>();\n         reverseMap = new LinkedHashMap<V, K>();\n         @SuppressWarnings(\"unchecked\") // will fail at runtime if stream is incorrect\n-        final\n-        Map<K, V> map = (Map<K, V>) in.readObject();\n+        final Map<K, V> map = (Map<K, V>) in.readObject();\n         putAll(map);\n     }\n }\n--- a/src/main/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n         normalMap = new TreeMap<K, V>(comparator);\n         reverseMap = new TreeMap<V, K>(valueComparator);\n         @SuppressWarnings(\"unchecked\") // will fail at runtime if the stream is incorrect\n-        final\n-        Map<K, V> map = (Map<K, V>) in.readObject();\n+        final Map<K, V> map = (Map<K, V>) in.readObject();\n         putAll(map);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/collection/IndexedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/IndexedCollection.java\n      */\n     public C get(final K key) {\n         @SuppressWarnings(\"unchecked\") // index is a MultiMap which returns a Collection\n-        final\n-        Collection<C> coll = (Collection<C>) index.get(key);\n+        final Collection<C> coll = (Collection<C>) index.get(key);\n         return coll == null ? null : coll.iterator().next();\n     }\n \n--- a/src/main/java/org/apache/commons/collections/functors/FunctorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FunctorUtils.java\n         }\n         // convert to array like this to guarantee iterator() ordering\n         @SuppressWarnings(\"unchecked\") // OK\n-        final\n-        Predicate<T>[] preds = new Predicate[predicates.size()];\n+        final Predicate<T>[] preds = new Predicate[predicates.size()];\n         int i = 0;\n         for (final Predicate<T> predicate : predicates) {\n             preds[i] = predicate;\n--- a/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n     public void add(final E obj) throws UnsupportedOperationException {\n         if (iterator instanceof ListIterator) {\n             @SuppressWarnings(\"unchecked\")\n-            final\n-            ListIterator<E> li = (ListIterator<E>) iterator;\n+            final ListIterator<E> li = (ListIterator<E>) iterator;\n             li.add(obj);\n             return;\n         }\n     public E previous() throws NoSuchElementException {\n         if (iterator instanceof ListIterator) {\n             @SuppressWarnings(\"unchecked\")\n-            final\n-            ListIterator<E> li = (ListIterator<E>) iterator;\n+            final ListIterator<E> li = (ListIterator<E>) iterator;\n             return li.previous();\n         }\n \n     public void set(final E obj) throws UnsupportedOperationException {\n         if (iterator instanceof ListIterator) {\n             @SuppressWarnings(\"unchecked\")\n-            final\n-            ListIterator<E> li = (ListIterator<E>) iterator;\n+            final ListIterator<E> li = (ListIterator<E>) iterator;\n             li.set(obj);\n             return;\n         }\n--- a/src/main/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazyMap.java\n         // create value for key if key is not currently in the map\n         if (map.containsKey(key) == false) {\n             @SuppressWarnings(\"unchecked\")\n-            final\n-            K castKey = (K) key;\n+            final K castKey = (K) key;\n             final V value = factory.transform(castKey);\n             map.put(castKey, value);\n             return value;\n--- a/src/test/java/org/apache/commons/collections/bidimap/DualTreeBidiMap2Test.java\n+++ b/src/test/java/org/apache/commons/collections/bidimap/DualTreeBidiMap2Test.java\n \n         final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n         @SuppressWarnings(\"unchecked\")\n-        final\n-        DualTreeBidiMap<String, Integer> deserialised = (DualTreeBidiMap<String, Integer>) in.readObject();\n+        final DualTreeBidiMap<String, Integer> deserialised = (DualTreeBidiMap<String, Integer>) in.readObject();\n         in.close();\n \n         assertNotNull(original.comparator());\n--- a/src/test/java/org/apache/commons/collections/iterators/NodeListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/NodeListIteratorTest.java\n     public void testNullConstructor(){\n         try{\n             @SuppressWarnings(\"unused\")\n-            final\n-            NodeListIterator iter = new NodeListIterator((Node) null);\n+            final NodeListIterator iter = new NodeListIterator((Node) null);\n             fail(\"IllegalArgumentException expected!\");\n         }catch(final IllegalArgumentException e){\n             // expected.\n--- a/src/test/java/org/apache/commons/collections/map/AbstractMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/AbstractMapTest.java\n         final Map<K, V> map = makeObject();\n         if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             @SuppressWarnings(\"unchecked\")\n-            final\n-            Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n+            final Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n             assertEquals(\"Map is empty\", 0, map2.size());\n         }\n     }\n         final Map<K, V> map = makeFullMap();\n         if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             @SuppressWarnings(\"unchecked\")\n-            final\n-            Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n+            final Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n             assertEquals(\"Map is the right size\", getSampleKeys().length, map2.size());\n         }\n     }\n--- a/src/test/java/org/apache/commons/collections/map/ReferenceIdentityMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/ReferenceIdentityMapTest.java\n             } else {\n                 // create garbage:\n                 @SuppressWarnings(\"unused\")\n-                final\n-                byte[] b =  new byte[bytz];\n+                final byte[] b =  new byte[bytz];\n                 bytz = bytz * 2;\n             }\n         }\n--- a/src/test/java/org/apache/commons/collections/map/ReferenceMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/ReferenceMapTest.java\n             } else {\n                 // create garbage:\n                 @SuppressWarnings(\"unused\")\n-                final\n-                byte[] b = new byte[bytz];\n+                final byte[] b = new byte[bytz];\n                 bytz = bytz * 2;\n             }\n         }", "timestamp": 1363642989, "metainfo": ""}