{"sha": "15ee56bd0f91ef807a3e729ab3410a834ef3fcef", "log": "Add more tests for queue interface.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.NoSuchElementException;\n import java.util.Queue;\n \n import org.apache.commons.collections4.collection.AbstractCollectionTest;\n  * test case (method) your {@link Queue} fails or override one of the\n  * protected methods from AbstractCollectionTest.\n  *\n- * TODO: add more tests for Queue interface\n- *\n  * @since 4.0\n  * @version $Id$\n  */\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link Queue#offer(Object)}.\n+     */\n+    public void testQueueOffer() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        final E[] elements = getFullElements();\n+        for (final E element : elements) {\n+            resetEmpty();\n+            final boolean r = getCollection().offer(element);\n+            getConfirmed().add(element);\n+            verify();\n+            assertTrue(\"Empty queue changed after add\", r);\n+            assertEquals(\"Queue size is 1 after first add\", 1, getCollection().size());\n+        }\n+\n+        resetEmpty();\n+        int size = 0;\n+        for (final E element : elements) {\n+            final boolean r = getCollection().offer(element);\n+            getConfirmed().add(element);\n+            verify();\n+            if (r) {\n+                size++;\n+            }\n+            assertEquals(\"Queue size should grow after add\", size, getCollection().size());\n+            assertTrue(\"Queue should contain added element\", getCollection().contains(element));\n+        }\n+    }\n+    \n+    /**\n+     *  Tests {@link Queue#element()}.\n+     */\n+    public void testQueueElement() {\n+        resetEmpty();\n+        \n+        try {\n+            getCollection().element();\n+            fail(\"Queue.element should throw NoSuchElementException\");\n+        } catch (final NoSuchElementException e) {\n+            // expected\n+        }\n+\n+        resetFull();\n+\n+        assertTrue(getConfirmed().contains(getCollection().element()));\n+\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+\n+        final int max = getFullElements().length;\n+        for (int i = 0; i < max; i++) {\n+            final E element = getCollection().element();\n+\n+            if (!isNullSupported()) {\n+                assertNotNull(element);\n+            }\n+\n+            assertTrue(getConfirmed().contains(element));\n+            \n+            getCollection().remove(element);\n+            getConfirmed().remove(element);\n+\n+            verify();\n+        }\n+        \n+        try {\n+            getCollection().element();\n+            fail(\"Queue.element should throw NoSuchElementException\");\n+        } catch (final NoSuchElementException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link Queue#peek()}.\n+     */\n+    public void testQueuePeek() {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+\n+        resetEmpty();\n+        \n+        E element = getCollection().peek();\n+        assertNull(element);\n+\n+        resetFull();\n+\n+        final int max = getFullElements().length;\n+        for (int i = 0; i < max; i++) {\n+            element = getCollection().peek();\n+\n+            if (!isNullSupported()) {\n+                assertNotNull(element);\n+            }\n+\n+            assertTrue(getConfirmed().contains(element));\n+            \n+            getCollection().remove(element);\n+            getConfirmed().remove(element);\n+\n+            verify();\n+        }\n+        \n+        element = getCollection().peek();\n+        assertNull(element);\n+    }\n+\n+    /**\n+     *  Tests {@link Queue#remove()}.\n+     */\n+    public void testQueueRemove() {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+\n+        resetEmpty();\n+        \n+        try {\n+            getCollection().remove();\n+            fail(\"Queue.remove should throw NoSuchElementException\");\n+        } catch (final NoSuchElementException e) {\n+            // expected\n+        }\n+\n+        resetFull();\n+\n+        final int max = getFullElements().length;\n+        for (int i = 0; i < max; i++) {\n+            final E element = getCollection().remove();\n+            final boolean success = getConfirmed().remove(element);\n+            assertTrue(\"remove should return correct element\", success);\n+            verify();\n+        }\n+        \n+        try {\n+            getCollection().element();\n+            fail(\"Queue.remove should throw NoSuchElementException\");\n+        } catch (final NoSuchElementException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link Queue#poll()}.\n+     */\n+    public void testQueuePoll() {\n+        if (!isRemoveSupported()) {\n+            return;\n+        }\n+\n+        resetEmpty();\n+        \n+        E element = getCollection().poll();\n+        assertNull(element);\n+\n+        resetFull();\n+\n+        final int max = getFullElements().length;\n+        for (int i = 0; i < max; i++) {\n+            element = getCollection().poll();\n+            final boolean success = getConfirmed().remove(element);\n+            assertTrue(\"poll should return correct element\", success);\n+            verify();\n+        }\n+        \n+        element = getCollection().poll();\n+        assertNull(element);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     @SuppressWarnings(\"unchecked\")\n     public void testEmptyQueueSerialization() throws IOException, ClassNotFoundException {\n         final Queue<E> queue = makeObject();\n         final Queue<E> queue = makeFullCollection();\n         if(queue instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n             final Queue<E> queue2 = (Queue<E>) readExternalFormFromDisk(getCanonicalFullCollectionName(queue));\n-            assertEquals(\"Queues is the right size\",queue.size(), queue2.size());\n+            assertEquals(\"Queues are not the right size\", queue.size(), queue2.size());\n         }\n     }\n ", "timestamp": 1384177933, "metainfo": ""}