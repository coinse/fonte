{"sha": "5d42c95c33cd0504b44fc28be817f278630ee703", "log": "[COLLECTIONS-545] Documented runtime complexity of CollectionUtils#removeAll(Collection, Collection).  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * in <code>collection</code> unless <code>remove</code> contains <code>e</code>, in which\n      * case the cardinality is zero. This method is useful if you do not wish to modify\n      * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n+     * <p>\n+     * This implementation iterates over <code>collection</code>, checking each element in\n+     * turn to see if it's contained in <code>remove</code>. If it's not contained, it's added\n+     * to the returned list. As a consequence, it is advised to use a collection type for\n+     * <code>remove</code> that provides a fast (e.g. O(1)) implementation of\n+     * {@link Collection#contains(Object)}.\n      *\n      * @param <E>  the type of object the {@link Collection} contains\n      * @param collection  the collection from which items are removed (in the returned collection)", "timestamp": 1422005658, "metainfo": ""}