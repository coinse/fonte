{"sha": "5535332edc98db13602bf3d12e0b89429ebe1c54", "log": "Ensure map putAll() method does not recurse   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/AbstractMapDecorator.java\n+++ b/src/java/org/apache/commons/collections/decorators/AbstractMapDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractMapDecorator.java,v 1.1 2003/05/09 16:38:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/AbstractMapDecorator.java,v 1.2 2003/05/09 18:33:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you might want that loophole, so this class is kept simple.</p>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:38:16 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 18:33:27 $\n  * \n  * @author Daniel Rall\n  * @author Stephen Colebourne\n         return map.put(key, value);\n     }\n \n-    public void putAll(Map map) {\n-        map.putAll(map);\n+    public void putAll(Map mapToCopy) {\n+        map.putAll(mapToCopy);\n     }\n \n     public Object remove(Object key) {\n--- a/src/java/org/apache/commons/collections/decorators/FixedSizeMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/FixedSizeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/FixedSizeMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/FixedSizeMap.java,v 1.2 2003/05/09 18:33:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is not always unsupported.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 18:33:27 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n         return map.put(key, value);\n     }\n \n-    public void putAll(Map map) {\n-        for (Iterator it = map.keySet().iterator(); it.hasNext(); ) {\n-            if (map.containsKey(it.next()) == false) {\n+    public void putAll(Map mapToCopy) {\n+        for (Iterator it = mapToCopy.keySet().iterator(); it.hasNext(); ) {\n+            if (mapToCopy.containsKey(it.next()) == false) {\n                 throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n             }\n         }\n-        map.putAll(map);\n+        map.putAll(mapToCopy);\n     }\n \n     public void clear() {\n--- a/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.1 2003/05/09 16:42:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.2 2003/05/09 18:33:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 18:33:27 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n         return map.put(key, value);\n     }\n \n-    public void putAll(Map map) {\n-        Iterator it = map.entrySet().iterator();\n+    public void putAll(Map mapToCopy) {\n+        Iterator it = mapToCopy.entrySet().iterator();\n         while (it.hasNext()) {\n             Map.Entry entry = (Map.Entry) it.next();\n             Object key = entry.getKey();\n             Object value = entry.getValue();\n             validate(key, value);\n         }\n-        map.putAll(map);\n+        map.putAll(mapToCopy);\n     }\n \n     public Set entrySet() {\n--- a/src/java/org/apache/commons/collections/decorators/UnmodifiableMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableMap.java,v 1.1 2003/05/09 16:42:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableMap.java,v 1.2 2003/05/09 18:33:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 18:33:27 $\n  * \n  * @author Stephen Colebourne\n  */\n         throw new UnsupportedOperationException();\n     }\n \n-    public void putAll(Map map) {\n+    public void putAll(Map mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n ", "timestamp": 1052505207, "metainfo": ""}