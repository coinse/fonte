{"sha": "d9796b6160167999a85212caa343ce1488eaa7bc", "log": "Fix so references are properly cleared on Kaffe JVM bug 34689, by Guilhem Lavaux  ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/TestReferenceMap.java\n  * @version $Revision$ $Date$\n  *\n  * @author Paul Jack\n+ * @author Guilhem Lavaux\n  */\n public class TestReferenceMap extends AbstractTestMap {\n \n     }\n */\n \n+    WeakReference keyReference;\n+    WeakReference valueReference;\n+\n+    public Map buildRefMap() {\n+        Object key = new Object();\n+        Object value = new Object();\n+        \n+        keyReference = new WeakReference(key);\n+        valueReference = new WeakReference(value);\n+        \n+        Map testMap = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\n+        testMap.put(key, value);\n+ \n+        assertEquals(\"In map\", value, testMap.get(key));\n+        assertNotNull(\"Weak reference released early (1)\", keyReference.get());\n+        assertNotNull(\"Weak reference released early (2)\", valueReference.get());\n+        return testMap;\n+    }\n+\n     /** Tests whether purge values setting works */\n     public void testPurgeValues() throws Exception {\n         // many thanks to Juozas Baliuka for suggesting this method\n-        Object key = new Object();\n-        Object value = new Object();\n-        \n-        WeakReference keyReference = new WeakReference(key);\n-        WeakReference valueReference = new WeakReference(value);\n-        \n-        Map testMap = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\n-        testMap.put(key, value);\n-        \n-        assertEquals(\"In map\", value, testMap.get(key));\n-        assertNotNull(\"Weak reference released early (1)\", keyReference.get());\n-        assertNotNull(\"Weak reference released early (2)\", valueReference.get());\n-        \n-        // dereference strong references\n-        key = null;\n-        value = null;\n+      \n+        Map testMap = buildRefMap();\n         \n         int iterations = 0;\n         int bytz = 2;\n--- a/src/test/org/apache/commons/collections/map/TestReferenceIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestReferenceIdentityMap.java\n  *\n  * @author Paul Jack\n  * @author Stephen Colebourne\n+ * @author Guilhem Lavaux\n  */\n public class TestReferenceIdentityMap extends AbstractTestIterableMap {\n \n     }\n */\n \n+    WeakReference keyReference;\n+    WeakReference valueReference;\n+\n+    public Map buildRefMap() {\n+        Object key = new Object();\n+        Object value = new Object();\n+        \n+        keyReference = new WeakReference(key);\n+        valueReference = new WeakReference(value);\n+        \n+        Map testMap = new ReferenceIdentityMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\n+        testMap.put(key, value);\n+ \n+        assertEquals(\"In map\", value, testMap.get(key));\n+        assertNotNull(\"Weak reference released early (1)\", keyReference.get());\n+        assertNotNull(\"Weak reference released early (2)\", valueReference.get());\n+        return testMap;\n+    }\n+\n     /** Tests whether purge values setting works */\n     public void testPurgeValues() throws Exception {\n         // many thanks to Juozas Baliuka for suggesting this method\n-        Object key = new Object();\n-        Object value = new Object();\n-        \n-        WeakReference keyReference = new WeakReference(key);\n-        WeakReference valueReference = new WeakReference(value);\n-        \n-        Map testMap = new ReferenceIdentityMap(ReferenceIdentityMap.WEAK, ReferenceIdentityMap.HARD, true);\n-        testMap.put(key, value);\n-        \n-        assertEquals(\"In map\", value, testMap.get(key));\n-        assertNotNull(\"Weak reference released early (1)\", keyReference.get());\n-        assertNotNull(\"Weak reference released early (2)\", valueReference.get());\n-        \n-        // dereference strong references\n-        key = null;\n-        value = null;\n+        Map testMap = buildRefMap();\n         \n         int iterations = 0;\n         int bytz = 2;\n--- a/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n  * @version $Revision$ $Date$\n  *\n  * @author Paul Jack\n+ * @author Guilhem Lavaux\n  */\n public class TestReferenceMap extends AbstractTestIterableMap {\n \n     }\n */\n \n+    WeakReference keyReference;\n+    WeakReference valueReference;\n+\n+    public Map buildRefMap() {\n+        Object key = new Object();\n+        Object value = new Object();\n+        \n+        keyReference = new WeakReference(key);\n+        valueReference = new WeakReference(value);\n+        \n+        Map testMap = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\n+        testMap.put(key, value);\n+ \n+        assertEquals(\"In map\", value, testMap.get(key));\n+        assertNotNull(\"Weak reference released early (1)\", keyReference.get());\n+        assertNotNull(\"Weak reference released early (2)\", valueReference.get());\n+        return testMap;\n+    }\n+\n     /** Tests whether purge values setting works */\n     public void testPurgeValues() throws Exception {\n         // many thanks to Juozas Baliuka for suggesting this method\n-        Object key = new Object();\n-        Object value = new Object();\n-        \n-        WeakReference keyReference = new WeakReference(key);\n-        WeakReference valueReference = new WeakReference(value);\n-        \n-        Map testMap = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.HARD, true);\n-        testMap.put(key, value);\n-        \n-        assertEquals(\"In map\", value, testMap.get(key));\n-        assertNotNull(\"Weak reference released early (1)\", keyReference.get());\n-        assertNotNull(\"Weak reference released early (2)\", valueReference.get());\n-        \n-        // dereference strong references\n-        key = null;\n-        value = null;\n-        \n+        Map testMap = buildRefMap();\n+\n         int iterations = 0;\n         int bytz = 2;\n         while(true) {", "timestamp": 1115486818, "metainfo": ""}