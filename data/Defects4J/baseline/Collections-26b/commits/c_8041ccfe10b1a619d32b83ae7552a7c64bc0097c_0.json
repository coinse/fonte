{"sha": "8041ccfe10b1a619d32b83ae7552a7c64bc0097c", "log": "Fields can be private  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/list/CursorableLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/CursorableLinkedList.java\n     private static final long serialVersionUID = 8836393098519411393L;\n \n     /** A list of the cursor currently open on this list */\n-    protected transient List<WeakReference<Cursor<E>>> cursors;\n+    private transient List<WeakReference<Cursor<E>>> cursors;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/list/LazyList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/LazyList.java\n     private static final long serialVersionUID = -1708388017160694542L;\n \n     /** The factory to use to lazily instantiate the objects */\n-    protected final Factory<? extends E> factory;\n+    private final Factory<? extends E> factory;\n \n     /**\n      * Factory method to create a lazily instantiating list.\n--- a/src/main/java/org/apache/commons/collections4/list/NodeCachingLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/NodeCachingLinkedList.java\n     /**\n      * The default value for {@link #maximumCacheSize}.\n      */\n-    protected static final int DEFAULT_MAXIMUM_CACHE_SIZE = 20;\n+    private static final int DEFAULT_MAXIMUM_CACHE_SIZE = 20;\n \n     /**\n      * The first cached node, or <code>null</code> if no nodes are cached.\n      * Cached nodes are stored in a singly-linked list with\n      * <code>next</code> pointing to the next element.\n      */\n-    protected transient Node<E> firstCachedNode;\n+    private transient Node<E> firstCachedNode;\n     \n     /**\n      * The size of the cache.\n      */\n-    protected transient int cacheSize;\n+    private transient int cacheSize;\n \n     /**\n      * The maximum size of the cache.\n      */\n-    protected int maximumCacheSize;\n+    private int maximumCacheSize;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/SetUniqueList.java\n     private static final long serialVersionUID = 7196982186153478694L;\n \n     /** Internal Set to maintain uniqueness. */\n-    protected final Set<E> set;\n+    private final Set<E> set;\n \n     /**\n      * Factory method to create a SetList using the supplied list to retain\n      */\n     static class SetListIterator<E> extends AbstractIteratorDecorator<E> {\n \n-        protected final Set<E> set;\n-        protected E last = null;\n+        private final Set<E> set;\n+        private E last = null;\n \n         protected SetListIterator(final Iterator<E> it, final Set<E> set) {\n             super(it);\n     static class SetListListIterator<E> extends\n             AbstractListIteratorDecorator<E> {\n \n-        protected final Set<E> set;\n-        protected E last = null;\n+        private final Set<E> set;\n+        private E last = null;\n \n         protected SetListListIterator(final ListIterator<E> it, final Set<E> set) {\n             super(it);\n--- a/src/main/java/org/apache/commons/collections4/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/TreeList.java\n      */\n     static class TreeListIterator<E> implements ListIterator<E>, OrderedIterator<E> {\n         /** The parent list */\n-        protected final TreeList<E> parent;\n+        private final TreeList<E> parent;\n         /**\n          * Cache of the next node that will be returned by {@link #next()}.\n          */\n-        protected AVLNode<E> next;\n+        private AVLNode<E> next;\n         /**\n          * The index of the next node to be returned.\n          */\n-        protected int nextIndex;\n+        private int nextIndex;\n         /**\n          * Cache of the last node that was returned by {@link #next()}\n          * or {@link #previous()}.\n          */\n-        protected AVLNode<E> current;\n+        private AVLNode<E> current;\n         /**\n          * The index of the last node that was returned.\n          */\n-        protected int currentIndex;\n+        private int currentIndex;\n         /**\n          * The modification count that the list is expected to have. If the list\n          * doesn't have this count, then a\n          * {@link java.util.ConcurrentModificationException} may be thrown by\n          * the operations.\n          */\n-        protected int expectedModCount;\n+        private int expectedModCount;\n \n         /**\n          * Create a ListIterator for a list.", "timestamp": 1367328053, "metainfo": ""}