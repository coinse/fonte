{"sha": "23653563933d8cfe49332ba44c2961952d1f00af", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r641231 | skestle | 2008-03-26 02:58:51 -0700 (Wed, 26 Mar 2008) | 1 line          Started incorporating Edwin's patch for COLLECTIONS-253, in preparation for COLLECTIONS-290.     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java\n  */\n package org.apache.commons.collections.iterators;\n \n+import static org.apache.commons.collections.functors.TruePredicate.truePredicate;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n \n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.functors.NotNullPredicate;\n-import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Test the filter iterator.\n  * @author Ralph Wagner\n  * @author Huw Roberts\n  */\n-public class TestFilterIterator extends AbstractTestIterator {\n+public class TestFilterIterator<E> extends AbstractTestIterator<E> {\n \n     /** Creates new TestFilterIterator */\n     public TestFilterIterator(String name) {\n     }\n \n     private String[] array;\n-    private List list;\n-    private FilterIterator iterator;\n+    private List<E> list;\n+    private FilterIterator<E> iterator;\n+\n     /**\n      * Set up instance variables required by this test case.\n      */\n     /**\n      * Returns an full iterator wrapped in a\n      * FilterIterator that blocks all the elements\n-     * \n+     *\n      * @return \"empty\" FilterIterator\n      */\n-    public Iterator makeEmptyIterator() {\n-        return makeBlockAllFilter(new ArrayIterator(array));\n+    public FilterIterator<E> makeEmptyIterator() {\n+        return makeBlockAllFilter(new ArrayIterator<E>(array));\n     }\n \n     /**\n      * \n      * @return a filtered iterator\n      */\n-    public Iterator makeFullIterator() {\n-        array = new String[] { \"a\", \"b\", \"c\" };\n-        list = new ArrayList(Arrays.asList(array));\n+    @SuppressWarnings(\"unchecked\")\n+    public FilterIterator<E> makeObject() {\n+        list = new ArrayList<E>(Arrays.asList((E[]) array));\n         return makePassThroughFilter(list.iterator());\n     }\n \n     }\n \n     public void testRepeatedNext() {\n-        for (int i = 0; i < array.length; i++)\n+        for (int i = 0; i < array.length; i++) {\n             iterator.next();\n+        }\n         verifyNoMoreElements();\n     }\n \n      * Test that when the iterator is changed, the hasNext method returns the\n      * correct response for the new iterator.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public void testSetIterator() {\n-        Iterator iter1 = Collections.singleton(new Object()).iterator();\n-        Iterator iter2 = Collections.EMPTY_LIST.iterator();\n-        \n-        FilterIterator filterIterator = new FilterIterator(iter1);\n-        filterIterator.setPredicate(TruePredicate.getInstance());\n+        Iterator<E> iter1 = Collections.singleton((E) new Object()).iterator();\n+        Iterator<E> iter2 = Collections.<E>emptyList().iterator();\n+\n+        FilterIterator<E> filterIterator = new FilterIterator<E>(iter1);\n+        filterIterator.setPredicate(truePredicate());\n         // this iterator has elements\n         assertEquals(true, filterIterator.hasNext());\n-        \n+\n         // this iterator has no elements\n         filterIterator.setIterator(iter2);\n         assertEquals(false, filterIterator.hasNext());\n      * correct response for the new predicate.\n      */\n     public void testSetPredicate() {\n-        Iterator iter = Collections.singleton(null).iterator();\n-\n-        FilterIterator filterIterator = new FilterIterator(iter);\n-        filterIterator.setPredicate(TruePredicate.getInstance());\n+        Iterator<E> iter = Collections.singleton((E) null).iterator();\n+\n+        FilterIterator<E> filterIterator = new FilterIterator<E>(iter);\n+        filterIterator.setPredicate(truePredicate());\n         // this predicate matches\n         assertEquals(true, filterIterator.hasNext());\n-        \n+\n         // this predicate doesn't match\n         filterIterator.setPredicate(NotNullPredicate.getInstance());\n         assertEquals(false, filterIterator.hasNext());\n     }\n \n     private void verifyElementsInPredicate(final String[] elements) {\n-        Predicate pred = new Predicate() {\n-            public boolean evaluate(Object x) {\n-                for (int i = 0; i < elements.length; i++)\n-                    if (elements[i].equals(x))\n+        Predicate<E> pred = new Predicate<E>() {\n+            public boolean evaluate(E x) {\n+                for (int i = 0; i < elements.length; i++) {\n+                    if (elements[i].equals(x)) {\n                         return true;\n+                    }\n+                }\n                 return false;\n             }\n         };\n     }\n \n     private void initIterator() {\n-        iterator = (FilterIterator) makeFullIterator();\n+        iterator = makeObject();\n     }\n \n     /**\n      * Returns a FilterIterator that does not filter\n      * any of its elements\n-     * \n+     *\n      * @param i      the Iterator to \"filter\"\n      * @return \"filtered\" iterator\n      */\n-    protected FilterIterator makePassThroughFilter(Iterator i) {\n-        Predicate pred = new Predicate() {\n-                public boolean evaluate(Object x) { return true; }\n+    protected FilterIterator<E> makePassThroughFilter(Iterator<E> i) {\n+        Predicate<E> pred = new Predicate<E>() {\n+                public boolean evaluate(E x) { return true; }\n         };\n-        return new FilterIterator(i,pred);\n+        return new FilterIterator<E>(i, pred);\n     }\n \n     /**\n      * Returns a FilterIterator that blocks\n      * all of its elements\n-     * \n+     *\n      * @param i      the Iterator to \"filter\"\n      * @return \"filtered\" iterator\n      */\n-    protected FilterIterator makeBlockAllFilter(Iterator i) {\n-        Predicate pred = new Predicate() {\n-                public boolean evaluate(Object x) { return false; }\n+    protected FilterIterator<E> makeBlockAllFilter(Iterator<E> i) {\n+        Predicate<E> pred = new Predicate<E>() {\n+                public boolean evaluate(E x) { return false; }\n         };\n-        return new FilterIterator(i,pred);\n+        return new FilterIterator<E>(i, pred);\n     }\n }\n ", "timestamp": 1252994227, "metainfo": ""}