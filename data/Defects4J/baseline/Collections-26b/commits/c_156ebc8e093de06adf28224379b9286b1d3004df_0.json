{"sha": "156ebc8e093de06adf28224379b9286b1d3004df", "log": "Use isFull() from addMapping() for better subclassing ability from Mike Pettypiece   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * \n  * @since Commons Collections 3.0 (previously in main package v1.0)\n- * @version $Revision: 1.11 $ $Date: 2004/04/25 23:27:43 $\n+ * @version $Revision: 1.12 $ $Date: 2004/04/25 23:30:07 $\n  *\n  * @author James Strachan\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n+ * @author Mike Pettypiece\n  */\n public class LRUMap\n         extends AbstractLinkedMap implements BoundedMap, Serializable, Cloneable {\n      * <p>\n      * This implementation checks the LRU size and determines whether to\n      * discard an entry or not using {@link #removeLRU(LinkEntry)}.\n+     * <p>\n+     * From Commons Collections 3.1 this method uses {@link #isFull()} rather\n+     * than accessing <code>size</code> and <code>maxSize</code> directly.\n      * \n      * @param hashIndex  the index into the data array to store at\n      * @param hashCode  the hash code of the key to add\n      * @param value  the value to add\n      */\n     protected void addMapping(int hashIndex, int hashCode, Object key, Object value) {\n-        if (size >= maxSize && removeLRU(header.after)) {\n+        if (isFull() && removeLRU(header.after)) {\n             reuseMapping(header.after, hashIndex, hashCode, key, value);\n         } else {\n             super.addMapping(hashIndex, hashCode, key, value);", "timestamp": 1082935807, "metainfo": ""}