{"sha": "db708754f61ed6e39e9b4e14aa0c6dab669ab959", "log": "allow cardinality(null,collection) and add test for it (fixing http://issues.apache.org/bugzilla/show_bug.cgi?id=13785 per suggestion of Serhiy Yevtushenko)   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.18 2002/10/13 00:38:36 scolebourne Exp $\n- * $Revision: 1.18 $\n- * $Date: 2002/10/13 00:38:36 $\n+ * $Id: CollectionUtils.java,v 1.19 2002/11/01 19:54:26 rwaldhoff Exp $\n+ * $Revision: 1.19 $\n+ * $Date: 2002/11/01 19:54:26 $\n  *\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2002 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n \n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.EnumerationIterator;\n+\n /**\n  * A set of {@link Collection} related utility methods.\n  *\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Steve Downey\n- * @version $Revision: 1.18 $ $Date: 2002/10/13 00:38:36 $\n+ * @version $Revision: 1.19 $ $Date: 2002/11/01 19:54:26 $\n  */\n public class CollectionUtils {\n \n      */\n     public static int cardinality(Object obj, final Collection col) {\n         int count = 0;\n-        Iterator it = col.iterator();\n-        while(it.hasNext()) {\n-            Object elt = it.next();\n-            if((null == obj && null == elt) || obj.equals(elt)) {\n-                count++;\n+        if(null == obj) {\n+            for(Iterator it = col.iterator();it.hasNext();) {\n+                if(null == it.next()) {\n+                    count++;\n+                }\n+            }\n+        } else {\n+            for(Iterator it = col.iterator();it.hasNext();) {\n+                if(obj.equals(it.next())) {\n+                    count++;\n+                }\n             }\n         }\n         return count;\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.6 2002/09/07 19:49:49 rwaldhoff Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/09/07 19:49:49 $\n+ * $Id: TestCollectionUtils.java,v 1.7 2002/11/01 19:54:27 rwaldhoff Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/11/01 19:54:27 $\n  *\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2002 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Id: TestCollectionUtils.java,v 1.6 2002/09/07 19:49:49 rwaldhoff Exp $\n+ * @version $Revision: 1.7 $ $Date: 2002/11/01 19:54:27 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         assertEquals(new Integer(2),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n         assertEquals(new Integer(4),freq.get(\"d\"));\n-        assertTrue(null == freq.get(\"e\"));\n+        assertNull(freq.get(\"e\"));\n \n         freq = CollectionUtils.getCardinalityMap(_b);\n-        assertTrue(null == freq.get(\"a\"));\n+        assertNull(freq.get(\"a\"));\n         assertEquals(new Integer(4),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n         assertEquals(3,CollectionUtils.cardinality(\"c\",_b));\n         assertEquals(2,CollectionUtils.cardinality(\"d\",_b));\n         assertEquals(1,CollectionUtils.cardinality(\"e\",_b));\n+    }\n+    \n+    public void testCardinalityOfNull() {\n+        List list = new ArrayList();\n+        assertEquals(0,CollectionUtils.cardinality(null,list));\n+        {\n+            Map freq = CollectionUtils.getCardinalityMap(list);\n+            assertNull(freq.get(null));\n+        }\n+        list.add(\"A\");\n+        assertEquals(0,CollectionUtils.cardinality(null,list));\n+        {\n+            Map freq = CollectionUtils.getCardinalityMap(list);\n+            assertNull(freq.get(null));\n+        }\n+        list.add(null);\n+        assertEquals(1,CollectionUtils.cardinality(null,list));\n+        {\n+            Map freq = CollectionUtils.getCardinalityMap(list);\n+            assertEquals(new Integer(1),freq.get(null));\n+        }\n+        list.add(\"B\");\n+        assertEquals(1,CollectionUtils.cardinality(null,list));\n+        {\n+            Map freq = CollectionUtils.getCardinalityMap(list);\n+            assertEquals(new Integer(1),freq.get(null));\n+        }\n+        list.add(null);\n+        assertEquals(2,CollectionUtils.cardinality(null,list));\n+        {\n+            Map freq = CollectionUtils.getCardinalityMap(list);\n+            assertEquals(new Integer(2),freq.get(null));\n+        }\n+        list.add(\"B\");\n+        assertEquals(2,CollectionUtils.cardinality(null,list));\n+        {\n+            Map freq = CollectionUtils.getCardinalityMap(list);\n+            assertEquals(new Integer(2),freq.get(null));\n+        }\n+        list.add(null);\n+        assertEquals(3,CollectionUtils.cardinality(null,list));\n+        {\n+            Map freq = CollectionUtils.getCardinalityMap(list);\n+            assertEquals(new Integer(3),freq.get(null));\n+        }\n     }\n \n     public void testContainsAny() {\n     public void testIntersection() {\n         Collection col = CollectionUtils.intersection(_a,_b);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n-        assertTrue(null == freq.get(\"a\"));\n+        assertNull(freq.get(\"a\"));\n         assertEquals(new Integer(2),freq.get(\"b\"));\n         assertEquals(new Integer(3),freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n-        assertTrue(null == freq.get(\"e\"));\n+        assertNull(freq.get(\"e\"));\n \n         Collection col2 = CollectionUtils.intersection(_b,_a);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n-        assertTrue(null == freq2.get(\"a\"));\n+        assertNull(freq2.get(\"a\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n         assertEquals(new Integer(3),freq2.get(\"c\"));\n         assertEquals(new Integer(2),freq2.get(\"d\"));\n-        assertTrue(null == freq2.get(\"e\"));\n+        assertNull(freq2.get(\"e\"));\n     }\n \n     public void testDisjunction() {\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n         assertEquals(new Integer(2),freq.get(\"b\"));\n-        assertTrue(null == freq.get(\"c\"));\n+        assertNull(freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n         assertEquals(new Integer(1),freq.get(\"e\"));\n \n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertEquals(new Integer(1),freq2.get(\"a\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n-        assertTrue(null == freq2.get(\"c\"));\n+        assertNull(freq2.get(\"c\"));\n         assertEquals(new Integer(2),freq2.get(\"d\"));\n         assertEquals(new Integer(1),freq2.get(\"e\"));\n     }\n         Collection col = CollectionUtils.subtract(_a,_b);\n         Map freq = CollectionUtils.getCardinalityMap(col);\n         assertEquals(new Integer(1),freq.get(\"a\"));\n-        assertTrue(null == freq.get(\"b\"));\n-        assertTrue(null == freq.get(\"c\"));\n+        assertNull(freq.get(\"b\"));\n+        assertNull(freq.get(\"c\"));\n         assertEquals(new Integer(2),freq.get(\"d\"));\n-        assertTrue(null == freq.get(\"e\"));\n+        assertNull(freq.get(\"e\"));\n \n         Collection col2 = CollectionUtils.subtract(_b,_a);\n         Map freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertEquals(new Integer(1),freq2.get(\"e\"));\n-        assertTrue(null == freq2.get(\"d\"));\n-        assertTrue(null == freq2.get(\"c\"));\n+        assertNull(freq2.get(\"d\"));\n+        assertNull(freq2.get(\"c\"));\n         assertEquals(new Integer(2),freq2.get(\"b\"));\n-        assertTrue(null == freq2.get(\"a\"));\n+        assertNull(freq2.get(\"a\"));\n     }\n \n     public void testIsSubCollectionOfSelf() {", "timestamp": 1036180467, "metainfo": ""}