{"sha": "2d79319a8d4a3ea256ba1bb6364c1330518134a9", "log": "several additional tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestList.java\n+++ b/src/test/org/apache/commons/collections/TestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.2 2001/04/20 16:54:04 rwaldhoff Exp $\n- * $Revision: 1.2 $\n- * $Date: 2001/04/20 16:54:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.3 2001/04/26 00:06:00 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2001/04/26 00:06:00 $\n  *\n  * ====================================================================\n  *\n import junit.framework.*;\n import java.util.List;\n import java.util.Collection;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n \n /**\n  * Tests base {@link java.util.List} methods and contracts.\n  * test case (method) your {@link List} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestList.java,v 1.2 2001/04/20 16:54:04 rwaldhoff Exp $\n+ * @version $Id: TestList.java,v 1.3 2001/04/26 00:06:00 rwaldhoff Exp $\n  */\n public abstract class TestList extends TestCollection {\n     public TestList(String testName) {\n         return makeList();\n     }\n \n+    public void testListAddByIndexBoundsChecking() {\n+        List list = makeList();\n+\n+        try {\n+            list.add(Integer.MIN_VALUE,\"element\");\n+            fail(\"Shouldn't get here [Integer.MIN_VALUE]\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.add(-1,\"element\");\n+            fail(\"Shouldn't get here [-1]\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.add(1,\"element\");\n+            fail(\"Shouldn't get here [1]\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.add(Integer.MAX_VALUE,\"element\");\n+            fail(\"Shouldn't get here [Integer.MAX_VALUE]\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListAddByIndexBoundsChecking2() {\n+        List list = makeList();\n+        boolean added = tryToAdd(list,\"element\");\n+\n+        try {\n+            list.add(-1,\"element2\");\n+            fail(\"Shouldn't get here [-1]\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.add(2,\"element2\");\n+            fail(\"Shouldn't get here [2]\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        } catch(ClassCastException e) {\n+            // expected\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListAddByIndex() {\n+        List list = makeList();\n+        assertEquals(0,list.size());\n+        if(tryToAdd(list,0,\"element2\")) {\n+            assertEquals(1,list.size());\n+            if(tryToAdd(list,0,\"element0\")) {\n+                assert(Arrays.equals(new String[] { \"element0\", \"element2\" },list.toArray()));\n+                if(tryToAdd(list,1,\"element1\")) {\n+                    assert(Arrays.equals(new String[] { \"element0\", \"element1\", \"element2\" },list.toArray()));\n+                    if(tryToAdd(list,4,\"element3\")) {\n+                        assert(Arrays.equals(new String[] { \"element0\", \"element1\", \"element2\", \"element3\" },list.toArray()));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testListAdd() {\n+        List list = makeList();\n+        if(tryToAdd(list,\"1\")) {\n+            assert(list.contains(\"1\"));\n+            if(tryToAdd(list,\"2\")) {\n+                assert(list.contains(\"1\"));\n+                assert(list.contains(\"2\"));\n+                if(tryToAdd(list,\"3\")) {\n+                    assert(list.contains(\"1\"));\n+                    assert(list.contains(\"2\"));\n+                    assert(list.contains(\"3\"));\n+                    if(tryToAdd(list,\"4\")) {\n+                        assert(list.contains(\"1\"));\n+                        assert(list.contains(\"2\"));\n+                        assert(list.contains(\"3\"));\n+                        assert(list.contains(\"4\"));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testListEqualsSelf() {\n+        List list = makeList();\n+        assert(list.equals(list));\n+        tryToAdd(list,\"elt\");\n+        assert(list.equals(list));\n+        tryToAdd(list,\"elt2\");\n+        assert(list.equals(list));\n+    }\n+\n+    public void testListEqualsArrayList() {\n+        List list1 = makeList();\n+        List list2 = new ArrayList();\n+        assert(list1.equals(list2));\n+        assertEquals(list1.hashCode(),list2.hashCode());\n+        tryToAdd(list1,\"a\");\n+        assert(!list1.equals(list2));\n+        tryToAdd(list1,\"b\");\n+        tryToAdd(list1,\"c\");\n+        tryToAdd(list1,\"d\");\n+        tryToAdd(list1,\"b\");\n+\n+        Iterator it = list1.iterator();\n+        while(it.hasNext()) {\n+            list2.add(it.next());\n+        }\n+        assert(list1.equals(list2));\n+        assertEquals(list1.hashCode(),list2.hashCode());\n+    }\n+\n+    public void testListEquals() {\n+        List list1 = makeList();\n+        List list2 = makeList();\n+        assert(list1.equals(list2));\n+        if(tryToAdd(list1,\"a\") && tryToAdd(list2,\"a\")) {\n+            assert(list1.equals(list2));\n+            if(tryToAdd(list1,\"b\") && tryToAdd(list2,\"b\")) {\n+                assert(list1.equals(list2));\n+                if(tryToAdd(list1,\"c\") && tryToAdd(list2,\"c\")) {\n+                    assert(list1.equals(list2));\n+                    if(tryToAdd(list1,\"b\") && tryToAdd(list2,\"b\")) {\n+                        assert(list1.equals(list2));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testListGetByIndex() {\n+        List list = makeList();\n+        tryToAdd(list,\"a\");\n+        tryToAdd(list,\"b\");\n+        tryToAdd(list,\"c\");\n+        tryToAdd(list,\"d\");\n+        tryToAdd(list,\"e\");\n+        tryToAdd(list,\"f\");\n+        Object[] expected = list.toArray();\n+        for(int i=0;i<expected.length;i++) {\n+            assertEquals(expected[i],list.get(i));\n+        }\n+    }\n+\n+    public void testListGetByIndexBoundsChecking() {\n+        List list = makeList();\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"Shouldn't get here [Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"Shouldn't get here [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(0);\n+            fail(\"Shouldn't get here [0]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(1);\n+            fail(\"Shouldn't get here [1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"Shouldn't get here [Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListGetByIndexBoundsChecking2() {\n+        List list = makeList();\n+        boolean added = tryToAdd(list,\"a\");\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"Shouldn't get here [Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"Shouldn't get here [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(1);\n+            fail(\"Shouldn't get here [1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"Shouldn't get here [Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListIndexOf() {\n+        List list = makeList();\n+        tryToAdd(list,\"a\");\n+        tryToAdd(list,\"b\");\n+        tryToAdd(list,\"c\");\n+        tryToAdd(list,\"d\");\n+        tryToAdd(list,\"e\");\n+        tryToAdd(list,\"f\");\n+        Object[] expected = list.toArray();\n+        for(int i=0;i<expected.length;i++) {\n+            assertEquals(i,list.indexOf(expected[i]));\n+        }\n+        assertEquals(-1,list.indexOf(\"g\"));\n+    }\n+\n+    public void testListLastIndexOf1() {\n+        List list = makeList();\n+        tryToAdd(list,\"a\");\n+        tryToAdd(list,\"b\");\n+        tryToAdd(list,\"c\");\n+        tryToAdd(list,\"d\");\n+        tryToAdd(list,\"e\");\n+        tryToAdd(list,\"f\");\n+        Object[] expected = list.toArray();\n+        for(int i=0;i<expected.length;i++) {\n+            assertEquals(i,list.lastIndexOf(expected[i]));\n+        }\n+        assertEquals(-1,list.indexOf(\"g\"));\n+    }\n+\n+    public void testListLastIndexOf2() {\n+        List list = makeList();\n+        tryToAdd(list,\"a\");\n+        tryToAdd(list,\"b\");\n+        tryToAdd(list,\"c\");\n+        tryToAdd(list,\"d\");\n+        tryToAdd(list,\"e\");\n+        tryToAdd(list,\"f\");\n+        tryToAdd(list,\"a\");\n+        tryToAdd(list,\"b\");\n+        tryToAdd(list,\"c\");\n+        tryToAdd(list,\"d\");\n+        tryToAdd(list,\"e\");\n+        tryToAdd(list,\"f\");\n+        Object[] expected = list.toArray();\n+        int lastIndexOfA = -1;\n+        int lastIndexOfB = -1;\n+        int lastIndexOfC = -1;\n+        int lastIndexOfD = -1;\n+        int lastIndexOfE = -1;\n+        int lastIndexOfF = -1;\n+        int lastIndexOfG = -1;\n+        for(int i=0;i<expected.length;i++) {\n+            if(\"a\".equals(expected[i])) {\n+                lastIndexOfA = i;\n+            } else if(\"b\".equals(expected[i])) {\n+                lastIndexOfB = i;\n+            } else if(\"c\".equals(expected[i])) {\n+                lastIndexOfC = i;\n+            } else if(\"d\".equals(expected[i])) {\n+                lastIndexOfD = i;\n+            } else if(\"e\".equals(expected[i])) {\n+                lastIndexOfE = i;\n+            } else if(\"f\".equals(expected[i])) {\n+                lastIndexOfF = i;\n+            } else if(\"g\".equals(expected[i])) {\n+                lastIndexOfG = i;\n+            }\n+        }\n+        assertEquals(lastIndexOfA,list.lastIndexOf(\"a\"));\n+        assertEquals(lastIndexOfB,list.lastIndexOf(\"b\"));\n+        assertEquals(lastIndexOfC,list.lastIndexOf(\"c\"));\n+        assertEquals(lastIndexOfD,list.lastIndexOf(\"d\"));\n+        assertEquals(lastIndexOfE,list.lastIndexOf(\"e\"));\n+        assertEquals(lastIndexOfF,list.lastIndexOf(\"f\"));\n+        assertEquals(lastIndexOfG,list.lastIndexOf(\"g\"));\n+    }\n+\n     /*\n-\n-    // optional operation\n-    public void testListAddByIndex() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testListAdd() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testListAddAll() {\n-        // XXX finish me\n-    }\n-\n-    // optional operation\n-    public void testListClear() {\n-        // XXX finish me\n-    }\n-\n-    public void testListContains() {\n-        // XXX finish me\n-        // is this any different from Collection.contains?\n-    }\n-\n-    public void testListContainsAll() {\n-        // XXX finish me\n-        // is this any different from Collection.containsAll?\n-    }\n-\n-    public void testListEquals() {\n-        // XXX finish me\n-    }\n-\n-    public void testListGetByIndex() {\n-        // XXX finish me\n-    }\n-\n-    public void testListHashCode() {\n-        // XXX finish me\n-    }\n-\n-    public void testListIndexOf() {\n-        // XXX finish me\n-    }\n-\n-    public void testListIsEmpty() {\n-        // XXX finish me\n-        // is this any different from Collection.isEmpty?\n-    }\n-\n-    public void testListIterator() {\n-        // XXX finish me\n-        // is this any different from Collection.iterator?\n-    }\n-\n-    public void testListLastIndexOf() {\n-        // XXX finish me\n-    }\n \n     public void testListListIterator() {\n         // XXX finish me\n     }\n \n     // optional operation\n-    public void testListRemoveAll() {\n-        // XXX finish me\n-        // is this any different from Collection.removeAll?\n-    }\n-\n-    // optional operation\n-    public void testListRetainAll() {\n-        // XXX finish me\n-        // is this any different from Collection.retainAll?\n-    }\n-\n-    // optional operation\n     public void testListSet() {\n         // XXX finish me\n     }\n \n-    // size() same as Collection.size() ?\n-\n     public void testListSubList() {\n         // XXX finish me\n     }\n \n-    // toArray() same as Collection.toArray() ?\n-    // toArray(Object[]) same as Collection.toArray(Object[]) ?\n-\n     */\n+\n+    private boolean tryToAdd(List list, int index, Object obj) {\n+        try {\n+            list.add(index,obj);\n+            return true;\n+        } catch(UnsupportedOperationException e) {\n+            return false;\n+        } catch(ClassCastException e) {\n+            return false;\n+        } catch(IllegalArgumentException e) {\n+            return false;\n+        } catch(IndexOutOfBoundsException e) {\n+            return false;\n+        } catch(Throwable t) {\n+            t.printStackTrace();\n+            fail(\"List.add should only throw UnsupportedOperationException, ClassCastException, IllegalArgumentException, or IndexOutOfBoundsException. Found \" + t.toString());\n+            return false; // never get here, since fail throws exception\n+        }\n+    }\n+\n }", "timestamp": 988243560, "metainfo": ""}