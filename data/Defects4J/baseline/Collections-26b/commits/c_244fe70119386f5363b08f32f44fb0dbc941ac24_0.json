{"sha": "244fe70119386f5363b08f32f44fb0dbc941ac24", "log": "[COLLECTION-436] Added emptyIfNull methods to [Collection,Set,List,Map]Utils. Thanks to Arman Sharif for report and patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n      * undesirable. This implementation only implements Collection.\n      */\n     @SuppressWarnings(\"rawtypes\") // we deliberately use the raw type here\n-    public static final Collection EMPTY_COLLECTION = UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n+    public static final Collection EMPTY_COLLECTION =\n+        UnmodifiableCollection.unmodifiableCollection(new ArrayList<Object>());\n \n     /**\n      * <code>CollectionUtils</code> should not normally be instantiated.\n      *\n      * @see #EMPTY_COLLECTION\n      * @since 4.0\n+     * @param <T> the element type\n      * @return immutable empty collection\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Collection<T> emptyCollection() {\n         return EMPTY_COLLECTION;\n+    }\n+\n+    /**\n+     * Returns an immutable empty collection if the argument is <code>null</code>,\n+     * or the argument itself otherwise.\n+     * \n+     * @param <T> the element type\n+     * @param collection the collection, possibly <code>null</code>\n+     * @return an empty collection if the argument is <code>null</code>\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Collection<T> emptyIfNull(Collection<T> collection) {\n+        return collection == null ? EMPTY_COLLECTION : collection;\n     }\n \n     /**\n      * <p>\n      * The cardinality of each element <i>e</i> in the returned\n      * {@link Collection} will be equal to\n-     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>))</tt>.\n+     * <tt>max(cardinality(<i>e</i>,<i>a</i>),cardinality(<i>e</i>,<i>b</i>)) - min(cardinality(<i>e</i>,<i>a</i>),\n+     * cardinality(<i>e</i>,<i>b</i>))</tt>.\n      * <p>\n      * This is equivalent to\n      * <tt>{@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})</tt>\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * Returns an immutable empty list if the argument is <code>null</code>,\n+     * or the argument itself otherwise.\n+     * \n+     * @param <T> the element type\n+     * @param list the list, possibly <code>null</code>\n+     * @return an empty list if the argument is <code>null</code>\n+     */\n+    public static <T> List<T> emptyIfNull(List<T> list) {\n+        return list == null ? Collections.<T>emptyList() : list;\n+    }\n+    \n     /**\n      * Returns a new list containing all elements that are contained in\n      * both given lists.\n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n      * An empty unmodifiable sorted map.\n      * This is not provided in the JDK.\n      */\n-    public static final SortedMap<Object, Object> EMPTY_SORTED_MAP = UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());\n+    public static final SortedMap<Object, Object> EMPTY_SORTED_MAP =\n+            UnmodifiableSortedMap.unmodifiableSortedMap(new TreeMap<Object, Object>());\n \n     /**\n      * String used to indent the verbose and debug Map prints.\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * Returns an immutable empty map if the argument is <code>null</code>,\n+     * or the argument itself otherwise.\n+     * \n+     * @param <K> the key type\n+     * @param <V> the value type\n+     * @param map the map, possibly <code>null</code>\n+     * @return an empty map if the argument is <code>null</code>\n+     */\n+    public static <K,V> Map<K,V> emptyIfNull(Map<K,V> map) {\n+        return map == null ? Collections.<K,V>emptyMap() : map;\n+    }\n+    \n     /**\n      * Null-safe check if the specified map is empty.\n      * <p>\n--- a/src/main/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SetUtils.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * Returns an immutable empty set if the argument is <code>null</code>,\n+     * or the argument itself otherwise.\n+     * \n+     * @param <T> the element type\n+     * @param set the set, possibly <code>null</code>\n+     * @return an empty set if the argument is <code>null</code>\n+     */\n+    public static <T> Set<T> emptyIfNull(Set<T> set) {\n+        return set == null ? Collections.<T>emptySet() : set;\n+    }\n+    \n     /**\n      * Tests two sets for equality as per the <code>equals()</code> contract\n      * in {@link java.util.Set#equals(java.lang.Object)}.\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n         assertEquals(CollectionUtils.EMPTY_COLLECTION, coll);\n     }\n \n+    @Test\n+    public void emptyIfNull() {\n+        assertTrue(CollectionUtils.emptyIfNull(null).isEmpty());\n+        Collection<Object> collection = new ArrayList<Object>();\n+        assertSame(collection, CollectionUtils.emptyIfNull(collection));\n+    }\n+    \n     /**\n      * This test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.\n      * Specifically, it uses mocks to ensure that if the passed in\n--- a/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n         assertEquals(6, list.size());\n     }\n \n+    public void testEmptyIfNull() {\n+        assertTrue(ListUtils.emptyIfNull(null).isEmpty());\n+        \n+        List<Long> list = new ArrayList<Long>();\n+        assertSame(list, ListUtils.emptyIfNull(list));\n+    }\n+    \n     public void testEquals() {\n         Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n \n--- a/src/test/java/org/apache/commons/collections/MapUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/MapUtilsTest.java\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    public void testEmptyIfNull() {\n+        assertTrue(MapUtils.emptyIfNull(null).isEmpty());\n+        \n+        Map<Long, Long> map = new HashMap<Long, Long>();\n+        assertSame(map, MapUtils.emptyIfNull(map));\n+    }\n+    \n     public void testIsEmptyWithEmptyMap() {\n         Map<Object, Object> map = new HashMap<Object, Object>();\n         assertEquals(true, MapUtils.isEmpty(map));\n--- a/src/test/java/org/apache/commons/collections/SetUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/SetUtilsTest.java\n         }\n     }\n \n+    public void testEmptyIfNull() {\n+        assertTrue(SetUtils.emptyIfNull(null).isEmpty());\n+        \n+        Set<Long> set = new HashSet<Long>();\n+        assertSame(set, SetUtils.emptyIfNull(set));\n+    }\n+    \n     public void testEquals() {\n         Collection<String> data = Arrays.asList( new String[] { \"a\", \"b\", \"c\" });\n ", "timestamp": 1355435562, "metainfo": ""}