{"sha": "5409f76e35c6d654f7c73aa1b42638875da19ab4", "log": "Javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n      * This iterator does not support modification of its backing collection, and so will\n      * always throw an {@link UnsupportedOperationException} when this method is invoked.\n      *\n+     * @param o  the element to add\n      * @throws UnsupportedOperationException always thrown.\n      * @see java.util.ListIterator#set\n      */\n      * not support <code>add()</code> or <code>remove()</code>, <code>set()</code> may be\n      * called as often as desired.\n      *\n+     * @param o  the element to set\n+     * @throws IllegalStateException if {@link #next()} or {@link #previous()} has not been called\n+     * before {@link #set(Object)}\n      * @see java.util.ListIterator#set\n      */\n     public void set(Object o) {\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n      * <p>\n      * If the iterator is already unmodifiable it is returned directly.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable iterator\n      * @throws IllegalArgumentException if the iterator is null\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n     /**\n      * Decorates the specified iterator such that it cannot be modified.\n      *\n+     * @param <E>  the element type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable list iterator\n      * @throws IllegalArgumentException if the iterator is null\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n     /**\n      * Decorates the specified iterator such that it cannot be modified.\n      *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable map iterator\n      * @throws IllegalArgumentException if the iterator is null\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n     /**\n      * Decorates the specified iterator such that it cannot be modified.\n      *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      * @param iterator  the iterator to decorate\n      * @return a new unmodifiable ordered map iterator\n      * @throws IllegalArgumentException if the iterator is null\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n      * Subclasses can override this to create a different class.\n      *\n      * @param value  value of the new node\n+     * @return a new node containing the value\n      */\n     protected Node<E> createNode(E value) {\n         return new Node<E>(value);\n      * @param index  the index, starting from 0\n      * @param endMarkerAllowed  whether or not the end marker can be returned if\n      * startIndex is set to the list's size\n+     * @return the node at the given index\n      * @throws IndexOutOfBoundsException if the index is less than 0; equal to\n      * the size of the list and endMakerAllowed is false; or greater than the\n      * size of the list\n      * Creates an iterator for the sublist.\n      *\n      * @param subList  the sublist to get an iterator for\n+     * @return a new iterator on the given sublist\n      */\n     protected Iterator<E> createSubListIterator(LinkedSubList<E> subList) {\n         return createSubListListIterator(subList, 0);\n      *\n      * @param subList  the sublist to get an iterator for\n      * @param fromIndex  the index to start from, relative to the sublist\n+     * @return a new list iterator on the given sublist\n      */\n     protected ListIterator<E> createSubListListIterator(LinkedSubList<E> subList, int fromIndex) {\n         return new LinkedSubListIterator<E>(subList, fromIndex);\n          *\n          * @param parent  the parent list\n          * @param fromIndex  the index to start at\n+         * @throws IndexOutOfBoundsException if fromIndex is less than 0 or greater than the size of the list\n          */\n         protected LinkedListIterator(AbstractLinkedList<E> parent, int fromIndex) throws IndexOutOfBoundsException {\n             super();\n         /**\n          * Gets the last node returned.\n          *\n-         * @throws IllegalStateException If {@link #next()} or\n-         * {@link #previous()} haven't been called, or if the node has been removed\n-         * with {@link #remove()} or a new node added with {@link #add(Object)}.\n+         * @return the last node returned\n+         * @throws IllegalStateException If {@link #next()} or {@link #previous()} haven't been called,\n+         * or if the node has been removed with {@link #remove()} or a new node added with {@link #add(Object)}.\n          */\n         protected Node<E> getLastNodeReturned() throws IllegalStateException {\n             if (current == null) {", "timestamp": 1347051758, "metainfo": ""}