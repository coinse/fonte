{"sha": "7230a4e5eab8ea1054a1a1f09aa8a049fe932328", "log": "Renamed SimpleObjectFactory to Factory. PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/Factory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Factory.java,v 1.1 2002/08/13 01:19:00 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/13 01:19:00 $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Struts\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.*;\n+import java.lang.reflect.*;\n+\n+/**\n+ * Factory\n+ * A simple interface that describes the most basic means of having the ability\n+ * to create an object.\n+ *\n+ * @author Arron Bates\n+ * @version $Revision: 1.1 $\n+ * @since 2.1\n+ */\n+public interface Factory {\n+\n+  /** Simple method from which will come the new object from the factory.\n+   *\n+   * @return Object reference to the new object.\n+   */\n+  public Object createObject();\n+  \n+}\n--- a/src/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/java/org/apache/commons/collections/FactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.2 2002/08/13 00:46:25 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 00:46:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.3 2002/08/13 01:19:00 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/13 01:19:00 $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * objects.\n  *\n  * @author Arron Bates\n- * @version $Revision: 1.2 $\n+ * @version $Revision: 1.3 $\n  * @since 2.1\n  */\n public class FactoryUtils {\n   \n-  /** Creates a SimpleObjectFactory whith a class definition, which will be\n+  /** Creates a Factory whith a class definition, which will be\n    * used to create a new object from an empty constructor.\n    *\n    * @param inClass class definition which will be ued to create the new object\n    * @return the simple object factory.\n    */\n-  public static SimpleObjectFactory createStandardFactory(Class inClass) {\n+  public static Factory createStandardFactory(Class inClass) {\n     return new StandardFactory(inClass);\n   }\n   \n-  /** Creates a SimpleObjectFactory whith the class definition and argument\n+  /** Creates a Factory whith the class definition and argument\n    * details, which can create a new object from a constructor which requires\n    * arguments.\n    *\n    * @param argObjects the objects for the arguments themselves\n    * @return the simple object factory.\n    */\n-  public static SimpleObjectFactory createStandardFactory(Class inClass,\n+  public static Factory createStandardFactory(Class inClass,\n                                                           Class[] argTypes,\n                                                           Object[] argObjects) {\n     return new StandardFactory(inClass, argTypes, argObjects);\n   /* A simple factory, which takes the bare bones of object creation to do just\n    * that, create new objects.\n    */\n-  private static class StandardFactory implements SimpleObjectFactory {\n+  private static class StandardFactory implements Factory {\n     \n     /* builds the object factory. The class definition can creat objects which\n      * have no-argument constructors.\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.5 2002/08/13 00:26:51 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/13 00:26:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.6 2002/08/13 01:19:00 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/13 01:19:00 $\n  *\n  * ====================================================================\n  *\n     static class LazyList extends CollectionUtils.CollectionWrapper \n     implements List {\n \n-        final protected SimpleObjectFactory factory;\n-\n-        public LazyList(List list, SimpleObjectFactory factory) {\n+        final protected Factory factory;\n+\n+        public LazyList(List list, Factory factory) {\n             super(list);\n             this.factory = factory;\n         }\n      *  For instance:\n      *\n      *  <Pre>\n-     *  SimpleObjectFactory factory = new SimpleObjectFactory() {\n+     *  Factory factory = new Factory() {\n      *      public Object createObject() {\n      *          return new Date();\n      *      }\n      *  @param factory  the factory for creating new objects\n      *  @return a lazy list backed by the given list\n      */\n-    public static List lazyList(List list, SimpleObjectFactory factory) {\n+    public static List lazyList(List list, Factory factory) {\n         return new LazyList(list, factory);\n     }\n \n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.6 2002/08/13 00:26:51 pjack Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/13 00:26:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.7 2002/08/13 01:19:00 pjack Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/13 01:19:00 $\n  *\n  * ====================================================================\n  *\n \n     static class LazyMap extends ProxyMap {\n \n-        final protected SimpleObjectFactory factory;\n-\n-\n-        public LazyMap(Map map, SimpleObjectFactory factory) {\n+        final protected Factory factory;\n+\n+\n+        public LazyMap(Map map, Factory factory) {\n             super(map);\n             this.factory = factory;\n         }\n \n     static class LazySortedMap extends LazyMap implements SortedMap {\n \n-        public LazySortedMap(SortedMap m, SimpleObjectFactory factory) {\n+        public LazySortedMap(SortedMap m, Factory factory) {\n             super(m, factory);\n         }\n \n      *  For instance:\n      *\n      *  <Pre>\n-     *  SimpleObjectFactory factory = new SimpleObjectFactory() {\n+     *  Factory factory = new Factory() {\n      *      public Object createObject() {\n      *          return new Date();\n      *      }\n      *  @param factory  the factory for creating new objects\n      *  @return a lazy map backed by the given map\n      */\n-    public static Map lazyMap(Map map, SimpleObjectFactory factory) {\n+    public static Map lazyMap(Map map, Factory factory) {\n         return new LazyMap(map, factory);\n     }\n \n      *  For instance:\n      *\n      *  <Pre>\n-     *  SimpleObjectFactory factory = new SimpleObjectFactory() {\n+     *  Factory factory = new Factory() {\n      *      public Object createObject() {\n      *          return new Date();\n      *      }\n      *  @param factory  the factory for creating new objects\n      *  @return a lazy map backed by the given map\n      */\n-    public static SortedMap lazySortedMap(SortedMap map, SimpleObjectFactory factory) {\n+    public static SortedMap lazySortedMap(SortedMap map, Factory factory) {\n         return new LazySortedMap(map, factory);\n     }\n }\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.1 2002/08/13 00:26:52 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/13 00:26:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.2 2002/08/13 01:19:00 pjack Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/13 01:19:00 $\n  *\n  * ====================================================================\n  *\n \n \n     public void testLazyList() {\n-        List list = ListUtils.lazyList(new ArrayList(), new SimpleObjectFactory() {\n+        List list = ListUtils.lazyList(new ArrayList(), new Factory() {\n \n             private int index;\n ", "timestamp": 1029201540, "metainfo": ""}