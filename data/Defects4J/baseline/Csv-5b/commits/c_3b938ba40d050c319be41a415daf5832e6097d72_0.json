{"sha": "3b938ba40d050c319be41a415daf5832e6097d72", "log": "Let the line number count be a long.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n      */\n     private Token encapsulatedTokenLexer(final Token tkn) throws IOException {\n         // save current line number in case needed for IOE\n-        final int startLineNumber = getLineNumber();\n+        final long startLineNumber = getLineNumber();\n         int c;\n         while (true) {\n             c = in.read();\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      *\n      * @return current line number\n      */\n-    public int getLineNumber() {\n+    public long getLineNumber() {\n         return lexer.getLineNumber();\n     }\n \n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n     private int lastChar = UNDEFINED;\n \n     /** The line counter */\n-    private int lineCounter = 0;\n+    private long lineCounter;\n \n     /**\n      * Created extended buffered reader using default buffer-size\n      *\n      * @return the current-line-number (or -1)\n      */\n-    int getLineNumber() {\n+    long getLineNumber() {\n         return lineCounter;\n     }\n }\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n         return c == null ? DISABLED : c.charValue();\n     }\n \n-    int getLineNumber() {\n+    long getLineNumber() {\n         return in.getLineNumber();\n     }\n \n--- a/src/test/java/org/apache/commons/csv/CSVLexer1.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1.java\n      */\n     private Token encapsulatedTokenLexer(final Token tkn, int c) throws IOException {\n         // save current line\n-        final int startLineNumber = getLineNumber();\n+        final long startLineNumber = getLineNumber();\n         // ignore the given delimiter\n         // assert c == delimiter;\n         while (true) {\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n      */\n     private Token encapsulatedTokenLexer(final Token tkn) throws IOException {\n         // save current line\n-        final int startLineNumber = getLineNumber();\n+        final long startLineNumber = getLineNumber();\n         // ignore the given delimiter\n         // assert c == delimiter;\n         int c;\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n      */\n     private Token encapsulatedTokenLexer(final Token tkn) throws IOException {\n         // save current line\n-        final int startLineNumber = getLineNumber();\n+        final long startLineNumber = getLineNumber();\n         // ignore the given delimiter\n         // assert c == delimiter;\n         int c;", "timestamp": 1350148302, "metainfo": ""}