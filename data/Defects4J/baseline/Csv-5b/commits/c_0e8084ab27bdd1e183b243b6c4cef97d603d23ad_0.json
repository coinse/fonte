{"sha": "0e8084ab27bdd1e183b243b6c4cef97d603d23ad", "log": "Rename getRecord() to nextRecord()  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      * @throws IOException\n      *             on parse error or input read-failure\n      */\n-    CSVRecord getRecord() throws IOException {\n+    CSVRecord nextRecord() throws IOException {\n         CSVRecord result = new CSVRecord(null, headerMap, null, recordNumber + 1);\n         record.clear();\n         StringBuilder sb = null;\n     public List<CSVRecord> getRecords() throws IOException {\n         final List<CSVRecord> records = new ArrayList<CSVRecord>();\n         CSVRecord rec;\n-        while ((rec = getRecord()) != null) {\n+        while ((rec = nextRecord()) != null) {\n             records.add(rec);\n         }\n         return records;\n             String[] header = null;\n             if (format.getHeader().length == 0) {\n                 // read the header from the first line of the file\n-                final CSVRecord rec = getRecord();\n+                final CSVRecord rec = nextRecord();\n                 if (rec != null) {\n                     header = rec.values();\n                 }\n \n             private CSVRecord getNextRecord() {\n                 try {\n-                    return getRecord();\n+                    return nextRecord();\n                 } catch (final IOException e) {\n                     throw new RuntimeException(e);\n                 }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n     public void testGetLine() throws IOException {\n         final CSVParser parser = new CSVParser(new StringReader(CSVINPUT), CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));\n         for (final String[] re : RESULT) {\n-            assertArrayEquals(re, parser.getRecord().values());\n-        }\n-\n-        assertNull(parser.getRecord());\n+            assertArrayEquals(re, parser.nextRecord().values());\n+        }\n+\n+        assertNull(parser.nextRecord());\n     }\n \n     @Test\n     @Test\n     public void testEmptyFile() throws Exception {\n         final CSVParser parser = new CSVParser(\"\", CSVFormat.DEFAULT);\n-        assertNull(parser.getRecord());\n+        assertNull(parser.nextRecord());\n     }\n \n     @Test\n         CSVRecord record;\n         assertEquals(0, parser.getRecordNumber());\n         assertEquals(0, parser.getLineNumber());\n-        assertNotNull(record = parser.getRecord());\n+        assertNotNull(record = parser.nextRecord());\n         assertEquals(3, parser.getLineNumber());\n         assertEquals(1, record.getRecordNumber());\n         assertEquals(1, parser.getRecordNumber());\n-        assertNotNull(record = parser.getRecord());\n+        assertNotNull(record = parser.nextRecord());\n         assertEquals(6, parser.getLineNumber());\n         assertEquals(2, record.getRecordNumber());\n         assertEquals(2, parser.getRecordNumber());\n-        assertNotNull(record = parser.getRecord());\n+        assertNotNull(record = parser.nextRecord());\n         assertEquals(8, parser.getLineNumber());\n         assertEquals(3, record.getRecordNumber());\n         assertEquals(3, parser.getRecordNumber());\n-        assertNull(record = parser.getRecord());\n+        assertNull(record = parser.nextRecord());\n         assertEquals(8, parser.getLineNumber());\n         assertEquals(3, parser.getRecordNumber());\n     }\n         final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withLineSeparator(lineSeparator));\n         CSVRecord record;\n         assertEquals(0, parser.getRecordNumber());\n-        assertNotNull(record = parser.getRecord());\n+        assertNotNull(record = parser.nextRecord());\n         assertEquals(1, record.getRecordNumber());        \n         assertEquals(1, parser.getRecordNumber());\n-        assertNotNull(record = parser.getRecord());\n+        assertNotNull(record = parser.nextRecord());\n         assertEquals(2, record.getRecordNumber());        \n         assertEquals(2, parser.getRecordNumber());\n-        assertNotNull(record = parser.getRecord());\n+        assertNotNull(record = parser.nextRecord());\n         assertEquals(3, record.getRecordNumber());        \n         assertEquals(3, parser.getRecordNumber());\n-        assertNull(record = parser.getRecord());\n+        assertNull(record = parser.nextRecord());\n         assertEquals(3, parser.getRecordNumber());\n     }\n \n     private void validateLineNumbers(String lineSeparator) throws IOException {\n         final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withLineSeparator(lineSeparator));\n         assertEquals(0, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n+        assertNotNull(parser.nextRecord());\n         assertEquals(1, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n+        assertNotNull(parser.nextRecord());\n         assertEquals(2, parser.getLineNumber());\n-        assertNotNull(parser.getRecord());\n+        assertNotNull(parser.nextRecord());\n         // Still 2 because the last line is does not have EOL chars\n         assertEquals(2, parser.getLineNumber());\n-        assertNull(parser.getRecord());\n+        assertNull(parser.nextRecord());\n         // Still 2 because the last line is does not have EOL chars\n         assertEquals(2, parser.getLineNumber());\n     }", "timestamp": 1350148398, "metainfo": ""}