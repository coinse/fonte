{"sha": "70485e44f2411ee462db50ef78ed729a8674299d", "log": "Add CSVRecord#getInt(String) API and tests.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n      *             if the record is inconsistent\n      * @see #isConsistent()\n      */\n+    public int getInt(String name) {\n+        String s = this.get(name);\n+        return s != null ? Integer.parseInt(s) : 0;\n+    }\n+\n+    /**\n+     * Returns a value by name.\n+     *\n+     * @param name\n+     *            the name of the column to be retrieved.\n+     * @return the column value\n+     * @throws IllegalStateException\n+     *             if no header mapping was provided\n+     * @throws IllegalArgumentException\n+     *             if the record is inconsistent\n+     * @see #isConsistent()\n+     */\n     public long getLong(String name) {\n         String s = this.get(name);\n         return s != null ? Long.parseLong(s) : 0;\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordIntTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+import java.io.IOException;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CSVRecordIntTest {\n+\n+    private CSVRecord record;\n+\n+    /**\n+     * @return\n+     * @throws IOException\n+     */\n+    private CSVRecord createTestRecord() throws IOException {\n+        String csv = \"A, B, C, D, E\\n-1, 0, 1, \" + Integer.MAX_VALUE + \", \" + Integer.MIN_VALUE;\n+        CSVRecord record = CSVParser.parseString(csv, CSVFormat.DEFAULT.withHeader().withIgnoreSurroundingSpaces(true))\n+                .iterator().next();\n+        return record;\n+    }\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        this.record = createTestRecord();\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetIntegerByMissingString() {\n+        Assert.assertEquals(null, Integer.valueOf(record.getInt(\"ABSENT\")));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetIntegerByNullString() {\n+        Assert.assertEquals(null, Integer.valueOf(record.getInt(null)));\n+    }\n+\n+    @Test\n+    public void testGetIntegerByString() {\n+        Assert.assertEquals(-1, record.getInt(\"A\"));\n+        Assert.assertEquals(0, record.getInt(\"B\"));\n+        Assert.assertEquals(1, record.getInt(\"C\"));\n+        Assert.assertEquals(Integer.MAX_VALUE, record.getInt(\"D\"));\n+        Assert.assertEquals(Integer.MIN_VALUE, record.getInt(\"E\"));\n+    }\n+\n+}", "timestamp": 1375394266, "metainfo": ""}