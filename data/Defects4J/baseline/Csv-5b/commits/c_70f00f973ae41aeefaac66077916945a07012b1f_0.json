{"sha": "70f00f973ae41aeefaac66077916945a07012b1f", "log": "Fix readLine() so can still detect start of line next time round Also fix broken test: format was set to ignore empty lines, yet it checked for one  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n         String line = super.readLine();\n \n         if (line != null) {\n-            if (line.length() > 0) {\n-                lastChar = line.charAt(line.length() - 1);\n-            }\n+            lastChar = '\\n'; // needed for detecting start of line\n             lineCounter++;\n         } else {\n             lastChar = END_OF_STREAM;\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n     @Test\n     public void testNextToken2() throws IOException {\n         final String code = \n-                \"1,2,3,\\n\"+\n-                \"a,b x,c#no-comment\\n\"+\n-                \"#foo\\n\"+\n-                \"\\n\"+\n-                \"d,e,#no-comment\\n\"+\n-                \"# Final comment\\n\";\n+                \"1,2,3,\\n\"+                // 1\n+                \"a,b x,c#no-comment\\n\"+    // 2\n+                \"#foo\\n\"+                  // 3\n+                \"\\n\"+                      // 4\n+                \"d,e,#no-comment\\n\"+       // 5\n+                \"# penultimate comment\\n\"+ // 6\n+                \"# Final comment\\n\";       // 7\n         CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#');\n+        assertTrue(\"Should ignore empty lines\", format.isEmptyLinesIgnored());\n         \n         Lexer parser = getLexer(code, format);\n \n         assertTokenEquals(TOKEN, \"1\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"2\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"3\", parser.nextToken(new Token()));\n-        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));\n+        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));             // 1\n         assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"b x\", parser.nextToken(new Token()));\n-        assertTokenEquals(EORECORD, \"c#no-comment\", parser.nextToken(new Token()));\n-        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));\n-        assertTokenEquals(EORECORD, \"\", parser.nextToken(new Token()));\n+        assertTokenEquals(EORECORD, \"c#no-comment\", parser.nextToken(new Token())); // 2\n+        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 3\n+        // 4 empty line, ignored                                                    // 4\n         assertTokenEquals(TOKEN, \"d\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"e\", parser.nextToken(new Token()));\n-        assertTokenEquals(EORECORD, \"#no-comment\", parser.nextToken(new Token()));\n-        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));\n+        assertTokenEquals(EORECORD, \"#no-comment\", parser.nextToken(new Token()));  // 5\n+        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 6\n+        assertTokenEquals(COMMENT, \"\", parser.nextToken(new Token()));              // 7\n         assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));\n         assertTokenEquals(EOF, \"\", parser.nextToken(new Token()));\n ", "timestamp": 1332979355, "metainfo": ""}