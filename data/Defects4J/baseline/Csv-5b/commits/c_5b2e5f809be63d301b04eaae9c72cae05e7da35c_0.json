{"sha": "5b2e5f809be63d301b04eaae9c72cae05e7da35c", "log": "Simplify code so delimiter only printed in one place  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n     private void print(final Object object, final CharSequence value,\n             final int offset, final int len) throws IOException {\n+        if (!newRecord) {\n+            out.append(format.getDelimiter());\n+        }\n         if (format.isQuoting()) {\n             // the original object is needed so can check for Number\n             printAndQuote(object, value, offset, len);\n         } else if (format.isEscaping()) {\n             printAndEscape(value, offset, len);\n         } else {\n-            printDelimiter();\n             out.append(value, offset, offset + len);\n         }\n-    }\n-\n-    void printDelimiter() throws IOException {\n-        if (newRecord) {\n-            newRecord = false;\n-        } else {\n-            out.append(format.getDelimiter());\n-        }\n+        newRecord = false;        \n     }\n \n     /*\n      * Note: must only be called if escaping is enabled, otherwise will generate NPE\n      */\n-    void printAndEscape(final CharSequence value, final int offset, final int len) throws IOException {\n+    private void printAndEscape(final CharSequence value, final int offset, final int len) throws IOException {\n         int start = offset;\n         int pos = offset;\n         final int end = offset + len;\n-\n-        printDelimiter();\n \n         final char delim = format.getDelimiter();\n         final char escape = format.getEscape().charValue();\n      * Note: must only be called if quoting is enabled, otherwise will generate NPE\n      */\n     // the original object is needed so can check for Number\n-    void printAndQuote(final Object object, final CharSequence value,\n+    private void printAndQuote(final Object object, final CharSequence value,\n             final int offset, final int len) throws IOException {\n-        final boolean first = newRecord; // is this the first value on this line?\n         boolean quote = false;\n         int start = offset;\n         int pos = offset;\n         final int end = offset + len;\n-\n-        printDelimiter();\n \n         final char delimChar = format.getDelimiter();\n         final char quoteChar = format.getQuoteChar().charValue();\n                 // on the line, as it may be the only thing on the\n                 // line. If it were not quoted in that case,\n                 // an empty line has no tokens.\n-                if (first) {\n+                if (newRecord) {\n                     quote = true;\n                 }\n             } else {\n                 char c = value.charAt(pos);\n \n                 // Hmmm, where did this rule come from?\n-                if (first && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n+                if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) {\n                     quote = true;\n                     // } else if (c == ' ' || c == '\\f' || c == '\\t') {\n                 } else if (c <= COMMENT) {", "timestamp": 1367917751, "metainfo": ""}