{"sha": "1b0ccbe4c7d5a183913063429198e8c51bb768f9", "log": "Applying checkstyle changes  ", "commit": "\n--- a/src/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/java/org/apache/commons/csv/CSVParser.java\n  */\n package org.apache.commons.csv;\n \n-import java.io.*;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.InputStreamReader;\n+import java.io.InputStream;\n import java.util.ArrayList;\n \n \n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n             // unreachable: break;\n         }\n-        if (reusableToken.type != TT_TOKEN) break;\n+        if (reusableToken.type != TT_TOKEN) {\n+            break;\n+        }\n     }\n     if (!record.isEmpty()) {\n       ret = (String[]) record.toArray(new String[record.size()]);\n--- a/src/java/org/apache/commons/csv/CSVStrategy.java\n+++ b/src/java/org/apache/commons/csv/CSVStrategy.java\n                                                                  true, false, true);\n     public static CSVStrategy EXCEL_STRATEGY   = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, false, \n                                                                  false, false, false);\n-    public static CSVStrategy TDF_STRATEGY     = new CSVStrategy('\t', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, \n+    public static CSVStrategy TDF_STRATEGY     = new CSVStrategy('\\t', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, \n                                                                  true, false, true);\n \n \n--- a/src/java/org/apache/commons/csv/CharBuffer.java\n+++ b/src/java/org/apache/commons/csv/CharBuffer.java\n  * @author Ortwin Gl\ufffdck\n  */\n public class CharBuffer {\n+\n     private char[] c;\n+\n     /**\n      * Actually used number of characters in the array. \n      * It is also the index at which\n      * of <code>length</code> characters.\n      */\n     public CharBuffer(final int length) {\n-        if (length == 0) throw new IllegalArgumentException(\"Can't create an empty CharBuffer\");\n+        if (length == 0) {\n+            throw new IllegalArgumentException(\"Can't create an empty CharBuffer\");\n+        }\n         this.c = new char[length];\n     }\n     \n      * @param cb the CharBuffer to append or null\n      */\n     public void append(final CharBuffer cb) {\n-        if (cb == null) return;\n+        if (cb == null) {\n+            return;\n+        }\n         provideCapacity(length + cb.length);\n         System.arraycopy(cb.c, 0, c, length, cb.length);\n         length += cb.length;\n      * @param s the String to append or null\n      */\n     public void append(final String s) {\n-        if (s == null) return;\n+        if (s == null) {\n+            return;\n+        }\n         append(s.toCharArray());\n     }\n     \n      * @param sb the StringBuffer to append or null\n      */\n     public void append(final StringBuffer sb) {\n-        if (sb == null) return;\n+        if (sb == null) {\n+            return;\n+        }\n         provideCapacity(length + sb.length());\n         sb.getChars(0, sb.length(), c, length);\n         length += sb.length();\n      * @param data the char[] to append or null\n      */\n     public void append(final char[] data) {\n-        if (data == null) return;\n+        if (data == null) {\n+            return;\n+        }\n         provideCapacity(length + data.length);\n         System.arraycopy(data, 0, c, length, data.length);\n         length += data.length;\n      * This method involves copying the data once!\n      */\n     public void shrink() {\n-        if (c.length == length) return;\n+        if (c.length == length) {\n+            return;\n+        }\n         char[] newc = new char[length];\n         System.arraycopy(c, 0, newc, 0, length);\n         c = newc;\n      * @return\n      */\n     public char[] getCharacters() {\n-        if (c.length == length) return c;\n+        if (c.length == length) {\n+            return c;\n+        }\n         char[] chars = new char[length];\n         System.arraycopy(c, 0, chars, 0, length);\n         return chars;\n      * @param capacity\n      */\n     public void provideCapacity(final int capacity) {\n-        if (c.length >= capacity) return;\n+        if (c.length >= capacity) {\n+            return;\n+        }\n         int newcapacity = ((capacity*3)>>1) + 1;\n         char[] newc = new char[newcapacity];\n         System.arraycopy(c, 0, newc, 0, length);", "timestamp": 1204015628, "metainfo": ""}