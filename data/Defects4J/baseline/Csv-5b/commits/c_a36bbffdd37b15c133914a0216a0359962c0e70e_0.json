{"sha": "a36bbffdd37b15c133914a0216a0359962c0e70e", "log": "Remove org.apache.commons.csv.CSVParser.parseString(String).  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n             throw new IllegalArgumentException(\"System resource cannot be found: \" + resource);\n         }\n         return parseURL(url, charset, format);\n-    }\n-\n-    /**\n-     * Creates a parser for the given {@link String} using the default format {@link CSVFormat#DEFAULT}.\n-     *\n-     * @param string\n-     *            a CSV string\n-     * @return a new parser\n-     * @throws IOException\n-     *             If an I/O error occurs\n-     */\n-    public static CSVParser parseString(String string) throws IOException {\n-        return parseString(string, CSVFormat.DEFAULT);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n                 {\"world\", \"\"}\n         };\n         for (final String code : codes) {\n-            final CSVParser parser = CSVParser.parseString(code);\n+            final CSVParser parser = CSVParser.parseString(code, CSVFormat.DEFAULT);\n             final List<CSVRecord> records = parser.getRecords();\n             assertEquals(res.length, records.size());\n             assertTrue(records.size() > 0);\n                 {\"a\\\\\", \"b\"},  // a backslash must be returnd\n                 {\"a\\\\\\\\,b\"}    // backslash in quotes only escapes a delimiter (\",\")\n         };\n-        final CSVParser parser = CSVParser.parseString(code);\n+        final CSVParser parser = CSVParser.parseString(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(res.length, records.size());\n         assertTrue(records.size() > 0);\n     @Test\n     public void testCarriageReturnEndings() throws IOException {\n         final String code = \"foo\\rbaar,\\rhello,world\\r,kanu\";\n-        final CSVParser parser = CSVParser.parseString(code);\n+        final CSVParser parser = CSVParser.parseString(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(4, records.size());\n     }\n     @Test\n     public void testLineFeedEndings() throws IOException {\n         final String code = \"foo\\nbaar,\\nhello,world\\n,kanu\";\n-        final CSVParser parser = CSVParser.parseString(code);\n+        final CSVParser parser = CSVParser.parseString(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(4, records.size());\n     }\n         final String code = \"\\nfoo,baar\\n\\r\\n,\\n\\n,world\\r\\n\\n\";\n         //String code = \"world\\r\\n\\n\";\n         //String code = \"foo;baar\\r\\n\\r\\nhello;\\r\\n\\r\\nworld;\\r\\n\";\n-        final CSVParser parser = CSVParser.parseString(code);\n+        final CSVParser parser = CSVParser.parseString(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(3, records.size());\n     }", "timestamp": 1375980720, "metainfo": ""}