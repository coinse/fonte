{
	"Gson-1b": [
		{
			"class_file": "com/google/gson/TypeInfoFactory.java",
			"method_name": "getActualType",
			"arg_types": "Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/lang/Class;",
			"type": "method",
			"signature": "com.google.gson.TypeInfoFactory.getActualType(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.Class<?>)",
			"begin_line": 58,
			"end_line": 107,
			"comment": ""
		}
	],
	"Gson-2b": [
		{
			"class_file": "com/google/gson/internal/bind/TypeAdapters.java",
			"method_name": "newTypeHierarchyFactory",
			"arg_types": "Ljava/lang/Class;Lcom/google/gson/TypeAdapter;",
			"type": "method",
			"signature": "com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(java.lang.Class<T1>, com.google.gson.TypeAdapter<T1>)",
			"begin_line": 824,
			"end_line": 840,
			"comment": "\n   * Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\n   * that the deserialized type matches the type requested.\n   "
		},
		{
			"class_file": "com/google/gson/internal/bind/TypeAdapters.java",
			"method_name": "create",
			"arg_types": "Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;",
			"type": "method",
			"signature": "com.google.gson.internal.bind.TypeAdapters.Anonymous-498a6536-7990-4aa1-a1e5-eaf302166047.create(com.google.gson.Gson, com.google.gson.reflect.TypeToken<T2>)",
			"begin_line": 827,
			"end_line": 835,
			"comment": ""
		}
	],
	"Gson-3b": [
		{
			"class_file": "com/google/gson/internal/ConstructorConstructor.java",
			"method_name": "newDefaultImplementationConstructor",
			"arg_types": "Ljava/lang/reflect/Type;Ljava/lang/Class;",
			"type": "method",
			"signature": "com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(java.lang.reflect.Type, java.lang.Class<? super T>)",
			"begin_line": 127,
			"end_line": 198,
			"comment": "\n   * Constructors for common interface types like Map and List and their\n   * subtypes.\n   "
		}
	],
	"Gson-4b": [
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "value",
			"arg_types": "Ljava/lang/String;",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.value(java.lang.String)",
			"begin_line": 413,
			"end_line": 421,
			"comment": "\n   * Encodes {@code value}.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "value",
			"arg_types": "D",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.value(double)",
			"begin_line": 478,
			"end_line": 486,
			"comment": "\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "value",
			"arg_types": "Z",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.value(boolean)",
			"begin_line": 464,
			"end_line": 469,
			"comment": "\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "beforeValue",
			"arg_types": "Z",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.beforeValue(boolean)",
			"begin_line": 612,
			"end_line": 647,
			"comment": "\n   * Inserts any necessary separators and whitespace before a literal value,\n   * inline array, or inline object. Also adjusts the stack to expect either a\n   * closing bracket or another element.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "value",
			"arg_types": "J",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.value(long)",
			"begin_line": 493,
			"end_line": 498,
			"comment": "\n   * Encodes {@code value}.\n   *\n   * @return this writer.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "value",
			"arg_types": "Ljava/lang/Number;",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.value(java.lang.Number)",
			"begin_line": 507,
			"end_line": 521,
			"comment": "\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "nullValue",
			"arg_types": "",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.nullValue()",
			"begin_line": 445,
			"end_line": 457,
			"comment": "\n   * Encodes {@code null}.\n   *\n   * @return this writer.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "open",
			"arg_types": "ILjava/lang/String;",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.open(int, java.lang.String)",
			"begin_line": 324,
			"end_line": 329,
			"comment": "\n   * Enters a new scope by appending any necessary whitespace and the given\n   * bracket.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonReader.java",
			"method_name": "doPeek",
			"arg_types": "",
			"type": "method",
			"signature": "com.google.gson.stream.JsonReader.doPeek()",
			"begin_line": 465,
			"end_line": 605,
			"comment": ""
		},
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "jsonValue",
			"arg_types": "Ljava/lang/String;",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.jsonValue(java.lang.String)",
			"begin_line": 430,
			"end_line": 438,
			"comment": "\n   * Writes {@code value} directly to the writer without quoting or\n   * escaping.\n   *\n   * @param value the literal string value, or null to encode a null literal.\n   * @return this writer.\n   "
		}
	],
	"Gson-5b": [
		{
			"class_file": "com/google/gson/internal/bind/util/ISO8601Utils.java",
			"method_name": "parse",
			"arg_types": "Ljava/lang/String;Ljava/text/ParsePosition;",
			"type": "method",
			"signature": "com.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition)",
			"begin_line": 123,
			"end_line": 276,
			"comment": "\n     * Parse a date from ISO-8601 formatted string. It expects a format\n     * [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:mm]]]\n     * \n     * @param date ISO string to parse in the appropriate format.\n     * @param pos The position to start parsing from, updated to where parsing stopped.\n     * @return the parsed date\n     * @throws ParseException if the date is not in the appropriate format\n     "
		}
	],
	"Gson-6b": [
		{
			"class_file": "com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
			"method_name": "getTypeAdapter",
			"arg_types": "Lcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken;Lcom/google/gson/annotations/JsonAdapter;",
			"type": "method",
			"signature": "com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, com.google.gson.Gson, com.google.gson.reflect.TypeToken<?>, com.google.gson.annotations.JsonAdapter)",
			"begin_line": 50,
			"end_line": 69,
			"comment": ""
		}
	],
	"Gson-7b": [
		{
			"class_file": "com/google/gson/stream/JsonReader.java",
			"method_name": "nextInt",
			"arg_types": "",
			"type": "method",
			"signature": "com.google.gson.stream.JsonReader.nextInt()",
			"begin_line": 1161,
			"end_line": 1208,
			"comment": "\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER int} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as an int. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code int}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as an int.\n   "
		},
		{
			"class_file": "com/google/gson/stream/JsonReader.java",
			"method_name": "nextLong",
			"arg_types": "",
			"type": "method",
			"signature": "com.google.gson.stream.JsonReader.nextLong()",
			"begin_line": 939,
			"end_line": 980,
			"comment": "\n   * Returns the {@link com.google.gson.stream.JsonToken#NUMBER long} value of the next token,\n   * consuming it. If the next token is a string, this method will attempt to\n   * parse it as a long. If the next token's numeric value cannot be exactly\n   * represented by a Java {@code long}, this method throws.\n   *\n   * @throws IllegalStateException if the next token is not a literal value.\n   * @throws NumberFormatException if the next literal value cannot be parsed\n   *     as a number, or exactly represented as a long.\n   "
		}
	],
	"Gson-8b": [
		{
			"class_file": "com/google/gson/internal/UnsafeAllocator.java",
			"method_name": "create",
			"arg_types": "",
			"type": "method",
			"signature": "com.google.gson.internal.UnsafeAllocator.create()",
			"begin_line": 33,
			"end_line": 103,
			"comment": ""
		},
		{
			"class_file": "com/google/gson/internal/UnsafeAllocator.java",
			"method_name": "newInstance",
			"arg_types": "Ljava/lang/Class;",
			"type": "method",
			"signature": "com.google.gson.internal.UnsafeAllocator.Anonymous-0cfad445-9909-4db7-ac37-0a07612904f1.newInstance(java.lang.Class<T>)",
			"begin_line": 87,
			"end_line": 91,
			"comment": ""
		},
		{
			"class_file": "com/google/gson/internal/UnsafeAllocator.java",
			"method_name": "newInstance",
			"arg_types": "Ljava/lang/Class;",
			"type": "method",
			"signature": "com.google.gson.internal.UnsafeAllocator.Anonymous-98c2ec7e-e960-45cd-9c75-5eab3025d78b.newInstance(java.lang.Class<T>)",
			"begin_line": 45,
			"end_line": 49,
			"comment": ""
		},
		{
			"class_file": "com/google/gson/internal/UnsafeAllocator.java",
			"method_name": "newInstance",
			"arg_types": "Ljava/lang/Class;",
			"type": "method",
			"signature": "com.google.gson.internal.UnsafeAllocator.Anonymous-9673fa58-edfd-4fd6-b1b0-377b80b3a93a.newInstance(java.lang.Class<T>)",
			"begin_line": 68,
			"end_line": 72,
			"comment": ""
		}
	],
	"Gson-9b": [
		{
			"class_file": "com/google/gson/internal/bind/TypeAdapters.java",
			"method_name": "write",
			"arg_types": "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Boolean;",
			"type": "method",
			"signature": "com.google.gson.internal.bind.TypeAdapters.Anonymous-5c927653-d1df-4cb0-b3a7-cb8547ac0664.write(com.google.gson.stream.JsonWriter, java.lang.Boolean)",
			"begin_line": 163,
			"end_line": 170,
			"comment": ""
		},
		{
			"class_file": "com/google/gson/internal/bind/TypeAdapters.java",
			"method_name": "<clinit>",
			"arg_types": "",
			"type": "field",
			"varNames": [
				"BOOLEAN"
			],
			"begin_line": 151,
			"end_line": 171,
			"comment": ""
		}
	],
	"Gson-10b": [
		{
			"class_file": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
			"method_name": "write",
			"arg_types": "Lcom/google/gson/stream/JsonWriter;Ljava/lang/Object;",
			"type": "method",
			"signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Anonymous-a1426cff-0189-4fb4-85bd-dbe765623db4.write(com.google.gson.stream.JsonWriter, java.lang.Object)",
			"begin_line": 118,
			"end_line": 125,
			"comment": ""
		},
		{
			"class_file": "com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
			"method_name": "createBoundField",
			"arg_types": "Lcom/google/gson/Gson;Ljava/lang/reflect/Field;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken;ZZ",
			"type": "method",
			"signature": "com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(com.google.gson.Gson, java.lang.reflect.Field, java.lang.String, com.google.gson.reflect.TypeToken<?>, boolean, boolean)",
			"begin_line": 103,
			"end_line": 139,
			"comment": ""
		}
	],
	"Gson-11b": [
		{
			"class_file": "com/google/gson/internal/bind/TypeAdapters.java",
			"method_name": "<clinit>",
			"arg_types": "",
			"type": "field",
			"varNames": [
				"NUMBER"
			],
			"begin_line": 362,
			"end_line": 380,
			"comment": ""
		},
		{
			"class_file": "com/google/gson/internal/bind/TypeAdapters.java",
			"method_name": "read",
			"arg_types": "Lcom/google/gson/stream/JsonReader;",
			"type": "method",
			"signature": "com.google.gson.internal.bind.TypeAdapters.Anonymous-7b67261b-1001-4e98-a0d9-b6317b33ce6a.read(com.google.gson.stream.JsonReader)",
			"begin_line": 363,
			"end_line": 375,
			"comment": ""
		}
	],
	"Gson-12b": [
		{
			"class_file": "com/google/gson/internal/bind/JsonTreeReader.java",
			"method_name": "skipValue",
			"arg_types": "",
			"type": "method",
			"signature": "com.google.gson.internal.bind.JsonTreeReader.skipValue()",
			"begin_line": 256,
			"end_line": 265,
			"comment": ""
		}
	],
	"Gson-13b": [
		{
			"class_file": "com/google/gson/stream/JsonReader.java",
			"method_name": "peekNumber",
			"arg_types": "",
			"type": "method",
			"signature": "com.google.gson.stream.JsonReader.peekNumber()",
			"begin_line": 641,
			"end_line": 742,
			"comment": ""
		}
	],
	"Gson-14b": [
		{
			"class_file": "com/google/gson/internal/$Gson$Types.java",
			"method_name": "supertypeOf",
			"arg_types": null,
			"type": "method",
			"signature": "com.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type)",
			"begin_line": 88,
			"end_line": 92,
			"comment": "\n   * Returns a type that represents an unknown supertype of {@code bound}. For\n   * example, if {@code bound} is {@code String.class}, this returns {@code ?\n   * super String}.\n   "
		},
		{
			"class_file": "com/google/gson/internal/$Gson$Types.java",
			"method_name": "subtypeOf",
			"arg_types": null,
			"type": "method",
			"signature": "com.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type)",
			"begin_line": 77,
			"end_line": 81,
			"comment": "\n   * Returns a type that represents an unknown type that extends {@code bound}.\n   * For example, if {@code bound} is {@code CharSequence.class}, this returns\n   * {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},\n   * this returns {@code ?}, which is shorthand for {@code ? extends Object}.\n   "
		}
	],
	"Gson-15b": [
		{
			"class_file": "com/google/gson/stream/JsonWriter.java",
			"method_name": "value",
			"arg_types": "D",
			"type": "method",
			"signature": "com.google.gson.stream.JsonWriter.value(double)",
			"begin_line": 493,
			"end_line": 501,
			"comment": "\n   * Encodes {@code value}.\n   *\n   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n   *     {@link Double#isInfinite() infinities}.\n   * @return this writer.\n   "
		}
	],
	"Gson-16b": [
		{
			"class_file": "com/google/gson/internal/$Gson$Types.java",
			"method_name": "resolve",
			"arg_types": null,
			"type": "method",
			"signature": "com.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type, java.util.Collection<java.lang.reflect.TypeVariable>)",
			"begin_line": 336,
			"end_line": 408,
			"comment": ""
		}
	],
	"Gson-17b": [
		{
			"class_file": "com/google/gson/DefaultDateTypeAdapter.java",
			"method_name": "read",
			"arg_types": "Lcom/google/gson/stream/JsonReader;",
			"type": "method",
			"signature": "com.google.gson.DefaultDateTypeAdapter.read(com.google.gson.stream.JsonReader)",
			"begin_line": 97,
			"end_line": 113,
			"comment": ""
		}
	],
	"Gson-18b": [
		{
			"class_file": "com/google/gson/internal/$Gson$Types.java",
			"method_name": "getSupertype",
			"arg_types": null,
			"type": "method",
			"signature": "com.google.gson.internal.$Gson$Types.getSupertype(java.lang.reflect.Type, java.lang.Class<?>, java.lang.Class<?>)",
			"begin_line": 277,
			"end_line": 282,
			"comment": "\n   * Returns the generic form of {@code supertype}. For example, if this is {@code\n   * ArrayList<String>}, this returns {@code Iterable<String>} given the input {@code\n   * Iterable.class}.\n   *\n   * @param supertype a superclass of, or interface implemented by, this.\n   "
		}
	]
}