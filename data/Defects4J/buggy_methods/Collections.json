{
	"Collections-25b": [
		{
			"class_file": "org/apache/commons/collections4/IteratorUtils.java",
			"method_name": "collatedIterator",
			"arg_types": "Ljava/util/Comparator;[Ljava/util/Iterator;",
			"type": "method",
			"signature": "org.apache.commons.collections4.IteratorUtils.collatedIterator(java.util.Comparator<? super E>, java.util.Iterator<? extends E>...)",
			"begin_line": 624,
			"end_line": 627,
			"comment": "\n     * Gets an iterator that provides an ordered iteration over the elements\n     * contained in an array of {@link Iterator}s.\n     * <p>\n     * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n     * the {@link Iterator#next()} method will return the lesser of\n     * <code>A.next()</code> and <code>B.next()</code> and so on.\n     * <p>\n     * The comparator is optional. If null is specified then natural order is used.\n     *\n     * @param <E>  the element type\n     * @param comparator  the comparator to use, may be null for natural order\n     * @param iterators  the iterators to use, not null or empty or contain nulls\n     * @return a combination iterator over the iterators\n     * @throws NullPointerException if iterators array is null or contains a null value\n     "
		},
		{
			"class_file": "org/apache/commons/collections4/IteratorUtils.java",
			"method_name": "collatedIterator",
			"arg_types": "Ljava/util/Comparator;Ljava/util/Collection;",
			"type": "method",
			"signature": "org.apache.commons.collections4.IteratorUtils.collatedIterator(java.util.Comparator<? super E>, java.util.Collection<java.util.Iterator<? extends E>>)",
			"begin_line": 646,
			"end_line": 649,
			"comment": "\n     * Gets an iterator that provides an ordered iteration over the elements\n     * contained in a collection of {@link Iterator}s.\n     * <p>\n     * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n     * the {@link Iterator#next()} method will return the lesser of\n     * <code>A.next()</code> and <code>B.next()</code> and so on.\n     * <p>\n     * The comparator is optional. If null is specified then natural order is used.\n     *\n     * @param <E>  the element type\n     * @param comparator  the comparator to use, may be null for natural order\n     * @param iterators  the iterators to use, not null or empty or contain nulls\n     * @return a combination iterator over the iterators\n     * @throws NullPointerException if iterators collection is null or contains a null\n     * @throws ClassCastException if the iterators collection contains the wrong object type\n     "
		},
		{
			"class_file": "org/apache/commons/collections4/IteratorUtils.java",
			"method_name": "collatedIterator",
			"arg_types": "Ljava/util/Comparator;Ljava/util/Iterator;Ljava/util/Iterator;",
			"type": "method",
			"signature": "org.apache.commons.collections4.IteratorUtils.collatedIterator(java.util.Comparator<? super E>, java.util.Iterator<? extends E>, java.util.Iterator<? extends E>)",
			"begin_line": 602,
			"end_line": 606,
			"comment": "\n     * Gets an iterator that provides an ordered iteration over the elements\n     * contained in a collection of ordered {@link Iterator}s.\n     * <p>\n     * Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n     * the {@link Iterator#next()} method will return the lesser of\n     * <code>A.next()</code> and <code>B.next()</code>.\n     * <p>\n     * The comparator is optional. If null is specified then natural order is used.\n     *\n     * @param <E>  the element type\n     * @param comparator  the comparator to use, may be null for natural order\n     * @param iterator1  the first iterators to use, not null\n     * @param iterator2  the first iterators to use, not null\n     * @return a combination iterator over the iterators\n     * @throws NullPointerException if either iterator is null\n     "
		}
	],
	"Collections-26b": [
		{
			"class_file": "org/apache/commons/collections4/keyvalue/MultiKey.java",
			"method_name": "readResolve",
			"arg_types": "",
			"type": "method",
			"signature": "org.apache.commons.collections4.keyvalue.MultiKey.readResolve()",
			"begin_line": 277,
			"end_line": 280,
			"comment": "\n     * Recalculate the hash code after deserialization. The hash code of some\n     * keys might have change (hash codes based on the system hash code are\n     * only stable for the same process).\n     * @return the instance with recalculated hash code\n     "
		}
	],
	"Collections-27b": [],
	"Collections-28b": []
}