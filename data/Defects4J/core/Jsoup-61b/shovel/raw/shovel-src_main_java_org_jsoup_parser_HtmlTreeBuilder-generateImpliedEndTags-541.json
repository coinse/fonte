{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-61b",
  "repositoryPath": "/tmp/Jsoup-61b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HtmlTreeBuilder.java",
  "functionName": "generateImpliedEndTags",
  "functionId": "generateImpliedEndTags___excludeTag-String",
  "sourceFilePath": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "     11.2.5.2 Closing elements that have implied end tags\u003cp/\u003e\n     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a\n     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,\n     the UA must pop the current node off the stack of open elements.\n\n@ @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the\n     process, then the UA must perform the above steps as if that element was not in the above list.\n",
  "functionStartLine": 541,
  "functionEndLine": 545,
  "numCommitsSeen": 28,
  "timeTaken": 2362,
  "changeHistory": [
    "de098c35e91f9a8c15c56cc3dd30a2ff32582201",
    "5000be31966a575f54d80ef85ee49ca1f5cb6ea8",
    "8749726a79c22451b1f01b14fb2137f734e926b4"
  ],
  "changeHistoryShort": {
    "de098c35e91f9a8c15c56cc3dd30a2ff32582201": "Ybodychange",
    "5000be31966a575f54d80ef85ee49ca1f5cb6ea8": "Ymovefromfile",
    "8749726a79c22451b1f01b14fb2137f734e926b4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de098c35e91f9a8c15c56cc3dd30a2ff32582201": {
      "type": "Ybodychange",
      "commitMessage": "Performance: reduced String[] allocations in Builder\n\nReduces GC load of tag searchers from 15% of objects to 2%. A little\nharder to read but worth it.\n",
      "commitDate": "11/10/13, 1:10 PM",
      "commitName": "de098c35e91f9a8c15c56cc3dd30a2ff32582201",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "10/6/13, 1:46 PM",
      "commitNameOld": "2518e92a052d922d81d11e28b8e5205639fed9a7",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 35.02,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "void generateImpliedEndTags(String excludeTag) {\n    while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026 StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop();\n}",
      "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
      "functionStartLine": 557,
      "functionName": "generateImpliedEndTags",
      "functionAnnotation": "",
      "functionDoc": "     11.2.5.2 Closing elements that have implied end tags\u003cp/\u003e\n     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a\n     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,\n     the UA must pop the current node off the stack of open elements.\n\n@ @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the\n     process, then the UA must perform the above steps as if that element was not in the above list.\n",
      "diff": "@@ -1,3 +1,3 @@\n void generateImpliedEndTags(String excludeTag) {\n-    while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026 StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\")) pop();\n+    while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026 StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5000be31966a575f54d80ef85ee49ca1f5cb6ea8": {
      "type": "Ymovefromfile",
      "commitMessage": "First draft of a simple XML treebuilder / parser.\n\nThis provides an alternative to the HTML5 parser which enforces HTML\nsemantics on the parsed input. The simple XML parser has no understanding\nof HTML, and will parse the input as-is into a DOM.\n",
      "commitDate": "2/26/12, 5:23 PM",
      "commitName": "5000be31966a575f54d80ef85ee49ca1f5cb6ea8",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "9/30/11, 6:13 PM",
      "commitNameOld": "1e84edbe208aab0c9330eadc50f9773d81d70cd6",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 149.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void generateImpliedEndTags(String excludeTag) {\n    while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026 StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\")) pop();\n}",
      "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
      "functionStartLine": 507,
      "functionName": "generateImpliedEndTags",
      "functionAnnotation": "",
      "functionDoc": "     11.2.5.2 Closing elements that have implied end tags\u003cp/\u003e\n     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a\n     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,\n     the UA must pop the current node off the stack of open elements.\n\n@ @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the\n     process, then the UA must perform the above steps as if that element was not in the above list.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/jsoup/parser/TreeBuilder.java",
        "newPath": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
        "oldMethodName": "generateImpliedEndTags",
        "newMethodName": "generateImpliedEndTags"
      }
    },
    "8749726a79c22451b1f01b14fb2137f734e926b4": {
      "type": "Yintroduced",
      "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,3 @@\n+void generateImpliedEndTags(String excludeTag) {\n+    while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026 StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\")) pop();\n+}\n\\ No newline at end of file\n",
      "actualSource": "void generateImpliedEndTags(String excludeTag) {\n    while ((excludeTag !\u003d null \u0026\u0026 !currentElement().nodeName().equals(excludeTag)) \u0026\u0026 StringUtil.in(currentElement().nodeName(), \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\")) pop();\n}",
      "path": "src/main/java/org/jsoup/parser/TreeBuilder.java",
      "functionStartLine": 534,
      "functionName": "generateImpliedEndTags",
      "functionAnnotation": "",
      "functionDoc": "     11.2.5.2 Closing elements that have implied end tags\u003cp/\u003e\n     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a\n     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,\n     the UA must pop the current node off the stack of open elements.\n\n@ @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the\n     process, then the UA must perform the above steps as if that element was not in the above list.\n"
    }
  }
}