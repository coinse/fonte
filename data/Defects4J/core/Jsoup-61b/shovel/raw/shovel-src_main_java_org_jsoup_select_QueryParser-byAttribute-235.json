{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-61b",
  "repositoryPath": "/tmp/Jsoup-61b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueryParser.java",
  "functionName": "byAttribute",
  "functionId": "byAttribute",
  "sourceFilePath": "src/main/java/org/jsoup/select/QueryParser.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 235,
  "functionEndLine": 267,
  "numCommitsSeen": 16,
  "timeTaken": 1444,
  "changeHistory": [
    "2c8b9ad145d3b808be19ce03a99797215e0c3ca3",
    "bbca7db20b9a45fb3d8efb29447349ed8593649c",
    "43a39b308abfbe39ea06729277d0630786b9956d",
    "e9909538549c96800dad1e94284b99575d1be628",
    "9008cbf66ca4a89d02ba26630fb818524e790974"
  ],
  "changeHistoryShort": {
    "2c8b9ad145d3b808be19ce03a99797215e0c3ca3": "Ybodychange",
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": "Ymultichange(Ymovefromfile,Ybodychange)",
    "43a39b308abfbe39ea06729277d0630786b9956d": "Ybodychange",
    "e9909538549c96800dad1e94284b99575d1be628": "Ybodychange",
    "9008cbf66ca4a89d02ba26630fb818524e790974": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2c8b9ad145d3b808be19ce03a99797215e0c3ca3": {
      "type": "Ybodychange",
      "commitMessage": "Performance: CPU and memory improvements for Selectors\n\nReduced CPU load and GC load for common selector use\n",
      "commitDate": "11/10/13, 2:59 PM",
      "commitName": "2c8b9ad145d3b808be19ce03a99797215e0c3ca3",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "1/27/13, 4:01 PM",
      "commitNameOld": "dd8e832191e78a417a03c88512b1d7eeb7f486d4",
      "commitAuthorOld": "",
      "daysBetweenCommits": 286.96,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "private void byAttribute() {\n    TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n    String key \u003d cq.consumeToAny(AttributeEvals);\n    Validate.notEmpty(key);\n    cq.consumeWhitespace();\n    if (cq.isEmpty()) {\n        if (key.startsWith(\"^\"))\n            evals.add(new Evaluator.AttributeStarting(key.substring(1)));\n        else\n            evals.add(new Evaluator.Attribute(key));\n    } else {\n        if (cq.matchChomp(\"\u003d\"))\n            evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n        else if (cq.matchChomp(\"!\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n        else if (cq.matchChomp(\"^\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n        else if (cq.matchChomp(\"$\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n        else if (cq.matchChomp(\"*\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n        else if (cq.matchChomp(\"~\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n        else\n            throw new Selector.SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/QueryParser.java",
      "functionStartLine": 223,
      "functionName": "byAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private void byAttribute() {\n     TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n-    String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n+    String key \u003d cq.consumeToAny(AttributeEvals);\n     Validate.notEmpty(key);\n     cq.consumeWhitespace();\n     if (cq.isEmpty()) {\n         if (key.startsWith(\"^\"))\n             evals.add(new Evaluator.AttributeStarting(key.substring(1)));\n         else\n             evals.add(new Evaluator.Attribute(key));\n     } else {\n         if (cq.matchChomp(\"\u003d\"))\n             evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n         else if (cq.matchChomp(\"!\u003d\"))\n             evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n         else if (cq.matchChomp(\"^\u003d\"))\n             evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n         else if (cq.matchChomp(\"$\u003d\"))\n             evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n         else if (cq.matchChomp(\"*\u003d\"))\n             evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n         else if (cq.matchChomp(\"~\u003d\"))\n             evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n         else\n             throw new Selector.SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void byAttribute() {\n    TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n    String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n    Validate.notEmpty(key);\n    cq.consumeWhitespace();\n    if (cq.isEmpty()) {\n        if (key.startsWith(\"^\"))\n            evals.add(new Evaluator.AttributeStarting(key.substring(1)));\n        else\n            evals.add(new Evaluator.Attribute(key));\n    } else {\n        if (cq.matchChomp(\"\u003d\"))\n            evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n        else if (cq.matchChomp(\"!\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n        else if (cq.matchChomp(\"^\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n        else if (cq.matchChomp(\"$\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n        else if (cq.matchChomp(\"*\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n        else if (cq.matchChomp(\"~\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n        else\n            throw new Selector.SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n    }\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 178,
          "functionName": "byAttribute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,27 @@\n private void byAttribute() {\n     TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n     String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n     Validate.notEmpty(key);\n     cq.consumeWhitespace();\n     if (cq.isEmpty()) {\n         if (key.startsWith(\"^\"))\n-            s.add(new Evaluator.AttributeStarting(key.substring(1)));\n+            evals.add(new Evaluator.AttributeStarting(key.substring(1)));\n         else\n-            s.add(new Evaluator.Attribute(key));\n+            evals.add(new Evaluator.Attribute(key));\n     } else {\n         if (cq.matchChomp(\"\u003d\"))\n-            s.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n         else if (cq.matchChomp(\"!\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n         else if (cq.matchChomp(\"^\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n         else if (cq.matchChomp(\"$\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n         else if (cq.matchChomp(\"*\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n         else if (cq.matchChomp(\"~\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n+            evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n         else\n-            throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n+            throw new Selector.SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
            "newPath": "src/main/java/org/jsoup/select/QueryParser.java",
            "oldMethodName": "byAttribute",
            "newMethodName": "byAttribute"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void byAttribute() {\n    TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n    String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n    Validate.notEmpty(key);\n    cq.consumeWhitespace();\n    if (cq.isEmpty()) {\n        if (key.startsWith(\"^\"))\n            evals.add(new Evaluator.AttributeStarting(key.substring(1)));\n        else\n            evals.add(new Evaluator.Attribute(key));\n    } else {\n        if (cq.matchChomp(\"\u003d\"))\n            evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n        else if (cq.matchChomp(\"!\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n        else if (cq.matchChomp(\"^\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n        else if (cq.matchChomp(\"$\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n        else if (cq.matchChomp(\"*\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n        else if (cq.matchChomp(\"~\u003d\"))\n            evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n        else\n            throw new Selector.SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n    }\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 178,
          "functionName": "byAttribute",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,27 @@\n private void byAttribute() {\n     TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n     String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n     Validate.notEmpty(key);\n     cq.consumeWhitespace();\n     if (cq.isEmpty()) {\n         if (key.startsWith(\"^\"))\n-            s.add(new Evaluator.AttributeStarting(key.substring(1)));\n+            evals.add(new Evaluator.AttributeStarting(key.substring(1)));\n         else\n-            s.add(new Evaluator.Attribute(key));\n+            evals.add(new Evaluator.Attribute(key));\n     } else {\n         if (cq.matchChomp(\"\u003d\"))\n-            s.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n         else if (cq.matchChomp(\"!\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n         else if (cq.matchChomp(\"^\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n         else if (cq.matchChomp(\"$\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n         else if (cq.matchChomp(\"*\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n+            evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n         else if (cq.matchChomp(\"~\u003d\"))\n-            s.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n+            evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n         else\n-            throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n+            throw new Selector.SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "43a39b308abfbe39ea06729277d0630786b9956d": {
      "type": "Ybodychange",
      "commitMessage": "Added javadocs for Evaluators.\nUpdated tests.\nUpdated parser\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "43a39b308abfbe39ea06729277d0630786b9956d",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "b800dd756bf956aa210165073824bfcf159780fd",
      "commitAuthorOld": "Anton Kazennikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void byAttribute() {\n    TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n    String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n    Validate.notEmpty(key);\n    cq.consumeWhitespace();\n    if (cq.isEmpty()) {\n        if (key.startsWith(\"^\"))\n            s.add(new Evaluator.AttributeStarting(key.substring(1)));\n        else\n            s.add(new Evaluator.Attribute(key));\n    } else {\n        if (cq.matchChomp(\"\u003d\"))\n            s.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n        else if (cq.matchChomp(\"!\u003d\"))\n            s.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n        else if (cq.matchChomp(\"^\u003d\"))\n            s.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n        else if (cq.matchChomp(\"$\u003d\"))\n            s.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n        else if (cq.matchChomp(\"*\u003d\"))\n            s.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n        else if (cq.matchChomp(\"~\u003d\"))\n            s.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n        else\n            throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 171,
      "functionName": "byAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private void byAttribute() {\n     TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n     String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n     Validate.notEmpty(key);\n     cq.consumeWhitespace();\n     if (cq.isEmpty()) {\n         if (key.startsWith(\"^\"))\n-            ecPush(new Evaluator.AttributeStarting(key.substring(1)));\n+            s.add(new Evaluator.AttributeStarting(key.substring(1)));\n         else\n-            ecPush(new Evaluator.Attribute(key));\n+            s.add(new Evaluator.Attribute(key));\n     } else {\n         if (cq.matchChomp(\"\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValue(key, cq.remainder()));\n+            s.add(new Evaluator.AttributeWithValue(key, cq.remainder()));\n         else if (cq.matchChomp(\"!\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n+            s.add(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n         else if (cq.matchChomp(\"^\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n+            s.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n         else if (cq.matchChomp(\"$\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n+            s.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n         else if (cq.matchChomp(\"*\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n+            s.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n         else if (cq.matchChomp(\"~\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n+            s.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n         else\n             throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e9909538549c96800dad1e94284b99575d1be628": {
      "type": "Ybodychange",
      "commitMessage": "Working parser except the root node selector.\nAdded basic tests\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "e9909538549c96800dad1e94284b99575d1be628",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "9008cbf66ca4a89d02ba26630fb818524e790974",
      "commitAuthorOld": "Anton Kazennikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void byAttribute() {\n    TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n    String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n    Validate.notEmpty(key);\n    cq.consumeWhitespace();\n    if (cq.isEmpty()) {\n        if (key.startsWith(\"^\"))\n            ecPush(new Evaluator.AttributeStarting(key.substring(1)));\n        else\n            ecPush(new Evaluator.Attribute(key));\n    } else {\n        if (cq.matchChomp(\"\u003d\"))\n            ecPush(new Evaluator.AttributeWithValue(key, cq.remainder()));\n        else if (cq.matchChomp(\"!\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n        else if (cq.matchChomp(\"^\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n        else if (cq.matchChomp(\"$\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n        else if (cq.matchChomp(\"*\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n        else if (cq.matchChomp(\"~\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n        else\n            throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 174,
      "functionName": "byAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,27 @@\n private void byAttribute() {\n     TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n     String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n     Validate.notEmpty(key);\n     cq.consumeWhitespace();\n     if (cq.isEmpty()) {\n         if (key.startsWith(\"^\"))\n             ecPush(new Evaluator.AttributeStarting(key.substring(1)));\n         else\n             ecPush(new Evaluator.Attribute(key));\n     } else {\n-        String value \u003d cq.remainder();\n         if (cq.matchChomp(\"\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValue(key, value));\n+            ecPush(new Evaluator.AttributeWithValue(key, cq.remainder()));\n         else if (cq.matchChomp(\"!\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueNot(key, value));\n+            ecPush(new Evaluator.AttributeWithValueNot(key, cq.remainder()));\n         else if (cq.matchChomp(\"^\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueStarting(key, value));\n+            ecPush(new Evaluator.AttributeWithValueStarting(key, cq.remainder()));\n         else if (cq.matchChomp(\"$\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueEnding(key, value));\n+            ecPush(new Evaluator.AttributeWithValueEnding(key, cq.remainder()));\n         else if (cq.matchChomp(\"*\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueContaining(key, value));\n+            ecPush(new Evaluator.AttributeWithValueContaining(key, cq.remainder()));\n         else if (cq.matchChomp(\"~\u003d\"))\n-            ecPush(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(value)));\n+            ecPush(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder())));\n         else\n             throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9008cbf66ca4a89d02ba26630fb818524e790974": {
      "type": "Yintroduced",
      "commitMessage": "Adding Selector parser\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "9008cbf66ca4a89d02ba26630fb818524e790974",
      "commitAuthor": "Anton Kazennikov",
      "diff": "@@ -0,0 +1,28 @@\n+private void byAttribute() {\n+    TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n+    String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n+    Validate.notEmpty(key);\n+    cq.consumeWhitespace();\n+    if (cq.isEmpty()) {\n+        if (key.startsWith(\"^\"))\n+            ecPush(new Evaluator.AttributeStarting(key.substring(1)));\n+        else\n+            ecPush(new Evaluator.Attribute(key));\n+    } else {\n+        String value \u003d cq.remainder();\n+        if (cq.matchChomp(\"\u003d\"))\n+            ecPush(new Evaluator.AttributeWithValue(key, value));\n+        else if (cq.matchChomp(\"!\u003d\"))\n+            ecPush(new Evaluator.AttributeWithValueNot(key, value));\n+        else if (cq.matchChomp(\"^\u003d\"))\n+            ecPush(new Evaluator.AttributeWithValueStarting(key, value));\n+        else if (cq.matchChomp(\"$\u003d\"))\n+            ecPush(new Evaluator.AttributeWithValueEnding(key, value));\n+        else if (cq.matchChomp(\"*\u003d\"))\n+            ecPush(new Evaluator.AttributeWithValueContaining(key, value));\n+        else if (cq.matchChomp(\"~\u003d\"))\n+            ecPush(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(value)));\n+        else\n+            throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void byAttribute() {\n    TokenQueue cq \u003d new TokenQueue(tq.chompBalanced(\u0027[\u0027, \u0027]\u0027));\n    String key \u003d cq.consumeToAny(\"\u003d\", \"!\u003d\", \"^\u003d\", \"$\u003d\", \"*\u003d\", \"~\u003d\");\n    Validate.notEmpty(key);\n    cq.consumeWhitespace();\n    if (cq.isEmpty()) {\n        if (key.startsWith(\"^\"))\n            ecPush(new Evaluator.AttributeStarting(key.substring(1)));\n        else\n            ecPush(new Evaluator.Attribute(key));\n    } else {\n        String value \u003d cq.remainder();\n        if (cq.matchChomp(\"\u003d\"))\n            ecPush(new Evaluator.AttributeWithValue(key, value));\n        else if (cq.matchChomp(\"!\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueNot(key, value));\n        else if (cq.matchChomp(\"^\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueStarting(key, value));\n        else if (cq.matchChomp(\"$\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueEnding(key, value));\n        else if (cq.matchChomp(\"*\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueContaining(key, value));\n        else if (cq.matchChomp(\"~\u003d\"))\n            ecPush(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(value)));\n        else\n            throw new SelectorParseException(\"Could not parse attribute query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, cq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 163,
      "functionName": "byAttribute",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}