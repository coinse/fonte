{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-61b",
  "repositoryPath": "/tmp/Jsoup-61b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Entities.java",
  "functionName": "load",
  "functionId": "load___e-EscapeMode__file-String__size-int",
  "sourceFilePath": "src/main/java/org/jsoup/nodes/Entities.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 293,
  "functionEndLine": 347,
  "numCommitsSeen": 33,
  "timeTaken": 1056,
  "changeHistory": [
    "79b1aa4b580534ef6ef7057d5b3b4a8250b8c5e5",
    "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
    "aa81e10c34f48a3c4ac7160aa90ee18af4f5c0c2"
  ],
  "changeHistoryShort": {
    "79b1aa4b580534ef6ef7057d5b3b4a8250b8c5e5": "Ybodychange",
    "6dc38f26dd31f1a367961f27c56b143cd0462e5a": "Ybodychange",
    "aa81e10c34f48a3c4ac7160aa90ee18af4f5c0c2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79b1aa4b580534ef6ef7057d5b3b4a8250b8c5e5": {
      "type": "Ybodychange",
      "commitMessage": "Trim \\r on entity load\n",
      "commitDate": "12/11/16, 12:27 PM",
      "commitName": "79b1aa4b580534ef6ef7057d5b3b4a8250b8c5e5",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "11/13/16, 7:26 PM",
      "commitNameOld": "188c3be9051e7b2a8012ea1f08ad2b46005f58d5",
      "commitAuthorOld": "Sebastian KÃ¼rten",
      "daysBetweenCommits": 27.71,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void load(EscapeMode e, String file, int size) {\n    e.nameKeys \u003d new String[size];\n    e.codeVals \u003d new int[size];\n    e.codeKeys \u003d new int[size];\n    e.nameVals \u003d new String[size];\n    InputStream stream \u003d Entities.class.getResourceAsStream(file);\n    if (stream \u003d\u003d null)\n        throw new IllegalStateException(\"Could not read resource \" + file + \". Make sure you copy resources for \" + Entities.class.getCanonicalName());\n    int i \u003d 0;\n    try {\n        ByteBuffer bytes \u003d DataUtil.readToByteBuffer(stream, 0);\n        String contents \u003d Charset.forName(\"ascii\").decode(bytes).toString();\n        CharacterReader reader \u003d new CharacterReader(contents);\n        while (!reader.isEmpty()) {\n            final String name \u003d reader.consumeTo(\u0027\u003d\u0027);\n            reader.advance();\n            final int cp1 \u003d Integer.parseInt(reader.consumeToAny(codeDelims), codepointRadix);\n            final char codeDelim \u003d reader.current();\n            reader.advance();\n            final int cp2;\n            if (codeDelim \u003d\u003d \u0027,\u0027) {\n                cp2 \u003d Integer.parseInt(reader.consumeTo(\u0027;\u0027), codepointRadix);\n                reader.advance();\n            } else {\n                cp2 \u003d empty;\n            }\n            String indexS \u003d reader.consumeTo(\u0027\\n\u0027);\n            if (indexS.charAt(indexS.length() - 1) \u003d\u003d \u0027\\r\u0027) {\n                indexS \u003d indexS.substring(0, indexS.length() - 1);\n            }\n            final int index \u003d Integer.parseInt(indexS, codepointRadix);\n            reader.advance();\n            e.nameKeys[i] \u003d name;\n            e.codeVals[i] \u003d cp1;\n            e.codeKeys[index] \u003d cp1;\n            e.nameVals[index] \u003d name;\n            if (cp2 !\u003d empty) {\n                multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2));\n            }\n            i++;\n        }\n    } catch (IOException err) {\n        throw new IllegalStateException(\"Error reading resource \" + file);\n    }\n}",
      "path": "src/main/java/org/jsoup/nodes/Entities.java",
      "functionStartLine": 293,
      "functionName": "load",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,45 @@\n private static void load(EscapeMode e, String file, int size) {\n     e.nameKeys \u003d new String[size];\n     e.codeVals \u003d new int[size];\n     e.codeKeys \u003d new int[size];\n     e.nameVals \u003d new String[size];\n     InputStream stream \u003d Entities.class.getResourceAsStream(file);\n     if (stream \u003d\u003d null)\n         throw new IllegalStateException(\"Could not read resource \" + file + \". Make sure you copy resources for \" + Entities.class.getCanonicalName());\n     int i \u003d 0;\n     try {\n         ByteBuffer bytes \u003d DataUtil.readToByteBuffer(stream, 0);\n         String contents \u003d Charset.forName(\"ascii\").decode(bytes).toString();\n         CharacterReader reader \u003d new CharacterReader(contents);\n         while (!reader.isEmpty()) {\n             final String name \u003d reader.consumeTo(\u0027\u003d\u0027);\n             reader.advance();\n             final int cp1 \u003d Integer.parseInt(reader.consumeToAny(codeDelims), codepointRadix);\n             final char codeDelim \u003d reader.current();\n             reader.advance();\n             final int cp2;\n             if (codeDelim \u003d\u003d \u0027,\u0027) {\n                 cp2 \u003d Integer.parseInt(reader.consumeTo(\u0027;\u0027), codepointRadix);\n                 reader.advance();\n             } else {\n                 cp2 \u003d empty;\n             }\n-            final int index \u003d Integer.parseInt(reader.consumeTo(\u0027\\n\u0027), codepointRadix);\n+            String indexS \u003d reader.consumeTo(\u0027\\n\u0027);\n+            if (indexS.charAt(indexS.length() - 1) \u003d\u003d \u0027\\r\u0027) {\n+                indexS \u003d indexS.substring(0, indexS.length() - 1);\n+            }\n+            final int index \u003d Integer.parseInt(indexS, codepointRadix);\n             reader.advance();\n             e.nameKeys[i] \u003d name;\n             e.codeVals[i] \u003d cp1;\n             e.codeKeys[index] \u003d cp1;\n             e.nameVals[index] \u003d name;\n             if (cp2 !\u003d empty) {\n                 multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2));\n             }\n             i++;\n         }\n     } catch (IOException err) {\n         throw new IllegalStateException(\"Error reading resource \" + file);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6dc38f26dd31f1a367961f27c56b143cd0462e5a": {
      "type": "Ybodychange",
      "commitMessage": "Use jsoup\u0027s CharacterReader instead of regexes to parse Entities\n\nFaster, less memory.\n",
      "commitDate": "10/23/16, 5:59 PM",
      "commitName": "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "8/19/16, 12:04 PM",
      "commitNameOld": "aa81e10c34f48a3c4ac7160aa90ee18af4f5c0c2",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 65.25,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private static void load(EscapeMode e, String file, int size) {\n    e.nameKeys \u003d new String[size];\n    e.codeVals \u003d new int[size];\n    e.codeKeys \u003d new int[size];\n    e.nameVals \u003d new String[size];\n    InputStream stream \u003d Entities.class.getResourceAsStream(file);\n    if (stream \u003d\u003d null)\n        throw new IllegalStateException(\"Could not read resource \" + file + \". Make sure you copy resources for \" + Entities.class.getCanonicalName());\n    int i \u003d 0;\n    try {\n        ByteBuffer bytes \u003d DataUtil.readToByteBuffer(stream, 0);\n        String contents \u003d Charset.forName(\"ascii\").decode(bytes).toString();\n        CharacterReader reader \u003d new CharacterReader(contents);\n        while (!reader.isEmpty()) {\n            final String name \u003d reader.consumeTo(\u0027\u003d\u0027);\n            reader.advance();\n            final int cp1 \u003d Integer.parseInt(reader.consumeToAny(codeDelims), codepointRadix);\n            final char codeDelim \u003d reader.current();\n            reader.advance();\n            final int cp2;\n            if (codeDelim \u003d\u003d \u0027,\u0027) {\n                cp2 \u003d Integer.parseInt(reader.consumeTo(\u0027;\u0027), codepointRadix);\n                reader.advance();\n            } else {\n                cp2 \u003d empty;\n            }\n            final int index \u003d Integer.parseInt(reader.consumeTo(\u0027\\n\u0027), codepointRadix);\n            reader.advance();\n            e.nameKeys[i] \u003d name;\n            e.codeVals[i] \u003d cp1;\n            e.codeKeys[index] \u003d cp1;\n            e.nameVals[index] \u003d name;\n            if (cp2 !\u003d empty) {\n                multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2));\n            }\n            i++;\n        }\n    } catch (IOException err) {\n        throw new IllegalStateException(\"Error reading resource \" + file);\n    }\n}",
      "path": "src/main/java/org/jsoup/nodes/Entities.java",
      "functionStartLine": 293,
      "functionName": "load",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,41 @@\n private static void load(EscapeMode e, String file, int size) {\n     e.nameKeys \u003d new String[size];\n     e.codeVals \u003d new int[size];\n     e.codeKeys \u003d new int[size];\n     e.nameVals \u003d new String[size];\n     InputStream stream \u003d Entities.class.getResourceAsStream(file);\n     if (stream \u003d\u003d null)\n         throw new IllegalStateException(\"Could not read resource \" + file + \". Make sure you copy resources for \" + Entities.class.getCanonicalName());\n-    BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));\n-    String entry;\n     int i \u003d 0;\n     try {\n-        while ((entry \u003d reader.readLine()) !\u003d null) {\n-            final Matcher match \u003d entityPattern.matcher(entry);\n-            if (match.find()) {\n-                final String name \u003d match.group(1);\n-                final int cp1 \u003d Integer.parseInt(match.group(2), codepointRadix);\n-                final int cp2 \u003d match.group(3) !\u003d null ? Integer.parseInt(match.group(3), codepointRadix) : empty;\n-                final int index \u003d Integer.parseInt(match.group(4), codepointRadix);\n-                e.nameKeys[i] \u003d name;\n-                e.codeVals[i] \u003d cp1;\n-                e.codeKeys[index] \u003d cp1;\n-                e.nameVals[index] \u003d name;\n-                if (cp2 !\u003d empty) {\n-                    multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2));\n-                }\n-                i++;\n+        ByteBuffer bytes \u003d DataUtil.readToByteBuffer(stream, 0);\n+        String contents \u003d Charset.forName(\"ascii\").decode(bytes).toString();\n+        CharacterReader reader \u003d new CharacterReader(contents);\n+        while (!reader.isEmpty()) {\n+            final String name \u003d reader.consumeTo(\u0027\u003d\u0027);\n+            reader.advance();\n+            final int cp1 \u003d Integer.parseInt(reader.consumeToAny(codeDelims), codepointRadix);\n+            final char codeDelim \u003d reader.current();\n+            reader.advance();\n+            final int cp2;\n+            if (codeDelim \u003d\u003d \u0027,\u0027) {\n+                cp2 \u003d Integer.parseInt(reader.consumeTo(\u0027;\u0027), codepointRadix);\n+                reader.advance();\n+            } else {\n+                cp2 \u003d empty;\n             }\n+            final int index \u003d Integer.parseInt(reader.consumeTo(\u0027\\n\u0027), codepointRadix);\n+            reader.advance();\n+            e.nameKeys[i] \u003d name;\n+            e.codeVals[i] \u003d cp1;\n+            e.codeKeys[index] \u003d cp1;\n+            e.nameVals[index] \u003d name;\n+            if (cp2 !\u003d empty) {\n+                multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2));\n+            }\n+            i++;\n         }\n-        reader.close();\n     } catch (IOException err) {\n         throw new IllegalStateException(\"Error reading resource \" + file);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aa81e10c34f48a3c4ac7160aa90ee18af4f5c0c2": {
      "type": "Yintroduced",
      "commitMessage": "Improved HTML entity support\n\nFixes #602, #603\n",
      "commitDate": "8/19/16, 12:04 PM",
      "commitName": "aa81e10c34f48a3c4ac7160aa90ee18af4f5c0c2",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,34 @@\n+private static void load(EscapeMode e, String file, int size) {\n+    e.nameKeys \u003d new String[size];\n+    e.codeVals \u003d new int[size];\n+    e.codeKeys \u003d new int[size];\n+    e.nameVals \u003d new String[size];\n+    InputStream stream \u003d Entities.class.getResourceAsStream(file);\n+    if (stream \u003d\u003d null)\n+        throw new IllegalStateException(\"Could not read resource \" + file + \". Make sure you copy resources for \" + Entities.class.getCanonicalName());\n+    BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));\n+    String entry;\n+    int i \u003d 0;\n+    try {\n+        while ((entry \u003d reader.readLine()) !\u003d null) {\n+            final Matcher match \u003d entityPattern.matcher(entry);\n+            if (match.find()) {\n+                final String name \u003d match.group(1);\n+                final int cp1 \u003d Integer.parseInt(match.group(2), codepointRadix);\n+                final int cp2 \u003d match.group(3) !\u003d null ? Integer.parseInt(match.group(3), codepointRadix) : empty;\n+                final int index \u003d Integer.parseInt(match.group(4), codepointRadix);\n+                e.nameKeys[i] \u003d name;\n+                e.codeVals[i] \u003d cp1;\n+                e.codeKeys[index] \u003d cp1;\n+                e.nameVals[index] \u003d name;\n+                if (cp2 !\u003d empty) {\n+                    multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2));\n+                }\n+                i++;\n+            }\n+        }\n+        reader.close();\n+    } catch (IOException err) {\n+        throw new IllegalStateException(\"Error reading resource \" + file);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static void load(EscapeMode e, String file, int size) {\n    e.nameKeys \u003d new String[size];\n    e.codeVals \u003d new int[size];\n    e.codeKeys \u003d new int[size];\n    e.nameVals \u003d new String[size];\n    InputStream stream \u003d Entities.class.getResourceAsStream(file);\n    if (stream \u003d\u003d null)\n        throw new IllegalStateException(\"Could not read resource \" + file + \". Make sure you copy resources for \" + Entities.class.getCanonicalName());\n    BufferedReader reader \u003d new BufferedReader(new InputStreamReader(stream));\n    String entry;\n    int i \u003d 0;\n    try {\n        while ((entry \u003d reader.readLine()) !\u003d null) {\n            final Matcher match \u003d entityPattern.matcher(entry);\n            if (match.find()) {\n                final String name \u003d match.group(1);\n                final int cp1 \u003d Integer.parseInt(match.group(2), codepointRadix);\n                final int cp2 \u003d match.group(3) !\u003d null ? Integer.parseInt(match.group(3), codepointRadix) : empty;\n                final int index \u003d Integer.parseInt(match.group(4), codepointRadix);\n                e.nameKeys[i] \u003d name;\n                e.codeVals[i] \u003d cp1;\n                e.codeKeys[index] \u003d cp1;\n                e.nameVals[index] \u003d name;\n                if (cp2 !\u003d empty) {\n                    multipoints.put(name, new String(new int[] { cp1, cp2 }, 0, 2));\n                }\n                i++;\n            }\n        }\n        reader.close();\n    } catch (IOException err) {\n        throw new IllegalStateException(\"Error reading resource \" + file);\n    }\n}",
      "path": "src/main/java/org/jsoup/nodes/Entities.java",
      "functionStartLine": 281,
      "functionName": "load",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}