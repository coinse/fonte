{
  "origin": "codeshovel",
  "repositoryName": "Csv-14b",
  "repositoryPath": "/tmp/Csv-14b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CSVFormat.java",
  "functionName": "printAndQuote",
  "functionId": "printAndQuote___object-Object(modifiers-final)__value-CharSequence(modifiers-final)__offset-int(modifiers-final)__len-int(modifiers-final)__out-Appendable(modifiers-final)__newRecord-boolean(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/csv/CSVFormat.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 1001,
  "functionEndLine": 1106,
  "numCommitsSeen": 440,
  "timeTaken": 3336,
  "changeHistory": [
    "4a6af4590838e8804290464a8d88a837acb2fa08",
    "4e8c781b23645d5b8c125411f7e00680881b4b5b",
    "e729fdff4db249f69f21ebdf334c4064ae7b76e5",
    "f9a3162037f7e82ce6927bbe944b7d61349f8c11",
    "a72c71f5cc6431890f82707a2782325be6747dd1",
    "9873b13df283ac65a37d56622bc1e01eca681611",
    "512e446d284354e4945e03399843ac4426a2bcc5",
    "5b2e5f809be63d301b04eaae9c72cae05e7da35c",
    "6640e8597c16ecee01ef06555f7aa12cfa8c0c2d",
    "374cd7b16d1ec48bb68fd748427c4b8942767c6b",
    "68352ee98fdb3d07be160357514abe2558a90c0d",
    "3a90cfe249a1c3623aec65965ac59e1a8674163e",
    "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
    "2f2d9aa7807b22a7f21b025969eb533b118e0b54",
    "7fd16f353a89e7360f060432bf7f9773284b1883",
    "17139b840fc076b36f7e15be40495faefee08ad4",
    "6e57364216b78bca031f764b8d0a46494ba27b46",
    "639e68e2533dbe65e4b33de380aa2bdb790068b3",
    "66a56ee1a47645c4d91076858e00ab9977d1a399",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
    "e7434e5cb57088ee4d5a06e846cab7c4bed7cd10",
    "e80b8112a719b6b213e833bd0d1ee27f55bfe5f4",
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
    "0d63758e095d2a671d0ba10fc8cae141add29a45",
    "02b21463e68e7b3d5f3d9980746d131a08a08eed"
  ],
  "changeHistoryShort": {
    "4a6af4590838e8804290464a8d88a837acb2fa08": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "4e8c781b23645d5b8c125411f7e00680881b4b5b": "Ybodychange",
    "e729fdff4db249f69f21ebdf334c4064ae7b76e5": "Ybodychange",
    "f9a3162037f7e82ce6927bbe944b7d61349f8c11": "Ybodychange",
    "a72c71f5cc6431890f82707a2782325be6747dd1": "Ybodychange",
    "9873b13df283ac65a37d56622bc1e01eca681611": "Ybodychange",
    "512e446d284354e4945e03399843ac4426a2bcc5": "Ybodychange",
    "5b2e5f809be63d301b04eaae9c72cae05e7da35c": "Ymultichange(Ymodifierchange,Ybodychange)",
    "6640e8597c16ecee01ef06555f7aa12cfa8c0c2d": "Ybodychange",
    "374cd7b16d1ec48bb68fd748427c4b8942767c6b": "Yformatchange",
    "68352ee98fdb3d07be160357514abe2558a90c0d": "Yparametermetachange",
    "3a90cfe249a1c3623aec65965ac59e1a8674163e": "Ybodychange",
    "f51f43d18421d02fab7b39b55e6b55c32b5622d2": "Ymultichange(Yparameterchange,Ybodychange)",
    "2f2d9aa7807b22a7f21b025969eb533b118e0b54": "Ybodychange",
    "7fd16f353a89e7360f060432bf7f9773284b1883": "Yrename",
    "17139b840fc076b36f7e15be40495faefee08ad4": "Ybodychange",
    "6e57364216b78bca031f764b8d0a46494ba27b46": "Ybodychange",
    "639e68e2533dbe65e4b33de380aa2bdb790068b3": "Ybodychange",
    "66a56ee1a47645c4d91076858e00ab9977d1a399": "Ybodychange",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": "Ymultichange(Ybodychange,Yparametermetachange)",
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5": "Ybodychange",
    "e7434e5cb57088ee4d5a06e846cab7c4bed7cd10": "Ymultichange(Yparameterchange,Ybodychange)",
    "e80b8112a719b6b213e833bd0d1ee27f55bfe5f4": "Ybodychange",
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8": "Ybodychange",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": "Yfilerename",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": "Yformatchange",
    "0d63758e095d2a671d0ba10fc8cae141add29a45": "Ybodychange",
    "02b21463e68e7b3d5f3d9980746d131a08a08eed": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a6af4590838e8804290464a8d88a837acb2fa08": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/11/16, 2:09 PM",
      "commitName": "4a6af4590838e8804290464a8d88a837acb2fa08",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/11/16, 2:09 PM",
          "commitName": "4a6af4590838e8804290464a8d88a837acb2fa08",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "5/10/16, 5:05 AM",
          "commitNameOld": "21cb8b4750ca9356644e2e64655c6463bed47509",
          "commitAuthorOld": "Benedikt Ritter",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d getDelimiter();\n    final char quoteChar \u003d getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy \u003d getQuoteMode();\n    if (quoteModePolicy \u003d\u003d null) {\n        quoteModePolicy \u003d QuoteMode.MINIMAL;\n    }\n    switch(quoteModePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
          "functionStartLine": 954,
          "functionName": "printAndQuote",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,74 +1,74 @@\n-private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n+private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n-    final char delimChar \u003d format.getDelimiter();\n-    final char quoteChar \u003d format.getQuoteCharacter().charValue();\n-    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n+    final char delimChar \u003d getDelimiter();\n+    final char quoteChar \u003d getQuoteCharacter().charValue();\n+    QuoteMode quoteModePolicy \u003d getQuoteMode();\n     if (quoteModePolicy \u003d\u003d null) {\n         quoteModePolicy \u003d QuoteMode.MINIMAL;\n     }\n     switch(quoteModePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n-            printAndEscape(value, offset, len);\n+            printAndEscape(value, offset, len, out);\n             return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
            "newPath": "src/main/java/org/apache/commons/csv/CSVFormat.java",
            "oldMethodName": "printAndQuote",
            "newMethodName": "printAndQuote"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/11/16, 2:09 PM",
          "commitName": "4a6af4590838e8804290464a8d88a837acb2fa08",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "5/10/16, 5:05 AM",
          "commitNameOld": "21cb8b4750ca9356644e2e64655c6463bed47509",
          "commitAuthorOld": "Benedikt Ritter",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d getDelimiter();\n    final char quoteChar \u003d getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy \u003d getQuoteMode();\n    if (quoteModePolicy \u003d\u003d null) {\n        quoteModePolicy \u003d QuoteMode.MINIMAL;\n    }\n    switch(quoteModePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
          "functionStartLine": 954,
          "functionName": "printAndQuote",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,74 +1,74 @@\n-private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n+private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n-    final char delimChar \u003d format.getDelimiter();\n-    final char quoteChar \u003d format.getQuoteCharacter().charValue();\n-    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n+    final char delimChar \u003d getDelimiter();\n+    final char quoteChar \u003d getQuoteCharacter().charValue();\n+    QuoteMode quoteModePolicy \u003d getQuoteMode();\n     if (quoteModePolicy \u003d\u003d null) {\n         quoteModePolicy \u003d QuoteMode.MINIMAL;\n     }\n     switch(quoteModePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n-            printAndEscape(value, offset, len);\n+            printAndEscape(value, offset, len, out);\n             return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "[CSV-182] Allow some printing operations directly from CSVFormat. Adds APIs to CSVFormat so update version from 1.3.1-SNAPSHOT to 1.4-SNAPHOT a la semver. This commit refactors a small bit of guts code from CSVPrinter to CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1743430 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/11/16, 2:09 PM",
          "commitName": "4a6af4590838e8804290464a8d88a837acb2fa08",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "5/10/16, 5:05 AM",
          "commitNameOld": "21cb8b4750ca9356644e2e64655c6463bed47509",
          "commitAuthorOld": "Benedikt Ritter",
          "daysBetweenCommits": 1.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d getDelimiter();\n    final char quoteChar \u003d getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy \u003d getQuoteMode();\n    if (quoteModePolicy \u003d\u003d null) {\n        quoteModePolicy \u003d QuoteMode.MINIMAL;\n    }\n    switch(quoteModePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len, out);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
          "functionStartLine": 954,
          "functionName": "printAndQuote",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,74 +1,74 @@\n-private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n+private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len, final Appendable out, final boolean newRecord) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n-    final char delimChar \u003d format.getDelimiter();\n-    final char quoteChar \u003d format.getQuoteCharacter().charValue();\n-    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n+    final char delimChar \u003d getDelimiter();\n+    final char quoteChar \u003d getQuoteCharacter().charValue();\n+    QuoteMode quoteModePolicy \u003d getQuoteMode();\n     if (quoteModePolicy \u003d\u003d null) {\n         quoteModePolicy \u003d QuoteMode.MINIMAL;\n     }\n     switch(quoteModePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n-            printAndEscape(value, offset, len);\n+            printAndEscape(value, offset, len, out);\n             return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[object-Object(modifiers-final), value-CharSequence(modifiers-final), offset-int(modifiers-final), len-int(modifiers-final)]",
            "newValue": "[object-Object(modifiers-final), value-CharSequence(modifiers-final), offset-int(modifiers-final), len-int(modifiers-final), out-Appendable(modifiers-final), newRecord-boolean(modifiers-final)]"
          }
        }
      ]
    },
    "4e8c781b23645d5b8c125411f7e00680881b4b5b": {
      "type": "Ybodychange",
      "commitMessage": "PMD: Remove useless parentheses\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1742467 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/5/16, 1:00 PM",
      "commitName": "4e8c781b23645d5b8c125411f7e00680881b4b5b",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "5/5/16, 12:43 PM",
      "commitNameOld": "3568bba22f6217a644c73fbf3485f1aa93804df3",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n    if (quoteModePolicy \u003d\u003d null) {\n        quoteModePolicy \u003d QuoteMode.MINIMAL;\n    }\n    switch(quoteModePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 196,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,74 +1,74 @@\n private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteCharacter().charValue();\n     QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n     if (quoteModePolicy \u003d\u003d null) {\n         quoteModePolicy \u003d QuoteMode.MINIMAL;\n     }\n     switch(quoteModePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             printAndEscape(value, offset, len);\n             return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n-                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027 || c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027 || c \u003e \u0027z\u0027)) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e729fdff4db249f69f21ebdf334c4064ae7b76e5": {
      "type": "Ybodychange",
      "commitMessage": "Remove commented out code and add TODO for obscure code\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1617070 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/10/14, 1:54 AM",
      "commitName": "e729fdff4db249f69f21ebdf334c4064ae7b76e5",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "8/10/14, 1:50 AM",
      "commitNameOld": "a6a92598de5983c7278b0daba1a839e5a3db463b",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n    if (quoteModePolicy \u003d\u003d null) {\n        quoteModePolicy \u003d QuoteMode.MINIMAL;\n    }\n    switch(quoteModePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 175,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "f9a3162037f7e82ce6927bbe944b7d61349f8c11": {
      "type": "Ybodychange",
      "commitMessage": "Use \"Character\" as the postfix is ivar names. Use the method name pattern isFooSet() for ivar \"foo\" for methods that test foo for null (foo !\u003d null).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612352 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/21/14, 10:18 AM",
      "commitName": "f9a3162037f7e82ce6927bbe944b7d61349f8c11",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "7/21/14, 9:32 AM",
      "commitNameOld": "a72c71f5cc6431890f82707a2782325be6747dd1",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteCharacter().charValue();\n    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n    if (quoteModePolicy \u003d\u003d null) {\n        quoteModePolicy \u003d QuoteMode.MINIMAL;\n    }\n    switch(quoteModePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 175,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,74 +1,74 @@\n private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     final char delimChar \u003d format.getDelimiter();\n-    final char quoteChar \u003d format.getQuoteChar().charValue();\n+    final char quoteChar \u003d format.getQuoteCharacter().charValue();\n     QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n     if (quoteModePolicy \u003d\u003d null) {\n         quoteModePolicy \u003d QuoteMode.MINIMAL;\n     }\n     switch(quoteModePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             printAndEscape(value, offset, len);\n             return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n         default:\n             throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a72c71f5cc6431890f82707a2782325be6747dd1": {
      "type": "Ybodychange",
      "commitMessage": "Consistently rename Quote/QuotePolicy to QuoteMode\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1612344 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/21/14, 9:32 AM",
      "commitName": "a72c71f5cc6431890f82707a2782325be6747dd1",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "7/15/14, 10:12 AM",
      "commitNameOld": "fed4161acc04c78631098608619c4e3450353dc4",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 5.97,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n    if (quoteModePolicy \u003d\u003d null) {\n        quoteModePolicy \u003d QuoteMode.MINIMAL;\n    }\n    switch(quoteModePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 175,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,74 +1,74 @@\n private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar().charValue();\n-    Quote quotePolicy \u003d format.getQuotePolicy();\n-    if (quotePolicy \u003d\u003d null) {\n-        quotePolicy \u003d Quote.MINIMAL;\n+    QuoteMode quoteModePolicy \u003d format.getQuoteMode();\n+    if (quoteModePolicy \u003d\u003d null) {\n+        quoteModePolicy \u003d QuoteMode.MINIMAL;\n     }\n-    switch(quotePolicy) {\n+    switch(quoteModePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             printAndEscape(value, offset, len);\n             return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n         default:\n-            throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n+            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9873b13df283ac65a37d56622bc1e01eca681611": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t omit default cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1582814 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/28/14, 9:38 AM",
      "commitName": "9873b13df283ac65a37d56622bc1e01eca681611",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/12/14, 5:16 PM",
      "commitNameOld": "73cc5246cf789db8f459e2f539831b6e91bedd26",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 15.68,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n        default:\n            throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 168,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,72 +1,74 @@\n private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar().charValue();\n     Quote quotePolicy \u003d format.getQuotePolicy();\n     if (quotePolicy \u003d\u003d null) {\n         quotePolicy \u003d Quote.MINIMAL;\n     }\n     switch(quotePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             printAndEscape(value, offset, len);\n             return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n+        default:\n+            throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "512e446d284354e4945e03399843ac4426a2bcc5": {
      "type": "Ybodychange",
      "commitMessage": "Add code and test for Quote.NONE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1480499 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/8/13, 4:54 PM",
      "commitName": "512e446d284354e4945e03399843ac4426a2bcc5",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "5/7/13, 2:09 AM",
      "commitNameOld": "5b2e5f809be63d301b04eaae9c72cae05e7da35c",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 1.61,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            printAndEscape(value, offset, len);\n            return;\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 223,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,71 +1,72 @@\n private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar().charValue();\n     Quote quotePolicy \u003d format.getQuotePolicy();\n     if (quotePolicy \u003d\u003d null) {\n         quotePolicy \u003d Quote.MINIMAL;\n     }\n     switch(quotePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n-            throw new IllegalArgumentException(\"Not implemented yet\");\n+            printAndEscape(value, offset, len);\n+            return;\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b2e5f809be63d301b04eaae9c72cae05e7da35c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Simplify code so delimiter only printed in one place\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1479823 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/13, 2:09 AM",
      "commitName": "5b2e5f809be63d301b04eaae9c72cae05e7da35c",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Simplify code so delimiter only printed in one place\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1479823 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/13, 2:09 AM",
          "commitName": "5b2e5f809be63d301b04eaae9c72cae05e7da35c",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "5/6/13, 4:29 PM",
          "commitNameOld": "02c1b35939ee2158ae99acf778a3e9e7a5ad6870",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 223,
          "functionName": "printAndQuote",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,73 +1,71 @@\n-void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n-    final boolean first \u003d newRecord;\n+private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n-    printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar().charValue();\n     Quote quotePolicy \u003d format.getQuotePolicy();\n     if (quotePolicy \u003d\u003d null) {\n         quotePolicy \u003d Quote.MINIMAL;\n     }\n     switch(quotePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             throw new IllegalArgumentException(\"Not implemented yet\");\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n-                if (first) {\n+                if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n-                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Simplify code so delimiter only printed in one place\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1479823 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/13, 2:09 AM",
          "commitName": "5b2e5f809be63d301b04eaae9c72cae05e7da35c",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "5/6/13, 4:29 PM",
          "commitNameOld": "02c1b35939ee2158ae99acf778a3e9e7a5ad6870",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (newRecord) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 223,
          "functionName": "printAndQuote",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,73 +1,71 @@\n-void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n-    final boolean first \u003d newRecord;\n+private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n-    printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar().charValue();\n     Quote quotePolicy \u003d format.getQuotePolicy();\n     if (quotePolicy \u003d\u003d null) {\n         quotePolicy \u003d Quote.MINIMAL;\n     }\n     switch(quotePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             throw new IllegalArgumentException(\"Not implemented yet\");\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n-                if (first) {\n+                if (newRecord) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n-                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+                if (newRecord \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6640e8597c16ecee01ef06555f7aa12cfa8c0c2d": {
      "type": "Ybodychange",
      "commitMessage": "Standardise on record rather than line; fix incorrect Javadoc comments\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1468827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/17/13, 3:31 AM",
      "commitName": "6640e8597c16ecee01ef06555f7aa12cfa8c0c2d",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "4/8/13, 1:34 PM",
      "commitNameOld": "75b9a4ba4ed34eed0afe0a6c3b8a79979685a379",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 8.58,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newRecord;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (first) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 229,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,73 +1,73 @@\n void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n-    final boolean first \u003d newLine;\n+    final boolean first \u003d newRecord;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar().charValue();\n     Quote quotePolicy \u003d format.getQuotePolicy();\n     if (quotePolicy \u003d\u003d null) {\n         quotePolicy \u003d Quote.MINIMAL;\n     }\n     switch(quotePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             throw new IllegalArgumentException(\"Not implemented yet\");\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (first) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "374cd7b16d1ec48bb68fd748427c4b8942767c6b": {
      "type": "Yformatchange",
      "commitMessage": "Remove trailing white spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1458683 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/20/13, 1:31 AM",
      "commitName": "374cd7b16d1ec48bb68fd748427c4b8942767c6b",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "11/15/12, 2:44 PM",
      "commitNameOld": "8886fac6d7909dc15b836a580691426e6c867e1a",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 124.41,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (first) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 218,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "68352ee98fdb3d07be160357514abe2558a90c0d": {
      "type": "Yparametermetachange",
      "commitMessage": "Use the final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1409464 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/14/12, 1:58 PM",
      "commitName": "68352ee98fdb3d07be160357514abe2558a90c0d",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "11/14/12, 1:50 PM",
      "commitNameOld": "6a34b823c807325bc251ef43c66c307adcd947b8",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (first) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 218,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,73 +1,73 @@\n-void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n+void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar().charValue();\n     Quote quotePolicy \u003d format.getQuotePolicy();\n     if (quotePolicy \u003d\u003d null) {\n         quotePolicy \u003d Quote.MINIMAL;\n     }\n     switch(quotePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             throw new IllegalArgumentException(\"Not implemented yet\");\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (first) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[object-Object, value-CharSequence(modifiers-final), offset-int(modifiers-final), len-int(modifiers-final)]",
        "newValue": "[object-Object(modifiers-final), value-CharSequence(modifiers-final), offset-int(modifiers-final), len-int(modifiers-final)]"
      }
    },
    "3a90cfe249a1c3623aec65965ac59e1a8674163e": {
      "type": "Ybodychange",
      "commitMessage": "Explicit unboxing; associated Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398365 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/15/12, 9:27 AM",
      "commitName": "3a90cfe249a1c3623aec65965ac59e1a8674163e",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "10/15/12, 6:15 AM",
      "commitNameOld": "6870022916139c3fcacef9f57d053ccb03f0c3c3",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar().charValue();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (first) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 219,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,73 +1,73 @@\n void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n-    final char quoteChar \u003d format.getQuoteChar();\n+    final char quoteChar \u003d format.getQuoteChar().charValue();\n     Quote quotePolicy \u003d format.getQuotePolicy();\n     if (quotePolicy \u003d\u003d null) {\n         quotePolicy \u003d Quote.MINIMAL;\n     }\n     switch(quotePolicy) {\n         case ALL:\n             quote \u003d true;\n             break;\n         case NON_NUMERIC:\n             quote \u003d !(object instanceof Number);\n             break;\n         case NONE:\n             throw new IllegalArgumentException(\"Not implemented yet\");\n         case MINIMAL:\n             if (len \u003c\u003d 0) {\n                 if (first) {\n                     quote \u003d true;\n                 }\n             } else {\n                 char c \u003d value.charAt(pos);\n                 if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                     quote \u003d true;\n                 } else if (c \u003c\u003d COMMENT) {\n                     quote \u003d true;\n                 } else {\n                     while (pos \u003c end) {\n                         c \u003d value.charAt(pos);\n                         if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                             quote \u003d true;\n                             break;\n                         }\n                         pos++;\n                     }\n                     if (!quote) {\n                         pos \u003d end - 1;\n                         c \u003d value.charAt(pos);\n                         if (c \u003c\u003d SP) {\n                             quote \u003d true;\n                         }\n                     }\n                 }\n             }\n             if (!quote) {\n                 out.append(value, start, end);\n                 return;\n             }\n             break;\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f51f43d18421d02fab7b39b55e6b55c32b5622d2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a \u0027not implemented yet\u0027 exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398137 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/14/12, 2:23 PM",
      "commitName": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a \u0027not implemented yet\u0027 exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398137 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/14/12, 2:23 PM",
          "commitName": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/14/12, 2:01 PM",
          "commitNameOld": "2f2d9aa7807b22a7f21b025969eb533b118e0b54",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (first) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 210,
          "functionName": "printAndQuote",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,57 +1,73 @@\n-void printAndQuote(final CharSequence value, final int offset, final int len) throws IOException {\n+void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar();\n-    if (format.getQuotePolicy() \u003d\u003d Quote.ALL) {\n-        quote \u003d true;\n-    } else {\n-        if (len \u003c\u003d 0) {\n-            if (first) {\n-                quote \u003d true;\n-            }\n-        } else {\n-            char c \u003d value.charAt(pos);\n-            if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n-                quote \u003d true;\n-            } else if (c \u003c\u003d COMMENT) {\n-                quote \u003d true;\n+    Quote quotePolicy \u003d format.getQuotePolicy();\n+    if (quotePolicy \u003d\u003d null) {\n+        quotePolicy \u003d Quote.MINIMAL;\n+    }\n+    switch(quotePolicy) {\n+        case ALL:\n+            quote \u003d true;\n+            break;\n+        case NON_NUMERIC:\n+            quote \u003d !(object instanceof Number);\n+            break;\n+        case NONE:\n+            throw new IllegalArgumentException(\"Not implemented yet\");\n+        case MINIMAL:\n+            if (len \u003c\u003d 0) {\n+                if (first) {\n+                    quote \u003d true;\n+                }\n             } else {\n-                while (pos \u003c end) {\n-                    c \u003d value.charAt(pos);\n-                    if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n-                        quote \u003d true;\n-                        break;\n+                char c \u003d value.charAt(pos);\n+                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+                    quote \u003d true;\n+                } else if (c \u003c\u003d COMMENT) {\n+                    quote \u003d true;\n+                } else {\n+                    while (pos \u003c end) {\n+                        c \u003d value.charAt(pos);\n+                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n+                            quote \u003d true;\n+                            break;\n+                        }\n+                        pos++;\n                     }\n-                    pos++;\n-                }\n-                if (!quote) {\n-                    pos \u003d end - 1;\n-                    c \u003d value.charAt(pos);\n-                    if (c \u003c\u003d SP) {\n-                        quote \u003d true;\n+                    if (!quote) {\n+                        pos \u003d end - 1;\n+                        c \u003d value.charAt(pos);\n+                        if (c \u003c\u003d SP) {\n+                            quote \u003d true;\n+                        }\n                     }\n                 }\n             }\n-        }\n-        if (!quote) {\n-            out.append(value, start, end);\n-            return;\n-        }\n+            if (!quote) {\n+                out.append(value, start, end);\n+                return;\n+            }\n+            break;\n+    }\n+    if (!quote) {\n+        out.append(value, start, end);\n+        return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[value-CharSequence(modifiers-final), offset-int(modifiers-final), len-int(modifiers-final)]",
            "newValue": "[object-Object, value-CharSequence(modifiers-final), offset-int(modifiers-final), len-int(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a \u0027not implemented yet\u0027 exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398137 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/14/12, 2:23 PM",
          "commitName": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/14/12, 2:01 PM",
          "commitNameOld": "2f2d9aa7807b22a7f21b025969eb533b118e0b54",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar();\n    Quote quotePolicy \u003d format.getQuotePolicy();\n    if (quotePolicy \u003d\u003d null) {\n        quotePolicy \u003d Quote.MINIMAL;\n    }\n    switch(quotePolicy) {\n        case ALL:\n            quote \u003d true;\n            break;\n        case NON_NUMERIC:\n            quote \u003d !(object instanceof Number);\n            break;\n        case NONE:\n            throw new IllegalArgumentException(\"Not implemented yet\");\n        case MINIMAL:\n            if (len \u003c\u003d 0) {\n                if (first) {\n                    quote \u003d true;\n                }\n            } else {\n                char c \u003d value.charAt(pos);\n                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                    quote \u003d true;\n                } else if (c \u003c\u003d COMMENT) {\n                    quote \u003d true;\n                } else {\n                    while (pos \u003c end) {\n                        c \u003d value.charAt(pos);\n                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                            quote \u003d true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!quote) {\n                        pos \u003d end - 1;\n                        c \u003d value.charAt(pos);\n                        if (c \u003c\u003d SP) {\n                            quote \u003d true;\n                        }\n                    }\n                }\n            }\n            if (!quote) {\n                out.append(value, start, end);\n                return;\n            }\n            break;\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 210,
          "functionName": "printAndQuote",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,57 +1,73 @@\n-void printAndQuote(final CharSequence value, final int offset, final int len) throws IOException {\n+void printAndQuote(Object object, final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar();\n-    if (format.getQuotePolicy() \u003d\u003d Quote.ALL) {\n-        quote \u003d true;\n-    } else {\n-        if (len \u003c\u003d 0) {\n-            if (first) {\n-                quote \u003d true;\n-            }\n-        } else {\n-            char c \u003d value.charAt(pos);\n-            if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n-                quote \u003d true;\n-            } else if (c \u003c\u003d COMMENT) {\n-                quote \u003d true;\n+    Quote quotePolicy \u003d format.getQuotePolicy();\n+    if (quotePolicy \u003d\u003d null) {\n+        quotePolicy \u003d Quote.MINIMAL;\n+    }\n+    switch(quotePolicy) {\n+        case ALL:\n+            quote \u003d true;\n+            break;\n+        case NON_NUMERIC:\n+            quote \u003d !(object instanceof Number);\n+            break;\n+        case NONE:\n+            throw new IllegalArgumentException(\"Not implemented yet\");\n+        case MINIMAL:\n+            if (len \u003c\u003d 0) {\n+                if (first) {\n+                    quote \u003d true;\n+                }\n             } else {\n-                while (pos \u003c end) {\n-                    c \u003d value.charAt(pos);\n-                    if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n-                        quote \u003d true;\n-                        break;\n+                char c \u003d value.charAt(pos);\n+                if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+                    quote \u003d true;\n+                } else if (c \u003c\u003d COMMENT) {\n+                    quote \u003d true;\n+                } else {\n+                    while (pos \u003c end) {\n+                        c \u003d value.charAt(pos);\n+                        if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n+                            quote \u003d true;\n+                            break;\n+                        }\n+                        pos++;\n                     }\n-                    pos++;\n-                }\n-                if (!quote) {\n-                    pos \u003d end - 1;\n-                    c \u003d value.charAt(pos);\n-                    if (c \u003c\u003d SP) {\n-                        quote \u003d true;\n+                    if (!quote) {\n+                        pos \u003d end - 1;\n+                        c \u003d value.charAt(pos);\n+                        if (c \u003c\u003d SP) {\n+                            quote \u003d true;\n+                        }\n                     }\n                 }\n             }\n-        }\n-        if (!quote) {\n-            out.append(value, start, end);\n-            return;\n-        }\n+            if (!quote) {\n+                out.append(value, start, end);\n+                return;\n+            }\n+            break;\n+    }\n+    if (!quote) {\n+        out.append(value, start, end);\n+        return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2f2d9aa7807b22a7f21b025969eb533b118e0b54": {
      "type": "Ybodychange",
      "commitMessage": "Implement Quote.ALL. Bullet-proof a unit test.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398133 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/14/12, 2:01 PM",
      "commitName": "2f2d9aa7807b22a7f21b025969eb533b118e0b54",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/14/12, 11:08 AM",
      "commitNameOld": "cdef24d9182acef747aa03b8cb6ff5865c843f14",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndQuote(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar();\n    if (format.getQuotePolicy() \u003d\u003d Quote.ALL) {\n        quote \u003d true;\n    } else {\n        if (len \u003c\u003d 0) {\n            if (first) {\n                quote \u003d true;\n            }\n        } else {\n            char c \u003d value.charAt(pos);\n            if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n                quote \u003d true;\n            } else if (c \u003c\u003d COMMENT) {\n                quote \u003d true;\n            } else {\n                while (pos \u003c end) {\n                    c \u003d value.charAt(pos);\n                    if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                        quote \u003d true;\n                        break;\n                    }\n                    pos++;\n                }\n                if (!quote) {\n                    pos \u003d end - 1;\n                    c \u003d value.charAt(pos);\n                    if (c \u003c\u003d SP) {\n                        quote \u003d true;\n                    }\n                }\n            }\n        }\n        if (!quote) {\n            out.append(value, start, end);\n            return;\n        }\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 210,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,57 @@\n void printAndQuote(final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar();\n-    if (len \u003c\u003d 0) {\n-        if (first) {\n-            quote \u003d true;\n-        }\n+    if (format.getQuotePolicy() \u003d\u003d Quote.ALL) {\n+        quote \u003d true;\n     } else {\n-        char c \u003d value.charAt(pos);\n-        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n-            quote \u003d true;\n-        } else if (c \u003c\u003d COMMENT) {\n-            quote \u003d true;\n-        } else {\n-            while (pos \u003c end) {\n-                c \u003d value.charAt(pos);\n-                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n-                    quote \u003d true;\n-                    break;\n-                }\n-                pos++;\n+        if (len \u003c\u003d 0) {\n+            if (first) {\n+                quote \u003d true;\n             }\n-            if (!quote) {\n-                pos \u003d end - 1;\n-                c \u003d value.charAt(pos);\n-                if (c \u003c\u003d SP) {\n-                    quote \u003d true;\n+        } else {\n+            char c \u003d value.charAt(pos);\n+            if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+                quote \u003d true;\n+            } else if (c \u003c\u003d COMMENT) {\n+                quote \u003d true;\n+            } else {\n+                while (pos \u003c end) {\n+                    c \u003d value.charAt(pos);\n+                    if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n+                        quote \u003d true;\n+                        break;\n+                    }\n+                    pos++;\n+                }\n+                if (!quote) {\n+                    pos \u003d end - 1;\n+                    c \u003d value.charAt(pos);\n+                    if (c \u003c\u003d SP) {\n+                        quote \u003d true;\n+                    }\n                 }\n             }\n         }\n-    }\n-    if (!quote) {\n-        out.append(value, start, end);\n-        return;\n+        if (!quote) {\n+            out.append(value, start, end);\n+            return;\n+        }\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7fd16f353a89e7360f060432bf7f9773284b1883": {
      "type": "Yrename",
      "commitMessage": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 10:10 PM",
      "commitName": "7fd16f353a89e7360f060432bf7f9773284b1883",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 10:08 PM",
      "commitNameOld": "0dbb499888e5e17322d08802222f2453bf5621a6",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndQuote(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d COMMENT) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d SP) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 194,
      "functionName": "printAndQuote",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n-void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n+void printAndQuote(final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delimChar \u003d format.getDelimiter();\n     final char quoteChar \u003d format.getQuoteChar();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d COMMENT) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value.charAt(pos);\n                 if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value.charAt(pos);\n                 if (c \u003c\u003d SP) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "printAndEncapsulate",
        "newValue": "printAndQuote"
      }
    },
    "17139b840fc076b36f7e15be40495faefee08ad4": {
      "type": "Ybodychange",
      "commitMessage": "Better lvar names.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398015 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 10:06 PM",
      "commitName": "17139b840fc076b36f7e15be40495faefee08ad4",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 10:03 PM",
      "commitNameOld": "2ff847ea913737b28f5ff194e9295c9c5cddb176",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delimChar \u003d format.getDelimiter();\n    final char quoteChar \u003d format.getQuoteChar();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d COMMENT) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d SP) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(quoteChar);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d quoteChar) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(quoteChar);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 194,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n-    final char delim \u003d format.getDelimiter();\n-    final char encapsulator \u003d format.getQuoteChar();\n+    final char delimChar \u003d format.getDelimiter();\n+    final char quoteChar \u003d format.getQuoteChar();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d COMMENT) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value.charAt(pos);\n-                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n+                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d quoteChar || c \u003d\u003d delimChar) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value.charAt(pos);\n                 if (c \u003c\u003d SP) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n-    out.append(encapsulator);\n+    out.append(quoteChar);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n-        if (c \u003d\u003d encapsulator) {\n+        if (c \u003d\u003d quoteChar) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n-    out.append(encapsulator);\n+    out.append(quoteChar);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6e57364216b78bca031f764b8d0a46494ba27b46": {
      "type": "Ybodychange",
      "commitMessage": "Rename \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me and provides symmetry with quotePolicy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398009 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 9:56 PM",
      "commitName": "6e57364216b78bca031f764b8d0a46494ba27b46",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 9:31 PM",
      "commitNameOld": "3be1057064c83bbebb9e1394f754b6bc21cd3d3e",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delim \u003d format.getDelimiter();\n    final char encapsulator \u003d format.getQuoteChar();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d COMMENT) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d SP) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 194,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printDelimiter();\n     final char delim \u003d format.getDelimiter();\n-    final char encapsulator \u003d format.getEncapsulator();\n+    final char encapsulator \u003d format.getQuoteChar();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d COMMENT) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value.charAt(pos);\n                 if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value.charAt(pos);\n                 if (c \u003c\u003d SP) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(encapsulator);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d encapsulator) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(encapsulator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "639e68e2533dbe65e4b33de380aa2bdb790068b3": {
      "type": "Ybodychange",
      "commitMessage": "Rename printSep() to printDelimiter().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 9:06 PM",
      "commitName": "639e68e2533dbe65e4b33de380aa2bdb790068b3",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 9:02 PM",
      "commitNameOld": "75a835a83736de88f13f7e5dcc39eca1e9aeb073",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printDelimiter();\n    final char delim \u003d format.getDelimiter();\n    final char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d COMMENT) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d SP) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 194,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n-    printSep();\n+    printDelimiter();\n     final char delim \u003d format.getDelimiter();\n     final char encapsulator \u003d format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d COMMENT) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value.charAt(pos);\n                 if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value.charAt(pos);\n                 if (c \u003c\u003d SP) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(encapsulator);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d encapsulator) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(encapsulator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "66a56ee1a47645c4d91076858e00ab9977d1a399": {
      "type": "Ybodychange",
      "commitMessage": "Refactor magic strings into constants.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397534 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12, 5:12 AM",
      "commitName": "66a56ee1a47645c4d91076858e00ab9977d1a399",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/11/12, 8:47 AM",
      "commitNameOld": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printSep();\n    final char delim \u003d format.getDelimiter();\n    final char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d COMMENT) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d SP) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 194,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n     final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     final int end \u003d offset + len;\n     printSep();\n     final char delim \u003d format.getDelimiter();\n     final char encapsulator \u003d format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n-        } else if (c \u003c\u003d \u0027#\u0027) {\n+        } else if (c \u003c\u003d COMMENT) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value.charAt(pos);\n-                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n+                if (c \u003d\u003d LF || c \u003d\u003d CR || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value.charAt(pos);\n-                if (c \u003c\u003d \u0027 \u0027) {\n+                if (c \u003c\u003d SP) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(encapsulator);\n     while (pos \u003c end) {\n         final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d encapsulator) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(encapsulator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/12, 8:47 AM",
      "commitName": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/12, 8:47 AM",
          "commitName": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "9/11/12, 1:12 PM",
          "commitNameOld": "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 29.82,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printSep();\n    final char delim \u003d format.getDelimiter();\n    final char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 188,
          "functionName": "printAndEncapsulate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,53 +1,53 @@\n-void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {\n-    boolean first \u003d newLine;\n+void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n+    final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n-    int end \u003d offset + len;\n+    final int end \u003d offset + len;\n     printSep();\n-    char delim \u003d format.getDelimiter();\n-    char encapsulator \u003d format.getEncapsulator();\n+    final char delim \u003d format.getDelimiter();\n+    final char encapsulator \u003d format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d \u0027#\u0027) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value.charAt(pos);\n                 if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value.charAt(pos);\n                 if (c \u003c\u003d \u0027 \u0027) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(encapsulator);\n     while (pos \u003c end) {\n-        char c \u003d value.charAt(pos);\n+        final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d encapsulator) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(encapsulator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/12, 8:47 AM",
          "commitName": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "9/11/12, 1:12 PM",
          "commitNameOld": "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 29.82,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n    final boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    final int end \u003d offset + len;\n    printSep();\n    final char delim \u003d format.getDelimiter();\n    final char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        final char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 188,
          "functionName": "printAndEncapsulate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,53 +1,53 @@\n-void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {\n-    boolean first \u003d newLine;\n+void printAndEncapsulate(final CharSequence value, final int offset, final int len) throws IOException {\n+    final boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n-    int end \u003d offset + len;\n+    final int end \u003d offset + len;\n     printSep();\n-    char delim \u003d format.getDelimiter();\n-    char encapsulator \u003d format.getEncapsulator();\n+    final char delim \u003d format.getDelimiter();\n+    final char encapsulator \u003d format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d \u0027#\u0027) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value.charAt(pos);\n                 if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value.charAt(pos);\n                 if (c \u003c\u003d \u0027 \u0027) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.append(value, start, end);\n         return;\n     }\n     out.append(encapsulator);\n     while (pos \u003c end) {\n-        char c \u003d value.charAt(pos);\n+        final char c \u003d value.charAt(pos);\n         if (c \u003d\u003d encapsulator) {\n             out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.append(value, start, pos);\n     out.append(encapsulator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[value-CharSequence, offset-int, len-int]",
            "newValue": "[value-CharSequence(modifiers-final), offset-int(modifiers-final), len-int(modifiers-final)]"
          }
        }
      ]
    },
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5": {
      "type": "Ybodychange",
      "commitMessage": "Fix Checkstyle: Format for 120 line length.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/11/12, 1:12 PM",
      "commitName": "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "9/11/12, 12:40 PM",
      "commitNameOld": "bf06bed9b8905ccf5409179263707074167ccfc4",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d format.getDelimiter();\n    char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 188,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e7434e5cb57088ee4d5a06e846cab7c4bed7cd10": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Changed CSVPrinter to print to any Appendable and optimized the internals to avoid string copies\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297309 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/12, 4:48 PM",
      "commitName": "e7434e5cb57088ee4d5a06e846cab7c4bed7cd10",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Changed CSVPrinter to print to any Appendable and optimized the internals to avoid string copies\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297309 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/5/12, 4:48 PM",
          "commitName": "e7434e5cb57088ee4d5a06e846cab7c4bed7cd10",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/5/12, 4:09 PM",
          "commitNameOld": "e80b8112a719b6b213e833bd0d1ee27f55bfe5f4",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d format.getDelimiter();\n    char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 185,
          "functionName": "printAndEncapsulate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,53 +1,53 @@\n-void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n+void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {\n     boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     int end \u003d offset + len;\n     printSep();\n     char delim \u003d format.getDelimiter();\n     char encapsulator \u003d format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n-        char c \u003d value[pos];\n+        char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d \u0027#\u0027) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n-                c \u003d value[pos];\n+                c \u003d value.charAt(pos);\n                 if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n-                c \u003d value[pos];\n+                c \u003d value.charAt(pos);\n                 if (c \u003c\u003d \u0027 \u0027) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n-        out.write(value, offset, len);\n+        out.append(value, start, end);\n         return;\n     }\n-    out.write(encapsulator);\n+    out.append(encapsulator);\n     while (pos \u003c end) {\n-        char c \u003d value[pos];\n+        char c \u003d value.charAt(pos);\n         if (c \u003d\u003d encapsulator) {\n-            out.write(value, start, pos - start + 1);\n+            out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n-    out.write(value, start, pos - start);\n-    out.write(encapsulator);\n+    out.append(value, start, pos);\n+    out.append(encapsulator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[value-char[], offset-int, len-int]",
            "newValue": "[value-CharSequence, offset-int, len-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Changed CSVPrinter to print to any Appendable and optimized the internals to avoid string copies\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297309 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/5/12, 4:48 PM",
          "commitName": "e7434e5cb57088ee4d5a06e846cab7c4bed7cd10",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/5/12, 4:09 PM",
          "commitNameOld": "e80b8112a719b6b213e833bd0d1ee27f55bfe5f4",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d format.getDelimiter();\n    char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value.charAt(pos);\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value.charAt(pos);\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value.charAt(pos);\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.append(value, start, end);\n        return;\n    }\n    out.append(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value.charAt(pos);\n        if (c \u003d\u003d encapsulator) {\n            out.append(value, start, pos + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.append(value, start, pos);\n    out.append(encapsulator);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 185,
          "functionName": "printAndEncapsulate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,53 +1,53 @@\n-void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n+void printAndEncapsulate(CharSequence value, int offset, int len) throws IOException {\n     boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     int end \u003d offset + len;\n     printSep();\n     char delim \u003d format.getDelimiter();\n     char encapsulator \u003d format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n-        char c \u003d value[pos];\n+        char c \u003d value.charAt(pos);\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d \u0027#\u0027) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n-                c \u003d value[pos];\n+                c \u003d value.charAt(pos);\n                 if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n-                c \u003d value[pos];\n+                c \u003d value.charAt(pos);\n                 if (c \u003c\u003d \u0027 \u0027) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n-        out.write(value, offset, len);\n+        out.append(value, start, end);\n         return;\n     }\n-    out.write(encapsulator);\n+    out.append(encapsulator);\n     while (pos \u003c end) {\n-        char c \u003d value[pos];\n+        char c \u003d value.charAt(pos);\n         if (c \u003d\u003d encapsulator) {\n-            out.write(value, start, pos - start + 1);\n+            out.append(value, start, pos + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n-    out.write(value, start, pos - start);\n-    out.write(encapsulator);\n+    out.append(value, start, pos);\n+    out.append(encapsulator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e80b8112a719b6b213e833bd0d1ee27f55bfe5f4": {
      "type": "Ybodychange",
      "commitMessage": "Fixed the NullPointerException on null values in CSVPrinter and print an empty value instead (SANDBOX-209)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297306 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/12, 4:09 PM",
      "commitName": "e80b8112a719b6b213e833bd0d1ee27f55bfe5f4",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/5/12, 9:30 AM",
      "commitNameOld": "fafacd179d4a564b3176014039eef05669a26ffb",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d format.getDelimiter();\n    char encapsulator \u003d format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value[pos];\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value[pos];\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value[pos];\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.write(value, offset, len);\n        return;\n    }\n    out.write(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value[pos];\n        if (c \u003d\u003d encapsulator) {\n            out.write(value, start, pos - start + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.write(value, start, pos - start);\n    out.write(encapsulator);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 189,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n     boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     int end \u003d offset + len;\n     printSep();\n-    char delim \u003d this.format.getDelimiter();\n-    char encapsulator \u003d this.format.getEncapsulator();\n+    char delim \u003d format.getDelimiter();\n+    char encapsulator \u003d format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value[pos];\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d \u0027#\u0027) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value[pos];\n                 if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value[pos];\n                 if (c \u003c\u003d \u0027 \u0027) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.write(value, offset, len);\n         return;\n     }\n     out.write(encapsulator);\n     while (pos \u003c end) {\n         char c \u003d value[pos];\n         if (c \u003d\u003d encapsulator) {\n             out.write(value, start, pos - start + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.write(value, start, pos - start);\n     out.write(encapsulator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8": {
      "type": "Ybodychange",
      "commitMessage": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 8:54 AM",
      "commitName": "cb99634ab3d6143dffc90938fc68e15c7f9d25b8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 8:21 AM",
      "commitNameOld": "42476f4b08fe4b075aa36f688f0801857f3635d9",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d this.format.getDelimiter();\n    char encapsulator \u003d this.format.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value[pos];\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value[pos];\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value[pos];\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.write(value, offset, len);\n        return;\n    }\n    out.write(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value[pos];\n        if (c \u003d\u003d encapsulator) {\n            out.write(value, start, pos - start + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.write(value, start, pos - start);\n    out.write(encapsulator);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 189,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n     boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     int end \u003d offset + len;\n     printSep();\n-    char delim \u003d this.strategy.getDelimiter();\n-    char encapsulator \u003d this.strategy.getEncapsulator();\n+    char delim \u003d this.format.getDelimiter();\n+    char encapsulator \u003d this.format.getEncapsulator();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value[pos];\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d \u0027#\u0027) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value[pos];\n                 if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value[pos];\n                 if (c \u003c\u003d \u0027 \u0027) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.write(value, offset, len);\n         return;\n     }\n     out.write(encapsulator);\n     while (pos \u003c end) {\n         char c \u003d value[pos];\n         if (c \u003d\u003d encapsulator) {\n             out.write(value, start, pos - start + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.write(value, start, pos - start);\n     out.write(encapsulator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": {
      "type": "Yfilerename",
      "commitMessage": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 2:38 AM",
      "commitName": "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/20/11, 9:14 AM",
      "commitNameOld": "76cab04936e8b539d983510079419fabeeaecea0",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 111.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d this.strategy.getDelimiter();\n    char encapsulator \u003d this.strategy.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value[pos];\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value[pos];\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value[pos];\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.write(value, offset, len);\n        return;\n    }\n    out.write(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value[pos];\n        if (c \u003d\u003d encapsulator) {\n            out.write(value, start, pos - start + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.write(value, start, pos - start);\n    out.write(encapsulator);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 194,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/csv/CSVPrinter.java",
        "newPath": "src/main/java/org/apache/commons/csv/CSVPrinter.java"
      }
    },
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": {
      "type": "Yformatchange",
      "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/1/11, 12:46 AM",
      "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
      "commitAuthor": "Jacopo Cappellato",
      "commitDateOld": "7/20/10, 2:16 PM",
      "commitNameOld": "0d63758e095d2a671d0ba10fc8cae141add29a45",
      "commitAuthorOld": "Yonik Seeley",
      "daysBetweenCommits": 195.48,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d this.strategy.getDelimiter();\n    char encapsulator \u003d this.strategy.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value[pos];\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value[pos];\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value[pos];\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.write(value, offset, len);\n        return;\n    }\n    out.write(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value[pos];\n        if (c \u003d\u003d encapsulator) {\n            out.write(value, start, pos - start + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.write(value, start, pos - start);\n    out.write(encapsulator);\n}",
      "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 194,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "0d63758e095d2a671d0ba10fc8cae141add29a45": {
      "type": "Ybodychange",
      "commitMessage": "SANDBOX-322: remember to print separators everywhere\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@966014 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/20/10, 2:16 PM",
      "commitName": "0d63758e095d2a671d0ba10fc8cae141add29a45",
      "commitAuthor": "Yonik Seeley",
      "commitDateOld": "6/16/10, 9:12 AM",
      "commitNameOld": "02b21463e68e7b3d5f3d9980746d131a08a08eed",
      "commitAuthorOld": "Yonik Seeley",
      "daysBetweenCommits": 34.21,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    printSep();\n    char delim \u003d this.strategy.getDelimiter();\n    char encapsulator \u003d this.strategy.getEncapsulator();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value[pos];\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value[pos];\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value[pos];\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.write(value, offset, len);\n        return;\n    }\n    out.write(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value[pos];\n        if (c \u003d\u003d encapsulator) {\n            out.write(value, start, pos - start + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.write(value, start, pos - start);\n    out.write(encapsulator);\n}",
      "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 187,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,53 @@\n void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n     boolean first \u003d newLine;\n     boolean quote \u003d false;\n     int start \u003d offset;\n     int pos \u003d offset;\n     int end \u003d offset + len;\n+    printSep();\n     char delim \u003d this.strategy.getDelimiter();\n     char encapsulator \u003d this.strategy.getEncapsulator();\n-    printSep();\n     if (len \u003c\u003d 0) {\n         if (first) {\n             quote \u003d true;\n         }\n     } else {\n         char c \u003d value[pos];\n         if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         } else if (c \u003c\u003d \u0027#\u0027) {\n             quote \u003d true;\n         } else {\n             while (pos \u003c end) {\n                 c \u003d value[pos];\n                 if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                     quote \u003d true;\n                     break;\n                 }\n                 pos++;\n             }\n             if (!quote) {\n                 pos \u003d end - 1;\n                 c \u003d value[pos];\n                 if (c \u003c\u003d \u0027 \u0027) {\n                     quote \u003d true;\n                 }\n             }\n         }\n     }\n     if (!quote) {\n         out.write(value, offset, len);\n         return;\n     }\n     out.write(encapsulator);\n     while (pos \u003c end) {\n         char c \u003d value[pos];\n         if (c \u003d\u003d encapsulator) {\n             out.write(value, start, pos - start + 1);\n             start \u003d pos;\n         }\n         pos++;\n     }\n     out.write(value, start, pos - start);\n     out.write(encapsulator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "02b21463e68e7b3d5f3d9980746d131a08a08eed": {
      "type": "Yintroduced",
      "commitMessage": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 9:12 AM",
      "commitName": "02b21463e68e7b3d5f3d9980746d131a08a08eed",
      "commitAuthor": "Yonik Seeley",
      "diff": "@@ -0,0 +1,53 @@\n+void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n+    boolean first \u003d newLine;\n+    boolean quote \u003d false;\n+    int start \u003d offset;\n+    int pos \u003d offset;\n+    int end \u003d offset + len;\n+    char delim \u003d this.strategy.getDelimiter();\n+    char encapsulator \u003d this.strategy.getEncapsulator();\n+    printSep();\n+    if (len \u003c\u003d 0) {\n+        if (first) {\n+            quote \u003d true;\n+        }\n+    } else {\n+        char c \u003d value[pos];\n+        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+            quote \u003d true;\n+        } else if (c \u003c\u003d \u0027#\u0027) {\n+            quote \u003d true;\n+        } else {\n+            while (pos \u003c end) {\n+                c \u003d value[pos];\n+                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n+                    quote \u003d true;\n+                    break;\n+                }\n+                pos++;\n+            }\n+            if (!quote) {\n+                pos \u003d end - 1;\n+                c \u003d value[pos];\n+                if (c \u003c\u003d \u0027 \u0027) {\n+                    quote \u003d true;\n+                }\n+            }\n+        }\n+    }\n+    if (!quote) {\n+        out.write(value, offset, len);\n+        return;\n+    }\n+    out.write(encapsulator);\n+    while (pos \u003c end) {\n+        char c \u003d value[pos];\n+        if (c \u003d\u003d encapsulator) {\n+            out.write(value, start, pos - start + 1);\n+            start \u003d pos;\n+        }\n+        pos++;\n+    }\n+    out.write(value, start, pos - start);\n+    out.write(encapsulator);\n+}\n\\ No newline at end of file\n",
      "actualSource": "void printAndEncapsulate(char[] value, int offset, int len) throws IOException {\n    boolean first \u003d newLine;\n    boolean quote \u003d false;\n    int start \u003d offset;\n    int pos \u003d offset;\n    int end \u003d offset + len;\n    char delim \u003d this.strategy.getDelimiter();\n    char encapsulator \u003d this.strategy.getEncapsulator();\n    printSep();\n    if (len \u003c\u003d 0) {\n        if (first) {\n            quote \u003d true;\n        }\n    } else {\n        char c \u003d value[pos];\n        if (first \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        } else if (c \u003c\u003d \u0027#\u0027) {\n            quote \u003d true;\n        } else {\n            while (pos \u003c end) {\n                c \u003d value[pos];\n                if (c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d encapsulator || c \u003d\u003d delim) {\n                    quote \u003d true;\n                    break;\n                }\n                pos++;\n            }\n            if (!quote) {\n                pos \u003d end - 1;\n                c \u003d value[pos];\n                if (c \u003c\u003d \u0027 \u0027) {\n                    quote \u003d true;\n                }\n            }\n        }\n    }\n    if (!quote) {\n        out.write(value, offset, len);\n        return;\n    }\n    out.write(encapsulator);\n    while (pos \u003c end) {\n        char c \u003d value[pos];\n        if (c \u003d\u003d encapsulator) {\n            out.write(value, start, pos - start + 1);\n            start \u003d pos;\n        }\n        pos++;\n    }\n    out.write(value, start, pos - start);\n    out.write(encapsulator);\n}",
      "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 190,
      "functionName": "printAndEncapsulate",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}