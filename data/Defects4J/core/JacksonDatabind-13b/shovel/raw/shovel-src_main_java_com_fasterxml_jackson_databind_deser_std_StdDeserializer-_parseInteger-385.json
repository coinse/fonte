{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StdDeserializer.java",
  "functionName": "_parseInteger",
  "functionId": "_parseInteger___jp-JsonParser__ctxt-DeserializationContext",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 385,
  "functionEndLine": 431,
  "numCommitsSeen": 44,
  "timeTaken": 2326,
  "changeHistory": [
    "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1",
    "3568997a05847b757f3d7510a4c833b3406bacb6",
    "955d1f9468e8cb312689c5b7377b848123587b23",
    "dd3485677ca295a8fcbf99dba90db5337755b8ef",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1": "Ybodychange",
    "3568997a05847b757f3d7510a4c833b3406bacb6": "Yexceptionschange",
    "955d1f9468e8cb312689c5b7377b848123587b23": "Ybodychange",
    "dd3485677ca295a8fcbf99dba90db5337755b8ef": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1": {
      "type": "Ybodychange",
      "commitMessage": "Adding \"UNWRAP_SINGLE_VALUE_ARRAYS\" DeserializationFeature\n\nFixes issue #381. Added new feature that determines whether it is\nacceptable to coerce a single value array (in JSON) to the corresponding\nvalue type.\n",
      "commitDate": "1/7/14, 8:04 PM",
      "commitName": "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1",
      "commitAuthor": "Matthew Morrissette",
      "commitDateOld": "1/1/14, 4:55 PM",
      "commitNameOld": "2ca3fa5b3c2f645a1173258efd43195df5b9c796",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.13,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return Integer.valueOf(jp.getIntValue());\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        try {\n            int len \u003d text.length();\n            if (_hasTextualNull(text)) {\n                return (Integer) getNullValue();\n            }\n            if (len \u003e 9) {\n                long l \u003d Long.parseLong(text);\n                if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                }\n                return Integer.valueOf((int) l);\n            }\n            if (len \u003d\u003d 0) {\n                return (Integer) getEmptyValue();\n            }\n            return Integer.valueOf(NumberInput.parseInt(text));\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n        }\n    }\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (Integer) getNullValue();\n    }\n    if (t \u003d\u003d JsonToken.START_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n        jp.nextToken();\n        final Integer parsed \u003d _parseInteger(jp, ctxt);\n        t \u003d jp.nextToken();\n        if (t !\u003d JsonToken.END_ARRAY) {\n            throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \"Attempted to unwrap single value array for single \u0027Integer\u0027 value but there was more than a single value in the array\");\n        }\n        return parsed;\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 372,
      "functionName": "_parseInteger",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,41 @@\n protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n         return Integer.valueOf(jp.getIntValue());\n     }\n     if (t \u003d\u003d JsonToken.VALUE_STRING) {\n         String text \u003d jp.getText().trim();\n         try {\n             int len \u003d text.length();\n             if (_hasTextualNull(text)) {\n                 return (Integer) getNullValue();\n             }\n             if (len \u003e 9) {\n                 long l \u003d Long.parseLong(text);\n                 if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                     throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                 }\n                 return Integer.valueOf((int) l);\n             }\n             if (len \u003d\u003d 0) {\n                 return (Integer) getEmptyValue();\n             }\n             return Integer.valueOf(NumberInput.parseInt(text));\n         } catch (IllegalArgumentException iae) {\n             throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n         }\n     }\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (Integer) getNullValue();\n     }\n+    if (t \u003d\u003d JsonToken.START_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+        jp.nextToken();\n+        final Integer parsed \u003d _parseInteger(jp, ctxt);\n+        t \u003d jp.nextToken();\n+        if (t !\u003d JsonToken.END_ARRAY) {\n+            throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \"Attempted to unwrap single value array for single \u0027Integer\u0027 value but there was more than a single value in the array\");\n+        }\n+        return parsed;\n+    }\n     throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3568997a05847b757f3d7510a4c833b3406bacb6": {
      "type": "Yexceptionschange",
      "commitMessage": "yet more refactoring\n",
      "commitDate": "12/31/13, 10:50 PM",
      "commitName": "3568997a05847b757f3d7510a4c833b3406bacb6",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/27/13, 4:59 PM",
      "commitNameOld": "fd54befeadb6313b2d36a8e5f4f5dad3ef2ad5f3",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return Integer.valueOf(jp.getIntValue());\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        try {\n            int len \u003d text.length();\n            if (_hasTextualNull(text)) {\n                return (Integer) getNullValue();\n            }\n            if (len \u003e 9) {\n                long l \u003d Long.parseLong(text);\n                if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                }\n                return Integer.valueOf((int) l);\n            }\n            if (len \u003d\u003d 0) {\n                return (Integer) getEmptyValue();\n            }\n            return Integer.valueOf(NumberInput.parseInt(text));\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n        }\n    }\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (Integer) getNullValue();\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 325,
      "functionName": "_parseInteger",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n-protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n         return Integer.valueOf(jp.getIntValue());\n     }\n     if (t \u003d\u003d JsonToken.VALUE_STRING) {\n         String text \u003d jp.getText().trim();\n         try {\n             int len \u003d text.length();\n             if (_hasTextualNull(text)) {\n                 return (Integer) getNullValue();\n             }\n             if (len \u003e 9) {\n                 long l \u003d Long.parseLong(text);\n                 if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                     throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                 }\n                 return Integer.valueOf((int) l);\n             }\n             if (len \u003d\u003d 0) {\n                 return (Integer) getEmptyValue();\n             }\n             return Integer.valueOf(NumberInput.parseInt(text));\n         } catch (IllegalArgumentException iae) {\n             throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n         }\n     }\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (Integer) getNullValue();\n     }\n     throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[IOException, JsonProcessingException]",
        "newValue": "[IOException]"
      }
    },
    "955d1f9468e8cb312689c5b7377b848123587b23": {
      "type": "Ybodychange",
      "commitMessage": "Add support for coercion from String \"null\" (in addition to null token)\n",
      "commitDate": "8/10/13, 7:41 PM",
      "commitName": "955d1f9468e8cb312689c5b7377b848123587b23",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/17/13, 7:31 PM",
      "commitNameOld": "c1661b67723ed5c394b1fad5595bb01b370bd1c0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 115.01,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return Integer.valueOf(jp.getIntValue());\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        try {\n            int len \u003d text.length();\n            if (_hasTextualNull(text)) {\n                return (Integer) getNullValue();\n            }\n            if (len \u003e 9) {\n                long l \u003d Long.parseLong(text);\n                if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                }\n                return Integer.valueOf((int) l);\n            }\n            if (len \u003d\u003d 0) {\n                return (Integer) getEmptyValue();\n            }\n            return Integer.valueOf(NumberInput.parseInt(text));\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n        }\n    }\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (Integer) getNullValue();\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 313,
      "functionName": "_parseInteger",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,32 @@\n protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n         return Integer.valueOf(jp.getIntValue());\n     }\n     if (t \u003d\u003d JsonToken.VALUE_STRING) {\n         String text \u003d jp.getText().trim();\n         try {\n             int len \u003d text.length();\n+            if (_hasTextualNull(text)) {\n+                return (Integer) getNullValue();\n+            }\n             if (len \u003e 9) {\n                 long l \u003d Long.parseLong(text);\n                 if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                     throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                 }\n                 return Integer.valueOf((int) l);\n             }\n             if (len \u003d\u003d 0) {\n                 return (Integer) getEmptyValue();\n             }\n             return Integer.valueOf(NumberInput.parseInt(text));\n         } catch (IllegalArgumentException iae) {\n             throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n         }\n     }\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (Integer) getNullValue();\n     }\n     throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd3485677ca295a8fcbf99dba90db5337755b8ef": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [Issue-20], JsonFormatException\n",
      "commitDate": "7/18/12, 5:25 PM",
      "commitName": "dd3485677ca295a8fcbf99dba90db5337755b8ef",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/19/12, 7:32 PM",
      "commitNameOld": "d01369f89c6f3dd1f47d632bdd8e89dcafc257f3",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 89.91,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return Integer.valueOf(jp.getIntValue());\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        try {\n            int len \u003d text.length();\n            if (len \u003e 9) {\n                long l \u003d Long.parseLong(text);\n                if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                    throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                }\n                return Integer.valueOf((int) l);\n            }\n            if (len \u003d\u003d 0) {\n                return (Integer) getEmptyValue();\n            }\n            return Integer.valueOf(NumberInput.parseInt(text));\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n        }\n    }\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (Integer) getNullValue();\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 297,
      "functionName": "_parseInteger",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n         return Integer.valueOf(jp.getIntValue());\n     }\n     if (t \u003d\u003d JsonToken.VALUE_STRING) {\n         String text \u003d jp.getText().trim();\n         try {\n             int len \u003d text.length();\n             if (len \u003e 9) {\n                 long l \u003d Long.parseLong(text);\n                 if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n-                    throw ctxt.weirdStringException(_valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n+                    throw ctxt.weirdStringException(text, _valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                 }\n                 return Integer.valueOf((int) l);\n             }\n             if (len \u003d\u003d 0) {\n                 return (Integer) getEmptyValue();\n             }\n             return Integer.valueOf(NumberInput.parseInt(text));\n         } catch (IllegalArgumentException iae) {\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid Integer value\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid Integer value\");\n         }\n     }\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (Integer) getNullValue();\n     }\n     throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,29 @@\n+protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    JsonToken t \u003d jp.getCurrentToken();\n+    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n+        return Integer.valueOf(jp.getIntValue());\n+    }\n+    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n+        String text \u003d jp.getText().trim();\n+        try {\n+            int len \u003d text.length();\n+            if (len \u003e 9) {\n+                long l \u003d Long.parseLong(text);\n+                if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n+                    throw ctxt.weirdStringException(_valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n+                }\n+                return Integer.valueOf((int) l);\n+            }\n+            if (len \u003d\u003d 0) {\n+                return (Integer) getEmptyValue();\n+            }\n+            return Integer.valueOf(NumberInput.parseInt(text));\n+        } catch (IllegalArgumentException iae) {\n+            throw ctxt.weirdStringException(_valueClass, \"not a valid Integer value\");\n+        }\n+    }\n+    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n+        return (Integer) getNullValue();\n+    }\n+    throw ctxt.mappingException(_valueClass, t);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected final Integer _parseInteger(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return Integer.valueOf(jp.getIntValue());\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        try {\n            int len \u003d text.length();\n            if (len \u003e 9) {\n                long l \u003d Long.parseLong(text);\n                if (l \u003c Integer.MIN_VALUE || l \u003e Integer.MAX_VALUE) {\n                    throw ctxt.weirdStringException(_valueClass, \"Overflow: numeric value (\" + text + \") out of range of Integer (\" + Integer.MIN_VALUE + \" - \" + Integer.MAX_VALUE + \")\");\n                }\n                return Integer.valueOf((int) l);\n            }\n            if (len \u003d\u003d 0) {\n                return (Integer) getEmptyValue();\n            }\n            return Integer.valueOf(NumberInput.parseInt(text));\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(_valueClass, \"not a valid Integer value\");\n        }\n    }\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (Integer) getNullValue();\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 275,
      "functionName": "_parseInteger",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}