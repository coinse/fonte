{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OptionalHandlerFactory.java",
  "functionName": "findDeserializer",
  "functionId": "findDeserializer___type-JavaType__config-DeserializationConfig__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 64,
  "functionEndLine": 87,
  "numCommitsSeen": 36,
  "timeTaken": 866,
  "changeHistory": [
    "bba2bad031b33f5fa7b14680917590c7c4b6004c",
    "0251775c9a6dc8bec151e3461051ef46fd0378ff",
    "ad472c1cf31c7b8efa788d2bf12967ace82e6c45",
    "f0b28a96644b3dc22c997a05975de335dfed0418",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "bba2bad031b33f5fa7b14680917590c7c4b6004c": "Ybodychange",
    "0251775c9a6dc8bec151e3461051ef46fd0378ff": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "ad472c1cf31c7b8efa788d2bf12967ace82e6c45": "Ybodychange",
    "f0b28a96644b3dc22c997a05975de335dfed0418": "Yparameterchange",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Yparameterchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bba2bad031b33f5fa7b14680917590c7c4b6004c": {
      "type": "Ybodychange",
      "commitMessage": "more cleanup\n",
      "commitDate": "4/16/13, 5:47 PM",
      "commitName": "bba2bad031b33f5fa7b14680917590c7c4b6004c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/16/13, 5:34 PM",
      "commitNameOld": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 67,
      "functionName": "findDeserializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "0251775c9a6dc8bec151e3461051ef46fd0378ff": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
      "commitDate": "4/16/13, 5:34 PM",
      "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
          "commitDate": "4/16/13, 5:34 PM",
          "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/5/12, 4:22 PM",
          "commitNameOld": "70c2de957f517f569dba98ceaa5aecd9e56a11a9",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 193.05,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
          "functionStartLine": 67,
          "functionName": "findDeserializer",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,19 @@\n-public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config) {\n+public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n     if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n-    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n-    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n-    for (StdDeserializer\u003c?\u003e deser : entries) {\n-        if (rawType \u003d\u003d deser.getValueClass()) {\n-            return deser;\n-        }\n-    }\n-    for (StdDeserializer\u003c?\u003e deser : entries) {\n-        if (deser.getValueClass().isAssignableFrom(rawType)) {\n-            return deser;\n-        }\n-    }\n-    return null;\n+    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[type-JavaType, config-DeserializationConfig]",
            "newValue": "[type-JavaType, config-DeserializationConfig, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
          "commitDate": "4/16/13, 5:34 PM",
          "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/5/12, 4:22 PM",
          "commitNameOld": "70c2de957f517f569dba98ceaa5aecd9e56a11a9",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 193.05,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
          "functionStartLine": 67,
          "functionName": "findDeserializer",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,19 @@\n-public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config) {\n+public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n     if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n-    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n-    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n-    for (StdDeserializer\u003c?\u003e deser : entries) {\n-        if (rawType \u003d\u003d deser.getValueClass()) {\n-            return deser;\n-        }\n-    }\n-    for (StdDeserializer\u003c?\u003e deser : entries) {\n-        if (deser.getValueClass().isAssignableFrom(rawType)) {\n-            return deser;\n-        }\n-    }\n-    return null;\n+    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[JsonMappingException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
          "commitDate": "4/16/13, 5:34 PM",
          "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/5/12, 4:22 PM",
          "commitNameOld": "70c2de957f517f569dba98ceaa5aecd9e56a11a9",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 193.05,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
          "functionStartLine": 67,
          "functionName": "findDeserializer",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,19 @@\n-public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config) {\n+public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n     if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n-    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n-    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n-    for (StdDeserializer\u003c?\u003e deser : entries) {\n-        if (rawType \u003d\u003d deser.getValueClass()) {\n-            return deser;\n-        }\n-    }\n-    for (StdDeserializer\u003c?\u003e deser : entries) {\n-        if (deser.getValueClass().isAssignableFrom(rawType)) {\n-            return deser;\n-        }\n-    }\n-    return null;\n+    return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ad472c1cf31c7b8efa788d2bf12967ace82e6c45": {
      "type": "Ybodychange",
      "commitMessage": "Removed Joda datatype support from core databinding package, now at: https://github.com/FasterXML/jackson-datatype-joda\n",
      "commitDate": "3/2/12, 10:11 AM",
      "commitName": "ad472c1cf31c7b8efa788d2bf12967ace82e6c45",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 27.51,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (rawType \u003d\u003d deser.getValueClass()) {\n            return deser;\n        }\n    }\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (deser.getValueClass().isAssignableFrom(rawType)) {\n            return deser;\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 84,
      "functionName": "findDeserializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,31 @@\n public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config) {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n-    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n-        factoryName \u003d DESERIALIZERS_FOR_JODA_DATETIME;\n-    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n+    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n     @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n     Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n     for (StdDeserializer\u003c?\u003e deser : entries) {\n         if (rawType \u003d\u003d deser.getValueClass()) {\n             return deser;\n         }\n     }\n     for (StdDeserializer\u003c?\u003e deser : entries) {\n         if (deser.getValueClass().isAssignableFrom(rawType)) {\n             return deser;\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0b28a96644b3dc22c997a05975de335dfed0418": {
      "type": "Yparameterchange",
      "commitMessage": "...\n",
      "commitDate": "1/24/12, 1:27 PM",
      "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:23 AM",
      "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n        factoryName \u003d DESERIALIZERS_FOR_JODA_DATETIME;\n    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (rawType \u003d\u003d deser.getValueClass()) {\n            return deser;\n        }\n    }\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (deser.getValueClass().isAssignableFrom(rawType)) {\n            return deser;\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 89,
      "functionName": "findDeserializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n-public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, DeserializerCache p) {\n+public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config) {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n     if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n         factoryName \u003d DESERIALIZERS_FOR_JODA_DATETIME;\n     } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n     @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n     Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n     for (StdDeserializer\u003c?\u003e deser : entries) {\n         if (rawType \u003d\u003d deser.getValueClass()) {\n             return deser;\n         }\n     }\n     for (StdDeserializer\u003c?\u003e deser : entries) {\n         if (deser.getValueClass().isAssignableFrom(rawType)) {\n             return deser;\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[type-JavaType, config-DeserializationConfig, p-DeserializerCache]",
        "newValue": "[type-JavaType, config-DeserializationConfig]"
      }
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Yparameterchange",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 10:45 AM",
      "commitNameOld": "6e6d8c63e7cbfb84729e287e820f9db195c2008f",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, DeserializerCache p) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n        factoryName \u003d DESERIALIZERS_FOR_JODA_DATETIME;\n    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (rawType \u003d\u003d deser.getValueClass()) {\n            return deser;\n        }\n    }\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (deser.getValueClass().isAssignableFrom(rawType)) {\n            return deser;\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 91,
      "functionName": "findDeserializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n-public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, DeserializerProvider p) {\n+public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, DeserializerCache p) {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n     if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n         factoryName \u003d DESERIALIZERS_FOR_JODA_DATETIME;\n     } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n     @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n     Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n     for (StdDeserializer\u003c?\u003e deser : entries) {\n         if (rawType \u003d\u003d deser.getValueClass()) {\n             return deser;\n         }\n     }\n     for (StdDeserializer\u003c?\u003e deser : entries) {\n         if (deser.getValueClass().isAssignableFrom(rawType)) {\n             return deser;\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[type-JavaType, config-DeserializationConfig, p-DeserializerProvider]",
        "newValue": "[type-JavaType, config-DeserializationConfig, p-DeserializerCache]"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,33 @@\n+public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, DeserializerProvider p) {\n+    Class\u003c?\u003e rawType \u003d type.getRawClass();\n+    String className \u003d rawType.getName();\n+    String factoryName;\n+    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n+        factoryName \u003d DESERIALIZERS_FOR_JODA_DATETIME;\n+    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n+        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n+    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n+        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n+    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n+        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n+    } else {\n+        return null;\n+    }\n+    Object ob \u003d instantiate(factoryName);\n+    if (ob \u003d\u003d null) {\n+        return null;\n+    }\n+    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n+    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n+    for (StdDeserializer\u003c?\u003e deser : entries) {\n+        if (rawType \u003d\u003d deser.getValueClass()) {\n+            return deser;\n+        }\n+    }\n+    for (StdDeserializer\u003c?\u003e deser : entries) {\n+        if (deser.getValueClass().isAssignableFrom(rawType)) {\n+            return deser;\n+        }\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type, DeserializationConfig config, DeserializerProvider p) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n        factoryName \u003d DESERIALIZERS_FOR_JODA_DATETIME;\n    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d DESERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_DOCUMENT)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonDeserializer\u003c?\u003e) instantiate(DESERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    @SuppressWarnings(\"unchecked\") Provider\u003cStdDeserializer\u003c?\u003e\u003e prov \u003d (Provider\u003cStdDeserializer\u003c?\u003e\u003e) ob;\n    Collection\u003cStdDeserializer\u003c?\u003e\u003e entries \u003d prov.provide();\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (rawType \u003d\u003d deser.getValueClass()) {\n            return deser;\n        }\n    }\n    for (StdDeserializer\u003c?\u003e deser : entries) {\n        if (deser.getValueClass().isAssignableFrom(rawType)) {\n            return deser;\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 94,
      "functionName": "findDeserializer",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}