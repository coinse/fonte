{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "POJOPropertyBuilder.java",
  "functionName": "getSetter",
  "functionId": "getSetter",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 252,
  "functionEndLine": 299,
  "numCommitsSeen": 49,
  "timeTaken": 2193,
  "changeHistory": [
    "f52059d06c0b0c06b2a40633fbdcb01d624ca2c9",
    "65c410c0c40724f763e0b4bce2db6d43bf078818",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "f52059d06c0b0c06b2a40633fbdcb01d624ca2c9": "Ybodychange",
    "65c410c0c40724f763e0b4bce2db6d43bf078818": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f52059d06c0b0c06b2a40633fbdcb01d624ca2c9": {
      "type": "Ybodychange",
      "commitMessage": "Complete handling of non-conflicts with implicit names\n",
      "commitDate": "5/30/14, 11:07 PM",
      "commitName": "f52059d06c0b0c06b2a40633fbdcb01d624ca2c9",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/30/14, 10:58 PM",
      "commitNameOld": "2a41afcbb877081476a441628b50ff59f08a2d0d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic AnnotatedMethod getSetter() {\n    Linked\u003cAnnotatedMethod\u003e curr \u003d _setters;\n    if (curr \u003d\u003d null) {\n        return null;\n    }\n    Linked\u003cAnnotatedMethod\u003e next \u003d curr.next;\n    if (next \u003d\u003d null) {\n        return curr.value;\n    }\n    for (; next !\u003d null; next \u003d next.next) {\n        Class\u003c?\u003e currClass \u003d curr.value.getDeclaringClass();\n        Class\u003c?\u003e nextClass \u003d next.value.getDeclaringClass();\n        if (currClass !\u003d nextClass) {\n            if (currClass.isAssignableFrom(nextClass)) {\n                curr \u003d next;\n                continue;\n            }\n            if (nextClass.isAssignableFrom(currClass)) {\n                continue;\n            }\n        }\n        int priNext \u003d _setterPriority(next.value);\n        int priCurr \u003d _setterPriority(curr.value);\n        if (priNext !\u003d priCurr) {\n            if (priNext \u003c priCurr) {\n                curr \u003d next;\n            }\n            continue;\n        }\n        throw new IllegalArgumentException(\"Conflicting setter definitions for property \\\"\" + getName() + \"\\\": \" + curr.value.getFullName() + \" vs \" + next.value.getFullName());\n    }\n    _setters \u003d curr.withoutNext();\n    return curr.value;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
      "functionStartLine": 262,
      "functionName": "getSetter",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,35 @@\n @Override\n public AnnotatedMethod getSetter() {\n-    if (_setters \u003d\u003d null) {\n+    Linked\u003cAnnotatedMethod\u003e curr \u003d _setters;\n+    if (curr \u003d\u003d null) {\n         return null;\n     }\n-    AnnotatedMethod setter \u003d _setters.value;\n-    Linked\u003cAnnotatedMethod\u003e next \u003d _setters.next;\n+    Linked\u003cAnnotatedMethod\u003e next \u003d curr.next;\n+    if (next \u003d\u003d null) {\n+        return curr.value;\n+    }\n     for (; next !\u003d null; next \u003d next.next) {\n-        AnnotatedMethod nextSetter \u003d next.value;\n-        Class\u003c?\u003e setterClass \u003d setter.getDeclaringClass();\n-        Class\u003c?\u003e nextClass \u003d nextSetter.getDeclaringClass();\n-        if (setterClass !\u003d nextClass) {\n-            if (setterClass.isAssignableFrom(nextClass)) {\n-                setter \u003d nextSetter;\n+        Class\u003c?\u003e currClass \u003d curr.value.getDeclaringClass();\n+        Class\u003c?\u003e nextClass \u003d next.value.getDeclaringClass();\n+        if (currClass !\u003d nextClass) {\n+            if (currClass.isAssignableFrom(nextClass)) {\n+                curr \u003d next;\n                 continue;\n             }\n-            if (nextClass.isAssignableFrom(setterClass)) {\n+            if (nextClass.isAssignableFrom(currClass)) {\n                 continue;\n             }\n         }\n-        throw new IllegalArgumentException(\"Conflicting setter definitions for property \\\"\" + getName() + \"\\\": \" + setter.getFullName() + \" vs \" + nextSetter.getFullName());\n+        int priNext \u003d _setterPriority(next.value);\n+        int priCurr \u003d _setterPriority(curr.value);\n+        if (priNext !\u003d priCurr) {\n+            if (priNext \u003c priCurr) {\n+                curr \u003d next;\n+            }\n+            continue;\n+        }\n+        throw new IllegalArgumentException(\"Conflicting setter definitions for property \\\"\" + getName() + \"\\\": \" + curr.value.getFullName() + \" vs \" + next.value.getFullName());\n     }\n-    return setter;\n+    _setters \u003d curr.withoutNext();\n+    return curr.value;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65c410c0c40724f763e0b4bce2db6d43bf078818": {
      "type": "Ybodychange",
      "commitMessage": "refactoring\n",
      "commitDate": "1/27/12, 8:44 PM",
      "commitName": "65c410c0c40724f763e0b4bce2db6d43bf078818",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 10:26 PM",
      "commitNameOld": "19ab5808eb8e47662f1d55408fdb186320061f13",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic AnnotatedMethod getSetter() {\n    if (_setters \u003d\u003d null) {\n        return null;\n    }\n    AnnotatedMethod setter \u003d _setters.value;\n    Linked\u003cAnnotatedMethod\u003e next \u003d _setters.next;\n    for (; next !\u003d null; next \u003d next.next) {\n        AnnotatedMethod nextSetter \u003d next.value;\n        Class\u003c?\u003e setterClass \u003d setter.getDeclaringClass();\n        Class\u003c?\u003e nextClass \u003d nextSetter.getDeclaringClass();\n        if (setterClass !\u003d nextClass) {\n            if (setterClass.isAssignableFrom(nextClass)) {\n                setter \u003d nextSetter;\n                continue;\n            }\n            if (nextClass.isAssignableFrom(setterClass)) {\n                continue;\n            }\n        }\n        throw new IllegalArgumentException(\"Conflicting setter definitions for property \\\"\" + getName() + \"\\\": \" + setter.getFullName() + \" vs \" + nextSetter.getFullName());\n    }\n    return setter;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
      "functionStartLine": 162,
      "functionName": "getSetter",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,24 @@\n @Override\n public AnnotatedMethod getSetter() {\n     if (_setters \u003d\u003d null) {\n         return null;\n     }\n     AnnotatedMethod setter \u003d _setters.value;\n-    Node\u003cAnnotatedMethod\u003e next \u003d _setters.next;\n+    Linked\u003cAnnotatedMethod\u003e next \u003d _setters.next;\n     for (; next !\u003d null; next \u003d next.next) {\n         AnnotatedMethod nextSetter \u003d next.value;\n         Class\u003c?\u003e setterClass \u003d setter.getDeclaringClass();\n         Class\u003c?\u003e nextClass \u003d nextSetter.getDeclaringClass();\n         if (setterClass !\u003d nextClass) {\n             if (setterClass.isAssignableFrom(nextClass)) {\n                 setter \u003d nextSetter;\n                 continue;\n             }\n             if (nextClass.isAssignableFrom(setterClass)) {\n                 continue;\n             }\n         }\n         throw new IllegalArgumentException(\"Conflicting setter definitions for property \\\"\" + getName() + \"\\\": \" + setter.getFullName() + \" vs \" + nextSetter.getFullName());\n     }\n     return setter;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,24 @@\n+@Override\n+public AnnotatedMethod getSetter() {\n+    if (_setters \u003d\u003d null) {\n+        return null;\n+    }\n+    AnnotatedMethod setter \u003d _setters.value;\n+    Node\u003cAnnotatedMethod\u003e next \u003d _setters.next;\n+    for (; next !\u003d null; next \u003d next.next) {\n+        AnnotatedMethod nextSetter \u003d next.value;\n+        Class\u003c?\u003e setterClass \u003d setter.getDeclaringClass();\n+        Class\u003c?\u003e nextClass \u003d nextSetter.getDeclaringClass();\n+        if (setterClass !\u003d nextClass) {\n+            if (setterClass.isAssignableFrom(nextClass)) {\n+                setter \u003d nextSetter;\n+                continue;\n+            }\n+            if (nextClass.isAssignableFrom(setterClass)) {\n+                continue;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Conflicting setter definitions for property \\\"\" + getName() + \"\\\": \" + setter.getFullName() + \" vs \" + nextSetter.getFullName());\n+    }\n+    return setter;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic AnnotatedMethod getSetter() {\n    if (_setters \u003d\u003d null) {\n        return null;\n    }\n    AnnotatedMethod setter \u003d _setters.value;\n    Node\u003cAnnotatedMethod\u003e next \u003d _setters.next;\n    for (; next !\u003d null; next \u003d next.next) {\n        AnnotatedMethod nextSetter \u003d next.value;\n        Class\u003c?\u003e setterClass \u003d setter.getDeclaringClass();\n        Class\u003c?\u003e nextClass \u003d nextSetter.getDeclaringClass();\n        if (setterClass !\u003d nextClass) {\n            if (setterClass.isAssignableFrom(nextClass)) {\n                setter \u003d nextSetter;\n                continue;\n            }\n            if (nextClass.isAssignableFrom(setterClass)) {\n                continue;\n            }\n        }\n        throw new IllegalArgumentException(\"Conflicting setter definitions for property \\\"\" + getName() + \"\\\": \" + setter.getFullName() + \" vs \" + nextSetter.getFullName());\n    }\n    return setter;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
      "functionStartLine": 169,
      "functionName": "getSetter",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}