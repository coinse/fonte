{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerFactory.java",
  "functionName": "addInjectables",
  "functionId": "addInjectables___ctxt-DeserializationContext__beanDesc-BeanDescription__builder-BeanDeserializerBuilder",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n",
  "functionStartLine": 633,
  "functionEndLine": 650,
  "numCommitsSeen": 108,
  "timeTaken": 4246,
  "changeHistory": [
    "1488cef12ee88e25dd0161f1b85c552a32775778",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "1488cef12ee88e25dd0161f1b85c552a32775778": "Ybodychange",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ybodychange",
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1488cef12ee88e25dd0161f1b85c552a32775778": {
      "type": "Ybodychange",
      "commitMessage": "Completing conversion to using PropertyName instead of String in most parts of API\n",
      "commitDate": "7/26/13, 2:42 PM",
      "commitName": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 11:05 PM",
      "commitNameOld": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n    if (raw !\u003d null) {\n        boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n            AnnotatedMember m \u003d entry.getValue();\n            if (fixAccess) {\n                m.fixAccess();\n            }\n            builder.addInjectable(new PropertyName(m.getName()), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 664,
      "functionName": "addInjectables",
      "functionAnnotation": "",
      "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n",
      "diff": "@@ -1,13 +1,13 @@\n protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n     if (raw !\u003d null) {\n         boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n         for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n             AnnotatedMember m \u003d entry.getValue();\n             if (fixAccess) {\n                 m.fixAccess();\n             }\n-            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n+            builder.addInjectable(new PropertyName(m.getName()), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n    if (raw !\u003d null) {\n        boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n            AnnotatedMember m \u003d entry.getValue();\n            if (fixAccess) {\n                m.fixAccess();\n            }\n            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1145,
          "functionName": "addInjectables",
          "functionAnnotation": "",
          "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n",
          "diff": "@@ -1,13 +1,13 @@\n-protected void addInjectables(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n     if (raw !\u003d null) {\n-        boolean fixAccess \u003d config.canOverrideAccessModifiers();\n+        boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n         for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n             AnnotatedMember m \u003d entry.getValue();\n             if (fixAccess) {\n                 m.fixAccess();\n             }\n             builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, beanDesc-BeanDescription, builder-BeanDeserializerBuilder]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, builder-BeanDeserializerBuilder]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n    if (raw !\u003d null) {\n        boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n            AnnotatedMember m \u003d entry.getValue();\n            if (fixAccess) {\n                m.fixAccess();\n            }\n            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1145,
          "functionName": "addInjectables",
          "functionAnnotation": "",
          "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n",
          "diff": "@@ -1,13 +1,13 @@\n-protected void addInjectables(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n     if (raw !\u003d null) {\n-        boolean fixAccess \u003d config.canOverrideAccessModifiers();\n+        boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n         for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n             AnnotatedMember m \u003d entry.getValue();\n             if (fixAccess) {\n                 m.fixAccess();\n             }\n             builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addInjectables(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n    if (raw !\u003d null) {\n        boolean fixAccess \u003d config.canOverrideAccessModifiers();\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n            AnnotatedMember m \u003d entry.getValue();\n            if (fixAccess) {\n                m.fixAccess();\n            }\n            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1166,
      "functionName": "addInjectables",
      "functionAnnotation": "",
      "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n",
      "diff": "@@ -1,13 +1,13 @@\n-protected void addInjectables(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+protected void addInjectables(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n     if (raw !\u003d null) {\n         boolean fixAccess \u003d config.canOverrideAccessModifiers();\n         for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n             AnnotatedMember m \u003d entry.getValue();\n             if (fixAccess) {\n                 m.fixAccess();\n             }\n             builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, beanDesc-BasicBeanDescription, builder-BeanDeserializerBuilder]",
        "newValue": "[config-DeserializationConfig, beanDesc-BeanDescription, builder-BeanDeserializerBuilder]"
      }
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/28/11, 10:35 AM",
      "commitNameOld": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 14.49,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addInjectables(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n    if (raw !\u003d null) {\n        boolean fixAccess \u003d config.canOverrideAccessModifiers();\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n            AnnotatedMember m \u003d entry.getValue();\n            if (fixAccess) {\n                m.fixAccess();\n            }\n            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1185,
      "functionName": "addInjectables",
      "functionAnnotation": "",
      "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n",
      "diff": "@@ -1,13 +1,13 @@\n protected void addInjectables(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n     if (raw !\u003d null) {\n-        boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n+        boolean fixAccess \u003d config.canOverrideAccessModifiers();\n         for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n             AnnotatedMember m \u003d entry.getValue();\n             if (fixAccess) {\n                 m.fixAccess();\n             }\n             builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a": {
      "type": "Ydocchange",
      "commitMessage": "Add back support for deserializing JsonLocation (using ValueInstiator, for added style points)\n",
      "commitDate": "12/28/11, 12:52 AM",
      "commitName": "6d3fc10bcaed6834823eed08d1b8990b71590e5a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/27/11, 10:34 PM",
      "commitNameOld": "289b58d10604feb7b709b91da6d314e0d6ac3b5d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addInjectables(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n    if (raw !\u003d null) {\n        boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n            AnnotatedMember m \u003d entry.getValue();\n            if (fixAccess) {\n                m.fixAccess();\n            }\n            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1186,
      "functionName": "addInjectables",
      "functionAnnotation": "",
      "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n\n@since 1.9\n",
        "newValue": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,13 @@\n+protected void addInjectables(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n+    if (raw !\u003d null) {\n+        boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n+        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n+            AnnotatedMember m \u003d entry.getValue();\n+            if (fixAccess) {\n+                m.fixAccess();\n+            }\n+            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void addInjectables(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    Map\u003cObject, AnnotatedMember\u003e raw \u003d beanDesc.findInjectables();\n    if (raw !\u003d null) {\n        boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n        for (Map.Entry\u003cObject, AnnotatedMember\u003e entry : raw.entrySet()) {\n            AnnotatedMember m \u003d entry.getValue();\n            if (fixAccess) {\n                m.fixAccess();\n            }\n            builder.addInjectable(m.getName(), beanDesc.resolveType(m.getGenericType()), beanDesc.getClassAnnotations(), m, entry.getKey());\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1200,
      "functionName": "addInjectables",
      "functionAnnotation": "",
      "functionDoc": "Method called locate all members used for value injection (if any),\nconstructor {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n\n@since 1.9\n"
    }
  }
}