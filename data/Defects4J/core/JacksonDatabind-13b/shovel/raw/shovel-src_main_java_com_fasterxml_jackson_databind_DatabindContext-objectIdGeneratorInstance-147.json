{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatabindContext.java",
  "functionName": "objectIdGeneratorInstance",
  "functionId": "objectIdGeneratorInstance___annotated-Annotated__objectIdInfo-ObjectIdInfo",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 147,
  "functionEndLine": 160,
  "numCommitsSeen": 37,
  "timeTaken": 2768,
  "changeHistory": [
    "3ff534413a5cd24438082c49ccc062bc252a6009",
    "88ae9dc8de0f5327a7c0ca72232dd8e3da6e5446",
    "557bcd3d55fa779e40251506d159468bfe96fe04",
    "d453182b63249c2c597a54229a4242e1ce1921d0"
  ],
  "changeHistoryShort": {
    "3ff534413a5cd24438082c49ccc062bc252a6009": "Ymultichange(Ymovefromfile,Ybodychange,Yannotationchange)",
    "88ae9dc8de0f5327a7c0ca72232dd8e3da6e5446": "Ybodychange",
    "557bcd3d55fa779e40251506d159468bfe96fe04": "Ymultichange(Ymovefromfile,Ybodychange,Yannotationchange,Yparameterchange)",
    "d453182b63249c2c597a54229a4242e1ce1921d0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3ff534413a5cd24438082c49ccc062bc252a6009": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yannotationchange)",
      "commitMessage": "cleanup of eclipse warnings\n",
      "commitDate": "3/2/13, 1:36 PM",
      "commitName": "3ff534413a5cd24438082c49ccc062bc252a6009",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "cleanup of eclipse warnings\n",
          "commitDate": "3/2/13, 1:36 PM",
          "commitName": "3ff534413a5cd24438082c49ccc062bc252a6009",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/2/13, 1:23 PM",
          "commitNameOld": "6751d13d4e0da1af79b05937ad738728ba031f70",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    final MapperConfig\u003c?\u003e config \u003d getConfig();\n    HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n    if (gen \u003d\u003d null) {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
          "functionStartLine": 111,
          "functionName": "objectIdGeneratorInstance",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-@Override\n public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n-    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n-    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    final MapperConfig\u003c?\u003e config \u003d getConfig();\n+    HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n+    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n     if (gen \u003d\u003d null) {\n-        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\n     }\n     return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
            "oldMethodName": "objectIdGeneratorInstance",
            "newMethodName": "objectIdGeneratorInstance"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "cleanup of eclipse warnings\n",
          "commitDate": "3/2/13, 1:36 PM",
          "commitName": "3ff534413a5cd24438082c49ccc062bc252a6009",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/2/13, 1:23 PM",
          "commitNameOld": "6751d13d4e0da1af79b05937ad738728ba031f70",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    final MapperConfig\u003c?\u003e config \u003d getConfig();\n    HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n    if (gen \u003d\u003d null) {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
          "functionStartLine": 111,
          "functionName": "objectIdGeneratorInstance",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-@Override\n public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n-    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n-    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    final MapperConfig\u003c?\u003e config \u003d getConfig();\n+    HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n+    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n     if (gen \u003d\u003d null) {\n-        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\n     }\n     return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "cleanup of eclipse warnings\n",
          "commitDate": "3/2/13, 1:36 PM",
          "commitName": "3ff534413a5cd24438082c49ccc062bc252a6009",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/2/13, 1:23 PM",
          "commitNameOld": "6751d13d4e0da1af79b05937ad738728ba031f70",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    final MapperConfig\u003c?\u003e config \u003d getConfig();\n    HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n    if (gen \u003d\u003d null) {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
          "functionStartLine": 111,
          "functionName": "objectIdGeneratorInstance",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,10 @@\n-@Override\n public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n-    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n-    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    final MapperConfig\u003c?\u003e config \u003d getConfig();\n+    HandlerInstantiator hi \u003d config.getHandlerInstantiator();\n+    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass);\n     if (gen \u003d\u003d null) {\n-        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());\n     }\n     return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        }
      ]
    },
    "88ae9dc8de0f5327a7c0ca72232dd8e3da6e5446": {
      "type": "Ybodychange",
      "commitMessage": "Fix [Issue#117]\n",
      "commitDate": "11/21/12, 12:07 PM",
      "commitName": "88ae9dc8de0f5327a7c0ca72232dd8e3da6e5446",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/6/12, 10:45 AM",
      "commitNameOld": "0e114114d330caaf6a56e63ab4d8a3ee1ba3e350",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 46.1,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(_config, annotated, implClass);\n    if (gen \u003d\u003d null) {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "functionStartLine": 76,
      "functionName": "objectIdGeneratorInstance",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,10 @@\n @Override\n public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n-    ObjectIdGenerator\u003c?\u003e gen;\n-    if (hi !\u003d null) {\n-        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n-    } else {\n+    ObjectIdGenerator\u003c?\u003e gen \u003d (hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    if (gen \u003d\u003d null) {\n         gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n     }\n     return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "557bcd3d55fa779e40251506d159468bfe96fe04": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yannotationchange,Yparameterchange)",
      "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
      "commitDate": "2/10/12, 9:44 AM",
      "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
          "commitDate": "2/10/12, 9:44 AM",
          "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/9/12, 10:51 PM",
          "commitNameOld": "7fbc6598818b7362d0110fdf86ed53bc01533a86",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (hi !\u003d null) {\n        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n    } else {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 70,
          "functionName": "objectIdGeneratorInstance",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,12 @@\n-public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, Class\u003c?\u003e implClass) throws JsonMappingException {\n+@Override\n+public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n+    ObjectIdGenerator\u003c?\u003e gen;\n     if (hi !\u003d null) {\n-        return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    } else {\n+        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n     }\n-    return (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+    return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
            "oldMethodName": "objectIdGeneratorInstance",
            "newMethodName": "objectIdGeneratorInstance"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
          "commitDate": "2/10/12, 9:44 AM",
          "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/9/12, 10:51 PM",
          "commitNameOld": "7fbc6598818b7362d0110fdf86ed53bc01533a86",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (hi !\u003d null) {\n        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n    } else {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 70,
          "functionName": "objectIdGeneratorInstance",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,12 @@\n-public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, Class\u003c?\u003e implClass) throws JsonMappingException {\n+@Override\n+public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n+    ObjectIdGenerator\u003c?\u003e gen;\n     if (hi !\u003d null) {\n-        return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    } else {\n+        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n     }\n-    return (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+    return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
          "commitDate": "2/10/12, 9:44 AM",
          "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/9/12, 10:51 PM",
          "commitNameOld": "7fbc6598818b7362d0110fdf86ed53bc01533a86",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (hi !\u003d null) {\n        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n    } else {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 70,
          "functionName": "objectIdGeneratorInstance",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,12 @@\n-public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, Class\u003c?\u003e implClass) throws JsonMappingException {\n+@Override\n+public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n+    ObjectIdGenerator\u003c?\u003e gen;\n     if (hi !\u003d null) {\n-        return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    } else {\n+        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n     }\n-    return (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+    return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
          "commitDate": "2/10/12, 9:44 AM",
          "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/9/12, 10:51 PM",
          "commitNameOld": "7fbc6598818b7362d0110fdf86ed53bc01533a86",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (hi !\u003d null) {\n        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n    } else {\n        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n    }\n    return gen.forScope(objectIdInfo.getScope());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 70,
          "functionName": "objectIdGeneratorInstance",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,7 +1,12 @@\n-public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, Class\u003c?\u003e implClass) throws JsonMappingException {\n+@Override\n+public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n+    ObjectIdGenerator\u003c?\u003e gen;\n     if (hi !\u003d null) {\n-        return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+        gen \u003d hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    } else {\n+        gen \u003d (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n     }\n-    return (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+    return gen.forScope(objectIdInfo.getScope());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[annotated-Annotated, implClass-Class\u003c?\u003e]",
            "newValue": "[annotated-Annotated, objectIdInfo-ObjectIdInfo]"
          }
        }
      ]
    },
    "d453182b63249c2c597a54229a4242e1ce1921d0": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring Object Id handling, after realizing first attempt is too limiting\n",
      "commitDate": "2/6/12, 10:44 PM",
      "commitName": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,7 @@\n+public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, Class\u003c?\u003e implClass) throws JsonMappingException {\n+    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n+    if (hi !\u003d null) {\n+        return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n+    }\n+    return (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n+}\n\\ No newline at end of file\n",
      "actualSource": "public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated, Class\u003c?\u003e implClass) throws JsonMappingException {\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n    if (hi !\u003d null) {\n        return hi.objectIdGeneratorInstance(_config, annotated, implClass);\n    }\n    return (ObjectIdGenerator\u003c?\u003e) ClassUtil.createInstance(implClass, _config.canOverrideAccessModifiers());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "functionStartLine": 737,
      "functionName": "objectIdGeneratorInstance",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}