{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerBase.java",
  "functionName": "_resolveManagedReferenceProperty",
  "functionId": "_resolveManagedReferenceProperty___ctxt-DeserializationContext__prop-SettableBeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
  "functionStartLine": 650,
  "functionEndLine": 674,
  "numCommitsSeen": 123,
  "timeTaken": 7695,
  "changeHistory": [
    "b4b5903bb72be8fa5fd059de6d2caeb886ffca52",
    "c6eaf4b5230d4e72cef6a4cb74d17631c6304f79",
    "337feca4a10581197656d497b94cde602c1b16a7",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b",
    "df060b78cc608db646c3c9a7f1d14dbf148618b9",
    "6997ce367c941c52774377324197fb0a1896c439",
    "53fb8522b402a409139175cbf867afa924e549f5",
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "b4b5903bb72be8fa5fd059de6d2caeb886ffca52": "Ybodychange",
    "c6eaf4b5230d4e72cef6a4cb74d17631c6304f79": "Ybodychange",
    "337feca4a10581197656d497b94cde602c1b16a7": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ymultichange(Ymovefromfile,Ybodychange)",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": "Ybodychange",
    "df060b78cc608db646c3c9a7f1d14dbf148618b9": "Ybodychange",
    "6997ce367c941c52774377324197fb0a1896c439": "Ybodychange",
    "53fb8522b402a409139175cbf867afa924e549f5": "Yparameterchange",
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4b5903bb72be8fa5fd059de6d2caeb886ffca52": {
      "type": "Ybodychange",
      "commitMessage": "Realizing that [JACKSON-890] has been fixed (markes as such). Also, adding a failing unit test for Unwrapped+Creator combo\n",
      "commitDate": "7/16/13, 2:34 PM",
      "commitName": "b4b5903bb72be8fa5fd059de6d2caeb886ffca52",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/4/13, 8:25 PM",
      "commitNameOld": "c6eaf4b5230d4e72cef6a4cb74d17631c6304f79",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 11.76,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d valueDeser.findBackReference(refName);\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    boolean isContainer \u003d prop.getType().isContainerType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 628,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "c6eaf4b5230d4e72cef6a4cb74d17631c6304f79": {
      "type": "Ybodychange",
      "commitMessage": "Implemented #253\n",
      "commitDate": "7/4/13, 8:25 PM",
      "commitName": "c6eaf4b5230d4e72cef6a4cb74d17631c6304f79",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/25/13, 9:04 PM",
      "commitNameOld": "d12a42fe1671a0fd013789a698bd9776d4f87109",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 39.97,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d valueDeser.findBackReference(refName);\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    boolean isContainer \u003d prop.getType().isContainerType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 628,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "@@ -1,33 +1,18 @@\n protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n-    SettableBeanProperty backProp \u003d null;\n-    boolean isContainer \u003d false;\n-    if (valueDeser instanceof BeanDeserializerBase) {\n-        backProp \u003d ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n-    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n-        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n-        if (!(contentDeser instanceof BeanDeserializerBase)) {\n-            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n-            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n-        }\n-        backProp \u003d ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n-        isContainer \u003d true;\n-    } else if (valueDeser instanceof AbstractDeserializer) {\n-        backProp \u003d ((AbstractDeserializer) valueDeser).findBackReference(refName);\n-    } else {\n-        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n-    }\n+    SettableBeanProperty backProp \u003d valueDeser.findBackReference(refName);\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n+    boolean isContainer \u003d prop.getType().isContainerType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n     return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "337feca4a10581197656d497b94cde602c1b16a7": {
      "type": "Ybodychange",
      "commitMessage": "Fixed [JACKSON-368]; one of infamous \u0027failing\u0027 cases... (yay!)\n",
      "commitDate": "3/19/12, 7:11 PM",
      "commitName": "337feca4a10581197656d497b94cde602c1b16a7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/19/12, 6:09 PM",
      "commitNameOld": "2481fa4b55203e9e8b2fbfddf9b146f720507d8b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializerBase) {\n        backProp \u003d ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializerBase)) {\n            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n        }\n        backProp \u003d ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        backProp \u003d ((AbstractDeserializer) valueDeser).findBackReference(refName);\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 540,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "@@ -1,33 +1,33 @@\n protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n     SettableBeanProperty backProp \u003d null;\n     boolean isContainer \u003d false;\n     if (valueDeser instanceof BeanDeserializerBase) {\n         backProp \u003d ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n     } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n         if (!(contentDeser instanceof BeanDeserializerBase)) {\n             String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n             throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n         }\n         backProp \u003d ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n         isContainer \u003d true;\n     } else if (valueDeser instanceof AbstractDeserializer) {\n-        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n+        backProp \u003d ((AbstractDeserializer) valueDeser).findBackReference(refName);\n     } else {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n     }\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n     return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/11/12, 2:34 PM",
          "commitNameOld": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 6.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializerBase) {\n        backProp \u003d ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializerBase)) {\n            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n        }\n        backProp \u003d ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 591,
          "functionName": "_resolveManagedReferenceProperty",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
          "diff": "@@ -1,33 +1,33 @@\n protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n     SettableBeanProperty backProp \u003d null;\n     boolean isContainer \u003d false;\n-    if (valueDeser instanceof BeanDeserializer) {\n-        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n+    if (valueDeser instanceof BeanDeserializerBase) {\n+        backProp \u003d ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n     } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n-        if (!(contentDeser instanceof BeanDeserializer)) {\n+        if (!(contentDeser instanceof BeanDeserializerBase)) {\n             String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n             throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n         }\n-        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n+        backProp \u003d ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n         isContainer \u003d true;\n     } else if (valueDeser instanceof AbstractDeserializer) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n     } else {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n     }\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n-    return new ManagedReferenceProperty(refName, prop, backProp, _classAnnotations, isContainer);\n+    return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
            "oldMethodName": "_resolveManagedReferenceProperty",
            "newMethodName": "_resolveManagedReferenceProperty"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/11/12, 2:34 PM",
          "commitNameOld": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 6.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializerBase) {\n        backProp \u003d ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializerBase)) {\n            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n        }\n        backProp \u003d ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 591,
          "functionName": "_resolveManagedReferenceProperty",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
          "diff": "@@ -1,33 +1,33 @@\n protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n     SettableBeanProperty backProp \u003d null;\n     boolean isContainer \u003d false;\n-    if (valueDeser instanceof BeanDeserializer) {\n-        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n+    if (valueDeser instanceof BeanDeserializerBase) {\n+        backProp \u003d ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n     } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n-        if (!(contentDeser instanceof BeanDeserializer)) {\n+        if (!(contentDeser instanceof BeanDeserializerBase)) {\n             String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n             throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n         }\n-        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n+        backProp \u003d ((BeanDeserializerBase) contentDeser).findBackReference(refName);\n         isContainer \u003d true;\n     } else if (valueDeser instanceof AbstractDeserializer) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n     } else {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n     }\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n-    return new ManagedReferenceProperty(refName, prop, backProp, _classAnnotations, isContainer);\n+    return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": {
      "type": "Ybodychange",
      "commitMessage": "Yay! First end-to-end version of Object Id handling...\n",
      "commitDate": "2/8/12, 10:07 PM",
      "commitName": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 9:04 PM",
      "commitNameOld": "df060b78cc608db646c3c9a7f1d14dbf148618b9",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializer) {\n        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializer)) {\n            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n        }\n        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new ManagedReferenceProperty(refName, prop, backProp, _classAnnotations, isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 600,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "@@ -1,33 +1,33 @@\n protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n     SettableBeanProperty backProp \u003d null;\n     boolean isContainer \u003d false;\n     if (valueDeser instanceof BeanDeserializer) {\n         backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n     } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n         if (!(contentDeser instanceof BeanDeserializer)) {\n             String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n             throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n         }\n         backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n         isContainer \u003d true;\n     } else if (valueDeser instanceof AbstractDeserializer) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n     } else {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n     }\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n-    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _classAnnotations, isContainer);\n+    return new ManagedReferenceProperty(refName, prop, backProp, _classAnnotations, isContainer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df060b78cc608db646c3c9a7f1d14dbf148618b9": {
      "type": "Ybodychange",
      "commitMessage": "Minor simplification for BeanDeserializer: drop ref to AnnotatedClass (which is heavy-weight), replaced by Annotations to retain class annotations, much lighter object\n",
      "commitDate": "2/7/12, 9:04 PM",
      "commitName": "df060b78cc608db646c3c9a7f1d14dbf148618b9",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/6/12, 10:44 PM",
      "commitNameOld": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializer) {\n        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializer)) {\n            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n        }\n        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _classAnnotations, isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 509,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "@@ -1,33 +1,33 @@\n protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n     SettableBeanProperty backProp \u003d null;\n     boolean isContainer \u003d false;\n     if (valueDeser instanceof BeanDeserializer) {\n         backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n     } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n         if (!(contentDeser instanceof BeanDeserializer)) {\n             String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n             throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n         }\n         backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n         isContainer \u003d true;\n     } else if (valueDeser instanceof AbstractDeserializer) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n     } else {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n     }\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n-    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n+    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _classAnnotations, isContainer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6997ce367c941c52774377324197fb0a1896c439": {
      "type": "Ybodychange",
      "commitMessage": "Fix the last problem wrt contextual deserialization; back to fully working again\n",
      "commitDate": "1/31/12, 3:50 PM",
      "commitName": "6997ce367c941c52774377324197fb0a1896c439",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/30/12, 7:15 PM",
      "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializer) {\n        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializer)) {\n            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n        }\n        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 482,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "@@ -1,32 +1,33 @@\n protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n     SettableBeanProperty backProp \u003d null;\n     boolean isContainer \u003d false;\n     if (valueDeser instanceof BeanDeserializer) {\n         backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n     } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n         if (!(contentDeser instanceof BeanDeserializer)) {\n-            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + contentDeser.getClass().getName() + \")\");\n+            String deserName \u003d (contentDeser \u003d\u003d null) ? \"NULL\" : contentDeser.getClass().getName();\n+            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + deserName + \")\");\n         }\n         backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n         isContainer \u003d true;\n     } else if (valueDeser instanceof AbstractDeserializer) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n     } else {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n     }\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n     return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53fb8522b402a409139175cbf867afa924e549f5": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
      "commitDate": "1/24/12, 1:02 PM",
      "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:23 AM",
      "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializer) {\n        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializer)) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + contentDeser.getClass().getName() + \")\");\n        }\n        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 447,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "@@ -1,32 +1,32 @@\n-protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationConfig config, SettableBeanProperty prop) {\n+protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     String refName \u003d prop.getManagedReferenceName();\n     if (refName \u003d\u003d null) {\n         return prop;\n     }\n     JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n     SettableBeanProperty backProp \u003d null;\n     boolean isContainer \u003d false;\n     if (valueDeser instanceof BeanDeserializer) {\n         backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n     } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n         if (!(contentDeser instanceof BeanDeserializer)) {\n             throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + contentDeser.getClass().getName() + \")\");\n         }\n         backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n         isContainer \u003d true;\n     } else if (valueDeser instanceof AbstractDeserializer) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n     } else {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n     }\n     if (backProp \u003d\u003d null) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n     }\n     JavaType referredType \u003d _beanType;\n     JavaType backRefType \u003d backProp.getType();\n     if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n         throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n     }\n     return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, prop-SettableBeanProperty]",
        "newValue": "[ctxt-DeserializationContext, prop-SettableBeanProperty]"
      }
    },
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3": {
      "type": "Ydocchange",
      "commitMessage": "First working version of prefix-for-unwrapped; may want to generalize to allow other kinds of name mangling strategies\n",
      "commitDate": "1/13/12, 9:49 PM",
      "commitName": "0a0ce59a9800a6532048eaf52a2d2c6a276116e3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/11/12, 10:14 PM",
      "commitNameOld": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationConfig config, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializer) {\n        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializer)) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + contentDeser.getClass().getName() + \")\");\n        }\n        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 437,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n\n@since 1.9\n",
        "newValue": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,32 @@\n+protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationConfig config, SettableBeanProperty prop) {\n+    String refName \u003d prop.getManagedReferenceName();\n+    if (refName \u003d\u003d null) {\n+        return prop;\n+    }\n+    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n+    SettableBeanProperty backProp \u003d null;\n+    boolean isContainer \u003d false;\n+    if (valueDeser instanceof BeanDeserializer) {\n+        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n+    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n+        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n+        if (!(contentDeser instanceof BeanDeserializer)) {\n+            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + contentDeser.getClass().getName() + \")\");\n+        }\n+        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n+        isContainer \u003d true;\n+    } else if (valueDeser instanceof AbstractDeserializer) {\n+        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n+    } else {\n+        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n+    }\n+    if (backProp \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n+    }\n+    JavaType referredType \u003d _beanType;\n+    JavaType backRefType \u003d backProp.getType();\n+    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n+        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n+    }\n+    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationConfig config, SettableBeanProperty prop) {\n    String refName \u003d prop.getManagedReferenceName();\n    if (refName \u003d\u003d null) {\n        return prop;\n    }\n    JsonDeserializer\u003c?\u003e valueDeser \u003d prop.getValueDeserializer();\n    SettableBeanProperty backProp \u003d null;\n    boolean isContainer \u003d false;\n    if (valueDeser instanceof BeanDeserializer) {\n        backProp \u003d ((BeanDeserializer) valueDeser).findBackReference(refName);\n    } else if (valueDeser instanceof ContainerDeserializerBase\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e contentDeser \u003d ((ContainerDeserializerBase\u003c?\u003e) valueDeser).getContentDeserializer();\n        if (!(contentDeser instanceof BeanDeserializer)) {\n            throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: value deserializer is of type ContainerDeserializerBase, but content type is not handled by a BeanDeserializer \" + \" (instead it\u0027s of type \" + contentDeser.getClass().getName() + \")\");\n        }\n        backProp \u003d ((BeanDeserializer) contentDeser).findBackReference(refName);\n        isContainer \u003d true;\n    } else if (valueDeser instanceof AbstractDeserializer) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference for abstract types (property \" + _beanType.getRawClass().getName() + \".\" + prop.getName() + \")\");\n    } else {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \" + valueDeser.getClass().getName());\n    }\n    if (backProp \u003d\u003d null) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: no back reference property found from type \" + prop.getType());\n    }\n    JavaType referredType \u003d _beanType;\n    JavaType backRefType \u003d backProp.getType();\n    if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n        throw new IllegalArgumentException(\"Can not handle managed/back reference \u0027\" + refName + \"\u0027: back reference type (\" + backRefType.getRawClass().getName() + \") not compatible with managed type (\" + referredType.getRawClass().getName() + \")\");\n    }\n    return new SettableBeanProperty.ManagedReferenceProperty(refName, prop, backProp, _forClass.getAnnotations(), isContainer);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 462,
      "functionName": "_resolveManagedReferenceProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to see if given property is part of \u0027managed\u0027 property\npair (managed + back reference), and if so, handle resolution details.\n\n@since 1.9\n"
    }
  }
}