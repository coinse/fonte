{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NumberDeserializers.java",
  "functionName": "deserialize",
  "functionId": "$deserialize___jp-JsonParser__ctxt-DeserializationContext",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 286,
  "functionEndLine": 290,
  "numCommitsSeen": 17,
  "timeTaken": 1257,
  "changeHistory": [
    "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1",
    "dd3485677ca295a8fcbf99dba90db5337755b8ef",
    "f1c5f8f392069401c1daaa6601cc45cbf9f5fd34",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1": "Ybodychange",
    "dd3485677ca295a8fcbf99dba90db5337755b8ef": "Ybodychange",
    "f1c5f8f392069401c1daaa6601cc45cbf9f5fd34": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1": {
      "type": "Ybodychange",
      "commitMessage": "Adding \"UNWRAP_SINGLE_VALUE_ARRAYS\" DeserializationFeature\n\nFixes issue #381. Added new feature that determines whether it is\nacceptable to coerce a single value array (in JSON) to the corresponding\nvalue type.\n",
      "commitDate": "1/7/14, 8:04 PM",
      "commitName": "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1",
      "commitAuthor": "Matthew Morrissette",
      "commitDateOld": "1/1/14, 5:13 PM",
      "commitNameOld": "b59a89783ef01670acd43f36a8c1f07adeb3058c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return jp.getDecimalValue();\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        if (text.length() \u003d\u003d 0) {\n            return null;\n        }\n        try {\n            return new BigDecimal(text);\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n        }\n    }\n    if (t \u003d\u003d JsonToken.START_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n        jp.nextToken();\n        final BigDecimal value \u003d deserialize(jp, ctxt);\n        if (jp.nextToken() !\u003d JsonToken.END_ARRAY) {\n            throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \"Attempted to unwrap single value array for single \u0027BigDecimal\u0027 value but there was more than a single value in the array\");\n        }\n        return value;\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
      "functionStartLine": 564,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,27 @@\n @Override\n public BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n         return jp.getDecimalValue();\n     }\n     if (t \u003d\u003d JsonToken.VALUE_STRING) {\n         String text \u003d jp.getText().trim();\n         if (text.length() \u003d\u003d 0) {\n             return null;\n         }\n         try {\n             return new BigDecimal(text);\n         } catch (IllegalArgumentException iae) {\n             throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n         }\n     }\n+    if (t \u003d\u003d JsonToken.START_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+        jp.nextToken();\n+        final BigDecimal value \u003d deserialize(jp, ctxt);\n+        if (jp.nextToken() !\u003d JsonToken.END_ARRAY) {\n+            throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \"Attempted to unwrap single value array for single \u0027BigDecimal\u0027 value but there was more than a single value in the array\");\n+        }\n+        return value;\n+    }\n     throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd3485677ca295a8fcbf99dba90db5337755b8ef": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [Issue-20], JsonFormatException\n",
      "commitDate": "7/18/12, 5:25 PM",
      "commitName": "dd3485677ca295a8fcbf99dba90db5337755b8ef",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/2/12, 11:30 AM",
      "commitNameOld": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 167.2,
      "commitsBetweenForRepo": 213,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return jp.getDecimalValue();\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        if (text.length() \u003d\u003d 0) {\n            return null;\n        }\n        try {\n            return new BigDecimal(text);\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n        }\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
      "functionStartLine": 420,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n @Override\n public BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n         return jp.getDecimalValue();\n     }\n     if (t \u003d\u003d JsonToken.VALUE_STRING) {\n         String text \u003d jp.getText().trim();\n         if (text.length() \u003d\u003d 0) {\n             return null;\n         }\n         try {\n             return new BigDecimal(text);\n         } catch (IllegalArgumentException iae) {\n-            throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n+            throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n         }\n     }\n     throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1c5f8f392069401c1daaa6601cc45cbf9f5fd34": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
      "commitMessage": "Refactoring to improve grouping of deserializers\n",
      "commitDate": "12/27/11, 8:48 PM",
      "commitName": "f1c5f8f392069401c1daaa6601cc45cbf9f5fd34",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Refactoring to improve grouping of deserializers\n",
          "commitDate": "12/27/11, 8:48 PM",
          "commitName": "f1c5f8f392069401c1daaa6601cc45cbf9f5fd34",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/25/11, 9:54 PM",
          "commitNameOld": "ffbadea73497dbd251c17172ec7054518e291704",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return jp.getDecimalValue();\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        if (text.length() \u003d\u003d 0) {\n            return null;\n        }\n        try {\n            return new BigDecimal(text);\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n        }\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
          "functionStartLine": 420,
          "functionName": "deserialize",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,19 @@\n @Override\n-public JavaType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n-    JsonToken curr \u003d jp.getCurrentToken();\n-    if (curr \u003d\u003d JsonToken.VALUE_STRING) {\n-        String str \u003d jp.getText().trim();\n-        if (str.length() \u003d\u003d 0) {\n-            return getEmptyValue();\n+public BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    JsonToken t \u003d jp.getCurrentToken();\n+    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n+        return jp.getDecimalValue();\n+    }\n+    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n+        String text \u003d jp.getText().trim();\n+        if (text.length() \u003d\u003d 0) {\n+            return null;\n         }\n-        return ctxt.getTypeFactory().constructFromCanonical(str);\n+        try {\n+            return new BigDecimal(text);\n+        } catch (IllegalArgumentException iae) {\n+            throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n+        }\n     }\n-    if (curr \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n-        return (JavaType) jp.getEmbeddedObject();\n-    }\n-    throw ctxt.mappingException(_valueClass);\n+    throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
            "oldMethodName": "deserialize",
            "newMethodName": "deserialize"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Refactoring to improve grouping of deserializers\n",
          "commitDate": "12/27/11, 8:48 PM",
          "commitName": "f1c5f8f392069401c1daaa6601cc45cbf9f5fd34",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/25/11, 9:54 PM",
          "commitNameOld": "ffbadea73497dbd251c17172ec7054518e291704",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return jp.getDecimalValue();\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        if (text.length() \u003d\u003d 0) {\n            return null;\n        }\n        try {\n            return new BigDecimal(text);\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n        }\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
          "functionStartLine": 420,
          "functionName": "deserialize",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,19 @@\n @Override\n-public JavaType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n-    JsonToken curr \u003d jp.getCurrentToken();\n-    if (curr \u003d\u003d JsonToken.VALUE_STRING) {\n-        String str \u003d jp.getText().trim();\n-        if (str.length() \u003d\u003d 0) {\n-            return getEmptyValue();\n+public BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    JsonToken t \u003d jp.getCurrentToken();\n+    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n+        return jp.getDecimalValue();\n+    }\n+    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n+        String text \u003d jp.getText().trim();\n+        if (text.length() \u003d\u003d 0) {\n+            return null;\n         }\n-        return ctxt.getTypeFactory().constructFromCanonical(str);\n+        try {\n+            return new BigDecimal(text);\n+        } catch (IllegalArgumentException iae) {\n+            throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n+        }\n     }\n-    if (curr \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n-        return (JavaType) jp.getEmbeddedObject();\n-    }\n-    throw ctxt.mappingException(_valueClass);\n+    throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "JavaType",
            "newValue": "BigDecimal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring to improve grouping of deserializers\n",
          "commitDate": "12/27/11, 8:48 PM",
          "commitName": "f1c5f8f392069401c1daaa6601cc45cbf9f5fd34",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/25/11, 9:54 PM",
          "commitNameOld": "ffbadea73497dbd251c17172ec7054518e291704",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n        return jp.getDecimalValue();\n    }\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String text \u003d jp.getText().trim();\n        if (text.length() \u003d\u003d 0) {\n            return null;\n        }\n        try {\n            return new BigDecimal(text);\n        } catch (IllegalArgumentException iae) {\n            throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n        }\n    }\n    throw ctxt.mappingException(_valueClass, t);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
          "functionStartLine": 420,
          "functionName": "deserialize",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,19 @@\n @Override\n-public JavaType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n-    JsonToken curr \u003d jp.getCurrentToken();\n-    if (curr \u003d\u003d JsonToken.VALUE_STRING) {\n-        String str \u003d jp.getText().trim();\n-        if (str.length() \u003d\u003d 0) {\n-            return getEmptyValue();\n+public BigDecimal deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    JsonToken t \u003d jp.getCurrentToken();\n+    if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n+        return jp.getDecimalValue();\n+    }\n+    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n+        String text \u003d jp.getText().trim();\n+        if (text.length() \u003d\u003d 0) {\n+            return null;\n         }\n-        return ctxt.getTypeFactory().constructFromCanonical(str);\n+        try {\n+            return new BigDecimal(text);\n+        } catch (IllegalArgumentException iae) {\n+            throw ctxt.weirdStringException(_valueClass, \"not a valid representation\");\n+        }\n     }\n-    if (curr \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n-        return (JavaType) jp.getEmbeddedObject();\n-    }\n-    throw ctxt.mappingException(_valueClass);\n+    throw ctxt.mappingException(_valueClass, t);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,15 @@\n+@Override\n+public JavaType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    JsonToken curr \u003d jp.getCurrentToken();\n+    if (curr \u003d\u003d JsonToken.VALUE_STRING) {\n+        String str \u003d jp.getText().trim();\n+        if (str.length() \u003d\u003d 0) {\n+            return getEmptyValue();\n+        }\n+        return ctxt.getTypeFactory().constructFromCanonical(str);\n+    }\n+    if (curr \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n+        return (JavaType) jp.getEmbeddedObject();\n+    }\n+    throw ctxt.mappingException(_valueClass);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JavaType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken curr \u003d jp.getCurrentToken();\n    if (curr \u003d\u003d JsonToken.VALUE_STRING) {\n        String str \u003d jp.getText().trim();\n        if (str.length() \u003d\u003d 0) {\n            return getEmptyValue();\n        }\n        return ctxt.getTypeFactory().constructFromCanonical(str);\n    }\n    if (curr \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n        return (JavaType) jp.getEmbeddedObject();\n    }\n    throw ctxt.mappingException(_valueClass);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java",
      "functionStartLine": 19,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}