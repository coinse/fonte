{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanPropertyMap.java",
  "functionName": "replace",
  "functionId": "replace___property-SettableBeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
  "functionAnnotation": "",
  "functionDoc": "Specialized method that can be used to replace an existing entry\n(note: entry MUST exist; otherwise exception is thrown) with\nspecified replacement.\n",
  "functionStartLine": 340,
  "functionEndLine": 367,
  "numCommitsSeen": 19,
  "timeTaken": 824,
  "changeHistory": [
    "d06750f22fb83313d9de3b8cf00f105614645b78",
    "d14fb0772edb682a1ee97e07c8b2e71bc39e845b",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "d06750f22fb83313d9de3b8cf00f105614645b78": "Ybodychange",
    "d14fb0772edb682a1ee97e07c8b2e71bc39e845b": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d06750f22fb83313d9de3b8cf00f105614645b78": {
      "type": "Ybodychange",
      "commitMessage": "Added case insensitivity as a DeserializationFeature.  Will close #566 in jackson-databind.\n",
      "commitDate": "9/30/14, 10:24 AM",
      "commitName": "d06750f22fb83313d9de3b8cf00f105614645b78",
      "commitAuthor": "Michael Ressler",
      "commitDateOld": "12/2/13, 10:20 AM",
      "commitNameOld": "614a72e345fa054369f9e32540656ac26e432823",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 301.96,
      "commitsBetweenForRepo": 415,
      "commitsBetweenForFile": 1,
      "actualSource": "public void replace(SettableBeanProperty property) {\n    String name \u003d getPropertyName(property);\n    int index \u003d name.hashCode() \u0026 (_buckets.length - 1);\n    Bucket tail \u003d null;\n    int foundIndex \u003d -1;\n    for (Bucket bucket \u003d _buckets[index]; bucket !\u003d null; bucket \u003d bucket.next) {\n        if (foundIndex \u003c 0 \u0026\u0026 bucket.key.equals(name)) {\n            foundIndex \u003d bucket.index;\n        } else {\n            tail \u003d new Bucket(tail, bucket.key, bucket.value, bucket.index);\n        }\n    }\n    if (foundIndex \u003c 0) {\n        throw new NoSuchElementException(\"No entry \u0027\" + property + \"\u0027 found, can\u0027t replace\");\n    }\n    _buckets[index] \u003d new Bucket(tail, name, property, foundIndex);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
      "functionStartLine": 273,
      "functionName": "replace",
      "functionAnnotation": "",
      "functionDoc": "Specialized method that can be used to replace an existing entry\n(note: entry MUST exist; otherwise exception is thrown) with\nspecified replacement.\n",
      "diff": "@@ -1,17 +1,17 @@\n public void replace(SettableBeanProperty property) {\n-    String name \u003d property.getName();\n+    String name \u003d getPropertyName(property);\n     int index \u003d name.hashCode() \u0026 (_buckets.length - 1);\n     Bucket tail \u003d null;\n     int foundIndex \u003d -1;\n     for (Bucket bucket \u003d _buckets[index]; bucket !\u003d null; bucket \u003d bucket.next) {\n         if (foundIndex \u003c 0 \u0026\u0026 bucket.key.equals(name)) {\n             foundIndex \u003d bucket.index;\n         } else {\n             tail \u003d new Bucket(tail, bucket.key, bucket.value, bucket.index);\n         }\n     }\n     if (foundIndex \u003c 0) {\n         throw new NoSuchElementException(\"No entry \u0027\" + property + \"\u0027 found, can\u0027t replace\");\n     }\n     _buckets[index] \u003d new Bucket(tail, name, property, foundIndex);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d14fb0772edb682a1ee97e07c8b2e71bc39e845b": {
      "type": "Ybodychange",
      "commitMessage": "Completing [Issue-29], ability to (de)serialize POJOs to/from JSON Arrays, to condense output\n",
      "commitDate": "7/17/12, 6:49 PM",
      "commitName": "d14fb0772edb682a1ee97e07c8b2e71bc39e845b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/17/12, 7:57 AM",
      "commitNameOld": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 91.45,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "public void replace(SettableBeanProperty property) {\n    String name \u003d property.getName();\n    int index \u003d name.hashCode() \u0026 (_buckets.length - 1);\n    Bucket tail \u003d null;\n    int foundIndex \u003d -1;\n    for (Bucket bucket \u003d _buckets[index]; bucket !\u003d null; bucket \u003d bucket.next) {\n        if (foundIndex \u003c 0 \u0026\u0026 bucket.key.equals(name)) {\n            foundIndex \u003d bucket.index;\n        } else {\n            tail \u003d new Bucket(tail, bucket.key, bucket.value, bucket.index);\n        }\n    }\n    if (foundIndex \u003c 0) {\n        throw new NoSuchElementException(\"No entry \u0027\" + property + \"\u0027 found, can\u0027t replace\");\n    }\n    _buckets[index] \u003d new Bucket(tail, name, property, foundIndex);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
      "functionStartLine": 215,
      "functionName": "replace",
      "functionAnnotation": "",
      "functionDoc": "Specialized method that can be used to replace an existing entry\n(note: entry MUST exist; otherwise exception is thrown) with\nspecified replacement.\n",
      "diff": "@@ -1,17 +1,17 @@\n public void replace(SettableBeanProperty property) {\n     String name \u003d property.getName();\n     int index \u003d name.hashCode() \u0026 (_buckets.length - 1);\n     Bucket tail \u003d null;\n-    boolean found \u003d false;\n+    int foundIndex \u003d -1;\n     for (Bucket bucket \u003d _buckets[index]; bucket !\u003d null; bucket \u003d bucket.next) {\n-        if (!found \u0026\u0026 bucket.key.equals(name)) {\n-            found \u003d true;\n+        if (foundIndex \u003c 0 \u0026\u0026 bucket.key.equals(name)) {\n+            foundIndex \u003d bucket.index;\n         } else {\n-            tail \u003d new Bucket(tail, bucket.key, bucket.value);\n+            tail \u003d new Bucket(tail, bucket.key, bucket.value, bucket.index);\n         }\n     }\n-    if (!found) {\n+    if (foundIndex \u003c 0) {\n         throw new NoSuchElementException(\"No entry \u0027\" + property + \"\u0027 found, can\u0027t replace\");\n     }\n-    _buckets[index] \u003d new Bucket(tail, name, property);\n+    _buckets[index] \u003d new Bucket(tail, name, property, foundIndex);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,17 @@\n+public void replace(SettableBeanProperty property) {\n+    String name \u003d property.getName();\n+    int index \u003d name.hashCode() \u0026 (_buckets.length - 1);\n+    Bucket tail \u003d null;\n+    boolean found \u003d false;\n+    for (Bucket bucket \u003d _buckets[index]; bucket !\u003d null; bucket \u003d bucket.next) {\n+        if (!found \u0026\u0026 bucket.key.equals(name)) {\n+            found \u003d true;\n+        } else {\n+            tail \u003d new Bucket(tail, bucket.key, bucket.value);\n+        }\n+    }\n+    if (!found) {\n+        throw new NoSuchElementException(\"No entry \u0027\" + property + \"\u0027 found, can\u0027t replace\");\n+    }\n+    _buckets[index] \u003d new Bucket(tail, name, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void replace(SettableBeanProperty property) {\n    String name \u003d property.getName();\n    int index \u003d name.hashCode() \u0026 (_buckets.length - 1);\n    Bucket tail \u003d null;\n    boolean found \u003d false;\n    for (Bucket bucket \u003d _buckets[index]; bucket !\u003d null; bucket \u003d bucket.next) {\n        if (!found \u0026\u0026 bucket.key.equals(name)) {\n            found \u003d true;\n        } else {\n            tail \u003d new Bucket(tail, bucket.key, bucket.value);\n        }\n    }\n    if (!found) {\n        throw new NoSuchElementException(\"No entry \u0027\" + property + \"\u0027 found, can\u0027t replace\");\n    }\n    _buckets[index] \u003d new Bucket(tail, name, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
      "functionStartLine": 104,
      "functionName": "replace",
      "functionAnnotation": "",
      "functionDoc": "Specialized method that can be used to replace an existing entry\n(note: entry MUST exist; otherwise exception is thrown) with\nspecified replacement.\n"
    }
  }
}