{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeserializerCache.java",
  "functionName": "findValueDeserializer",
  "functionId": "findValueDeserializer___ctxt-DeserializationContext__factory-DeserializerFactory__propertyType-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
  "functionAnnotation": "",
  "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
  "functionStartLine": 136,
  "functionEndLine": 153,
  "numCommitsSeen": 75,
  "timeTaken": 2058,
  "changeHistory": [
    "af263c3decc975de00a78b81b38dbb4ab83c8c8e",
    "82b474d51545919cb38a49485f56fd29d6ed199b",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
    "2e5121ee9a521fe27e9caeaa91349183548a8820",
    "d6f54ffc91de340202a5058055c49100964ab6ad",
    "857ddd27198f3dd9fb95800b3728ea26fa47130b",
    "53fb8522b402a409139175cbf867afa924e549f5",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "af263c3decc975de00a78b81b38dbb4ab83c8c8e": "Ybodychange",
    "82b474d51545919cb38a49485f56fd29d6ed199b": "Yfilerename",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange,Ydocchange)",
    "2e5121ee9a521fe27e9caeaa91349183548a8820": "Ybodychange",
    "d6f54ffc91de340202a5058055c49100964ab6ad": "Ydocchange",
    "857ddd27198f3dd9fb95800b3728ea26fa47130b": "Ybodychange",
    "53fb8522b402a409139175cbf867afa924e549f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Ymultichange(Yfilerename,Yannotationchange,Ydocchange)",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "af263c3decc975de00a78b81b38dbb4ab83c8c8e": {
      "type": "Ybodychange",
      "commitMessage": "Implement #268\n",
      "commitDate": "10/24/13, 4:18 PM",
      "commitName": "af263c3decc975de00a78b81b38dbb4ab83c8c8e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/21/13, 10:08 PM",
      "commitNameOld": "a4575017d54b7a7d0be5711d9761d1c4eb0aea35",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 63.76,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n        if (deser \u003d\u003d null) {\n            deser \u003d _handleUnknownValueDeserializer(propertyType);\n        }\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 137,
      "functionName": "findValueDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
      "diff": "@@ -1,11 +1,10 @@\n public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n-    if (deser !\u003d null) {\n-        return deser;\n-    }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n     if (deser \u003d\u003d null) {\n-        deser \u003d _handleUnknownValueDeserializer(propertyType);\n+        deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n+        if (deser \u003d\u003d null) {\n+            deser \u003d _handleUnknownValueDeserializer(propertyType);\n+        }\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82b474d51545919cb38a49485f56fd29d6ed199b": {
      "type": "Yfilerename",
      "commitMessage": "Fix 3 unit test failures\n",
      "commitDate": "2/2/12, 5:33 PM",
      "commitName": "82b474d51545919cb38a49485f56fd29d6ed199b",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 1:00 PM",
      "commitNameOld": "69afdff1fac0fc4a472a0b04d5bc01df49a427c5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 118,
      "functionName": "findValueDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
      }
    },
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
      "commitDate": "2/1/12, 10:18 PM",
      "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 120,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,11 +1,11 @@\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 120,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,11 +1,11 @@\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 120,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,11 +1,11 @@\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, factory, propertyType);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, propertyType-JavaType]",
            "newValue": "[ctxt-DeserializationContext, factory-DeserializerFactory, propertyType-JavaType]"
          }
        }
      ]
    },
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange,Ydocchange)",
      "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
      "commitDate": "1/31/12, 12:45 PM",
      "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 179,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,20 +1,11 @@\n-@SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n-        if (deser instanceof ContextualDeserializer) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-        }\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n-    if (deser instanceof ContextualDeserializer) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-    }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, propertyType-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, propertyType-JavaType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 179,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,20 +1,11 @@\n-@SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n-        if (deser instanceof ContextualDeserializer) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-        }\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n-    if (deser instanceof ContextualDeserializer) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-    }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 179,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,20 +1,11 @@\n-@SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n-        if (deser instanceof ContextualDeserializer) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-        }\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n-    if (deser instanceof ContextualDeserializer) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-    }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"unchecked\")",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 179,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,20 +1,11 @@\n-@SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n-        if (deser instanceof ContextualDeserializer) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-        }\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n-    if (deser instanceof ContextualDeserializer) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n-    }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
            "newValue": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\u003cp\u003e\nNote also that deserializer returned is guaranteed to be resolved\n(if it is of type {@link ResolvableDeserializer}), but\nnot contextualized (wrt {@link ContextualDeserializer}): caller\nhas to handle latter if necessary.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n"
          }
        }
      ]
    },
    "2e5121ee9a521fe27e9caeaa91349183548a8820": {
      "type": "Ybodychange",
      "commitMessage": "Remove parametrization of ContextualDeserializer\n",
      "commitDate": "1/30/12, 8:24 AM",
      "commitName": "2e5121ee9a521fe27e9caeaa91349183548a8820",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/29/12, 9:36 PM",
      "commitNameOld": "06c20b1814a497cda59d46609ca03bfac20f64f1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 178,
      "functionName": "findValueDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
      "diff": "@@ -1,20 +1,20 @@\n @SuppressWarnings(\"unchecked\")\n public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n-        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n+        if (deser instanceof ContextualDeserializer) {\n+            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n             deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n         }\n         return deser;\n     }\n     deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n-    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n+    if (deser instanceof ContextualDeserializer) {\n+        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n         deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6f54ffc91de340202a5058055c49100964ab6ad": {
      "type": "Ydocchange",
      "commitMessage": "Fix javadocs\n",
      "commitDate": "1/24/12, 5:50 PM",
      "commitName": "d6f54ffc91de340202a5058055c49100964ab6ad",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/24/12, 4:51 PM",
      "commitNameOld": "857ddd27198f3dd9fb95800b3728ea26fa47130b",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 182,
      "functionName": "findValueDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
        "newValue": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param ctxt Deserialization context\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n"
      }
    },
    "857ddd27198f3dd9fb95800b3728ea26fa47130b": {
      "type": "Ybodychange",
      "commitMessage": "Cosmetic refactoring: making Deserializers callbacks more similar, passing same common args\n",
      "commitDate": "1/24/12, 4:51 PM",
      "commitName": "857ddd27198f3dd9fb95800b3728ea26fa47130b",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 4:19 PM",
      "commitNameOld": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 180,
      "functionName": "findValueDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
      "diff": "@@ -1,20 +1,20 @@\n @SuppressWarnings(\"unchecked\")\n public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n+            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n             deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n         }\n         return deser;\n     }\n     deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n+        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt, property);\n         deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53fb8522b402a409139175cbf867afa924e549f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
      "commitDate": "1/24/12, 1:02 PM",
      "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 178,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,20 +1,20 @@\n @SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n+            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n             deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n         }\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n+        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n         deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, propertyType-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, propertyType-JavaType, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 178,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,20 +1,20 @@\n @SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n+            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n             deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n         }\n         return deser;\n     }\n-    deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n+    deser \u003d _createAndCacheValueDeserializer(ctxt, propertyType, property);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n-        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n+        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(ctxt.getConfig(), property);\n         deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Ymultichange(Yfilerename,Yannotationchange,Ydocchange)",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Deser refactoring, renaming\n",
          "commitDate": "1/24/12, 11:23 AM",
          "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:08 AM",
          "commitNameOld": "c9e0c1712bb188783acb586a4eb4ece4217b2962",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 178,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,21 +1,20 @@\n @SuppressWarnings(\"unchecked\")\n-@Override\n public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n             JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n             deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n         }\n         return deser;\n     }\n     deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n         deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
          }
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Deser refactoring, renaming\n",
          "commitDate": "1/24/12, 11:23 AM",
          "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:08 AM",
          "commitNameOld": "c9e0c1712bb188783acb586a4eb4ece4217b2962",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 178,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,21 +1,20 @@\n @SuppressWarnings(\"unchecked\")\n-@Override\n public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n             JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n             deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n         }\n         return deser;\n     }\n     deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n         deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"unchecked\"),@Override",
            "newValue": "@SuppressWarnings(\"unchecked\")"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Deser refactoring, renaming\n",
          "commitDate": "1/24/12, 11:23 AM",
          "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:08 AM",
          "commitNameOld": "c9e0c1712bb188783acb586a4eb4ece4217b2962",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 178,
          "functionName": "findValueDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,21 +1,20 @@\n @SuppressWarnings(\"unchecked\")\n-@Override\n public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n     if (deser !\u003d null) {\n         if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n             JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n             deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n         }\n         return deser;\n     }\n     deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n     if (deser \u003d\u003d null) {\n         deser \u003d _handleUnknownValueDeserializer(propertyType);\n     }\n     if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n         JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n         deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Method called to get hold of a deserializer for a value of given type;\nor if no such deserializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for value types; not for keys.\nKey deserializers can be accessed using {@link #findKeyDeserializer}.\n\n@param config Deserialization configuration\n@param propertyType Declared type of the value to deserializer (obtained using\n  \u0027setter\u0027 method signature and/or type annotations\n@param property Object that represents accessor for property value; field,\n   setter method or constructor parameter.\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable deserializer; including that of not\n  finding any serializer\n"
          }
        }
      ]
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,21 @@\n+@SuppressWarnings(\"unchecked\")\n+@Override\n+public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n+    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n+    if (deser !\u003d null) {\n+        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n+            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n+            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n+        }\n+        return deser;\n+    }\n+    deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n+    if (deser \u003d\u003d null) {\n+        deser \u003d _handleUnknownValueDeserializer(propertyType);\n+    }\n+    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n+        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n+        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n+    }\n+    return deser;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\n@Override\npublic JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationConfig config, JavaType propertyType, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(propertyType);\n    if (deser !\u003d null) {\n        if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n            JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n            deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n        }\n        return deser;\n    }\n    deser \u003d _createAndCacheValueDeserializer(config, propertyType, property);\n    if (deser \u003d\u003d null) {\n        deser \u003d _handleUnknownValueDeserializer(propertyType);\n    }\n    if (deser instanceof ContextualDeserializer\u003c?\u003e) {\n        JsonDeserializer\u003c?\u003e d \u003d ((ContextualDeserializer\u003c?\u003e) deser).createContextual(config, property);\n        deser \u003d (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
      "functionStartLine": 152,
      "functionName": "findValueDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\"),@Override",
      "functionDoc": ""
    }
  }
}