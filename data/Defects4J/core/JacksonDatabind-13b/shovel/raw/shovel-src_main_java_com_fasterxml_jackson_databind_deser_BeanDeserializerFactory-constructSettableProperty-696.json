{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerFactory.java",
  "functionName": "constructSettableProperty",
  "functionId": "constructSettableProperty___ctxt-DeserializationContext__beanDesc-BeanDescription__propDef-BeanPropertyDefinition__jdkType-Type",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
  "functionStartLine": 696,
  "functionEndLine": 745,
  "numCommitsSeen": 152,
  "timeTaken": 4602,
  "changeHistory": [
    "a4c91739eff103d2982fced95a9e50f7754fba51",
    "b009194c5f68fa4d773723113beeed3ae9308b9d",
    "8bdd49b36c8c05483669f6bd50b3839016f78983",
    "1488cef12ee88e25dd0161f1b85c552a32775778",
    "8d53c22404fbd066cf3f81d1248e188dba5caebd",
    "1421af6eeaa8101c3ba8cef834f893943e244cf8",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "d0bb3152ceec7c33c700d21454b34700968a526a",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
    "65c410c0c40724f763e0b4bce2db6d43bf078818",
    "9db4d99c6c425b779f1bb79ad4db667702657600",
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "a4c91739eff103d2982fced95a9e50f7754fba51": "Ybodychange",
    "b009194c5f68fa4d773723113beeed3ae9308b9d": "Ybodychange",
    "8bdd49b36c8c05483669f6bd50b3839016f78983": "Ybodychange",
    "1488cef12ee88e25dd0161f1b85c552a32775778": "Ybodychange",
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": "Ybodychange",
    "1421af6eeaa8101c3ba8cef834f893943e244cf8": "Ydocchange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ybodychange",
    "d0bb3152ceec7c33c700d21454b34700968a526a": "Ybodychange",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": "Ybodychange",
    "65c410c0c40724f763e0b4bce2db6d43bf078818": "Ybodychange",
    "9db4d99c6c425b779f1bb79ad4db667702657600": "Ymultichange(Yparameterchange,Ybodychange)",
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455": "Ymultichange(Yparameterchange,Ybodychange)",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a4c91739eff103d2982fced95a9e50f7754fba51": {
      "type": "Ybodychange",
      "commitMessage": "Foundation for forward reference resolution.\n",
      "commitDate": "1/13/14, 7:07 AM",
      "commitName": "a4c91739eff103d2982fced95a9e50f7754fba51",
      "commitAuthor": "Pascal GÃ©linas",
      "commitDateOld": "1/11/14, 7:51 PM",
      "commitNameOld": "0e1e87827326aa785da225aa980d7429a9d562f7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.47,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getNonConstructorMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    ObjectIdInfo objectIdInfo \u003d propDef.findObjectIdInfo();\n    if (objectIdInfo !\u003d null) {\n        prop.setObjectIdInfo(objectIdInfo);\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 740,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,29 +1,33 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getNonConstructorMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n     BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n+    ObjectIdInfo objectIdInfo \u003d propDef.findObjectIdInfo();\n+    if (objectIdInfo !\u003d null) {\n+        prop.setObjectIdInfo(objectIdInfo);\n+    }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b009194c5f68fa4d773723113beeed3ae9308b9d": {
      "type": "Ybodychange",
      "commitMessage": "Full fix for #318\n",
      "commitDate": "10/18/13, 11:52 PM",
      "commitName": "b009194c5f68fa4d773723113beeed3ae9308b9d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/26/13, 4:18 PM",
      "commitNameOld": "8bdd49b36c8c05483669f6bd50b3839016f78983",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 84.32,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getNonConstructorMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 735,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,29 +1,29 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n-    AnnotatedMember mutator \u003d propDef.getMutator();\n+    AnnotatedMember mutator \u003d propDef.getNonConstructorMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n     BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bdd49b36c8c05483669f6bd50b3839016f78983": {
      "type": "Ybodychange",
      "commitMessage": "Complete handling of property description -- need to test still\n",
      "commitDate": "7/26/13, 4:18 PM",
      "commitName": "8bdd49b36c8c05483669f6bd50b3839016f78983",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/26/13, 2:42 PM",
      "commitNameOld": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 725,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,29 +1,29 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n-    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n+    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1488cef12ee88e25dd0161f1b85c552a32775778": {
      "type": "Ybodychange",
      "commitMessage": "Completing conversion to using PropertyName instead of String in most parts of API\n",
      "commitDate": "7/26/13, 2:42 PM",
      "commitName": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 11:05 PM",
      "commitNameOld": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 724,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,29 +1,29 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n-    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n+    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getFullName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": {
      "type": "Ybodychange",
      "commitMessage": "More refactoring, piping through \"wrapper name\" so downstream code need not use introspector\n",
      "commitDate": "3/13/13, 3:56 PM",
      "commitName": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/13/13, 3:20 PM",
      "commitNameOld": "69d9c105be5d51257b1624bdacf644caa7d6f6e8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 718,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,29 +1,29 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n-    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getName(), t0, beanDesc.getClassAnnotations(), mutator);\n+    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getName(), t0, propDef.getWrapperName(), beanDesc.getClassAnnotations(), mutator, propDef.isRequired());\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1421af6eeaa8101c3ba8cef834f893943e244cf8": {
      "type": "Ydocchange",
      "commitMessage": "Implement [JACKSON-805], SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\n",
      "commitDate": "3/9/12, 9:46 PM",
      "commitName": "1421af6eeaa8101c3ba8cef834f893943e244cf8",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/12, 4:38 PM",
      "commitNameOld": "bfa5aecfc3de90af06af51741d48c4cc0579f92e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.21,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getName(), t0, beanDesc.getClassAnnotations(), mutator);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 701,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
        "newValue": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n"
      }
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ybodychange",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/10/12, 9:44 AM",
      "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.54,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getName(), t0, beanDesc.getClassAnnotations(), mutator);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 702,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,30 +1,29 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n-    final String name \u003d propDef.getName();\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n-    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n+    BeanProperty.Std property \u003d new BeanProperty.Std(propDef.getName(), t0, beanDesc.getClassAnnotations(), mutator);\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n-        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n+        prop \u003d new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n-        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n+        prop \u003d new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d0bb3152ceec7c33c700d21454b34700968a526a": {
      "type": "Ybodychange",
      "commitMessage": "Removing BeanProperty from TypeDeserializer handling as well\n",
      "commitDate": "1/31/12, 1:04 PM",
      "commitName": "d0bb3152ceec7c33c700d21454b34700968a526a",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 12:45 PM",
      "commitNameOld": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    final String name \u003d propDef.getName();\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 591,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,30 +1,30 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     final String name \u003d propDef.getName();\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n-    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n+    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n-    type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n+    type \u003d modifyTypeByAnnotation(ctxt, mutator, type);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": {
      "type": "Ybodychange",
      "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
      "commitDate": "1/31/12, 12:45 PM",
      "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/30/12, 7:15 PM",
      "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    final String name \u003d propDef.getName();\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 591,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,30 +1,30 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     final String name \u003d propDef.getName();\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n-    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator, property);\n+    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65c410c0c40724f763e0b4bce2db6d43bf078818": {
      "type": "Ybodychange",
      "commitMessage": "refactoring\n",
      "commitDate": "1/27/12, 8:44 PM",
      "commitName": "65c410c0c40724f763e0b4bce2db6d43bf078818",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 10:26 PM",
      "commitNameOld": "19ab5808eb8e47662f1d55408fdb186320061f13",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    final String name \u003d propDef.getName();\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator, property);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 582,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,30 +1,30 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n     AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n         mutator.fixAccess();\n     }\n     final String name \u003d propDef.getName();\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator, property);\n     type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n     if (mutator instanceof AnnotatedMethod) {\n         prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n         prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n-    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(mutator);\n+    AnnotationIntrospector.ReferenceProperty ref \u003d propDef.findReferenceType();\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9db4d99c6c425b779f1bb79ad4db667702657600": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring: making more use of BeanPropertyDefinition\n",
      "commitDate": "1/26/12, 1:07 PM",
      "commitName": "9db4d99c6c425b779f1bb79ad4db667702657600",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring: making more use of BeanPropertyDefinition\n",
          "commitDate": "1/26/12, 1:07 PM",
          "commitName": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 12:33 PM",
          "commitNameOld": "1dcce980954c9acef708aa9a0a128f04564bdd25",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    final String name \u003d propDef.getName();\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator, property);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(mutator);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1096,
          "functionName": "constructSettableProperty",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
          "diff": "@@ -1,28 +1,30 @@\n-protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMember setter, Type jdkType) throws JsonMappingException {\n+protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n+    AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n-        setter.fixAccess();\n+        mutator.fixAccess();\n     }\n+    final String name \u003d propDef.getName();\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n-    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n-    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n+    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n+    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n-    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n-    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n+    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator, property);\n+    type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n-    if (setter instanceof AnnotatedMethod) {\n-        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) setter);\n+    if (mutator instanceof AnnotatedMethod) {\n+        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n-        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) setter);\n+        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n-    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n+    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(mutator);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, name-String, setter-AnnotatedMember, jdkType-Type]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, propDef-BeanPropertyDefinition, jdkType-Type]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring: making more use of BeanPropertyDefinition\n",
          "commitDate": "1/26/12, 1:07 PM",
          "commitName": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 12:33 PM",
          "commitNameOld": "1dcce980954c9acef708aa9a0a128f04564bdd25",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n    AnnotatedMember mutator \u003d propDef.getMutator();\n    if (ctxt.canOverrideAccessModifiers()) {\n        mutator.fixAccess();\n    }\n    final String name \u003d propDef.getName();\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator, property);\n    type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (mutator instanceof AnnotatedMethod) {\n        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n    } else {\n        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(mutator);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1096,
          "functionName": "constructSettableProperty",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
          "diff": "@@ -1,28 +1,30 @@\n-protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMember setter, Type jdkType) throws JsonMappingException {\n+protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, Type jdkType) throws JsonMappingException {\n+    AnnotatedMember mutator \u003d propDef.getMutator();\n     if (ctxt.canOverrideAccessModifiers()) {\n-        setter.fixAccess();\n+        mutator.fixAccess();\n     }\n+    final String name \u003d propDef.getName();\n     JavaType t0 \u003d beanDesc.resolveType(jdkType);\n-    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n-    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n+    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n+    JavaType type \u003d resolveType(ctxt, beanDesc, t0, mutator, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n-    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n-    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n+    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, mutator, property);\n+    type \u003d modifyTypeByAnnotation(ctxt, mutator, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop;\n-    if (setter instanceof AnnotatedMethod) {\n-        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) setter);\n+    if (mutator instanceof AnnotatedMethod) {\n+        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);\n     } else {\n-        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) setter);\n+        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator);\n     }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n-    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n+    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(mutator);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "...\n",
      "commitDate": "1/26/12, 12:01 PM",
      "commitName": "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "...\n",
          "commitDate": "1/26/12, 12:01 PM",
          "commitName": "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 5:01 PM",
          "commitNameOld": "e14295471644955129d9f1a70a66207e7ee50856",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 1.79,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMember setter, Type jdkType) throws JsonMappingException {\n    if (ctxt.canOverrideAccessModifiers()) {\n        setter.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (setter instanceof AnnotatedMethod) {\n        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) setter);\n    } else {\n        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) setter);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1093,
          "functionName": "constructSettableProperty",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
          "diff": "@@ -1,23 +1,28 @@\n-protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n+protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMember setter, Type jdkType) throws JsonMappingException {\n     if (ctxt.canOverrideAccessModifiers()) {\n         setter.fixAccess();\n     }\n-    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n+    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n     type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n-    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n+    SettableBeanProperty prop;\n+    if (setter instanceof AnnotatedMethod) {\n+        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) setter);\n+    } else {\n+        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) setter);\n+    }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, name-String, setter-AnnotatedMethod]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, name-String, setter-AnnotatedMember, jdkType-Type]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "...\n",
          "commitDate": "1/26/12, 12:01 PM",
          "commitName": "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 5:01 PM",
          "commitNameOld": "e14295471644955129d9f1a70a66207e7ee50856",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 1.79,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMember setter, Type jdkType) throws JsonMappingException {\n    if (ctxt.canOverrideAccessModifiers()) {\n        setter.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop;\n    if (setter instanceof AnnotatedMethod) {\n        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) setter);\n    } else {\n        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) setter);\n    }\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1093,
          "functionName": "constructSettableProperty",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
          "diff": "@@ -1,23 +1,28 @@\n-protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n+protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMember setter, Type jdkType) throws JsonMappingException {\n     if (ctxt.canOverrideAccessModifiers()) {\n         setter.fixAccess();\n     }\n-    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n+    JavaType t0 \u003d beanDesc.resolveType(jdkType);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n     JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n     type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n-    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n+    SettableBeanProperty prop;\n+    if (setter instanceof AnnotatedMethod) {\n+        prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) setter);\n+    } else {\n+        prop \u003d new SettableBeanProperty.FieldProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) setter);\n+    }\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n    if (ctxt.canOverrideAccessModifiers()) {\n        setter.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1206,
          "functionName": "constructSettableProperty",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
          "diff": "@@ -1,23 +1,23 @@\n-protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n-    if (config.canOverrideAccessModifiers()) {\n+protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n+    if (ctxt.canOverrideAccessModifiers()) {\n         setter.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n-    JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n+    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n-    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n-    type \u003d modifyTypeByAnnotation(config, setter, type, name);\n+    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n+    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n-    AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n+    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, beanDesc-BeanDescription, name-String, setter-AnnotatedMethod]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, name-String, setter-AnnotatedMethod]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n    if (ctxt.canOverrideAccessModifiers()) {\n        setter.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 1206,
          "functionName": "constructSettableProperty",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
          "diff": "@@ -1,23 +1,23 @@\n-protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n-    if (config.canOverrideAccessModifiers()) {\n+protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n+    if (ctxt.canOverrideAccessModifiers()) {\n         setter.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n-    JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n+    JavaType type \u003d resolveType(ctxt, beanDesc, t0, setter, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n-    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n-    type \u003d modifyTypeByAnnotation(config, setter, type, name);\n+    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(ctxt, setter, property);\n+    type \u003d modifyTypeByAnnotation(ctxt, setter, type, property);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n-    AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n+    AnnotationIntrospector.ReferenceProperty ref \u003d ctxt.getAnnotationIntrospector().findReferenceType(setter);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n    if (config.canOverrideAccessModifiers()) {\n        setter.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n    JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n    type \u003d modifyTypeByAnnotation(config, setter, type, name);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1227,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,23 +1,23 @@\n-protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BasicBeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n+protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n     if (config.canOverrideAccessModifiers()) {\n         setter.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n     JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n     type \u003d modifyTypeByAnnotation(config, setter, type, name);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, beanDesc-BasicBeanDescription, name-String, setter-AnnotatedMethod]",
        "newValue": "[config-DeserializationConfig, beanDesc-BeanDescription, name-String, setter-AnnotatedMethod]"
      }
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/28/11, 10:35 AM",
      "commitNameOld": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 14.49,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BasicBeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n    if (config.canOverrideAccessModifiers()) {\n        setter.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n    JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n    type \u003d modifyTypeByAnnotation(config, setter, type, name);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1246,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n",
      "diff": "@@ -1,23 +1,23 @@\n protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BasicBeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n-    if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+    if (config.canOverrideAccessModifiers()) {\n         setter.fixAccess();\n     }\n     JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n     JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n     if (type !\u003d t0) {\n         property \u003d property.withType(type);\n     }\n     JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n     type \u003d modifyTypeByAnnotation(config, setter, type, name);\n     TypeDeserializer typeDeser \u003d type.getTypeHandler();\n     SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n     if (propDeser !\u003d null) {\n         prop \u003d prop.withValueDeserializer(propDeser);\n     }\n     AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n     if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n         prop.setManagedReferenceName(ref.getName());\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,23 @@\n+protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BasicBeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n+    if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+        setter.fixAccess();\n+    }\n+    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n+    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n+    JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n+    if (type !\u003d t0) {\n+        property \u003d property.withType(type);\n+    }\n+    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n+    type \u003d modifyTypeByAnnotation(config, setter, type, name);\n+    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n+    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n+    if (propDeser !\u003d null) {\n+        prop \u003d prop.withValueDeserializer(propDeser);\n+    }\n+    AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n+    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n+        prop.setManagedReferenceName(ref.getName());\n+    }\n+    return prop;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected SettableBeanProperty constructSettableProperty(DeserializationConfig config, BasicBeanDescription beanDesc, String name, AnnotatedMethod setter) throws JsonMappingException {\n    if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n        setter.fixAccess();\n    }\n    JavaType t0 \u003d beanDesc.bindingsForBeanType().resolveType(setter.getParameterType(0));\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), setter);\n    JavaType type \u003d resolveType(config, beanDesc, t0, setter, property);\n    if (type !\u003d t0) {\n        property \u003d property.withType(type);\n    }\n    JsonDeserializer\u003cObject\u003e propDeser \u003d findDeserializerFromAnnotation(config, setter, property);\n    type \u003d modifyTypeByAnnotation(config, setter, type, name);\n    TypeDeserializer typeDeser \u003d type.getTypeHandler();\n    SettableBeanProperty prop \u003d new SettableBeanProperty.MethodProperty(name, type, typeDeser, beanDesc.getClassAnnotations(), setter);\n    if (propDeser !\u003d null) {\n        prop \u003d prop.withValueDeserializer(propDeser);\n    }\n    AnnotationIntrospector.ReferenceProperty ref \u003d config.getAnnotationIntrospector().findReferenceType(setter);\n    if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n        prop.setManagedReferenceName(ref.getName());\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1261,
      "functionName": "constructSettableProperty",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct a regular bean property setter using\nthe given setter method.\n\n@param setter Method to use to set property value; or null if none.\n   Null only for \"setterless\" properties\n@return Property constructed, if any; or null to indicate that\n  there should be no property based on given definitions.\n"
    }
  }
}