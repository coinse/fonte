{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonDeserializer.java",
  "functionName": "getObjectIdReader",
  "functionId": "getObjectIdReader",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
  "functionAnnotation": "",
  "functionDoc": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns null, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return reader instance, depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return ObjectIdReader used for resolving possible Object Identifier\n   value, instead of full value serialization, if deserializer can do that;\n   null if no Object Id is expected.\n@since 2.0\n",
  "functionStartLine": 284,
  "functionEndLine": 284,
  "numCommitsSeen": 48,
  "timeTaken": 1656,
  "changeHistory": [
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
    "61add0346b9bca1caee8f229b2866be9d1dcd37f",
    "0344ce08eb33d9d3aeb6478ce0391368596eac04",
    "530067bb8db8fc31c27c6075c64c1c075c3ea671",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Ydocchange)",
    "61add0346b9bca1caee8f229b2866be9d1dcd37f": "Ymultichange(Yrename,Ydocchange)",
    "0344ce08eb33d9d3aeb6478ce0391368596eac04": "Ydocchange",
    "530067bb8db8fc31c27c6075c64c1c075c3ea671": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Ydocchange,Yrename,Yparameterchange)",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
      "commitDate": "3/5/12, 10:34 PM",
      "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
          "commitDate": "3/5/12, 10:34 PM",
          "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/26/12, 5:02 PM",
          "commitNameOld": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 8.23,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectIdReader getObjectIdReader() {\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 207,
          "functionName": "getObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns null, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return reader instance, depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return ObjectIdReader used for resolving possible Object Identifier\n   value, instead of full value serialization, if deserializer can do that;\n   null if no Object Id is expected.\n@since 2.0\n",
          "diff": "@@ -1,3 +1,3 @@\n-public boolean canResolveObjectId() {\n-    return false;\n+public ObjectIdReader getObjectIdReader() {\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "canResolveObjectId",
            "newValue": "getObjectIdReader"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
          "commitDate": "3/5/12, 10:34 PM",
          "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/26/12, 5:02 PM",
          "commitNameOld": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 8.23,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectIdReader getObjectIdReader() {\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 207,
          "functionName": "getObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns null, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return reader instance, depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return ObjectIdReader used for resolving possible Object Identifier\n   value, instead of full value serialization, if deserializer can do that;\n   null if no Object Id is expected.\n@since 2.0\n",
          "diff": "@@ -1,3 +1,3 @@\n-public boolean canResolveObjectId() {\n-    return false;\n+public ObjectIdReader getObjectIdReader() {\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "ObjectIdReader"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
          "commitDate": "3/5/12, 10:34 PM",
          "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/26/12, 5:02 PM",
          "commitNameOld": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 8.23,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectIdReader getObjectIdReader() {\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 207,
          "functionName": "getObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns null, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return reader instance, depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return ObjectIdReader used for resolving possible Object Identifier\n   value, instead of full value serialization, if deserializer can do that;\n   null if no Object Id is expected.\n@since 2.0\n",
          "diff": "@@ -1,3 +1,3 @@\n-public boolean canResolveObjectId() {\n-    return false;\n+public ObjectIdReader getObjectIdReader() {\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
          "commitDate": "3/5/12, 10:34 PM",
          "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/26/12, 5:02 PM",
          "commitNameOld": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 8.23,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectIdReader getObjectIdReader() {\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 207,
          "functionName": "getObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns null, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return reader instance, depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return ObjectIdReader used for resolving possible Object Identifier\n   value, instead of full value serialization, if deserializer can do that;\n   null if no Object Id is expected.\n@since 2.0\n",
          "diff": "@@ -1,3 +1,3 @@\n-public boolean canResolveObjectId() {\n-    return false;\n+public ObjectIdReader getObjectIdReader() {\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns false, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return true depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return True if this deserializer can be given an Object Identifier\n   instead of full value serialization\n@since 2.0\n",
            "newValue": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns null, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return reader instance, depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return ObjectIdReader used for resolving possible Object Identifier\n   value, instead of full value serialization, if deserializer can do that;\n   null if no Object Id is expected.\n@since 2.0\n"
          }
        }
      ]
    },
    "61add0346b9bca1caee8f229b2866be9d1dcd37f": {
      "type": "Ymultichange(Yrename,Ydocchange)",
      "commitMessage": "Adding support for (eventually) handling Object Id forward references; unit test (now failing) to verify functionality\n",
      "commitDate": "2/26/12, 5:02 PM",
      "commitName": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Adding support for (eventually) handling Object Id forward references; unit test (now failing) to verify functionality\n",
          "commitDate": "2/26/12, 5:02 PM",
          "commitName": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/26/12, 4:39 PM",
          "commitNameOld": "32fcb5ddd31ee7bcec0028d34c7d2a9f36463ffa",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean canResolveObjectId() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 205,
          "functionName": "canResolveObjectId",
          "functionAnnotation": "",
          "functionDoc": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns false, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return true depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return True if this deserializer can be given an Object Identifier\n   instead of full value serialization\n@since 2.0\n",
          "diff": "@@ -1,3 +1,3 @@\n-public boolean isCachable() {\n+public boolean canResolveObjectId() {\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "isCachable",
            "newValue": "canResolveObjectId"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Adding support for (eventually) handling Object Id forward references; unit test (now failing) to verify functionality\n",
          "commitDate": "2/26/12, 5:02 PM",
          "commitName": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/26/12, 4:39 PM",
          "commitNameOld": "32fcb5ddd31ee7bcec0028d34c7d2a9f36463ffa",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean canResolveObjectId() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 205,
          "functionName": "canResolveObjectId",
          "functionAnnotation": "",
          "functionDoc": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns false, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return true depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return True if this deserializer can be given an Object Identifier\n   instead of full value serialization\n@since 2.0\n",
          "diff": "@@ -1,3 +1,3 @@\n-public boolean isCachable() {\n+public boolean canResolveObjectId() {\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer}:\ncached instance is just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
            "newValue": "Accessor that can be used to check whether this deserializer\nis expecting to possibly get an Object Identifier value instead of full value\nserialization, and if so, should be able to resolve it to actual\nObject instance to return as deserialized value.\n\u003cp\u003e\nDefault implementation returns false, as support can not be implemented\ngenerically. Some standard deserializers (most notably\n{@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\ndo implement this feature, and may return true depending on exact\nconfiguration of instance (which is based on type, and referring property).\n\n@return True if this deserializer can be given an Object Identifier\n   instead of full value serialization\n@since 2.0\n"
          }
        }
      ]
    },
    "0344ce08eb33d9d3aeb6478ce0391368596eac04": {
      "type": "Ydocchange",
      "commitMessage": "Remove separate \u0027isIgnoredXxx\u0027 methods; combined into \u0027hasIgnoralMarker\u0027 method in AnnotationIntrospector\n",
      "commitDate": "12/29/11, 3:12 PM",
      "commitName": "0344ce08eb33d9d3aeb6478ce0391368596eac04",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/28/11, 10:35 AM",
      "commitNameOld": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.19,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isCachable() {\n    return false;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
      "functionStartLine": 158,
      "functionName": "isCachable",
      "functionAnnotation": "",
      "functionDoc": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer}:\ncached instance is just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
        "newValue": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer}:\ncached instance is just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n"
      }
    },
    "530067bb8db8fc31c27c6075c64c1c075c3ea671": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Ydocchange,Yrename,Yparameterchange)",
      "commitMessage": "Remove @JsonCachable, replace with a method\n",
      "commitDate": "12/28/11, 10:35 AM",
      "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Remove @JsonCachable, replace with a method\n",
          "commitDate": "12/28/11, 10:35 AM",
          "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/28/11, 1:02 AM",
          "commitNameOld": "463614bbdcda0afcc680b924fd473476f862d274",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isCachable() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 158,
          "functionName": "isCachable",
          "functionAnnotation": "",
          "functionDoc": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public Boolean findCachability(AnnotatedClass ac) {\n-    return null;\n+public boolean isCachable() {\n+    return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
            "oldMethodName": "findCachability",
            "newMethodName": "isCachable"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Remove @JsonCachable, replace with a method\n",
          "commitDate": "12/28/11, 10:35 AM",
          "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/28/11, 1:02 AM",
          "commitNameOld": "463614bbdcda0afcc680b924fd473476f862d274",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isCachable() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 158,
          "functionName": "isCachable",
          "functionAnnotation": "",
          "functionDoc": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public Boolean findCachability(AnnotatedClass ac) {\n-    return null;\n+public boolean isCachable() {\n+    return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Boolean",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Remove @JsonCachable, replace with a method\n",
          "commitDate": "12/28/11, 10:35 AM",
          "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/28/11, 1:02 AM",
          "commitNameOld": "463614bbdcda0afcc680b924fd473476f862d274",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isCachable() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 158,
          "functionName": "isCachable",
          "functionAnnotation": "",
          "functionDoc": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public Boolean findCachability(AnnotatedClass ac) {\n-    return null;\n+public boolean isCachable() {\n+    return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Remove @JsonCachable, replace with a method\n",
          "commitDate": "12/28/11, 10:35 AM",
          "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/28/11, 1:02 AM",
          "commitNameOld": "463614bbdcda0afcc680b924fd473476f862d274",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isCachable() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 158,
          "functionName": "isCachable",
          "functionAnnotation": "",
          "functionDoc": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public Boolean findCachability(AnnotatedClass ac) {\n-    return null;\n+public boolean isCachable() {\n+    return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method that checks whether specified class has annotations\nthat indicate that it is (or is not) cachable. Exact\nsemantics depend on type of class annotated and using\nclass (factory or provider).\n\u003cp\u003e\nCurrently only used\nwith deserializers, to determine whether provider\nshould cache instances, and if no annotations are found,\nassumes non-cachable instances.\n\n@return True, if class is considered cachable within context,\n  False if not, and null if introspector does not care either\n  way.\n",
            "newValue": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "Remove @JsonCachable, replace with a method\n",
          "commitDate": "12/28/11, 10:35 AM",
          "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/28/11, 1:02 AM",
          "commitNameOld": "463614bbdcda0afcc680b924fd473476f862d274",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isCachable() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 158,
          "functionName": "isCachable",
          "functionAnnotation": "",
          "functionDoc": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public Boolean findCachability(AnnotatedClass ac) {\n-    return null;\n+public boolean isCachable() {\n+    return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "findCachability",
            "newValue": "isCachable"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Remove @JsonCachable, replace with a method\n",
          "commitDate": "12/28/11, 10:35 AM",
          "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/28/11, 1:02 AM",
          "commitNameOld": "463614bbdcda0afcc680b924fd473476f862d274",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.4,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isCachable() {\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java",
          "functionStartLine": 158,
          "functionName": "isCachable",
          "functionAnnotation": "",
          "functionDoc": "Method called to see if deserializer instance is cachable and\nusable for other properties of same type (type for which instance\nwas created).\n\u003cp\u003e\nNote that cached instances are still resolved on per-property basis,\nif instance implements {@link ResolvableDeserializer}: cached instance\nis just as the base. This means that in most cases it is safe to\ncache instances; however, it only makes sense to cache instances\nif instantiation is expensive, or if instances are heavy-weight.\n\u003cp\u003e\nDefault implementation returns false, to indicate that no caching\nis done.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public Boolean findCachability(AnnotatedClass ac) {\n-    return null;\n+public boolean isCachable() {\n+    return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ac-AnnotatedClass]",
            "newValue": "[]"
          }
        }
      ]
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,3 @@\n+public Boolean findCachability(AnnotatedClass ac) {\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Boolean findCachability(AnnotatedClass ac) {\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java",
      "functionStartLine": 171,
      "functionName": "findCachability",
      "functionAnnotation": "",
      "functionDoc": "Method that checks whether specified class has annotations\nthat indicate that it is (or is not) cachable. Exact\nsemantics depend on type of class annotated and using\nclass (factory or provider).\n\u003cp\u003e\nCurrently only used\nwith deserializers, to determine whether provider\nshould cache instances, and if no annotations are found,\nassumes non-cachable instances.\n\n@return True, if class is considered cachable within context,\n  False if not, and null if introspector does not care either\n  way.\n"
    }
  }
}