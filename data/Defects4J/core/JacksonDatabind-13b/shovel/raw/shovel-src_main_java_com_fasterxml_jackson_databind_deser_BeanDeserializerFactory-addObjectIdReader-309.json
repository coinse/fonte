{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerFactory.java",
  "functionName": "addObjectIdReader",
  "functionId": "addObjectIdReader___ctxt-DeserializationContext__beanDesc-BeanDescription__builder-BeanDeserializerBuilder",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 309,
  "functionEndLine": 344,
  "numCommitsSeen": 121,
  "timeTaken": 2414,
  "changeHistory": [
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
    "0e1e87827326aa785da225aa980d7429a9d562f7",
    "e05e352f53245160fe761b88665f11f67cef9d43",
    "a73f9e410349a70fe7d024c1305d281a9705a420",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "557bcd3d55fa779e40251506d159468bfe96fe04",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b",
    "d71dffac80c387b8f48090e9c43fd3e5a5207e27"
  ],
  "changeHistoryShort": {
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": "Ybodychange",
    "0e1e87827326aa785da225aa980d7429a9d562f7": "Yformatchange",
    "e05e352f53245160fe761b88665f11f67cef9d43": "Ybodychange",
    "a73f9e410349a70fe7d024c1305d281a9705a420": "Yformatchange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "557bcd3d55fa779e40251506d159468bfe96fe04": "Ybodychange",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": "Ybodychange",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": "Ybodychange",
    "d71dffac80c387b8f48090e9c43fd3e5a5207e27": "Yintroduced"
  },
  "changeHistoryDetails": {
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": {
      "type": "Ybodychange",
      "commitMessage": "Implementation of custom object id resolution.\n",
      "commitDate": "2/10/14, 7:59 AM",
      "commitName": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
      "commitAuthor": "Pascal Gélinas",
      "commitDateOld": "1/13/14, 7:07 AM",
      "commitNameOld": "a4c91739eff103d2982fced95a9e50f7754fba51",
      "commitAuthorOld": "Pascal Gélinas",
      "daysBetweenCommits": 28.04,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        PropertyName propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 359,
      "functionName": "addObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,27 @@\n protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n     if (objectIdInfo \u003d\u003d null) {\n         return;\n     }\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     JavaType idType;\n     SettableBeanProperty idProp;\n     ObjectIdGenerator\u003c?\u003e gen;\n+    ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         PropertyName propName \u003d objectIdInfo.getPropertyName();\n         idProp \u003d builder.findProperty(propName);\n         if (idProp \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n         }\n         idType \u003d idProp.getType();\n         gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n     } else {\n         JavaType type \u003d ctxt.constructType(implClass);\n         idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n         idProp \u003d null;\n         gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     }\n     JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n-    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n+    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0e1e87827326aa785da225aa980d7429a9d562f7": {
      "type": "Yformatchange",
      "commitMessage": "Fix #88\n",
      "commitDate": "1/11/14, 7:51 PM",
      "commitName": "0e1e87827326aa785da225aa980d7429a9d562f7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/3/13, 9:31 PM",
      "commitNameOld": "f6f0c9b90606b66cf788fe6f887a8941f5db0b92",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 68.93,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        PropertyName propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 359,
      "functionName": "addObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e05e352f53245160fe761b88665f11f67cef9d43": {
      "type": "Ybodychange",
      "commitMessage": "Start making changes to support full PropertyName passing, not just String name\n",
      "commitDate": "7/25/13, 11:05 PM",
      "commitName": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/9/13, 9:40 PM",
      "commitNameOld": "9150a0356a3c484e2823a63d3570cdd90c0040da",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 16.06,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        PropertyName propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 356,
      "functionName": "addObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,26 @@\n protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n     if (objectIdInfo \u003d\u003d null) {\n         return;\n     }\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     JavaType idType;\n     SettableBeanProperty idProp;\n     ObjectIdGenerator\u003c?\u003e gen;\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        String propName \u003d objectIdInfo.getPropertyName();\n+        PropertyName propName \u003d objectIdInfo.getPropertyName();\n         idProp \u003d builder.findProperty(propName);\n         if (idProp \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n         }\n         idType \u003d idProp.getType();\n         gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n     } else {\n         JavaType type \u003d ctxt.constructType(implClass);\n         idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n         idProp \u003d null;\n         gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     }\n     JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a73f9e410349a70fe7d024c1305d281a9705a420": {
      "type": "Yformatchange",
      "commitMessage": "...\n",
      "commitDate": "3/19/12, 5:44 PM",
      "commitName": "a73f9e410349a70fe7d024c1305d281a9705a420",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/9/12, 9:46 PM",
      "commitNameOld": "1421af6eeaa8101c3ba8cef834f893943e244cf8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 9.79,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 351,
      "functionName": "addObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/12, 9:44 AM",
          "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 7.54,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 351,
          "functionName": "addObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,26 @@\n-protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n-    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n-    if (oidInfo \u003d\u003d null) {\n-        return null;\n+protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n+    if (objectIdInfo \u003d\u003d null) {\n+        return;\n     }\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n+    JavaType idType;\n+    SettableBeanProperty idProp;\n     ObjectIdGenerator\u003c?\u003e gen;\n-    Class\u003c?\u003e implClass \u003d oidInfo.getGeneratorType();\n-    JavaType type \u003d ctxt.constructType(implClass);\n-    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n-    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        gen \u003d null;\n-        if (true)\n-            throw new IllegalStateException(\"Not yet implemented!\");\n+        String propName \u003d objectIdInfo.getPropertyName();\n+        idProp \u003d builder.findProperty(propName);\n+        if (idProp \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+        }\n+        idType \u003d idProp.getType();\n+        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n     } else {\n-        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), oidInfo);\n+        JavaType type \u003d ctxt.constructType(implClass);\n+        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+        idProp \u003d null;\n+        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     }\n-    return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n+    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n+    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "constructObjectIdReader",
            "newValue": "addObjectIdReader"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/12, 9:44 AM",
          "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 7.54,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 351,
          "functionName": "addObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,26 @@\n-protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n-    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n-    if (oidInfo \u003d\u003d null) {\n-        return null;\n+protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n+    if (objectIdInfo \u003d\u003d null) {\n+        return;\n     }\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n+    JavaType idType;\n+    SettableBeanProperty idProp;\n     ObjectIdGenerator\u003c?\u003e gen;\n-    Class\u003c?\u003e implClass \u003d oidInfo.getGeneratorType();\n-    JavaType type \u003d ctxt.constructType(implClass);\n-    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n-    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        gen \u003d null;\n-        if (true)\n-            throw new IllegalStateException(\"Not yet implemented!\");\n+        String propName \u003d objectIdInfo.getPropertyName();\n+        idProp \u003d builder.findProperty(propName);\n+        if (idProp \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+        }\n+        idType \u003d idProp.getType();\n+        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n     } else {\n-        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), oidInfo);\n+        JavaType type \u003d ctxt.constructType(implClass);\n+        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+        idProp \u003d null;\n+        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     }\n-    return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n+    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n+    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, builder-BeanDeserializerBuilder]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/12, 9:44 AM",
          "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 7.54,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 351,
          "functionName": "addObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,26 @@\n-protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n-    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n-    if (oidInfo \u003d\u003d null) {\n-        return null;\n+protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n+    if (objectIdInfo \u003d\u003d null) {\n+        return;\n     }\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n+    JavaType idType;\n+    SettableBeanProperty idProp;\n     ObjectIdGenerator\u003c?\u003e gen;\n-    Class\u003c?\u003e implClass \u003d oidInfo.getGeneratorType();\n-    JavaType type \u003d ctxt.constructType(implClass);\n-    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n-    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        gen \u003d null;\n-        if (true)\n-            throw new IllegalStateException(\"Not yet implemented!\");\n+        String propName \u003d objectIdInfo.getPropertyName();\n+        idProp \u003d builder.findProperty(propName);\n+        if (idProp \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+        }\n+        idType \u003d idProp.getType();\n+        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n     } else {\n-        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), oidInfo);\n+        JavaType type \u003d ctxt.constructType(implClass);\n+        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+        idProp \u003d null;\n+        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     }\n-    return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n+    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n+    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "ObjectIdReader",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/12, 9:44 AM",
          "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 7.54,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return;\n    }\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    SettableBeanProperty idProp;\n    ObjectIdGenerator\u003c?\u003e gen;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        idProp \u003d builder.findProperty(propName);\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n    } else {\n        JavaType type \u003d ctxt.constructType(implClass);\n        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        idProp \u003d null;\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 351,
          "functionName": "addObjectIdReader",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,26 @@\n-protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n-    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n-    if (oidInfo \u003d\u003d null) {\n-        return null;\n+protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n+    if (objectIdInfo \u003d\u003d null) {\n+        return;\n     }\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n+    JavaType idType;\n+    SettableBeanProperty idProp;\n     ObjectIdGenerator\u003c?\u003e gen;\n-    Class\u003c?\u003e implClass \u003d oidInfo.getGeneratorType();\n-    JavaType type \u003d ctxt.constructType(implClass);\n-    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n-    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        gen \u003d null;\n-        if (true)\n-            throw new IllegalStateException(\"Not yet implemented!\");\n+        String propName \u003d objectIdInfo.getPropertyName();\n+        idProp \u003d builder.findProperty(propName);\n+        if (idProp \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+        }\n+        idType \u003d idProp.getType();\n+        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n     } else {\n-        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), oidInfo);\n+        JavaType type \u003d ctxt.constructType(implClass);\n+        idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+        idProp \u003d null;\n+        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     }\n-    return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n+    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n+    builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "557bcd3d55fa779e40251506d159468bfe96fe04": {
      "type": "Ybodychange",
      "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
      "commitDate": "2/10/12, 9:44 AM",
      "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/9/12, 9:58 PM",
      "commitNameOld": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGeneratorType();\n    JavaType type \u003d ctxt.constructType(implClass);\n    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        gen \u003d null;\n        if (true)\n            throw new IllegalStateException(\"Not yet implemented!\");\n    } else {\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), oidInfo);\n    }\n    return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 279,
      "functionName": "constructObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n     if (oidInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n-    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n+    Class\u003c?\u003e implClass \u003d oidInfo.getGeneratorType();\n     JavaType type \u003d ctxt.constructType(implClass);\n     JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n     JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         gen \u003d null;\n         if (true)\n             throw new IllegalStateException(\"Not yet implemented!\");\n     } else {\n-        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n+        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), oidInfo);\n     }\n     return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": {
      "type": "Ybodychange",
      "commitMessage": "Starting work on supporting custom (property-based) object ids.\n",
      "commitDate": "2/9/12, 9:58 PM",
      "commitName": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/8/12, 10:07 PM",
      "commitNameOld": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n    JavaType type \u003d ctxt.constructType(implClass);\n    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        gen \u003d null;\n        if (true)\n            throw new IllegalStateException(\"Not yet implemented!\");\n    } else {\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n    }\n    return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 279,
      "functionName": "constructObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n     if (oidInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n     JavaType type \u003d ctxt.constructType(implClass);\n     JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n     JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         gen \u003d null;\n         if (true)\n             throw new IllegalStateException(\"Not yet implemented!\");\n     } else {\n         gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n     }\n-    return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen, deser);\n+    return ObjectIdReader.construct(idType, oidInfo.getPropertyName(), gen, deser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": {
      "type": "Ybodychange",
      "commitMessage": "Yay! First end-to-end version of Object Id handling...\n",
      "commitDate": "2/8/12, 10:07 PM",
      "commitName": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 9:05 PM",
      "commitNameOld": "d71dffac80c387b8f48090e9c43fd3e5a5207e27",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n    JavaType type \u003d ctxt.constructType(implClass);\n    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        gen \u003d null;\n        if (true)\n            throw new IllegalStateException(\"Not yet implemented!\");\n    } else {\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n    }\n    return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen, deser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 279,
      "functionName": "constructObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,19 @@\n protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n     if (oidInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n     JavaType type \u003d ctxt.constructType(implClass);\n     JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+    JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         gen \u003d null;\n         if (true)\n             throw new IllegalStateException(\"Not yet implemented!\");\n     } else {\n         gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n     }\n-    return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen);\n+    return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen, deser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d71dffac80c387b8f48090e9c43fd3e5a5207e27": {
      "type": "Yintroduced",
      "commitMessage": "Start work on deser side of object id handlign\n",
      "commitDate": "2/7/12, 9:05 PM",
      "commitName": "d71dffac80c387b8f48090e9c43fd3e5a5207e27",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,18 @@\n+protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n+    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n+    if (oidInfo \u003d\u003d null) {\n+        return null;\n+    }\n+    ObjectIdGenerator\u003c?\u003e gen;\n+    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n+    JavaType type \u003d ctxt.constructType(implClass);\n+    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n+        gen \u003d null;\n+        if (true)\n+            throw new IllegalStateException(\"Not yet implemented!\");\n+    } else {\n+        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n+    }\n+    return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected ObjectIdReader constructObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n    JavaType type \u003d ctxt.constructType(implClass);\n    JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        gen \u003d null;\n        if (true)\n            throw new IllegalStateException(\"Not yet implemented!\");\n    } else {\n        gen \u003d ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n    }\n    return ObjectIdReader.construct(idType, oidInfo.getProperty(), gen);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 279,
      "functionName": "constructObjectIdReader",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}