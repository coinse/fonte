{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NumberDeserializers.java",
  "functionName": "find",
  "functionId": "find___rawType-Class__?____clsName-String",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 46,
  "functionEndLine": 112,
  "numCommitsSeen": 23,
  "timeTaken": 1436,
  "changeHistory": [
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
    "e13574dbc83d4638f3061d5e25043aefcfca3eff",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f"
  ],
  "changeHistoryShort": {
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00": "Ymultichange(Yparameterchange,Ybodychange)",
    "e13574dbc83d4638f3061d5e25043aefcfca3eff": "Ybodychange",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "...\n",
      "commitDate": "2/19/13, 8:59 PM",
      "commitName": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "...\n",
          "commitDate": "2/19/13, 8:59 PM",
          "commitName": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/19/13, 8:43 PM",
          "commitNameOld": "e13574dbc83d4638f3061d5e25043aefcfca3eff",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (rawType.isPrimitive()) {\n        if (rawType \u003d\u003d Integer.TYPE) {\n            return IntegerDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Boolean.TYPE) {\n            return BooleanDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Long.TYPE) {\n            return LongDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Double.TYPE) {\n            return DoubleDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Character.TYPE) {\n            return CharacterDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Byte.TYPE) {\n            return ByteDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Short.TYPE) {\n            return ShortDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Float.TYPE) {\n            return FloatDeserializer.primitiveInstance;\n        }\n    } else if (_classNames.contains(clsName)) {\n        if (rawType \u003d\u003d Integer.class) {\n            return IntegerDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Boolean.class) {\n            return BooleanDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Long.class) {\n            return LongDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Double.class) {\n            return DoubleDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Character.class) {\n            return CharacterDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Byte.class) {\n            return ByteDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Short.class) {\n            return ShortDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Float.class) {\n            return FloatDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Number.class) {\n            return NumberDeserializer.instance;\n        }\n        if (rawType \u003d\u003d BigDecimal.class) {\n            return BigDecimalDeserializer.instance;\n        }\n        if (rawType \u003d\u003d BigInteger.class) {\n            return BigIntegerDeserializer.instance;\n        }\n    } else {\n        return null;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
          "functionStartLine": 83,
          "functionName": "find",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,65 +1,65 @@\n-public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n+public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n     if (rawType.isPrimitive()) {\n         if (rawType \u003d\u003d Integer.TYPE) {\n             return IntegerDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Boolean.TYPE) {\n             return BooleanDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Long.TYPE) {\n             return LongDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Double.TYPE) {\n             return DoubleDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Character.TYPE) {\n             return CharacterDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Byte.TYPE) {\n             return ByteDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Short.TYPE) {\n             return ShortDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Float.TYPE) {\n             return FloatDeserializer.primitiveInstance;\n         }\n-    } else if (_classNames.contains(rawType.getName())) {\n+    } else if (_classNames.contains(clsName)) {\n         if (rawType \u003d\u003d Integer.class) {\n             return IntegerDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Boolean.class) {\n             return BooleanDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Long.class) {\n             return LongDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Double.class) {\n             return DoubleDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Character.class) {\n             return CharacterDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Byte.class) {\n             return ByteDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Short.class) {\n             return ShortDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Float.class) {\n             return FloatDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Number.class) {\n             return NumberDeserializer.instance;\n         }\n         if (rawType \u003d\u003d BigDecimal.class) {\n             return BigDecimalDeserializer.instance;\n         }\n         if (rawType \u003d\u003d BigInteger.class) {\n             return BigIntegerDeserializer.instance;\n         }\n     } else {\n         return null;\n     }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[rawType-Class\u003c?\u003e]",
            "newValue": "[rawType-Class\u003c?\u003e, clsName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "...\n",
          "commitDate": "2/19/13, 8:59 PM",
          "commitName": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/19/13, 8:43 PM",
          "commitNameOld": "e13574dbc83d4638f3061d5e25043aefcfca3eff",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (rawType.isPrimitive()) {\n        if (rawType \u003d\u003d Integer.TYPE) {\n            return IntegerDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Boolean.TYPE) {\n            return BooleanDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Long.TYPE) {\n            return LongDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Double.TYPE) {\n            return DoubleDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Character.TYPE) {\n            return CharacterDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Byte.TYPE) {\n            return ByteDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Short.TYPE) {\n            return ShortDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Float.TYPE) {\n            return FloatDeserializer.primitiveInstance;\n        }\n    } else if (_classNames.contains(clsName)) {\n        if (rawType \u003d\u003d Integer.class) {\n            return IntegerDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Boolean.class) {\n            return BooleanDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Long.class) {\n            return LongDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Double.class) {\n            return DoubleDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Character.class) {\n            return CharacterDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Byte.class) {\n            return ByteDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Short.class) {\n            return ShortDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Float.class) {\n            return FloatDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Number.class) {\n            return NumberDeserializer.instance;\n        }\n        if (rawType \u003d\u003d BigDecimal.class) {\n            return BigDecimalDeserializer.instance;\n        }\n        if (rawType \u003d\u003d BigInteger.class) {\n            return BigIntegerDeserializer.instance;\n        }\n    } else {\n        return null;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
          "functionStartLine": 83,
          "functionName": "find",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,65 +1,65 @@\n-public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n+public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n     if (rawType.isPrimitive()) {\n         if (rawType \u003d\u003d Integer.TYPE) {\n             return IntegerDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Boolean.TYPE) {\n             return BooleanDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Long.TYPE) {\n             return LongDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Double.TYPE) {\n             return DoubleDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Character.TYPE) {\n             return CharacterDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Byte.TYPE) {\n             return ByteDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Short.TYPE) {\n             return ShortDeserializer.primitiveInstance;\n         }\n         if (rawType \u003d\u003d Float.TYPE) {\n             return FloatDeserializer.primitiveInstance;\n         }\n-    } else if (_classNames.contains(rawType.getName())) {\n+    } else if (_classNames.contains(clsName)) {\n         if (rawType \u003d\u003d Integer.class) {\n             return IntegerDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Boolean.class) {\n             return BooleanDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Long.class) {\n             return LongDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Double.class) {\n             return DoubleDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Character.class) {\n             return CharacterDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Byte.class) {\n             return ByteDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Short.class) {\n             return ShortDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Float.class) {\n             return FloatDeserializer.wrapperInstance;\n         }\n         if (rawType \u003d\u003d Number.class) {\n             return NumberDeserializer.instance;\n         }\n         if (rawType \u003d\u003d BigDecimal.class) {\n             return BigDecimalDeserializer.instance;\n         }\n         if (rawType \u003d\u003d BigInteger.class) {\n             return BigIntegerDeserializer.instance;\n         }\n     } else {\n         return null;\n     }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e13574dbc83d4638f3061d5e25043aefcfca3eff": {
      "type": "Ybodychange",
      "commitMessage": "more cleanup, wrt deserializer registration\n",
      "commitDate": "2/19/13, 8:43 PM",
      "commitName": "e13574dbc83d4638f3061d5e25043aefcfca3eff",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/13, 8:22 PM",
      "commitNameOld": "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n    if (rawType.isPrimitive()) {\n        if (rawType \u003d\u003d Integer.TYPE) {\n            return IntegerDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Boolean.TYPE) {\n            return BooleanDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Long.TYPE) {\n            return LongDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Double.TYPE) {\n            return DoubleDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Character.TYPE) {\n            return CharacterDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Byte.TYPE) {\n            return ByteDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Short.TYPE) {\n            return ShortDeserializer.primitiveInstance;\n        }\n        if (rawType \u003d\u003d Float.TYPE) {\n            return FloatDeserializer.primitiveInstance;\n        }\n    } else if (_classNames.contains(rawType.getName())) {\n        if (rawType \u003d\u003d Integer.class) {\n            return IntegerDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Boolean.class) {\n            return BooleanDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Long.class) {\n            return LongDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Double.class) {\n            return DoubleDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Character.class) {\n            return CharacterDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Byte.class) {\n            return ByteDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Short.class) {\n            return ShortDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Float.class) {\n            return FloatDeserializer.wrapperInstance;\n        }\n        if (rawType \u003d\u003d Number.class) {\n            return NumberDeserializer.instance;\n        }\n        if (rawType \u003d\u003d BigDecimal.class) {\n            return BigDecimalDeserializer.instance;\n        }\n        if (rawType \u003d\u003d BigInteger.class) {\n            return BigIntegerDeserializer.instance;\n        }\n    } else {\n        return null;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
      "functionStartLine": 83,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,63 +1,65 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n-    if (!_classNames.contains(rawType.getName())) {\n+    if (rawType.isPrimitive()) {\n+        if (rawType \u003d\u003d Integer.TYPE) {\n+            return IntegerDeserializer.primitiveInstance;\n+        }\n+        if (rawType \u003d\u003d Boolean.TYPE) {\n+            return BooleanDeserializer.primitiveInstance;\n+        }\n+        if (rawType \u003d\u003d Long.TYPE) {\n+            return LongDeserializer.primitiveInstance;\n+        }\n+        if (rawType \u003d\u003d Double.TYPE) {\n+            return DoubleDeserializer.primitiveInstance;\n+        }\n+        if (rawType \u003d\u003d Character.TYPE) {\n+            return CharacterDeserializer.primitiveInstance;\n+        }\n+        if (rawType \u003d\u003d Byte.TYPE) {\n+            return ByteDeserializer.primitiveInstance;\n+        }\n+        if (rawType \u003d\u003d Short.TYPE) {\n+            return ShortDeserializer.primitiveInstance;\n+        }\n+        if (rawType \u003d\u003d Float.TYPE) {\n+            return FloatDeserializer.primitiveInstance;\n+        }\n+    } else if (_classNames.contains(rawType.getName())) {\n+        if (rawType \u003d\u003d Integer.class) {\n+            return IntegerDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Boolean.class) {\n+            return BooleanDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Long.class) {\n+            return LongDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Double.class) {\n+            return DoubleDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Character.class) {\n+            return CharacterDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Byte.class) {\n+            return ByteDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Short.class) {\n+            return ShortDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Float.class) {\n+            return FloatDeserializer.wrapperInstance;\n+        }\n+        if (rawType \u003d\u003d Number.class) {\n+            return NumberDeserializer.instance;\n+        }\n+        if (rawType \u003d\u003d BigDecimal.class) {\n+            return BigDecimalDeserializer.instance;\n+        }\n+        if (rawType \u003d\u003d BigInteger.class) {\n+            return BigIntegerDeserializer.instance;\n+        }\n+    } else {\n         return null;\n     }\n-    if (rawType \u003d\u003d Integer.TYPE) {\n-        return IntegerDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Integer.class) {\n-        return IntegerDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Boolean.TYPE) {\n-        return BooleanDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Boolean.class) {\n-        return BooleanDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Long.TYPE) {\n-        return LongDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Long.class) {\n-        return LongDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Double.TYPE) {\n-        return DoubleDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Double.class) {\n-        return DoubleDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Character.TYPE) {\n-        return CharacterDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Character.class) {\n-        return CharacterDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Byte.TYPE) {\n-        return ByteDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Byte.class) {\n-        return ByteDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Short.TYPE) {\n-        return ShortDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Short.class) {\n-        return ShortDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Float.TYPE) {\n-        return FloatDeserializer.primitiveInstance;\n-    }\n-    if (rawType \u003d\u003d Float.class) {\n-        return FloatDeserializer.wrapperInstance;\n-    }\n-    if (rawType \u003d\u003d Number.class) {\n-        return NumberDeserializer.instance;\n-    }\n-    if (rawType \u003d\u003d BigDecimal.class) {\n-        return BigDecimalDeserializer.instance;\n-    }\n-    if (rawType \u003d\u003d BigInteger.class) {\n-        return BigIntegerDeserializer.instance;\n-    }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring to try to reduce amount of mandatory initializations\n",
      "commitDate": "2/19/13, 8:22 PM",
      "commitName": "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,63 @@\n+public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n+    if (!_classNames.contains(rawType.getName())) {\n+        return null;\n+    }\n+    if (rawType \u003d\u003d Integer.TYPE) {\n+        return IntegerDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Integer.class) {\n+        return IntegerDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Boolean.TYPE) {\n+        return BooleanDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Boolean.class) {\n+        return BooleanDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Long.TYPE) {\n+        return LongDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Long.class) {\n+        return LongDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Double.TYPE) {\n+        return DoubleDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Double.class) {\n+        return DoubleDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Character.TYPE) {\n+        return CharacterDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Character.class) {\n+        return CharacterDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Byte.TYPE) {\n+        return ByteDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Byte.class) {\n+        return ByteDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Short.TYPE) {\n+        return ShortDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Short.class) {\n+        return ShortDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Float.TYPE) {\n+        return FloatDeserializer.primitiveInstance;\n+    }\n+    if (rawType \u003d\u003d Float.class) {\n+        return FloatDeserializer.wrapperInstance;\n+    }\n+    if (rawType \u003d\u003d Number.class) {\n+        return NumberDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d BigDecimal.class) {\n+        return BigDecimalDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d BigInteger.class) {\n+        return BigIntegerDeserializer.instance;\n+    }\n+    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n    if (!_classNames.contains(rawType.getName())) {\n        return null;\n    }\n    if (rawType \u003d\u003d Integer.TYPE) {\n        return IntegerDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Integer.class) {\n        return IntegerDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Boolean.TYPE) {\n        return BooleanDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Boolean.class) {\n        return BooleanDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Long.TYPE) {\n        return LongDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Long.class) {\n        return LongDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Double.TYPE) {\n        return DoubleDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Double.class) {\n        return DoubleDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Character.TYPE) {\n        return CharacterDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Character.class) {\n        return CharacterDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Byte.TYPE) {\n        return ByteDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Byte.class) {\n        return ByteDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Short.TYPE) {\n        return ShortDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Short.class) {\n        return ShortDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Float.TYPE) {\n        return FloatDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Float.class) {\n        return FloatDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Number.class) {\n        return NumberDeserializer.instance;\n    }\n    if (rawType \u003d\u003d BigDecimal.class) {\n        return BigDecimalDeserializer.instance;\n    }\n    if (rawType \u003d\u003d BigInteger.class) {\n        return BigIntegerDeserializer.instance;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
      "functionStartLine": 82,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}