{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerBase.java",
  "functionName": "_resolveInnerClassValuedProperty",
  "functionId": "_resolveInnerClassValuedProperty___ctxt-DeserializationContext__prop-SettableBeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n",
  "functionStartLine": 718,
  "functionEndLine": 747,
  "numCommitsSeen": 123,
  "timeTaken": 7980,
  "changeHistory": [
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b",
    "53fb8522b402a409139175cbf867afa924e549f5",
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ymultichange(Ymovefromfile,Ybodychange)",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": "Ybodychange",
    "53fb8522b402a409139175cbf867afa924e549f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3": "Ydocchange",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/11/12, 2:34 PM",
          "commitNameOld": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 6.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializerBase) {\n        BeanDeserializerBase bd \u003d (BeanDeserializerBase) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 662,
          "functionName": "_resolveInnerClassValuedProperty",
          "functionAnnotation": "",
          "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n",
          "diff": "@@ -1,23 +1,23 @@\n protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n-    if (deser instanceof BeanDeserializer) {\n-        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n+    if (deser instanceof BeanDeserializerBase) {\n+        BeanDeserializerBase bd \u003d (BeanDeserializerBase) deser;\n         ValueInstantiator vi \u003d bd.getValueInstantiator();\n         if (!vi.canCreateUsingDefault()) {\n             Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n             Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n             if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                 for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                     Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                     if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                         if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                             ClassUtil.checkAndFixAccess(ctor);\n                         }\n                         return new InnerClassProperty(prop, ctor);\n                     }\n                 }\n             }\n         }\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
            "oldMethodName": "_resolveInnerClassValuedProperty",
            "newMethodName": "_resolveInnerClassValuedProperty"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/11/12, 2:34 PM",
          "commitNameOld": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 6.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializerBase) {\n        BeanDeserializerBase bd \u003d (BeanDeserializerBase) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 662,
          "functionName": "_resolveInnerClassValuedProperty",
          "functionAnnotation": "",
          "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n",
          "diff": "@@ -1,23 +1,23 @@\n protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n-    if (deser instanceof BeanDeserializer) {\n-        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n+    if (deser instanceof BeanDeserializerBase) {\n+        BeanDeserializerBase bd \u003d (BeanDeserializerBase) deser;\n         ValueInstantiator vi \u003d bd.getValueInstantiator();\n         if (!vi.canCreateUsingDefault()) {\n             Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n             Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n             if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                 for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                     Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                     if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                         if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                             ClassUtil.checkAndFixAccess(ctor);\n                         }\n                         return new InnerClassProperty(prop, ctor);\n                     }\n                 }\n             }\n         }\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": {
      "type": "Ybodychange",
      "commitMessage": "Yay! First end-to-end version of Object Id handling...\n",
      "commitDate": "2/8/12, 10:07 PM",
      "commitName": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 9:04 PM",
      "commitNameOld": "df060b78cc608db646c3c9a7f1d14dbf148618b9",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializer) {\n        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 671,
      "functionName": "_resolveInnerClassValuedProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n",
      "diff": "@@ -1,23 +1,23 @@\n protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n     if (deser instanceof BeanDeserializer) {\n         BeanDeserializer bd \u003d (BeanDeserializer) deser;\n         ValueInstantiator vi \u003d bd.getValueInstantiator();\n         if (!vi.canCreateUsingDefault()) {\n             Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n             Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n             if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                 for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                     Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                     if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                         if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                             ClassUtil.checkAndFixAccess(ctor);\n                         }\n-                        return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n+                        return new InnerClassProperty(prop, ctor);\n                     }\n                 }\n             }\n         }\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53fb8522b402a409139175cbf867afa924e549f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
      "commitDate": "1/24/12, 1:02 PM",
      "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializer) {\n        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 517,
          "functionName": "_resolveInnerClassValuedProperty",
          "functionAnnotation": "",
          "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n",
          "diff": "@@ -1,23 +1,23 @@\n-protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config, SettableBeanProperty prop) {\n+protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n     if (deser instanceof BeanDeserializer) {\n         BeanDeserializer bd \u003d (BeanDeserializer) deser;\n         ValueInstantiator vi \u003d bd.getValueInstantiator();\n         if (!vi.canCreateUsingDefault()) {\n             Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n             Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n             if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                 for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                     Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                     if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n-                        if (config.canOverrideAccessModifiers()) {\n+                        if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                             ClassUtil.checkAndFixAccess(ctor);\n                         }\n                         return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                     }\n                 }\n             }\n         }\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, prop-SettableBeanProperty]",
            "newValue": "[ctxt-DeserializationContext, prop-SettableBeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializer) {\n        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 517,
          "functionName": "_resolveInnerClassValuedProperty",
          "functionAnnotation": "",
          "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n",
          "diff": "@@ -1,23 +1,23 @@\n-protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config, SettableBeanProperty prop) {\n+protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) {\n     JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n     if (deser instanceof BeanDeserializer) {\n         BeanDeserializer bd \u003d (BeanDeserializer) deser;\n         ValueInstantiator vi \u003d bd.getValueInstantiator();\n         if (!vi.canCreateUsingDefault()) {\n             Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n             Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n             if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                 for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                     Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                     if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n-                        if (config.canOverrideAccessModifiers()) {\n+                        if (ctxt.getConfig().canOverrideAccessModifiers()) {\n                             ClassUtil.checkAndFixAccess(ctor);\n                         }\n                         return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                     }\n                 }\n             }\n         }\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3": {
      "type": "Ydocchange",
      "commitMessage": "First working version of prefix-for-unwrapped; may want to generalize to allow other kinds of name mangling strategies\n",
      "commitDate": "1/13/12, 9:49 PM",
      "commitName": "0a0ce59a9800a6532048eaf52a2d2c6a276116e3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/11/12, 10:14 PM",
      "commitNameOld": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializer) {\n        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (config.canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 507,
      "functionName": "_resolveInnerClassValuedProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n\n@since 1.9\n",
        "newValue": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n"
      }
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/28/11, 10:35 AM",
      "commitNameOld": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 14.49,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializer) {\n        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (config.canOverrideAccessModifiers()) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 486,
      "functionName": "_resolveInnerClassValuedProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n\n@since 1.9\n",
      "diff": "@@ -1,23 +1,23 @@\n protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config, SettableBeanProperty prop) {\n     JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n     if (deser instanceof BeanDeserializer) {\n         BeanDeserializer bd \u003d (BeanDeserializer) deser;\n         ValueInstantiator vi \u003d bd.getValueInstantiator();\n         if (!vi.canCreateUsingDefault()) {\n             Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n             Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n             if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                 for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                     Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                     if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n-                        if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+                        if (config.canOverrideAccessModifiers()) {\n                             ClassUtil.checkAndFixAccess(ctor);\n                         }\n                         return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                     }\n                 }\n             }\n         }\n     }\n     return prop;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,23 @@\n+protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config, SettableBeanProperty prop) {\n+    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n+    if (deser instanceof BeanDeserializer) {\n+        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n+        ValueInstantiator vi \u003d bd.getValueInstantiator();\n+        if (!vi.canCreateUsingDefault()) {\n+            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n+            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n+            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n+                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n+                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n+                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n+                        if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+                            ClassUtil.checkAndFixAccess(ctor);\n+                        }\n+                        return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return prop;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationConfig config, SettableBeanProperty prop) {\n    JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n    if (deser instanceof BeanDeserializer) {\n        BeanDeserializer bd \u003d (BeanDeserializer) deser;\n        ValueInstantiator vi \u003d bd.getValueInstantiator();\n        if (!vi.canCreateUsingDefault()) {\n            Class\u003c?\u003e valueClass \u003d prop.getType().getRawClass();\n            Class\u003c?\u003e enclosing \u003d ClassUtil.getOuterClass(valueClass);\n            if (enclosing !\u003d null \u0026\u0026 enclosing \u003d\u003d _beanType.getRawClass()) {\n                for (Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n                    Class\u003c?\u003e[] paramTypes \u003d ctor.getParameterTypes();\n                    if (paramTypes.length \u003d\u003d 1 \u0026\u0026 paramTypes[0] \u003d\u003d enclosing) {\n                        if (config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n                            ClassUtil.checkAndFixAccess(ctor);\n                        }\n                        return new SettableBeanProperty.InnerClassProperty(prop, ctor);\n                    }\n                }\n            }\n        }\n    }\n    return prop;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 533,
      "functionName": "_resolveInnerClassValuedProperty",
      "functionAnnotation": "",
      "functionDoc": "Helper method that will handle gruesome details of dealing with properties\nthat have non-static inner class as value...\n\n@since 1.9\n"
    }
  }
}