{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "findDefaultDeserializer",
  "functionId": "findDefaultDeserializer___ctxt-DeserializationContext__type-JavaType__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
  "functionStartLine": 1433,
  "functionEndLine": 1508,
  "numCommitsSeen": 169,
  "timeTaken": 4895,
  "changeHistory": [
    "10f44221fa0e8ffbfbc39384581b190f5f0cc106",
    "cb65c7691fc5dc710f9b482cb6de63d0bf2a5d0b",
    "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e",
    "83341f7530d341139e5613455dd7a8893d4f0d68",
    "767ecb29a5a79f799113d13eb137389ff5a4c2c5",
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f"
  ],
  "changeHistoryShort": {
    "10f44221fa0e8ffbfbc39384581b190f5f0cc106": "Ybodychange",
    "cb65c7691fc5dc710f9b482cb6de63d0bf2a5d0b": "Ybodychange",
    "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e": "Ybodychange",
    "83341f7530d341139e5613455dd7a8893d4f0d68": "Ybodychange",
    "767ecb29a5a79f799113d13eb137389ff5a4c2c5": "Ybodychange",
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange)",
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00": "Ybodychange",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10f44221fa0e8ffbfbc39384581b190f5f0cc106": {
      "type": "Ybodychange",
      "commitMessage": "Fix #565: add support for `Map.Entry`\n",
      "commitDate": "9/29/14, 6:20 PM",
      "commitName": "10f44221fa0e8ffbfbc39384581b190f5f0cc106",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "9/25/14, 4:52 PM",
      "commitNameOld": "c717c2ff7ef92ef1c5a4e6970408efec1074b546",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 4.06,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    if (rawType \u003d\u003d CLASS_OBJECT) {\n        return new UntypedObjectDeserializer();\n    }\n    if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n        return StringDeserializer.instance;\n    }\n    if (rawType \u003d\u003d CLASS_ITERABLE) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] tps \u003d tf.findTypeParameters(type, CLASS_ITERABLE);\n        JavaType elemType \u003d (tps \u003d\u003d null || tps.length !\u003d 1) ? TypeFactory.unknownType() : tps[0];\n        CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n        return createCollectionDeserializer(ctxt, ct, beanDesc);\n    }\n    if (rawType \u003d\u003d CLASS_MAP_ENTRY) {\n        final DeserializationConfig config \u003d ctxt.getConfig();\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] tps \u003d tf.findTypeParameters(type, CLASS_MAP_ENTRY);\n        JavaType kt, vt;\n        if (tps \u003d\u003d null || tps.length !\u003d 2) {\n            kt \u003d vt \u003d TypeFactory.unknownType();\n        } else {\n            kt \u003d tps[0];\n            vt \u003d tps[1];\n        }\n        TypeDeserializer vts \u003d (TypeDeserializer) vt.getTypeHandler();\n        if (vts \u003d\u003d null) {\n            vts \u003d findTypeDeserializer(config, vt);\n        }\n        JsonDeserializer\u003cObject\u003e valueDeser \u003d vt.getValueHandler();\n        KeyDeserializer keyDes \u003d (KeyDeserializer) kt.getValueHandler();\n        return new MapEntryDeserializer(type, keyDes, valueDeser, vts);\n    }\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n        }\n        if (deser !\u003d null) {\n            return deser;\n        }\n    }\n    if (rawType \u003d\u003d TokenBuffer.class) {\n        return new TokenBufferDeserializer();\n    }\n    if (AtomicReference.class.isAssignableFrom(rawType)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        TypeDeserializer vts \u003d findTypeDeserializer(ctxt.getConfig(), referencedType);\n        BeanDescription refdDesc \u003d ctxt.getConfig().introspectClassAnnotations(referencedType);\n        JsonDeserializer\u003c?\u003e deser \u003d findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo());\n        return new AtomicReferenceDeserializer(referencedType, vts, deser);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d findOptionalStdDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    return JdkDeserializers.find(rawType, clsName);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1399,
      "functionName": "findDefaultDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
      "diff": "@@ -1,29 +1,67 @@\n public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     if (rawType \u003d\u003d CLASS_OBJECT) {\n         return new UntypedObjectDeserializer();\n     }\n     if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n         return StringDeserializer.instance;\n     }\n     if (rawType \u003d\u003d CLASS_ITERABLE) {\n         TypeFactory tf \u003d ctxt.getTypeFactory();\n-        JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n+        JavaType[] tps \u003d tf.findTypeParameters(type, CLASS_ITERABLE);\n+        JavaType elemType \u003d (tps \u003d\u003d null || tps.length !\u003d 1) ? TypeFactory.unknownType() : tps[0];\n         CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n         return createCollectionDeserializer(ctxt, ct, beanDesc);\n     }\n+    if (rawType \u003d\u003d CLASS_MAP_ENTRY) {\n+        final DeserializationConfig config \u003d ctxt.getConfig();\n+        TypeFactory tf \u003d ctxt.getTypeFactory();\n+        JavaType[] tps \u003d tf.findTypeParameters(type, CLASS_MAP_ENTRY);\n+        JavaType kt, vt;\n+        if (tps \u003d\u003d null || tps.length !\u003d 2) {\n+            kt \u003d vt \u003d TypeFactory.unknownType();\n+        } else {\n+            kt \u003d tps[0];\n+            vt \u003d tps[1];\n+        }\n+        TypeDeserializer vts \u003d (TypeDeserializer) vt.getTypeHandler();\n+        if (vts \u003d\u003d null) {\n+            vts \u003d findTypeDeserializer(config, vt);\n+        }\n+        JsonDeserializer\u003cObject\u003e valueDeser \u003d vt.getValueHandler();\n+        KeyDeserializer keyDes \u003d (KeyDeserializer) kt.getValueHandler();\n+        return new MapEntryDeserializer(type, keyDes, valueDeser, vts);\n+    }\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n         }\n         if (deser !\u003d null) {\n             return deser;\n         }\n     }\n     if (rawType \u003d\u003d TokenBuffer.class) {\n         return new TokenBufferDeserializer();\n     }\n+    if (AtomicReference.class.isAssignableFrom(rawType)) {\n+        TypeFactory tf \u003d ctxt.getTypeFactory();\n+        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n+        JavaType referencedType;\n+        if (params \u003d\u003d null || params.length \u003c 1) {\n+            referencedType \u003d TypeFactory.unknownType();\n+        } else {\n+            referencedType \u003d params[0];\n+        }\n+        TypeDeserializer vts \u003d findTypeDeserializer(ctxt.getConfig(), referencedType);\n+        BeanDescription refdDesc \u003d ctxt.getConfig().introspectClassAnnotations(referencedType);\n+        JsonDeserializer\u003c?\u003e deser \u003d findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo());\n+        return new AtomicReferenceDeserializer(referencedType, vts, deser);\n+    }\n+    JsonDeserializer\u003c?\u003e deser \u003d findOptionalStdDeserializer(ctxt, type, beanDesc);\n+    if (deser !\u003d null) {\n+        return deser;\n+    }\n     return JdkDeserializers.find(rawType, clsName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cb65c7691fc5dc710f9b482cb6de63d0bf2a5d0b": {
      "type": "Ybodychange",
      "commitMessage": "Assimilate JavaType deserializer as well\n",
      "commitDate": "1/1/14, 1:25 PM",
      "commitName": "cb65c7691fc5dc710f9b482cb6de63d0bf2a5d0b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/31/13, 10:10 PM",
      "commitNameOld": "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.64,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    if (rawType \u003d\u003d CLASS_OBJECT) {\n        return new UntypedObjectDeserializer();\n    }\n    if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n        return StringDeserializer.instance;\n    }\n    if (rawType \u003d\u003d CLASS_ITERABLE) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n        CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n        return createCollectionDeserializer(ctxt, ct, beanDesc);\n    }\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n        }\n        if (deser !\u003d null) {\n            return deser;\n        }\n    }\n    if (rawType \u003d\u003d TokenBuffer.class) {\n        return new TokenBufferDeserializer();\n    }\n    return JdkDeserializers.find(rawType, clsName);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1372,
      "functionName": "findDefaultDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
      "diff": "@@ -1,35 +1,29 @@\n public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n+    if (rawType \u003d\u003d CLASS_OBJECT) {\n+        return new UntypedObjectDeserializer();\n+    }\n+    if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n+        return StringDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d CLASS_ITERABLE) {\n+        TypeFactory tf \u003d ctxt.getTypeFactory();\n+        JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n+        CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n+        return createCollectionDeserializer(ctxt, ct, beanDesc);\n+    }\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n-        if (rawType \u003d\u003d CLASS_OBJECT) {\n-            return new UntypedObjectDeserializer();\n-        }\n-        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n-            return StringDeserializer.instance;\n-        }\n-        if (rawType \u003d\u003d CLASS_ITERABLE) {\n-            TypeFactory tf \u003d ctxt.getTypeFactory();\n-            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n-            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n-            return createCollectionDeserializer(ctxt, ct, beanDesc);\n-        }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n-            if (deser \u003d\u003d null) {\n-                deser \u003d JdkDeserializers.find(rawType, clsName);\n-            }\n         }\n-        return deser;\n-    }\n-    if (clsName.startsWith(\"com.fasterxml.\")) {\n-        if (rawType \u003d\u003d TokenBuffer.class) {\n-            return new TokenBufferDeserializer();\n-        }\n-        if (JavaType.class.isAssignableFrom(rawType)) {\n-            return new JavaTypeDeserializer();\n+        if (deser !\u003d null) {\n+            return deser;\n         }\n     }\n-    return null;\n+    if (rawType \u003d\u003d TokenBuffer.class) {\n+        return new TokenBufferDeserializer();\n+    }\n+    return JdkDeserializers.find(rawType, clsName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e": {
      "type": "Ybodychange",
      "commitMessage": "cleanup, removing unnecessary \u0027instance\u0027 members\n",
      "commitDate": "12/31/13, 10:10 PM",
      "commitName": "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/21/13, 8:37 PM",
      "commitNameOld": "ddb9e39a4924c40d919a6fd04ada1d6f7e11dd4a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 71.11,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return new UntypedObjectDeserializer();\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        if (rawType \u003d\u003d TokenBuffer.class) {\n            return new TokenBufferDeserializer();\n        }\n        if (JavaType.class.isAssignableFrom(rawType)) {\n            return new JavaTypeDeserializer();\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1372,
      "functionName": "findDefaultDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
      "diff": "@@ -1,35 +1,35 @@\n public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n             return new UntypedObjectDeserializer();\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_ITERABLE) {\n             TypeFactory tf \u003d ctxt.getTypeFactory();\n             JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n             CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n             return createCollectionDeserializer(ctxt, ct, beanDesc);\n         }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n                 deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n         if (rawType \u003d\u003d TokenBuffer.class) {\n-            return TokenBufferDeserializer.instance;\n+            return new TokenBufferDeserializer();\n         }\n         if (JavaType.class.isAssignableFrom(rawType)) {\n-            return JavaTypeDeserializer.instance;\n+            return new JavaTypeDeserializer();\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83341f7530d341139e5613455dd7a8893d4f0d68": {
      "type": "Ybodychange",
      "commitMessage": "Starting to add configurability for \"untyped\" deserializer\n",
      "commitDate": "9/20/13, 5:33 PM",
      "commitName": "83341f7530d341139e5613455dd7a8893d4f0d68",
      "commitAuthor": "Tatu",
      "commitDateOld": "8/26/13, 5:46 PM",
      "commitNameOld": "a3a8d3c03fa93976ebee094795bb50547cb10663",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 24.99,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return new UntypedObjectDeserializer();\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        if (rawType \u003d\u003d TokenBuffer.class) {\n            return TokenBufferDeserializer.instance;\n        }\n        if (JavaType.class.isAssignableFrom(rawType)) {\n            return JavaTypeDeserializer.instance;\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1376,
      "functionName": "findDefaultDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
      "diff": "@@ -1,35 +1,35 @@\n public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n-            return UntypedObjectDeserializer.instance;\n+            return new UntypedObjectDeserializer();\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_ITERABLE) {\n             TypeFactory tf \u003d ctxt.getTypeFactory();\n             JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n             CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n             return createCollectionDeserializer(ctxt, ct, beanDesc);\n         }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n                 deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n         if (rawType \u003d\u003d TokenBuffer.class) {\n             return TokenBufferDeserializer.instance;\n         }\n         if (JavaType.class.isAssignableFrom(rawType)) {\n             return JavaTypeDeserializer.instance;\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "767ecb29a5a79f799113d13eb137389ff5a4c2c5": {
      "type": "Ybodychange",
      "commitMessage": "Try to add support for retaining type ids via TokenBuffer\n",
      "commitDate": "8/4/13, 5:17 PM",
      "commitName": "767ecb29a5a79f799113d13eb137389ff5a4c2c5",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/26/13, 4:18 PM",
      "commitNameOld": "8bdd49b36c8c05483669f6bd50b3839016f78983",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 9.04,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return UntypedObjectDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        if (rawType \u003d\u003d TokenBuffer.class) {\n            return TokenBufferDeserializer.instance;\n        }\n        if (JavaType.class.isAssignableFrom(rawType)) {\n            return JavaTypeDeserializer.instance;\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1362,
      "functionName": "findDefaultDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
      "diff": "@@ -1,30 +1,35 @@\n public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n             return UntypedObjectDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_ITERABLE) {\n             TypeFactory tf \u003d ctxt.getTypeFactory();\n             JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n             CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n             return createCollectionDeserializer(ctxt, ct, beanDesc);\n         }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n                 deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n-        return JacksonDeserializers.find(rawType);\n+        if (rawType \u003d\u003d TokenBuffer.class) {\n+            return TokenBufferDeserializer.instance;\n+        }\n+        if (JavaType.class.isAssignableFrom(rawType)) {\n+            return JavaTypeDeserializer.instance;\n+        }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Implement #199, support for deserializing Iterable\n",
      "commitDate": "4/7/13, 4:11 PM",
      "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Implement #199, support for deserializing Iterable\n",
          "commitDate": "4/7/13, 4:11 PM",
          "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/17/13, 11:18 PM",
          "commitNameOld": "970b895f59d5934258b2bac34477a9679477209b",
          "commitAuthorOld": "Christopher Currie",
          "daysBetweenCommits": 20.7,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return UntypedObjectDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        return JacksonDeserializers.find(rawType);\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1355,
          "functionName": "findDefaultDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
          "diff": "@@ -1,23 +1,30 @@\n-public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n+public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+    Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n             return UntypedObjectDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n+        if (rawType \u003d\u003d CLASS_ITERABLE) {\n+            TypeFactory tf \u003d ctxt.getTypeFactory();\n+            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n+            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n+            return createCollectionDeserializer(ctxt, ct, beanDesc);\n+        }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n                 deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n         return JacksonDeserializers.find(rawType);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "findDefaultSerializer",
            "newValue": "findDefaultDeserializer"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Implement #199, support for deserializing Iterable\n",
          "commitDate": "4/7/13, 4:11 PM",
          "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/17/13, 11:18 PM",
          "commitNameOld": "970b895f59d5934258b2bac34477a9679477209b",
          "commitAuthorOld": "Christopher Currie",
          "daysBetweenCommits": 20.7,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return UntypedObjectDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        return JacksonDeserializers.find(rawType);\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1355,
          "functionName": "findDefaultDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
          "diff": "@@ -1,23 +1,30 @@\n-public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n+public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+    Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n             return UntypedObjectDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n+        if (rawType \u003d\u003d CLASS_ITERABLE) {\n+            TypeFactory tf \u003d ctxt.getTypeFactory();\n+            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n+            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n+            return createCollectionDeserializer(ctxt, ct, beanDesc);\n+        }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n                 deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n         return JacksonDeserializers.find(rawType);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[rawType-Class\u003c?\u003e]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Implement #199, support for deserializing Iterable\n",
          "commitDate": "4/7/13, 4:11 PM",
          "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/17/13, 11:18 PM",
          "commitNameOld": "970b895f59d5934258b2bac34477a9679477209b",
          "commitAuthorOld": "Christopher Currie",
          "daysBetweenCommits": 20.7,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return UntypedObjectDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        return JacksonDeserializers.find(rawType);\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1355,
          "functionName": "findDefaultDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
          "diff": "@@ -1,23 +1,30 @@\n-public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n+public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+    Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n             return UntypedObjectDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n+        if (rawType \u003d\u003d CLASS_ITERABLE) {\n+            TypeFactory tf \u003d ctxt.getTypeFactory();\n+            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n+            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n+            return createCollectionDeserializer(ctxt, ct, beanDesc);\n+        }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n                 deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n         return JacksonDeserializers.find(rawType);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[JsonMappingException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement #199, support for deserializing Iterable\n",
          "commitDate": "4/7/13, 4:11 PM",
          "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/17/13, 11:18 PM",
          "commitNameOld": "970b895f59d5934258b2bac34477a9679477209b",
          "commitAuthorOld": "Christopher Currie",
          "daysBetweenCommits": 20.7,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return UntypedObjectDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_ITERABLE) {\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n            return createCollectionDeserializer(ctxt, ct, beanDesc);\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        return JacksonDeserializers.find(rawType);\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1355,
          "functionName": "findDefaultDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
          "diff": "@@ -1,23 +1,30 @@\n-public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n+public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+    Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n             return UntypedObjectDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n+        if (rawType \u003d\u003d CLASS_ITERABLE) {\n+            TypeFactory tf \u003d ctxt.getTypeFactory();\n+            JavaType elemType \u003d (type.containedTypeCount() \u003e 0) ? type.containedType(0) : TypeFactory.unknownType();\n+            CollectionType ct \u003d tf.constructCollectionType(Collection.class, elemType);\n+            return createCollectionDeserializer(ctxt, ct, beanDesc);\n+        }\n         JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n             deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n                 deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n         return JacksonDeserializers.find(rawType);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "2/19/13, 8:59 PM",
      "commitName": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/13, 8:22 PM",
      "commitNameOld": "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return UntypedObjectDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType, clsName);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType, clsName);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        return JacksonDeserializers.find(rawType);\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1320,
      "functionName": "findDefaultSerializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n",
      "diff": "@@ -1,23 +1,23 @@\n public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n     String clsName \u003d rawType.getName();\n     if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n         if (rawType \u003d\u003d CLASS_OBJECT) {\n             return UntypedObjectDeserializer.instance;\n         }\n         if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n             return StringDeserializer.instance;\n         }\n-        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType);\n+        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType, clsName);\n         if (deser \u003d\u003d null) {\n-            deser \u003d DateDeserializers.find(rawType);\n+            deser \u003d DateDeserializers.find(rawType, clsName);\n             if (deser \u003d\u003d null) {\n-                deser \u003d JdkDeserializers.find(rawType);\n+                deser \u003d JdkDeserializers.find(rawType, clsName);\n             }\n         }\n         return deser;\n     }\n     if (clsName.startsWith(\"com.fasterxml.\")) {\n         return JacksonDeserializers.find(rawType);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring to try to reduce amount of mandatory initializations\n",
      "commitDate": "2/19/13, 8:22 PM",
      "commitName": "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,23 @@\n+public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n+    String clsName \u003d rawType.getName();\n+    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n+        if (rawType \u003d\u003d CLASS_OBJECT) {\n+            return UntypedObjectDeserializer.instance;\n+        }\n+        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n+            return StringDeserializer.instance;\n+        }\n+        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType);\n+        if (deser \u003d\u003d null) {\n+            deser \u003d DateDeserializers.find(rawType);\n+            if (deser \u003d\u003d null) {\n+                deser \u003d JdkDeserializers.find(rawType);\n+            }\n+        }\n+        return deser;\n+    }\n+    if (clsName.startsWith(\"com.fasterxml.\")) {\n+        return JacksonDeserializers.find(rawType);\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JsonDeserializer\u003c?\u003e findDefaultSerializer(Class\u003c?\u003e rawType) {\n    String clsName \u003d rawType.getName();\n    if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n        if (rawType \u003d\u003d CLASS_OBJECT) {\n            return UntypedObjectDeserializer.instance;\n        }\n        if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_BUFFER) {\n            return StringDeserializer.instance;\n        }\n        JsonDeserializer\u003c?\u003e deser \u003d NumberDeserializers.find(rawType);\n        if (deser \u003d\u003d null) {\n            deser \u003d DateDeserializers.find(rawType);\n            if (deser \u003d\u003d null) {\n                deser \u003d JdkDeserializers.find(rawType);\n            }\n        }\n        return deser;\n    }\n    if (clsName.startsWith(\"com.fasterxml.\")) {\n        return JacksonDeserializers.find(rawType);\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1320,
      "functionName": "findDefaultSerializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to find one of default serializers for \"well-known\"\nplatform types: JDK-provided types, and small number of public Jackson\nAPI types.\n\n@since 2.2\n"
    }
  }
}