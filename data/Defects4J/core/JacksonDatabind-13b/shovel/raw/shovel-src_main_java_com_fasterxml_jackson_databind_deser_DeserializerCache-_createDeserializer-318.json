{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeserializerCache.java",
  "functionName": "_createDeserializer",
  "functionId": "_createDeserializer___ctxt-DeserializationContext__factory-DeserializerFactory__type-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
  "functionStartLine": 318,
  "functionEndLine": 368,
  "numCommitsSeen": 77,
  "timeTaken": 2269,
  "changeHistory": [
    "1a037b3dab24ab733d1e9e34957eefdd19cece87",
    "a4575017d54b7a7d0be5711d9761d1c4eb0aea35",
    "cc737528660b99e71865096e3cd0c4c4a2b3871e",
    "329b50c86796b277dec4188e46675968e79cd071",
    "9439a310c169a00cd01a4e9b64fb9f5441297b96",
    "eb7924e8edb2f172ea9109a1a83539a6616332a3",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "82b474d51545919cb38a49485f56fd29d6ed199b",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
    "d0bb3152ceec7c33c700d21454b34700968a526a",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
    "49b712169c432100297164f6b5102f3578bd636c",
    "d6e90d0259da622ddc593215361acdec3950bfe8",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "bf355caa0821e58968df3bf6c12f612639224e47",
    "f0b28a96644b3dc22c997a05975de335dfed0418",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "1a037b3dab24ab733d1e9e34957eefdd19cece87": "Ybodychange",
    "a4575017d54b7a7d0be5711d9761d1c4eb0aea35": "Ybodychange",
    "cc737528660b99e71865096e3cd0c4c4a2b3871e": "Ybodychange",
    "329b50c86796b277dec4188e46675968e79cd071": "Ybodychange",
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": "Ybodychange",
    "eb7924e8edb2f172ea9109a1a83539a6616332a3": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ybodychange",
    "82b474d51545919cb38a49485f56fd29d6ed199b": "Yfilerename",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "d0bb3152ceec7c33c700d21454b34700968a526a": "Ybodychange",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": "Ymultichange(Yparameterchange,Ybodychange)",
    "49b712169c432100297164f6b5102f3578bd636c": "Ybodychange",
    "d6e90d0259da622ddc593215361acdec3950bfe8": "Ybodychange",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ybodychange",
    "bf355caa0821e58968df3bf6c12f612639224e47": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "f0b28a96644b3dc22c997a05975de335dfed0418": "Ybodychange",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Yfilerename",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1a037b3dab24ab733d1e9e34957eefdd19cece87": {
      "type": "Ybodychange",
      "commitMessage": "Bug fix for issue 636.\n",
      "commitDate": "11/26/14, 4:09 PM",
      "commitName": "1a037b3dab24ab733d1e9e34957eefdd19cece87",
      "commitAuthor": "Michael Spiegel",
      "commitDateOld": "11/7/14, 5:13 PM",
      "commitNameOld": "8c7f3cdf92a7479699a92505bcd0379874abb10b",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 18.96,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc;\n    try {\n        beanDesc \u003d config.introspect(type);\n    } catch (NoClassDefFoundError error) {\n        return new NoClassDefFoundDeserializer\u003cObject\u003e(error);\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n    if (builder !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n    }\n    Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n    if (conv \u003d\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n    }\n    JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n    if (!delegateType.hasRawClass(type.getRawClass())) {\n        beanDesc \u003d config.introspect(delegateType);\n    }\n    return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 314,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,30 +1,35 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d factory.mapAbstractType(config, type);\n     }\n-    BeanDescription beanDesc \u003d config.introspect(type);\n+    BeanDescription beanDesc;\n+    try {\n+        beanDesc \u003d config.introspect(type);\n+    } catch (NoClassDefFoundError error) {\n+        return new NoClassDefFoundDeserializer\u003cObject\u003e(error);\n+    }\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n     if (builder !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n     }\n     Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n     if (conv \u003d\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n     }\n     JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n     if (!delegateType.hasRawClass(type.getRawClass())) {\n         beanDesc \u003d config.introspect(delegateType);\n     }\n     return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a4575017d54b7a7d0be5711d9761d1c4eb0aea35": {
      "type": "Ybodychange",
      "commitMessage": "further fix related to #288, but on deserializer side\n",
      "commitDate": "8/21/13, 10:08 PM",
      "commitName": "a4575017d54b7a7d0be5711d9761d1c4eb0aea35",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/13, 1:11 PM",
      "commitNameOld": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 171.33,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n    if (builder !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n    }\n    Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n    if (conv \u003d\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n    }\n    JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n    if (!delegateType.hasRawClass(type.getRawClass())) {\n        beanDesc \u003d config.introspect(delegateType);\n    }\n    return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 319,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,27 +1,30 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n     if (builder !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n     }\n     Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n     if (conv \u003d\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n     }\n     JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n+    if (!delegateType.hasRawClass(type.getRawClass())) {\n+        beanDesc \u003d config.introspect(delegateType);\n+    }\n     return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc737528660b99e71865096e3cd0c4c4a2b3871e": {
      "type": "Ybodychange",
      "commitMessage": "Improvements to Converter, added StdConverter base class\n",
      "commitDate": "3/3/13, 1:11 PM",
      "commitName": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 3:08 PM",
      "commitNameOld": "329b50c86796b277dec4188e46675968e79cd071",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n    if (builder !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n    }\n    Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n    if (conv \u003d\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n    }\n    JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n    return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 319,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,33 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n     if (builder !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n     }\n     Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n     if (conv \u003d\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n     }\n-    TypeFactory tf \u003d ctxt.getTypeFactory();\n-    JavaType converterType \u003d tf.constructType(conv.getClass());\n-    JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n-    if (params \u003d\u003d null || params.length !\u003d 2) {\n-        throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n-    }\n-    JavaType delegateType \u003d params[0];\n+    JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n     return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "329b50c86796b277dec4188e46675968e79cd071": {
      "type": "Ybodychange",
      "commitMessage": "Fix a minor problem with converters, was using wrong delegate type\n",
      "commitDate": "3/2/13, 3:08 PM",
      "commitName": "329b50c86796b277dec4188e46675968e79cd071",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 1:13 PM",
      "commitNameOld": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n    if (builder !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n    }\n    Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n    if (conv \u003d\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n    }\n    TypeFactory tf \u003d ctxt.getTypeFactory();\n    JavaType converterType \u003d tf.constructType(conv.getClass());\n    JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n    if (params \u003d\u003d null || params.length !\u003d 2) {\n        throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n    }\n    JavaType delegateType \u003d params[0];\n    return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 319,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,33 +1,33 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n     if (builder !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n     }\n     Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n     if (conv \u003d\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n     }\n     TypeFactory tf \u003d ctxt.getTypeFactory();\n     JavaType converterType \u003d tf.constructType(conv.getClass());\n     JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n     if (params \u003d\u003d null || params.length !\u003d 2) {\n         throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n     }\n-    JavaType delegateType \u003d params[1];\n+    JavaType delegateType \u003d params[0];\n     return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": {
      "type": "Ybodychange",
      "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
      "commitDate": "3/2/13, 1:13 PM",
      "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/6/12, 10:45 AM",
      "commitNameOld": "0e114114d330caaf6a56e63ab4d8a3ee1ba3e350",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 147.14,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n    if (builder !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n    }\n    Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n    if (conv \u003d\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n    }\n    TypeFactory tf \u003d ctxt.getTypeFactory();\n    JavaType converterType \u003d tf.constructType(conv.getClass());\n    JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n    if (params \u003d\u003d null || params.length !\u003d 2) {\n        throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n    }\n    JavaType delegateType \u003d params[1];\n    return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 319,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,50 +1,33 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n     if (builder !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n     }\n-    if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n+    Converter\u003cObject, Object\u003e conv \u003d beanDesc.findDeserializationConverter();\n+    if (conv \u003d\u003d null) {\n+        return (JsonDeserializer\u003cObject\u003e) _createDeserializer2(ctxt, factory, type, beanDesc);\n     }\n-    if (type.isContainerType()) {\n-        if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n-        }\n-        if (type.isMapLikeType()) {\n-            MapLikeType mlt \u003d (MapLikeType) type;\n-            if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n-            }\n-            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n-        }\n-        if (type.isCollectionLikeType()) {\n-            JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n-            if (format \u003d\u003d null || format.getShape() !\u003d JsonFormat.Shape.OBJECT) {\n-                CollectionLikeType clt \u003d (CollectionLikeType) type;\n-                if (clt.isTrueCollectionType()) {\n-                    return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n-                }\n-                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n-            }\n-        }\n+    TypeFactory tf \u003d ctxt.getTypeFactory();\n+    JavaType converterType \u003d tf.constructType(conv.getClass());\n+    JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n+    if (params \u003d\u003d null || params.length !\u003d 2) {\n+        throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n     }\n-    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n-    }\n-    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n+    JavaType delegateType \u003d params[1];\n+    return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eb7924e8edb2f172ea9109a1a83539a6616332a3": {
      "type": "Ybodychange",
      "commitMessage": "Completed [Issue#40]\n",
      "commitDate": "8/3/12, 9:27 PM",
      "commitName": "eb7924e8edb2f172ea9109a1a83539a6616332a3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/25/12, 12:07 PM",
      "commitNameOld": "261f214d867f750ff3c7f68d1376fee3b62584c1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 131.39,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n    if (builder !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n            if (format \u003d\u003d null || format.getShape() !\u003d JsonFormat.Shape.OBJECT) {\n                CollectionLikeType clt \u003d (CollectionLikeType) type;\n                if (clt.isTrueCollectionType()) {\n                    return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n                }\n                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n            }\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 300,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,47 +1,50 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n     if (builder !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n     }\n     if (type.isEnumType()) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n             return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n                 return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n             }\n             return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n-            CollectionLikeType clt \u003d (CollectionLikeType) type;\n-            if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n+            JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n+            if (format \u003d\u003d null || format.getShape() !\u003d JsonFormat.Shape.OBJECT) {\n+                CollectionLikeType clt \u003d (CollectionLikeType) type;\n+                if (clt.isTrueCollectionType()) {\n+                    return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n+                }\n+                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n     }\n     return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ybodychange",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 14.03,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n    if (builder !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 300,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,43 +1,47 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n+    Class\u003c?\u003e builder \u003d beanDesc.findPOJOBuilder();\n+    if (builder !\u003d null) {\n+        return (JsonDeserializer\u003cObject\u003e) factory.createBuilderBasedDeserializer(ctxt, type, beanDesc, builder);\n+    }\n     if (type.isEnumType()) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n             return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n                 return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n             }\n             return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n                 return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n             }\n             return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n         return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n     }\n     return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "82b474d51545919cb38a49485f56fd29d6ed199b": {
      "type": "Yfilerename",
      "commitMessage": "Fix 3 unit test failures\n",
      "commitDate": "2/2/12, 5:33 PM",
      "commitName": "82b474d51545919cb38a49485f56fd29d6ed199b",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 1:00 PM",
      "commitNameOld": "69afdff1fac0fc4a472a0b04d5bc01df49a427c5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 301,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
      }
    },
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
      "commitDate": "2/1/12, 10:18 PM",
      "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 303,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n-        type \u003d _factory.mapAbstractType(config, type);\n+        type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n+        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n+                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n+                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n+        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n+    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 303,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n-        type \u003d _factory.mapAbstractType(config, type);\n+        type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n+        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n+                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n+                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n+        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n+    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 303,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n-        type \u003d _factory.mapAbstractType(config, type);\n+        type \u003d factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n+        return (JsonDeserializer\u003cObject\u003e) factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n+                return (JsonDeserializer\u003cObject\u003e) factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n+                return (JsonDeserializer\u003cObject\u003e) factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n+            return (JsonDeserializer\u003cObject\u003e) factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n+        return (JsonDeserializer\u003cObject\u003e) factory.createTreeDeserializer(config, type, beanDesc);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n+    return (JsonDeserializer\u003cObject\u003e) factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType]",
            "newValue": "[ctxt-DeserializationContext, factory-DeserializerFactory, type-JavaType]"
          }
        }
      ]
    },
    "d0bb3152ceec7c33c700d21454b34700968a526a": {
      "type": "Ybodychange",
      "commitMessage": "Removing BeanProperty from TypeDeserializer handling as well\n",
      "commitDate": "1/31/12, 1:04 PM",
      "commitName": "d0bb3152ceec7c33c700d21454b34700968a526a",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 12:45 PM",
      "commitNameOld": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 361,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d _factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, null);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, null);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, null);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n     }\n     return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
      "commitDate": "1/31/12, 12:45 PM",
      "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, null);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, null);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, null);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 365,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d _factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n-    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n-    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n+    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, null);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, null);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, null);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n     }\n     return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, null);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, null);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, null);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 365,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d _factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n-    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());\n     if (deser !\u003d null) {\n         return deser;\n     }\n-    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n+    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, null);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, null);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, null);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n     }\n     return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "49b712169c432100297164f6b5102f3578bd636c": {
      "type": "Ybodychange",
      "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
      "commitDate": "1/30/12, 10:13 PM",
      "commitName": "49b712169c432100297164f6b5102f3578bd636c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/30/12, 7:15 PM",
      "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 394,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d _factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n             return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n                 return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n                 return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n     }\n     return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6e90d0259da622ddc593215361acdec3950bfe8": {
      "type": "Ybodychange",
      "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
      "commitDate": "1/30/12, 7:15 PM",
      "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/30/12, 9:20 AM",
      "commitNameOld": "9b9d04371fadb457e2f9b9d67f643c59d706aedc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 392,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d _factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc, property);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n             return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n                 return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc, property);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n                 return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n             }\n             return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc, property);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc, property);\n+    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ybodychange",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 2:46 PM",
      "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 397,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
      "diff": "@@ -1,43 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n         type \u003d _factory.mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n-    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, property);\n+    JavaType newType \u003d modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type, property);\n     if (newType !\u003d type) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(newType);\n     }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, beanDesc, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(ctxt, type, beanDesc, property);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, beanDesc, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc, property);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, beanDesc, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(ctxt, (MapType) mlt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, beanDesc, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(ctxt, mlt, beanDesc, property);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, beanDesc, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, beanDesc, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc, property);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n         return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, beanDesc, property);\n+    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(ctxt, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bf355caa0821e58968df3bf6c12f612639224e47": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
      "commitDate": "1/24/12, 2:46 PM",
      "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
          "commitDate": "1/24/12, 2:46 PM",
          "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 1:27 PM",
          "commitNameOld": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, property);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, beanDesc, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, beanDesc, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, beanDesc, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 393,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,29 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n+    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n+        type \u003d _factory.mapAbstractType(config, type);\n+    }\n+    BeanDescription beanDesc \u003d config.introspect(type);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n+    if (deser !\u003d null) {\n+        return deser;\n+    }\n+    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, property);\n+    if (newType !\u003d type) {\n+        type \u003d newType;\n+        beanDesc \u003d config.introspect(newType);\n+    }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, beanDesc, property);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, beanDesc, property);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, beanDesc, property);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, property);\n+    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
          "commitDate": "1/24/12, 2:46 PM",
          "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 1:27 PM",
          "commitNameOld": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, property);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, beanDesc, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, beanDesc, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, beanDesc, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 393,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,29 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n+    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n+        type \u003d _factory.mapAbstractType(config, type);\n+    }\n+    BeanDescription beanDesc \u003d config.introspect(type);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n+    if (deser !\u003d null) {\n+        return deser;\n+    }\n+    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, property);\n+    if (newType !\u003d type) {\n+        type \u003d newType;\n+        beanDesc \u003d config.introspect(newType);\n+    }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, beanDesc, property);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, beanDesc, property);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, beanDesc, property);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, property);\n+    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
          "commitDate": "1/24/12, 2:46 PM",
          "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 1:27 PM",
          "commitNameOld": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n        type \u003d _factory.mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, property);\n    if (newType !\u003d type) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(newType);\n    }\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, beanDesc, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, beanDesc, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, beanDesc, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, beanDesc, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 393,
          "functionName": "_createDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n",
          "diff": "@@ -1,29 +1,43 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n+    if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n+        type \u003d _factory.mapAbstractType(config, type);\n+    }\n+    BeanDescription beanDesc \u003d config.introspect(type);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo(), property);\n+    if (deser !\u003d null) {\n+        return deser;\n+    }\n+    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, property);\n+    if (newType !\u003d type) {\n+        type \u003d newType;\n+        beanDesc \u003d config.introspect(newType);\n+    }\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, beanDesc, property);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, beanDesc, property);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, beanDesc, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, beanDesc, property);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, beanDesc, property);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, property);\n+    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Method that does the heavy lifting of checking for per-type annotations,\nfind out full type, and figure out which actual factory method\nto call.\n"
          }
        }
      ]
    },
    "f0b28a96644b3dc22c997a05975de335dfed0418": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "1/24/12, 1:27 PM",
      "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 1:02 PM",
      "commitNameOld": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, property);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 383,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n     if (type.isEnumType()) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, this, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, type, property);\n     }\n     if (type.isContainerType()) {\n         if (type.isArrayType()) {\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, this, (ArrayType) type, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, (ArrayType) type, property);\n         }\n         if (type.isMapLikeType()) {\n             MapLikeType mlt \u003d (MapLikeType) type;\n             if (mlt.isTrueMapType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, this, (MapType) mlt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, (MapType) mlt, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, this, mlt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, mlt, property);\n         }\n         if (type.isCollectionLikeType()) {\n             CollectionLikeType clt \u003d (CollectionLikeType) type;\n             if (clt.isTrueCollectionType()) {\n-                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, this, (CollectionType) clt, property);\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, (CollectionType) clt, property);\n             }\n-            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, this, clt, property);\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, clt, property);\n         }\n     }\n     if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n-        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, this, type, property);\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, type, property);\n     }\n-    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, this, type, property);\n+    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, type, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Yfilerename",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:08 AM",
      "commitNameOld": "c9e0c1712bb188783acb586a4eb4ece4217b2962",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, this, type, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, this, (ArrayType) type, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, this, (MapType) mlt, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, this, mlt, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, this, (CollectionType) clt, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, this, clt, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, this, type, property);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, this, type, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 383,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,29 @@\n+@SuppressWarnings(\"unchecked\")\n+protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+    if (type.isEnumType()) {\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, this, type, property);\n+    }\n+    if (type.isContainerType()) {\n+        if (type.isArrayType()) {\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, this, (ArrayType) type, property);\n+        }\n+        if (type.isMapLikeType()) {\n+            MapLikeType mlt \u003d (MapLikeType) type;\n+            if (mlt.isTrueMapType()) {\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, this, (MapType) mlt, property);\n+            }\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, this, mlt, property);\n+        }\n+        if (type.isCollectionLikeType()) {\n+            CollectionLikeType clt \u003d (CollectionLikeType) type;\n+            if (clt.isTrueCollectionType()) {\n+                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, this, (CollectionType) clt, property);\n+            }\n+            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, this, clt, property);\n+        }\n+    }\n+    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n+        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, this, type, property);\n+    }\n+    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, this, type, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isEnumType()) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createEnumDeserializer(config, this, type, property);\n    }\n    if (type.isContainerType()) {\n        if (type.isArrayType()) {\n            return (JsonDeserializer\u003cObject\u003e) _factory.createArrayDeserializer(config, this, (ArrayType) type, property);\n        }\n        if (type.isMapLikeType()) {\n            MapLikeType mlt \u003d (MapLikeType) type;\n            if (mlt.isTrueMapType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createMapDeserializer(config, this, (MapType) mlt, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createMapLikeDeserializer(config, this, mlt, property);\n        }\n        if (type.isCollectionLikeType()) {\n            CollectionLikeType clt \u003d (CollectionLikeType) type;\n            if (clt.isTrueCollectionType()) {\n                return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionDeserializer(config, this, (CollectionType) clt, property);\n            }\n            return (JsonDeserializer\u003cObject\u003e) _factory.createCollectionLikeDeserializer(config, this, clt, property);\n        }\n    }\n    if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n        return (JsonDeserializer\u003cObject\u003e) _factory.createTreeDeserializer(config, this, type, property);\n    }\n    return (JsonDeserializer\u003cObject\u003e) _factory.createBeanDeserializer(config, this, type, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
      "functionStartLine": 395,
      "functionName": "_createDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": ""
    }
  }
}