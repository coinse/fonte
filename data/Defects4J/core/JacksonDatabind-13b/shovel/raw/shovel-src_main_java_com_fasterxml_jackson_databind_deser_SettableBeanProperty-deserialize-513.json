{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SettableBeanProperty.java",
  "functionName": "deserialize",
  "functionId": "deserialize___p-JsonParser__ctxt-DeserializationContext",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
  "functionAnnotation": "",
  "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
  "functionStartLine": 513,
  "functionEndLine": 524,
  "numCommitsSeen": 92,
  "timeTaken": 1689,
  "changeHistory": [
    "b478c792e0e68039224109129350dd71f768ddc1",
    "afda9e28a2047254905e0b0fe84c928944ab5225",
    "5f177cc6a1fc10de8bca2f42e28f9f0c211b94b1",
    "15e43714fe76a2e7963361087ff3b7e7b9c30b75",
    "f480802a4f8dac8d406ec67d7106068fab8f43f7",
    "7724c8ae5e61153e550a1f0de2e79902256a60b7",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
    "1826df76743de7de97bc9423794262e335d640ff",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "b478c792e0e68039224109129350dd71f768ddc1": "Ymultichange(Yparameterchange,Ybodychange)",
    "afda9e28a2047254905e0b0fe84c928944ab5225": "Yexceptionschange",
    "5f177cc6a1fc10de8bca2f42e28f9f0c211b94b1": "Yformatchange",
    "15e43714fe76a2e7963361087ff3b7e7b9c30b75": "Yformatchange",
    "f480802a4f8dac8d406ec67d7106068fab8f43f7": "Ybodychange",
    "7724c8ae5e61153e550a1f0de2e79902256a60b7": "Ybodychange",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": "Ydocchange",
    "1826df76743de7de97bc9423794262e335d640ff": "Yformatchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b478c792e0e68039224109129350dd71f768ddc1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Still tweaking bean property handling for deser\n",
      "commitDate": "12/13/14, 3:20 PM",
      "commitName": "b478c792e0e68039224109129350dd71f768ddc1",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Still tweaking bean property handling for deser\n",
          "commitDate": "12/13/14, 3:20 PM",
          "commitName": "b478c792e0e68039224109129350dd71f768ddc1",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/16/14, 9:20 PM",
          "commitNameOld": "afda9e28a2047254905e0b0fe84c928944ab5225",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 57.79,
          "commitsBetweenForRepo": 129,
          "commitsBetweenForFile": 1,
          "actualSource": "public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    JsonToken t \u003d p.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(p, ctxt);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
          "functionStartLine": 513,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
          "diff": "@@ -1,10 +1,10 @@\n-public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-    JsonToken t \u003d jp.getCurrentToken();\n+public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n+    JsonToken t \u003d p.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n     }\n     if (_valueTypeDeserializer !\u003d null) {\n-        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n+        return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n     }\n-    return _valueDeserializer.deserialize(jp, ctxt);\n+    return _valueDeserializer.deserialize(p, ctxt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[jp-JsonParser, ctxt-DeserializationContext]",
            "newValue": "[p-JsonParser, ctxt-DeserializationContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Still tweaking bean property handling for deser\n",
          "commitDate": "12/13/14, 3:20 PM",
          "commitName": "b478c792e0e68039224109129350dd71f768ddc1",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/16/14, 9:20 PM",
          "commitNameOld": "afda9e28a2047254905e0b0fe84c928944ab5225",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 57.79,
          "commitsBetweenForRepo": 129,
          "commitsBetweenForFile": 1,
          "actualSource": "public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n    JsonToken t \u003d p.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(p, ctxt);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
          "functionStartLine": 513,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
          "diff": "@@ -1,10 +1,10 @@\n-public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n-    JsonToken t \u003d jp.getCurrentToken();\n+public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n+    JsonToken t \u003d p.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n     }\n     if (_valueTypeDeserializer !\u003d null) {\n-        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n+        return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);\n     }\n-    return _valueDeserializer.deserialize(jp, ctxt);\n+    return _valueDeserializer.deserialize(p, ctxt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "afda9e28a2047254905e0b0fe84c928944ab5225": {
      "type": "Yexceptionschange",
      "commitMessage": "minor trimming, trying to diagnose #538\n",
      "commitDate": "10/16/14, 9:20 PM",
      "commitName": "afda9e28a2047254905e0b0fe84c928944ab5225",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/13/14, 3:30 PM",
      "commitNameOld": "62425ef39c61ffd360a9014b4bc177d05cc7b494",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 64.24,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 519,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
      "diff": "@@ -1,10 +1,10 @@\n-public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n     }\n     if (_valueTypeDeserializer !\u003d null) {\n         return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n     }\n     return _valueDeserializer.deserialize(jp, ctxt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[IOException, JsonProcessingException]",
        "newValue": "[IOException]"
      }
    },
    "5f177cc6a1fc10de8bca2f42e28f9f0c211b94b1": {
      "type": "Yformatchange",
      "commitMessage": "cosmetic\n",
      "commitDate": "8/7/14, 11:26 PM",
      "commitName": "5f177cc6a1fc10de8bca2f42e28f9f0c211b94b1",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/11/14, 4:41 PM",
      "commitNameOld": "15e43714fe76a2e7963361087ff3b7e7b9c30b75",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 27.28,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 527,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
      "diff": "",
      "extendedDetails": {}
    },
    "15e43714fe76a2e7963361087ff3b7e7b9c30b75": {
      "type": "Yformatchange",
      "commitMessage": "Tackle parts of #501; add suggested type resolution, indicate specific problem explicitly\n",
      "commitDate": "7/11/14, 4:41 PM",
      "commitName": "15e43714fe76a2e7963361087ff3b7e7b9c30b75",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/17/14, 8:19 PM",
      "commitNameOld": "7cd54640a8b75f3254cb86b28f1488472abda5d1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 84.85,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 527,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
      "diff": "",
      "extendedDetails": {}
    },
    "f480802a4f8dac8d406ec67d7106068fab8f43f7": {
      "type": "Ybodychange",
      "commitMessage": "Improved error reporting a bit for uninitialized deserializers\n",
      "commitDate": "4/8/13, 3:28 PM",
      "commitName": "f480802a4f8dac8d406ec67d7106068fab8f43f7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/6/13, 7:10 PM",
      "commitNameOld": "7724c8ae5e61153e550a1f0de2e79902256a60b7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 438,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
      "diff": "@@ -1,12 +1,10 @@\n public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n     }\n     if (_valueTypeDeserializer !\u003d null) {\n         return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n     }\n-    if (_valueDeserializer \u003d\u003d null)\n-        throw new JsonMappingException(\"No Value deserializer for \u0027\" + this._propName + \"\u0027, type \" + this._type);\n     return _valueDeserializer.deserialize(jp, ctxt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7724c8ae5e61153e550a1f0de2e79902256a60b7": {
      "type": "Ybodychange",
      "commitMessage": "Improve default format schema compatibility testing/handling\n",
      "commitDate": "4/6/13, 7:10 PM",
      "commitName": "7724c8ae5e61153e550a1f0de2e79902256a60b7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/13/13, 3:56 PM",
      "commitNameOld": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    if (_valueDeserializer \u003d\u003d null)\n        throw new JsonMappingException(\"No Value deserializer for \u0027\" + this._propName + \"\u0027, type \" + this._type);\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 418,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
      "diff": "@@ -1,10 +1,12 @@\n public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.VALUE_NULL) {\n         return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n     }\n     if (_valueTypeDeserializer !\u003d null) {\n         return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n     }\n+    if (_valueDeserializer \u003d\u003d null)\n+        throw new JsonMappingException(\"No Value deserializer for \u0027\" + this._propName + \"\u0027, type \" + this._type);\n     return _valueDeserializer.deserialize(jp, ctxt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": {
      "type": "Ydocchange",
      "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
      "commitDate": "3/5/12, 10:34 PM",
      "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/12, 8:27 PM",
      "commitNameOld": "137aa17e69865f896b48f5113e47ef3ee0794806",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 327,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n",
        "newValue": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n\u003cp\u003e \nNote that this method is final for performance reasons: to override\nfunctionality you must override other methods that call this method;\nthis method should also not be called directly unless you really know\nwhat you are doing (and probably not even then).\n"
      }
    },
    "1826df76743de7de97bc9423794262e335d640ff": {
      "type": "Yformatchange",
      "commitMessage": "FINALLY fixed handling of nested @JsonUnwrapped+prefix\n",
      "commitDate": "1/23/12, 7:43 PM",
      "commitName": "1826df76743de7de97bc9423794262e335d640ff",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/20/12, 8:16 PM",
      "commitNameOld": "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 260,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n",
      "diff": "",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,10 @@\n+public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    JsonToken t \u003d jp.getCurrentToken();\n+    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n+        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n+    }\n+    if (_valueTypeDeserializer !\u003d null) {\n+        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n+    }\n+    return _valueDeserializer.deserialize(jp, ctxt);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        return (_nullProvider \u003d\u003d null) ? null : _nullProvider.nullValue(ctxt);\n    }\n    if (_valueTypeDeserializer !\u003d null) {\n        return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n    }\n    return _valueDeserializer.deserialize(jp, ctxt);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
      "functionStartLine": 290,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "This method is needed by some specialized bean deserializers,\nand also called by some {@link #deserializeAndSet} implementations.\n\u003cp\u003e\nPre-condition is that passed parser must point to the first token\nthat should be consumed to produce the value (the only value for\nscalars, multiple for Objects and Arrays).\n"
    }
  }
}