{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "_addDeserializerFactoryMethods",
  "functionId": "_addDeserializerFactoryMethods___ctxt-DeserializationContext__beanDesc-BeanDescription__vchecker-VisibilityChecker__?____intr-AnnotationIntrospector__creators-CreatorCollector__creatorParams-Map__AnnotatedWithParams,BeanPropertyDefinition[]__",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 600,
  "functionEndLine": 705,
  "numCommitsSeen": 105,
  "timeTaken": 2138,
  "changeHistory": [
    "257ae1c7a88c5ccec2882433a39c0df1de2b73aa",
    "ef4115cacf4526a69c0613a61b80317a676955df",
    "a56270abbf1d6c3c4eb88daff53a51bdf8cc7900",
    "c717c2ff7ef92ef1c5a4e6970408efec1074b546"
  ],
  "changeHistoryShort": {
    "257ae1c7a88c5ccec2882433a39c0df1de2b73aa": "Ybodychange",
    "ef4115cacf4526a69c0613a61b80317a676955df": "Ybodychange",
    "a56270abbf1d6c3c4eb88daff53a51bdf8cc7900": "Ybodychange",
    "c717c2ff7ef92ef1c5a4e6970408efec1074b546": "Yintroduced"
  },
  "changeHistoryDetails": {
    "257ae1c7a88c5ccec2882433a39c0df1de2b73aa": {
      "type": "Ybodychange",
      "commitMessage": "Fix #660\n",
      "commitDate": "12/23/14, 3:05 PM",
      "commitName": "257ae1c7a88c5ccec2882433a39c0df1de2b73aa",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "11/19/14, 2:04 PM",
      "commitNameOld": "d4c6f36d8f6c25261f7dea699d57cd64b6d2b67e",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 34.04,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n        final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n        final int argCount \u003d factory.getParameterCount();\n        if (argCount \u003d\u003d 0) {\n            if (isCreator) {\n                creators.setDefaultCreator(factory);\n            }\n            continue;\n        }\n        final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n        if (argCount \u003d\u003d 1) {\n            BeanPropertyDefinition argDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n            boolean useProps \u003d _checkIfCreatorPropertyBased(intr, factory, argDef);\n            if (!useProps) {\n                _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n                continue;\n            }\n        } else {\n            if (!isCreator) {\n                continue;\n            }\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        int implicitNameCount \u003d 0;\n        int explicitNameCount \u003d 0;\n        int injectCount \u003d 0;\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            final AnnotatedParameter param \u003d factory.getParameter(i);\n            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n            Object injectId \u003d intr.findInjectableValueId(param);\n            final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n            if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                ++explicitNameCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n            if (unwrapper !\u003d null) {\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                ++implicitNameCount;\n                continue;\n            }\n            if (isCreator) {\n                if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                    ++implicitNameCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n            }\n            if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        final int namedCount \u003d explicitNameCount + implicitNameCount;\n        if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(factory, isCreator, properties);\n            } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(factory, isCreator, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 594,
      "functionName": "_addDeserializerFactoryMethods",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,73 +1,73 @@\n protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n         final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n         final int argCount \u003d factory.getParameterCount();\n         if (argCount \u003d\u003d 0) {\n             if (isCreator) {\n                 creators.setDefaultCreator(factory);\n             }\n             continue;\n         }\n         final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n         if (argCount \u003d\u003d 1) {\n             BeanPropertyDefinition argDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n             boolean useProps \u003d _checkIfCreatorPropertyBased(intr, factory, argDef);\n             if (!useProps) {\n                 _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n                 continue;\n             }\n         } else {\n             if (!isCreator) {\n                 continue;\n             }\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         int implicitNameCount \u003d 0;\n         int explicitNameCount \u003d 0;\n         int injectCount \u003d 0;\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             final AnnotatedParameter param \u003d factory.getParameter(i);\n             BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n             Object injectId \u003d intr.findInjectableValueId(param);\n             final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n             if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                 ++explicitNameCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 continue;\n             }\n             if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 continue;\n             }\n             NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n             if (unwrapper !\u003d null) {\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                 ++implicitNameCount;\n                 continue;\n             }\n             if (isCreator) {\n                 if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                     ++implicitNameCount;\n                     properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                     continue;\n                 }\n             }\n             if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         final int namedCount \u003d explicitNameCount + implicitNameCount;\n         if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n-                creators.addPropertyCreator(factory, properties);\n+                creators.addPropertyCreator(factory, isCreator, properties);\n             } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n-                creators.addDelegatingCreator(factory, properties);\n+                creators.addDelegatingCreator(factory, isCreator, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ef4115cacf4526a69c0613a61b80317a676955df": {
      "type": "Ybodychange",
      "commitMessage": "Last tweaks wrt #614\n",
      "commitDate": "11/16/14, 11:43 PM",
      "commitName": "ef4115cacf4526a69c0613a61b80317a676955df",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/16/14, 11:05 PM",
      "commitNameOld": "a56270abbf1d6c3c4eb88daff53a51bdf8cc7900",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n        final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n        final int argCount \u003d factory.getParameterCount();\n        if (argCount \u003d\u003d 0) {\n            if (isCreator) {\n                creators.setDefaultCreator(factory);\n            }\n            continue;\n        }\n        final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n        if (argCount \u003d\u003d 1) {\n            BeanPropertyDefinition argDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n            boolean useProps \u003d _checkIfCreatorPropertyBased(intr, factory, argDef);\n            if (!useProps) {\n                _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n                continue;\n            }\n        } else {\n            if (!isCreator) {\n                continue;\n            }\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        int implicitNameCount \u003d 0;\n        int explicitNameCount \u003d 0;\n        int injectCount \u003d 0;\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            final AnnotatedParameter param \u003d factory.getParameter(i);\n            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n            Object injectId \u003d intr.findInjectableValueId(param);\n            final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n            if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                ++explicitNameCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n            if (unwrapper !\u003d null) {\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                ++implicitNameCount;\n                continue;\n            }\n            if (isCreator) {\n                if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                    ++implicitNameCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n            }\n            if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        final int namedCount \u003d explicitNameCount + implicitNameCount;\n        if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(factory, properties);\n            } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(factory, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 606,
      "functionName": "_addDeserializerFactoryMethods",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,82 +1,73 @@\n protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n         final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n         final int argCount \u003d factory.getParameterCount();\n         if (argCount \u003d\u003d 0) {\n             if (isCreator) {\n                 creators.setDefaultCreator(factory);\n             }\n             continue;\n         }\n         final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n         if (argCount \u003d\u003d 1) {\n-            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n-            boolean hasExplicitName \u003d (propDef !\u003d null) \u0026\u0026 propDef.isExplicitlyNamed();\n-            final Object injectId \u003d intr.findInjectableValueId(factory.getParameter(0));\n-            JsonCreator.Mode mode \u003d intr.findCreatorBinding(factory);\n-            boolean withProps \u003d (mode \u003d\u003d JsonCreator.Mode.PROPERTIES);\n-            if (!withProps \u0026\u0026 (mode !\u003d JsonCreator.Mode.DELEGATING)) {\n-                if (hasExplicitName || (injectId !\u003d null)) {\n-                    withProps \u003d true;\n-                } else {\n-                }\n-            }\n-            if (!withProps) {\n+            BeanPropertyDefinition argDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n+            boolean useProps \u003d _checkIfCreatorPropertyBased(intr, factory, argDef);\n+            if (!useProps) {\n                 _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n                 continue;\n             }\n         } else {\n             if (!isCreator) {\n                 continue;\n             }\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         int implicitNameCount \u003d 0;\n         int explicitNameCount \u003d 0;\n         int injectCount \u003d 0;\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             final AnnotatedParameter param \u003d factory.getParameter(i);\n             BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n             Object injectId \u003d intr.findInjectableValueId(param);\n             final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n             if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                 ++explicitNameCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 continue;\n             }\n             if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 continue;\n             }\n             NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n             if (unwrapper !\u003d null) {\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                 ++implicitNameCount;\n                 continue;\n             }\n             if (isCreator) {\n                 if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                     ++implicitNameCount;\n                     properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                     continue;\n                 }\n             }\n             if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         final int namedCount \u003d explicitNameCount + implicitNameCount;\n         if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(factory, properties);\n             } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(factory, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a56270abbf1d6c3c4eb88daff53a51bdf8cc7900": {
      "type": "Ybodychange",
      "commitMessage": "Minor improvement wrt #614\n",
      "commitDate": "11/16/14, 11:05 PM",
      "commitName": "a56270abbf1d6c3c4eb88daff53a51bdf8cc7900",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/29/14, 6:20 PM",
      "commitNameOld": "10f44221fa0e8ffbfbc39384581b190f5f0cc106",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 48.24,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n        final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n        final int argCount \u003d factory.getParameterCount();\n        if (argCount \u003d\u003d 0) {\n            if (isCreator) {\n                creators.setDefaultCreator(factory);\n            }\n            continue;\n        }\n        final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n        if (argCount \u003d\u003d 1) {\n            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n            boolean hasExplicitName \u003d (propDef !\u003d null) \u0026\u0026 propDef.isExplicitlyNamed();\n            final Object injectId \u003d intr.findInjectableValueId(factory.getParameter(0));\n            JsonCreator.Mode mode \u003d intr.findCreatorBinding(factory);\n            boolean withProps \u003d (mode \u003d\u003d JsonCreator.Mode.PROPERTIES);\n            if (!withProps \u0026\u0026 (mode !\u003d JsonCreator.Mode.DELEGATING)) {\n                if (hasExplicitName || (injectId !\u003d null)) {\n                    withProps \u003d true;\n                } else {\n                }\n            }\n            if (!withProps) {\n                _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n                continue;\n            }\n        } else {\n            if (!isCreator) {\n                continue;\n            }\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        int implicitNameCount \u003d 0;\n        int explicitNameCount \u003d 0;\n        int injectCount \u003d 0;\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            final AnnotatedParameter param \u003d factory.getParameter(i);\n            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n            Object injectId \u003d intr.findInjectableValueId(param);\n            final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n            if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                ++explicitNameCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n            if (unwrapper !\u003d null) {\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                ++implicitNameCount;\n                continue;\n            }\n            if (isCreator) {\n                if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                    ++implicitNameCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n            }\n            if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        final int namedCount \u003d explicitNameCount + implicitNameCount;\n        if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(factory, properties);\n            } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(factory, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 586,
      "functionName": "_addDeserializerFactoryMethods",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,74 +1,82 @@\n protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n         final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n         final int argCount \u003d factory.getParameterCount();\n         if (argCount \u003d\u003d 0) {\n             if (isCreator) {\n                 creators.setDefaultCreator(factory);\n             }\n             continue;\n         }\n         final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n         if (argCount \u003d\u003d 1) {\n             BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n             boolean hasExplicitName \u003d (propDef !\u003d null) \u0026\u0026 propDef.isExplicitlyNamed();\n             final Object injectId \u003d intr.findInjectableValueId(factory.getParameter(0));\n-            if ((injectId \u003d\u003d null) \u0026\u0026 !hasExplicitName) {\n+            JsonCreator.Mode mode \u003d intr.findCreatorBinding(factory);\n+            boolean withProps \u003d (mode \u003d\u003d JsonCreator.Mode.PROPERTIES);\n+            if (!withProps \u0026\u0026 (mode !\u003d JsonCreator.Mode.DELEGATING)) {\n+                if (hasExplicitName || (injectId !\u003d null)) {\n+                    withProps \u003d true;\n+                } else {\n+                }\n+            }\n+            if (!withProps) {\n                 _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n                 continue;\n             }\n         } else {\n             if (!isCreator) {\n                 continue;\n             }\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         int implicitNameCount \u003d 0;\n         int explicitNameCount \u003d 0;\n         int injectCount \u003d 0;\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             final AnnotatedParameter param \u003d factory.getParameter(i);\n             BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n             Object injectId \u003d intr.findInjectableValueId(param);\n             final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n             if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                 ++explicitNameCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 continue;\n             }\n             if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                 continue;\n             }\n             NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n             if (unwrapper !\u003d null) {\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                 ++implicitNameCount;\n                 continue;\n             }\n             if (isCreator) {\n                 if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                     ++implicitNameCount;\n                     properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                     continue;\n                 }\n             }\n             if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         final int namedCount \u003d explicitNameCount + implicitNameCount;\n         if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(factory, properties);\n             } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(factory, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c717c2ff7ef92ef1c5a4e6970408efec1074b546": {
      "type": "Yintroduced",
      "commitMessage": "Fix #556 (minor regression during 2.5.0-SNAPSHOT, not included in any of released versions)\n",
      "commitDate": "9/25/14, 4:52 PM",
      "commitName": "c717c2ff7ef92ef1c5a4e6970408efec1074b546",
      "commitAuthor": "Cowtowncoder",
      "diff": "@@ -0,0 +1,74 @@\n+protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n+    for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n+        final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n+        final int argCount \u003d factory.getParameterCount();\n+        if (argCount \u003d\u003d 0) {\n+            if (isCreator) {\n+                creators.setDefaultCreator(factory);\n+            }\n+            continue;\n+        }\n+        final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n+        if (argCount \u003d\u003d 1) {\n+            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n+            boolean hasExplicitName \u003d (propDef !\u003d null) \u0026\u0026 propDef.isExplicitlyNamed();\n+            final Object injectId \u003d intr.findInjectableValueId(factory.getParameter(0));\n+            if ((injectId \u003d\u003d null) \u0026\u0026 !hasExplicitName) {\n+                _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n+                continue;\n+            }\n+        } else {\n+            if (!isCreator) {\n+                continue;\n+            }\n+        }\n+        AnnotatedParameter nonAnnotatedParam \u003d null;\n+        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n+        int implicitNameCount \u003d 0;\n+        int explicitNameCount \u003d 0;\n+        int injectCount \u003d 0;\n+        for (int i \u003d 0; i \u003c argCount; ++i) {\n+            final AnnotatedParameter param \u003d factory.getParameter(i);\n+            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n+            Object injectId \u003d intr.findInjectableValueId(param);\n+            final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n+            if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n+                ++explicitNameCount;\n+                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n+                continue;\n+            }\n+            if (injectId !\u003d null) {\n+                ++injectCount;\n+                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n+                continue;\n+            }\n+            NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n+            if (unwrapper !\u003d null) {\n+                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n+                ++implicitNameCount;\n+                continue;\n+            }\n+            if (isCreator) {\n+                if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n+                    ++implicitNameCount;\n+                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n+                    continue;\n+                }\n+            }\n+            if (nonAnnotatedParam \u003d\u003d null) {\n+                nonAnnotatedParam \u003d param;\n+            }\n+        }\n+        final int namedCount \u003d explicitNameCount + implicitNameCount;\n+        if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n+            if ((namedCount + injectCount) \u003d\u003d argCount) {\n+                creators.addPropertyCreator(factory, properties);\n+            } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n+                creators.addDelegatingCreator(factory, properties);\n+            } else {\n+                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void _addDeserializerFactoryMethods(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map\u003cAnnotatedWithParams, BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n        final boolean isCreator \u003d intr.hasCreatorAnnotation(factory);\n        final int argCount \u003d factory.getParameterCount();\n        if (argCount \u003d\u003d 0) {\n            if (isCreator) {\n                creators.setDefaultCreator(factory);\n            }\n            continue;\n        }\n        final BeanPropertyDefinition[] propDefs \u003d creatorParams.get(factory);\n        if (argCount \u003d\u003d 1) {\n            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[0];\n            boolean hasExplicitName \u003d (propDef !\u003d null) \u0026\u0026 propDef.isExplicitlyNamed();\n            final Object injectId \u003d intr.findInjectableValueId(factory.getParameter(0));\n            if ((injectId \u003d\u003d null) \u0026\u0026 !hasExplicitName) {\n                _handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators, factory, isCreator);\n                continue;\n            }\n        } else {\n            if (!isCreator) {\n                continue;\n            }\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        int implicitNameCount \u003d 0;\n        int explicitNameCount \u003d 0;\n        int injectCount \u003d 0;\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            final AnnotatedParameter param \u003d factory.getParameter(i);\n            BeanPropertyDefinition propDef \u003d (propDefs \u003d\u003d null) ? null : propDefs[i];\n            Object injectId \u003d intr.findInjectableValueId(param);\n            final PropertyName name \u003d (propDef \u003d\u003d null) ? null : propDef.getFullName();\n            if (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n                ++explicitNameCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                continue;\n            }\n            NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n            if (unwrapper !\u003d null) {\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                ++implicitNameCount;\n                continue;\n            }\n            if (isCreator) {\n                if (name !\u003d null \u0026\u0026 !name.isEmpty()) {\n                    ++implicitNameCount;\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n                    continue;\n                }\n            }\n            if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        final int namedCount \u003d explicitNameCount + implicitNameCount;\n        if (isCreator || explicitNameCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(factory, properties);\n            } else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(factory, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of factory method \" + factory + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 566,
      "functionName": "_addDeserializerFactoryMethods",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}