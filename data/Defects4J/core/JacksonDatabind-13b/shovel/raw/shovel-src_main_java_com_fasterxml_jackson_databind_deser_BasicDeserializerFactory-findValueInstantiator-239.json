{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "findValueInstantiator",
  "functionId": "findValueInstantiator___ctxt-DeserializationContext__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
  "functionStartLine": 239,
  "functionEndLine": 282,
  "numCommitsSeen": 160,
  "timeTaken": 8402,
  "changeHistory": [
    "17390f08886a4fb01e78e9f179cca1eba3582cac",
    "bfec7201df594c07e8b1c38d50e9f1d742dd9366",
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "17390f08886a4fb01e78e9f179cca1eba3582cac": "Ybodychange",
    "bfec7201df594c07e8b1c38d50e9f1d742dd9366": "Ybodychange",
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25": "Ymultichange(Ymovefromfile,Ybodychange)",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "17390f08886a4fb01e78e9f179cca1eba3582cac": {
      "type": "Ybodychange",
      "commitMessage": "Add a unit test related to #430 to verify that use of @JsonProperty(\"\") can be used to specify \"no-name\" and force use of delegating construction\n",
      "commitDate": "4/4/14, 7:51 PM",
      "commitName": "17390f08886a4fb01e78e9f179cca1eba3582cac",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/11/14, 8:11 PM",
      "commitNameOld": "0cdf42fe5ac175b1b852e735a3265588919ffe32",
      "commitAuthorOld": "Christopher Currie",
      "daysBetweenCommits": 51.95,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    ValueInstantiator instantiator \u003d null;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n    }\n    if (instantiator \u003d\u003d null) {\n        instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    if (instantiator.getIncompleteParameter() !\u003d null) {\n        final AnnotatedParameter nonAnnotatedParam \u003d instantiator.getIncompleteParameter();\n        final AnnotatedWithParams ctor \u003d nonAnnotatedParam.getOwner();\n        throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n    }\n    return instantiator;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 248,
      "functionName": "findValueInstantiator",
      "functionAnnotation": "@Override",
      "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     ValueInstantiator instantiator \u003d null;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n     Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n         instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n     }\n     if (instantiator \u003d\u003d null) {\n         instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n         if (instantiator \u003d\u003d null) {\n             instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n         }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n     if (instantiator.getIncompleteParameter() !\u003d null) {\n         final AnnotatedParameter nonAnnotatedParam \u003d instantiator.getIncompleteParameter();\n         final AnnotatedWithParams ctor \u003d nonAnnotatedParam.getOwner();\n-        throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+        throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n     }\n     return instantiator;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bfec7201df594c07e8b1c38d50e9f1d742dd9366": {
      "type": "Ybodychange",
      "commitMessage": "Defer incomplete ValueInstantiator build errors.\n\nIf a standard ValueInstantiator does not have a complete set of\nproperties, don\u0027t fail right away; there may be a later replacement\ncoming from a module.\n",
      "commitDate": "1/12/13, 11:33 AM",
      "commitName": "bfec7201df594c07e8b1c38d50e9f1d742dd9366",
      "commitAuthor": "Christopher Currie",
      "commitDateOld": "1/8/13, 8:31 PM",
      "commitNameOld": "981f3e1bc5a2e7fd7abc2970e01200ace83b8c2d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.63,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    ValueInstantiator instantiator \u003d null;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n    }\n    if (instantiator \u003d\u003d null) {\n        instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    if (instantiator.getIncompleteParameter() !\u003d null) {\n        final AnnotatedParameter nonAnnotatedParam \u003d instantiator.getIncompleteParameter();\n        final AnnotatedWithParams ctor \u003d nonAnnotatedParam.getOwner();\n        throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n    }\n    return instantiator;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 295,
      "functionName": "findValueInstantiator",
      "functionAnnotation": "@Override",
      "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
      "diff": "@@ -1,25 +1,30 @@\n @Override\n public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     ValueInstantiator instantiator \u003d null;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n     Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n         instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n     }\n     if (instantiator \u003d\u003d null) {\n         instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n         if (instantiator \u003d\u003d null) {\n             instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n         }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n+    if (instantiator.getIncompleteParameter() !\u003d null) {\n+        final AnnotatedParameter nonAnnotatedParam \u003d instantiator.getIncompleteParameter();\n+        final AnnotatedWithParams ctor \u003d nonAnnotatedParam.getOwner();\n+        throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+    }\n     return instantiator;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Further refactoring for DeserializerFactories\n",
      "commitDate": "1/26/12, 1:22 PM",
      "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Further refactoring for DeserializerFactories\n",
          "commitDate": "1/26/12, 1:22 PM",
          "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 1:07 PM",
          "commitNameOld": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    ValueInstantiator instantiator \u003d null;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n    }\n    if (instantiator \u003d\u003d null) {\n        instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    return instantiator;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 351,
          "functionName": "findValueInstantiator",
          "functionAnnotation": "@Override",
          "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
          "diff": "@@ -1,25 +1,25 @@\n @Override\n public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     ValueInstantiator instantiator \u003d null;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n     Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n-        instantiator \u003d valueInstantiatorInstance(config, ac, instDef);\n+        instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n     }\n     if (instantiator \u003d\u003d null) {\n-        instantiator \u003d findStdValueInstantiator(config, beanDesc);\n+        instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n         if (instantiator \u003d\u003d null) {\n-            instantiator \u003d constructDefaultValueInstantiator(ctxt, beanDesc);\n+            instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n         }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n     return instantiator;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
            "oldMethodName": "findValueInstantiator",
            "newMethodName": "findValueInstantiator"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Further refactoring for DeserializerFactories\n",
          "commitDate": "1/26/12, 1:22 PM",
          "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 1:07 PM",
          "commitNameOld": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    ValueInstantiator instantiator \u003d null;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n    }\n    if (instantiator \u003d\u003d null) {\n        instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    return instantiator;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 351,
          "functionName": "findValueInstantiator",
          "functionAnnotation": "@Override",
          "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
          "diff": "@@ -1,25 +1,25 @@\n @Override\n public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     ValueInstantiator instantiator \u003d null;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n     Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n-        instantiator \u003d valueInstantiatorInstance(config, ac, instDef);\n+        instantiator \u003d _valueInstantiatorInstance(config, ac, instDef);\n     }\n     if (instantiator \u003d\u003d null) {\n-        instantiator \u003d findStdValueInstantiator(config, beanDesc);\n+        instantiator \u003d _findStdValueInstantiator(config, beanDesc);\n         if (instantiator \u003d\u003d null) {\n-            instantiator \u003d constructDefaultValueInstantiator(ctxt, beanDesc);\n+            instantiator \u003d _constructDefaultValueInstantiator(ctxt, beanDesc);\n         }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n     return instantiator;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    ValueInstantiator instantiator \u003d null;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        instantiator \u003d valueInstantiatorInstance(config, ac, instDef);\n    }\n    if (instantiator \u003d\u003d null) {\n        instantiator \u003d findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d constructDefaultValueInstantiator(ctxt, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    return instantiator;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 425,
          "functionName": "findValueInstantiator",
          "functionAnnotation": "@Override",
          "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
          "diff": "@@ -1,35 +1,25 @@\n @Override\n-public ValueInstantiator findValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n-    ValueInstantiator instantiator;\n+public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n+    ValueInstantiator instantiator \u003d null;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n-    Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n+    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n-        if (instDef instanceof ValueInstantiator) {\n-            instantiator \u003d (ValueInstantiator) instDef;\n-        } else {\n-            if (!(instDef instanceof Class\u003c?\u003e)) {\n-                throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n-            }\n-            Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n-            if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n-                throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n-            }\n-            @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n-            instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n-        }\n-    } else {\n+        instantiator \u003d valueInstantiatorInstance(config, ac, instDef);\n+    }\n+    if (instantiator \u003d\u003d null) {\n         instantiator \u003d findStdValueInstantiator(config, beanDesc);\n         if (instantiator \u003d\u003d null) {\n-            instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n+            instantiator \u003d constructDefaultValueInstantiator(ctxt, beanDesc);\n         }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n     return instantiator;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, beanDesc-BeanDescription]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    ValueInstantiator instantiator \u003d null;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        instantiator \u003d valueInstantiatorInstance(config, ac, instDef);\n    }\n    if (instantiator \u003d\u003d null) {\n        instantiator \u003d findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d constructDefaultValueInstantiator(ctxt, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    return instantiator;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 425,
          "functionName": "findValueInstantiator",
          "functionAnnotation": "@Override",
          "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
          "diff": "@@ -1,35 +1,25 @@\n @Override\n-public ValueInstantiator findValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n-    ValueInstantiator instantiator;\n+public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n+    ValueInstantiator instantiator \u003d null;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n-    Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n+    Object instDef \u003d ctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n-        if (instDef instanceof ValueInstantiator) {\n-            instantiator \u003d (ValueInstantiator) instDef;\n-        } else {\n-            if (!(instDef instanceof Class\u003c?\u003e)) {\n-                throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n-            }\n-            Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n-            if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n-                throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n-            }\n-            @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n-            instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n-        }\n-    } else {\n+        instantiator \u003d valueInstantiatorInstance(config, ac, instDef);\n+    }\n+    if (instantiator \u003d\u003d null) {\n         instantiator \u003d findStdValueInstantiator(config, beanDesc);\n         if (instantiator \u003d\u003d null) {\n-            instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n+            instantiator \u003d constructDefaultValueInstantiator(ctxt, beanDesc);\n         }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n     return instantiator;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator instantiator;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        if (instDef instanceof ValueInstantiator) {\n            instantiator \u003d (ValueInstantiator) instDef;\n        } else {\n            if (!(instDef instanceof Class\u003c?\u003e)) {\n                throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n            }\n            Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n            if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n                throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n            }\n            @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n            instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n        }\n    } else {\n        instantiator \u003d findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    return instantiator;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 423,
      "functionName": "findValueInstantiator",
      "functionAnnotation": "@Override",
      "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
      "diff": "@@ -1,35 +1,35 @@\n @Override\n-public ValueInstantiator findValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n+public ValueInstantiator findValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n     ValueInstantiator instantiator;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n     Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n         if (instDef instanceof ValueInstantiator) {\n             instantiator \u003d (ValueInstantiator) instDef;\n         } else {\n             if (!(instDef instanceof Class\u003c?\u003e)) {\n                 throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n             }\n             Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n             if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n                 throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n             }\n             @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n             instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n         }\n     } else {\n         instantiator \u003d findStdValueInstantiator(config, beanDesc);\n         if (instantiator \u003d\u003d null) {\n             instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n         }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n     return instantiator;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, beanDesc-BasicBeanDescription]",
        "newValue": "[config-DeserializationConfig, beanDesc-BeanDescription]"
      }
    },
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a": {
      "type": "Ybodychange",
      "commitMessage": "Add back support for deserializing JsonLocation (using ValueInstiator, for added style points)\n",
      "commitDate": "12/28/11, 12:52 AM",
      "commitName": "6d3fc10bcaed6834823eed08d1b8990b71590e5a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/27/11, 10:34 PM",
      "commitNameOld": "289b58d10604feb7b709b91da6d314e0d6ac3b5d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator instantiator;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        if (instDef instanceof ValueInstantiator) {\n            instantiator \u003d (ValueInstantiator) instDef;\n        } else {\n            if (!(instDef instanceof Class\u003c?\u003e)) {\n                throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n            }\n            Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n            if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n                throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n            }\n            @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n            instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n        }\n    } else {\n        instantiator \u003d findStdValueInstantiator(config, beanDesc);\n        if (instantiator \u003d\u003d null) {\n            instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n        }\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    return instantiator;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 454,
      "functionName": "findValueInstantiator",
      "functionAnnotation": "@Override",
      "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n",
      "diff": "@@ -1,32 +1,35 @@\n @Override\n public ValueInstantiator findValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n     ValueInstantiator instantiator;\n     AnnotatedClass ac \u003d beanDesc.getClassInfo();\n     Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n     if (instDef !\u003d null) {\n         if (instDef instanceof ValueInstantiator) {\n             instantiator \u003d (ValueInstantiator) instDef;\n         } else {\n             if (!(instDef instanceof Class\u003c?\u003e)) {\n                 throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n             }\n             Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n             if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n                 throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n             }\n             @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n             instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n         }\n     } else {\n-        instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n+        instantiator \u003d findStdValueInstantiator(config, beanDesc);\n+        if (instantiator \u003d\u003d null) {\n+            instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n+        }\n     }\n     if (_factoryConfig.hasValueInstantiators()) {\n         for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n             instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n             if (instantiator \u003d\u003d null) {\n                 throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n             }\n         }\n     }\n     return instantiator;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,32 @@\n+@Override\n+public ValueInstantiator findValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n+    ValueInstantiator instantiator;\n+    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n+    Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n+    if (instDef !\u003d null) {\n+        if (instDef instanceof ValueInstantiator) {\n+            instantiator \u003d (ValueInstantiator) instDef;\n+        } else {\n+            if (!(instDef instanceof Class\u003c?\u003e)) {\n+                throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n+            }\n+            Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n+            if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n+                throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n+            }\n+            @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n+            instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n+        }\n+    } else {\n+        instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n+    }\n+    if (_factoryConfig.hasValueInstantiators()) {\n+        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n+            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n+            if (instantiator \u003d\u003d null) {\n+                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n+            }\n+        }\n+    }\n+    return instantiator;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic ValueInstantiator findValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator instantiator;\n    AnnotatedClass ac \u003d beanDesc.getClassInfo();\n    Object instDef \u003d config.getAnnotationIntrospector().findValueInstantiator(ac);\n    if (instDef !\u003d null) {\n        if (instDef instanceof ValueInstantiator) {\n            instantiator \u003d (ValueInstantiator) instDef;\n        } else {\n            if (!(instDef instanceof Class\u003c?\u003e)) {\n                throw new IllegalStateException(\"Invalid value instantiator returned for type \" + beanDesc + \": neither a Class nor ValueInstantiator\");\n            }\n            Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) instDef;\n            if (!ValueInstantiator.class.isAssignableFrom(cls)) {\n                throw new IllegalStateException(\"Invalid instantiator Class\u003c?\u003e returned for type \" + beanDesc + \": \" + cls.getName() + \" not a ValueInstantiator\");\n            }\n            @SuppressWarnings(\"unchecked\") Class\u003c? extends ValueInstantiator\u003e instClass \u003d (Class\u003c? extends ValueInstantiator\u003e) cls;\n            instantiator \u003d config.valueInstantiatorInstance(ac, (Class\u003c? extends ValueInstantiator\u003e) instClass);\n        }\n    } else {\n        instantiator \u003d constructDefaultValueInstantiator(config, beanDesc);\n    }\n    if (_factoryConfig.hasValueInstantiators()) {\n        for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n            instantiator \u003d insts.findValueInstantiator(config, beanDesc, instantiator);\n            if (instantiator \u003d\u003d null) {\n                throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" + insts.getClass().getName() + \"): returned null ValueInstantiator\");\n            }\n        }\n    }\n    return instantiator;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 476,
      "functionName": "findValueInstantiator",
      "functionAnnotation": "@Override",
      "functionDoc": "Value instantiator is created both based on creator annotations,\nand on optional externally provided instantiators (registered through\nmodule interface).\n"
    }
  }
}