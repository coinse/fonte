{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "resolveType",
  "functionId": "resolveType___ctxt-DeserializationContext__beanDesc-BeanDescription__type-JavaType__member-AnnotatedMember",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
  "functionStartLine": 1744,
  "functionEndLine": 1792,
  "numCommitsSeen": 174,
  "timeTaken": 7593,
  "changeHistory": [
    "a3a8d3c03fa93976ebee094795bb50547cb10663",
    "313875faf97970ce249bbb61ba9a65c9e270c1fc",
    "d0bb3152ceec7c33c700d21454b34700968a526a",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
    "49b712169c432100297164f6b5102f3578bd636c",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "a03e0ebf5825d587230093436b6db53f368185a0",
    "d1e678e660f50c66113da7d03e4ffb52fef45fc0",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "a3a8d3c03fa93976ebee094795bb50547cb10663": "Yformatchange",
    "313875faf97970ce249bbb61ba9a65c9e270c1fc": "Yformatchange",
    "d0bb3152ceec7c33c700d21454b34700968a526a": "Ymultichange(Yparameterchange,Ybodychange)",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": "Ybodychange",
    "49b712169c432100297164f6b5102f3578bd636c": "Ybodychange",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "a03e0ebf5825d587230093436b6db53f368185a0": "Ymultichange(Ybodychange,Ydocchange)",
    "d1e678e660f50c66113da7d03e4ffb52fef45fc0": "Ymultichange(Ybodychange,Yannotationchange)",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a8d3c03fa93976ebee094795bb50547cb10663": {
      "type": "Yformatchange",
      "commitMessage": "Fix issue #292\n",
      "commitDate": "8/26/13, 5:46 PM",
      "commitName": "a3a8d3c03fa93976ebee094795bb50547cb10663",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/4/13, 5:17 PM",
      "commitNameOld": "767ecb29a5a79f799113d13eb137389ff5a4c2c5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 22.02,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1532,
      "functionName": "resolveType",
      "functionAnnotation": "",
      "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "313875faf97970ce249bbb61ba9a65c9e270c1fc": {
      "type": "Yformatchange",
      "commitMessage": "Deferring construction of key deserializers, trying to reduce startup overhead\n",
      "commitDate": "4/15/13, 5:20 PM",
      "commitName": "313875faf97970ce249bbb61ba9a65c9e270c1fc",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/7/13, 4:11 PM",
      "commitNameOld": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1491,
      "functionName": "resolveType",
      "functionAnnotation": "",
      "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d0bb3152ceec7c33c700d21454b34700968a526a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Removing BeanProperty from TypeDeserializer handling as well\n",
      "commitDate": "1/31/12, 1:04 PM",
      "commitName": "d0bb3152ceec7c33c700d21454b34700968a526a",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Removing BeanProperty from TypeDeserializer handling as well\n",
          "commitDate": "1/31/12, 1:04 PM",
          "commitName": "d0bb3152ceec7c33c700d21454b34700968a526a",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/31/12, 12:45 PM",
          "commitNameOld": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1363,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
          "diff": "@@ -1,35 +1,35 @@\n-protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n+protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Object kdDef \u003d intr.findKeyDeserializer(member);\n-            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n+            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, kdDef);\n             if (kd !\u003d null) {\n                 type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                 keyType \u003d type.getKeyType();\n             }\n         }\n         Object cdDef \u003d intr.findContentDeserializer(member);\n         JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n         if (cd !\u003d null) {\n             type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, type-JavaType, member-AnnotatedMember, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, type-JavaType, member-AnnotatedMember]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Removing BeanProperty from TypeDeserializer handling as well\n",
          "commitDate": "1/31/12, 1:04 PM",
          "commitName": "d0bb3152ceec7c33c700d21454b34700968a526a",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/31/12, 12:45 PM",
          "commitNameOld": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1363,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
          "diff": "@@ -1,35 +1,35 @@\n-protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n+protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Object kdDef \u003d intr.findKeyDeserializer(member);\n-            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n+            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, kdDef);\n             if (kd !\u003d null) {\n                 type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                 keyType \u003d type.getKeyType();\n             }\n         }\n         Object cdDef \u003d intr.findContentDeserializer(member);\n         JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n         if (cd !\u003d null) {\n             type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": {
      "type": "Ybodychange",
      "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
      "commitDate": "1/31/12, 12:45 PM",
      "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/30/12, 10:13 PM",
      "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1363,
      "functionName": "resolveType",
      "functionAnnotation": "",
      "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
      "diff": "@@ -1,35 +1,35 @@\n protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Object kdDef \u003d intr.findKeyDeserializer(member);\n             KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n             if (kd !\u003d null) {\n                 type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                 keyType \u003d type.getKeyType();\n             }\n         }\n         Object cdDef \u003d intr.findContentDeserializer(member);\n-        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, property, cdDef);\n+        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, cdDef);\n         if (cd !\u003d null) {\n             type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "49b712169c432100297164f6b5102f3578bd636c": {
      "type": "Ybodychange",
      "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
      "commitDate": "1/30/12, 10:13 PM",
      "commitName": "49b712169c432100297164f6b5102f3578bd636c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/30/12, 7:15 PM",
      "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, property, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1363,
      "functionName": "resolveType",
      "functionAnnotation": "",
      "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
      "diff": "@@ -1,35 +1,35 @@\n protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Object kdDef \u003d intr.findKeyDeserializer(member);\n             KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n             if (kd !\u003d null) {\n                 type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                 keyType \u003d type.getKeyType();\n             }\n         }\n         Object cdDef \u003d intr.findContentDeserializer(member);\n         JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, property, cdDef);\n         if (cd !\u003d null) {\n             type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n-            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n+            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n-        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n+        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member);\n     } else {\n-        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type, null);\n+        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, property, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 749,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
          "diff": "@@ -1,55 +1,35 @@\n-protected JavaType resolveType(DeserializationConfig config, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n+protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n-        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Object kdDef \u003d intr.findKeyDeserializer(member);\n-            if (kdDef !\u003d null) {\n-                KeyDeserializer kd \u003d null;\n-                if (kdDef instanceof KeyDeserializer) {\n-                    kd \u003d (KeyDeserializer) kdDef;\n-                } else {\n-                    Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n-                    if (kdClass !\u003d null) {\n-                        kd \u003d config.keyDeserializerInstance(member, kdClass);\n-                    }\n-                }\n-                if (kd !\u003d null) {\n-                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n-                    keyType \u003d type.getKeyType();\n-                }\n+            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n+            if (kd !\u003d null) {\n+                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n+                keyType \u003d type.getKeyType();\n             }\n         }\n         Object cdDef \u003d intr.findContentDeserializer(member);\n-        if (cdDef !\u003d null) {\n-            JsonDeserializer\u003c?\u003e cd \u003d null;\n-            if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n-                cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n-            } else {\n-                Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n-                if (cdClass !\u003d null) {\n-                    cd \u003d config.deserializerInstance(member, cdClass);\n-                }\n-            }\n-            if (cd !\u003d null) {\n-                type \u003d type.withContentValueHandler(cd);\n-            }\n+        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, property, cdDef);\n+        if (cd !\u003d null) {\n+            type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n-            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n+            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n-        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n+        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n     } else {\n-        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n+        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type, null);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, beanDesc-BeanDescription, type-JavaType, member-AnnotatedMember, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, type-JavaType, member-AnnotatedMember, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n            if (kd !\u003d null) {\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, property, cdDef);\n        if (cd !\u003d null) {\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 749,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
          "diff": "@@ -1,55 +1,35 @@\n-protected JavaType resolveType(DeserializationConfig config, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n+protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n-        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+        AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Object kdDef \u003d intr.findKeyDeserializer(member);\n-            if (kdDef !\u003d null) {\n-                KeyDeserializer kd \u003d null;\n-                if (kdDef instanceof KeyDeserializer) {\n-                    kd \u003d (KeyDeserializer) kdDef;\n-                } else {\n-                    Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n-                    if (kdClass !\u003d null) {\n-                        kd \u003d config.keyDeserializerInstance(member, kdClass);\n-                    }\n-                }\n-                if (kd !\u003d null) {\n-                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n-                    keyType \u003d type.getKeyType();\n-                }\n+            KeyDeserializer kd \u003d ctxt.keyDeserializerInstance(member, property, kdDef);\n+            if (kd !\u003d null) {\n+                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n+                keyType \u003d type.getKeyType();\n             }\n         }\n         Object cdDef \u003d intr.findContentDeserializer(member);\n-        if (cdDef !\u003d null) {\n-            JsonDeserializer\u003c?\u003e cd \u003d null;\n-            if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n-                cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n-            } else {\n-                Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n-                if (cdClass !\u003d null) {\n-                    cd \u003d config.deserializerInstance(member, cdClass);\n-                }\n-            }\n-            if (cd !\u003d null) {\n-                type \u003d type.withContentValueHandler(cd);\n-            }\n+        JsonDeserializer\u003c?\u003e cd \u003d ctxt.deserializerInstance(member, property, cdDef);\n+        if (cd !\u003d null) {\n+            type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n-            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n+            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n-        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n+        valueTypeDeser \u003d findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member, property);\n     } else {\n-        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n+        valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), type, null);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/21/12, 11:03 AM",
      "commitNameOld": "37914e65ce1dca8869d5e2baa53043cf0d725ce0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType resolveType(DeserializationConfig config, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            if (kdDef !\u003d null) {\n                KeyDeserializer kd \u003d null;\n                if (kdDef instanceof KeyDeserializer) {\n                    kd \u003d (KeyDeserializer) kdDef;\n                } else {\n                    Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n                    if (kdClass !\u003d null) {\n                        kd \u003d config.keyDeserializerInstance(member, kdClass);\n                    }\n                }\n                if (kd !\u003d null) {\n                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                    keyType \u003d type.getKeyType();\n                }\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        if (cdDef !\u003d null) {\n            JsonDeserializer\u003c?\u003e cd \u003d null;\n            if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n                cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n            } else {\n                Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n                if (cdClass !\u003d null) {\n                    cd \u003d config.deserializerInstance(member, cdClass);\n                }\n            }\n            if (cd !\u003d null) {\n                type \u003d type.withContentValueHandler(cd);\n            }\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 947,
      "functionName": "resolveType",
      "functionAnnotation": "",
      "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
      "diff": "@@ -1,55 +1,55 @@\n-protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n+protected JavaType resolveType(DeserializationConfig config, BeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Object kdDef \u003d intr.findKeyDeserializer(member);\n             if (kdDef !\u003d null) {\n                 KeyDeserializer kd \u003d null;\n                 if (kdDef instanceof KeyDeserializer) {\n                     kd \u003d (KeyDeserializer) kdDef;\n                 } else {\n                     Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n                     if (kdClass !\u003d null) {\n                         kd \u003d config.keyDeserializerInstance(member, kdClass);\n                     }\n                 }\n                 if (kd !\u003d null) {\n                     type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                     keyType \u003d type.getKeyType();\n                 }\n             }\n         }\n         Object cdDef \u003d intr.findContentDeserializer(member);\n         if (cdDef !\u003d null) {\n             JsonDeserializer\u003c?\u003e cd \u003d null;\n             if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n                 cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n             } else {\n                 Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n                 if (cdClass !\u003d null) {\n                     cd \u003d config.deserializerInstance(member, cdClass);\n                 }\n             }\n             if (cd !\u003d null) {\n                 type \u003d type.withContentValueHandler(cd);\n             }\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, beanDesc-BasicBeanDescription, type-JavaType, member-AnnotatedMember, property-BeanProperty]",
        "newValue": "[config-DeserializationConfig, beanDesc-BeanDescription, type-JavaType, member-AnnotatedMember, property-BeanProperty]"
      }
    },
    "a03e0ebf5825d587230093436b6db53f368185a0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Implemented [JACKSON-732] for 2.0\n",
      "commitDate": "1/14/12, 2:01 PM",
      "commitName": "a03e0ebf5825d587230093436b6db53f368185a0",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented [JACKSON-732] for 2.0\n",
          "commitDate": "1/14/12, 2:01 PM",
          "commitName": "a03e0ebf5825d587230093436b6db53f368185a0",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/11/12, 10:14 PM",
          "commitNameOld": "703bf4a104193e8098f904fe33531c58c6e7f359",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.66,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            if (kdDef !\u003d null) {\n                KeyDeserializer kd \u003d null;\n                if (kdDef instanceof KeyDeserializer) {\n                    kd \u003d (KeyDeserializer) kdDef;\n                } else {\n                    Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n                    if (kdClass !\u003d null) {\n                        kd \u003d config.keyDeserializerInstance(member, kdClass);\n                    }\n                }\n                if (kd !\u003d null) {\n                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                    keyType \u003d type.getKeyType();\n                }\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        if (cdDef !\u003d null) {\n            JsonDeserializer\u003c?\u003e cd \u003d null;\n            if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n                cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n            } else {\n                Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n                if (cdClass !\u003d null) {\n                    cd \u003d config.deserializerInstance(member, cdClass);\n                }\n            }\n            if (cd !\u003d null) {\n                type \u003d type.withContentValueHandler(cd);\n            }\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 812,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
          "diff": "@@ -1,35 +1,55 @@\n protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n-            Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n-            if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n-                KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n-                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n-                keyType \u003d type.getKeyType();\n+            Object kdDef \u003d intr.findKeyDeserializer(member);\n+            if (kdDef !\u003d null) {\n+                KeyDeserializer kd \u003d null;\n+                if (kdDef instanceof KeyDeserializer) {\n+                    kd \u003d (KeyDeserializer) kdDef;\n+                } else {\n+                    Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n+                    if (kdClass !\u003d null) {\n+                        kd \u003d config.keyDeserializerInstance(member, kdClass);\n+                    }\n+                }\n+                if (kd !\u003d null) {\n+                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n+                    keyType \u003d type.getKeyType();\n+                }\n             }\n         }\n-        Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n-        if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n-            JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n-            type \u003d type.withContentValueHandler(cd);\n+        Object cdDef \u003d intr.findContentDeserializer(member);\n+        if (cdDef !\u003d null) {\n+            JsonDeserializer\u003c?\u003e cd \u003d null;\n+            if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n+                cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n+            } else {\n+                Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n+                if (cdClass !\u003d null) {\n+                    cd \u003d config.deserializerInstance(member, cdClass);\n+                }\n+            }\n+            if (cd !\u003d null) {\n+                type \u003d type.withContentValueHandler(cd);\n+            }\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Implemented [JACKSON-732] for 2.0\n",
          "commitDate": "1/14/12, 2:01 PM",
          "commitName": "a03e0ebf5825d587230093436b6db53f368185a0",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/11/12, 10:14 PM",
          "commitNameOld": "703bf4a104193e8098f904fe33531c58c6e7f359",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.66,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Object kdDef \u003d intr.findKeyDeserializer(member);\n            if (kdDef !\u003d null) {\n                KeyDeserializer kd \u003d null;\n                if (kdDef instanceof KeyDeserializer) {\n                    kd \u003d (KeyDeserializer) kdDef;\n                } else {\n                    Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n                    if (kdClass !\u003d null) {\n                        kd \u003d config.keyDeserializerInstance(member, kdClass);\n                    }\n                }\n                if (kd !\u003d null) {\n                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                    keyType \u003d type.getKeyType();\n                }\n            }\n        }\n        Object cdDef \u003d intr.findContentDeserializer(member);\n        if (cdDef !\u003d null) {\n            JsonDeserializer\u003c?\u003e cd \u003d null;\n            if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n                cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n            } else {\n                Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n                if (cdClass !\u003d null) {\n                    cd \u003d config.deserializerInstance(member, cdClass);\n                }\n            }\n            if (cd !\u003d null) {\n                type \u003d type.withContentValueHandler(cd);\n            }\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 812,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n",
          "diff": "@@ -1,35 +1,55 @@\n protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n-            Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n-            if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n-                KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n-                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n-                keyType \u003d type.getKeyType();\n+            Object kdDef \u003d intr.findKeyDeserializer(member);\n+            if (kdDef !\u003d null) {\n+                KeyDeserializer kd \u003d null;\n+                if (kdDef instanceof KeyDeserializer) {\n+                    kd \u003d (KeyDeserializer) kdDef;\n+                } else {\n+                    Class\u003c?\u003e kdClass \u003d _verifyAsClass(kdDef, \"findKeyDeserializer\", KeyDeserializer.None.class);\n+                    if (kdClass !\u003d null) {\n+                        kd \u003d config.keyDeserializerInstance(member, kdClass);\n+                    }\n+                }\n+                if (kd !\u003d null) {\n+                    type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n+                    keyType \u003d type.getKeyType();\n+                }\n             }\n         }\n-        Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n-        if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n-            JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n-            type \u003d type.withContentValueHandler(cd);\n+        Object cdDef \u003d intr.findContentDeserializer(member);\n+        if (cdDef !\u003d null) {\n+            JsonDeserializer\u003c?\u003e cd \u003d null;\n+            if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n+                cd \u003d (JsonDeserializer\u003c?\u003e) cdDef;\n+            } else {\n+                Class\u003c?\u003e cdClass \u003d _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);\n+                if (cdClass !\u003d null) {\n+                    cd \u003d config.deserializerInstance(member, cdClass);\n+                }\n+            }\n+            if (cd !\u003d null) {\n+                type \u003d type.withContentValueHandler(cd);\n+            }\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n\u003cp\u003e\nStarting with version 1.3, this method will also resolve instances\nof key and content deserializers if defined by annotations.\n",
            "newValue": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n"
          }
        }
      ]
    },
    "d1e678e660f50c66113da7d03e4ffb52fef45fc0": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Last pieces of the first round of refactoring: again compiles, may work\n",
      "commitDate": "12/23/11, 5:38 PM",
      "commitName": "d1e678e660f50c66113da7d03e4ffb52fef45fc0",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Last pieces of the first round of refactoring: again compiles, may work\n",
          "commitDate": "12/23/11, 5:38 PM",
          "commitName": "d1e678e660f50c66113da7d03e4ffb52fef45fc0",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/23/11, 8:38 AM",
          "commitNameOld": "a342c0eef8c4abc3eba5568c52af73e59e1b6c17",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n            if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n                KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n        if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n            JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 808,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n\u003cp\u003e\nStarting with version 1.3, this method will also resolve instances\nof key and content deserializers if defined by annotations.\n",
          "diff": "@@ -1,35 +1,35 @@\n-@SuppressWarnings(\"deprecation\")\n protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n             if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n                 KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n-                keyType.setValueHandler(kd);\n+                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n+                keyType \u003d type.getKeyType();\n             }\n         }\n         Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n         if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n             JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n-            type.getContentType().setValueHandler(cd);\n+            type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Last pieces of the first round of refactoring: again compiles, may work\n",
          "commitDate": "12/23/11, 5:38 PM",
          "commitName": "d1e678e660f50c66113da7d03e4ffb52fef45fc0",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/23/11, 8:38 AM",
          "commitNameOld": "a342c0eef8c4abc3eba5568c52af73e59e1b6c17",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n            if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n                KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n                keyType \u003d type.getKeyType();\n            }\n        }\n        Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n        if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n            JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n            type \u003d type.withContentValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 808,
          "functionName": "resolveType",
          "functionAnnotation": "",
          "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n\u003cp\u003e\nStarting with version 1.3, this method will also resolve instances\nof key and content deserializers if defined by annotations.\n",
          "diff": "@@ -1,35 +1,35 @@\n-@SuppressWarnings(\"deprecation\")\n protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n     if (type.isContainerType()) {\n         AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n         JavaType keyType \u003d type.getKeyType();\n         if (keyType !\u003d null) {\n             Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n             if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n                 KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n-                keyType.setValueHandler(kd);\n+                type \u003d ((MapLikeType) type).withKeyValueHandler(kd);\n+                keyType \u003d type.getKeyType();\n             }\n         }\n         Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n         if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n             JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n-            type.getContentType().setValueHandler(cd);\n+            type \u003d type.withContentValueHandler(cd);\n         }\n         if (member instanceof AnnotatedMember) {\n             TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n             if (contentTypeDeser !\u003d null) {\n                 type \u003d type.withContentTypeHandler(contentTypeDeser);\n             }\n         }\n     }\n     TypeDeserializer valueTypeDeser;\n     if (member instanceof AnnotatedMember) {\n         valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n     } else {\n         valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n     }\n     if (valueTypeDeser !\u003d null) {\n         type \u003d type.withTypeHandler(valueTypeDeser);\n     }\n     return type;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"deprecation\")",
            "newValue": ""
          }
        }
      ]
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,35 @@\n+@SuppressWarnings(\"deprecation\")\n+protected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n+    if (type.isContainerType()) {\n+        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+        JavaType keyType \u003d type.getKeyType();\n+        if (keyType !\u003d null) {\n+            Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n+            if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n+                KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n+                keyType.setValueHandler(kd);\n+            }\n+        }\n+        Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n+        if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n+            JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n+            type.getContentType().setValueHandler(cd);\n+        }\n+        if (member instanceof AnnotatedMember) {\n+            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n+            if (contentTypeDeser !\u003d null) {\n+                type \u003d type.withContentTypeHandler(contentTypeDeser);\n+            }\n+        }\n+    }\n+    TypeDeserializer valueTypeDeser;\n+    if (member instanceof AnnotatedMember) {\n+        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n+    } else {\n+        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n+    }\n+    if (valueTypeDeser !\u003d null) {\n+        type \u003d type.withTypeHandler(valueTypeDeser);\n+    }\n+    return type;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"deprecation\")\nprotected JavaType resolveType(DeserializationConfig config, BasicBeanDescription beanDesc, JavaType type, AnnotatedMember member, BeanProperty property) throws JsonMappingException {\n    if (type.isContainerType()) {\n        AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n        JavaType keyType \u003d type.getKeyType();\n        if (keyType !\u003d null) {\n            Class\u003c? extends KeyDeserializer\u003e kdClass \u003d intr.findKeyDeserializer(member);\n            if (kdClass !\u003d null \u0026\u0026 kdClass !\u003d KeyDeserializer.None.class) {\n                KeyDeserializer kd \u003d config.keyDeserializerInstance(member, kdClass);\n                keyType.setValueHandler(kd);\n            }\n        }\n        Class\u003c? extends JsonDeserializer\u003c?\u003e\u003e cdClass \u003d intr.findContentDeserializer(member);\n        if (cdClass !\u003d null \u0026\u0026 cdClass !\u003d JsonDeserializer.None.class) {\n            JsonDeserializer\u003cObject\u003e cd \u003d config.deserializerInstance(member, cdClass);\n            type.getContentType().setValueHandler(cd);\n        }\n        if (member instanceof AnnotatedMember) {\n            TypeDeserializer contentTypeDeser \u003d findPropertyContentTypeDeserializer(config, type, (AnnotatedMember) member, property);\n            if (contentTypeDeser !\u003d null) {\n                type \u003d type.withContentTypeHandler(contentTypeDeser);\n            }\n        }\n    }\n    TypeDeserializer valueTypeDeser;\n    if (member instanceof AnnotatedMember) {\n        valueTypeDeser \u003d findPropertyTypeDeserializer(config, type, (AnnotatedMember) member, property);\n    } else {\n        valueTypeDeser \u003d findTypeDeserializer(config, type, null);\n    }\n    if (valueTypeDeser !\u003d null) {\n        type \u003d type.withTypeHandler(valueTypeDeser);\n    }\n    return type;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 818,
      "functionName": "resolveType",
      "functionAnnotation": "@SuppressWarnings(\"deprecation\")",
      "functionDoc": "Helper method used to resolve method return types and field\ntypes. The main trick here is that the containing bean may\nhave type variable binding information (when deserializing\nusing generic type passed as type reference), which is\nneeded in some cases.\n\u003cp\u003e\nStarting with version 1.3, this method will also resolve instances\nof key and content deserializers if defined by annotations.\n"
    }
  }
}