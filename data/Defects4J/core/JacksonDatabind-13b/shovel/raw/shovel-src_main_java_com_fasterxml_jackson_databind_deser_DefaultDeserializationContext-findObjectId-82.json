{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultDeserializationContext.java",
  "functionName": "findObjectId",
  "functionId": "findObjectId___id-Object__gen-ObjectIdGenerator__?____resolverType-ObjectIdResolver",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 82,
  "functionEndLine": 127,
  "numCommitsSeen": 53,
  "timeTaken": 1759,
  "changeHistory": [
    "d3722c639821a247f4fab39caa018fef7ccc5be9",
    "7febe16c0c09a08eafe498c89d6772b245aedd9b",
    "afda9e28a2047254905e0b0fe84c928944ab5225",
    "f4e9657ed14043166737aa0c068ebc53db89390d",
    "a818bf58c4beac076cbc23e197da233ae5b9115d",
    "301ea2d804e95710395cc0c52dcb5ed3afae1888",
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b"
  ],
  "changeHistoryShort": {
    "d3722c639821a247f4fab39caa018fef7ccc5be9": "Ybodychange",
    "7febe16c0c09a08eafe498c89d6772b245aedd9b": "Ybodychange",
    "afda9e28a2047254905e0b0fe84c928944ab5225": "Yformatchange",
    "f4e9657ed14043166737aa0c068ebc53db89390d": "Ybodychange",
    "a818bf58c4beac076cbc23e197da233ae5b9115d": "Ybodychange",
    "301ea2d804e95710395cc0c52dcb5ed3afae1888": "Ymultichange(Yparameterchange,Ybodychange)",
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": "Ymultichange(Yparameterchange,Ybodychange)",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d3722c639821a247f4fab39caa018fef7ccc5be9": {
      "type": "Ybodychange",
      "commitMessage": "Comment out 2.4-only fix for SimpleObjectIdResolver\n",
      "commitDate": "12/23/14, 1:00 PM",
      "commitName": "d3722c639821a247f4fab39caa018fef7ccc5be9",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "12/19/14, 1:18 PM",
      "commitNameOld": "7febe16c0c09a08eafe498c89d6772b245aedd9b",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "functionStartLine": 82,
      "functionName": "findObjectId",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,31 @@\n @Override\n public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n     final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n     if (_objectIds \u003d\u003d null) {\n         _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n     } else {\n         ReadableObjectId entry \u003d _objectIds.get(key);\n         if (entry !\u003d null) {\n             return entry;\n         }\n     }\n     ObjectIdResolver resolver \u003d null;\n     if (_objectIdResolvers \u003d\u003d null) {\n         _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n     } else {\n         for (ObjectIdResolver res : _objectIdResolvers) {\n             if (res.canUseFor(resolverType)) {\n                 resolver \u003d res;\n                 break;\n             }\n         }\n     }\n     if (resolver \u003d\u003d null) {\n         resolver \u003d resolverType.newForDeserialization(this);\n-        if (resolverType.getClass() \u003d\u003d SimpleObjectIdResolver.class) {\n-            resolver \u003d new SimpleObjectIdResolver();\n-        }\n         _objectIdResolvers.add(resolver);\n     }\n     ReadableObjectId entry \u003d new ReadableObjectId(key);\n     entry.setResolver(resolver);\n     _objectIds.put(key, entry);\n     return entry;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7febe16c0c09a08eafe498c89d6772b245aedd9b": {
      "type": "Ybodychange",
      "commitMessage": "Add notes wrt #490. Bit wary of fixing this in 2.5, in case old 2.4 annotations jar found its way in classpath...\n",
      "commitDate": "12/19/14, 1:18 PM",
      "commitName": "7febe16c0c09a08eafe498c89d6772b245aedd9b",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "10/28/14, 10:39 PM",
      "commitNameOld": "3f674c2bbfb578f06c3d8f80e7fc3047d55baafe",
      "commitAuthorOld": "",
      "daysBetweenCommits": 51.65,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        if (resolverType.getClass() \u003d\u003d SimpleObjectIdResolver.class) {\n            resolver \u003d new SimpleObjectIdResolver();\n        }\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "functionStartLine": 82,
      "functionName": "findObjectId",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n @Override\n public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n     final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n     if (_objectIds \u003d\u003d null) {\n         _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n     } else {\n         ReadableObjectId entry \u003d _objectIds.get(key);\n         if (entry !\u003d null) {\n             return entry;\n         }\n     }\n     ObjectIdResolver resolver \u003d null;\n     if (_objectIdResolvers \u003d\u003d null) {\n         _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n     } else {\n         for (ObjectIdResolver res : _objectIdResolvers) {\n             if (res.canUseFor(resolverType)) {\n                 resolver \u003d res;\n                 break;\n             }\n         }\n     }\n     if (resolver \u003d\u003d null) {\n         resolver \u003d resolverType.newForDeserialization(this);\n-        if (resolverType instanceof SimpleObjectIdResolver) {\n+        if (resolverType.getClass() \u003d\u003d SimpleObjectIdResolver.class) {\n             resolver \u003d new SimpleObjectIdResolver();\n         }\n         _objectIdResolvers.add(resolver);\n     }\n     ReadableObjectId entry \u003d new ReadableObjectId(key);\n     entry.setResolver(resolver);\n     _objectIds.put(key, entry);\n     return entry;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "afda9e28a2047254905e0b0fe84c928944ab5225": {
      "type": "Yformatchange",
      "commitMessage": "minor trimming, trying to diagnose #538\n",
      "commitDate": "10/16/14, 9:20 PM",
      "commitName": "afda9e28a2047254905e0b0fe84c928944ab5225",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "6/18/14, 3:26 PM",
      "commitNameOld": "f4e9657ed14043166737aa0c068ebc53db89390d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 120.25,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        if (resolverType instanceof SimpleObjectIdResolver) {\n            resolver \u003d new SimpleObjectIdResolver();\n        }\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "functionStartLine": 66,
      "functionName": "findObjectId",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "f4e9657ed14043166737aa0c068ebc53db89390d": {
      "type": "Ybodychange",
      "commitMessage": "Prepare for 2.4.1.1, to only include #491\n",
      "commitDate": "6/18/14, 3:26 PM",
      "commitName": "f4e9657ed14043166737aa0c068ebc53db89390d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "6/18/14, 5:41 AM",
      "commitNameOld": "a818bf58c4beac076cbc23e197da233ae5b9115d",
      "commitAuthorOld": "Pascal Gélinas",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        if (resolverType instanceof SimpleObjectIdResolver) {\n            resolver \u003d new SimpleObjectIdResolver();\n        }\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "functionStartLine": 66,
      "functionName": "findObjectId",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "a818bf58c4beac076cbc23e197da233ae5b9115d": {
      "type": "Ybodychange",
      "commitMessage": "Temporary fixed issue #490: create a new instance of\nSimpleObjectIdResolver per deserialization.",
      "commitDate": "6/18/14, 5:41 AM",
      "commitName": "a818bf58c4beac076cbc23e197da233ae5b9115d",
      "commitAuthor": "Pascal Gélinas",
      "commitDateOld": "5/19/14, 11:42 PM",
      "commitNameOld": "46c6679d0b88035e0083e27890a421e8a8466242",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 29.25,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        if (resolverType instanceof SimpleObjectIdResolver) {\n            resolver \u003d new SimpleObjectIdResolver();\n        }\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "functionStartLine": 66,
      "functionName": "findObjectId",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,34 @@\n @Override\n public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n     final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n     if (_objectIds \u003d\u003d null) {\n         _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n     } else {\n         ReadableObjectId entry \u003d _objectIds.get(key);\n         if (entry !\u003d null) {\n             return entry;\n         }\n     }\n     ObjectIdResolver resolver \u003d null;\n     if (_objectIdResolvers \u003d\u003d null) {\n         _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n     } else {\n         for (ObjectIdResolver res : _objectIdResolvers) {\n             if (res.canUseFor(resolverType)) {\n                 resolver \u003d res;\n                 break;\n             }\n         }\n     }\n     if (resolver \u003d\u003d null) {\n         resolver \u003d resolverType.newForDeserialization(this);\n+        if (resolverType instanceof SimpleObjectIdResolver) {\n+            resolver \u003d new SimpleObjectIdResolver();\n+        }\n         _objectIdResolvers.add(resolver);\n     }\n     ReadableObjectId entry \u003d new ReadableObjectId(key);\n     entry.setResolver(resolver);\n     _objectIds.put(key, entry);\n     return entry;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "301ea2d804e95710395cc0c52dcb5ed3afae1888": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Minor code cleanup; should produce better error message for #354\n",
      "commitDate": "3/16/14, 10:26 PM",
      "commitName": "301ea2d804e95710395cc0c52dcb5ed3afae1888",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Minor code cleanup; should produce better error message for #354\n",
          "commitDate": "3/16/14, 10:26 PM",
          "commitName": "301ea2d804e95710395cc0c52dcb5ed3afae1888",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/14, 7:59 AM",
          "commitNameOld": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
          "commitAuthorOld": "Pascal Gélinas",
          "daysBetweenCommits": 34.56,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 67,
          "functionName": "findObjectId",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator, ObjectIdResolver resolverType) {\n-    final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n+public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n+    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n     if (_objectIds \u003d\u003d null) {\n         _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n     } else {\n         ReadableObjectId entry \u003d _objectIds.get(key);\n         if (entry !\u003d null) {\n             return entry;\n         }\n     }\n     ObjectIdResolver resolver \u003d null;\n     if (_objectIdResolvers \u003d\u003d null) {\n         _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n     } else {\n         for (ObjectIdResolver res : _objectIdResolvers) {\n             if (res.canUseFor(resolverType)) {\n                 resolver \u003d res;\n                 break;\n             }\n         }\n     }\n     if (resolver \u003d\u003d null) {\n         resolver \u003d resolverType.newForDeserialization(this);\n         _objectIdResolvers.add(resolver);\n     }\n     ReadableObjectId entry \u003d new ReadableObjectId(key);\n     entry.setResolver(resolver);\n     _objectIds.put(key, entry);\n     return entry;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[id-Object, generator-ObjectIdGenerator\u003c?\u003e, resolverType-ObjectIdResolver]",
            "newValue": "[id-Object, gen-ObjectIdGenerator\u003c?\u003e, resolverType-ObjectIdResolver]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Minor code cleanup; should produce better error message for #354\n",
          "commitDate": "3/16/14, 10:26 PM",
          "commitName": "301ea2d804e95710395cc0c52dcb5ed3afae1888",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/14, 7:59 AM",
          "commitNameOld": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
          "commitAuthorOld": "Pascal Gélinas",
          "daysBetweenCommits": 34.56,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 67,
          "functionName": "findObjectId",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator, ObjectIdResolver resolverType) {\n-    final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n+public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e gen, ObjectIdResolver resolverType) {\n+    final ObjectIdGenerator.IdKey key \u003d gen.key(id);\n     if (_objectIds \u003d\u003d null) {\n         _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n     } else {\n         ReadableObjectId entry \u003d _objectIds.get(key);\n         if (entry !\u003d null) {\n             return entry;\n         }\n     }\n     ObjectIdResolver resolver \u003d null;\n     if (_objectIdResolvers \u003d\u003d null) {\n         _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n     } else {\n         for (ObjectIdResolver res : _objectIdResolvers) {\n             if (res.canUseFor(resolverType)) {\n                 resolver \u003d res;\n                 break;\n             }\n         }\n     }\n     if (resolver \u003d\u003d null) {\n         resolver \u003d resolverType.newForDeserialization(this);\n         _objectIdResolvers.add(resolver);\n     }\n     ReadableObjectId entry \u003d new ReadableObjectId(key);\n     entry.setResolver(resolver);\n     _objectIds.put(key, entry);\n     return entry;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Implementation of custom object id resolution.\n",
      "commitDate": "2/10/14, 7:59 AM",
      "commitName": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
      "commitAuthor": "Pascal Gélinas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implementation of custom object id resolution.\n",
          "commitDate": "2/10/14, 7:59 AM",
          "commitName": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
          "commitAuthor": "Pascal Gélinas",
          "commitDateOld": "1/13/14, 10:25 AM",
          "commitNameOld": "d75f2e7976d1ee5e3088ba87440ba25feec304b1",
          "commitAuthorOld": "Pascal Gélinas",
          "daysBetweenCommits": 27.9,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 67,
          "functionName": "findObjectId",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,31 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator) {\n+public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator, ObjectIdResolver resolverType) {\n     final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n     if (_objectIds \u003d\u003d null) {\n         _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n     } else {\n         ReadableObjectId entry \u003d _objectIds.get(key);\n         if (entry !\u003d null) {\n             return entry;\n         }\n     }\n-    ReadableObjectId entry \u003d new ReadableObjectId(id);\n+    ObjectIdResolver resolver \u003d null;\n+    if (_objectIdResolvers \u003d\u003d null) {\n+        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n+    } else {\n+        for (ObjectIdResolver res : _objectIdResolvers) {\n+            if (res.canUseFor(resolverType)) {\n+                resolver \u003d res;\n+                break;\n+            }\n+        }\n+    }\n+    if (resolver \u003d\u003d null) {\n+        resolver \u003d resolverType.newForDeserialization(this);\n+        _objectIdResolvers.add(resolver);\n+    }\n+    ReadableObjectId entry \u003d new ReadableObjectId(key);\n+    entry.setResolver(resolver);\n     _objectIds.put(key, entry);\n     return entry;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[id-Object, generator-ObjectIdGenerator\u003c?\u003e]",
            "newValue": "[id-Object, generator-ObjectIdGenerator\u003c?\u003e, resolverType-ObjectIdResolver]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implementation of custom object id resolution.\n",
          "commitDate": "2/10/14, 7:59 AM",
          "commitName": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
          "commitAuthor": "Pascal Gélinas",
          "commitDateOld": "1/13/14, 10:25 AM",
          "commitNameOld": "d75f2e7976d1ee5e3088ba87440ba25feec304b1",
          "commitAuthorOld": "Pascal Gélinas",
          "daysBetweenCommits": 27.9,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator, ObjectIdResolver resolverType) {\n    final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ObjectIdResolver resolver \u003d null;\n    if (_objectIdResolvers \u003d\u003d null) {\n        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n    } else {\n        for (ObjectIdResolver res : _objectIdResolvers) {\n            if (res.canUseFor(resolverType)) {\n                resolver \u003d res;\n                break;\n            }\n        }\n    }\n    if (resolver \u003d\u003d null) {\n        resolver \u003d resolverType.newForDeserialization(this);\n        _objectIdResolvers.add(resolver);\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(key);\n    entry.setResolver(resolver);\n    _objectIds.put(key, entry);\n    return entry;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
          "functionStartLine": 67,
          "functionName": "findObjectId",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,31 @@\n @Override\n-public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator) {\n+public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator, ObjectIdResolver resolverType) {\n     final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n     if (_objectIds \u003d\u003d null) {\n         _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n     } else {\n         ReadableObjectId entry \u003d _objectIds.get(key);\n         if (entry !\u003d null) {\n             return entry;\n         }\n     }\n-    ReadableObjectId entry \u003d new ReadableObjectId(id);\n+    ObjectIdResolver resolver \u003d null;\n+    if (_objectIdResolvers \u003d\u003d null) {\n+        _objectIdResolvers \u003d new ArrayList\u003cObjectIdResolver\u003e(8);\n+    } else {\n+        for (ObjectIdResolver res : _objectIdResolvers) {\n+            if (res.canUseFor(resolverType)) {\n+                resolver \u003d res;\n+                break;\n+            }\n+        }\n+    }\n+    if (resolver \u003d\u003d null) {\n+        resolver \u003d resolverType.newForDeserialization(this);\n+        _objectIdResolvers.add(resolver);\n+    }\n+    ReadableObjectId entry \u003d new ReadableObjectId(key);\n+    entry.setResolver(resolver);\n     _objectIds.put(key, entry);\n     return entry;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": {
      "type": "Yintroduced",
      "commitMessage": "Yay! First end-to-end version of Object Id handling...\n",
      "commitDate": "2/8/12, 10:07 PM",
      "commitName": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,15 @@\n+@Override\n+public ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator) {\n+    final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n+    if (_objectIds \u003d\u003d null) {\n+        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n+    } else {\n+        ReadableObjectId entry \u003d _objectIds.get(key);\n+        if (entry !\u003d null) {\n+            return entry;\n+        }\n+    }\n+    ReadableObjectId entry \u003d new ReadableObjectId(id);\n+    _objectIds.put(key, entry);\n+    return entry;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic ReadableObjectId findObjectId(Object id, ObjectIdGenerator\u003c?\u003e generator) {\n    final ObjectIdGenerator.IdKey key \u003d generator.key(id);\n    if (_objectIds \u003d\u003d null) {\n        _objectIds \u003d new LinkedHashMap\u003cObjectIdGenerator.IdKey, ReadableObjectId\u003e();\n    } else {\n        ReadableObjectId entry \u003d _objectIds.get(key);\n        if (entry !\u003d null) {\n            return entry;\n        }\n    }\n    ReadableObjectId entry \u003d new ReadableObjectId(id);\n    _objectIds.put(key, entry);\n    return entry;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
      "functionStartLine": 47,
      "functionName": "findObjectId",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}