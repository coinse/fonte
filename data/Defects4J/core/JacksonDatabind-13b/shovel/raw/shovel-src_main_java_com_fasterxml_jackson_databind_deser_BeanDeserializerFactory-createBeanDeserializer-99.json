{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerFactory.java",
  "functionName": "createBeanDeserializer",
  "functionId": "createBeanDeserializer___ctxt-DeserializationContext__type-JavaType__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
  "functionStartLine": 99,
  "functionEndLine": 144,
  "numCommitsSeen": 175,
  "timeTaken": 4532,
  "changeHistory": [
    "afda778afc8016e16d364748eb7d0d4500bc0dca",
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "d6e90d0259da622ddc593215361acdec3950bfe8",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "bf355caa0821e58968df3bf6c12f612639224e47",
    "f0b28a96644b3dc22c997a05975de335dfed0418",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "afda778afc8016e16d364748eb7d0d4500bc0dca": "Ybodychange",
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ybodychange",
    "d6e90d0259da622ddc593215361acdec3950bfe8": "Ymultichange(Yparameterchange,Ybodychange)",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf355caa0821e58968df3bf6c12f612639224e47": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0b28a96644b3dc22c997a05975de335dfed0418": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Ymultichange(Yparameterchange,Ydocchange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "afda778afc8016e16d364748eb7d0d4500bc0dca": {
      "type": "Ybodychange",
      "commitMessage": "More simplification, remove ref to optional handler factory\n",
      "commitDate": "4/15/13, 8:36 PM",
      "commitName": "afda778afc8016e16d364748eb7d0d4500bc0dca",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/7/13, 4:11 PM",
      "commitNameOld": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 8.18,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    @SuppressWarnings(\"unchecked\") JsonDeserializer\u003cObject\u003e deser \u003d (JsonDeserializer\u003cObject\u003e) findStdDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 124,
      "functionName": "createBeanDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
      "diff": "@@ -1,26 +1,26 @@\n @Override\n public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(ctxt, type, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n         }\n     }\n-    JsonDeserializer\u003cObject\u003e deser \u003d findStdDeserializer(ctxt, type, beanDesc);\n+    @SuppressWarnings(\"unchecked\") JsonDeserializer\u003cObject\u003e deser \u003d (JsonDeserializer\u003cObject\u003e) findStdDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad": {
      "type": "Ybodychange",
      "commitMessage": "Implement #199, support for deserializing Iterable\n",
      "commitDate": "4/7/13, 4:11 PM",
      "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/13/13, 3:56 PM",
      "commitNameOld": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 25.01,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 123,
      "functionName": "createBeanDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
      "diff": "@@ -1,26 +1,26 @@\n @Override\n public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isAbstract()) {\n-        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n+        JavaType concreteType \u003d materializeAbstractType(ctxt, type, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n         }\n     }\n-    JsonDeserializer\u003cObject\u003e deser \u003d findStdDeserializer(config, type);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findStdDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ybodychange",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/10/12, 9:44 AM",
      "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.54,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdDeserializer(config, type);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 125,
      "functionName": "createBeanDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
      "diff": "@@ -1,26 +1,26 @@\n @Override\n public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n         }\n     }\n-    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findStdDeserializer(config, type);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6e90d0259da622ddc593215361acdec3950bfe8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
      "commitDate": "1/30/12, 7:15 PM",
      "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
          "commitDate": "1/30/12, 7:15 PM",
          "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/12, 3:55 PM",
          "commitNameOld": "e5d31900983a1e187c1fe5eb737353ddb74909d0",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 117,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,26 +1,26 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n-    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n+    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n-        return buildThrowableDeserializer(ctxt, type, beanDesc, property);\n+        return buildThrowableDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n-            return buildBeanDeserializer(ctxt, concreteType, beanDesc, property);\n+            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n         }\n     }\n-    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n-    return buildBeanDeserializer(ctxt, type, beanDesc, property);\n+    return buildBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
          "commitDate": "1/30/12, 7:15 PM",
          "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/12, 3:55 PM",
          "commitNameOld": "e5d31900983a1e187c1fe5eb737353ddb74909d0",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 117,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,26 +1,26 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n-    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n+    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n-        return buildThrowableDeserializer(ctxt, type, beanDesc, property);\n+        return buildThrowableDeserializer(ctxt, type, beanDesc);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n-            return buildBeanDeserializer(ctxt, concreteType, beanDesc, property);\n+            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n         }\n     }\n-    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n-    return buildBeanDeserializer(ctxt, type, beanDesc, property);\n+    return buildBeanDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(ctxt, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 469,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,25 +1,26 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n-        return buildThrowableDeserializer(config, type, beanDesc, property);\n+        return buildThrowableDeserializer(ctxt, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n-            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n+            return buildBeanDeserializer(ctxt, concreteType, beanDesc, property);\n         }\n     }\n     JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n-    return buildBeanDeserializer(config, type, beanDesc, property);\n+    return buildBeanDeserializer(ctxt, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(ctxt, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 469,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,25 +1,26 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n-        return buildThrowableDeserializer(config, type, beanDesc, property);\n+        return buildThrowableDeserializer(ctxt, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n-            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n+            return buildBeanDeserializer(ctxt, concreteType, beanDesc, property);\n         }\n     }\n     JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n-    return buildBeanDeserializer(config, type, beanDesc, property);\n+    return buildBeanDeserializer(ctxt, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bf355caa0821e58968df3bf6c12f612639224e47": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
      "commitDate": "1/24/12, 2:46 PM",
      "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
          "commitDate": "1/24/12, 2:46 PM",
          "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 1:27 PM",
          "commitNameOld": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 480,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,38 +1,25 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n-    if (type.isAbstract()) {\n-        type \u003d mapAbstractType(config, type);\n-    }\n-    BeanDescription beanDesc \u003d config.introspect(type);\n-    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n-    if (ad !\u003d null) {\n-        return ad;\n-    }\n-    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n-    if (newType.getRawClass() !\u003d type.getRawClass()) {\n-        type \u003d newType;\n-        beanDesc \u003d config.introspect(type);\n-    }\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(config, concreteType, beanDesc, property);\n         }\n     }\n     JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-JavaType, property-BeanProperty]",
            "newValue": "[config-DeserializationConfig, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
          "commitDate": "1/24/12, 2:46 PM",
          "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 1:27 PM",
          "commitNameOld": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 480,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,38 +1,25 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n-    if (type.isAbstract()) {\n-        type \u003d mapAbstractType(config, type);\n-    }\n-    BeanDescription beanDesc \u003d config.introspect(type);\n-    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n-    if (ad !\u003d null) {\n-        return ad;\n-    }\n-    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n-    if (newType.getRawClass() !\u003d type.getRawClass()) {\n-        type \u003d newType;\n-        beanDesc \u003d config.introspect(type);\n-    }\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(config, concreteType, beanDesc, property);\n         }\n     }\n     JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f0b28a96644b3dc22c997a05975de335dfed0418": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "...\n",
      "commitDate": "1/24/12, 1:27 PM",
      "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "...\n",
          "commitDate": "1/24/12, 1:27 PM",
          "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isAbstract()) {\n        type \u003d mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n    if (ad !\u003d null) {\n        return ad;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n    if (newType.getRawClass() !\u003d type.getRawClass()) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(type);\n    }\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 479,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,38 +1,38 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n     if (type.isAbstract()) {\n         type \u003d mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n     if (ad !\u003d null) {\n         return ad;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n     if (newType.getRawClass() !\u003d type.getRawClass()) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(type);\n     }\n-    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n+    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(config, concreteType, beanDesc, property);\n         }\n     }\n-    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, p-DeserializerCache, type-JavaType, property-BeanProperty]",
            "newValue": "[config-DeserializationConfig, type-JavaType, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "...\n",
          "commitDate": "1/24/12, 1:27 PM",
          "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isAbstract()) {\n        type \u003d mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n    if (ad !\u003d null) {\n        return ad;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n    if (newType.getRawClass() !\u003d type.getRawClass()) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(type);\n    }\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 479,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,38 +1,38 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n     if (type.isAbstract()) {\n         type \u003d mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n     if (ad !\u003d null) {\n         return ad;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n     if (newType.getRawClass() !\u003d type.getRawClass()) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(type);\n     }\n-    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n+    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(config, concreteType, beanDesc, property);\n         }\n     }\n-    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n+    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Ymultichange(Yparameterchange,Ydocchange)",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Deser refactoring, renaming\n",
          "commitDate": "1/24/12, 11:23 AM",
          "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:00 AM",
          "commitNameOld": "29be671c04f3a90863874234663227dd4568b326",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isAbstract()) {\n        type \u003d mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n    if (ad !\u003d null) {\n        return ad;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n    if (newType.getRawClass() !\u003d type.getRawClass()) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(type);\n    }\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 479,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,38 +1,38 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n     if (type.isAbstract()) {\n         type \u003d mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n     if (ad !\u003d null) {\n         return ad;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n     if (newType.getRawClass() !\u003d type.getRawClass()) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(type);\n     }\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(config, concreteType, beanDesc, property);\n         }\n     }\n     JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, p-DeserializerProvider, type-JavaType, property-BeanProperty]",
            "newValue": "[config-DeserializationConfig, p-DeserializerCache, type-JavaType, property-BeanProperty]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Deser refactoring, renaming\n",
          "commitDate": "1/24/12, 11:23 AM",
          "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:00 AM",
          "commitNameOld": "29be671c04f3a90863874234663227dd4568b326",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isAbstract()) {\n        type \u003d mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n    if (ad !\u003d null) {\n        return ad;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n    if (newType.getRawClass() !\u003d type.getRawClass()) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(type);\n    }\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 479,
          "functionName": "createBeanDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
          "diff": "@@ -1,38 +1,38 @@\n @Override\n-public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n     if (type.isAbstract()) {\n         type \u003d mapAbstractType(config, type);\n     }\n     BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n     if (ad !\u003d null) {\n         return ad;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n     if (newType.getRawClass() !\u003d type.getRawClass()) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(type);\n     }\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(config, concreteType, beanDesc, property);\n         }\n     }\n     JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method that {@link DeserializerProvider}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
            "newValue": "Method that {@link DeserializerCache}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n"
          }
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isAbstract()) {\n        type \u003d mapAbstractType(config, type);\n    }\n    BeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n    if (ad !\u003d null) {\n        return ad;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n    if (newType.getRawClass() !\u003d type.getRawClass()) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(type);\n    }\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 478,
      "functionName": "createBeanDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method that {@link DeserializerProvider}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n",
      "diff": "@@ -1,38 +1,38 @@\n @Override\n public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n     if (type.isAbstract()) {\n         type \u003d mapAbstractType(config, type);\n     }\n-    BasicBeanDescription beanDesc \u003d config.introspect(type);\n+    BeanDescription beanDesc \u003d config.introspect(type);\n     JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n     if (ad !\u003d null) {\n         return ad;\n     }\n     JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n     if (newType.getRawClass() !\u003d type.getRawClass()) {\n         type \u003d newType;\n         beanDesc \u003d config.introspect(type);\n     }\n     JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (type.isThrowable()) {\n         return buildThrowableDeserializer(config, type, beanDesc, property);\n     }\n     if (type.isAbstract()) {\n         JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n         if (concreteType !\u003d null) {\n             beanDesc \u003d config.introspect(concreteType);\n             return buildBeanDeserializer(config, concreteType, beanDesc, property);\n         }\n     }\n     JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (!isPotentialBeanType(type.getRawClass())) {\n         return null;\n     }\n     return buildBeanDeserializer(config, type, beanDesc, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,38 @@\n+@Override\n+public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n+    if (type.isAbstract()) {\n+        type \u003d mapAbstractType(config, type);\n+    }\n+    BasicBeanDescription beanDesc \u003d config.introspect(type);\n+    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n+    if (ad !\u003d null) {\n+        return ad;\n+    }\n+    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n+    if (newType.getRawClass() !\u003d type.getRawClass()) {\n+        type \u003d newType;\n+        beanDesc \u003d config.introspect(type);\n+    }\n+    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n+    if (custom !\u003d null) {\n+        return custom;\n+    }\n+    if (type.isThrowable()) {\n+        return buildThrowableDeserializer(config, type, beanDesc, property);\n+    }\n+    if (type.isAbstract()) {\n+        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n+        if (concreteType !\u003d null) {\n+            beanDesc \u003d config.introspect(concreteType);\n+            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n+        }\n+    }\n+    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n+    if (deser !\u003d null) {\n+        return deser;\n+    }\n+    if (!isPotentialBeanType(type.getRawClass())) {\n+        return null;\n+    }\n+    return buildBeanDeserializer(config, type, beanDesc, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n    if (type.isAbstract()) {\n        type \u003d mapAbstractType(config, type);\n    }\n    BasicBeanDescription beanDesc \u003d config.introspect(type);\n    JsonDeserializer\u003cObject\u003e ad \u003d findDeserializerFromAnnotation(config, beanDesc.getClassInfo(), property);\n    if (ad !\u003d null) {\n        return ad;\n    }\n    JavaType newType \u003d modifyTypeByAnnotation(config, beanDesc.getClassInfo(), type, null);\n    if (newType.getRawClass() !\u003d type.getRawClass()) {\n        type \u003d newType;\n        beanDesc \u003d config.introspect(type);\n    }\n    JsonDeserializer\u003cObject\u003e custom \u003d _findCustomBeanDeserializer(type, config, p, beanDesc, property);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(config, type, beanDesc, property);\n    }\n    if (type.isAbstract()) {\n        JavaType concreteType \u003d materializeAbstractType(config, beanDesc);\n        if (concreteType !\u003d null) {\n            beanDesc \u003d config.introspect(concreteType);\n            return buildBeanDeserializer(config, concreteType, beanDesc, property);\n        }\n    }\n    JsonDeserializer\u003cObject\u003e deser \u003d findStdBeanDeserializer(config, p, type, property);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    return buildBeanDeserializer(config, type, beanDesc, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 525,
      "functionName": "createBeanDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method that {@link DeserializerProvider}s call to create a new\ndeserializer for types other than Collections, Maps, arrays and\nenums.\n"
    }
  }
}