{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-13b",
  "repositoryPath": "/tmp/JacksonDatabind-13b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeFactory.java",
  "functionName": "_fromClass",
  "functionId": "_fromClass___clz-Class__?____context-TypeBindings",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param context Mapping of formal parameter declarations (for generic\n  types) into actual types\n",
  "functionStartLine": 737,
  "functionEndLine": 793,
  "numCommitsSeen": 27,
  "timeTaken": 1885,
  "changeHistory": [
    "66bfe6658e6c25e03d1bcd5d4d858e1aaf738a01",
    "29446171c4157d3f9404f7855842e78e8893e420",
    "2f58c932645751a53835110ef2bf5a90fc652ef3",
    "9312ad890b557806d84bde705f351e255e9fe050",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "66bfe6658e6c25e03d1bcd5d4d858e1aaf738a01": "Yformatchange",
    "29446171c4157d3f9404f7855842e78e8893e420": "Ybodychange",
    "2f58c932645751a53835110ef2bf5a90fc652ef3": "Ybodychange",
    "9312ad890b557806d84bde705f351e255e9fe050": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "66bfe6658e6c25e03d1bcd5d4d858e1aaf738a01": {
      "type": "Yformatchange",
      "commitMessage": "Fix #609, Fix #728\n",
      "commitDate": "3/19/15, 8:20 PM",
      "commitName": "66bfe6658e6c25e03d1bcd5d4d858e1aaf738a01",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/19/14, 3:07 PM",
      "commitNameOld": "75ea87180b0818af9c19cda821d4b216808518ab",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 120.18,
      "commitsBetweenForRepo": 162,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n    if (clz \u003d\u003d String.class)\n        return CORE_TYPE_STRING;\n    if (clz \u003d\u003d Boolean.TYPE)\n        return CORE_TYPE_BOOL;\n    if (clz \u003d\u003d Integer.TYPE)\n        return CORE_TYPE_INT;\n    if (clz \u003d\u003d Long.TYPE)\n        return CORE_TYPE_LONG;\n    ClassKey key \u003d new ClassKey(clz);\n    JavaType result \u003d _typeCache.get(key);\n    if (result !\u003d null) {\n        return result;\n    }\n    if (clz.isArray()) {\n        result \u003d ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n    } else if (clz.isEnum()) {\n        result \u003d new SimpleType(clz);\n    } else if (Map.class.isAssignableFrom(clz)) {\n        result \u003d _mapType(clz);\n    } else if (Collection.class.isAssignableFrom(clz)) {\n        result \u003d _collectionType(clz);\n    } else {\n        if (Map.Entry.class.isAssignableFrom(clz)) {\n            JavaType[] pts \u003d this.findTypeParameters(clz, Map.Entry.class);\n            JavaType kt, vt;\n            if (pts \u003d\u003d null || pts.length !\u003d 2) {\n                kt \u003d vt \u003d unknownType();\n            } else {\n                kt \u003d pts[0];\n                vt \u003d pts[1];\n            }\n            result \u003d constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });\n        } else {\n            result \u003d new SimpleType(clz);\n        }\n    }\n    _typeCache.put(key, result);\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 737,
      "functionName": "_fromClass",
      "functionAnnotation": "",
      "functionDoc": "\n@param context Mapping of formal parameter declarations (for generic\n  types) into actual types\n",
      "diff": "",
      "extendedDetails": {}
    },
    "29446171c4157d3f9404f7855842e78e8893e420": {
      "type": "Ybodychange",
      "commitMessage": "Initial work to support Map.Entry; now serialization works, some improvements to type handling as well\n",
      "commitDate": "9/29/14, 4:52 PM",
      "commitName": "29446171c4157d3f9404f7855842e78e8893e420",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "6/15/14, 3:43 PM",
      "commitNameOld": "54fd6d6ea32bf24eaa770919d42f42709efe9f3a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 106.05,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n    if (clz \u003d\u003d String.class)\n        return CORE_TYPE_STRING;\n    if (clz \u003d\u003d Boolean.TYPE)\n        return CORE_TYPE_BOOL;\n    if (clz \u003d\u003d Integer.TYPE)\n        return CORE_TYPE_INT;\n    if (clz \u003d\u003d Long.TYPE)\n        return CORE_TYPE_LONG;\n    ClassKey key \u003d new ClassKey(clz);\n    JavaType result \u003d _typeCache.get(key);\n    if (result !\u003d null) {\n        return result;\n    }\n    if (clz.isArray()) {\n        result \u003d ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n    } else if (clz.isEnum()) {\n        result \u003d new SimpleType(clz);\n    } else if (Map.class.isAssignableFrom(clz)) {\n        result \u003d _mapType(clz);\n    } else if (Collection.class.isAssignableFrom(clz)) {\n        result \u003d _collectionType(clz);\n    } else {\n        if (Map.Entry.class.isAssignableFrom(clz)) {\n            JavaType[] pts \u003d this.findTypeParameters(clz, Map.Entry.class);\n            JavaType kt, vt;\n            if (pts \u003d\u003d null || pts.length !\u003d 2) {\n                kt \u003d vt \u003d unknownType();\n            } else {\n                kt \u003d pts[0];\n                vt \u003d pts[1];\n            }\n            result \u003d constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });\n        } else {\n            result \u003d new SimpleType(clz);\n        }\n    }\n    _typeCache.put(key, result);\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 736,
      "functionName": "_fromClass",
      "functionAnnotation": "",
      "functionDoc": "\n@param context Mapping of formal parameter declarations (for generic\n  types) into actual types\n",
      "diff": "@@ -1,28 +1,40 @@\n protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n     if (clz \u003d\u003d String.class)\n         return CORE_TYPE_STRING;\n     if (clz \u003d\u003d Boolean.TYPE)\n         return CORE_TYPE_BOOL;\n     if (clz \u003d\u003d Integer.TYPE)\n         return CORE_TYPE_INT;\n     if (clz \u003d\u003d Long.TYPE)\n         return CORE_TYPE_LONG;\n     ClassKey key \u003d new ClassKey(clz);\n     JavaType result \u003d _typeCache.get(key);\n     if (result !\u003d null) {\n         return result;\n     }\n     if (clz.isArray()) {\n         result \u003d ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n     } else if (clz.isEnum()) {\n         result \u003d new SimpleType(clz);\n     } else if (Map.class.isAssignableFrom(clz)) {\n         result \u003d _mapType(clz);\n     } else if (Collection.class.isAssignableFrom(clz)) {\n         result \u003d _collectionType(clz);\n     } else {\n-        result \u003d new SimpleType(clz);\n+        if (Map.Entry.class.isAssignableFrom(clz)) {\n+            JavaType[] pts \u003d this.findTypeParameters(clz, Map.Entry.class);\n+            JavaType kt, vt;\n+            if (pts \u003d\u003d null || pts.length !\u003d 2) {\n+                kt \u003d vt \u003d unknownType();\n+            } else {\n+                kt \u003d pts[0];\n+                vt \u003d pts[1];\n+            }\n+            result \u003d constructSimpleType(clz, Map.Entry.class, new JavaType[] { kt, vt });\n+        } else {\n+            result \u003d new SimpleType(clz);\n+        }\n     }\n     _typeCache.put(key, result);\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2f58c932645751a53835110ef2bf5a90fc652ef3": {
      "type": "Ybodychange",
      "commitMessage": "Attempt to fix #435\n",
      "commitDate": "4/9/14, 6:46 PM",
      "commitName": "2f58c932645751a53835110ef2bf5a90fc652ef3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/9/14, 10:43 AM",
      "commitNameOld": "6a3b34afc356d5d5d069caf969ebe28c2be03b40",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n    if (clz \u003d\u003d String.class)\n        return CORE_TYPE_STRING;\n    if (clz \u003d\u003d Boolean.TYPE)\n        return CORE_TYPE_BOOL;\n    if (clz \u003d\u003d Integer.TYPE)\n        return CORE_TYPE_INT;\n    if (clz \u003d\u003d Long.TYPE)\n        return CORE_TYPE_LONG;\n    ClassKey key \u003d new ClassKey(clz);\n    JavaType result \u003d _typeCache.get(key);\n    if (result !\u003d null) {\n        return result;\n    }\n    if (clz.isArray()) {\n        result \u003d ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n    } else if (clz.isEnum()) {\n        result \u003d new SimpleType(clz);\n    } else if (Map.class.isAssignableFrom(clz)) {\n        result \u003d _mapType(clz);\n    } else if (Collection.class.isAssignableFrom(clz)) {\n        result \u003d _collectionType(clz);\n    } else {\n        result \u003d new SimpleType(clz);\n    }\n    _typeCache.put(key, result);\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 680,
      "functionName": "_fromClass",
      "functionAnnotation": "",
      "functionDoc": "\n@param context Mapping of formal parameter declarations (for generic\n  types) into actual types\n",
      "diff": "@@ -1,33 +1,28 @@\n protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n     if (clz \u003d\u003d String.class)\n         return CORE_TYPE_STRING;\n     if (clz \u003d\u003d Boolean.TYPE)\n         return CORE_TYPE_BOOL;\n     if (clz \u003d\u003d Integer.TYPE)\n         return CORE_TYPE_INT;\n     if (clz \u003d\u003d Long.TYPE)\n         return CORE_TYPE_LONG;\n     ClassKey key \u003d new ClassKey(clz);\n-    JavaType result;\n-    synchronized (_typeCache) {\n-        result \u003d _typeCache.get(key);\n-    }\n+    JavaType result \u003d _typeCache.get(key);\n     if (result !\u003d null) {\n         return result;\n     }\n     if (clz.isArray()) {\n         result \u003d ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n     } else if (clz.isEnum()) {\n         result \u003d new SimpleType(clz);\n     } else if (Map.class.isAssignableFrom(clz)) {\n         result \u003d _mapType(clz);\n     } else if (Collection.class.isAssignableFrom(clz)) {\n         result \u003d _collectionType(clz);\n     } else {\n         result \u003d new SimpleType(clz);\n     }\n-    synchronized (_typeCache) {\n-        _typeCache.put(key, result);\n-    }\n+    _typeCache.put(key, result);\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9312ad890b557806d84bde705f351e255e9fe050": {
      "type": "Ybodychange",
      "commitMessage": "Add little bif of caching for TypeFactory, to reduce cost of JavaType creation\n",
      "commitDate": "12/29/11, 5:06 PM",
      "commitName": "9312ad890b557806d84bde705f351e255e9fe050",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/29/11, 3:36 PM",
      "commitNameOld": "2abae1d236fd605c12709d5fa558cdf9270e0653",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n    if (clz \u003d\u003d String.class)\n        return CORE_TYPE_STRING;\n    if (clz \u003d\u003d Boolean.TYPE)\n        return CORE_TYPE_BOOL;\n    if (clz \u003d\u003d Integer.TYPE)\n        return CORE_TYPE_INT;\n    if (clz \u003d\u003d Long.TYPE)\n        return CORE_TYPE_LONG;\n    ClassKey key \u003d new ClassKey(clz);\n    JavaType result;\n    synchronized (_typeCache) {\n        result \u003d _typeCache.get(key);\n    }\n    if (result !\u003d null) {\n        return result;\n    }\n    if (clz.isArray()) {\n        result \u003d ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n    } else if (clz.isEnum()) {\n        result \u003d new SimpleType(clz);\n    } else if (Map.class.isAssignableFrom(clz)) {\n        result \u003d _mapType(clz);\n    } else if (Collection.class.isAssignableFrom(clz)) {\n        result \u003d _collectionType(clz);\n    } else {\n        result \u003d new SimpleType(clz);\n    }\n    synchronized (_typeCache) {\n        _typeCache.put(key, result);\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 647,
      "functionName": "_fromClass",
      "functionAnnotation": "",
      "functionDoc": "\n@param context Mapping of formal parameter declarations (for generic\n  types) into actual types\n",
      "diff": "@@ -1,15 +1,33 @@\n protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n+    if (clz \u003d\u003d String.class)\n+        return CORE_TYPE_STRING;\n+    if (clz \u003d\u003d Boolean.TYPE)\n+        return CORE_TYPE_BOOL;\n+    if (clz \u003d\u003d Integer.TYPE)\n+        return CORE_TYPE_INT;\n+    if (clz \u003d\u003d Long.TYPE)\n+        return CORE_TYPE_LONG;\n+    ClassKey key \u003d new ClassKey(clz);\n+    JavaType result;\n+    synchronized (_typeCache) {\n+        result \u003d _typeCache.get(key);\n+    }\n+    if (result !\u003d null) {\n+        return result;\n+    }\n     if (clz.isArray()) {\n-        return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n+        result \u003d ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n+    } else if (clz.isEnum()) {\n+        result \u003d new SimpleType(clz);\n+    } else if (Map.class.isAssignableFrom(clz)) {\n+        result \u003d _mapType(clz);\n+    } else if (Collection.class.isAssignableFrom(clz)) {\n+        result \u003d _collectionType(clz);\n+    } else {\n+        result \u003d new SimpleType(clz);\n     }\n-    if (clz.isEnum()) {\n-        return new SimpleType(clz);\n+    synchronized (_typeCache) {\n+        _typeCache.put(key, result);\n     }\n-    if (Map.class.isAssignableFrom(clz)) {\n-        return _mapType(clz);\n-    }\n-    if (Collection.class.isAssignableFrom(clz)) {\n-        return _collectionType(clz);\n-    }\n-    return new SimpleType(clz);\n+    return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,15 @@\n+protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n+    if (clz.isArray()) {\n+        return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n+    }\n+    if (clz.isEnum()) {\n+        return new SimpleType(clz);\n+    }\n+    if (Map.class.isAssignableFrom(clz)) {\n+        return _mapType(clz);\n+    }\n+    if (Collection.class.isAssignableFrom(clz)) {\n+        return _collectionType(clz);\n+    }\n+    return new SimpleType(clz);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected JavaType _fromClass(Class\u003c?\u003e clz, TypeBindings context) {\n    if (clz.isArray()) {\n        return ArrayType.construct(_constructType(clz.getComponentType(), null), null, null);\n    }\n    if (clz.isEnum()) {\n        return new SimpleType(clz);\n    }\n    if (Map.class.isAssignableFrom(clz)) {\n        return _mapType(clz);\n    }\n    if (Collection.class.isAssignableFrom(clz)) {\n        return _collectionType(clz);\n    }\n    return new SimpleType(clz);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 819,
      "functionName": "_fromClass",
      "functionAnnotation": "",
      "functionDoc": "\n@param context Mapping of formal parameter declarations (for generic\n  types) into actual types\n"
    }
  }
}