{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicSerializerFactory.java",
  "functionName": "usesStaticTyping",
  "functionId": "usesStaticTyping___config-SerializationConfig__beanDesc-BeanDescription__typeSer-TypeSerializer",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n\n@since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n",
  "functionStartLine": 968,
  "functionEndLine": 983,
  "numCommitsSeen": 117,
  "timeTaken": 2671,
  "changeHistory": [
    "43307b438d6aab67686cb0941e6541c82a6fab2a",
    "bd3ded190c05c5f2f34a5677bbb4469d02599444",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "43307b438d6aab67686cb0941e6541c82a6fab2a": "Ybodychange",
    "bd3ded190c05c5f2f34a5677bbb4469d02599444": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": "Ybodychange",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "43307b438d6aab67686cb0941e6541c82a6fab2a": {
      "type": "Ybodychange",
      "commitMessage": "Fixed #23\n",
      "commitDate": "3/15/13, 3:37 PM",
      "commitName": "43307b438d6aab67686cb0941e6541c82a6fab2a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/13, 1:11 PM",
      "commitNameOld": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 12.06,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        return (t \u003d\u003d JsonSerialize.Typing.STATIC);\n    }\n    return config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 962,
      "functionName": "usesStaticTyping",
      "functionAnnotation": "",
      "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n\n@since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n",
      "diff": "@@ -1,17 +1,11 @@\n protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n     if (typeSer !\u003d null) {\n         return false;\n     }\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n     if (t !\u003d null) {\n-        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n-            return true;\n-        }\n-    } else {\n-        if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n-            return true;\n-        }\n+        return (t \u003d\u003d JsonSerialize.Typing.STATIC);\n     }\n-    return false;\n+    return config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd3ded190c05c5f2f34a5677bbb4469d02599444": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "More SerializerFactory clean up, getting read of BeanProperty arg\n",
      "commitDate": "9/30/12, 12:43 PM",
      "commitName": "bd3ded190c05c5f2f34a5677bbb4469d02599444",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "More SerializerFactory clean up, getting read of BeanProperty arg\n",
          "commitDate": "9/30/12, 12:43 PM",
          "commitName": "bd3ded190c05c5f2f34a5677bbb4469d02599444",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "9/30/12, 12:04 PM",
          "commitNameOld": "65b73d92974414c018dec24a67c285ae484654c8",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n            return true;\n        }\n    } else {\n        if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 843,
          "functionName": "usesStaticTyping",
          "functionAnnotation": "",
          "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n\n@since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n",
          "diff": "@@ -1,30 +1,17 @@\n-protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n+protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n     if (typeSer !\u003d null) {\n         return false;\n     }\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n     if (t !\u003d null) {\n         if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n             return true;\n         }\n     } else {\n         if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n             return true;\n         }\n     }\n-    if (property !\u003d null) {\n-        JavaType type \u003d property.getType();\n-        if (type.isContainerType()) {\n-            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n-                return true;\n-            }\n-            if (type instanceof MapType) {\n-                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n-                    return true;\n-                }\n-            }\n-        }\n-    }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, beanDesc-BeanDescription, typeSer-TypeSerializer, property-BeanProperty]",
            "newValue": "[config-SerializationConfig, beanDesc-BeanDescription, typeSer-TypeSerializer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "More SerializerFactory clean up, getting read of BeanProperty arg\n",
          "commitDate": "9/30/12, 12:43 PM",
          "commitName": "bd3ded190c05c5f2f34a5677bbb4469d02599444",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "9/30/12, 12:04 PM",
          "commitNameOld": "65b73d92974414c018dec24a67c285ae484654c8",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n            return true;\n        }\n    } else {\n        if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 843,
          "functionName": "usesStaticTyping",
          "functionAnnotation": "",
          "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n\n@since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n",
          "diff": "@@ -1,30 +1,17 @@\n-protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n+protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n     if (typeSer !\u003d null) {\n         return false;\n     }\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n     if (t !\u003d null) {\n         if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n             return true;\n         }\n     } else {\n         if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n             return true;\n         }\n     }\n-    if (property !\u003d null) {\n-        JavaType type \u003d property.getType();\n-        if (type.isContainerType()) {\n-            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n-                return true;\n-            }\n-            if (type instanceof MapType) {\n-                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n-                    return true;\n-                }\n-            }\n-        }\n-    }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "More SerializerFactory clean up, getting read of BeanProperty arg\n",
          "commitDate": "9/30/12, 12:43 PM",
          "commitName": "bd3ded190c05c5f2f34a5677bbb4469d02599444",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "9/30/12, 12:04 PM",
          "commitNameOld": "65b73d92974414c018dec24a67c285ae484654c8",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n            return true;\n        }\n    } else {\n        if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n            return true;\n        }\n    }\n    return false;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 843,
          "functionName": "usesStaticTyping",
          "functionAnnotation": "",
          "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n\n@since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n",
          "diff": "@@ -1,30 +1,17 @@\n-protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n+protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer) {\n     if (typeSer !\u003d null) {\n         return false;\n     }\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n     if (t !\u003d null) {\n         if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n             return true;\n         }\n     } else {\n         if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n             return true;\n         }\n     }\n-    if (property !\u003d null) {\n-        JavaType type \u003d property.getType();\n-        if (type.isContainerType()) {\n-            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n-                return true;\n-            }\n-            if (type instanceof MapType) {\n-                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n-                    return true;\n-                }\n-            }\n-        }\n-    }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n",
            "newValue": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n\n@since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n"
          }
        }
      ]
    },
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-777] (renamed SerializationConfig.Feature, DeserializationConfig.Feature); various other restructure\n",
      "commitDate": "2/2/12, 11:30 AM",
      "commitName": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/1/12, 8:01 PM",
      "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.64,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n            return true;\n        }\n    } else {\n        if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n            return true;\n        }\n    }\n    if (property !\u003d null) {\n        JavaType type \u003d property.getType();\n        if (type.isContainerType()) {\n            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n                return true;\n            }\n            if (type instanceof MapType) {\n                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 737,
      "functionName": "usesStaticTyping",
      "functionAnnotation": "",
      "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n",
      "diff": "@@ -1,30 +1,30 @@\n protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n     if (typeSer !\u003d null) {\n         return false;\n     }\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n     if (t !\u003d null) {\n         if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n             return true;\n         }\n     } else {\n-        if (config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING)) {\n+        if (config.isEnabled(MapperFeature.USE_STATIC_TYPING)) {\n             return true;\n         }\n     }\n     if (property !\u003d null) {\n         JavaType type \u003d property.getType();\n         if (type.isContainerType()) {\n             if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n                 return true;\n             }\n             if (type instanceof MapType) {\n                 if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n                     return true;\n                 }\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/21/12, 10:53 AM",
      "commitNameOld": "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n            return true;\n        }\n    } else {\n        if (config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING)) {\n            return true;\n        }\n    }\n    if (property !\u003d null) {\n        JavaType type \u003d property.getType();\n        if (type.isContainerType()) {\n            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n                return true;\n            }\n            if (type instanceof MapType) {\n                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 802,
      "functionName": "usesStaticTyping",
      "functionAnnotation": "",
      "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n",
      "diff": "@@ -1,30 +1,30 @@\n-protected boolean usesStaticTyping(SerializationConfig config, BasicBeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n+protected boolean usesStaticTyping(SerializationConfig config, BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n     if (typeSer !\u003d null) {\n         return false;\n     }\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n     if (t !\u003d null) {\n         if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n             return true;\n         }\n     } else {\n         if (config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING)) {\n             return true;\n         }\n     }\n     if (property !\u003d null) {\n         JavaType type \u003d property.getType();\n         if (type.isContainerType()) {\n             if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n                 return true;\n             }\n             if (type instanceof MapType) {\n                 if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n                     return true;\n                 }\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-SerializationConfig, beanDesc-BasicBeanDescription, typeSer-TypeSerializer, property-BeanProperty]",
        "newValue": "[config-SerializationConfig, beanDesc-BeanDescription, typeSer-TypeSerializer, property-BeanProperty]"
      }
    },
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": {
      "type": "Ybodychange",
      "commitMessage": "Completed major rewrite of handling of on/off features for ObjectMapper/SerConfig/DeserConfig\n",
      "commitDate": "1/19/12, 12:31 PM",
      "commitName": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/15/12, 4:12 PM",
      "commitNameOld": "91965175e2fd0932c48d69ca2f37887bba6a1170",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BasicBeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n            return true;\n        }\n    } else {\n        if (config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING)) {\n            return true;\n        }\n    }\n    if (property !\u003d null) {\n        JavaType type \u003d property.getType();\n        if (type.isContainerType()) {\n            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n                return true;\n            }\n            if (type instanceof MapType) {\n                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 816,
      "functionName": "usesStaticTyping",
      "functionAnnotation": "",
      "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n",
      "diff": "@@ -1,30 +1,30 @@\n protected boolean usesStaticTyping(SerializationConfig config, BasicBeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n     if (typeSer !\u003d null) {\n         return false;\n     }\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n     if (t !\u003d null) {\n         if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n             return true;\n         }\n     } else {\n-        if (config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING)) {\n+        if (config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING)) {\n             return true;\n         }\n     }\n     if (property !\u003d null) {\n         JavaType type \u003d property.getType();\n         if (type.isContainerType()) {\n             if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n                 return true;\n             }\n             if (type instanceof MapType) {\n                 if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n                     return true;\n                 }\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,30 @@\n+protected boolean usesStaticTyping(SerializationConfig config, BasicBeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n+    if (typeSer !\u003d null) {\n+        return false;\n+    }\n+    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n+    if (t !\u003d null) {\n+        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n+            return true;\n+        }\n+    } else {\n+        if (config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING)) {\n+            return true;\n+        }\n+    }\n+    if (property !\u003d null) {\n+        JavaType type \u003d property.getType();\n+        if (type.isContainerType()) {\n+            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n+                return true;\n+            }\n+            if (type instanceof MapType) {\n+                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected boolean usesStaticTyping(SerializationConfig config, BasicBeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property) {\n    if (typeSer !\u003d null) {\n        return false;\n    }\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    JsonSerialize.Typing t \u003d intr.findSerializationTyping(beanDesc.getClassInfo());\n    if (t !\u003d null) {\n        if (t \u003d\u003d JsonSerialize.Typing.STATIC) {\n            return true;\n        }\n    } else {\n        if (config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING)) {\n            return true;\n        }\n    }\n    if (property !\u003d null) {\n        JavaType type \u003d property.getType();\n        if (type.isContainerType()) {\n            if (intr.findSerializationContentType(property.getMember(), property.getType()) !\u003d null) {\n                return true;\n            }\n            if (type instanceof MapType) {\n                if (intr.findSerializationKeyType(property.getMember(), property.getType()) !\u003d null) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 746,
      "functionName": "usesStaticTyping",
      "functionAnnotation": "",
      "functionDoc": "Helper method to check whether global settings and/or class\nannotations for the bean class indicate that static typing\n(declared types)  should be used for properties.\n(instead of dynamic runtime types).\n"
    }
  }
}