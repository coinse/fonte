{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SerializerProvider.java",
  "functionName": "findValueSerializer",
  "functionId": "findValueSerializer___valueType-Class__?____property-BeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
  "functionAnnotation": "",
  "functionDoc": "Method called to get hold of a serializer for a value of given type;\nor if no such serializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for non-null values; not for keys\nor null values. For these, check out other accessor methods.\n\u003cp\u003e\nNote that starting with version 1.5, serializers should also be type-aware\nif they handle polymorphic types. That means that it may be necessary\nto also use a {@link TypeSerializer} based on declared (static) type\nbeing serializer (whereas actual data may be serialized using dynamic\ntype)\n\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable serializer; including that of not\n  finding any serializer\n",
  "functionStartLine": 373,
  "functionEndLine": 406,
  "numCommitsSeen": 52,
  "timeTaken": 1882,
  "changeHistory": [
    "ab511e5576579139951022c2085662904ad85b07",
    "6679caeac9198802d271f8659017bb63eebd615f",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "ab511e5576579139951022c2085662904ad85b07": "Ybodychange",
    "6679caeac9198802d271f8659017bb63eebd615f": "Ymultichange(Ymovefromfile,Yannotationchange,Ydocchange)",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab511e5576579139951022c2085662904ad85b07": {
      "type": "Ybodychange",
      "commitMessage": "Completed SerializerFactory clean up; factories now should not get or expect BeanProperty, as that is only applicable for contextualSerializers\n",
      "commitDate": "9/30/12, 12:56 PM",
      "commitName": "ab511e5576579139951022c2085662904ad85b07",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/28/12, 10:38 AM",
      "commitNameOld": "91c7b7450f396a0130e74e60f455d4fc1bacb7cd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 33.1,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType);\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "functionStartLine": 415,
      "functionName": "findValueSerializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to get hold of a serializer for a value of given type;\nor if no such serializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for non-null values; not for keys\nor null values. For these, check out other accessor methods.\n\u003cp\u003e\nNote that starting with version 1.5, serializers should also be type-aware\nif they handle polymorphic types. That means that it may be necessary\nto also use a {@link TypeSerializer} based on declared (static) type\nbeing serializer (whereas actual data may be serialized using dynamic\ntype)\n\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable serializer; including that of not\n  finding any serializer\n",
      "diff": "@@ -1,20 +1,20 @@\n public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n             if (ser \u003d\u003d null) {\n-                ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n+                ser \u003d _createAndCacheUntypedSerializer(valueType);\n                 if (ser \u003d\u003d null) {\n                     ser \u003d getUnknownTypeSerializer(valueType);\n                     if (CACHE_UNKNOWN_MAPPINGS) {\n                         _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                     }\n                     return ser;\n                 }\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6679caeac9198802d271f8659017bb63eebd615f": {
      "type": "Ymultichange(Ymovefromfile,Yannotationchange,Ydocchange)",
      "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
      "commitDate": "2/1/12, 5:32 PM",
      "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType);\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 459,
          "functionName": "findValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a serializer for a value of given type;\nor if no such serializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for non-null values; not for keys\nor null values. For these, check out other accessor methods.\n\u003cp\u003e\nNote that starting with version 1.5, serializers should also be type-aware\nif they handle polymorphic types. That means that it may be necessary\nto also use a {@link TypeSerializer} based on declared (static) type\nbeing serializer (whereas actual data may be serialized using dynamic\ntype)\n\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable serializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,21 +1,20 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n             if (ser \u003d\u003d null) {\n                 ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                 if (ser \u003d\u003d null) {\n                     ser \u003d getUnknownTypeSerializer(valueType);\n                     if (CACHE_UNKNOWN_MAPPINGS) {\n                         _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                     }\n                     return ser;\n                 }\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
            "oldMethodName": "findValueSerializer",
            "newMethodName": "findValueSerializer"
          }
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType);\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 459,
          "functionName": "findValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a serializer for a value of given type;\nor if no such serializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for non-null values; not for keys\nor null values. For these, check out other accessor methods.\n\u003cp\u003e\nNote that starting with version 1.5, serializers should also be type-aware\nif they handle polymorphic types. That means that it may be necessary\nto also use a {@link TypeSerializer} based on declared (static) type\nbeing serializer (whereas actual data may be serialized using dynamic\ntype)\n\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable serializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,21 +1,20 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n             if (ser \u003d\u003d null) {\n                 ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                 if (ser \u003d\u003d null) {\n                     ser \u003d getUnknownTypeSerializer(valueType);\n                     if (CACHE_UNKNOWN_MAPPINGS) {\n                         _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                     }\n                     return ser;\n                 }\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType);\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 459,
          "functionName": "findValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to get hold of a serializer for a value of given type;\nor if no such serializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for non-null values; not for keys\nor null values. For these, check out other accessor methods.\n\u003cp\u003e\nNote that starting with version 1.5, serializers should also be type-aware\nif they handle polymorphic types. That means that it may be necessary\nto also use a {@link TypeSerializer} based on declared (static) type\nbeing serializer (whereas actual data may be serialized using dynamic\ntype)\n\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable serializer; including that of not\n  finding any serializer\n",
          "diff": "@@ -1,21 +1,20 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n             if (ser \u003d\u003d null) {\n                 ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                 if (ser \u003d\u003d null) {\n                     ser \u003d getUnknownTypeSerializer(valueType);\n                     if (CACHE_UNKNOWN_MAPPINGS) {\n                         _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                     }\n                     return ser;\n                 }\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Method called to get hold of a serializer for a value of given type;\nor if no such serializer can be found, a default handler (which\nmay do a best-effort generic serialization or just simply\nthrow an exception when invoked).\n\u003cp\u003e\nNote: this method is only called for non-null values; not for keys\nor null values. For these, check out other accessor methods.\n\u003cp\u003e\nNote that starting with version 1.5, serializers should also be type-aware\nif they handle polymorphic types. That means that it may be necessary\nto also use a {@link TypeSerializer} based on declared (static) type\nbeing serializer (whereas actual data may be serialized using dynamic\ntype)\n\n@throws JsonMappingException if there are fatal problems with\n  accessing suitable serializer; including that of not\n  finding any serializer\n"
          }
        }
      ]
    },
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": {
      "type": "Ybodychange",
      "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
      "commitDate": "1/24/12, 6:51 PM",
      "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/24/12, 5:50 PM",
      "commitNameOld": "d6f54ffc91de340202a5058055c49100964ab6ad",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType);\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
      "functionStartLine": 320,
      "functionName": "findValueSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n @Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n             if (ser \u003d\u003d null) {\n                 ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                 if (ser \u003d\u003d null) {\n                     ser \u003d getUnknownTypeSerializer(valueType);\n                     if (CACHE_UNKNOWN_MAPPINGS) {\n                         _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                     }\n                     return ser;\n                 }\n             }\n         }\n     }\n-    return _handleContextualResolvable(ser, property);\n+    return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,21 @@\n+@Override\n+public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n+    if (ser \u003d\u003d null) {\n+        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n+        if (ser \u003d\u003d null) {\n+            ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n+            if (ser \u003d\u003d null) {\n+                ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n+                if (ser \u003d\u003d null) {\n+                    ser \u003d getUnknownTypeSerializer(valueType);\n+                    if (CACHE_UNKNOWN_MAPPINGS) {\n+                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n+                    }\n+                    return ser;\n+                }\n+            }\n+        }\n+    }\n+    return _handleContextualResolvable(ser, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n            if (ser \u003d\u003d null) {\n                ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n                if (ser \u003d\u003d null) {\n                    ser \u003d getUnknownTypeSerializer(valueType);\n                    if (CACHE_UNKNOWN_MAPPINGS) {\n                        _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                    }\n                    return ser;\n                }\n            }\n        }\n    }\n    return _handleContextualResolvable(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
      "functionStartLine": 331,
      "functionName": "findValueSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}