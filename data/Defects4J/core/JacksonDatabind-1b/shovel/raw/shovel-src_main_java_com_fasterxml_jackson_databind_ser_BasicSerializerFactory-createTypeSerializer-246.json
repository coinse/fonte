{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicSerializerFactory.java",
  "functionName": "createTypeSerializer",
  "functionId": "createTypeSerializer___config-SerializationConfig__baseType-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Method called to construct a type serializer for values with given declared\nbase type. This is called for values other than those of bean property\ntypes.\n",
  "functionStartLine": 246,
  "functionEndLine": 266,
  "numCommitsSeen": 83,
  "timeTaken": 2679,
  "changeHistory": [
    "0c1d95cee9e468b75dca6791332d44b19b93ed77",
    "a57eca7f47d03b26320348520e926dde0da68509",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "0c1d95cee9e468b75dca6791332d44b19b93ed77": "Ybodychange",
    "a57eca7f47d03b26320348520e926dde0da68509": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c1d95cee9e468b75dca6791332d44b19b93ed77": {
      "type": "Ybodychange",
      "commitMessage": "Minor cleanup\n",
      "commitDate": "2/3/12, 1:28 PM",
      "commitName": "0c1d95cee9e468b75dca6791332d44b19b93ed77",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 5:33 PM",
      "commitNameOld": "82b474d51545919cb38a49485f56fd29d6ed199b",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType) {\n    BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    if (b \u003d\u003d null) {\n        return null;\n    }\n    return b.buildTypeSerializer(config, baseType, subtypes);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 222,
      "functionName": "createTypeSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to construct a type serializer for values with given declared\nbase type. This is called for values other than those of bean property\ntypes.\n",
      "diff": "@@ -1,14 +1,17 @@\n @Override\n public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType) {\n     BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n-    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes);\n+    if (b \u003d\u003d null) {\n+        return null;\n+    }\n+    return b.buildTypeSerializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a57eca7f47d03b26320348520e926dde0da68509": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, eliminating BeanProperty from TypeSerializer\n",
      "commitDate": "2/1/12, 3:26 PM",
      "commitName": "a57eca7f47d03b26320348520e926dde0da68509",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, eliminating BeanProperty from TypeSerializer\n",
          "commitDate": "2/1/12, 3:26 PM",
          "commitName": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/31/12, 9:32 PM",
          "commitNameOld": "58ada457706e9e05d12f45e58451b7daffdd5317",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.75,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType) {\n    BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 339,
          "functionName": "createTypeSerializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to construct a type serializer for values with given declared\nbase type. This is called for values other than those of bean property\ntypes.\n",
          "diff": "@@ -1,14 +1,14 @@\n @Override\n-public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType, BeanProperty property) {\n+public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType) {\n     BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n-    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes, property);\n+    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, baseType-JavaType, property-BeanProperty]",
            "newValue": "[config-SerializationConfig, baseType-JavaType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, eliminating BeanProperty from TypeSerializer\n",
          "commitDate": "2/1/12, 3:26 PM",
          "commitName": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/31/12, 9:32 PM",
          "commitNameOld": "58ada457706e9e05d12f45e58451b7daffdd5317",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.75,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType) {\n    BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 339,
          "functionName": "createTypeSerializer",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to construct a type serializer for values with given declared\nbase type. This is called for values other than those of bean property\ntypes.\n",
          "diff": "@@ -1,14 +1,14 @@\n @Override\n-public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType, BeanProperty property) {\n+public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType) {\n     BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n-    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes, property);\n+    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/21/12, 10:53 AM",
      "commitNameOld": "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType, BeanProperty property) {\n    BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 197,
      "functionName": "createTypeSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to construct a type serializer for values with given declared\nbase type. This is called for values other than those of bean property\ntypes.\n",
      "diff": "@@ -1,14 +1,14 @@\n @Override\n public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType, BeanProperty property) {\n-    BasicBeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n+    BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n     return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,14 @@\n+@Override\n+public TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType, BeanProperty property) {\n+    BasicBeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n+    AnnotatedClass ac \u003d bean.getClassInfo();\n+    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n+    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n+    Collection\u003cNamedType\u003e subtypes \u003d null;\n+    if (b \u003d\u003d null) {\n+        b \u003d config.getDefaultTyper(baseType);\n+    } else {\n+        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n+    }\n+    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType, BeanProperty property) {\n    BasicBeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    return (b \u003d\u003d null) ? null : b.buildTypeSerializer(config, baseType, subtypes, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 175,
      "functionName": "createTypeSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to construct a type serializer for values with given declared\nbase type. This is called for values other than those of bean property\ntypes.\n"
    }
  }
}