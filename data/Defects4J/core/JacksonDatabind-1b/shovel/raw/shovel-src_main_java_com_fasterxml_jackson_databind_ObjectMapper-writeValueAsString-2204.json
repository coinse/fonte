{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObjectMapper.java",
  "functionName": "writeValueAsString",
  "functionId": "writeValueAsString___value-Object",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
  "functionAnnotation": "",
  "functionDoc": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\u003cp\u003e\nNote: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n",
  "functionStartLine": 2204,
  "functionEndLine": 2217,
  "numCommitsSeen": 107,
  "timeTaken": 8501,
  "changeHistory": [
    "d06026f73b52bafc7cc1a44ae86e5405d97f8350",
    "ac1f2abbbc73dd40b3205a79ad546add80130d78",
    "16b79a5d634526d6bdbcfcf582fcf2469e6383a0",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "d06026f73b52bafc7cc1a44ae86e5405d97f8350": "Ybodychange",
    "ac1f2abbbc73dd40b3205a79ad546add80130d78": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "16b79a5d634526d6bdbcfcf582fcf2469e6383a0": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d06026f73b52bafc7cc1a44ae86e5405d97f8350": {
      "type": "Ybodychange",
      "commitMessage": "Fix compilation problem (due to Collections.emptyIterator()), upgrade to \u0027createParser\u0027 etc (from \u0027createJsonParser\u0027)\n",
      "commitDate": "11/15/12, 6:18 PM",
      "commitName": "d06026f73b52bafc7cc1a44ae86e5405d97f8350",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/12/12, 4:33 PM",
      "commitNameOld": "5b772b1f1e97c80c394765e8f4443ac0f9dea637",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public String writeValueAsString(Object value) throws JsonProcessingException {\n    SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n    try {\n        _configAndWriteValue(_jsonFactory.createGenerator(sw), value);\n    } catch (JsonProcessingException e) {\n        throw e;\n    } catch (IOException e) {\n        throw JsonMappingException.fromUnexpectedIOE(e);\n    }\n    return sw.getAndClear();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2112,
      "functionName": "writeValueAsString",
      "functionAnnotation": "",
      "functionDoc": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\u003cp\u003e\nNote: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n",
      "diff": "@@ -1,11 +1,11 @@\n public String writeValueAsString(Object value) throws JsonProcessingException {\n     SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n     try {\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+        _configAndWriteValue(_jsonFactory.createGenerator(sw), value);\n     } catch (JsonProcessingException e) {\n         throw e;\n     } catch (IOException e) {\n         throw JsonMappingException.fromUnexpectedIOE(e);\n     }\n     return sw.getAndClear();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac1f2abbbc73dd40b3205a79ad546add80130d78": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "Implement [JACKSON-758]\n",
      "commitDate": "8/1/12, 7:49 PM",
      "commitName": "ac1f2abbbc73dd40b3205a79ad546add80130d78",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Implement [JACKSON-758]\n",
          "commitDate": "8/1/12, 7:49 PM",
          "commitName": "ac1f2abbbc73dd40b3205a79ad546add80130d78",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "7/20/12, 9:52 PM",
          "commitNameOld": "84da2a4a1bf7c987237f4395f214a99bfc198ccb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 11.91,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "public String writeValueAsString(Object value) throws JsonProcessingException {\n    SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n    try {\n        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n    } catch (JsonProcessingException e) {\n        throw e;\n    } catch (IOException e) {\n        throw JsonMappingException.fromUnexpectedIOE(e);\n    }\n    return sw.getAndClear();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "functionStartLine": 2010,
          "functionName": "writeValueAsString",
          "functionAnnotation": "",
          "functionDoc": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\u003cp\u003e\nNote: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n",
          "diff": "@@ -1,5 +1,11 @@\n-public String writeValueAsString(Object value) throws IOException, JsonGenerationException, JsonMappingException {\n+public String writeValueAsString(Object value) throws JsonProcessingException {\n     SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n-    _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+    try {\n+        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+    } catch (JsonProcessingException e) {\n+        throw e;\n+    } catch (IOException e) {\n+        throw JsonMappingException.fromUnexpectedIOE(e);\n+    }\n     return sw.getAndClear();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[IOException, JsonGenerationException, JsonMappingException]",
            "newValue": "[JsonProcessingException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement [JACKSON-758]\n",
          "commitDate": "8/1/12, 7:49 PM",
          "commitName": "ac1f2abbbc73dd40b3205a79ad546add80130d78",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "7/20/12, 9:52 PM",
          "commitNameOld": "84da2a4a1bf7c987237f4395f214a99bfc198ccb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 11.91,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "public String writeValueAsString(Object value) throws JsonProcessingException {\n    SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n    try {\n        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n    } catch (JsonProcessingException e) {\n        throw e;\n    } catch (IOException e) {\n        throw JsonMappingException.fromUnexpectedIOE(e);\n    }\n    return sw.getAndClear();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "functionStartLine": 2010,
          "functionName": "writeValueAsString",
          "functionAnnotation": "",
          "functionDoc": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\u003cp\u003e\nNote: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n",
          "diff": "@@ -1,5 +1,11 @@\n-public String writeValueAsString(Object value) throws IOException, JsonGenerationException, JsonMappingException {\n+public String writeValueAsString(Object value) throws JsonProcessingException {\n     SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n-    _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+    try {\n+        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+    } catch (JsonProcessingException e) {\n+        throw e;\n+    } catch (IOException e) {\n+        throw JsonMappingException.fromUnexpectedIOE(e);\n+    }\n     return sw.getAndClear();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Implement [JACKSON-758]\n",
          "commitDate": "8/1/12, 7:49 PM",
          "commitName": "ac1f2abbbc73dd40b3205a79ad546add80130d78",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "7/20/12, 9:52 PM",
          "commitNameOld": "84da2a4a1bf7c987237f4395f214a99bfc198ccb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 11.91,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "public String writeValueAsString(Object value) throws JsonProcessingException {\n    SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n    try {\n        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n    } catch (JsonProcessingException e) {\n        throw e;\n    } catch (IOException e) {\n        throw JsonMappingException.fromUnexpectedIOE(e);\n    }\n    return sw.getAndClear();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "functionStartLine": 2010,
          "functionName": "writeValueAsString",
          "functionAnnotation": "",
          "functionDoc": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\u003cp\u003e\nNote: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n",
          "diff": "@@ -1,5 +1,11 @@\n-public String writeValueAsString(Object value) throws IOException, JsonGenerationException, JsonMappingException {\n+public String writeValueAsString(Object value) throws JsonProcessingException {\n     SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n-    _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+    try {\n+        _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+    } catch (JsonProcessingException e) {\n+        throw e;\n+    } catch (IOException e) {\n+        throw JsonMappingException.fromUnexpectedIOE(e);\n+    }\n     return sw.getAndClear();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n",
            "newValue": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\u003cp\u003e\nNote: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.\n"
          }
        }
      ]
    },
    "16b79a5d634526d6bdbcfcf582fcf2469e6383a0": {
      "type": "Ydocchange",
      "commitMessage": "minor javadoc cleanup\n",
      "commitDate": "1/14/12, 9:57 AM",
      "commitName": "16b79a5d634526d6bdbcfcf582fcf2469e6383a0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/12/12, 9:52 PM",
      "commitNameOld": "418a239a360683f065ea18fb4d1cb8d40c646c8e",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public String writeValueAsString(Object value) throws IOException, JsonGenerationException, JsonMappingException {\n    SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n    _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n    return sw.getAndClear();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 1944,
      "functionName": "writeValueAsString",
      "functionAnnotation": "",
      "functionDoc": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\n@since 1.3\n",
        "newValue": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,5 @@\n+public String writeValueAsString(Object value) throws IOException, JsonGenerationException, JsonMappingException {\n+    SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n+    _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+    return sw.getAndClear();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String writeValueAsString(Object value) throws IOException, JsonGenerationException, JsonMappingException {\n    SegmentedStringWriter sw \u003d new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n    _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n    return sw.getAndClear();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2093,
      "functionName": "writeValueAsString",
      "functionAnnotation": "",
      "functionDoc": "Method that can be used to serialize any Java value as\na String. Functionally equivalent to calling\n{@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}\nand constructing String, but more efficient.\n\n@since 1.3\n"
    }
  }
}