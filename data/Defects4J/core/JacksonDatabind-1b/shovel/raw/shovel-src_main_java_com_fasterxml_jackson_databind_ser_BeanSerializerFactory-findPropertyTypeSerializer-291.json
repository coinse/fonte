{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerFactory.java",
  "functionName": "findPropertyTypeSerializer",
  "functionId": "findPropertyTypeSerializer___baseType-JavaType__config-SerializationConfig__accessor-AnnotatedMember",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n",
  "functionStartLine": 291,
  "functionEndLine": 304,
  "numCommitsSeen": 109,
  "timeTaken": 2289,
  "changeHistory": [
    "65b73d92974414c018dec24a67c285ae484654c8",
    "bc6485776be5c45a52e4b07459caf3b9a78c80d3",
    "a57eca7f47d03b26320348520e926dde0da68509",
    "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "65b73d92974414c018dec24a67c285ae484654c8": "Yparameterchange",
    "bc6485776be5c45a52e4b07459caf3b9a78c80d3": "Ybodychange",
    "a57eca7f47d03b26320348520e926dde0da68509": "Ybodychange",
    "b2a9ca7bb27c21b12ccd8d17314e83275381027c": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65b73d92974414c018dec24a67c285ae484654c8": {
      "type": "Yparameterchange",
      "commitMessage": "Starting to clean up SerializerFactory, to remove/reduce passing of BeanProperty, which in general is not available at time of call.\n",
      "commitDate": "9/30/12, 12:04 PM",
      "commitName": "65b73d92974414c018dec24a67c285ae484654c8",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/24/12, 1:33 PM",
      "commitNameOld": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 36.94,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "actualSource": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException {\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n    if (b \u003d\u003d null) {\n        return createTypeSerializer(config, baseType);\n    }\n    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai, baseType);\n    return b.buildTypeSerializer(config, baseType, subtypes);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 266,
      "functionName": "findPropertyTypeSerializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n",
      "diff": "@@ -1,9 +1,9 @@\n-public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n+public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException {\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n     if (b \u003d\u003d null) {\n         return createTypeSerializer(config, baseType);\n     }\n     Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai, baseType);\n     return b.buildTypeSerializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[baseType-JavaType, config-SerializationConfig, accessor-AnnotatedMember, property-BeanProperty]",
        "newValue": "[baseType-JavaType, config-SerializationConfig, accessor-AnnotatedMember]"
      }
    },
    "bc6485776be5c45a52e4b07459caf3b9a78c80d3": {
      "type": "Ybodychange",
      "commitMessage": "Minor improvements to SubtypeResolver, to pass base type of property, to support structured values properly\n",
      "commitDate": "8/17/12, 2:59 PM",
      "commitName": "bc6485776be5c45a52e4b07459caf3b9a78c80d3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/3/12, 6:29 PM",
      "commitNameOld": "15d6ea2adef8ade224b6479581eaee7d9acd592a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 13.85,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n    if (b \u003d\u003d null) {\n        return createTypeSerializer(config, baseType);\n    }\n    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai, baseType);\n    return b.buildTypeSerializer(config, baseType, subtypes);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 253,
      "functionName": "findPropertyTypeSerializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n",
      "diff": "@@ -1,9 +1,9 @@\n public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n     if (b \u003d\u003d null) {\n         return createTypeSerializer(config, baseType);\n     }\n-    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai);\n+    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai, baseType);\n     return b.buildTypeSerializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a57eca7f47d03b26320348520e926dde0da68509": {
      "type": "Ybodychange",
      "commitMessage": "Yet more refactoring, eliminating BeanProperty from TypeSerializer\n",
      "commitDate": "2/1/12, 3:26 PM",
      "commitName": "a57eca7f47d03b26320348520e926dde0da68509",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 9:32 PM",
      "commitNameOld": "58ada457706e9e05d12f45e58451b7daffdd5317",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n    if (b \u003d\u003d null) {\n        return createTypeSerializer(config, baseType);\n    }\n    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai);\n    return b.buildTypeSerializer(config, baseType, subtypes);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 215,
      "functionName": "findPropertyTypeSerializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n",
      "diff": "@@ -1,9 +1,9 @@\n public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n     if (b \u003d\u003d null) {\n-        return createTypeSerializer(config, baseType, property);\n+        return createTypeSerializer(config, baseType);\n     }\n     Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai);\n-    return b.buildTypeSerializer(config, baseType, subtypes, property);\n+    return b.buildTypeSerializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2a9ca7bb27c21b12ccd8d17314e83275381027c": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc cleanup, removing pre-2.0 @since annotations\n",
      "commitDate": "1/20/12, 8:16 PM",
      "commitName": "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 12:31 PM",
      "commitNameOld": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n    if (b \u003d\u003d null) {\n        return createTypeSerializer(config, baseType, property);\n    }\n    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai);\n    return b.buildTypeSerializer(config, baseType, subtypes, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 319,
      "functionName": "findPropertyTypeSerializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n@since 1.5\n",
        "newValue": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,9 @@\n+public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n+    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n+    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n+    if (b \u003d\u003d null) {\n+        return createTypeSerializer(config, baseType, property);\n+    }\n+    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai);\n+    return b.buildTypeSerializer(config, baseType, subtypes, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor, BeanProperty property) throws JsonMappingException {\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findPropertyTypeResolver(config, accessor, baseType);\n    if (b \u003d\u003d null) {\n        return createTypeSerializer(config, baseType, property);\n    }\n    Collection\u003cNamedType\u003e subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai);\n    return b.buildTypeSerializer(config, baseType, subtypes, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 366,
      "functionName": "findPropertyTypeSerializer",
      "functionAnnotation": "",
      "functionDoc": "Method called to create a type information serializer for values of given\nnon-container property\nif one is needed. If not needed (no polymorphic handling configured), should\nreturn null.\n\n@param baseType Declared type to use as the base type for type information serializer\n@return Type serializer to use for property values, if one is needed; null if not.\n@since 1.5\n"
    }
  }
}