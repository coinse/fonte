{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicSerializerFactory.java",
  "functionName": "findSerializerByLookup",
  "functionId": "findSerializerByLookup___type-JavaType__config-SerializationConfig__beanDesc-BeanDescription__staticTyping-boolean",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method that will use fast lookup (and identity comparison) methods to\nsee if we know serializer to use for given type.\n",
  "functionStartLine": 290,
  "functionEndLine": 309,
  "numCommitsSeen": 100,
  "timeTaken": 2734,
  "changeHistory": [
    "bba2bad031b33f5fa7b14680917590c7c4b6004c",
    "334892f4c5c0f346248eb6ebae306330e6512d93",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "bb8d4b65187741fda92c9db366d7e95deaa38f1c",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "bba2bad031b33f5fa7b14680917590c7c4b6004c": "Ybodychange",
    "334892f4c5c0f346248eb6ebae306330e6512d93": "Yparameterchange",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "bb8d4b65187741fda92c9db366d7e95deaa38f1c": "Ymodifierchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bba2bad031b33f5fa7b14680917590c7c4b6004c": {
      "type": "Ybodychange",
      "commitMessage": "more cleanup\n",
      "commitDate": "4/16/13, 5:47 PM",
      "commitName": "bba2bad031b33f5fa7b14680917590c7c4b6004c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/16/13, 5:34 PM",
      "commitNameOld": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping) {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    String clsName \u003d raw.getName();\n    JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n    if (ser \u003d\u003d null) {\n        Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n        if (serClass !\u003d null) {\n            try {\n                return serClass.newInstance();\n            } catch (Exception e) {\n                throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n            }\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 290,
      "functionName": "findSerializerByLookup",
      "functionAnnotation": "",
      "functionDoc": "Method that will use fast lookup (and identity comparison) methods to\nsee if we know serializer to use for given type.\n",
      "diff": "@@ -1,17 +1,16 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping) {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     String clsName \u003d raw.getName();\n     JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n-    if (ser !\u003d null) {\n-        return ser;\n-    }\n-    Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n-    if (serClass !\u003d null) {\n-        try {\n-            return serClass.newInstance();\n-        } catch (Exception e) {\n-            throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n+    if (ser \u003d\u003d null) {\n+        Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n+        if (serClass !\u003d null) {\n+            try {\n+                return serClass.newInstance();\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n+            }\n         }\n     }\n-    return null;\n+    return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "334892f4c5c0f346248eb6ebae306330e6512d93": {
      "type": "Yparameterchange",
      "commitMessage": "...\n",
      "commitDate": "2/1/12, 8:01 PM",
      "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/1/12, 6:17 PM",
      "commitNameOld": "67bf19c225daeef0ac0e6a0ea3f371b4d57946c4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping) {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    String clsName \u003d raw.getName();\n    JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n    if (serClass !\u003d null) {\n        try {\n            return serClass.newInstance();\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 277,
      "functionName": "findSerializerByLookup",
      "functionAnnotation": "",
      "functionDoc": "Method that will use fast lookup (and identity comparison) methods to\nsee if we know serializer to use for given type.\n",
      "diff": "@@ -1,17 +1,17 @@\n-protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n+protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, boolean staticTyping) {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     String clsName \u003d raw.getName();\n     JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n     if (serClass !\u003d null) {\n         try {\n             return serClass.newInstance();\n         } catch (Exception e) {\n             throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[type-JavaType, config-SerializationConfig, beanDesc-BeanDescription, property-BeanProperty, staticTyping-boolean]",
        "newValue": "[type-JavaType, config-SerializationConfig, beanDesc-BeanDescription, staticTyping-boolean]"
      }
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/21/12, 10:53 AM",
      "commitNameOld": "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    String clsName \u003d raw.getName();\n    JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n    if (serClass !\u003d null) {\n        try {\n            return serClass.newInstance();\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 238,
      "functionName": "findSerializerByLookup",
      "functionAnnotation": "",
      "functionDoc": "Method that will use fast lookup (and identity comparison) methods to\nsee if we know serializer to use for given type.\n",
      "diff": "@@ -1,17 +1,17 @@\n-protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n+protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     String clsName \u003d raw.getName();\n     JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n     if (serClass !\u003d null) {\n         try {\n             return serClass.newInstance();\n         } catch (Exception e) {\n             throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[type-JavaType, config-SerializationConfig, beanDesc-BasicBeanDescription, property-BeanProperty, staticTyping-boolean]",
        "newValue": "[type-JavaType, config-SerializationConfig, beanDesc-BeanDescription, property-BeanProperty, staticTyping-boolean]"
      }
    },
    "bb8d4b65187741fda92c9db366d7e95deaa38f1c": {
      "type": "Ymodifierchange",
      "commitMessage": "cleanup\n",
      "commitDate": "1/15/12, 3:29 PM",
      "commitName": "bb8d4b65187741fda92c9db366d7e95deaa38f1c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/14/12, 7:08 PM",
      "commitNameOld": "52a924401ffedeb1170401e760443e184692cbb1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    String clsName \u003d raw.getName();\n    JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n    if (serClass !\u003d null) {\n        try {\n            return serClass.newInstance();\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 251,
      "functionName": "findSerializerByLookup",
      "functionAnnotation": "",
      "functionDoc": "Method that will use fast lookup (and identity comparison) methods to\nsee if we know serializer to use for given type.\n",
      "diff": "@@ -1,17 +1,17 @@\n-public final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n+protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     String clsName \u003d raw.getName();\n     JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n     if (serClass !\u003d null) {\n         try {\n             return serClass.newInstance();\n         } catch (Exception e) {\n             throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public, final]",
        "newValue": "[protected, final]"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,17 @@\n+public final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n+    Class\u003c?\u003e raw \u003d type.getRawClass();\n+    String clsName \u003d raw.getName();\n+    JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n+    if (ser !\u003d null) {\n+        return ser;\n+    }\n+    Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n+    if (serClass !\u003d null) {\n+        try {\n+            return serClass.newInstance();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n+        }\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    String clsName \u003d raw.getName();\n    JsonSerializer\u003c?\u003e ser \u003d _concrete.get(clsName);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass \u003d _concreteLazy.get(clsName);\n    if (serClass !\u003d null) {\n        try {\n            return serClass.newInstance();\n        } catch (Exception e) {\n            throw new IllegalStateException(\"Failed to instantiate standard serializer (of type \" + serClass.getName() + \"): \" + e.getMessage(), e);\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 217,
      "functionName": "findSerializerByLookup",
      "functionAnnotation": "",
      "functionDoc": "Method that will use fast lookup (and identity comparison) methods to\nsee if we know serializer to use for given type.\n"
    }
  }
}