{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicSerializerFactory.java",
  "functionName": "findSerializerByPrimaryType",
  "functionId": "findSerializerByPrimaryType___prov-SerializerProvider__type-JavaType__beanDesc-BeanDescription__staticTyping-boolean",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
  "functionStartLine": 357,
  "functionEndLine": 395,
  "numCommitsSeen": 115,
  "timeTaken": 2865,
  "changeHistory": [
    "afda778afc8016e16d364748eb7d0d4500bc0dca",
    "ed453eb1f91ce2745689269b2c187789e88031e5",
    "15d6ea2adef8ade224b6479581eaee7d9acd592a",
    "288087216060a7f910a9bcf20bfd4504bd31c89d",
    "034319b89d307b778f5ae3787ea4425b20a3064b",
    "334892f4c5c0f346248eb6ebae306330e6512d93",
    "f4441ecc7f881fda71a979f616f525823b23b16e",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2",
    "bb8d4b65187741fda92c9db366d7e95deaa38f1c",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "fcb1c2560541e2ff2f3fd6da99a95f69c2b28a8a",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "afda778afc8016e16d364748eb7d0d4500bc0dca": "Ybodychange",
    "ed453eb1f91ce2745689269b2c187789e88031e5": "Ybodychange",
    "15d6ea2adef8ade224b6479581eaee7d9acd592a": "Ybodychange",
    "288087216060a7f910a9bcf20bfd4504bd31c89d": "Ybodychange",
    "034319b89d307b778f5ae3787ea4425b20a3064b": "Ybodychange",
    "334892f4c5c0f346248eb6ebae306330e6512d93": "Ymultichange(Yparameterchange,Ybodychange)",
    "f4441ecc7f881fda71a979f616f525823b23b16e": "Ybodychange",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2": "Ybodychange",
    "bb8d4b65187741fda92c9db366d7e95deaa38f1c": "Ymodifierchange",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ybodychange",
    "fcb1c2560541e2ff2f3fd6da99a95f69c2b28a8a": "Ymultichange(Ybodychange,Yannotationchange)",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "afda778afc8016e16d364748eb7d0d4500bc0dca": {
      "type": "Ybodychange",
      "commitMessage": "More simplification, remove ref to optional handler factory\n",
      "commitDate": "4/15/13, 8:36 PM",
      "commitName": "afda778afc8016e16d364748eb7d0d4500bc0dca",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/15/13, 8:17 PM",
      "commitNameOld": "3aca28493ae844cb65dbb9e287b0360b391037a2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n        return ToStringSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 356,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,29 +1,29 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n         return ToStringSerializer.instance;\n     }\n-    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n+    JsonSerializer\u003c?\u003e ser \u003d findOptionalStdSerializer(prov, type, beanDesc, staticTyping);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ed453eb1f91ce2745689269b2c187789e88031e5": {
      "type": "Ybodychange",
      "commitMessage": "Added most modifiers for #120\n",
      "commitDate": "11/30/12, 9:49 PM",
      "commitName": "ed453eb1f91ce2745689269b2c187789e88031e5",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/5/12, 4:22 PM",
      "commitNameOld": "70c2de957f517f569dba98ceaa5aecd9e56a11a9",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 56.27,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n        return ToStringSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 351,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,35 +1,29 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n         return ToStringSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n-        JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n-        if (format !\u003d null \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n-            ((BasicBeanDescription) beanDesc).removeProperty(\"declaringClass\");\n-        } else {\n-            @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n-            return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc, format);\n-        }\n+        return buildEnumSerializer(prov.getConfig(), type, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "15d6ea2adef8ade224b6479581eaee7d9acd592a": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [Issue#25] (enums as JSON Object); started implementation of [Issue#40] (Collections as JSON Objects)\n",
      "commitDate": "8/3/12, 6:29 PM",
      "commitName": "15d6ea2adef8ade224b6479581eaee7d9acd592a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "6/13/12, 6:47 PM",
      "commitNameOld": "a063b79f364923a4b98ce66254bf478284c63340",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 50.99,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n        return ToStringSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n        if (format !\u003d null \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n            ((BasicBeanDescription) beanDesc).removeProperty(\"declaringClass\");\n        } else {\n            @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n            return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc, format);\n        }\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 334,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,30 +1,35 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n         return ToStringSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n-        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n-        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n+        JsonFormat.Value format \u003d beanDesc.findExpectedFormat(null);\n+        if (format !\u003d null \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n+            ((BasicBeanDescription) beanDesc).removeProperty(\"declaringClass\");\n+        } else {\n+            @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n+            return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc, format);\n+        }\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "288087216060a7f910a9bcf20bfd4504bd31c89d": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-795]: @JsonValue will now work with Maps, Collections too\n",
      "commitDate": "2/24/12, 6:35 PM",
      "commitName": "288087216060a7f910a9bcf20bfd4504bd31c89d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/20/12, 2:45 PM",
      "commitNameOld": "034319b89d307b778f5ae3787ea4425b20a3064b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.16,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n        return ToStringSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 333,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,42 +1,30 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n-    if (JsonSerializable.class.isAssignableFrom(raw)) {\n-        return SerializableSerializer.instance;\n-    }\n-    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n-    if (valueMethod !\u003d null) {\n-        Method m \u003d valueMethod.getAnnotated();\n-        if (prov.canOverrideAccessModifiers()) {\n-            ClassUtil.checkAndFixAccess(m);\n-        }\n-        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod);\n-        return new JsonValueSerializer(m, ser);\n-    }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n         return ToStringSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "034319b89d307b778f5ae3787ea4425b20a3064b": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-789], support for java.nio.charset.Charset\n",
      "commitDate": "2/20/12, 2:45 PM",
      "commitName": "034319b89d307b778f5ae3787ea4425b20a3064b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 16.71,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (prov.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod);\n        return new JsonValueSerializer(m, ser);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n        return ToStringSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 294,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,39 +1,42 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (prov.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod);\n         return new JsonValueSerializer(m, ser);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n+    if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n+        return ToStringSerializer.instance;\n+    }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "334892f4c5c0f346248eb6ebae306330e6512d93": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "...\n",
      "commitDate": "2/1/12, 8:01 PM",
      "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "...\n",
          "commitDate": "2/1/12, 8:01 PM",
          "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 6:17 PM",
          "commitNameOld": "67bf19c225daeef0ac0e6a0ea3f371b4d57946c4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (prov.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod);\n        return new JsonValueSerializer(m, ser);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 306,
          "functionName": "findSerializerByPrimaryType",
          "functionAnnotation": "",
          "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
          "diff": "@@ -1,39 +1,39 @@\n-protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n+protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (prov.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n-        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n+        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod);\n         return new JsonValueSerializer(m, ser);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prov-SerializerProvider, type-JavaType, beanDesc-BeanDescription, property-BeanProperty, staticTyping-boolean]",
            "newValue": "[prov-SerializerProvider, type-JavaType, beanDesc-BeanDescription, staticTyping-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "...\n",
          "commitDate": "2/1/12, 8:01 PM",
          "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 6:17 PM",
          "commitNameOld": "67bf19c225daeef0ac0e6a0ea3f371b4d57946c4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (prov.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod);\n        return new JsonValueSerializer(m, ser);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 306,
          "functionName": "findSerializerByPrimaryType",
          "functionAnnotation": "",
          "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
          "diff": "@@ -1,39 +1,39 @@\n-protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n+protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (prov.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n-        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n+        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod);\n         return new JsonValueSerializer(m, ser);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f4441ecc7f881fda71a979f616f525823b23b16e": {
      "type": "Ybodychange",
      "commitMessage": "Convert JsonValueSerializer to ContextualSerializer\n",
      "commitDate": "1/31/12, 5:47 PM",
      "commitName": "f4441ecc7f881fda71a979f616f525823b23b16e",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 5:13 PM",
      "commitNameOld": "67942a586ad1e6e5a39dae40115e47d3224df837",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (prov.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n        return new JsonValueSerializer(m, ser);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 268,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,39 +1,39 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (prov.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n-        return new JsonValueSerializer(m, ser, property);\n+        return new JsonValueSerializer(m, ser);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
      "commitDate": "1/24/12, 6:51 PM",
      "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (prov.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 268,
          "functionName": "findSerializerByPrimaryType",
          "functionAnnotation": "",
          "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
          "diff": "@@ -1,39 +1,39 @@\n-protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n+protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n-        if (config.canOverrideAccessModifiers()) {\n+        if (prov.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n-        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n+        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n-    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n+    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n-        return EnumSerializer.construct(enumClass, config, beanDesc);\n+        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[type-JavaType, config-SerializationConfig, beanDesc-BeanDescription, property-BeanProperty, staticTyping-boolean]",
            "newValue": "[prov-SerializerProvider, type-JavaType, beanDesc-BeanDescription, property-BeanProperty, staticTyping-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (prov.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 268,
          "functionName": "findSerializerByPrimaryType",
          "functionAnnotation": "",
          "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
          "diff": "@@ -1,39 +1,39 @@\n-protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n+protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov, JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n-        if (config.canOverrideAccessModifiers()) {\n+        if (prov.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n-        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n+        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(prov, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n-    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n+    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(prov.getConfig(), type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n-        return EnumSerializer.construct(enumClass, config, beanDesc);\n+        return EnumSerializer.construct(enumClass, prov.getConfig(), beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/21/12, 10:53 AM",
      "commitNameOld": "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (config.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, config, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 267,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,39 +1,39 @@\n-protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n+protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (config.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, config, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[type-JavaType, config-SerializationConfig, beanDesc-BasicBeanDescription, property-BeanProperty, staticTyping-boolean]",
        "newValue": "[type-JavaType, config-SerializationConfig, beanDesc-BeanDescription, property-BeanProperty, staticTyping-boolean]"
      }
    },
    "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2": {
      "type": "Ybodychange",
      "commitMessage": "Serializer-side refactoring\n",
      "commitDate": "1/21/12, 10:53 AM",
      "commitName": "197c58d39c8c797a64b31a8ad5f5c4444fa0e2e2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 12:31 PM",
      "commitNameOld": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (config.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return NumberSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, config, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 267,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,39 +1,39 @@\n protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (config.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n-        return StdSerializers.NumberSerializer.instance;\n+        return NumberSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, config, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb8d4b65187741fda92c9db366d7e95deaa38f1c": {
      "type": "Ymodifierchange",
      "commitMessage": "cleanup\n",
      "commitDate": "1/15/12, 3:29 PM",
      "commitName": "bb8d4b65187741fda92c9db366d7e95deaa38f1c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/14/12, 7:08 PM",
      "commitNameOld": "52a924401ffedeb1170401e760443e184692cbb1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (config.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return StdSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, config, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 280,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,39 +1,39 @@\n-public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n+protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (config.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return StdSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, config, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public, final]",
        "newValue": "[protected, final]"
      }
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/24/11, 10:07 PM",
      "commitNameOld": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.01,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (config.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return StdSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, config, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 243,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
      "diff": "@@ -1,39 +1,39 @@\n public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n-        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+        if (config.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return StdSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, config, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fcb1c2560541e2ff2f3fd6da99a95f69c2b28a8a": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Eliminated JsonSerializableWithType, by moving method down to JsonSerializable\n",
      "commitDate": "12/23/11, 6:34 PM",
      "commitName": "fcb1c2560541e2ff2f3fd6da99a95f69c2b28a8a",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Eliminated JsonSerializableWithType, by moving method down to JsonSerializable\n",
          "commitDate": "12/23/11, 6:34 PM",
          "commitName": "fcb1c2560541e2ff2f3fd6da99a95f69c2b28a8a",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/23/11, 6:23 PM",
          "commitNameOld": "d92c1ed454e8474103e7eb698b0a855e7850dbb5",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return StdSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, config, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 245,
          "functionName": "findSerializerByPrimaryType",
          "functionAnnotation": "",
          "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
          "diff": "@@ -1,43 +1,39 @@\n-@SuppressWarnings(\"deprecation\")\n public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n-        if (JsonSerializableWithType.class.isAssignableFrom(raw)) {\n-            return SerializableWithTypeSerializer.instance;\n-        }\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return StdSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, config, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Eliminated JsonSerializableWithType, by moving method down to JsonSerializable\n",
          "commitDate": "12/23/11, 6:34 PM",
          "commitName": "fcb1c2560541e2ff2f3fd6da99a95f69c2b28a8a",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/23/11, 6:23 PM",
          "commitNameOld": "d92c1ed454e8474103e7eb698b0a855e7850dbb5",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return StdSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, config, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 245,
          "functionName": "findSerializerByPrimaryType",
          "functionAnnotation": "",
          "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n",
          "diff": "@@ -1,43 +1,39 @@\n-@SuppressWarnings(\"deprecation\")\n public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n     Class\u003c?\u003e raw \u003d type.getRawClass();\n     if (JsonSerializable.class.isAssignableFrom(raw)) {\n-        if (JsonSerializableWithType.class.isAssignableFrom(raw)) {\n-            return SerializableWithTypeSerializer.instance;\n-        }\n         return SerializableSerializer.instance;\n     }\n     AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n     if (valueMethod !\u003d null) {\n         Method m \u003d valueMethod.getAnnotated();\n         if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n             ClassUtil.checkAndFixAccess(m);\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n         return new JsonValueSerializer(m, ser, property);\n     }\n     if (InetAddress.class.isAssignableFrom(raw)) {\n         return InetAddressSerializer.instance;\n     }\n     if (TimeZone.class.isAssignableFrom(raw)) {\n         return TimeZoneSerializer.instance;\n     }\n     JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     if (Number.class.isAssignableFrom(raw)) {\n         return StdSerializers.NumberSerializer.instance;\n     }\n     if (Enum.class.isAssignableFrom(raw)) {\n         @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n         return EnumSerializer.construct(enumClass, config, beanDesc);\n     }\n     if (Calendar.class.isAssignableFrom(raw)) {\n         return CalendarSerializer.instance;\n     }\n     if (java.util.Date.class.isAssignableFrom(raw)) {\n         return DateSerializer.instance;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"deprecation\")",
            "newValue": ""
          }
        }
      ]
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,43 @@\n+@SuppressWarnings(\"deprecation\")\n+public final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n+    Class\u003c?\u003e raw \u003d type.getRawClass();\n+    if (JsonSerializable.class.isAssignableFrom(raw)) {\n+        if (JsonSerializableWithType.class.isAssignableFrom(raw)) {\n+            return SerializableWithTypeSerializer.instance;\n+        }\n+        return SerializableSerializer.instance;\n+    }\n+    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n+    if (valueMethod !\u003d null) {\n+        Method m \u003d valueMethod.getAnnotated();\n+        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+            ClassUtil.checkAndFixAccess(m);\n+        }\n+        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n+        return new JsonValueSerializer(m, ser, property);\n+    }\n+    if (InetAddress.class.isAssignableFrom(raw)) {\n+        return InetAddressSerializer.instance;\n+    }\n+    if (TimeZone.class.isAssignableFrom(raw)) {\n+        return TimeZoneSerializer.instance;\n+    }\n+    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n+    if (ser !\u003d null) {\n+        return ser;\n+    }\n+    if (Number.class.isAssignableFrom(raw)) {\n+        return StdSerializers.NumberSerializer.instance;\n+    }\n+    if (Enum.class.isAssignableFrom(raw)) {\n+        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n+        return EnumSerializer.construct(enumClass, config, beanDesc);\n+    }\n+    if (Calendar.class.isAssignableFrom(raw)) {\n+        return CalendarSerializer.instance;\n+    }\n+    if (java.util.Date.class.isAssignableFrom(raw)) {\n+        return DateSerializer.instance;\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"deprecation\")\npublic final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(JavaType type, SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property, boolean staticTyping) throws JsonMappingException {\n    Class\u003c?\u003e raw \u003d type.getRawClass();\n    if (JsonSerializable.class.isAssignableFrom(raw)) {\n        if (JsonSerializableWithType.class.isAssignableFrom(raw)) {\n            return SerializableWithTypeSerializer.instance;\n        }\n        return SerializableSerializer.instance;\n    }\n    AnnotatedMethod valueMethod \u003d beanDesc.findJsonValueMethod();\n    if (valueMethod !\u003d null) {\n        Method m \u003d valueMethod.getAnnotated();\n        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n            ClassUtil.checkAndFixAccess(m);\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findSerializerFromAnnotation(config, valueMethod, property);\n        return new JsonValueSerializer(m, ser, property);\n    }\n    if (InetAddress.class.isAssignableFrom(raw)) {\n        return InetAddressSerializer.instance;\n    }\n    if (TimeZone.class.isAssignableFrom(raw)) {\n        return TimeZoneSerializer.instance;\n    }\n    JsonSerializer\u003c?\u003e ser \u003d optionalHandlers.findSerializer(config, type);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    if (Number.class.isAssignableFrom(raw)) {\n        return StdSerializers.NumberSerializer.instance;\n    }\n    if (Enum.class.isAssignableFrom(raw)) {\n        @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass \u003d (Class\u003cEnum\u003c?\u003e\u003e) raw;\n        return EnumSerializer.construct(enumClass, config, beanDesc);\n    }\n    if (Calendar.class.isAssignableFrom(raw)) {\n        return CalendarSerializer.instance;\n    }\n    if (java.util.Date.class.isAssignableFrom(raw)) {\n        return DateSerializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 247,
      "functionName": "findSerializerByPrimaryType",
      "functionAnnotation": "@SuppressWarnings(\"deprecation\")",
      "functionDoc": "Method for checking if we can determine serializer to use based on set of\nknown primary types, checking for set of known base types (exact matches\nhaving been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e).\nThis does not include \"secondary\" interfaces, but\nmostly concrete or abstract base classes.\n"
    }
  }
}