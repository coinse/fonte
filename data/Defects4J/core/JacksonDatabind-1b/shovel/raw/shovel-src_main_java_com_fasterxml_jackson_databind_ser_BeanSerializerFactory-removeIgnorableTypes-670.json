{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerFactory.java",
  "functionName": "removeIgnorableTypes",
  "functionId": "removeIgnorableTypes___config-SerializationConfig__beanDesc-BeanDescription__properties-List__BeanPropertyDefinition__",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method that will apply by-type limitations (as per [JACKSON-429]);\nby default this is based on {@link com.fasterxml.jackson.annotation.JsonIgnoreType} annotation but\ncan be supplied by module-provided introspectors too.\n",
  "functionStartLine": 670,
  "functionEndLine": 700,
  "numCommitsSeen": 70,
  "timeTaken": 2405,
  "changeHistory": [
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Ymultichange(Yparameterchange,Ybodychange)",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
          "commitDate": "1/22/12, 10:57 PM",
          "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/20/12, 8:16 PM",
          "commitNameOld": "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.11,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n    while (it.hasNext()) {\n        BeanPropertyDefinition property \u003d it.next();\n        AnnotatedMember accessor \u003d property.getAccessor();\n        if (accessor \u003d\u003d null) {\n            it.remove();\n            continue;\n        }\n        Class\u003c?\u003e type \u003d accessor.getRawType();\n        Boolean result \u003d ignores.get(type);\n        if (result \u003d\u003d null) {\n            BeanDescription desc \u003d config.introspectClassAnnotations(type);\n            AnnotatedClass ac \u003d desc.getClassInfo();\n            result \u003d intr.isIgnorableType(ac);\n            if (result \u003d\u003d null) {\n                result \u003d Boolean.FALSE;\n            }\n            ignores.put(type, result);\n        }\n        if (result.booleanValue()) {\n            it.remove();\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 610,
          "functionName": "removeIgnorableTypes",
          "functionAnnotation": "",
          "functionDoc": "Method that will apply by-type limitations (as per [JACKSON-429]);\nby default this is based on {@link com.fasterxml.jackson.annotation.JsonIgnoreType} annotation but\ncan be supplied by module-provided introspectors too.\n",
          "diff": "@@ -1,27 +1,27 @@\n-protected void removeIgnorableTypes(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n+protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n     while (it.hasNext()) {\n         BeanPropertyDefinition property \u003d it.next();\n         AnnotatedMember accessor \u003d property.getAccessor();\n         if (accessor \u003d\u003d null) {\n             it.remove();\n             continue;\n         }\n         Class\u003c?\u003e type \u003d accessor.getRawType();\n         Boolean result \u003d ignores.get(type);\n         if (result \u003d\u003d null) {\n-            BasicBeanDescription desc \u003d config.introspectClassAnnotations(type);\n+            BeanDescription desc \u003d config.introspectClassAnnotations(type);\n             AnnotatedClass ac \u003d desc.getClassInfo();\n             result \u003d intr.isIgnorableType(ac);\n             if (result \u003d\u003d null) {\n                 result \u003d Boolean.FALSE;\n             }\n             ignores.put(type, result);\n         }\n         if (result.booleanValue()) {\n             it.remove();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, beanDesc-BasicBeanDescription, properties-List\u003cBeanPropertyDefinition\u003e]",
            "newValue": "[config-SerializationConfig, beanDesc-BeanDescription, properties-List\u003cBeanPropertyDefinition\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
          "commitDate": "1/22/12, 10:57 PM",
          "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/20/12, 8:16 PM",
          "commitNameOld": "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.11,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n    while (it.hasNext()) {\n        BeanPropertyDefinition property \u003d it.next();\n        AnnotatedMember accessor \u003d property.getAccessor();\n        if (accessor \u003d\u003d null) {\n            it.remove();\n            continue;\n        }\n        Class\u003c?\u003e type \u003d accessor.getRawType();\n        Boolean result \u003d ignores.get(type);\n        if (result \u003d\u003d null) {\n            BeanDescription desc \u003d config.introspectClassAnnotations(type);\n            AnnotatedClass ac \u003d desc.getClassInfo();\n            result \u003d intr.isIgnorableType(ac);\n            if (result \u003d\u003d null) {\n                result \u003d Boolean.FALSE;\n            }\n            ignores.put(type, result);\n        }\n        if (result.booleanValue()) {\n            it.remove();\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 610,
          "functionName": "removeIgnorableTypes",
          "functionAnnotation": "",
          "functionDoc": "Method that will apply by-type limitations (as per [JACKSON-429]);\nby default this is based on {@link com.fasterxml.jackson.annotation.JsonIgnoreType} annotation but\ncan be supplied by module-provided introspectors too.\n",
          "diff": "@@ -1,27 +1,27 @@\n-protected void removeIgnorableTypes(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n+protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n     while (it.hasNext()) {\n         BeanPropertyDefinition property \u003d it.next();\n         AnnotatedMember accessor \u003d property.getAccessor();\n         if (accessor \u003d\u003d null) {\n             it.remove();\n             continue;\n         }\n         Class\u003c?\u003e type \u003d accessor.getRawType();\n         Boolean result \u003d ignores.get(type);\n         if (result \u003d\u003d null) {\n-            BasicBeanDescription desc \u003d config.introspectClassAnnotations(type);\n+            BeanDescription desc \u003d config.introspectClassAnnotations(type);\n             AnnotatedClass ac \u003d desc.getClassInfo();\n             result \u003d intr.isIgnorableType(ac);\n             if (result \u003d\u003d null) {\n                 result \u003d Boolean.FALSE;\n             }\n             ignores.put(type, result);\n         }\n         if (result.booleanValue()) {\n             it.remove();\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": {
      "type": "Ydocchange",
      "commitMessage": "Clean up, to get rid of deprecated stuff\n",
      "commitDate": "12/24/11, 10:07 PM",
      "commitName": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/11, 8:05 PM",
      "commitNameOld": "df6302f807bb230ae985a35100cbcc30af523bd1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void removeIgnorableTypes(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n    while (it.hasNext()) {\n        BeanPropertyDefinition property \u003d it.next();\n        AnnotatedMember accessor \u003d property.getAccessor();\n        if (accessor \u003d\u003d null) {\n            it.remove();\n            continue;\n        }\n        Class\u003c?\u003e type \u003d accessor.getRawType();\n        Boolean result \u003d ignores.get(type);\n        if (result \u003d\u003d null) {\n            BasicBeanDescription desc \u003d config.introspectClassAnnotations(type);\n            AnnotatedClass ac \u003d desc.getClassInfo();\n            result \u003d intr.isIgnorableType(ac);\n            if (result \u003d\u003d null) {\n                result \u003d Boolean.FALSE;\n            }\n            ignores.put(type, result);\n        }\n        if (result.booleanValue()) {\n            it.remove();\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 659,
      "functionName": "removeIgnorableTypes",
      "functionAnnotation": "",
      "functionDoc": "Method that will apply by-type limitations (as per [JACKSON-429]);\nby default this is based on {@link com.fasterxml.jackson.annotation.JsonIgnoreType} annotation but\ncan be supplied by module-provided introspectors too.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method that will apply by-type limitations (as per [JACKSON-429]);\nby default this is based on {@link org.codehaus.jackson.annotate.JsonIgnoreType} annotation but\ncan be supplied by module-provided introspectors too.\n",
        "newValue": "Method that will apply by-type limitations (as per [JACKSON-429]);\nby default this is based on {@link com.fasterxml.jackson.annotation.JsonIgnoreType} annotation but\ncan be supplied by module-provided introspectors too.\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,27 @@\n+protected void removeIgnorableTypes(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n+    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n+    Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n+    while (it.hasNext()) {\n+        BeanPropertyDefinition property \u003d it.next();\n+        AnnotatedMember accessor \u003d property.getAccessor();\n+        if (accessor \u003d\u003d null) {\n+            it.remove();\n+            continue;\n+        }\n+        Class\u003c?\u003e type \u003d accessor.getRawType();\n+        Boolean result \u003d ignores.get(type);\n+        if (result \u003d\u003d null) {\n+            BasicBeanDescription desc \u003d config.introspectClassAnnotations(type);\n+            AnnotatedClass ac \u003d desc.getClassInfo();\n+            result \u003d intr.isIgnorableType(ac);\n+            if (result \u003d\u003d null) {\n+                result \u003d Boolean.FALSE;\n+            }\n+            ignores.put(type, result);\n+        }\n+        if (result.booleanValue()) {\n+            it.remove();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void removeIgnorableTypes(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyDefinition\u003e properties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignores \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    Iterator\u003cBeanPropertyDefinition\u003e it \u003d properties.iterator();\n    while (it.hasNext()) {\n        BeanPropertyDefinition property \u003d it.next();\n        AnnotatedMember accessor \u003d property.getAccessor();\n        if (accessor \u003d\u003d null) {\n            it.remove();\n            continue;\n        }\n        Class\u003c?\u003e type \u003d accessor.getRawType();\n        Boolean result \u003d ignores.get(type);\n        if (result \u003d\u003d null) {\n            BasicBeanDescription desc \u003d config.introspectClassAnnotations(type);\n            AnnotatedClass ac \u003d desc.getClassInfo();\n            result \u003d intr.isIgnorableType(ac);\n            if (result \u003d\u003d null) {\n                result \u003d Boolean.FALSE;\n            }\n            ignores.put(type, result);\n        }\n        if (result.booleanValue()) {\n            it.remove();\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 694,
      "functionName": "removeIgnorableTypes",
      "functionAnnotation": "",
      "functionDoc": "Method that will apply by-type limitations (as per [JACKSON-429]);\nby default this is based on {@link org.codehaus.jackson.annotate.JsonIgnoreType} annotation but\ncan be supplied by module-provided introspectors too.\n"
    }
  }
}