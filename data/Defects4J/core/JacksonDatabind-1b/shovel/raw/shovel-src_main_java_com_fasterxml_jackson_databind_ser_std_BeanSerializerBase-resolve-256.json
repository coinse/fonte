{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerBase.java",
  "functionName": "resolve",
  "functionId": "resolve___provider-SerializerProvider",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
  "functionAnnotation": "@Override",
  "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
  "functionStartLine": 256,
  "functionEndLine": 328,
  "numCommitsSeen": 68,
  "timeTaken": 2627,
  "changeHistory": [
    "9fb0c8df13778d37a0b6b2e1de2b513950c21224",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
    "58077e9d135f0285a361a1d89b3767c5ece0095a",
    "d453182b63249c2c597a54229a4242e1ce1921d0",
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
    "82b474d51545919cb38a49485f56fd29d6ed199b",
    "071a170f20aa6571ab99c486e84b7032bab40131",
    "418a239a360683f065ea18fb4d1cb8d40c646c8e",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "9fb0c8df13778d37a0b6b2e1de2b513950c21224": "Yformatchange",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": "Ymultichange(Ybodychange,Yannotationchange,Ydocchange)",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": "Ymultichange(Yannotationchange,Ydocchange)",
    "58077e9d135f0285a361a1d89b3767c5ece0095a": "Ybodychange",
    "d453182b63249c2c597a54229a4242e1ce1921d0": "Ybodychange",
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664": "Ymultichange(Ybodychange,Ydocchange)",
    "82b474d51545919cb38a49485f56fd29d6ed199b": "Yformatchange",
    "071a170f20aa6571ab99c486e84b7032bab40131": "Ybodychange",
    "418a239a360683f065ea18fb4d1cb8d40c646c8e": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fb0c8df13778d37a0b6b2e1de2b513950c21224": {
      "type": "Yformatchange",
      "commitMessage": "Complete #125 implementation\n",
      "commitDate": "3/2/13, 6:04 PM",
      "commitName": "9fb0c8df13778d37a0b6b2e1de2b513950c21224",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 1:13 PM",
      "commitNameOld": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findConvertingSerializer(provider, prop);\n        if (ser \u003d\u003d null) {\n            JavaType type \u003d prop.getSerializationType();\n            if (type \u003d\u003d null) {\n                type \u003d provider.constructType(prop.getGenericPropertyType());\n                if (!type.isFinal()) {\n                    if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                        prop.setNonTrivialBaseType(type);\n                    }\n                    continue;\n                }\n            }\n            ser \u003d provider.findValueSerializer(type, prop);\n            if (type.isContainerType()) {\n                TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n                if (typeSer !\u003d null) {\n                    if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                        @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                        ser \u003d ser2;\n                    }\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 257,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": {
      "type": "Ymultichange(Ybodychange,Yannotationchange,Ydocchange)",
      "commitMessage": "Working on #124, serializer converters\n",
      "commitDate": "2/18/13, 9:25 PM",
      "commitName": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Working on #124, serializer converters\n",
          "commitDate": "2/18/13, 9:25 PM",
          "commitName": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "11/21/12, 7:58 PM",
          "commitNameOld": "43ca226d94361812e29372fde30ab191d929e1b2",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 89.06,
          "commitsBetweenForRepo": 96,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findConvertingSerializer(provider, prop);\n        if (ser \u003d\u003d null) {\n            JavaType type \u003d prop.getSerializationType();\n            if (type \u003d\u003d null) {\n                type \u003d provider.constructType(prop.getGenericPropertyType());\n                if (!type.isFinal()) {\n                    if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                        prop.setNonTrivialBaseType(type);\n                    }\n                    continue;\n                }\n            }\n            ser \u003d provider.findValueSerializer(type, prop);\n            if (type.isContainerType()) {\n                TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n                if (typeSer !\u003d null) {\n                    if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                        @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                        ser \u003d ser2;\n                    }\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 257,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
          "diff": "@@ -1,51 +1,55 @@\n+@Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n-        JavaType type \u003d prop.getSerializationType();\n-        if (type \u003d\u003d null) {\n-            type \u003d provider.constructType(prop.getGenericPropertyType());\n-            if (!type.isFinal()) {\n-                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n-                    prop.setNonTrivialBaseType(type);\n+        JsonSerializer\u003cObject\u003e ser \u003d findConvertingSerializer(provider, prop);\n+        if (ser \u003d\u003d null) {\n+            JavaType type \u003d prop.getSerializationType();\n+            if (type \u003d\u003d null) {\n+                type \u003d provider.constructType(prop.getGenericPropertyType());\n+                if (!type.isFinal()) {\n+                    if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n+                        prop.setNonTrivialBaseType(type);\n+                    }\n+                    continue;\n                 }\n-                continue;\n             }\n-        }\n-        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n-        if (type.isContainerType()) {\n-            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n-            if (typeSer !\u003d null) {\n-                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n-                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n-                    ser \u003d ser2;\n+            ser \u003d provider.findValueSerializer(type, prop);\n+            if (type.isContainerType()) {\n+                TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n+                if (typeSer !\u003d null) {\n+                    if (ser instanceof ContainerSerializer\u003c?\u003e) {\n+                        @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n+                        ser \u003d ser2;\n+                    }\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Working on #124, serializer converters\n",
          "commitDate": "2/18/13, 9:25 PM",
          "commitName": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "11/21/12, 7:58 PM",
          "commitNameOld": "43ca226d94361812e29372fde30ab191d929e1b2",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 89.06,
          "commitsBetweenForRepo": 96,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findConvertingSerializer(provider, prop);\n        if (ser \u003d\u003d null) {\n            JavaType type \u003d prop.getSerializationType();\n            if (type \u003d\u003d null) {\n                type \u003d provider.constructType(prop.getGenericPropertyType());\n                if (!type.isFinal()) {\n                    if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                        prop.setNonTrivialBaseType(type);\n                    }\n                    continue;\n                }\n            }\n            ser \u003d provider.findValueSerializer(type, prop);\n            if (type.isContainerType()) {\n                TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n                if (typeSer !\u003d null) {\n                    if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                        @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                        ser \u003d ser2;\n                    }\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 257,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
          "diff": "@@ -1,51 +1,55 @@\n+@Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n-        JavaType type \u003d prop.getSerializationType();\n-        if (type \u003d\u003d null) {\n-            type \u003d provider.constructType(prop.getGenericPropertyType());\n-            if (!type.isFinal()) {\n-                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n-                    prop.setNonTrivialBaseType(type);\n+        JsonSerializer\u003cObject\u003e ser \u003d findConvertingSerializer(provider, prop);\n+        if (ser \u003d\u003d null) {\n+            JavaType type \u003d prop.getSerializationType();\n+            if (type \u003d\u003d null) {\n+                type \u003d provider.constructType(prop.getGenericPropertyType());\n+                if (!type.isFinal()) {\n+                    if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n+                        prop.setNonTrivialBaseType(type);\n+                    }\n+                    continue;\n                 }\n-                continue;\n             }\n-        }\n-        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n-        if (type.isContainerType()) {\n-            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n-            if (typeSer !\u003d null) {\n-                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n-                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n-                    ser \u003d ser2;\n+            ser \u003d provider.findValueSerializer(type, prop);\n+            if (type.isContainerType()) {\n+                TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n+                if (typeSer !\u003d null) {\n+                    if (ser instanceof ContainerSerializer\u003c?\u003e) {\n+                        @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n+                        ser \u003d ser2;\n+                    }\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Working on #124, serializer converters\n",
          "commitDate": "2/18/13, 9:25 PM",
          "commitName": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "11/21/12, 7:58 PM",
          "commitNameOld": "43ca226d94361812e29372fde30ab191d929e1b2",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 89.06,
          "commitsBetweenForRepo": 96,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d findConvertingSerializer(provider, prop);\n        if (ser \u003d\u003d null) {\n            JavaType type \u003d prop.getSerializationType();\n            if (type \u003d\u003d null) {\n                type \u003d provider.constructType(prop.getGenericPropertyType());\n                if (!type.isFinal()) {\n                    if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                        prop.setNonTrivialBaseType(type);\n                    }\n                    continue;\n                }\n            }\n            ser \u003d provider.findValueSerializer(type, prop);\n            if (type.isContainerType()) {\n                TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n                if (typeSer !\u003d null) {\n                    if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                        @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                        ser \u003d ser2;\n                    }\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 257,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
          "diff": "@@ -1,51 +1,55 @@\n+@Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n-        JavaType type \u003d prop.getSerializationType();\n-        if (type \u003d\u003d null) {\n-            type \u003d provider.constructType(prop.getGenericPropertyType());\n-            if (!type.isFinal()) {\n-                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n-                    prop.setNonTrivialBaseType(type);\n+        JsonSerializer\u003cObject\u003e ser \u003d findConvertingSerializer(provider, prop);\n+        if (ser \u003d\u003d null) {\n+            JavaType type \u003d prop.getSerializationType();\n+            if (type \u003d\u003d null) {\n+                type \u003d provider.constructType(prop.getGenericPropertyType());\n+                if (!type.isFinal()) {\n+                    if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n+                        prop.setNonTrivialBaseType(type);\n+                    }\n+                    continue;\n                 }\n-                continue;\n             }\n-        }\n-        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n-        if (type.isContainerType()) {\n-            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n-            if (typeSer !\u003d null) {\n-                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n-                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n-                    ser \u003d ser2;\n+            ser \u003d provider.findValueSerializer(type, prop);\n+            if (type.isContainerType()) {\n+                TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n+                if (typeSer !\u003d null) {\n+                    if (ser instanceof ContainerSerializer\u003c?\u003e) {\n+                        @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n+                        ser \u003d ser2;\n+                    }\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n"
          }
        }
      ]
    },
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
      "commitDate": "4/17/12, 7:57 AM",
      "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/20/12, 5:08 PM",
          "commitNameOld": "3117c1049587534aaba37d2448f4aabeed24bf6d",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 27.62,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "actualSource": "public void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 234,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,52 +1,51 @@\n-@Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n                 if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                     @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/20/12, 5:08 PM",
          "commitNameOld": "3117c1049587534aaba37d2448f4aabeed24bf6d",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 27.62,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "actualSource": "public void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 234,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,52 +1,51 @@\n-@Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n                 if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                     @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
            "newValue": ""
          }
        }
      ]
    },
    "58077e9d135f0285a361a1d89b3767c5ece0095a": {
      "type": "Ybodychange",
      "commitMessage": "Ok, Object Id handling back to working as good as before refactoring, i.e. just for serialization...\n",
      "commitDate": "2/7/12, 7:47 PM",
      "commitName": "58077e9d135f0285a361a1d89b3767c5ece0095a",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/6/12, 10:44 PM",
      "commitNameOld": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 185,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
      "diff": "@@ -1,55 +1,52 @@\n @Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n                 if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                     @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n-    if (_objectIdHandler !\u003d null) {\n-        _objectIdHandler \u003d _objectIdHandler.withSerializer(provider);\n-    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d453182b63249c2c597a54229a4242e1ce1921d0": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring Object Id handling, after realizing first attempt is too limiting\n",
      "commitDate": "2/6/12, 10:44 PM",
      "commitName": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/5/12, 6:10 PM",
      "commitNameOld": "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.19,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n    if (_objectIdHandler !\u003d null) {\n        _objectIdHandler \u003d _objectIdHandler.withSerializer(provider);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 166,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
      "diff": "@@ -1,55 +1,55 @@\n @Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n                 if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                     @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n     if (_objectIdHandler !\u003d null) {\n-        _objectIdHandler \u003d _objectIdHandler.createContextual(provider);\n+        _objectIdHandler \u003d _objectIdHandler.withSerializer(provider);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Implement serialization part of [JACKSON-107]\n",
      "commitDate": "2/5/12, 6:10 PM",
      "commitName": "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Implement serialization part of [JACKSON-107]\n",
          "commitDate": "2/5/12, 6:10 PM",
          "commitName": "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/4/12, 9:59 PM",
          "commitNameOld": "c3617edebe4687842c70f84a3c16e8ab021fe630",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.84,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n    if (_objectIdHandler !\u003d null) {\n        _objectIdHandler \u003d _objectIdHandler.createContextual(provider);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 174,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
          "diff": "@@ -1,52 +1,55 @@\n @Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n                 if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                     @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n+    if (_objectIdHandler !\u003d null) {\n+        _objectIdHandler \u003d _objectIdHandler.createContextual(provider);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Implement serialization part of [JACKSON-107]\n",
          "commitDate": "2/5/12, 6:10 PM",
          "commitName": "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/4/12, 9:59 PM",
          "commitNameOld": "c3617edebe4687842c70f84a3c16e8ab021fe630",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.84,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n    if (_objectIdHandler !\u003d null) {\n        _objectIdHandler \u003d _objectIdHandler.createContextual(provider);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 174,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n",
          "diff": "@@ -1,52 +1,55 @@\n @Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n                 if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                     @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n+    if (_objectIdHandler !\u003d null) {\n+        _objectIdHandler \u003d _objectIdHandler.createContextual(provider);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "We need to implement {@link ResolvableSerializer} to be able to\nproperly handle cyclic type references.\n"
          }
        }
      ]
    },
    "82b474d51545919cb38a49485f56fd29d6ed199b": {
      "type": "Yformatchange",
      "commitMessage": "Fix 3 unit test failures\n",
      "commitDate": "2/2/12, 5:33 PM",
      "commitName": "82b474d51545919cb38a49485f56fd29d6ed199b",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/23/12, 3:52 PM",
      "commitNameOld": "85e635630c3076f48a0b264581e1073d39ac779e",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 10.07,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 299,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "071a170f20aa6571ab99c486e84b7032bab40131": {
      "type": "Ybodychange",
      "commitMessage": "Add \u0027ContainerSerializer\u0027 as a shared base class, with new \u0027getContentType()\u0027 method\n",
      "commitDate": "1/14/12, 5:40 PM",
      "commitName": "071a170f20aa6571ab99c486e84b7032bab40131",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/13/12, 10:25 PM",
      "commitNameOld": "4dc01e735c57e1a3d6e79f819713efaf77998edb",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 299,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,52 @@\n @Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n         if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n             JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n             if (nullSer !\u003d null) {\n                 prop.assignNullSerializer(nullSer);\n                 if (i \u003c filteredCount) {\n                     BeanPropertyWriter w2 \u003d _filteredProps[i];\n                     if (w2 !\u003d null) {\n                         w2.assignNullSerializer(nullSer);\n                     }\n                 }\n             }\n         }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n-                if (ser instanceof ContainerSerializerBase\u003c?\u003e) {\n-                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializerBase\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n+                if (ser instanceof ContainerSerializer\u003c?\u003e) {\n+                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializer\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n         prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n                 w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "418a239a360683f065ea18fb4d1cb8d40c646c8e": {
      "type": "Ybodychange",
      "commitMessage": "Adding unit tests for verifying \u0027isEmpty()\u0027, custom null value serialization\n",
      "commitDate": "1/12/12, 9:52 PM",
      "commitName": "418a239a360683f065ea18fb4d1cb8d40c646c8e",
      "commitAuthor": "Tatu",
      "commitDateOld": "12/24/11, 10:07 PM",
      "commitNameOld": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.99,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n            if (nullSer !\u003d null) {\n                prop.assignNullSerializer(nullSer);\n                if (i \u003c filteredCount) {\n                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n                    if (w2 !\u003d null) {\n                        w2.assignNullSerializer(nullSer);\n                    }\n                }\n            }\n        }\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializerBase\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializerBase\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop.assignSerializer(ser);\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                w2.assignSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 270,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,52 @@\n @Override\n public void resolve(SerializerProvider provider) throws JsonMappingException {\n     int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n     for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n         BeanPropertyWriter prop \u003d _props[i];\n+        if (!prop.willSuppressNulls() \u0026\u0026 !prop.hasNullSerializer()) {\n+            JsonSerializer\u003cObject\u003e nullSer \u003d provider.findNullValueSerializer(prop);\n+            if (nullSer !\u003d null) {\n+                prop.assignNullSerializer(nullSer);\n+                if (i \u003c filteredCount) {\n+                    BeanPropertyWriter w2 \u003d _filteredProps[i];\n+                    if (w2 !\u003d null) {\n+                        w2.assignNullSerializer(nullSer);\n+                    }\n+                }\n+            }\n+        }\n         if (prop.hasSerializer()) {\n             continue;\n         }\n         JavaType type \u003d prop.getSerializationType();\n         if (type \u003d\u003d null) {\n             type \u003d provider.constructType(prop.getGenericPropertyType());\n             if (!type.isFinal()) {\n                 if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                     prop.setNonTrivialBaseType(type);\n                 }\n                 continue;\n             }\n         }\n         JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n         if (type.isContainerType()) {\n             TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n             if (typeSer !\u003d null) {\n                 if (ser instanceof ContainerSerializerBase\u003c?\u003e) {\n                     @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializerBase\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                     ser \u003d ser2;\n                 }\n             }\n         }\n-        prop \u003d prop.withSerializer(ser);\n-        _props[i] \u003d prop;\n+        prop.assignSerializer(ser);\n         if (i \u003c filteredCount) {\n             BeanPropertyWriter w2 \u003d _filteredProps[i];\n             if (w2 !\u003d null) {\n-                _filteredProps[i] \u003d w2.withSerializer(ser);\n+                w2.assignSerializer(ser);\n             }\n         }\n     }\n     if (_anyGetterWriter !\u003d null) {\n         _anyGetterWriter.resolve(provider);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,41 @@\n+@Override\n+public void resolve(SerializerProvider provider) throws JsonMappingException {\n+    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n+    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n+        BeanPropertyWriter prop \u003d _props[i];\n+        if (prop.hasSerializer()) {\n+            continue;\n+        }\n+        JavaType type \u003d prop.getSerializationType();\n+        if (type \u003d\u003d null) {\n+            type \u003d provider.constructType(prop.getGenericPropertyType());\n+            if (!type.isFinal()) {\n+                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n+                    prop.setNonTrivialBaseType(type);\n+                }\n+                continue;\n+            }\n+        }\n+        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n+        if (type.isContainerType()) {\n+            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n+            if (typeSer !\u003d null) {\n+                if (ser instanceof ContainerSerializerBase\u003c?\u003e) {\n+                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializerBase\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n+                    ser \u003d ser2;\n+                }\n+            }\n+        }\n+        prop \u003d prop.withSerializer(ser);\n+        _props[i] \u003d prop;\n+        if (i \u003c filteredCount) {\n+            BeanPropertyWriter w2 \u003d _filteredProps[i];\n+            if (w2 !\u003d null) {\n+                _filteredProps[i] \u003d w2.withSerializer(ser);\n+            }\n+        }\n+    }\n+    if (_anyGetterWriter !\u003d null) {\n+        _anyGetterWriter.resolve(provider);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void resolve(SerializerProvider provider) throws JsonMappingException {\n    int filteredCount \u003d (_filteredProps \u003d\u003d null) ? 0 : _filteredProps.length;\n    for (int i \u003d 0, len \u003d _props.length; i \u003c len; ++i) {\n        BeanPropertyWriter prop \u003d _props[i];\n        if (prop.hasSerializer()) {\n            continue;\n        }\n        JavaType type \u003d prop.getSerializationType();\n        if (type \u003d\u003d null) {\n            type \u003d provider.constructType(prop.getGenericPropertyType());\n            if (!type.isFinal()) {\n                if (type.isContainerType() || type.containedTypeCount() \u003e 0) {\n                    prop.setNonTrivialBaseType(type);\n                }\n                continue;\n            }\n        }\n        JsonSerializer\u003cObject\u003e ser \u003d provider.findValueSerializer(type, prop);\n        if (type.isContainerType()) {\n            TypeSerializer typeSer \u003d type.getContentType().getTypeHandler();\n            if (typeSer !\u003d null) {\n                if (ser instanceof ContainerSerializerBase\u003c?\u003e) {\n                    @SuppressWarnings(\"unchecked\") JsonSerializer\u003cObject\u003e ser2 \u003d (JsonSerializer\u003cObject\u003e) ((ContainerSerializerBase\u003c?\u003e) ser).withValueTypeSerializer(typeSer);\n                    ser \u003d ser2;\n                }\n            }\n        }\n        prop \u003d prop.withSerializer(ser);\n        _props[i] \u003d prop;\n        if (i \u003c filteredCount) {\n            BeanPropertyWriter w2 \u003d _filteredProps[i];\n            if (w2 !\u003d null) {\n                _filteredProps[i] \u003d w2.withSerializer(ser);\n            }\n        }\n    }\n    if (_anyGetterWriter !\u003d null) {\n        _anyGetterWriter.resolve(provider);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 279,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}