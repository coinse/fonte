{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicSerializerFactory.java",
  "functionName": "findSerializerFromAnnotation",
  "functionId": "findSerializerFromAnnotation___prov-SerializerProvider__a-Annotated",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
  "functionStartLine": 445,
  "functionEndLine": 456,
  "numCommitsSeen": 101,
  "timeTaken": 2843,
  "changeHistory": [
    "be97826b2c8702639503cc6c7f8398d84073aaf0",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
    "334892f4c5c0f346248eb6ebae306330e6512d93",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "be97826b2c8702639503cc6c7f8398d84073aaf0": "Ymultichange(Ybodychange,Yannotationchange)",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": "Ybodychange",
    "334892f4c5c0f346248eb6ebae306330e6512d93": "Ymultichange(Yparameterchange,Ybodychange)",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange)",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "be97826b2c8702639503cc6c7f8398d84073aaf0": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Completed (?) #124 implementation: now Converters seem to work ok\n",
      "commitDate": "2/18/13, 10:28 PM",
      "commitName": "be97826b2c8702639503cc6c7f8398d84073aaf0",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Completed (?) #124 implementation: now Converters seem to work ok\n",
          "commitDate": "2/18/13, 10:28 PM",
          "commitName": "be97826b2c8702639503cc6c7f8398d84073aaf0",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/18/13, 9:25 PM",
          "commitNameOld": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d prov.serializerInstance(a, serDef);\n    return (JsonSerializer\u003cObject\u003e) findConvertingSerializer(prov, a, ser);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 439,
          "functionName": "findSerializerFromAnnotation",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
          "diff": "@@ -1,19 +1,9 @@\n+@SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n     Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d prov.serializerInstance(a, serDef);\n-    Converter\u003cObject, Object\u003e conv \u003d findConverterFromAnnotation(prov, a);\n-    if (conv !\u003d null) {\n-        TypeFactory tf \u003d prov.getTypeFactory();\n-        JavaType converterType \u003d tf.constructType(conv.getClass());\n-        JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n-        if (params \u003d\u003d null || params.length !\u003d 2) {\n-            throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n-        }\n-        JavaType delegateType \u003d params[1];\n-        return new StdDelegatingSerializer(conv, delegateType, ser);\n-    }\n-    return ser;\n+    return (JsonSerializer\u003cObject\u003e) findConvertingSerializer(prov, a, ser);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Completed (?) #124 implementation: now Converters seem to work ok\n",
          "commitDate": "2/18/13, 10:28 PM",
          "commitName": "be97826b2c8702639503cc6c7f8398d84073aaf0",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/18/13, 9:25 PM",
          "commitNameOld": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d prov.serializerInstance(a, serDef);\n    return (JsonSerializer\u003cObject\u003e) findConvertingSerializer(prov, a, ser);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 439,
          "functionName": "findSerializerFromAnnotation",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
          "diff": "@@ -1,19 +1,9 @@\n+@SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n     Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d prov.serializerInstance(a, serDef);\n-    Converter\u003cObject, Object\u003e conv \u003d findConverterFromAnnotation(prov, a);\n-    if (conv !\u003d null) {\n-        TypeFactory tf \u003d prov.getTypeFactory();\n-        JavaType converterType \u003d tf.constructType(conv.getClass());\n-        JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n-        if (params \u003d\u003d null || params.length !\u003d 2) {\n-            throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n-        }\n-        JavaType delegateType \u003d params[1];\n-        return new StdDelegatingSerializer(conv, delegateType, ser);\n-    }\n-    return ser;\n+    return (JsonSerializer\u003cObject\u003e) findConvertingSerializer(prov, a, ser);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@SuppressWarnings(\"unchecked\")"
          }
        }
      ]
    },
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": {
      "type": "Ybodychange",
      "commitMessage": "Working on #124, serializer converters\n",
      "commitDate": "2/18/13, 9:25 PM",
      "commitName": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/1/12, 11:40 PM",
      "commitNameOld": "8416dde89136e2fa8a6f996ce3196560eba1dd26",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 78.91,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d prov.serializerInstance(a, serDef);\n    Converter\u003cObject, Object\u003e conv \u003d findConverterFromAnnotation(prov, a);\n    if (conv !\u003d null) {\n        TypeFactory tf \u003d prov.getTypeFactory();\n        JavaType converterType \u003d tf.constructType(conv.getClass());\n        JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n        if (params \u003d\u003d null || params.length !\u003d 2) {\n            throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n        }\n        JavaType delegateType \u003d params[1];\n        return new StdDelegatingSerializer(conv, delegateType, ser);\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 438,
      "functionName": "findSerializerFromAnnotation",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
      "diff": "@@ -1,7 +1,19 @@\n protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n     Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n-    return prov.serializerInstance(a, serDef);\n+    JsonSerializer\u003cObject\u003e ser \u003d prov.serializerInstance(a, serDef);\n+    Converter\u003cObject, Object\u003e conv \u003d findConverterFromAnnotation(prov, a);\n+    if (conv !\u003d null) {\n+        TypeFactory tf \u003d prov.getTypeFactory();\n+        JavaType converterType \u003d tf.constructType(conv.getClass());\n+        JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n+        if (params \u003d\u003d null || params.length !\u003d 2) {\n+            throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n+        }\n+        JavaType delegateType \u003d params[1];\n+        return new StdDelegatingSerializer(conv, delegateType, ser);\n+    }\n+    return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "334892f4c5c0f346248eb6ebae306330e6512d93": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "...\n",
      "commitDate": "2/1/12, 8:01 PM",
      "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "...\n",
          "commitDate": "2/1/12, 8:01 PM",
          "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 6:17 PM",
          "commitNameOld": "67bf19c225daeef0ac0e6a0ea3f371b4d57946c4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    return prov.serializerInstance(a, serDef);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 395,
          "functionName": "findSerializerFromAnnotation",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
          "diff": "@@ -1,7 +1,7 @@\n-protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n+protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n     Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n-    return prov.serializerInstance(a, property, serDef);\n+    return prov.serializerInstance(a, serDef);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prov-SerializerProvider, a-Annotated, property-BeanProperty]",
            "newValue": "[prov-SerializerProvider, a-Annotated]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "...\n",
          "commitDate": "2/1/12, 8:01 PM",
          "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 6:17 PM",
          "commitNameOld": "67bf19c225daeef0ac0e6a0ea3f371b4d57946c4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    return prov.serializerInstance(a, serDef);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 395,
          "functionName": "findSerializerFromAnnotation",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
          "diff": "@@ -1,7 +1,7 @@\n-protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n+protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a) throws JsonMappingException {\n     Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n-    return prov.serializerInstance(a, property, serDef);\n+    return prov.serializerInstance(a, serDef);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yannotationchange)",
      "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
      "commitDate": "1/24/12, 6:51 PM",
      "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    return prov.serializerInstance(a, property, serDef);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 357,
          "functionName": "findSerializerFromAnnotation",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
          "diff": "@@ -1,26 +1,7 @@\n-@SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializationConfig config, Annotated a, BeanProperty property) throws JsonMappingException {\n-    Object serDef \u003d config.getAnnotationIntrospector().findSerializer(a);\n+protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n+    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n-    if (serDef instanceof JsonSerializer) {\n-        JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) serDef;\n-        if (ser instanceof ContextualSerializer\u003c?\u003e) {\n-            return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n-        }\n-        return ser;\n-    }\n-    if (!(serDef instanceof Class)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned value of type \" + serDef.getClass().getName() + \"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n-    }\n-    Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) serDef;\n-    if (!JsonSerializer.class.isAssignableFrom(cls)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + cls.getName() + \"; expected Class\u003cJsonSerializer\u003e\");\n-    }\n-    JsonSerializer\u003cObject\u003e ser \u003d config.serializerInstance(a, (Class\u003c? extends JsonSerializer\u003c?\u003e\u003e) cls);\n-    if (ser instanceof ContextualSerializer\u003c?\u003e) {\n-        return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n-    }\n-    return ser;\n+    return prov.serializerInstance(a, property, serDef);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, a-Annotated, property-BeanProperty]",
            "newValue": "[prov-SerializerProvider, a-Annotated, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    return prov.serializerInstance(a, property, serDef);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 357,
          "functionName": "findSerializerFromAnnotation",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
          "diff": "@@ -1,26 +1,7 @@\n-@SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializationConfig config, Annotated a, BeanProperty property) throws JsonMappingException {\n-    Object serDef \u003d config.getAnnotationIntrospector().findSerializer(a);\n+protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n+    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n-    if (serDef instanceof JsonSerializer) {\n-        JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) serDef;\n-        if (ser instanceof ContextualSerializer\u003c?\u003e) {\n-            return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n-        }\n-        return ser;\n-    }\n-    if (!(serDef instanceof Class)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned value of type \" + serDef.getClass().getName() + \"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n-    }\n-    Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) serDef;\n-    if (!JsonSerializer.class.isAssignableFrom(cls)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + cls.getName() + \"; expected Class\u003cJsonSerializer\u003e\");\n-    }\n-    JsonSerializer\u003cObject\u003e ser \u003d config.serializerInstance(a, (Class\u003c? extends JsonSerializer\u003c?\u003e\u003e) cls);\n-    if (ser instanceof ContextualSerializer\u003c?\u003e) {\n-        return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n-    }\n-    return ser;\n+    return prov.serializerInstance(a, property, serDef);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    return prov.serializerInstance(a, property, serDef);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
          "functionStartLine": 357,
          "functionName": "findSerializerFromAnnotation",
          "functionAnnotation": "",
          "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
          "diff": "@@ -1,26 +1,7 @@\n-@SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializationConfig config, Annotated a, BeanProperty property) throws JsonMappingException {\n-    Object serDef \u003d config.getAnnotationIntrospector().findSerializer(a);\n+protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov, Annotated a, BeanProperty property) throws JsonMappingException {\n+    Object serDef \u003d prov.getAnnotationIntrospector().findSerializer(a);\n     if (serDef \u003d\u003d null) {\n         return null;\n     }\n-    if (serDef instanceof JsonSerializer) {\n-        JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) serDef;\n-        if (ser instanceof ContextualSerializer\u003c?\u003e) {\n-            return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n-        }\n-        return ser;\n-    }\n-    if (!(serDef instanceof Class)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned value of type \" + serDef.getClass().getName() + \"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n-    }\n-    Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) serDef;\n-    if (!JsonSerializer.class.isAssignableFrom(cls)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + cls.getName() + \"; expected Class\u003cJsonSerializer\u003e\");\n-    }\n-    JsonSerializer\u003cObject\u003e ser \u003d config.serializerInstance(a, (Class\u003c? extends JsonSerializer\u003c?\u003e\u003e) cls);\n-    if (ser instanceof ContextualSerializer\u003c?\u003e) {\n-        return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n-    }\n-    return ser;\n+    return prov.serializerInstance(a, property, serDef);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"unchecked\")",
            "newValue": ""
          }
        }
      ]
    },
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": {
      "type": "Ydocchange",
      "commitMessage": "Clean up, to get rid of deprecated stuff\n",
      "commitDate": "12/24/11, 10:07 PM",
      "commitName": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/11, 8:25 PM",
      "commitNameOld": "2f823444ac34d14ab976b15e70ac82f2168ac7f8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializationConfig config, Annotated a, BeanProperty property) throws JsonMappingException {\n    Object serDef \u003d config.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    if (serDef instanceof JsonSerializer) {\n        JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) serDef;\n        if (ser instanceof ContextualSerializer\u003c?\u003e) {\n            return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n        }\n        return ser;\n    }\n    if (!(serDef instanceof Class)) {\n        throw new IllegalStateException(\"AnnotationIntrospector returned value of type \" + serDef.getClass().getName() + \"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n    }\n    Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) serDef;\n    if (!JsonSerializer.class.isAssignableFrom(cls)) {\n        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + cls.getName() + \"; expected Class\u003cJsonSerializer\u003e\");\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d config.serializerInstance(a, (Class\u003c? extends JsonSerializer\u003c?\u003e\u003e) cls);\n    if (ser instanceof ContextualSerializer\u003c?\u003e) {\n        return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 334,
      "functionName": "findSerializerFromAnnotation",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Helper method called to check if a class or method\nhas an annotation\n(@link org.codehaus.jackson.map.ser.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n",
        "newValue": "Helper method called to check if a class or method\nhas an annotation\n(@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,26 @@\n+@SuppressWarnings(\"unchecked\")\n+protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializationConfig config, Annotated a, BeanProperty property) throws JsonMappingException {\n+    Object serDef \u003d config.getAnnotationIntrospector().findSerializer(a);\n+    if (serDef \u003d\u003d null) {\n+        return null;\n+    }\n+    if (serDef instanceof JsonSerializer) {\n+        JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) serDef;\n+        if (ser instanceof ContextualSerializer\u003c?\u003e) {\n+            return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n+        }\n+        return ser;\n+    }\n+    if (!(serDef instanceof Class)) {\n+        throw new IllegalStateException(\"AnnotationIntrospector returned value of type \" + serDef.getClass().getName() + \"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n+    }\n+    Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) serDef;\n+    if (!JsonSerializer.class.isAssignableFrom(cls)) {\n+        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + cls.getName() + \"; expected Class\u003cJsonSerializer\u003e\");\n+    }\n+    JsonSerializer\u003cObject\u003e ser \u003d config.serializerInstance(a, (Class\u003c? extends JsonSerializer\u003c?\u003e\u003e) cls);\n+    if (ser instanceof ContextualSerializer\u003c?\u003e) {\n+        return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n+    }\n+    return ser;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializationConfig config, Annotated a, BeanProperty property) throws JsonMappingException {\n    Object serDef \u003d config.getAnnotationIntrospector().findSerializer(a);\n    if (serDef \u003d\u003d null) {\n        return null;\n    }\n    if (serDef instanceof JsonSerializer) {\n        JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) serDef;\n        if (ser instanceof ContextualSerializer\u003c?\u003e) {\n            return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n        }\n        return ser;\n    }\n    if (!(serDef instanceof Class)) {\n        throw new IllegalStateException(\"AnnotationIntrospector returned value of type \" + serDef.getClass().getName() + \"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n    }\n    Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) serDef;\n    if (!JsonSerializer.class.isAssignableFrom(cls)) {\n        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + cls.getName() + \"; expected Class\u003cJsonSerializer\u003e\");\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d config.serializerInstance(a, (Class\u003c? extends JsonSerializer\u003c?\u003e\u003e) cls);\n    if (ser instanceof ContextualSerializer\u003c?\u003e) {\n        return ((ContextualSerializer\u003cObject\u003e) ser).createContextual(config, property);\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
      "functionStartLine": 340,
      "functionName": "findSerializerFromAnnotation",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Helper method called to check if a class or method\nhas an annotation\n(@link org.codehaus.jackson.map.ser.JsonSerialize#using)\nthat tells the class to use for serialization.\nReturns null if no such annotation found.\n"
    }
  }
}