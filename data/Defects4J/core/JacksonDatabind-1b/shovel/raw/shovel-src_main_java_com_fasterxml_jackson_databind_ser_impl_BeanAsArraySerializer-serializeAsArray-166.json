{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanAsArraySerializer.java",
  "functionName": "serializeAsArray",
  "functionId": "serializeAsArray___bean-Object__jgen-JsonGenerator__provider-SerializerProvider",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 166,
  "functionEndLine": 199,
  "numCommitsSeen": 6,
  "timeTaken": 519,
  "changeHistory": [
    "9439a310c169a00cd01a4e9b64fb9f5441297b96",
    "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21",
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
    "dc65cc043479dd03dad878b22a9e5864e2e53bd7"
  ],
  "changeHistoryShort": {
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": "Ybodychange",
    "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21": "Ybodychange",
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c": "Yformatchange",
    "dc65cc043479dd03dad878b22a9e5864e2e53bd7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": {
      "type": "Ybodychange",
      "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
      "commitDate": "3/2/13, 1:13 PM",
      "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/19/12, 1:36 PM",
      "commitNameOld": "27d9cd8e9d881ad906b1804ef6daf5431c9cedfe",
      "commitAuthorOld": "Pascal Gelinas",
      "daysBetweenCommits": 164.03,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop \u003d\u003d null) {\n                jgen.writeNull();\n            } else {\n                prop.serializeAsColumn(bean, jgen, provider);\n            }\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java",
      "functionStartLine": 166,
      "functionName": "serializeAsArray",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n+    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop \u003d\u003d null) {\n                 jgen.writeNull();\n             } else {\n                 prop.serializeAsColumn(bean, jgen, provider);\n             }\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-855], add StackOverflowError as root cause\n",
      "commitDate": "8/1/12, 8:27 AM",
      "commitName": "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/23/12, 8:39 PM",
      "commitNameOld": "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 8.49,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop \u003d\u003d null) {\n                jgen.writeNull();\n            } else {\n                prop.serializeAsColumn(bean, jgen, provider);\n            }\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java",
      "functionStartLine": 150,
      "functionName": "serializeAsArray",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final BeanPropertyWriter[] props;\n     if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop \u003d\u003d null) {\n                 jgen.writeNull();\n             } else {\n                 prop.serializeAsColumn(bean, jgen, provider);\n             }\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n-        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n+        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c": {
      "type": "Yformatchange",
      "commitMessage": "Solidify POJOs-as-array functionality\n",
      "commitDate": "7/23/12, 8:39 PM",
      "commitName": "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/16/12, 9:58 PM",
      "commitNameOld": "593257dd0f9a50458a8a589410649fcaa80343a9",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.95,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop \u003d\u003d null) {\n                jgen.writeNull();\n            } else {\n                prop.serializeAsColumn(bean, jgen, provider);\n            }\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java",
      "functionStartLine": 150,
      "functionName": "serializeAsArray",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "dc65cc043479dd03dad878b22a9e5864e2e53bd7": {
      "type": "Yintroduced",
      "commitMessage": "Start work on \"POJOs-as-arrays\" serialization\n",
      "commitDate": "6/28/12, 10:23 PM",
      "commitName": "dc65cc043479dd03dad878b22a9e5864e2e53bd7",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,27 @@\n+protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    final BeanPropertyWriter[] props;\n+    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n+        props \u003d _filteredProps;\n+    } else {\n+        props \u003d _props;\n+    }\n+    int i \u003d 0;\n+    try {\n+        for (final int len \u003d props.length; i \u003c len; ++i) {\n+            BeanPropertyWriter prop \u003d props[i];\n+            if (prop \u003d\u003d null) {\n+                jgen.writeNull();\n+            } else {\n+                prop.serializeAsColumn(bean, jgen, provider);\n+            }\n+        }\n+    } catch (Exception e) {\n+        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n+        wrapAndThrow(provider, e, bean, name);\n+    } catch (StackOverflowError e) {\n+        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n+        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n+        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n+        throw mapE;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop \u003d\u003d null) {\n                jgen.writeNull();\n            } else {\n                prop.serializeAsColumn(bean, jgen, provider);\n            }\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java",
      "functionStartLine": 150,
      "functionName": "serializeAsArray",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}