{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-1b",
  "repositoryPath": "/tmp/JacksonDatabind-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerFactory.java",
  "functionName": "_constructWriter",
  "functionId": "_constructWriter___prov-SerializerProvider__propDef-BeanPropertyDefinition__typeContext-TypeBindings__pb-PropertyBuilder__staticTyping-boolean__accessor-AnnotatedMember",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
  "functionStartLine": 729,
  "functionEndLine": 765,
  "numCommitsSeen": 110,
  "timeTaken": 2468,
  "changeHistory": [
    "8d53c22404fbd066cf3f81d1248e188dba5caebd",
    "65b73d92974414c018dec24a67c285ae484654c8",
    "c24e1ba511132261d121d391838c2e3ce1e5f029",
    "334892f4c5c0f346248eb6ebae306330e6512d93",
    "a57eca7f47d03b26320348520e926dde0da68509",
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
    "f0929aca5a75fa6de54507e400d168a86e42b77a",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": "Ybodychange",
    "65b73d92974414c018dec24a67c285ae484654c8": "Ybodychange",
    "c24e1ba511132261d121d391838c2e3ce1e5f029": "Ymultichange(Yparameterchange,Ybodychange)",
    "334892f4c5c0f346248eb6ebae306330e6512d93": "Ybodychange",
    "a57eca7f47d03b26320348520e926dde0da68509": "Ybodychange",
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd": "Ymultichange(Yparameterchange,Ybodychange)",
    "f0929aca5a75fa6de54507e400d168a86e42b77a": "Ybodychange",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": "Ymultichange(Yparameterchange,Ybodychange)",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": {
      "type": "Ybodychange",
      "commitMessage": "More refactoring, piping through \"wrapper name\" so downstream code need not use introspector\n",
      "commitDate": "3/13/13, 3:56 PM",
      "commitName": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/13, 1:11 PM",
      "commitNameOld": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 10.07,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, propDef.getWrapperName(), pb.getClassAnnotations(), accessor, propDef.isRequired());\n    JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n    if (annotatedSerializer instanceof ResolvableSerializer) {\n        ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n    }\n    if (annotatedSerializer instanceof ContextualSerializer) {\n        annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n    }\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 729,
      "functionName": "_constructWriter",
      "functionAnnotation": "",
      "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
      "diff": "@@ -1,22 +1,22 @@\n protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n     final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n-    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n+    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, propDef.getWrapperName(), pb.getClassAnnotations(), accessor, propDef.isRequired());\n     JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n     if (annotatedSerializer instanceof ResolvableSerializer) {\n         ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n     }\n     if (annotatedSerializer instanceof ContextualSerializer) {\n         annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n     }\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65b73d92974414c018dec24a67c285ae484654c8": {
      "type": "Ybodychange",
      "commitMessage": "Starting to clean up SerializerFactory, to remove/reduce passing of BeanProperty, which in general is not available at time of call.\n",
      "commitDate": "9/30/12, 12:04 PM",
      "commitName": "65b73d92974414c018dec24a67c285ae484654c8",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/24/12, 1:33 PM",
      "commitNameOld": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 36.94,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n    if (annotatedSerializer instanceof ResolvableSerializer) {\n        ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n    }\n    if (annotatedSerializer instanceof ContextualSerializer) {\n        annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n    }\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 704,
      "functionName": "_constructWriter",
      "functionAnnotation": "",
      "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
      "diff": "@@ -1,22 +1,22 @@\n protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n     final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n     JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n     if (annotatedSerializer instanceof ResolvableSerializer) {\n         ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n     }\n     if (annotatedSerializer instanceof ContextualSerializer) {\n         annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n     }\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n     }\n-    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n+    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c24e1ba511132261d121d391838c2e3ce1e5f029": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yay! Fixed all the transient unit tests -- back to only 3 longer-term failing ones\n",
      "commitDate": "2/2/12, 5:49 PM",
      "commitName": "c24e1ba511132261d121d391838c2e3ce1e5f029",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yay! Fixed all the transient unit tests -- back to only 3 longer-term failing ones\n",
          "commitDate": "2/2/12, 5:49 PM",
          "commitName": "c24e1ba511132261d121d391838c2e3ce1e5f029",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/2/12, 5:33 PM",
          "commitNameOld": "82b474d51545919cb38a49485f56fd29d6ed199b",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n    if (annotatedSerializer instanceof ResolvableSerializer) {\n        ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n    }\n    if (annotatedSerializer instanceof ContextualSerializer) {\n        annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n    }\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 571,
          "functionName": "_constructWriter",
          "functionAnnotation": "",
          "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
          "diff": "@@ -1,16 +1,22 @@\n-protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n+protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n     final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n-    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n+    JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n+    if (annotatedSerializer instanceof ResolvableSerializer) {\n+        ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n+    }\n+    if (annotatedSerializer instanceof ContextualSerializer) {\n+        annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n+    }\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[propDef-BeanPropertyDefinition, prov-SerializerProvider, typeContext-TypeBindings, pb-PropertyBuilder, staticTyping-boolean, accessor-AnnotatedMember]",
            "newValue": "[prov-SerializerProvider, propDef-BeanPropertyDefinition, typeContext-TypeBindings, pb-PropertyBuilder, staticTyping-boolean, accessor-AnnotatedMember]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yay! Fixed all the transient unit tests -- back to only 3 longer-term failing ones\n",
          "commitDate": "2/2/12, 5:49 PM",
          "commitName": "c24e1ba511132261d121d391838c2e3ce1e5f029",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/2/12, 5:33 PM",
          "commitNameOld": "82b474d51545919cb38a49485f56fd29d6ed199b",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n    if (annotatedSerializer instanceof ResolvableSerializer) {\n        ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n    }\n    if (annotatedSerializer instanceof ContextualSerializer) {\n        annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n    }\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 571,
          "functionName": "_constructWriter",
          "functionAnnotation": "",
          "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
          "diff": "@@ -1,16 +1,22 @@\n-protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n+protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n     final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n-    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n+    JsonSerializer\u003c?\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n+    if (annotatedSerializer instanceof ResolvableSerializer) {\n+        ((ResolvableSerializer) annotatedSerializer).resolve(prov);\n+    }\n+    if (annotatedSerializer instanceof ContextualSerializer) {\n+        annotatedSerializer \u003d ((ContextualSerializer) annotatedSerializer).createContextual(prov, property);\n+    }\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "334892f4c5c0f346248eb6ebae306330e6512d93": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "2/1/12, 8:01 PM",
      "commitName": "334892f4c5c0f346248eb6ebae306330e6512d93",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/1/12, 6:17 PM",
      "commitNameOld": "67bf19c225daeef0ac0e6a0ea3f371b4d57946c4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 569,
      "functionName": "_constructWriter",
      "functionAnnotation": "",
      "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
      "diff": "@@ -1,16 +1,16 @@\n protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n     final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n-    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n+    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a57eca7f47d03b26320348520e926dde0da68509": {
      "type": "Ybodychange",
      "commitMessage": "Yet more refactoring, eliminating BeanProperty from TypeSerializer\n",
      "commitDate": "2/1/12, 3:26 PM",
      "commitName": "a57eca7f47d03b26320348520e926dde0da68509",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 9:32 PM",
      "commitNameOld": "58ada457706e9e05d12f45e58451b7daffdd5317",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 566,
      "functionName": "_constructWriter",
      "functionAnnotation": "",
      "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
      "diff": "@@ -1,16 +1,16 @@\n protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n     final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n     JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n-        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n+        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Piping view definitions through\n",
      "commitDate": "1/25/12, 5:36 PM",
      "commitName": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Piping view definitions through\n",
          "commitDate": "1/25/12, 5:36 PM",
          "commitName": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/25/12, 4:45 PM",
          "commitNameOld": "766dc878e14644301483f3ecff8b5af8579e5b86",
          "commitAuthorOld": "",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 672,
          "functionName": "_constructWriter",
          "functionAnnotation": "",
          "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
          "diff": "@@ -1,17 +1,16 @@\n-protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n+protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n+    final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n     JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n-    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n-    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n-    pbw.setViews(intr.findViews(accessor));\n+    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prov-SerializerProvider, typeContext-TypeBindings, pb-PropertyBuilder, staticTyping-boolean, name-String, accessor-AnnotatedMember]",
            "newValue": "[propDef-BeanPropertyDefinition, prov-SerializerProvider, typeContext-TypeBindings, pb-PropertyBuilder, staticTyping-boolean, accessor-AnnotatedMember]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Piping view definitions through\n",
          "commitDate": "1/25/12, 5:36 PM",
          "commitName": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/25/12, 4:45 PM",
          "commitNameOld": "766dc878e14644301483f3ecff8b5af8579e5b86",
          "commitAuthorOld": "",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n    final String name \u003d propDef.getName();\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    return pbw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 672,
          "functionName": "_constructWriter",
          "functionAnnotation": "",
          "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
          "diff": "@@ -1,17 +1,16 @@\n-protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n+protected BeanPropertyWriter _constructWriter(BeanPropertyDefinition propDef, SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException {\n+    final String name \u003d propDef.getName();\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n     JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n-    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n-    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n-    pbw.setViews(intr.findViews(accessor));\n+    BeanPropertyWriter pbw \u003d pb.buildWriter(propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     return pbw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f0929aca5a75fa6de54507e400d168a86e42b77a": {
      "type": "Ybodychange",
      "commitMessage": "Simplify/clean up annotation introspector parts\n",
      "commitDate": "1/25/12, 4:24 PM",
      "commitName": "f0929aca5a75fa6de54507e400d168a86e42b77a",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 6:51 PM",
      "commitNameOld": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n    pbw.setViews(intr.findViews(accessor));\n    return pbw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 673,
      "functionName": "_constructWriter",
      "functionAnnotation": "",
      "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
      "diff": "@@ -1,17 +1,17 @@\n protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n     if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n     JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n-    pbw.setViews(intr.findSerializationViews(accessor));\n+    pbw.setViews(intr.findViews(accessor));\n     return pbw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
      "commitDate": "1/24/12, 6:51 PM",
      "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n    pbw.setViews(intr.findSerializationViews(accessor));\n    return pbw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 673,
          "functionName": "_constructWriter",
          "functionAnnotation": "",
          "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
          "diff": "@@ -1,17 +1,17 @@\n-protected BeanPropertyWriter _constructWriter(SerializationConfig config, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n-    if (config.canOverrideAccessModifiers()) {\n+protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n+    if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n-    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(config, accessor, property);\n+    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n-        contentTypeSer \u003d findPropertyContentTypeSerializer(type, config, accessor, property);\n+        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n     }\n-    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, config, accessor, property);\n+    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n     pbw.setViews(intr.findSerializationViews(accessor));\n     return pbw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, typeContext-TypeBindings, pb-PropertyBuilder, staticTyping-boolean, name-String, accessor-AnnotatedMember]",
            "newValue": "[prov-SerializerProvider, typeContext-TypeBindings, pb-PropertyBuilder, staticTyping-boolean, name-String, accessor-AnnotatedMember]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n    if (prov.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n    pbw.setViews(intr.findSerializationViews(accessor));\n    return pbw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 673,
          "functionName": "_constructWriter",
          "functionAnnotation": "",
          "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
          "diff": "@@ -1,17 +1,17 @@\n-protected BeanPropertyWriter _constructWriter(SerializationConfig config, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n-    if (config.canOverrideAccessModifiers()) {\n+protected BeanPropertyWriter _constructWriter(SerializerProvider prov, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n+    if (prov.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n-    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(config, accessor, property);\n+    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(prov, accessor, property);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n-        contentTypeSer \u003d findPropertyContentTypeSerializer(type, config, accessor, property);\n+        contentTypeSer \u003d findPropertyContentTypeSerializer(type, prov.getConfig(), accessor, property);\n     }\n-    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, config, accessor, property);\n+    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n     pbw.setViews(intr.findSerializationViews(accessor));\n     return pbw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/24/11, 10:07 PM",
      "commitNameOld": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.01,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter _constructWriter(SerializationConfig config, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n    if (config.canOverrideAccessModifiers()) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(config, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, config, accessor, property);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, config, accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    pbw.setViews(intr.findSerializationViews(accessor));\n    return pbw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 718,
      "functionName": "_constructWriter",
      "functionAnnotation": "",
      "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n",
      "diff": "@@ -1,17 +1,17 @@\n protected BeanPropertyWriter _constructWriter(SerializationConfig config, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n-    if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+    if (config.canOverrideAccessModifiers()) {\n         accessor.fixAccess();\n     }\n     JavaType type \u003d accessor.getType(typeContext);\n     BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n     JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(config, accessor, property);\n     TypeSerializer contentTypeSer \u003d null;\n     if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n         contentTypeSer \u003d findPropertyContentTypeSerializer(type, config, accessor, property);\n     }\n     TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, config, accessor, property);\n     BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     pbw.setViews(intr.findSerializationViews(accessor));\n     return pbw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,17 @@\n+protected BeanPropertyWriter _constructWriter(SerializationConfig config, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n+    if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+        accessor.fixAccess();\n+    }\n+    JavaType type \u003d accessor.getType(typeContext);\n+    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n+    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(config, accessor, property);\n+    TypeSerializer contentTypeSer \u003d null;\n+    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n+        contentTypeSer \u003d findPropertyContentTypeSerializer(type, config, accessor, property);\n+    }\n+    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, config, accessor, property);\n+    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n+    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    pbw.setViews(intr.findSerializationViews(accessor));\n+    return pbw;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected BeanPropertyWriter _constructWriter(SerializationConfig config, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, String name, AnnotatedMember accessor) throws JsonMappingException {\n    if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n        accessor.fixAccess();\n    }\n    JavaType type \u003d accessor.getType(typeContext);\n    BeanProperty.Std property \u003d new BeanProperty.Std(name, type, pb.getClassAnnotations(), accessor);\n    JsonSerializer\u003cObject\u003e annotatedSerializer \u003d findSerializerFromAnnotation(config, accessor, property);\n    TypeSerializer contentTypeSer \u003d null;\n    if (ClassUtil.isCollectionMapOrArray(type.getRawClass())) {\n        contentTypeSer \u003d findPropertyContentTypeSerializer(type, config, accessor, property);\n    }\n    TypeSerializer typeSer \u003d findPropertyTypeSerializer(type, config, accessor, property);\n    BeanPropertyWriter pbw \u003d pb.buildWriter(name, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping);\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    pbw.setViews(intr.findSerializationViews(accessor));\n    return pbw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 754,
      "functionName": "_constructWriter",
      "functionAnnotation": "",
      "functionDoc": "Secondary helper method for constructing {@link BeanPropertyWriter} for\ngiven member (field or method).\n"
    }
  }
}