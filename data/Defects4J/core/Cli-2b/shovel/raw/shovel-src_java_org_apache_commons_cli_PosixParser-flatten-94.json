{
  "origin": "codeshovel",
  "repositoryName": "Cli-2b",
  "repositoryPath": "/tmp/Cli-2b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PosixParser.java",
  "functionName": "flatten",
  "functionId": "flatten___options-Options__arguments-String[]__stopAtNonOption-boolean",
  "sourceFilePath": "src/java/org/apache/commons/cli/PosixParser.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n",
  "functionStartLine": 94,
  "functionEndLine": 163,
  "numCommitsSeen": 17,
  "timeTaken": 646,
  "changeHistory": [
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "f1a32a54f9ccc6895f94122aa32937167cbc3d3c",
    "745d1a535c9cf45d24455afc150b808981c8e0df",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78"
  ],
  "changeHistoryShort": {
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ydocchange,Yformatchange)",
    "f1a32a54f9ccc6895f94122aa32937167cbc3d3c": "Ybodychange",
    "745d1a535c9cf45d24455afc150b808981c8e0df": "Ydocchange",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd": {
      "type": "Ybodychange",
      "commitMessage": "Stops the PosixParser from bursting options unecessarily, i.e. if -file is an acceptible option then it won\u0027t be broken into -f -i -l -e.\n\nPR: 32525\nSubmitted by:\tDavid Morris\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130108 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/27/04, 4:42 AM",
      "commitName": "45c01740a0bc7f9fcf74c1d0acebb55b139ffcfd",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "4/22/04, 4:00 PM",
      "commitNameOld": "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 248.57,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options \u003d options;\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\n    String token \u003d null;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.startsWith(\"--\")) {\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\n            } else {\n                tokens.add(token);\n            }\n        } else if (\"-\".equals(token)) {\n            processSingleHyphen(token);\n        } else if (token.startsWith(\"-\")) {\n            int tokenLength \u003d token.length();\n            if (tokenLength \u003d\u003d 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else if (options.hasOption(token)) {\n                tokens.add(token);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        } else {\n            if (stopAtNonOption) {\n                process(token);\n            } else {\n                tokens.add(token);\n            }\n        }\n        gobble(iter);\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 94,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n",
      "diff": "@@ -1,34 +1,36 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n     init();\n     this.options \u003d options;\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\n     String token \u003d null;\n     while (iter.hasNext()) {\n         token \u003d (String) iter.next();\n         if (token.startsWith(\"--\")) {\n             if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\n                 tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\n                 tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\n             } else {\n                 tokens.add(token);\n             }\n         } else if (\"-\".equals(token)) {\n             processSingleHyphen(token);\n         } else if (token.startsWith(\"-\")) {\n             int tokenLength \u003d token.length();\n             if (tokenLength \u003d\u003d 2) {\n                 processOptionToken(token, stopAtNonOption);\n+            } else if (options.hasOption(token)) {\n+                tokens.add(token);\n             } else {\n                 burstToken(token, stopAtNonOption);\n             }\n         } else {\n             if (stopAtNonOption) {\n                 process(token);\n             } else {\n                 tokens.add(token);\n             }\n         }\n         gobble(iter);\n     }\n     return (String[]) tokens.toArray(new String[] {});\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/19/02, 3:59 PM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options \u003d options;\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\n    String token \u003d null;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.startsWith(\"--\")) {\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\n            } else {\n                tokens.add(token);\n            }\n        } else if (\"-\".equals(token)) {\n            processSingleHyphen(token);\n        } else if (token.startsWith(\"-\")) {\n            int tokenLength \u003d token.length();\n            if (tokenLength \u003d\u003d 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        } else {\n            if (stopAtNonOption) {\n                process(token);\n            } else {\n                tokens.add(token);\n            }\n        }\n        gobble(iter);\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 139,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n",
            "newValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/19/02, 3:59 PM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options \u003d options;\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\n    String token \u003d null;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.startsWith(\"--\")) {\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\n            } else {\n                tokens.add(token);\n            }\n        } else if (\"-\".equals(token)) {\n            processSingleHyphen(token);\n        } else if (token.startsWith(\"-\")) {\n            int tokenLength \u003d token.length();\n            if (tokenLength \u003d\u003d 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        } else {\n            if (stopAtNonOption) {\n                process(token);\n            } else {\n                tokens.add(token);\n            }\n        }\n        gobble(iter);\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 139,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken(String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "f1a32a54f9ccc6895f94122aa32937167cbc3d3c": {
      "type": "Ybodychange",
      "commitMessage": "added support for special long options like in ls\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129810 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/9/02, 12:35 PM",
      "commitName": "f1a32a54f9ccc6895f94122aa32937167cbc3d3c",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/26/02, 1:15 PM",
      "commitNameOld": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 13.97,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options \u003d options;\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\n    String token \u003d null;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.startsWith(\"--\")) {\n            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\n                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\n                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\n            } else {\n                tokens.add(token);\n            }\n        } else if (\"-\".equals(token)) {\n            processSingleHyphen(token);\n        } else if (token.startsWith(\"-\")) {\n            int tokenLength \u003d token.length();\n            if (tokenLength \u003d\u003d 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        } else {\n            if (stopAtNonOption) {\n                process(token);\n            } else {\n                tokens.add(token);\n            }\n        }\n        gobble(iter);\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 137,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n",
      "diff": "@@ -1,29 +1,34 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n     init();\n     this.options \u003d options;\n     Iterator iter \u003d Arrays.asList(arguments).iterator();\n     String token \u003d null;\n     while (iter.hasNext()) {\n         token \u003d (String) iter.next();\n         if (token.startsWith(\"--\")) {\n-            tokens.add(token);\n+            if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\n+                tokens.add(token.substring(0, token.indexOf(\u0027\u003d\u0027)));\n+                tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1, token.length()));\n+            } else {\n+                tokens.add(token);\n+            }\n         } else if (\"-\".equals(token)) {\n             processSingleHyphen(token);\n         } else if (token.startsWith(\"-\")) {\n             int tokenLength \u003d token.length();\n             if (tokenLength \u003d\u003d 2) {\n                 processOptionToken(token, stopAtNonOption);\n             } else {\n                 burstToken(token, stopAtNonOption);\n             }\n         } else {\n             if (stopAtNonOption) {\n                 process(token);\n             } else {\n                 tokens.add(token);\n             }\n         }\n         gobble(iter);\n     }\n     return (String[]) tokens.toArray(new String[] {});\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "745d1a535c9cf45d24455afc150b808981c8e0df": {
      "type": "Ydocchange",
      "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/26/02, 1:15 PM",
      "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/24/02, 3:15 PM",
      "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 1.92,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options \u003d options;\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\n    String token \u003d null;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.startsWith(\"--\")) {\n            tokens.add(token);\n        } else if (\"-\".equals(token)) {\n            processSingleHyphen(token);\n        } else if (token.startsWith(\"-\")) {\n            int tokenLength \u003d token.length();\n            if (tokenLength \u003d\u003d 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        } else {\n            if (stopAtNonOption) {\n                process(token);\n            } else {\n                tokens.add(token);\n            }\n        }\n        gobble(iter);\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 137,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "\u003cp\u003eAn implementation of {@link Parser}\u0027s abstract\n{@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\n\n\u003cp\u003eThe following are the rules used by this flatten method.\n\u003col\u003e\n \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not\n burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each\n successive entry without further processing.  Otherwise, ignore\n \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\"\n just add the entry to the list of processed tokens\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters\n in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this\n is a valid {@link Option} id.  If it is a valid id, then add the\n entry to the list of processed tokens and set the current {@link Option}\n member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e\n is true, then the remaining entries are copied to the list of \n processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two\n characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then\n we need to burst the entry to determine its constituents.  For more\n information on the bursting algorithm see \n {@link PosixParser#burstToken( String, boolean) burstToken}.\u003c/li\u003e\n \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled \n by any of the previous rules, then the entry is added to the list\n of processed tokens.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The command line {@link Options}\n@param arguments The command line arguments to be parsed\n@param stopAtNonOption Specifies whether to stop flattening\nwhen an non option is found.\n@return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n"
      }
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Yintroduced",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/24/02, 3:15 PM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,29 @@\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n+    init();\n+    this.options \u003d options;\n+    Iterator iter \u003d Arrays.asList(arguments).iterator();\n+    String token \u003d null;\n+    while (iter.hasNext()) {\n+        token \u003d (String) iter.next();\n+        if (token.startsWith(\"--\")) {\n+            tokens.add(token);\n+        } else if (\"-\".equals(token)) {\n+            processSingleHyphen(token);\n+        } else if (token.startsWith(\"-\")) {\n+            int tokenLength \u003d token.length();\n+            if (tokenLength \u003d\u003d 2) {\n+                processOptionToken(token, stopAtNonOption);\n+            } else {\n+                burstToken(token, stopAtNonOption);\n+            }\n+        } else {\n+            if (stopAtNonOption) {\n+                process(token);\n+            } else {\n+                tokens.add(token);\n+            }\n+        }\n+        gobble(iter);\n+    }\n+    return (String[]) tokens.toArray(new String[] {});\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    this.options \u003d options;\n    Iterator iter \u003d Arrays.asList(arguments).iterator();\n    String token \u003d null;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.startsWith(\"--\")) {\n            tokens.add(token);\n        } else if (\"-\".equals(token)) {\n            processSingleHyphen(token);\n        } else if (token.startsWith(\"-\")) {\n            int tokenLength \u003d token.length();\n            if (tokenLength \u003d\u003d 2) {\n                processOptionToken(token, stopAtNonOption);\n            } else {\n                burstToken(token, stopAtNonOption);\n            }\n        } else {\n            if (stopAtNonOption) {\n                process(token);\n            } else {\n                tokens.add(token);\n            }\n        }\n        gobble(iter);\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 25,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}