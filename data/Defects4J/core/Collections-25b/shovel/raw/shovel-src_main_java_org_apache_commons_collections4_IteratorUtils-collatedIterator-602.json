{
  "origin": "codeshovel",
  "repositoryName": "Collections-25b",
  "repositoryPath": "/tmp/Collections-25b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IteratorUtils.java",
  "functionName": "collatedIterator",
  "functionId": "collatedIterator___comparator-Comparator__? super E__(modifiers-final)__iterator1-Iterator__? extends E__(modifiers-final)__iterator2-Iterator__? extends E__(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/collections4/IteratorUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param \u003cE\u003e the element type\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
  "functionStartLine": 602,
  "functionEndLine": 606,
  "numCommitsSeen": 111,
  "timeTaken": 5934,
  "changeHistory": [
    "a8d1066b5ec6b8ec6db6bdb47d947fccaa7d07bf",
    "38e3a7435f31c08445b359f130c4bb123061a1e4",
    "9aea104d8abb2269d032e13b70edc9d94c2cb2e9",
    "8ffb78ec50a5d3a79dbd0e76c36c50f3263594aa",
    "c301ea06f5f32d76b65bfeb920ce0eadc13cd702",
    "32dc4757e670a253f04fb41725051cfce40bc3f1",
    "702882dd7686ce154ec29a063436d37e2a31366f"
  ],
  "changeHistoryShort": {
    "a8d1066b5ec6b8ec6db6bdb47d947fccaa7d07bf": "Ymovefromfile",
    "38e3a7435f31c08445b359f130c4bb123061a1e4": "Ydocchange",
    "9aea104d8abb2269d032e13b70edc9d94c2cb2e9": "Yparametermetachange",
    "8ffb78ec50a5d3a79dbd0e76c36c50f3263594aa": "Yfilerename",
    "c301ea06f5f32d76b65bfeb920ce0eadc13cd702": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
    "32dc4757e670a253f04fb41725051cfce40bc3f1": "Ydocchange",
    "702882dd7686ce154ec29a063436d37e2a31366f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a8d1066b5ec6b8ec6db6bdb47d947fccaa7d07bf": {
      "type": "Ymovefromfile",
      "commitMessage": "[COLLECTIONS-452] Change package to o.a.c.collections4.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1469004 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/17/13, 10:37 AM",
      "commitName": "a8d1066b5ec6b8ec6db6bdb47d947fccaa7d07bf",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "4/16/13, 1:12 PM",
      "commitNameOld": "6a12cf861dc449eb650009078e0308f7da89ad61",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(final Comparator\u003c? super E\u003e comparator, final Iterator\u003c? extends E\u003e iterator1, final Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
      "path": "src/main/java/org/apache/commons/collections4/IteratorUtils.java",
      "functionStartLine": 535,
      "functionName": "collatedIterator",
      "functionAnnotation": "",
      "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param \u003cE\u003e the element type\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/collections/IteratorUtils.java",
        "newPath": "src/main/java/org/apache/commons/collections4/IteratorUtils.java",
        "oldMethodName": "collatedIterator",
        "newMethodName": "collatedIterator"
      }
    },
    "38e3a7435f31c08445b359f130c4bb123061a1e4": {
      "type": "Ydocchange",
      "commitMessage": "Complete javadoc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1436822 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/13, 1:54 AM",
      "commitName": "38e3a7435f31c08445b359f130c4bb123061a1e4",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/20/13, 5:28 PM",
      "commitNameOld": "80ec6a5e29bf3686abddd468b4502dac28e47b2f",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 1.35,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(final Comparator\u003c? super E\u003e comparator, final Iterator\u003c? extends E\u003e iterator1, final Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
      "path": "src/main/java/org/apache/commons/collections/IteratorUtils.java",
      "functionStartLine": 533,
      "functionName": "collatedIterator",
      "functionAnnotation": "",
      "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param \u003cE\u003e the element type\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
        "newValue": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param \u003cE\u003e the element type\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n"
      }
    },
    "9aea104d8abb2269d032e13b70edc9d94c2cb2e9": {
      "type": "Yparametermetachange",
      "commitMessage": "Where possible:\n- Add final modifier to private fields\n- Add final modifier to method parameters\n- Add final modifier to local variables\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1429905 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/7/13, 9:15 AM",
      "commitName": "9aea104d8abb2269d032e13b70edc9d94c2cb2e9",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "7/15/12, 8:00 AM",
      "commitNameOld": "6b73b4d72de6d4b5adea2431c467765734643dcb",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 176.09,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(final Comparator\u003c? super E\u003e comparator, final Iterator\u003c? extends E\u003e iterator1, final Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
      "path": "src/main/java/org/apache/commons/collections/IteratorUtils.java",
      "functionStartLine": 504,
      "functionName": "collatedIterator",
      "functionAnnotation": "",
      "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
      "diff": "@@ -1,3 +1,3 @@\n-public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n+public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(final Comparator\u003c? super E\u003e comparator, final Iterator\u003c? extends E\u003e iterator1, final Iterator\u003c? extends E\u003e iterator2) {\n     return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[comparator-Comparator\u003c? super E\u003e, iterator1-Iterator\u003c? extends E\u003e, iterator2-Iterator\u003c? extends E\u003e]",
        "newValue": "[comparator-Comparator\u003c? super E\u003e(modifiers-final), iterator1-Iterator\u003c? extends E\u003e(modifiers-final), iterator2-Iterator\u003c? extends E\u003e(modifiers-final)]"
      }
    },
    "8ffb78ec50a5d3a79dbd0e76c36c50f3263594aa": {
      "type": "Yfilerename",
      "commitMessage": "MOve to standard Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@1298531 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/8/12, 11:29 AM",
      "commitName": "8ffb78ec50a5d3a79dbd0e76c36c50f3263594aa",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "12/23/11, 8:17 AM",
      "commitNameOld": "e57889f7fc125b6f10203fa00d15dac81f577a6d",
      "commitAuthorOld": "Phil Steitz",
      "daysBetweenCommits": 76.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
      "path": "src/main/java/org/apache/commons/collections/IteratorUtils.java",
      "functionStartLine": 506,
      "functionName": "collatedIterator",
      "functionAnnotation": "",
      "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/collections/IteratorUtils.java",
        "newPath": "src/main/java/org/apache/commons/collections/IteratorUtils.java"
      }
    },
    "c301ea06f5f32d76b65bfeb920ce0eadc13cd702": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.\n\nAlso see the following revisions:\n\n    ------------------------------------------------------------------------\n    r753392 | mbenson | 2009-03-13 13:39:53 -0700 (Fri, 13 Mar 2009) | 1 line\n    \n    revert IteratorUtils stuff; toList() works fine for this--duh\n    ------------------------------------------------------------------------\n    r751850 | mbenson | 2009-03-09 14:34:44 -0700 (Mon, 09 Mar 2009) | 1 line\n    \n    add iterable(Iterator)\n    ------------------------------------------------------------------------\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@815061 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/14/09, 10:55 PM",
      "commitName": "c301ea06f5f32d76b65bfeb920ce0eadc13cd702",
      "commitAuthor": "Henri Yandell",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.\n\nAlso see the following revisions:\n\n    ------------------------------------------------------------------------\n    r753392 | mbenson | 2009-03-13 13:39:53 -0700 (Fri, 13 Mar 2009) | 1 line\n    \n    revert IteratorUtils stuff; toList() works fine for this--duh\n    ------------------------------------------------------------------------\n    r751850 | mbenson | 2009-03-09 14:34:44 -0700 (Mon, 09 Mar 2009) | 1 line\n    \n    add iterable(Iterator)\n    ------------------------------------------------------------------------\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@815061 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/14/09, 10:55 PM",
          "commitName": "c301ea06f5f32d76b65bfeb920ce0eadc13cd702",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "9/12/09, 2:46 AM",
          "commitNameOld": "ed205c04fc8f9c95bc498d51e6fec3a6a052ca11",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 2.84,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
          "path": "src/java/org/apache/commons/collections/IteratorUtils.java",
          "functionStartLine": 505,
          "functionName": "collatedIterator",
          "functionAnnotation": "",
          "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n-    return new CollatingIterator(comparator, iterator1, iterator2);\n+public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n+    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[comparator-Comparator, iterator1-Iterator, iterator2-Iterator]",
            "newValue": "[comparator-Comparator\u003c? super E\u003e, iterator1-Iterator\u003c? extends E\u003e, iterator2-Iterator\u003c? extends E\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.\n\nAlso see the following revisions:\n\n    ------------------------------------------------------------------------\n    r753392 | mbenson | 2009-03-13 13:39:53 -0700 (Fri, 13 Mar 2009) | 1 line\n    \n    revert IteratorUtils stuff; toList() works fine for this--duh\n    ------------------------------------------------------------------------\n    r751850 | mbenson | 2009-03-09 14:34:44 -0700 (Mon, 09 Mar 2009) | 1 line\n    \n    add iterable(Iterator)\n    ------------------------------------------------------------------------\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@815061 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/14/09, 10:55 PM",
          "commitName": "c301ea06f5f32d76b65bfeb920ce0eadc13cd702",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "9/12/09, 2:46 AM",
          "commitNameOld": "ed205c04fc8f9c95bc498d51e6fec3a6a052ca11",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 2.84,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
          "path": "src/java/org/apache/commons/collections/IteratorUtils.java",
          "functionStartLine": 505,
          "functionName": "collatedIterator",
          "functionAnnotation": "",
          "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n-    return new CollatingIterator(comparator, iterator1, iterator2);\n+public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n+    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Iterator",
            "newValue": "Iterator\u003cE\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.\n\nAlso see the following revisions:\n\n    ------------------------------------------------------------------------\n    r753392 | mbenson | 2009-03-13 13:39:53 -0700 (Fri, 13 Mar 2009) | 1 line\n    \n    revert IteratorUtils stuff; toList() works fine for this--duh\n    ------------------------------------------------------------------------\n    r751850 | mbenson | 2009-03-09 14:34:44 -0700 (Mon, 09 Mar 2009) | 1 line\n    \n    add iterable(Iterator)\n    ------------------------------------------------------------------------\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@815061 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/14/09, 10:55 PM",
          "commitName": "c301ea06f5f32d76b65bfeb920ce0eadc13cd702",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "9/12/09, 2:46 AM",
          "commitNameOld": "ed205c04fc8f9c95bc498d51e6fec3a6a052ca11",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 2.84,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
          "path": "src/java/org/apache/commons/collections/IteratorUtils.java",
          "functionStartLine": 505,
          "functionName": "collatedIterator",
          "functionAnnotation": "",
          "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n-    return new CollatingIterator(comparator, iterator1, iterator2);\n+public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n+    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.\n\nAlso see the following revisions:\n\n    ------------------------------------------------------------------------\n    r753392 | mbenson | 2009-03-13 13:39:53 -0700 (Fri, 13 Mar 2009) | 1 line\n    \n    revert IteratorUtils stuff; toList() works fine for this--duh\n    ------------------------------------------------------------------------\n    r751850 | mbenson | 2009-03-09 14:34:44 -0700 (Mon, 09 Mar 2009) | 1 line\n    \n    add iterable(Iterator)\n    ------------------------------------------------------------------------\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/collections/trunk@815061 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/14/09, 10:55 PM",
          "commitName": "c301ea06f5f32d76b65bfeb920ce0eadc13cd702",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "9/12/09, 2:46 AM",
          "commitNameOld": "ed205c04fc8f9c95bc498d51e6fec3a6a052ca11",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 2.84,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n}",
          "path": "src/java/org/apache/commons/collections/IteratorUtils.java",
          "functionStartLine": 505,
          "functionName": "collatedIterator",
          "functionAnnotation": "",
          "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
          "diff": "@@ -1,3 +1,3 @@\n-public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n-    return new CollatingIterator(comparator, iterator1, iterator2);\n+public static \u003cE\u003e Iterator\u003cE\u003e collatedIterator(Comparator\u003c? super E\u003e comparator, Iterator\u003c? extends E\u003e iterator1, Iterator\u003c? extends E\u003e iterator2) {\n+    return new CollatingIterator\u003cE\u003e(comparator, iterator1, iterator2);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of \n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
            "newValue": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of\n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n"
          }
        }
      ]
    },
    "32dc4757e670a253f04fb41725051cfce40bc3f1": {
      "type": "Ydocchange",
      "commitMessage": "Fixed JavaDoc errors.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk@130803 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/19/02, 2:56 PM",
      "commitName": "32dc4757e670a253f04fb41725051cfce40bc3f1",
      "commitAuthor": "pjack",
      "commitDateOld": "8/17/02, 3:14 PM",
      "commitNameOld": "5b1e83924116780c04ba5fadcb2673cb318d812d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 1.99,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n    return new CollatingIterator(comparator, iterator1, iterator2);\n}",
      "path": "src/java/org/apache/commons/collections/IteratorUtils.java",
      "functionStartLine": 296,
      "functionName": "collatedIterator",
      "functionAnnotation": "",
      "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of \n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link #next} method will return the lesser of \n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n",
        "newValue": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link Iterator#next()} method will return the lesser of \n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n"
      }
    },
    "702882dd7686ce154ec29a063436d37e2a31366f": {
      "type": "Yintroduced",
      "commitMessage": "Initial checkin\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/collections/trunk@130786 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/17/02, 4:38 AM",
      "commitName": "702882dd7686ce154ec29a063436d37e2a31366f",
      "commitAuthor": "Stephen Colebourne",
      "diff": "@@ -0,0 +1,3 @@\n+public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n+    return new CollatingIterator(comparator, iterator1, iterator2);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Iterator collatedIterator(Comparator comparator, Iterator iterator1, Iterator iterator2) {\n    return new CollatingIterator(comparator, iterator1, iterator2);\n}",
      "path": "src/java/org/apache/commons/collections/IteratorUtils.java",
      "functionStartLine": 283,
      "functionName": "collatedIterator",
      "functionAnnotation": "",
      "functionDoc": "Gets an iterator that provides an ordered iteration over the elements\ncontained in a collection of ordered {@link Iterator}s.\n\u003cp\u003e\nGiven two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\nthe {@link #next} method will return the lesser of \n\u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\n\u003cp\u003e\nThe comparator is optional. If null is specified then natural order is used.\n\n@param comparator the comparator to use, may be null for natural order\n@param iterator1 the first iterators to use, not null\n@param iterator2 the first iterators to use, not null\n@return a combination iterator over the iterators\n@throws NullPointerException if either iterator is null\n"
    }
  }
}