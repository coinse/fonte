{
  "origin": "codeshovel",
  "repositoryName": "Cli-25b",
  "repositoryPath": "/tmp/Cli-25b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HelpFormatter.java",
  "functionName": "renderOptions",
  "functionId": "renderOptions___sb-StringBuffer__width-int__options-Options__leftPad-int__descPad-int",
  "sourceFilePath": "src/java/org/apache/commons/cli/HelpFormatter.java",
  "functionAnnotation": "",
  "functionDoc": "Render the specified Options and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
  "functionStartLine": 714,
  "functionEndLine": 796,
  "numCommitsSeen": 35,
  "timeTaken": 1438,
  "changeHistory": [
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac",
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
    "a0212835ed42e03a01c2c930a695e478a0884f68",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25",
    "821b85fe781d57c9bd5851d3c95f3497ea397c17",
    "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
    "aae50c585ec3ac33c6a9af792e80378904a73195"
  ],
  "changeHistoryShort": {
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ymultichange(Ybodychange,Ydocchange)",
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac": "Ybodychange",
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b": "Ybodychange",
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8": "Ybodychange",
    "a0212835ed42e03a01c2c930a695e478a0884f68": "Ybodychange",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": "Ybodychange",
    "821b85fe781d57c9bd5851d3c95f3497ea397c17": "Ybodychange",
    "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7": "Ybodychange",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": "Ybodychange",
    "aae50c585ec3ac33c6a9af792e80378904a73195": "Yintroduced"
  },
  "changeHistoryDetails": {
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08, 1:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08, 1:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/30/08, 3:22 AM",
          "commitNameOld": "d36adebd3547279b709960c902c3fb7b89a9a4ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 59.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, getOptionComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        Option option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt() \u003d\u003d null) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        Option option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 710,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "Render the specified Options and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
          "diff": "@@ -1,49 +1,48 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n-    Option option;\n     List optList \u003d options.helpOptions();\n     Collections.sort(optList, getOptionComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n-        option \u003d (Option) i.next();\n+        Option option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt() \u003d\u003d null) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n-        option \u003d (Option) i.next();\n+        Option option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         if (option.getDescription() !\u003d null) {\n             optBuf.append(option.getDescription());\n         }\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08, 1:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "5/30/08, 3:22 AM",
          "commitNameOld": "d36adebd3547279b709960c902c3fb7b89a9a4ef",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 59.91,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, getOptionComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        Option option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt() \u003d\u003d null) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        Option option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 710,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "Render the specified Options and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
          "diff": "@@ -1,49 +1,48 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n-    Option option;\n     List optList \u003d options.helpOptions();\n     Collections.sort(optList, getOptionComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n-        option \u003d (Option) i.next();\n+        Option option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt() \u003d\u003d null) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n-        option \u003d (Option) i.next();\n+        Option option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         if (option.getDescription() !\u003d null) {\n             optBuf.append(option.getDescription());\n         }\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eRender the specified Options and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
            "newValue": "Render the specified Options and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n"
          }
        }
      ]
    },
    "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac": {
      "type": "Ybodychange",
      "commitMessage": "Making the OptionComparator modifiable so people can change the order in which arguments are printed by the HelpFormatter - as requested in CLI-155\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@655735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/12/08, 9:54 PM",
      "commitName": "df8f8e160c5fc9b955c627c4b65c7ba67088b7ac",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/7/08, 11:40 PM",
      "commitNameOld": "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 4.93,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, getOptionComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt() \u003d\u003d null) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 726,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     List optList \u003d options.helpOptions();\n-    Collections.sort(optList, new OptionComparator());\n+    Collections.sort(optList, getOptionComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt() \u003d\u003d null) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         if (option.getDescription() !\u003d null) {\n             optBuf.append(option.getDescription());\n         }\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db": {
      "type": "Ybodychange",
      "commitMessage": "Merged RESEARCH_CLI_2_ROXSPRING branch back to HEAD\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130066 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/22/04, 4:00 PM",
      "commitName": "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "2/29/04, 8:30 AM",
      "commitNameOld": "213c137b7515e71abf006611d8927b4fa68bd62b",
      "commitAuthorOld": "Yoav Shapira",
      "daysBetweenCommits": 53.27,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, new OptionComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt() \u003d\u003d null) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 643,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     List optList \u003d options.helpOptions();\n-    Collections.sort(optList, new StringBufferComparator());\n+    Collections.sort(optList, new OptionComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt() \u003d\u003d null) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n         max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         if (option.getDescription() !\u003d null) {\n             optBuf.append(option.getDescription());\n         }\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/19/02, 2:50 PM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, new StringBufferComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt() \u003d\u003d null) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 682,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
          "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     List optList \u003d options.helpOptions();\n     Collections.sort(optList, new StringBufferComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt() \u003d\u003d null) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n-        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n+        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         if (option.getDescription() !\u003d null) {\n             optBuf.append(option.getDescription());\n         }\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/19/02, 2:50 PM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, new StringBufferComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt() \u003d\u003d null) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 682,
          "functionName": "renderOptions",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified Options and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n",
          "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     List optList \u003d options.helpOptions();\n     Collections.sort(optList, new StringBufferComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt() \u003d\u003d null) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n-        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n+        max \u003d (optBuf.length() \u003e max) ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         if (option.getDescription() !\u003d null) {\n             optBuf.append(option.getDescription());\n         }\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eRender the specified Options and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered Options into.\n@param width The number of characters to display per line\n@param options The command line Options\n@param leftPad the number of characters of padding to be prefixed\nto each line\n@param descPad the number of characters of padding to be prefixed\nto each description line\n@return the StringBuffer with the rendered Options contents.\n"
          }
        }
      ]
    },
    "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b": {
      "type": "Ybodychange",
      "commitMessage": "applied some fixes to HelpFormatter, thanks to Rob and Boon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/19/02, 2:50 PM",
      "commitName": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
      "commitAuthor": "John Keyes",
      "commitDateOld": "11/15/02, 2:22 PM",
      "commitNameOld": "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 4.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, new StringBufferComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt() \u003d\u003d null) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 363,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,49 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     List optList \u003d options.helpOptions();\n     Collections.sort(optList, new StringBufferComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n-        if (option.getOpt().equals(\" \")) {\n+        if (option.getOpt() \u003d\u003d null) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n-                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\n+                optBuf.append(\" \u003c\").append(option.getArgName()).append(\"\u003e\");\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         if (option.getDescription() !\u003d null) {\n             optBuf.append(option.getDescription());\n         }\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8": {
      "type": "Ybodychange",
      "commitMessage": "some fixes to avoid \u0027null\u0027 appearing in the help output\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129844 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/15/02, 2:22 PM",
      "commitName": "4c34483ea18c6a4f259f19a6d18637bb1fbae1e8",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/11/02, 4:10 PM",
      "commitNameOld": "a0212835ed42e03a01c2c930a695e478a0884f68",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 34.97,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, new StringBufferComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt().equals(\" \")) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        if (option.getDescription() !\u003d null) {\n            optBuf.append(option.getDescription());\n        }\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 326,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,46 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     List optList \u003d options.helpOptions();\n     Collections.sort(optList, new StringBufferComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt().equals(\" \")) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n                 optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n     }\n     int x \u003d 0;\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n-        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n+        if (option.getDescription() !\u003d null) {\n+            optBuf.append(option.getDescription());\n+        }\n+        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a0212835ed42e03a01c2c930a695e478a0884f68": {
      "type": "Ybodychange",
      "commitMessage": "some fixes for autousage and padding\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/02, 4:10 PM",
      "commitName": "a0212835ed42e03a01c2c930a695e478a0884f68",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/8/02, 2:24 PM",
      "commitNameOld": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, new StringBufferComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt().equals(\" \")) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n    }\n    int x \u003d 0;\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 330,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,46 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     List optList \u003d options.helpOptions();\n     Collections.sort(optList, new StringBufferComparator());\n     for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt().equals(\" \")) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n             if (option.hasArgName()) {\n-                optBuf.append(option.getArgName());\n+                optBuf.append(\" \u003c\").append(option.getArgName()).append(\u0027\u003e\u0027);\n             } else {\n                 optBuf.append(\u0027 \u0027);\n             }\n         }\n         prefixList.add(optBuf);\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n+    }\n+    int x \u003d 0;\n+    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n+        option \u003d (Option) i.next();\n+        optBuf \u003d new StringBuffer(prefixList.get(x++).toString());\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n         int nextLineTabStop \u003d max + descPad;\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug 13425, added argName support, fixed some bugs in the HelpFormatter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/8/02, 2:24 PM",
      "commitName": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthor": "John Keyes",
      "commitDateOld": "9/19/02, 3:59 PM",
      "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 18.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    List optList \u003d options.helpOptions();\n    Collections.sort(optList, new StringBufferComparator());\n    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt().equals(\" \")) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            if (option.hasArgName()) {\n                optBuf.append(option.getArgName());\n            } else {\n                optBuf.append(\u0027 \u0027);\n            }\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n        int nextLineTabStop \u003d max + descPad;\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 333,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,49 +1,41 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n-    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n+    List optList \u003d options.helpOptions();\n+    Collections.sort(optList, new StringBufferComparator());\n+    for (Iterator i \u003d optList.iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         if (option.getOpt().equals(\" \")) {\n             optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n         } else {\n             optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n             if (option.hasLongOpt()) {\n                 optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n             }\n         }\n         if (option.hasArg()) {\n-            optBuf.append(\u0027 \u0027).append(defaultArgName);\n+            if (option.hasArgName()) {\n+                optBuf.append(option.getArgName());\n+            } else {\n+                optBuf.append(\u0027 \u0027);\n+            }\n         }\n         prefixList.add(optBuf);\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n-    }\n-    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n-        optBuf \u003d (StringBuffer) i.next();\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n-    }\n-    Collections.sort(prefixList, new StringBufferComparator());\n-    int nextLineTabStop \u003d max + descPad;\n-    String opt;\n-    int optOffset \u003d leftPad + defaultOptPrefix.length();\n-    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n-        optBuf \u003d (StringBuffer) i.next();\n-        opt \u003d optBuf.toString().trim();\n-        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\n-            opt \u003d opt.substring(0, opt.indexOf(\u0027,\u0027, optOffset));\n-        }\n-        option \u003d options.getOption(opt);\n+        int nextLineTabStop \u003d max + descPad;\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "821b85fe781d57c9bd5851d3c95f3497ea397c17": {
      "type": "Ybodychange",
      "commitMessage": "added Pete Maddocks fix for options only created with a longopt\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129813 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/9/02, 12:51 PM",
      "commitName": "821b85fe781d57c9bd5851d3c95f3497ea397c17",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/22/02, 3:49 PM",
      "commitNameOld": "c7127329dad2c5d6284532da09ddc0fdefd67436",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 48.88,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        if (option.getOpt().equals(\" \")) {\n            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n        } else {\n            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n            if (option.hasLongOpt()) {\n                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n            }\n        }\n        if (option.hasArg()) {\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n    }\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n    }\n    Collections.sort(prefixList, new StringBufferComparator());\n    int nextLineTabStop \u003d max + descPad;\n    String opt;\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        opt \u003d optBuf.toString().trim();\n        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\n            opt \u003d opt.substring(0, opt.indexOf(\u0027,\u0027, optOffset));\n        }\n        option \u003d options.getOption(opt);\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 321,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,49 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n-        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n-        if (option.hasLongOpt()) {\n-            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n+        if (option.getOpt().equals(\" \")) {\n+            optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n+        } else {\n+            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n+            if (option.hasLongOpt()) {\n+                optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n+            }\n         }\n         if (option.hasArg()) {\n             optBuf.append(\u0027 \u0027).append(defaultArgName);\n         }\n         prefixList.add(optBuf);\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n     }\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n         optBuf \u003d (StringBuffer) i.next();\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n     }\n     Collections.sort(prefixList, new StringBufferComparator());\n     int nextLineTabStop \u003d max + descPad;\n     String opt;\n     int optOffset \u003d leftPad + defaultOptPrefix.length();\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n         optBuf \u003d (StringBuffer) i.next();\n-        opt \u003d optBuf.toString();\n+        opt \u003d optBuf.toString().trim();\n         if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\n-            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027,\u0027, optOffset));\n-        } else {\n-            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027 \u0027, optOffset));\n+            opt \u003d opt.substring(0, opt.indexOf(\u0027,\u0027, optOffset));\n         }\n-        option \u003d options.getOption(\"-\" + opt);\n+        option \u003d options.getOption(opt);\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7": {
      "type": "Ybodychange",
      "commitMessage": "now supports new Option i.e. key changed from char to String\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/10/02, 2:08 PM",
      "commitName": "4dcbfa673771c8fcd2477cf7dd122ef8fe8967b7",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/9/02, 4:12 PM",
      "commitNameOld": "7e3bcff98a5e290755664dc27eb9b86ba64330d1",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 0.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n        if (option.hasLongOpt()) {\n            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n        }\n        if (option.hasArg()) {\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n    }\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n    }\n    Collections.sort(prefixList, new StringBufferComparator());\n    int nextLineTabStop \u003d max + descPad;\n    String opt;\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        opt \u003d optBuf.toString();\n        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\n            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027,\u0027, optOffset));\n        } else {\n            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027 \u0027, optOffset));\n        }\n        option \u003d options.getOption(\"-\" + opt);\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 198,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,42 +1,47 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n         if (option.hasLongOpt()) {\n             optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n         }\n         if (option.hasArg()) {\n             optBuf.append(\u0027 \u0027).append(defaultArgName);\n         }\n         prefixList.add(optBuf);\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n     }\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n         optBuf \u003d (StringBuffer) i.next();\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n     }\n     Collections.sort(prefixList, new StringBufferComparator());\n     int nextLineTabStop \u003d max + descPad;\n-    char opt;\n+    String opt;\n     int optOffset \u003d leftPad + defaultOptPrefix.length();\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n         optBuf \u003d (StringBuffer) i.next();\n-        opt \u003d optBuf.charAt(optOffset);\n-        option \u003d options.getOption(\"\" + opt);\n+        opt \u003d optBuf.toString();\n+        if (opt.indexOf(\u0027,\u0027) !\u003d -1) {\n+            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027,\u0027, optOffset));\n+        } else {\n+            opt \u003d opt.substring(optOffset, opt.indexOf(\u0027 \u0027, optOffset));\n+        }\n+        option \u003d options.getOption(\"-\" + opt);\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": {
      "type": "Ybodychange",
      "commitMessage": "configurable parser support added, PosixParser added\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/02, 4:00 PM",
      "commitName": "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
      "commitAuthor": "John Keyes",
      "commitDateOld": "6/10/02, 11:01 AM",
      "commitNameOld": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthorOld": "James Strachan",
      "daysBetweenCommits": 6.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n        if (option.hasLongOpt()) {\n            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n        }\n        if (option.hasArg()) {\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n    }\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n    }\n    Collections.sort(prefixList, new StringBufferComparator());\n    int nextLineTabStop \u003d max + descPad;\n    char opt;\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        opt \u003d optBuf.charAt(optOffset);\n        option \u003d options.getOption(\"\" + opt);\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 145,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,42 +1,42 @@\n protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n     final String lpad \u003d createPadding(leftPad);\n     final String dpad \u003d createPadding(descPad);\n     int max \u003d 0;\n     StringBuffer optBuf;\n     List prefixList \u003d new ArrayList();\n     Option option;\n     for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n         option \u003d (Option) i.next();\n         optBuf \u003d new StringBuffer(8);\n         optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n         if (option.hasLongOpt()) {\n             optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n         }\n         if (option.hasArg()) {\n             optBuf.append(\u0027 \u0027).append(defaultArgName);\n         }\n         prefixList.add(optBuf);\n         max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n     }\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n         optBuf \u003d (StringBuffer) i.next();\n         if (optBuf.length() \u003c max) {\n             optBuf.append(createPadding(max - optBuf.length()));\n         }\n         optBuf.append(dpad);\n     }\n     Collections.sort(prefixList, new StringBufferComparator());\n     int nextLineTabStop \u003d max + descPad;\n     char opt;\n     int optOffset \u003d leftPad + defaultOptPrefix.length();\n     for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n         optBuf \u003d (StringBuffer) i.next();\n         opt \u003d optBuf.charAt(optOffset);\n-        option \u003d options.getOption(opt);\n+        option \u003d options.getOption(\"\" + opt);\n         renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n         if (i.hasNext()) {\n             sb.append(defaultNewLine);\n         }\n     }\n     return sb;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aae50c585ec3ac33c6a9af792e80378904a73195": {
      "type": "Yintroduced",
      "commitMessage": "moved cli over from the sandbox to commons proper\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/10/02, 11:01 AM",
      "commitName": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthor": "James Strachan",
      "diff": "@@ -0,0 +1,42 @@\n+protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n+    final String lpad \u003d createPadding(leftPad);\n+    final String dpad \u003d createPadding(descPad);\n+    int max \u003d 0;\n+    StringBuffer optBuf;\n+    List prefixList \u003d new ArrayList();\n+    Option option;\n+    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n+        option \u003d (Option) i.next();\n+        optBuf \u003d new StringBuffer(8);\n+        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n+        if (option.hasLongOpt()) {\n+            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n+        }\n+        if (option.hasArg()) {\n+            optBuf.append(\u0027 \u0027).append(defaultArgName);\n+        }\n+        prefixList.add(optBuf);\n+        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n+    }\n+    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n+        optBuf \u003d (StringBuffer) i.next();\n+        if (optBuf.length() \u003c max) {\n+            optBuf.append(createPadding(max - optBuf.length()));\n+        }\n+        optBuf.append(dpad);\n+    }\n+    Collections.sort(prefixList, new StringBufferComparator());\n+    int nextLineTabStop \u003d max + descPad;\n+    char opt;\n+    int optOffset \u003d leftPad + defaultOptPrefix.length();\n+    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n+        optBuf \u003d (StringBuffer) i.next();\n+        opt \u003d optBuf.charAt(optOffset);\n+        option \u003d options.getOption(opt);\n+        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n+        if (i.hasNext()) {\n+            sb.append(defaultNewLine);\n+        }\n+    }\n+    return sb;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {\n    final String lpad \u003d createPadding(leftPad);\n    final String dpad \u003d createPadding(descPad);\n    int max \u003d 0;\n    StringBuffer optBuf;\n    List prefixList \u003d new ArrayList();\n    Option option;\n    for (Iterator i \u003d options.getOptions().iterator(); i.hasNext(); ) {\n        option \u003d (Option) i.next();\n        optBuf \u003d new StringBuffer(8);\n        optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n        if (option.hasLongOpt()) {\n            optBuf.append(\u0027,\u0027).append(defaultLongOptPrefix).append(option.getLongOpt());\n        }\n        if (option.hasArg()) {\n            optBuf.append(\u0027 \u0027).append(defaultArgName);\n        }\n        prefixList.add(optBuf);\n        max \u003d optBuf.length() \u003e max ? optBuf.length() : max;\n    }\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        if (optBuf.length() \u003c max) {\n            optBuf.append(createPadding(max - optBuf.length()));\n        }\n        optBuf.append(dpad);\n    }\n    Collections.sort(prefixList, new StringBufferComparator());\n    int nextLineTabStop \u003d max + descPad;\n    char opt;\n    int optOffset \u003d leftPad + defaultOptPrefix.length();\n    for (Iterator i \u003d prefixList.iterator(); i.hasNext(); ) {\n        optBuf \u003d (StringBuffer) i.next();\n        opt \u003d optBuf.charAt(optOffset);\n        option \u003d options.getOption(opt);\n        renderWrappedText(sb, width, nextLineTabStop, optBuf.append(option.getDescription()).toString());\n        if (i.hasNext()) {\n            sb.append(defaultNewLine);\n        }\n    }\n    return sb;\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 145,
      "functionName": "renderOptions",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}