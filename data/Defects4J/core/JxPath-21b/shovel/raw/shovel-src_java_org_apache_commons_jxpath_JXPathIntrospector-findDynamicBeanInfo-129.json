{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JXPathIntrospector.java",
  "functionName": "findDynamicBeanInfo",
  "functionId": "findDynamicBeanInfo___beanClass-Class",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/JXPathIntrospector.java",
  "functionAnnotation": "",
  "functionDoc": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n\n@param beanClass to search for\n@return JXPathBeanInfo\n",
  "functionStartLine": 129,
  "functionEndLine": 157,
  "numCommitsSeen": 17,
  "timeTaken": 432,
  "changeHistory": [
    "00d67383c2e842626710831782f7ec768d1ddc1c",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "bacfe155a8de2c044b8cfb2daa875623240bfe06",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "9d8c0fe0c12845c111d3cb1b0b11126839e764f5"
  ],
  "changeHistoryShort": {
    "00d67383c2e842626710831782f7ec768d1ddc1c": "Ymultichange(Ydocchange,Yformatchange)",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Yformatchange",
    "bacfe155a8de2c044b8cfb2daa875623240bfe06": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "9d8c0fe0c12845c111d3cb1b0b11126839e764f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "00d67383c2e842626710831782f7ec768d1ddc1c": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/3/08, 6:04 PM",
      "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
      "commitAuthor": "Matthew Jason Benson",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/3/08, 6:04 PM",
          "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/16/07, 11:29 PM",
          "commitNameOld": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 48.77,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n    JXPathBeanInfo beanInfo \u003d null;\n    if (beanClass.isInterface()) {\n        beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n    }\n    Class[] interfaces \u003d beanClass.getInterfaces();\n    if (interfaces !\u003d null) {\n        for (int i \u003d 0; i \u003c interfaces.length; i++) {\n            beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n            if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n                return beanInfo;\n            }\n        }\n    }\n    Class sup \u003d beanClass.getSuperclass();\n    if (sup !\u003d null) {\n        beanInfo \u003d (JXPathBeanInfo) byClass.get(sup);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n        return findDynamicBeanInfo(sup);\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathIntrospector.java",
          "functionStartLine": 125,
          "functionName": "findDynamicBeanInfo",
          "functionAnnotation": "",
          "functionDoc": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n\n@param beanClass to search for\n@return JXPathBeanInfo\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n",
            "newValue": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n\n@param beanClass to search for\n@return JXPathBeanInfo\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/3/08, 6:04 PM",
          "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/16/07, 11:29 PM",
          "commitNameOld": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 48.77,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n    JXPathBeanInfo beanInfo \u003d null;\n    if (beanClass.isInterface()) {\n        beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n    }\n    Class[] interfaces \u003d beanClass.getInterfaces();\n    if (interfaces !\u003d null) {\n        for (int i \u003d 0; i \u003c interfaces.length; i++) {\n            beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n            if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n                return beanInfo;\n            }\n        }\n    }\n    Class sup \u003d beanClass.getSuperclass();\n    if (sup !\u003d null) {\n        beanInfo \u003d (JXPathBeanInfo) byClass.get(sup);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n        return findDynamicBeanInfo(sup);\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathIntrospector.java",
          "functionStartLine": 125,
          "functionName": "findDynamicBeanInfo",
          "functionAnnotation": "",
          "functionDoc": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n\n@param beanClass to search for\n@return JXPathBeanInfo\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Yformatchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 383.08,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "actualSource": "private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n    JXPathBeanInfo beanInfo \u003d null;\n    if (beanClass.isInterface()) {\n        beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n    }\n    Class[] interfaces \u003d beanClass.getInterfaces();\n    if (interfaces !\u003d null) {\n        for (int i \u003d 0; i \u003c interfaces.length; i++) {\n            beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n            if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n                return beanInfo;\n            }\n        }\n    }\n    Class sup \u003d beanClass.getSuperclass();\n    if (sup !\u003d null) {\n        beanInfo \u003d (JXPathBeanInfo) byClass.get(sup);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n        return findDynamicBeanInfo(sup);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathIntrospector.java",
      "functionStartLine": 120,
      "functionName": "findDynamicBeanInfo",
      "functionAnnotation": "",
      "functionDoc": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "bacfe155a8de2c044b8cfb2daa875623240bfe06": {
      "type": "Ybodychange",
      "commitMessage": "Fixed dynamic BeanInfo lookup\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/8/04, 8:10 AM",
      "commitName": "bacfe155a8de2c044b8cfb2daa875623240bfe06",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/29/04, 6:17 AM",
      "commitNameOld": "4fc265a938e1e9d13c407d4668ec8c864e85d799",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 69.04,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n    JXPathBeanInfo beanInfo \u003d null;\n    if (beanClass.isInterface()) {\n        beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n    }\n    Class[] interfaces \u003d beanClass.getInterfaces();\n    if (interfaces !\u003d null) {\n        for (int i \u003d 0; i \u003c interfaces.length; i++) {\n            beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n            if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n                return beanInfo;\n            }\n        }\n    }\n    Class sup \u003d beanClass.getSuperclass();\n    if (sup !\u003d null) {\n        beanInfo \u003d (JXPathBeanInfo) byClass.get(sup);\n        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n            return beanInfo;\n        }\n        return findDynamicBeanInfo(sup);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathIntrospector.java",
      "functionStartLine": 119,
      "functionName": "findDynamicBeanInfo",
      "functionAnnotation": "",
      "functionDoc": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n",
      "diff": "@@ -1,23 +1,27 @@\n private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n-    JXPathBeanInfo beanInfo;\n+    JXPathBeanInfo beanInfo \u003d null;\n     if (beanClass.isInterface()) {\n         beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n-        if (beanInfo !\u003d null) {\n+        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n             return beanInfo;\n         }\n     }\n     Class[] interfaces \u003d beanClass.getInterfaces();\n     if (interfaces !\u003d null) {\n         for (int i \u003d 0; i \u003c interfaces.length; i++) {\n             beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n-            if (beanInfo !\u003d null) {\n+            if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n                 return beanInfo;\n             }\n         }\n     }\n     Class sup \u003d beanClass.getSuperclass();\n     if (sup !\u003d null) {\n+        beanInfo \u003d (JXPathBeanInfo) byClass.get(sup);\n+        if (beanInfo !\u003d null \u0026\u0026 beanInfo.isDynamic()) {\n+            return beanInfo;\n+        }\n         return findDynamicBeanInfo(sup);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/9/02, 6:27 PM",
      "commitNameOld": "9d8c0fe0c12845c111d3cb1b0b11126839e764f5",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 154.18,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "actualSource": "private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n    JXPathBeanInfo beanInfo;\n    if (beanClass.isInterface()) {\n        beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n        if (beanInfo !\u003d null) {\n            return beanInfo;\n        }\n    }\n    Class[] interfaces \u003d beanClass.getInterfaces();\n    if (interfaces !\u003d null) {\n        for (int i \u003d 0; i \u003c interfaces.length; i++) {\n            beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n            if (beanInfo !\u003d null) {\n                return beanInfo;\n            }\n        }\n    }\n    Class sup \u003d beanClass.getSuperclass();\n    if (sup !\u003d null) {\n        return findDynamicBeanInfo(sup);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathIntrospector.java",
      "functionStartLine": 164,
      "functionName": "findDynamicBeanInfo",
      "functionAnnotation": "",
      "functionDoc": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "9d8c0fe0c12845c111d3cb1b0b11126839e764f5": {
      "type": "Yintroduced",
      "commitMessage": "Interface-based introspection\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136784 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:27 PM",
      "commitName": "9d8c0fe0c12845c111d3cb1b0b11126839e764f5",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,23 @@\n+private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n+    JXPathBeanInfo beanInfo;\n+    if (beanClass.isInterface()) {\n+        beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n+        if (beanInfo !\u003d null) {\n+            return beanInfo;\n+        }\n+    }\n+    Class[] interfaces \u003d beanClass.getInterfaces();\n+    if (interfaces !\u003d null) {\n+        for (int i \u003d 0; i \u003c interfaces.length; i++) {\n+            beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n+            if (beanInfo !\u003d null) {\n+                return beanInfo;\n+            }\n+        }\n+    }\n+    Class sup \u003d beanClass.getSuperclass();\n+    if (sup !\u003d null) {\n+        return findDynamicBeanInfo(sup);\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static JXPathBeanInfo findDynamicBeanInfo(Class beanClass) {\n    JXPathBeanInfo beanInfo;\n    if (beanClass.isInterface()) {\n        beanInfo \u003d (JXPathBeanInfo) byInterface.get(beanClass);\n        if (beanInfo !\u003d null) {\n            return beanInfo;\n        }\n    }\n    Class[] interfaces \u003d beanClass.getInterfaces();\n    if (interfaces !\u003d null) {\n        for (int i \u003d 0; i \u003c interfaces.length; i++) {\n            beanInfo \u003d findDynamicBeanInfo(interfaces[i]);\n            if (beanInfo !\u003d null) {\n                return beanInfo;\n            }\n        }\n    }\n    Class sup \u003d beanClass.getSuperclass();\n    if (sup !\u003d null) {\n        return findDynamicBeanInfo(sup);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathIntrospector.java",
      "functionStartLine": 162,
      "functionName": "findDynamicBeanInfo",
      "functionAnnotation": "",
      "functionDoc": "Find a dynamic bean info if available for any superclasses or\ninterfaces.\n"
    }
  }
}