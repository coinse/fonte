{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "parseExpression",
  "functionId": "parseExpression___expression-String__compiler-Compiler",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n\n@param expression to parse\n@param compiler the compiler\n@return parsed Object\n",
  "functionStartLine": 43,
  "functionEndLine": 73,
  "numCommitsSeen": 14,
  "timeTaken": 251,
  "changeHistory": [
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "34d1c6cad33a94c24e55d456b550302db4914130",
    "34b7a47ae949c763178a457582a5df2cb564f53d",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ydocchange",
    "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "34d1c6cad33a94c24e55d456b550302db4914130": "Ymultichange(Ybodychange,Ydocchange)",
    "34b7a47ae949c763178a457582a5df2cb564f53d": "Ybodychange",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ydocchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/19/07, 3:24 PM",
      "commitNameOld": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 300.34,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Object parseExpression(String expression, Compiler compiler) {\n    synchronized (parser) {\n        parser.setCompiler(compiler);\n        Object expr \u003d null;\n        try {\n            parser.ReInit(new StringReader(expression));\n            expr \u003d parser.parseExpression();\n        } catch (TokenMgrError e) {\n            throw new JXPathInvalidSyntaxException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n        } catch (ParseException e) {\n            throw new JXPathInvalidSyntaxException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n        }\n        return expr;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/Parser.java",
      "functionStartLine": 43,
      "functionName": "parseExpression",
      "functionAnnotation": "",
      "functionDoc": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n\n@param expression to parse\n@param compiler the compiler\n@return parsed Object\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n",
        "newValue": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n\n@param expression to parse\n@param compiler the compiler\n@return parsed Object\n"
      }
    },
    "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0": {
      "type": "Ybodychange",
      "commitMessage": "Introduced specialized exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329481 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/29/05, 2:07 PM",
      "commitName": "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/26/05, 5:07 AM",
      "commitNameOld": "ecb571fc93e4a7bed9545a295c177d1ab4b1f4bf",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 245.33,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Object parseExpression(String expression, Compiler compiler) {\n    synchronized (parser) {\n        parser.setCompiler(compiler);\n        Object expr \u003d null;\n        try {\n            parser.ReInit(new StringReader(expression));\n            expr \u003d parser.parseExpression();\n        } catch (TokenMgrError e) {\n            throw new JXPathInvalidSyntaxException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n        } catch (ParseException e) {\n            throw new JXPathInvalidSyntaxException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n        }\n        return expr;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/Parser.java",
      "functionStartLine": 39,
      "functionName": "parseExpression",
      "functionAnnotation": "",
      "functionDoc": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n",
      "diff": "@@ -1,15 +1,15 @@\n public static Object parseExpression(String expression, Compiler compiler) {\n     synchronized (parser) {\n         parser.setCompiler(compiler);\n         Object expr \u003d null;\n         try {\n             parser.ReInit(new StringReader(expression));\n             expr \u003d parser.parseExpression();\n         } catch (TokenMgrError e) {\n-            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n+            throw new JXPathInvalidSyntaxException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n         } catch (ParseException e) {\n-            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n+            throw new JXPathInvalidSyntaxException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n         }\n         return expr;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/25/02, 8:28 PM",
      "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 260.09,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Object parseExpression(String expression, Compiler compiler) {\n    synchronized (parser) {\n        parser.setCompiler(compiler);\n        Object expr \u003d null;\n        try {\n            parser.ReInit(new StringReader(expression));\n            expr \u003d parser.parseExpression();\n        } catch (TokenMgrError e) {\n            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n        } catch (ParseException e) {\n            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n        }\n        return expr;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/Parser.java",
      "functionStartLine": 85,
      "functionName": "parseExpression",
      "functionAnnotation": "",
      "functionDoc": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "34d1c6cad33a94c24e55d456b550302db4914130": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Improved error reporting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 8:28 PM",
      "commitName": "34d1c6cad33a94c24e55d456b550302db4914130",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Improved error reporting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136731 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/25/02, 8:28 PM",
          "commitName": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/23/02, 9:06 PM",
          "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 1.97,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Object parseExpression(String expression, Compiler compiler) {\n    synchronized (parser) {\n        parser.setCompiler(compiler);\n        Object expr \u003d null;\n        try {\n            parser.ReInit(new StringReader(expression));\n            expr \u003d parser.parseExpression();\n        } catch (TokenMgrError e) {\n            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n        } catch (ParseException e) {\n            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n        }\n        return expr;\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/Parser.java",
          "functionStartLine": 85,
          "functionName": "parseExpression",
          "functionAnnotation": "",
          "functionDoc": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n",
          "diff": "@@ -1,14 +1,15 @@\n public static Object parseExpression(String expression, Compiler compiler) {\n-    if (parser \u003d\u003d null) {\n-        parser \u003d new XPathParser(new StringReader(\"\"));\n+    synchronized (parser) {\n+        parser.setCompiler(compiler);\n+        Object expr \u003d null;\n+        try {\n+            parser.ReInit(new StringReader(expression));\n+            expr \u003d parser.parseExpression();\n+        } catch (TokenMgrError e) {\n+            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n+        } catch (ParseException e) {\n+            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n+        }\n+        return expr;\n     }\n-    parser.setCompiler(compiler);\n-    parser.ReInit(new StringReader(expression));\n-    Object expr \u003d null;\n-    try {\n-        expr \u003d parser.parseExpression();\n-    } catch (ParseException e) {\n-        throw new RuntimeException(e.getMessage());\n-    }\n-    return expr;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Improved error reporting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136731 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/25/02, 8:28 PM",
          "commitName": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/23/02, 9:06 PM",
          "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 1.97,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Object parseExpression(String expression, Compiler compiler) {\n    synchronized (parser) {\n        parser.setCompiler(compiler);\n        Object expr \u003d null;\n        try {\n            parser.ReInit(new StringReader(expression));\n            expr \u003d parser.parseExpression();\n        } catch (TokenMgrError e) {\n            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n        } catch (ParseException e) {\n            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n        }\n        return expr;\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/Parser.java",
          "functionStartLine": 85,
          "functionName": "parseExpression",
          "functionAnnotation": "",
          "functionDoc": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n",
          "diff": "@@ -1,14 +1,15 @@\n public static Object parseExpression(String expression, Compiler compiler) {\n-    if (parser \u003d\u003d null) {\n-        parser \u003d new XPathParser(new StringReader(\"\"));\n+    synchronized (parser) {\n+        parser.setCompiler(compiler);\n+        Object expr \u003d null;\n+        try {\n+            parser.ReInit(new StringReader(expression));\n+            expr \u003d parser.parseExpression();\n+        } catch (TokenMgrError e) {\n+            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Invalid symbol \u0027\" + addEscapes(String.valueOf(e.getCharacter())) + \"\u0027 \" + describePosition(expression, e.getPosition()));\n+        } catch (ParseException e) {\n+            throw new JXPathException(\"Invalid XPath: \u0027\" + addEscapes(expression) + \"\u0027. Syntax error \" + describePosition(expression, e.currentToken.beginColumn));\n+        }\n+        return expr;\n     }\n-    parser.setCompiler(compiler);\n-    parser.ReInit(new StringReader(expression));\n-    Object expr \u003d null;\n-    try {\n-        expr \u003d parser.parseExpression();\n-    } catch (ParseException e) {\n-        throw new RuntimeException(e.getMessage());\n-    }\n-    return expr;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Parses the XPath expression. Throws a JXPathException in case\nof a syntax error.\n"
          }
        }
      ]
    },
    "34b7a47ae949c763178a457582a5df2cb564f53d": {
      "type": "Ybodychange",
      "commitMessage": "Multiple changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/9/02, 8:40 PM",
      "commitName": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/22/01, 5:47 PM",
      "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 230.12,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Object parseExpression(String expression, Compiler compiler) {\n    if (parser \u003d\u003d null) {\n        parser \u003d new XPathParser(new StringReader(\"\"));\n    }\n    parser.setCompiler(compiler);\n    parser.ReInit(new StringReader(expression));\n    Object expr \u003d null;\n    try {\n        expr \u003d parser.parseExpression();\n    } catch (ParseException e) {\n        throw new RuntimeException(e.getMessage());\n    }\n    return expr;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/Parser.java",
      "functionStartLine": 78,
      "functionName": "parseExpression",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,14 @@\n public static Object parseExpression(String expression, Compiler compiler) {\n     if (parser \u003d\u003d null) {\n         parser \u003d new XPathParser(new StringReader(\"\"));\n     }\n     parser.setCompiler(compiler);\n     parser.ReInit(new StringReader(expression));\n     Object expr \u003d null;\n     try {\n         expr \u003d parser.parseExpression();\n     } catch (ParseException e) {\n-        System.err.println(\"Failed: \" + expression);\n-        e.printStackTrace();\n+        throw new RuntimeException(e.getMessage());\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,15 @@\n+public static Object parseExpression(String expression, Compiler compiler) {\n+    if (parser \u003d\u003d null) {\n+        parser \u003d new XPathParser(new StringReader(\"\"));\n+    }\n+    parser.setCompiler(compiler);\n+    parser.ReInit(new StringReader(expression));\n+    Object expr \u003d null;\n+    try {\n+        expr \u003d parser.parseExpression();\n+    } catch (ParseException e) {\n+        System.err.println(\"Failed: \" + expression);\n+        e.printStackTrace();\n+    }\n+    return expr;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Object parseExpression(String expression, Compiler compiler) {\n    if (parser \u003d\u003d null) {\n        parser \u003d new XPathParser(new StringReader(\"\"));\n    }\n    parser.setCompiler(compiler);\n    parser.ReInit(new StringReader(expression));\n    Object expr \u003d null;\n    try {\n        expr \u003d parser.parseExpression();\n    } catch (ParseException e) {\n        System.err.println(\"Failed: \" + expression);\n        e.printStackTrace();\n    }\n    return expr;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/Parser.java",
      "functionStartLine": 78,
      "functionName": "parseExpression",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}