{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PredicateContext.java",
  "functionName": "nextNode",
  "functionId": "nextNode",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 55,
  "functionEndLine": 112,
  "numCommitsSeen": 36,
  "timeTaken": 639,
  "changeHistory": [
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
    "00d67383c2e842626710831782f7ec768d1ddc1c",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "a1f15e0df331f424e3a993754ae6e072e12ff921",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
    "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4",
    "d1c2ae2b56e1eb4cb22caea0ba06bda89e5d0b4e",
    "ebe43573039242c0997bef4938cb1e2d81d08ea0",
    "323e8b214459b3977973c01a048a979dc778f100",
    "f29394859dec11a4f037668aa33edae26338fb73",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "207c6dd98407506ff367d072be25b56f37989215",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f": "Ydocchange",
    "00d67383c2e842626710831782f7ec768d1ddc1c": "Ymultichange(Ydocchange,Yformatchange)",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Yformatchange",
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "a1f15e0df331f424e3a993754ae6e072e12ff921": "Ybodychange",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": "Yformatchange",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": "Yformatchange",
    "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4": "Ybodychange",
    "d1c2ae2b56e1eb4cb22caea0ba06bda89e5d0b4e": "Ybodychange",
    "ebe43573039242c0997bef4938cb1e2d81d08ea0": "Ybodychange",
    "323e8b214459b3977973c01a048a979dc778f100": "Ybodychange",
    "f29394859dec11a4f037668aa33edae26338fb73": "Ymultichange(Yrename,Ybodychange)",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Ybodychange",
    "207c6dd98407506ff367d072be25b56f37989215": "Ybodychange",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f": {
      "type": "Ydocchange",
      "commitMessage": "Improved the Javadoc:\n- added external links to JDOM, BeanUtils, and JEE\n- added @links in the class and method documentations to improve the navigation\n- removed the @inheritDoc with no additional comments\nAdded line feeds at the end of the source files\nRemoved the old constructors and the suite() methods from the JUnit tests\nUpdated the relocated artifacts in the POM\nDowngraded the dependency on JUnit to 3.8.1\nAdded PMD to the reports\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@652845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/2/08, 10:46 AM",
      "commitName": "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "2/3/08, 6:04 PM",
      "commitNameOld": "00d67383c2e842626710831782f7ec768d1ddc1c",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 88.65,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            String propertyName \u003d InfoSetUtil.stringValue(pred);\n            boolean ok \u003d false;\n            String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n            for (int i \u003d 0; i \u003c names.length; i++) {\n                if (names[i].equals(propertyName)) {\n                    ok \u003d true;\n                    break;\n                }\n            }\n            if (ok) {\n                dynamicPropertyPointer.setPropertyName(propertyName);\n                position++;\n                return true;\n            }\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            }\n            if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 55,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldValue": "@inheritDoc}\n",
        "newValue": ""
      }
    },
    "00d67383c2e842626710831782f7ec768d1ddc1c": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/3/08, 6:04 PM",
      "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
      "commitAuthor": "Matthew Jason Benson",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/3/08, 6:04 PM",
          "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/16/07, 11:29 PM",
          "commitNameOld": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 48.77,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            String propertyName \u003d InfoSetUtil.stringValue(pred);\n            boolean ok \u003d false;\n            String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n            for (int i \u003d 0; i \u003c names.length; i++) {\n                if (names[i].equals(propertyName)) {\n                    ok \u003d true;\n                    break;\n                }\n            }\n            if (ok) {\n                dynamicPropertyPointer.setPropertyName(propertyName);\n                position++;\n                return true;\n            }\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            }\n            if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
          "functionStartLine": 58,
          "functionName": "nextNode",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@inheritDoc}\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/3/08, 6:04 PM",
          "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/16/07, 11:29 PM",
          "commitNameOld": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 48.77,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            String propertyName \u003d InfoSetUtil.stringValue(pred);\n            boolean ok \u003d false;\n            String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n            for (int i \u003d 0; i \u003c names.length; i++) {\n                if (names[i].equals(propertyName)) {\n                    ok \u003d true;\n                    break;\n                }\n            }\n            if (ok) {\n                dynamicPropertyPointer.setPropertyName(propertyName);\n                position++;\n                return true;\n            }\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            }\n            if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
          "functionStartLine": 58,
          "functionName": "nextNode",
          "functionAnnotation": "",
          "functionDoc": "@inheritDoc}\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Yformatchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/19/07, 3:24 PM",
      "commitNameOld": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 300.34,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            String propertyName \u003d InfoSetUtil.stringValue(pred);\n            boolean ok \u003d false;\n            String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n            for (int i \u003d 0; i \u003c names.length; i++) {\n                if (names[i].equals(propertyName)) {\n                    ok \u003d true;\n                    break;\n                }\n            }\n            if (ok) {\n                dynamicPropertyPointer.setPropertyName(propertyName);\n                position++;\n                return true;\n            }\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            }\n            if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 50,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            String propertyName \u003d InfoSetUtil.stringValue(pred);\n            boolean ok \u003d false;\n            String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n            for (int i \u003d 0; i \u003c names.length; i++) {\n                if (names[i].equals(propertyName)) {\n                    ok \u003d true;\n                    break;\n                }\n            }\n            if (ok) {\n                dynamicPropertyPointer.setPropertyName(propertyName);\n                position++;\n                return true;\n            }\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            }\n            if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 50,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,46 @@\n public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d nameTestExpression.computeValue(parentContext);\n             String propertyName \u003d InfoSetUtil.stringValue(pred);\n             boolean ok \u003d false;\n             String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n             for (int i \u003d 0; i \u003c names.length; i++) {\n                 if (names[i].equals(propertyName)) {\n                     ok \u003d true;\n                     break;\n                 }\n             }\n             if (ok) {\n                 dynamicPropertyPointer.setPropertyName(propertyName);\n                 position++;\n                 return true;\n             }\n         } else {\n             Object pred \u003d expression.computeValue(parentContext);\n             if (pred instanceof Iterator) {\n                 if (!((Iterator) pred).hasNext()) {\n                     return false;\n                 }\n                 pred \u003d ((Iterator) pred).next();\n             }\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getNode();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n-            } else if (InfoSetUtil.booleanValue(pred)) {\n+            }\n+            if (InfoSetUtil.booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1f15e0df331f424e3a993754ae6e072e12ff921": {
      "type": "Ybodychange",
      "commitMessage": "Fixed problem with collection of maps\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136865 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/5/03, 7:13 PM",
      "commitName": "a1f15e0df331f424e3a993754ae6e072e12ff921",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/24/03, 6:41 PM",
      "commitNameOld": "77af585d9f0e629db4ecf8d468ef7b71c9d98e39",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 41.98,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            String propertyName \u003d InfoSetUtil.stringValue(pred);\n            boolean ok \u003d false;\n            String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n            for (int i \u003d 0; i \u003c names.length; i++) {\n                if (names[i].equals(propertyName)) {\n                    ok \u003d true;\n                    break;\n                }\n            }\n            if (ok) {\n                dynamicPropertyPointer.setPropertyName(propertyName);\n                position++;\n                return true;\n            }\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 95,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,45 @@\n public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d nameTestExpression.computeValue(parentContext);\n-            if (pred instanceof NodePointer) {\n-                pred \u003d ((NodePointer) pred).getValue();\n+            String propertyName \u003d InfoSetUtil.stringValue(pred);\n+            boolean ok \u003d false;\n+            String[] names \u003d dynamicPropertyPointer.getPropertyNames();\n+            for (int i \u003d 0; i \u003c names.length; i++) {\n+                if (names[i].equals(propertyName)) {\n+                    ok \u003d true;\n+                    break;\n+                }\n             }\n-            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n-            position \u003d 1;\n-            done \u003d true;\n-            return true;\n+            if (ok) {\n+                dynamicPropertyPointer.setPropertyName(propertyName);\n+                position++;\n+                return true;\n+            }\n         } else {\n             Object pred \u003d expression.computeValue(parentContext);\n             if (pred instanceof Iterator) {\n                 if (!((Iterator) pred).hasNext()) {\n                     return false;\n                 }\n                 pred \u003d ((Iterator) pred).next();\n             }\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getNode();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (InfoSetUtil.booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": {
      "type": "Yformatchange",
      "commitMessage": "Replaced tabs with spaces\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:33 PM",
      "commitName": "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:20 PM",
      "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n            position \u003d 1;\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 95,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": {
      "type": "Yformatchange",
      "commitMessage": "Organized imports, formatted code\nFixed problems with getValue() and getNode()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:20 PM",
      "commitName": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 2:02 PM",
      "commitNameOld": "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 44.18,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n            position \u003d 1;\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 95,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4": {
      "type": "Ybodychange",
      "commitMessage": "Fixed bugs in iteratePointers() when iterating over a scalar value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136809 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/02, 2:02 PM",
      "commitName": "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/10/02, 9:13 AM",
      "commitNameOld": "d1c2ae2b56e1eb4cb22caea0ba06bda89e5d0b4e",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 63.2,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n            position \u003d 1;\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof Iterator) {\n                if (!((Iterator) pred).hasNext()) {\n                    return false;\n                }\n                pred \u003d ((Iterator) pred).next();\n            }\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 95,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,38 @@\n public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d nameTestExpression.computeValue(parentContext);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n             position \u003d 1;\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d expression.computeValue(parentContext);\n+            if (pred instanceof Iterator) {\n+                if (!((Iterator) pred).hasNext()) {\n+                    return false;\n+                }\n+                pred \u003d ((Iterator) pred).next();\n+            }\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getNode();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (InfoSetUtil.booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d1c2ae2b56e1eb4cb22caea0ba06bda89e5d0b4e": {
      "type": "Ybodychange",
      "commitMessage": "Made getNode() a public method on Pointer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136799 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/10/02, 9:13 AM",
      "commitName": "d1c2ae2b56e1eb4cb22caea0ba06bda89e5d0b4e",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/9/02, 6:33 PM",
      "commitNameOld": "1958e0c3d887d3cd5a6fd0f5c9afef15fc3845de",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n            position \u003d 1;\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNode();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 95,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,32 @@\n public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d nameTestExpression.computeValue(parentContext);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n             position \u003d 1;\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d expression.computeValue(parentContext);\n             if (pred instanceof NodePointer) {\n-                pred \u003d ((NodePointer) pred).getNodeValue();\n+                pred \u003d ((NodePointer) pred).getNode();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (InfoSetUtil.booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebe43573039242c0997bef4938cb1e2d81d08ea0": {
      "type": "Ybodychange",
      "commitMessage": "Fixed #9482\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136757 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/29/02, 6:57 PM",
      "commitName": "ebe43573039242c0997bef4938cb1e2d81d08ea0",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/7/02, 5:40 PM",
      "commitNameOld": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 22.05,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n            position \u003d 1;\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNodeValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 95,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,32 @@\n public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d nameTestExpression.computeValue(parentContext);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n+            position \u003d 1;\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d expression.computeValue(parentContext);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getNodeValue();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (InfoSetUtil.booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/27/02, 9:35 PM",
      "commitNameOld": "f29394859dec11a4f037668aa33edae26338fb73",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.84,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d nameTestExpression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d expression.computeValue(parentContext);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNodeValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (InfoSetUtil.booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 95,
      "functionName": "nextNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,31 @@\n public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n-            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n+            Object pred \u003d nameTestExpression.computeValue(parentContext);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n-            dynamicPropertyPointer.setPropertyName(stringValue(pred));\n+            dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n             done \u003d true;\n             return true;\n         } else {\n-            Object pred \u003d parentContext.eval(expression);\n+            Object pred \u003d expression.computeValue(parentContext);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getNodeValue();\n             }\n             if (pred instanceof Number) {\n-                int pos \u003d (int) doubleValue(pred);\n+                int pos \u003d (int) InfoSetUtil.doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n-            } else if (booleanValue(pred)) {\n+            } else if (InfoSetUtil.booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f29394859dec11a4f037668aa33edae26338fb73": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Renamed \"next\" to \"nextNode\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136733 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/27/02, 9:35 PM",
      "commitName": "f29394859dec11a4f037668aa33edae26338fb73",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Renamed \"next\" to \"nextNode\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:35 PM",
          "commitName": "f29394859dec11a4f037668aa33edae26338fb73",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 6:00 PM",
          "commitNameOld": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(stringValue(pred));\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d parentContext.eval(expression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNodeValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
          "functionStartLine": 91,
          "functionName": "nextNode",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n-public boolean next() {\n+public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n-    while (parentContext.next()) {\n+    while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             dynamicPropertyPointer.setPropertyName(stringValue(pred));\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d parentContext.eval(expression);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getNodeValue();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "next",
            "newValue": "nextNode"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed \"next\" to \"nextNode\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136733 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:35 PM",
          "commitName": "f29394859dec11a4f037668aa33edae26338fb73",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 6:00 PM",
          "commitNameOld": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.15,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean nextNode() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.nextNode()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(stringValue(pred));\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d parentContext.eval(expression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNodeValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
          "functionStartLine": 91,
          "functionName": "nextNode",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,31 +1,31 @@\n-public boolean next() {\n+public boolean nextNode() {\n     if (done) {\n         return false;\n     }\n-    while (parentContext.next()) {\n+    while (parentContext.nextNode()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             dynamicPropertyPointer.setPropertyName(stringValue(pred));\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d parentContext.eval(expression);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getNodeValue();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": {
      "type": "Ybodychange",
      "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 6:00 PM",
      "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/23/02, 9:06 PM",
      "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean next() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.next()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(stringValue(pred));\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d parentContext.eval(expression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getNodeValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 91,
      "functionName": "next",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,31 @@\n public boolean next() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.next()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n             if (pred instanceof NodePointer) {\n-                pred \u003d ((NodePointer) pred).getCanonicalValue();\n+                pred \u003d ((NodePointer) pred).getValue();\n             }\n             dynamicPropertyPointer.setPropertyName(stringValue(pred));\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d parentContext.eval(expression);\n             if (pred instanceof NodePointer) {\n-                pred \u003d ((NodePointer) pred).getValue();\n+                pred \u003d ((NodePointer) pred).getNodeValue();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Ybodychange",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/9/02, 8:40 PM",
      "commitNameOld": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 11.76,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean next() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.next()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getCanonicalValue();\n            }\n            dynamicPropertyPointer.setPropertyName(stringValue(pred));\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d parentContext.eval(expression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 92,
      "functionName": "next",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,31 @@\n public boolean next() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.next()) {\n         if (setupDynamicPropertyPointer()) {\n             Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n             if (pred instanceof NodePointer) {\n-                pred \u003d ((NodePointer) pred).getValue();\n+                pred \u003d ((NodePointer) pred).getCanonicalValue();\n             }\n-            dynamicPropertyPointer.setPropertyName(String.valueOf(pred));\n+            dynamicPropertyPointer.setPropertyName(stringValue(pred));\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d parentContext.eval(expression);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "207c6dd98407506ff367d072be25b56f37989215": {
      "type": "Ybodychange",
      "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/01, 6:22 PM",
      "commitName": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/22/01, 5:47 PM",
      "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 11.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean next() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.next()) {\n        if (setupDynamicPropertyPointer()) {\n            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(String.valueOf(pred));\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d parentContext.eval(expression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 93,
      "functionName": "next",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,31 @@\n public boolean next() {\n     if (done) {\n         return false;\n     }\n     while (parentContext.next()) {\n-        if (dynamicPropertyNameExpression !\u003d null) {\n-            dynamicPropertyPointer \u003d parentContext.getCurrentNodePointer().getPropertyPointer();\n+        if (setupDynamicPropertyPointer()) {\n             Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             dynamicPropertyPointer.setPropertyName(String.valueOf(pred));\n             done \u003d true;\n             return true;\n         } else {\n             Object pred \u003d parentContext.eval(expression);\n             if (pred instanceof NodePointer) {\n                 pred \u003d ((NodePointer) pred).getValue();\n             }\n             if (pred instanceof Number) {\n                 int pos \u003d (int) doubleValue(pred);\n                 position++;\n                 done \u003d true;\n                 return parentContext.setPosition(pos);\n             } else if (booleanValue(pred)) {\n                 position++;\n                 return true;\n             }\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,32 @@\n+public boolean next() {\n+    if (done) {\n+        return false;\n+    }\n+    while (parentContext.next()) {\n+        if (dynamicPropertyNameExpression !\u003d null) {\n+            dynamicPropertyPointer \u003d parentContext.getCurrentNodePointer().getPropertyPointer();\n+            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n+            if (pred instanceof NodePointer) {\n+                pred \u003d ((NodePointer) pred).getValue();\n+            }\n+            dynamicPropertyPointer.setPropertyName(String.valueOf(pred));\n+            done \u003d true;\n+            return true;\n+        } else {\n+            Object pred \u003d parentContext.eval(expression);\n+            if (pred instanceof NodePointer) {\n+                pred \u003d ((NodePointer) pred).getValue();\n+            }\n+            if (pred instanceof Number) {\n+                int pos \u003d (int) doubleValue(pred);\n+                position++;\n+                done \u003d true;\n+                return parentContext.setPosition(pos);\n+            } else if (booleanValue(pred)) {\n+                position++;\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean next() {\n    if (done) {\n        return false;\n    }\n    while (parentContext.next()) {\n        if (dynamicPropertyNameExpression !\u003d null) {\n            dynamicPropertyPointer \u003d parentContext.getCurrentNodePointer().getPropertyPointer();\n            Object pred \u003d parentContext.eval(dynamicPropertyNameExpression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            dynamicPropertyPointer.setPropertyName(String.valueOf(pred));\n            done \u003d true;\n            return true;\n        } else {\n            Object pred \u003d parentContext.eval(expression);\n            if (pred instanceof NodePointer) {\n                pred \u003d ((NodePointer) pred).getValue();\n            }\n            if (pred instanceof Number) {\n                int pos \u003d (int) doubleValue(pred);\n                position++;\n                done \u003d true;\n                return parentContext.setPosition(pos);\n            } else if (booleanValue(pred)) {\n                position++;\n                return true;\n            }\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java",
      "functionStartLine": 93,
      "functionName": "next",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}