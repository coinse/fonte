{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplePathInterpreter.java",
  "functionName": "indexFromPredicate",
  "functionId": "indexFromPredicate___context-EvalContext__predicate-Expression",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
  "functionAnnotation": "",
  "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n\n@param context evaluation context\n@param predicate to evaluate\n@return calculated index\n",
  "functionStartLine": 703,
  "functionEndLine": 722,
  "numCommitsSeen": 36,
  "timeTaken": 3010,
  "changeHistory": [
    "00d67383c2e842626710831782f7ec768d1ddc1c",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "e6b562c6eca79b82a57a4532768d775d76f48694",
    "323e8b214459b3977973c01a048a979dc778f100",
    "f29394859dec11a4f037668aa33edae26338fb73",
    "34d1c6cad33a94c24e55d456b550302db4914130",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
    "989fbe2e44ad4e994dc810fa54290636a7339712",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b"
  ],
  "changeHistoryShort": {
    "00d67383c2e842626710831782f7ec768d1ddc1c": "Ybodychange",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ydocchange",
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "e6b562c6eca79b82a57a4532768d775d76f48694": "Ymultichange(Ybodychange,Ydocchange)",
    "323e8b214459b3977973c01a048a979dc778f100": "Ybodychange",
    "f29394859dec11a4f037668aa33edae26338fb73": "Ybodychange",
    "34d1c6cad33a94c24e55d456b550302db4914130": "Ybodychange",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "989fbe2e44ad4e994dc810fa54290636a7339712": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "00d67383c2e842626710831782f7ec768d1ddc1c": {
      "type": "Ybodychange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/3/08, 6:04 PM",
      "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "12/16/07, 11:29 PM",
      "commitNameOld": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 48.77,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate value is null: \" + predicate);\n    }\n    if (value instanceof Number) {\n        final double round \u003d 0.5;\n        return (int) (InfoSetUtil.doubleValue(value) + round) - 1;\n    }\n    return InfoSetUtil.booleanValue(value) ? 0 : -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 703,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n\n@param context evaluation context\n@param predicate to evaluate\n@return calculated index\n",
      "diff": "@@ -1,16 +1,17 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n     Object value \u003d predicate.computeValue(context);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new JXPathException(\"Predicate value is null: \" + predicate);\n     }\n     if (value instanceof Number) {\n-        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n+        final double round \u003d 0.5;\n+        return (int) (InfoSetUtil.doubleValue(value) + round) - 1;\n     }\n     return InfoSetUtil.booleanValue(value) ? 0 : -1;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ydocchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "12/5/07, 1:04 PM",
      "commitNameOld": "48294fe62b52a1786a65aa3e15fbccd99f8e5bca",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 11.43,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate value is null: \" + predicate);\n    }\n    if (value instanceof Number) {\n        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n    }\n    return InfoSetUtil.booleanValue(value) ? 0 : -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 703,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n\n@param context evaluation context\n@param predicate to evaluate\n@return calculated index\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n",
        "newValue": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n\n@param context evaluation context\n@param predicate to evaluate\n@return calculated index\n"
      }
    },
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate value is null: \" + predicate);\n    }\n    if (value instanceof Number) {\n        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n    }\n    return InfoSetUtil.booleanValue(value) ? 0 : -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 637,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n",
      "diff": "@@ -1,18 +1,16 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n     Object value \u003d predicate.computeValue(context);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new JXPathException(\"Predicate value is null: \" + predicate);\n     }\n     if (value instanceof Number) {\n         return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n-    } else if (InfoSetUtil.booleanValue(value)) {\n-        return 0;\n     }\n-    return -1;\n+    return InfoSetUtil.booleanValue(value) ? 0 : -1;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0": {
      "type": "Ybodychange",
      "commitMessage": "Introduced specialized exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329481 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/29/05, 2:07 PM",
      "commitName": "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/26/05, 5:07 AM",
      "commitNameOld": "ecb571fc93e4a7bed9545a295c177d1ab4b1f4bf",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 245.33,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate value is null: \" + predicate);\n    }\n    if (value instanceof Number) {\n        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n    } else if (InfoSetUtil.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 652,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n",
      "diff": "@@ -1,18 +1,18 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n     Object value \u003d predicate.computeValue(context);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n-        throw new JXPathException(\"Predicate value is null\");\n+        throw new JXPathException(\"Predicate value is null: \" + predicate);\n     }\n     if (value instanceof Number) {\n         return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n     } else if (InfoSetUtil.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:20 PM",
      "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 46.18,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate value is null\");\n    }\n    if (value instanceof Number) {\n        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n    } else if (InfoSetUtil.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 697,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "e6b562c6eca79b82a57a4532768d775d76f48694": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "A complete re-write to address multiple additional use cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:35 PM",
      "commitName": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "A complete re-write to address multiple additional use cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136790 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/9/02, 6:35 PM",
          "commitName": "e6b562c6eca79b82a57a4532768d775d76f48694",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "7/3/02, 2:12 PM",
          "commitNameOld": "cc0637b2a262c45f047d3f273d2100bd138bf169",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 37.18,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate value is null\");\n    }\n    if (value instanceof Number) {\n        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n    } else if (InfoSetUtil.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 590,
          "functionName": "indexFromPredicate",
          "functionAnnotation": "",
          "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n",
          "diff": "@@ -1,18 +1,18 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n     Object value \u003d predicate.computeValue(context);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n-        throw new JXPathException(\"Predicate is null: \" + value);\n+        throw new JXPathException(\"Predicate value is null\");\n     }\n     if (value instanceof Number) {\n         return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n     } else if (InfoSetUtil.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "A complete re-write to address multiple additional use cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136790 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/9/02, 6:35 PM",
          "commitName": "e6b562c6eca79b82a57a4532768d775d76f48694",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "7/3/02, 2:12 PM",
          "commitNameOld": "cc0637b2a262c45f047d3f273d2100bd138bf169",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 37.18,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate value is null\");\n    }\n    if (value instanceof Number) {\n        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n    } else if (InfoSetUtil.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 590,
          "functionName": "indexFromPredicate",
          "functionAnnotation": "",
          "functionDoc": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n",
          "diff": "@@ -1,18 +1,18 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n     Object value \u003d predicate.computeValue(context);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n-        throw new JXPathException(\"Predicate is null: \" + value);\n+        throw new JXPathException(\"Predicate value is null\");\n     }\n     if (value instanceof Number) {\n         return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n     } else if (InfoSetUtil.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Extract an integer from a subscript predicate. The returned index\nstarts with 0, even though the subscript starts with 1.\n"
          }
        }
      ]
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/27/02, 9:35 PM",
      "commitNameOld": "f29394859dec11a4f037668aa33edae26338fb73",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.84,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d predicate.computeValue(context);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n    } else if (InfoSetUtil.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 270,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n-    Object value \u003d context.eval(predicate);\n+    Object value \u003d predicate.computeValue(context);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new JXPathException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n-        return (int) (context.doubleValue(value) + 0.5) - 1;\n-    } else if (context.booleanValue(value)) {\n+        return (int) (InfoSetUtil.doubleValue(value) + 0.5) - 1;\n+    } else if (InfoSetUtil.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f29394859dec11a4f037668aa33edae26338fb73": {
      "type": "Ybodychange",
      "commitMessage": "Renamed \"next\" to \"nextNode\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136733 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/27/02, 9:35 PM",
      "commitName": "f29394859dec11a4f037668aa33edae26338fb73",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/25/02, 8:28 PM",
      "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 2.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d context.eval(predicate);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (context.doubleValue(value) + 0.5) - 1;\n    } else if (context.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 271,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n-    Object value \u003d context.eval(predicate, true);\n+    Object value \u003d context.eval(predicate);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new JXPathException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n         return (int) (context.doubleValue(value) + 0.5) - 1;\n     } else if (context.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34d1c6cad33a94c24e55d456b550302db4914130": {
      "type": "Ybodychange",
      "commitMessage": "Improved error reporting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 8:28 PM",
      "commitName": "34d1c6cad33a94c24e55d456b550302db4914130",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/25/02, 6:00 PM",
      "commitNameOld": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d context.eval(predicate, true);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new JXPathException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (context.doubleValue(value) + 0.5) - 1;\n    } else if (context.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 271,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private static int indexFromPredicate(EvalContext context, Expression predicate) {\n     Object value \u003d context.eval(predicate, true);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n-        throw new RuntimeException(\"Predicate is null: \" + value);\n+        throw new JXPathException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n         return (int) (context.doubleValue(value) + 0.5) - 1;\n     } else if (context.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 6:00 PM",
      "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/25/02, 6:00 PM",
          "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 5:57 PM",
          "commitNameOld": "0f6e852a0bce6f051383f3003f41f99bcd816b31",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d context.eval(predicate, true);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new RuntimeException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (context.doubleValue(value) + 0.5) - 1;\n    } else if (context.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 271,
          "functionName": "indexFromPredicate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n-private int indexFromPredicate(Expression predicate) {\n-    Object value \u003d eval(predicate, true);\n+private static int indexFromPredicate(EvalContext context, Expression predicate) {\n+    Object value \u003d context.eval(predicate, true);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n-        value \u003d ((NodePointer) value).getCanonicalValue();\n+        value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new RuntimeException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n-        return (int) (doubleValue(value) + 0.5) - 1;\n-    } else if (booleanValue(value)) {\n+        return (int) (context.doubleValue(value) + 0.5) - 1;\n+    } else if (context.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
            "newPath": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
            "oldMethodName": "indexFromPredicate",
            "newMethodName": "indexFromPredicate"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/25/02, 6:00 PM",
          "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 5:57 PM",
          "commitNameOld": "0f6e852a0bce6f051383f3003f41f99bcd816b31",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d context.eval(predicate, true);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new RuntimeException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (context.doubleValue(value) + 0.5) - 1;\n    } else if (context.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 271,
          "functionName": "indexFromPredicate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n-private int indexFromPredicate(Expression predicate) {\n-    Object value \u003d eval(predicate, true);\n+private static int indexFromPredicate(EvalContext context, Expression predicate) {\n+    Object value \u003d context.eval(predicate, true);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n-        value \u003d ((NodePointer) value).getCanonicalValue();\n+        value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new RuntimeException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n-        return (int) (doubleValue(value) + 0.5) - 1;\n-    } else if (booleanValue(value)) {\n+        return (int) (context.doubleValue(value) + 0.5) - 1;\n+    } else if (context.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/25/02, 6:00 PM",
          "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 5:57 PM",
          "commitNameOld": "0f6e852a0bce6f051383f3003f41f99bcd816b31",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d context.eval(predicate, true);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new RuntimeException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (context.doubleValue(value) + 0.5) - 1;\n    } else if (context.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 271,
          "functionName": "indexFromPredicate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n-private int indexFromPredicate(Expression predicate) {\n-    Object value \u003d eval(predicate, true);\n+private static int indexFromPredicate(EvalContext context, Expression predicate) {\n+    Object value \u003d context.eval(predicate, true);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n-        value \u003d ((NodePointer) value).getCanonicalValue();\n+        value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new RuntimeException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n-        return (int) (doubleValue(value) + 0.5) - 1;\n-    } else if (booleanValue(value)) {\n+        return (int) (context.doubleValue(value) + 0.5) - 1;\n+    } else if (context.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/25/02, 6:00 PM",
          "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 5:57 PM",
          "commitNameOld": "0f6e852a0bce6f051383f3003f41f99bcd816b31",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private static int indexFromPredicate(EvalContext context, Expression predicate) {\n    Object value \u003d context.eval(predicate, true);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new RuntimeException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (context.doubleValue(value) + 0.5) - 1;\n    } else if (context.booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 271,
          "functionName": "indexFromPredicate",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n-private int indexFromPredicate(Expression predicate) {\n-    Object value \u003d eval(predicate, true);\n+private static int indexFromPredicate(EvalContext context, Expression predicate) {\n+    Object value \u003d context.eval(predicate, true);\n     if (value instanceof EvalContext) {\n         value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n-        value \u003d ((NodePointer) value).getCanonicalValue();\n+        value \u003d ((NodePointer) value).getValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new RuntimeException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n-        return (int) (doubleValue(value) + 0.5) - 1;\n-    } else if (booleanValue(value)) {\n+        return (int) (context.doubleValue(value) + 0.5) - 1;\n+    } else if (context.booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[predicate-Expression]",
            "newValue": "[context-EvalContext, predicate-Expression]"
          }
        }
      ]
    },
    "989fbe2e44ad4e994dc810fa54290636a7339712": {
      "type": "Ybodychange",
      "commitMessage": "Simplified ExpressionContext implementation\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/02, 8:32 PM",
      "commitName": "989fbe2e44ad4e994dc810fa54290636a7339712",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/21/02, 2:52 PM",
      "commitNameOld": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private int indexFromPredicate(Expression predicate) {\n    Object value \u003d eval(predicate, true);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getSingleNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getCanonicalValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new RuntimeException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (doubleValue(value) + 0.5) - 1;\n    } else if (booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 906,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n private int indexFromPredicate(Expression predicate) {\n     Object value \u003d eval(predicate, true);\n     if (value instanceof EvalContext) {\n-        value \u003d ((EvalContext) value).getContextNodePointer();\n+        value \u003d ((EvalContext) value).getSingleNodePointer();\n     }\n     if (value instanceof NodePointer) {\n         value \u003d ((NodePointer) value).getCanonicalValue();\n     }\n     if (value \u003d\u003d null) {\n         throw new RuntimeException(\"Predicate is null: \" + value);\n     }\n     if (value instanceof Number) {\n         return (int) (doubleValue(value) + 0.5) - 1;\n     } else if (booleanValue(value)) {\n         return 0;\n     }\n     return -1;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Yintroduced",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,18 @@\n+private int indexFromPredicate(Expression predicate) {\n+    Object value \u003d eval(predicate, true);\n+    if (value instanceof EvalContext) {\n+        value \u003d ((EvalContext) value).getContextNodePointer();\n+    }\n+    if (value instanceof NodePointer) {\n+        value \u003d ((NodePointer) value).getCanonicalValue();\n+    }\n+    if (value \u003d\u003d null) {\n+        throw new RuntimeException(\"Predicate is null: \" + value);\n+    }\n+    if (value instanceof Number) {\n+        return (int) (doubleValue(value) + 0.5) - 1;\n+    } else if (booleanValue(value)) {\n+        return 0;\n+    }\n+    return -1;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private int indexFromPredicate(Expression predicate) {\n    Object value \u003d eval(predicate, true);\n    if (value instanceof EvalContext) {\n        value \u003d ((EvalContext) value).getContextNodePointer();\n    }\n    if (value instanceof NodePointer) {\n        value \u003d ((NodePointer) value).getCanonicalValue();\n    }\n    if (value \u003d\u003d null) {\n        throw new RuntimeException(\"Predicate is null: \" + value);\n    }\n    if (value instanceof Number) {\n        return (int) (doubleValue(value) + 0.5) - 1;\n    } else if (booleanValue(value)) {\n        return 0;\n    }\n    return -1;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 933,
      "functionName": "indexFromPredicate",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}