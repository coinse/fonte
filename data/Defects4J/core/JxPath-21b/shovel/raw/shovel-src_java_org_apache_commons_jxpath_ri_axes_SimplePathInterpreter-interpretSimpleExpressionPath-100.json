{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplePathInterpreter.java",
  "functionName": "interpretSimpleExpressionPath",
  "functionId": "interpretSimpleExpressionPath___context-EvalContext__root-NodePointer__predicates-Expression[]__steps-Step[]",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
  "functionAnnotation": "",
  "functionDoc": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n\n@param context evaluation context\n@param root root pointer\n@param predicates predicates corresponding to \u003ccode\u003esteps\u003c/code\u003e\n@param steps path steps\n@return NodePointer\n",
  "functionStartLine": 100,
  "functionEndLine": 109,
  "numCommitsSeen": 26,
  "timeTaken": 1332,
  "changeHistory": [
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
    "d5a51635e77e49efbf18c5b51834f533e7972953",
    "e6b562c6eca79b82a57a4532768d775d76f48694"
  ],
  "changeHistoryShort": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ydocchange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": "Ybodychange",
    "d5a51635e77e49efbf18c5b51834f533e7972953": "Ydocchange",
    "e6b562c6eca79b82a57a4532768d775d76f48694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ydocchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "12/5/07, 1:04 PM",
      "commitNameOld": "48294fe62b52a1786a65aa3e15fbccd99f8e5bca",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 11.43,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public static NodePointer interpretSimpleExpressionPath(EvalContext context, NodePointer root, Expression[] predicates, Step[] steps) {\n    NodePointer pointer \u003d doPredicate(context, root, steps, -1, predicates, 0);\n    return pointer;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 100,
      "functionName": "interpretSimpleExpressionPath",
      "functionAnnotation": "",
      "functionDoc": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n\n@param context evaluation context\n@param root root pointer\n@param predicates predicates corresponding to \u003ccode\u003esteps\u003c/code\u003e\n@param steps path steps\n@return NodePointer\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n",
        "newValue": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n\n@param context evaluation context\n@param root root pointer\n@param predicates predicates corresponding to \u003ccode\u003esteps\u003c/code\u003e\n@param steps path steps\n@return NodePointer\n"
      }
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:20 PM",
      "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 46.18,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public static NodePointer interpretSimpleExpressionPath(EvalContext context, NodePointer root, Expression[] predicates, Step[] steps) {\n    NodePointer pointer \u003d doPredicate(context, root, steps, -1, predicates, 0);\n    return pointer;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 136,
      "functionName": "interpretSimpleExpressionPath",
      "functionAnnotation": "",
      "functionDoc": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": {
      "type": "Ybodychange",
      "commitMessage": "Organized imports, formatted code\nFixed problems with getValue() and getNode()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:20 PM",
      "commitName": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 7:59 PM",
      "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 43.93,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public static NodePointer interpretSimpleExpressionPath(EvalContext context, NodePointer root, Expression[] predicates, Step[] steps) {\n    NodePointer pointer \u003d doPredicate(context, root, steps, -1, predicates, 0);\n    return pointer;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 127,
      "functionName": "interpretSimpleExpressionPath",
      "functionAnnotation": "",
      "functionDoc": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n",
      "diff": "@@ -1,3 +1,4 @@\n public static NodePointer interpretSimpleExpressionPath(EvalContext context, NodePointer root, Expression[] predicates, Step[] steps) {\n-    return doPredicate(context, root, steps, -1, predicates, 0);\n+    NodePointer pointer \u003d doPredicate(context, root, steps, -1, predicates, 0);\n+    return pointer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d5a51635e77e49efbf18c5b51834f533e7972953": {
      "type": "Ydocchange",
      "commitMessage": "1. Now bean\u0027s properties can be accessed either with the child:: or the attribute:: axis.\n2. Missing attributes can be created with an AbstractFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/02, 7:59 PM",
      "commitName": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/9/02, 6:35 PM",
      "commitNameOld": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 64.06,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public static NodePointer interpretSimpleExpressionPath(EvalContext context, NodePointer root, Expression[] predicates, Step[] steps) {\n    return doPredicate(context, root, steps, -1, predicates, 0);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 126,
      "functionName": "interpretSimpleExpressionPath",
      "functionAnnotation": "",
      "functionDoc": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n",
        "newValue": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\" or \"attribute::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n"
      }
    },
    "e6b562c6eca79b82a57a4532768d775d76f48694": {
      "type": "Yintroduced",
      "commitMessage": "A complete re-write to address multiple additional use cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:35 PM",
      "commitName": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,3 @@\n+public static NodePointer interpretSimpleExpressionPath(EvalContext context, NodePointer root, Expression[] predicates, Step[] steps) {\n+    return doPredicate(context, root, steps, -1, predicates, 0);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static NodePointer interpretSimpleExpressionPath(EvalContext context, NodePointer root, Expression[] predicates, Step[] steps) {\n    return doPredicate(context, root, steps, -1, predicates, 0);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 126,
      "functionName": "interpretSimpleExpressionPath",
      "functionAnnotation": "",
      "functionDoc": "Interpret the steps of a simple expression path that\nstarts with the given root, which is the result of evaluation\nof the root expression of the expression path, applies the\ngiven predicates to it and then follows the given steps.\nAll steps must have the axis \"child::\"\nand a name test.  They can also optionally have predicates\nof type [@name\u003d...] or simply [...] interpreted as an index.\n"
    }
  }
}