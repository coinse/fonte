{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ValueUtils.java",
  "functionName": "getAccessibleMethod",
  "functionId": "getAccessibleMethod___method-Method",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n@return Method\n",
  "functionStartLine": 569,
  "functionEndLine": 608,
  "numCommitsSeen": 38,
  "timeTaken": 1627,
  "changeHistory": [
    "d783b219111b2f92b048a5588f6de3d4e8040c2b",
    "00d67383c2e842626710831782f7ec768d1ddc1c",
    "cdfbbfb11a27aadeb7d3902a236fe0f261d87cd1",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "d3eb29045072cee861cc9759e0b5618ce3fbcf12",
    "da198cf58feef59ae708f87423458c813e3f99a8",
    "8fcda41e657484e717800af9b63de7787dbd240a",
    "f44e1d6b03276472423df71e151b2c23c11522f7",
    "4ab5b9e453d0e0ef51fc1d36a5e21aaf21b44c81",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "2735dfce721fbf083b91b3b7695d8672c28200ae"
  ],
  "changeHistoryShort": {
    "d783b219111b2f92b048a5588f6de3d4e8040c2b": "Ybodychange",
    "00d67383c2e842626710831782f7ec768d1ddc1c": "Ybodychange",
    "cdfbbfb11a27aadeb7d3902a236fe0f261d87cd1": "Ymultichange(Ybodychange,Ydocchange)",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Yformatchange",
    "d3eb29045072cee861cc9759e0b5618ce3fbcf12": "Ybodychange",
    "da198cf58feef59ae708f87423458c813e3f99a8": "Ybodychange",
    "8fcda41e657484e717800af9b63de7787dbd240a": "Ybodychange",
    "f44e1d6b03276472423df71e151b2c23c11522f7": "Ybodychange",
    "4ab5b9e453d0e0ef51fc1d36a5e21aaf21b44c81": "Ymodifierchange",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": "Yformatchange",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Yfilerename",
    "2735dfce721fbf083b91b3b7695d8672c28200ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d783b219111b2f92b048a5588f6de3d4e8040c2b": {
      "type": "Ybodychange",
      "commitMessage": "checkstyle/pmd\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@670727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/23/08, 1:10 PM",
      "commitName": "d783b219111b2f92b048a5588f6de3d4e8040c2b",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "6/16/08, 2:59 PM",
      "commitNameOld": "65811463048ef988c857aa4c87a4db54a4a826a4",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String name \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n            try {\n                return clazz.getDeclaredMethod(name, parameterTypes);\n            } catch (NoSuchMethodException e) {\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 569,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n@return Method\n",
      "diff": "",
      "extendedDetails": {}
    },
    "00d67383c2e842626710831782f7ec768d1ddc1c": {
      "type": "Ybodychange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618149 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/3/08, 6:04 PM",
      "commitName": "00d67383c2e842626710831782f7ec768d1ddc1c",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/3/08, 12:19 PM",
      "commitNameOld": "cdfbbfb11a27aadeb7d3902a236fe0f261d87cd1",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String name \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n            try {\n                return clazz.getDeclaredMethod(name, parameterTypes);\n            } catch (NoSuchMethodException e) {\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 569,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n@return Method\n",
      "diff": "",
      "extendedDetails": {}
    },
    "cdfbbfb11a27aadeb7d3902a236fe0f261d87cd1": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618074 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/3/08, 12:19 PM",
      "commitName": "cdfbbfb11a27aadeb7d3902a236fe0f261d87cd1",
      "commitAuthor": "Matthew Jason Benson",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618074 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/3/08, 12:19 PM",
          "commitName": "cdfbbfb11a27aadeb7d3902a236fe0f261d87cd1",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/16/07, 11:29 PM",
          "commitNameOld": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 48.53,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String name \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n            try {\n                return clazz.getDeclaredMethod(name, parameterTypes);\n            } catch (NoSuchMethodException e) {\n            }\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
          "functionStartLine": 569,
          "functionName": "getAccessibleMethod",
          "functionAnnotation": "",
          "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n@return Method\n",
          "diff": "@@ -1,29 +1,28 @@\n public static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n     if (Modifier.isPublic(clazz.getModifiers())) {\n         return (method);\n     }\n     String name \u003d method.getName();\n     Class[] parameterTypes \u003d method.getParameterTypes();\n     while (clazz !\u003d null) {\n         Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n         if (aMethod !\u003d null) {\n             return aMethod;\n         }\n         clazz \u003d clazz.getSuperclass();\n         if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n             try {\n                 return clazz.getDeclaredMethod(name, parameterTypes);\n             } catch (NoSuchMethodException e) {\n-                ;\n             }\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618074 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/3/08, 12:19 PM",
          "commitName": "cdfbbfb11a27aadeb7d3902a236fe0f261d87cd1",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/16/07, 11:29 PM",
          "commitNameOld": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 48.53,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String name \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n            try {\n                return clazz.getDeclaredMethod(name, parameterTypes);\n            } catch (NoSuchMethodException e) {\n            }\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
          "functionStartLine": 569,
          "functionName": "getAccessibleMethod",
          "functionAnnotation": "",
          "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n@return Method\n",
          "diff": "@@ -1,29 +1,28 @@\n public static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n     if (Modifier.isPublic(clazz.getModifiers())) {\n         return (method);\n     }\n     String name \u003d method.getName();\n     Class[] parameterTypes \u003d method.getParameterTypes();\n     while (clazz !\u003d null) {\n         Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n         if (aMethod !\u003d null) {\n             return aMethod;\n         }\n         clazz \u003d clazz.getSuperclass();\n         if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n             try {\n                 return clazz.getDeclaredMethod(name, parameterTypes);\n             } catch (NoSuchMethodException e) {\n-                ;\n             }\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
            "newValue": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n@return Method\n"
          }
        }
      ]
    },
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Yformatchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "3/16/07, 10:08 AM",
      "commitNameOld": "bdad5fece9aab24999d25beb23591778d57bf8ec",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 275.6,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String name \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n            try {\n                return clazz.getDeclaredMethod(name, parameterTypes);\n            } catch (NoSuchMethodException e) {\n                ;\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 529,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d3eb29045072cee861cc9759e0b5618ce3fbcf12": {
      "type": "Ybodychange",
      "commitMessage": "Correctly re-applied Vasiliy Stashuk\u0027s patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@158013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/17/05, 7:08 PM",
      "commitName": "d3eb29045072cee861cc9759e0b5618ce3fbcf12",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/17/05, 7:03 PM",
      "commitNameOld": "da198cf58feef59ae708f87423458c813e3f99a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String name \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n            try {\n                return clazz.getDeclaredMethod(name, parameterTypes);\n            } catch (NoSuchMethodException e) {\n                ;\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 538,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "@@ -1,29 +1,29 @@\n public static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n     if (Modifier.isPublic(clazz.getModifiers())) {\n         return (method);\n     }\n     String name \u003d method.getName();\n     Class[] parameterTypes \u003d method.getParameterTypes();\n     while (clazz !\u003d null) {\n         Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n         if (aMethod !\u003d null) {\n             return aMethod;\n         }\n         clazz \u003d clazz.getSuperclass();\n-        if (Modifier.isPublic(clazz.getModifiers())) {\n+        if (clazz !\u003d null \u0026\u0026 Modifier.isPublic(clazz.getModifiers())) {\n             try {\n                 return clazz.getDeclaredMethod(name, parameterTypes);\n             } catch (NoSuchMethodException e) {\n                 ;\n             }\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "da198cf58feef59ae708f87423458c813e3f99a8": {
      "type": "Ybodychange",
      "commitMessage": "Correctly re-applied Vasiliy Stashuk\u0027s patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@158012 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/17/05, 7:03 PM",
      "commitName": "da198cf58feef59ae708f87423458c813e3f99a8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/14/05, 8:31 AM",
      "commitNameOld": "8fcda41e657484e717800af9b63de7787dbd240a",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 3.44,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String name \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n        if (Modifier.isPublic(clazz.getModifiers())) {\n            try {\n                return clazz.getDeclaredMethod(name, parameterTypes);\n            } catch (NoSuchMethodException e) {\n                ;\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 538,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "@@ -1,20 +1,29 @@\n public static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n+    if (Modifier.isPublic(clazz.getModifiers())) {\n+        return (method);\n+    }\n+    String name \u003d method.getName();\n+    Class[] parameterTypes \u003d method.getParameterTypes();\n     while (clazz !\u003d null) {\n-        if (Modifier.isPublic(clazz.getModifiers())) {\n-            return (method);\n-        }\n-        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n+        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, name, parameterTypes);\n         if (aMethod !\u003d null) {\n             return aMethod;\n         }\n         clazz \u003d clazz.getSuperclass();\n+        if (Modifier.isPublic(clazz.getModifiers())) {\n+            try {\n+                return clazz.getDeclaredMethod(name, parameterTypes);\n+            } catch (NoSuchMethodException e) {\n+                ;\n+            }\n+        }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8fcda41e657484e717800af9b63de7787dbd240a": {
      "type": "Ybodychange",
      "commitMessage": "Applied Vasiliy Stashuk\u0027s patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@157432 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/14/05, 8:31 AM",
      "commitName": "8fcda41e657484e717800af9b63de7787dbd240a",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/4/05, 9:51 AM",
      "commitNameOld": "f44e1d6b03276472423df71e151b2c23c11522f7",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.94,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    while (clazz !\u003d null) {\n        if (Modifier.isPublic(clazz.getModifiers())) {\n            return (method);\n        }\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 538,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "@@ -1,20 +1,20 @@\n public static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n-    if (Modifier.isPublic(clazz.getModifiers())) {\n-        return (method);\n-    }\n     while (clazz !\u003d null) {\n+        if (Modifier.isPublic(clazz.getModifiers())) {\n+            return (method);\n+        }\n         Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n         if (aMethod !\u003d null) {\n             return aMethod;\n         }\n         clazz \u003d clazz.getSuperclass();\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f44e1d6b03276472423df71e151b2c23c11522f7": {
      "type": "Ybodychange",
      "commitMessage": "Made getAccessibleMethod recurse through the hierarchy. Great thanks to Vasiliy Stashuk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@156189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/4/05, 9:51 AM",
      "commitName": "f44e1d6b03276472423df71e151b2c23c11522f7",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/26/05, 5:07 AM",
      "commitNameOld": "ecb571fc93e4a7bed9545a295c177d1ab4b1f4bf",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 6.2,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    while (clazz !\u003d null) {\n        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n        if (aMethod !\u003d null) {\n            return aMethod;\n        }\n        clazz \u003d clazz.getSuperclass();\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 538,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "@@ -1,14 +1,20 @@\n public static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n     if (Modifier.isPublic(clazz.getModifiers())) {\n         return (method);\n     }\n-    method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n-    return (method);\n+    while (clazz !\u003d null) {\n+        Method aMethod \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n+        if (aMethod !\u003d null) {\n+            return aMethod;\n+        }\n+        clazz \u003d clazz.getSuperclass();\n+    }\n+    return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4ab5b9e453d0e0ef51fc1d36a5e21aaf21b44c81": {
      "type": "Ymodifierchange",
      "commitMessage": "Improved handling of collections as arguments of extension functions\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/6/03, 4:51 PM",
      "commitName": "4ab5b9e453d0e0ef51fc1d36a5e21aaf21b44c81",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "1/16/03, 6:02 PM",
      "commitNameOld": "8fee99cc659d18a52c06bd27146650789609105e",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 20.95,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n    return (method);\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 534,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "@@ -1,14 +1,14 @@\n-private static Method getAccessibleMethod(Method method) {\n+public static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n     if (Modifier.isPublic(clazz.getModifiers())) {\n         return (method);\n     }\n     method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n     return (method);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[public, static]"
      }
    },
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": {
      "type": "Yformatchange",
      "commitMessage": "Replaced tabs with spaces\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:33 PM",
      "commitName": "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:20 PM",
      "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n    return (method);\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 462,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "",
      "extendedDetails": {}
    },
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": {
      "type": "Ybodychange",
      "commitMessage": "Organized imports, formatted code\nFixed problems with getValue() and getNode()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:20 PM",
      "commitName": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/19/02, 8:43 PM",
      "commitNameOld": "43eabbabfd78e9877246cdb15ebaa28132b37f6c",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 36.9,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n    return (method);\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 462,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "@@ -1,16 +1,14 @@\n private static Method getAccessibleMethod(Method method) {\n     if (method \u003d\u003d null) {\n         return (null);\n     }\n     if (!Modifier.isPublic(method.getModifiers())) {\n         return (null);\n     }\n     Class clazz \u003d method.getDeclaringClass();\n     if (Modifier.isPublic(clazz.getModifiers())) {\n         return (method);\n     }\n-    String methodName \u003d method.getName();\n-    Class[] parameterTypes \u003d method.getParameterTypes();\n     method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n     return (method);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Yfilerename",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/11/02, 7:28 PM",
      "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String methodName \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n    return (method);\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ValueUtils.java",
      "functionStartLine": 304,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyAccessHelper.java",
        "newPath": "src/java/org/apache/commons/jxpath/util/ValueUtils.java"
      }
    },
    "2735dfce721fbf083b91b3b7695d8672c28200ae": {
      "type": "Yintroduced",
      "commitMessage": "Copied getAccessibleProperty from PropertyUtils\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136703 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/8/01, 5:52 PM",
      "commitName": "2735dfce721fbf083b91b3b7695d8672c28200ae",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,16 @@\n+private static Method getAccessibleMethod(Method method) {\n+    if (method \u003d\u003d null) {\n+        return (null);\n+    }\n+    if (!Modifier.isPublic(method.getModifiers())) {\n+        return (null);\n+    }\n+    Class clazz \u003d method.getDeclaringClass();\n+    if (Modifier.isPublic(clazz.getModifiers())) {\n+        return (method);\n+    }\n+    String methodName \u003d method.getName();\n+    Class[] parameterTypes \u003d method.getParameterTypes();\n+    method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n+    return (method);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static Method getAccessibleMethod(Method method) {\n    if (method \u003d\u003d null) {\n        return (null);\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n        return (null);\n    }\n    Class clazz \u003d method.getDeclaringClass();\n    if (Modifier.isPublic(clazz.getModifiers())) {\n        return (method);\n    }\n    String methodName \u003d method.getName();\n    Class[] parameterTypes \u003d method.getParameterTypes();\n    method \u003d getAccessibleMethodFromInterfaceNest(clazz, method.getName(), method.getParameterTypes());\n    return (method);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyAccessHelper.java",
      "functionStartLine": 257,
      "functionName": "getAccessibleMethod",
      "functionAnnotation": "",
      "functionDoc": "Return an accessible method (that is, one that can be invoked via\nreflection) that implements the specified Method.  If no such method\ncan be found, return \u003ccode\u003enull\u003c/code\u003e.\n\n@param method The method that we wish to call\n"
    }
  }
}