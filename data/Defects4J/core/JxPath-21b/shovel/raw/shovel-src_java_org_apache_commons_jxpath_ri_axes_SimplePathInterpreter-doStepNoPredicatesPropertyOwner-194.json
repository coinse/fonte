{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplePathInterpreter.java",
  "functionName": "doStepNoPredicatesPropertyOwner",
  "functionId": "doStepNoPredicatesPropertyOwner___context-EvalContext__parentPointer-PropertyOwnerPointer__steps-Step[]__currentStep-int",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
  "functionAnnotation": "",
  "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n\n@param context evaluation context\n@param parentPointer property owner pointer\n@param steps path steps\n@param currentStep step number\n@return NodePointer\n",
  "functionStartLine": 194,
  "functionEndLine": 245,
  "numCommitsSeen": 34,
  "timeTaken": 1543,
  "changeHistory": [
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "48294fe62b52a1786a65aa3e15fbccd99f8e5bca",
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "77af585d9f0e629db4ecf8d468ef7b71c9d98e39",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "d5a51635e77e49efbf18c5b51834f533e7972953",
    "e6b562c6eca79b82a57a4532768d775d76f48694"
  ],
  "changeHistoryShort": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ydocchange",
    "48294fe62b52a1786a65aa3e15fbccd99f8e5bca": "Ybodychange",
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "77af585d9f0e629db4ecf8d468ef7b71c9d98e39": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "d5a51635e77e49efbf18c5b51834f533e7972953": "Ybodychange",
    "e6b562c6eca79b82a57a4532768d775d76f48694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ydocchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "12/5/07, 1:04 PM",
      "commitNameOld": "48294fe62b52a1786a65aa3e15fbccd99f8e5bca",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 11.43,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (childPointer \u003d\u003d null) {\n        return null;\n    }\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    if (currentStep \u003d\u003d steps.length - 1) {\n        return childPointer;\n    }\n    if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        childPointer \u003d (NodePointer) childPointer.clone();\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, currentStep);\n    }\n    return doStep(context, childPointer, steps, currentStep + 1);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 194,
      "functionName": "doStepNoPredicatesPropertyOwner",
      "functionAnnotation": "",
      "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n\n@param context evaluation context\n@param parentPointer property owner pointer\n@param steps path steps\n@param currentStep step number\n@return NodePointer\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
        "newValue": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n\n@param context evaluation context\n@param parentPointer property owner pointer\n@param steps path steps\n@param currentStep step number\n@return NodePointer\n"
      }
    },
    "48294fe62b52a1786a65aa3e15fbccd99f8e5bca": {
      "type": "Ybodychange",
      "commitMessage": "[JXPATH-104] filter out invalid property paths\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@601523 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/5/07, 1:04 PM",
      "commitName": "48294fe62b52a1786a65aa3e15fbccd99f8e5bca",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "5/21/07, 1:38 PM",
      "commitNameOld": "d36e894cb61100284b81027d6765e66181f982b5",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 198.02,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (childPointer \u003d\u003d null) {\n        return null;\n    }\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    if (currentStep \u003d\u003d steps.length - 1) {\n        return childPointer;\n    }\n    if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        childPointer \u003d (NodePointer) childPointer.clone();\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, currentStep);\n    }\n    return doStep(context, childPointer, steps, currentStep + 1);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 178,
      "functionName": "doStepNoPredicatesPropertyOwner",
      "functionAnnotation": "",
      "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
      "diff": "@@ -1,32 +1,35 @@\n private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n     Step step \u003d steps[currentStep];\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n+    if (childPointer \u003d\u003d null) {\n+        return null;\n+    }\n     if (!childPointer.isActual()) {\n         return createNullPointer(context, parentPointer, steps, currentStep);\n     }\n     if (currentStep \u003d\u003d steps.length - 1) {\n         return childPointer;\n     }\n     if (childPointer.isCollection()) {\n         int bestQuality \u003d 0;\n         childPointer \u003d (NodePointer) childPointer.clone();\n         NodePointer bestMatch \u003d null;\n         int count \u003d childPointer.getLength();\n         for (int i \u003d 0; i \u003c count; i++) {\n             childPointer.setIndex(i);\n             NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n             int quality \u003d computeQuality(pointer);\n             if (quality \u003d\u003d PERFECT_MATCH) {\n                 return pointer;\n             } else if (quality \u003e bestQuality) {\n                 bestQuality \u003d quality;\n                 bestMatch \u003d (NodePointer) pointer.clone();\n             }\n         }\n         if (bestMatch !\u003d null) {\n             return bestMatch;\n         }\n         return createNullPointer(context, childPointer, steps, currentStep);\n     }\n     return doStep(context, childPointer, steps, currentStep + 1);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    if (currentStep \u003d\u003d steps.length - 1) {\n        return childPointer;\n    }\n    if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        childPointer \u003d (NodePointer) childPointer.clone();\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, currentStep);\n    }\n    return doStep(context, childPointer, steps, currentStep + 1);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 178,
      "functionName": "doStepNoPredicatesPropertyOwner",
      "functionAnnotation": "",
      "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
      "diff": "@@ -1,31 +1,32 @@\n private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n     Step step \u003d steps[currentStep];\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n         return createNullPointer(context, parentPointer, steps, currentStep);\n-    } else if (currentStep \u003d\u003d steps.length - 1) {\n+    }\n+    if (currentStep \u003d\u003d steps.length - 1) {\n         return childPointer;\n-    } else if (childPointer.isCollection()) {\n+    }\n+    if (childPointer.isCollection()) {\n         int bestQuality \u003d 0;\n         childPointer \u003d (NodePointer) childPointer.clone();\n         NodePointer bestMatch \u003d null;\n         int count \u003d childPointer.getLength();\n         for (int i \u003d 0; i \u003c count; i++) {\n             childPointer.setIndex(i);\n             NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n             int quality \u003d computeQuality(pointer);\n             if (quality \u003d\u003d PERFECT_MATCH) {\n                 return pointer;\n             } else if (quality \u003e bestQuality) {\n                 bestQuality \u003d quality;\n                 bestMatch \u003d (NodePointer) pointer.clone();\n             }\n         }\n         if (bestMatch !\u003d null) {\n             return bestMatch;\n         }\n         return createNullPointer(context, childPointer, steps, currentStep);\n-    } else {\n-        return doStep(context, childPointer, steps, currentStep + 1);\n     }\n+    return doStep(context, childPointer, steps, currentStep + 1);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "77af585d9f0e629db4ecf8d468ef7b71c9d98e39": {
      "type": "Ybodychange",
      "commitMessage": "Fixed collection as return value of extension function\nReduced the amount of cloning\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/24/03, 6:41 PM",
      "commitName": "77af585d9f0e629db4ecf8d468ef7b71c9d98e39",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/10/03, 4:59 PM",
      "commitNameOld": "bdf423f27a76d2006ffe1058d6530eebf619c877",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 14.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    } else if (currentStep \u003d\u003d steps.length - 1) {\n        return childPointer;\n    } else if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        childPointer \u003d (NodePointer) childPointer.clone();\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, currentStep);\n    } else {\n        return doStep(context, childPointer, steps, currentStep + 1);\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 228,
      "functionName": "doStepNoPredicatesPropertyOwner",
      "functionAnnotation": "",
      "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
      "diff": "@@ -1,30 +1,31 @@\n private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n     Step step \u003d steps[currentStep];\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n         return createNullPointer(context, parentPointer, steps, currentStep);\n     } else if (currentStep \u003d\u003d steps.length - 1) {\n         return childPointer;\n     } else if (childPointer.isCollection()) {\n         int bestQuality \u003d 0;\n+        childPointer \u003d (NodePointer) childPointer.clone();\n         NodePointer bestMatch \u003d null;\n         int count \u003d childPointer.getLength();\n         for (int i \u003d 0; i \u003c count; i++) {\n             childPointer.setIndex(i);\n             NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n             int quality \u003d computeQuality(pointer);\n             if (quality \u003d\u003d PERFECT_MATCH) {\n                 return pointer;\n             } else if (quality \u003e bestQuality) {\n                 bestQuality \u003d quality;\n                 bestMatch \u003d (NodePointer) pointer.clone();\n             }\n         }\n         if (bestMatch !\u003d null) {\n             return bestMatch;\n         }\n         return createNullPointer(context, childPointer, steps, currentStep);\n     } else {\n         return doStep(context, childPointer, steps, currentStep + 1);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    } else if (currentStep \u003d\u003d steps.length - 1) {\n        return childPointer;\n    } else if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, currentStep);\n    } else {\n        return doStep(context, childPointer, steps, currentStep + 1);\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 228,
          "functionName": "doStepNoPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
          "diff": "@@ -1,30 +1,30 @@\n-private static NodePointer doStep_noPredicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n-    Step step \u003d steps[current_step];\n+private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n+    Step step \u003d steps[currentStep];\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n-        return createNullPointer(context, parentPointer, steps, current_step);\n-    } else if (current_step \u003d\u003d steps.length - 1) {\n+        return createNullPointer(context, parentPointer, steps, currentStep);\n+    } else if (currentStep \u003d\u003d steps.length - 1) {\n         return childPointer;\n     } else if (childPointer.isCollection()) {\n         int bestQuality \u003d 0;\n         NodePointer bestMatch \u003d null;\n         int count \u003d childPointer.getLength();\n         for (int i \u003d 0; i \u003c count; i++) {\n             childPointer.setIndex(i);\n-            NodePointer pointer \u003d doStep(context, childPointer, steps, current_step + 1);\n+            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n             int quality \u003d computeQuality(pointer);\n             if (quality \u003d\u003d PERFECT_MATCH) {\n                 return pointer;\n             } else if (quality \u003e bestQuality) {\n                 bestQuality \u003d quality;\n                 bestMatch \u003d (NodePointer) pointer.clone();\n             }\n         }\n         if (bestMatch !\u003d null) {\n             return bestMatch;\n         }\n-        return createNullPointer(context, childPointer, steps, current_step);\n+        return createNullPointer(context, childPointer, steps, currentStep);\n     } else {\n-        return doStep(context, childPointer, steps, current_step + 1);\n+        return doStep(context, childPointer, steps, currentStep + 1);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "doStep_noPredicates_propertyOwner",
            "newValue": "doStepNoPredicatesPropertyOwner"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    } else if (currentStep \u003d\u003d steps.length - 1) {\n        return childPointer;\n    } else if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, currentStep);\n    } else {\n        return doStep(context, childPointer, steps, currentStep + 1);\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 228,
          "functionName": "doStepNoPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
          "diff": "@@ -1,30 +1,30 @@\n-private static NodePointer doStep_noPredicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n-    Step step \u003d steps[current_step];\n+private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n+    Step step \u003d steps[currentStep];\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n-        return createNullPointer(context, parentPointer, steps, current_step);\n-    } else if (current_step \u003d\u003d steps.length - 1) {\n+        return createNullPointer(context, parentPointer, steps, currentStep);\n+    } else if (currentStep \u003d\u003d steps.length - 1) {\n         return childPointer;\n     } else if (childPointer.isCollection()) {\n         int bestQuality \u003d 0;\n         NodePointer bestMatch \u003d null;\n         int count \u003d childPointer.getLength();\n         for (int i \u003d 0; i \u003c count; i++) {\n             childPointer.setIndex(i);\n-            NodePointer pointer \u003d doStep(context, childPointer, steps, current_step + 1);\n+            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n             int quality \u003d computeQuality(pointer);\n             if (quality \u003d\u003d PERFECT_MATCH) {\n                 return pointer;\n             } else if (quality \u003e bestQuality) {\n                 bestQuality \u003d quality;\n                 bestMatch \u003d (NodePointer) pointer.clone();\n             }\n         }\n         if (bestMatch !\u003d null) {\n             return bestMatch;\n         }\n-        return createNullPointer(context, childPointer, steps, current_step);\n+        return createNullPointer(context, childPointer, steps, currentStep);\n     } else {\n-        return doStep(context, childPointer, steps, current_step + 1);\n+        return doStep(context, childPointer, steps, currentStep + 1);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, parentPointer-PropertyOwnerPointer, steps-Step[], current_step-int]",
            "newValue": "[context-EvalContext, parentPointer-PropertyOwnerPointer, steps-Step[], currentStep-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    } else if (currentStep \u003d\u003d steps.length - 1) {\n        return childPointer;\n    } else if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, currentStep);\n    } else {\n        return doStep(context, childPointer, steps, currentStep + 1);\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 228,
          "functionName": "doStepNoPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
          "diff": "@@ -1,30 +1,30 @@\n-private static NodePointer doStep_noPredicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n-    Step step \u003d steps[current_step];\n+private static NodePointer doStepNoPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n+    Step step \u003d steps[currentStep];\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n-        return createNullPointer(context, parentPointer, steps, current_step);\n-    } else if (current_step \u003d\u003d steps.length - 1) {\n+        return createNullPointer(context, parentPointer, steps, currentStep);\n+    } else if (currentStep \u003d\u003d steps.length - 1) {\n         return childPointer;\n     } else if (childPointer.isCollection()) {\n         int bestQuality \u003d 0;\n         NodePointer bestMatch \u003d null;\n         int count \u003d childPointer.getLength();\n         for (int i \u003d 0; i \u003c count; i++) {\n             childPointer.setIndex(i);\n-            NodePointer pointer \u003d doStep(context, childPointer, steps, current_step + 1);\n+            NodePointer pointer \u003d doStep(context, childPointer, steps, currentStep + 1);\n             int quality \u003d computeQuality(pointer);\n             if (quality \u003d\u003d PERFECT_MATCH) {\n                 return pointer;\n             } else if (quality \u003e bestQuality) {\n                 bestQuality \u003d quality;\n                 bestMatch \u003d (NodePointer) pointer.clone();\n             }\n         }\n         if (bestMatch !\u003d null) {\n             return bestMatch;\n         }\n-        return createNullPointer(context, childPointer, steps, current_step);\n+        return createNullPointer(context, childPointer, steps, currentStep);\n     } else {\n-        return doStep(context, childPointer, steps, current_step + 1);\n+        return doStep(context, childPointer, steps, currentStep + 1);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d5a51635e77e49efbf18c5b51834f533e7972953": {
      "type": "Ybodychange",
      "commitMessage": "1. Now bean\u0027s properties can be accessed either with the child:: or the attribute:: axis.\n2. Missing attributes can be created with an AbstractFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/02, 7:59 PM",
      "commitName": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/9/02, 6:35 PM",
      "commitNameOld": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 64.06,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStep_noPredicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n    Step step \u003d steps[current_step];\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, current_step);\n    } else if (current_step \u003d\u003d steps.length - 1) {\n        return childPointer;\n    } else if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, current_step + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, current_step);\n    } else {\n        return doStep(context, childPointer, steps, current_step + 1);\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 202,
      "functionName": "doStep_noPredicates_propertyOwner",
      "functionAnnotation": "",
      "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n",
      "diff": "@@ -1,37 +1,30 @@\n private static NodePointer doStep_noPredicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n     Step step \u003d steps[current_step];\n-    NodePointer childPointer;\n-    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD) {\n-        QName name \u003d ((NodeNameTest) step.getNodeTest()).getNodeName();\n-        childPointer \u003d parentPointer.getPropertyPointer();\n-        ((PropertyPointer) childPointer).setPropertyName(name.toString());\n-    } else {\n-        childPointer \u003d parentPointer;\n-    }\n+    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n         return createNullPointer(context, parentPointer, steps, current_step);\n     } else if (current_step \u003d\u003d steps.length - 1) {\n         return childPointer;\n     } else if (childPointer.isCollection()) {\n         int bestQuality \u003d 0;\n         NodePointer bestMatch \u003d null;\n         int count \u003d childPointer.getLength();\n         for (int i \u003d 0; i \u003c count; i++) {\n             childPointer.setIndex(i);\n             NodePointer pointer \u003d doStep(context, childPointer, steps, current_step + 1);\n             int quality \u003d computeQuality(pointer);\n             if (quality \u003d\u003d PERFECT_MATCH) {\n                 return pointer;\n             } else if (quality \u003e bestQuality) {\n                 bestQuality \u003d quality;\n                 bestMatch \u003d (NodePointer) pointer.clone();\n             }\n         }\n         if (bestMatch !\u003d null) {\n             return bestMatch;\n         }\n         return createNullPointer(context, childPointer, steps, current_step);\n     } else {\n         return doStep(context, childPointer, steps, current_step + 1);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e6b562c6eca79b82a57a4532768d775d76f48694": {
      "type": "Yintroduced",
      "commitMessage": "A complete re-write to address multiple additional use cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:35 PM",
      "commitName": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,37 @@\n+private static NodePointer doStep_noPredicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n+    Step step \u003d steps[current_step];\n+    NodePointer childPointer;\n+    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD) {\n+        QName name \u003d ((NodeNameTest) step.getNodeTest()).getNodeName();\n+        childPointer \u003d parentPointer.getPropertyPointer();\n+        ((PropertyPointer) childPointer).setPropertyName(name.toString());\n+    } else {\n+        childPointer \u003d parentPointer;\n+    }\n+    if (!childPointer.isActual()) {\n+        return createNullPointer(context, parentPointer, steps, current_step);\n+    } else if (current_step \u003d\u003d steps.length - 1) {\n+        return childPointer;\n+    } else if (childPointer.isCollection()) {\n+        int bestQuality \u003d 0;\n+        NodePointer bestMatch \u003d null;\n+        int count \u003d childPointer.getLength();\n+        for (int i \u003d 0; i \u003c count; i++) {\n+            childPointer.setIndex(i);\n+            NodePointer pointer \u003d doStep(context, childPointer, steps, current_step + 1);\n+            int quality \u003d computeQuality(pointer);\n+            if (quality \u003d\u003d PERFECT_MATCH) {\n+                return pointer;\n+            } else if (quality \u003e bestQuality) {\n+                bestQuality \u003d quality;\n+                bestMatch \u003d (NodePointer) pointer.clone();\n+            }\n+        }\n+        if (bestMatch !\u003d null) {\n+            return bestMatch;\n+        }\n+        return createNullPointer(context, childPointer, steps, current_step);\n+    } else {\n+        return doStep(context, childPointer, steps, current_step + 1);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static NodePointer doStep_noPredicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n    Step step \u003d steps[current_step];\n    NodePointer childPointer;\n    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD) {\n        QName name \u003d ((NodeNameTest) step.getNodeTest()).getNodeName();\n        childPointer \u003d parentPointer.getPropertyPointer();\n        ((PropertyPointer) childPointer).setPropertyName(name.toString());\n    } else {\n        childPointer \u003d parentPointer;\n    }\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, current_step);\n    } else if (current_step \u003d\u003d steps.length - 1) {\n        return childPointer;\n    } else if (childPointer.isCollection()) {\n        int bestQuality \u003d 0;\n        NodePointer bestMatch \u003d null;\n        int count \u003d childPointer.getLength();\n        for (int i \u003d 0; i \u003c count; i++) {\n            childPointer.setIndex(i);\n            NodePointer pointer \u003d doStep(context, childPointer, steps, current_step + 1);\n            int quality \u003d computeQuality(pointer);\n            if (quality \u003d\u003d PERFECT_MATCH) {\n                return pointer;\n            } else if (quality \u003e bestQuality) {\n                bestQuality \u003d quality;\n                bestMatch \u003d (NodePointer) pointer.clone();\n            }\n        }\n        if (bestMatch !\u003d null) {\n            return bestMatch;\n        }\n        return createNullPointer(context, childPointer, steps, current_step);\n    } else {\n        return doStep(context, childPointer, steps, current_step + 1);\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 202,
      "functionName": "doStep_noPredicates_propertyOwner",
      "functionAnnotation": "",
      "functionDoc": "We have a step that starts with a property owner (bean, map, etc) and has\nno predicates.  The name test of the step may map to a scalar property\nor to a collection.  If it is a collection, we should apply the tail of\nthe path to each element until we find a match. If we don\u0027t find\na perfect match, we should return the \"best quality\" pointer, which\nhas the longest chain of steps mapping to existing nodes and the shortes\ntail of Null* pointers.\n"
    }
  }
}