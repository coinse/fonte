{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JXPathContextFactory.java",
  "functionName": "findFactory",
  "functionId": "findFactory___property-String__defaultFactory-String",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Private implementation method - will find the implementation\nclass in the specified order.\n\n@param property Property name\n@param defaultFactory Default implementation, if nothing else is found\n@return class name of the JXPathContextFactory\n",
  "functionStartLine": 166,
  "functionEndLine": 272,
  "numCommitsSeen": 16,
  "timeTaken": 469,
  "changeHistory": [
    "d783b219111b2f92b048a5588f6de3d4e8040c2b",
    "65811463048ef988c857aa4c87a4db54a4a826a4",
    "5029755ad7d8d5279f2d15305e1ca46daae98883",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "b5225ea81fd5446418f13d058545751bfb1b8e83",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "907ab1054dc2a2c9c5e248aae74996d7a4ab1f6e",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "d783b219111b2f92b048a5588f6de3d4e8040c2b": "Ybodychange",
    "65811463048ef988c857aa4c87a4db54a4a826a4": "Ybodychange",
    "5029755ad7d8d5279f2d15305e1ca46daae98883": "Ybodychange",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ydocchange",
    "b5225ea81fd5446418f13d058545751bfb1b8e83": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Ybodychange",
    "907ab1054dc2a2c9c5e248aae74996d7a4ab1f6e": "Ymultichange(Ybodychange,Ydocchange)",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d783b219111b2f92b048a5588f6de3d4e8040c2b": {
      "type": "Ybodychange",
      "commitMessage": "checkstyle/pmd\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@670727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/23/08, 1:10 PM",
      "commitName": "d783b219111b2f92b048a5588f6de3d4e8040c2b",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "6/16/08, 2:59 PM",
      "commitNameOld": "65811463048ef988c857aa4c87a4db54a4a826a4",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            FileInputStream fis \u003d new FileInputStream(f);\n            try {\n                props.load(fis);\n            } finally {\n                if (fis !\u003d null) {\n                    try {\n                        fis.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n            String factory \u003d props.getProperty(property);\n            if (factory !\u003d null) {\n                if (debug) {\n                    System.err.println(\"JXPath: found java.home property \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (IOException ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            String factory \u003d null;\n            try {\n                factory \u003d rd.readLine();\n            } finally {\n                try {\n                    rd.close();\n                } catch (IOException e) {\n                }\n            }\n            if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n                if (debug) {\n                    System.err.println(\"JXPath: loaded from services: \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
      "functionStartLine": 164,
      "functionName": "findFactory",
      "functionAnnotation": "",
      "functionDoc": "Private implementation method - will find the implementation\nclass in the specified order.\n\n@param property Property name\n@param defaultFactory Default implementation, if nothing else is found\n@return class name of the JXPathContextFactory\n",
      "diff": "",
      "extendedDetails": {}
    },
    "65811463048ef988c857aa4c87a4db54a4a826a4": {
      "type": "Ybodychange",
      "commitMessage": "findbugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@668329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/08, 2:59 PM",
      "commitName": "65811463048ef988c857aa4c87a4db54a4a826a4",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "6/11/08, 4:54 PM",
      "commitNameOld": "5029755ad7d8d5279f2d15305e1ca46daae98883",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 4.92,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            FileInputStream fis \u003d new FileInputStream(f);\n            try {\n                props.load(fis);\n            } finally {\n                if (fis !\u003d null) {\n                    try {\n                        fis.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n            String factory \u003d props.getProperty(property);\n            if (factory !\u003d null) {\n                if (debug) {\n                    System.err.println(\"JXPath: found java.home property \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (IOException ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            String factory \u003d null;\n            try {\n                factory \u003d rd.readLine();\n            } finally {\n                try {\n                    rd.close();\n                } catch (IOException e) {\n                }\n            }\n            if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n                if (debug) {\n                    System.err.println(\"JXPath: loaded from services: \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
      "functionStartLine": 164,
      "functionName": "findFactory",
      "functionAnnotation": "",
      "functionDoc": "Private implementation method - will find the implementation\nclass in the specified order.\n\n@param property Property name\n@param defaultFactory Default implementation, if nothing else is found\n@return class name of the JXPathContextFactory\n",
      "diff": "@@ -1,78 +1,78 @@\n private static String findFactory(String property, String defaultFactory) {\n     try {\n         String systemProp \u003d System.getProperty(property);\n         if (systemProp !\u003d null) {\n             if (debug) {\n                 System.err.println(\"JXPath: found system property\" + systemProp);\n             }\n             return systemProp;\n         }\n     } catch (SecurityException se) {\n     }\n     try {\n         String javah \u003d System.getProperty(\"java.home\");\n         String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n         File f \u003d new File(configFile);\n         if (f.exists()) {\n             Properties props \u003d new Properties();\n             FileInputStream fis \u003d new FileInputStream(f);\n             try {\n                 props.load(fis);\n             } finally {\n                 if (fis !\u003d null) {\n                     try {\n                         fis.close();\n                     } catch (IOException e) {\n                     }\n                 }\n             }\n             String factory \u003d props.getProperty(property);\n             if (factory !\u003d null) {\n                 if (debug) {\n                     System.err.println(\"JXPath: found java.home property \" + factory);\n                 }\n                 return factory;\n             }\n         }\n-    } catch (Exception ex) {\n+    } catch (IOException ex) {\n         if (debug) {\n             ex.printStackTrace();\n         }\n     }\n     String serviceId \u003d \"META-INF/services/\" + property;\n     try {\n         ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n         InputStream is \u003d null;\n         if (cl \u003d\u003d null) {\n             is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n         } else {\n             is \u003d cl.getResourceAsStream(serviceId);\n         }\n         if (is !\u003d null) {\n             if (debug) {\n                 System.err.println(\"JXPath: found  \" + serviceId);\n             }\n             BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n             String factory \u003d null;\n             try {\n                 factory \u003d rd.readLine();\n             } finally {\n                 try {\n                     rd.close();\n                 } catch (IOException e) {\n                 }\n             }\n             if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n                 if (debug) {\n                     System.err.println(\"JXPath: loaded from services: \" + factory);\n                 }\n                 return factory;\n             }\n         }\n     } catch (Exception ex) {\n         if (debug) {\n             ex.printStackTrace();\n         }\n     }\n     return defaultFactory;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5029755ad7d8d5279f2d15305e1ca46daae98883": {
      "type": "Ybodychange",
      "commitMessage": "catch IOExceptions reading resources\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@666913 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/11/08, 4:54 PM",
      "commitName": "5029755ad7d8d5279f2d15305e1ca46daae98883",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "5/2/08, 10:46 AM",
      "commitNameOld": "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 40.26,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            FileInputStream fis \u003d new FileInputStream(f);\n            try {\n                props.load(fis);\n            } finally {\n                if (fis !\u003d null) {\n                    try {\n                        fis.close();\n                    } catch (IOException e) {\n                    }\n                }\n            }\n            String factory \u003d props.getProperty(property);\n            if (factory !\u003d null) {\n                if (debug) {\n                    System.err.println(\"JXPath: found java.home property \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            String factory \u003d null;\n            try {\n                factory \u003d rd.readLine();\n            } finally {\n                try {\n                    rd.close();\n                } catch (IOException e) {\n                }\n            }\n            if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n                if (debug) {\n                    System.err.println(\"JXPath: loaded from services: \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
      "functionStartLine": 164,
      "functionName": "findFactory",
      "functionAnnotation": "",
      "functionDoc": "Private implementation method - will find the implementation\nclass in the specified order.\n\n@param property Property name\n@param defaultFactory Default implementation, if nothing else is found\n@return class name of the JXPathContextFactory\n",
      "diff": "@@ -1,61 +1,78 @@\n private static String findFactory(String property, String defaultFactory) {\n     try {\n         String systemProp \u003d System.getProperty(property);\n         if (systemProp !\u003d null) {\n             if (debug) {\n                 System.err.println(\"JXPath: found system property\" + systemProp);\n             }\n             return systemProp;\n         }\n     } catch (SecurityException se) {\n     }\n     try {\n         String javah \u003d System.getProperty(\"java.home\");\n         String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n         File f \u003d new File(configFile);\n         if (f.exists()) {\n             Properties props \u003d new Properties();\n-            props.load(new FileInputStream(f));\n+            FileInputStream fis \u003d new FileInputStream(f);\n+            try {\n+                props.load(fis);\n+            } finally {\n+                if (fis !\u003d null) {\n+                    try {\n+                        fis.close();\n+                    } catch (IOException e) {\n+                    }\n+                }\n+            }\n             String factory \u003d props.getProperty(property);\n             if (factory !\u003d null) {\n                 if (debug) {\n                     System.err.println(\"JXPath: found java.home property \" + factory);\n                 }\n                 return factory;\n             }\n         }\n     } catch (Exception ex) {\n         if (debug) {\n             ex.printStackTrace();\n         }\n     }\n     String serviceId \u003d \"META-INF/services/\" + property;\n     try {\n         ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n         InputStream is \u003d null;\n         if (cl \u003d\u003d null) {\n             is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n         } else {\n             is \u003d cl.getResourceAsStream(serviceId);\n         }\n         if (is !\u003d null) {\n             if (debug) {\n                 System.err.println(\"JXPath: found  \" + serviceId);\n             }\n             BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n-            String factory \u003d rd.readLine();\n-            rd.close();\n+            String factory \u003d null;\n+            try {\n+                factory \u003d rd.readLine();\n+            } finally {\n+                try {\n+                    rd.close();\n+                } catch (IOException e) {\n+                }\n+            }\n             if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n                 if (debug) {\n                     System.err.println(\"JXPath: loaded from services: \" + factory);\n                 }\n                 return factory;\n             }\n         }\n     } catch (Exception ex) {\n         if (debug) {\n             ex.printStackTrace();\n         }\n     }\n     return defaultFactory;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ydocchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 383.08,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            props.load(new FileInputStream(f));\n            String factory \u003d props.getProperty(property);\n            if (factory !\u003d null) {\n                if (debug) {\n                    System.err.println(\"JXPath: found java.home property \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            String factory \u003d rd.readLine();\n            rd.close();\n            if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n                if (debug) {\n                    System.err.println(\"JXPath: loaded from services: \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
      "functionStartLine": 163,
      "functionName": "findFactory",
      "functionAnnotation": "",
      "functionDoc": "Private implementation method - will find the implementation\nclass in the specified order.\n\n@param property Property name\n@param defaultFactory Default implementation, if nothing else is found\n@return class name of the JXPathContextFactory\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param defaultFactory Default implementation, if nothing else is found\n\n        @return class name of the JXPathContextFactory\n",
        "newValue": "Private implementation method - will find the implementation\nclass in the specified order.\n\n@param property Property name\n@param defaultFactory Default implementation, if nothing else is found\n@return class name of the JXPathContextFactory\n"
      }
    },
    "b5225ea81fd5446418f13d058545751bfb1b8e83": {
      "type": "Ybodychange",
      "commitMessage": "Fixed Bug 22333:  JXPathContextFactory doesn\u0027t cache most common result of search\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/23/03, 7:30 PM",
      "commitName": "b5225ea81fd5446418f13d058545751bfb1b8e83",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/10/03, 4:59 PM",
      "commitNameOld": "bdf423f27a76d2006ffe1058d6530eebf619c877",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 166.06,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            props.load(new FileInputStream(f));\n            String factory \u003d props.getProperty(property);\n            if (factory !\u003d null) {\n                if (debug) {\n                    System.err.println(\"JXPath: found java.home property \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            String factory \u003d rd.readLine();\n            rd.close();\n            if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n                if (debug) {\n                    System.err.println(\"JXPath: loaded from services: \" + factory);\n                }\n                return factory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
      "functionStartLine": 203,
      "functionName": "findFactory",
      "functionAnnotation": "",
      "functionDoc": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param defaultFactory Default implementation, if nothing else is found\n\n        @return class name of the JXPathContextFactory\n",
      "diff": "@@ -1,74 +1,61 @@\n private static String findFactory(String property, String defaultFactory) {\n     try {\n         String systemProp \u003d System.getProperty(property);\n         if (systemProp !\u003d null) {\n             if (debug) {\n                 System.err.println(\"JXPath: found system property\" + systemProp);\n             }\n             return systemProp;\n         }\n     } catch (SecurityException se) {\n     }\n-    if (foundFactory !\u003d null) {\n-        return foundFactory;\n-    }\n-    try {\n-        String systemProp \u003d System.getProperty(property);\n-        if (systemProp !\u003d null) {\n-            if (debug) {\n-                System.err.println(\"JXPath: found system property\" + systemProp);\n-            }\n-            return systemProp;\n-        }\n-    } catch (SecurityException se) {\n-    }\n     try {\n         String javah \u003d System.getProperty(\"java.home\");\n         String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n         File f \u003d new File(configFile);\n         if (f.exists()) {\n             Properties props \u003d new Properties();\n             props.load(new FileInputStream(f));\n-            foundFactory \u003d props.getProperty(property);\n-            if (debug) {\n-                System.err.println(\"JXPath: found java.home property \" + foundFactory);\n-            }\n-            if (foundFactory !\u003d null) {\n-                return foundFactory;\n+            String factory \u003d props.getProperty(property);\n+            if (factory !\u003d null) {\n+                if (debug) {\n+                    System.err.println(\"JXPath: found java.home property \" + factory);\n+                }\n+                return factory;\n             }\n         }\n     } catch (Exception ex) {\n         if (debug) {\n             ex.printStackTrace();\n         }\n     }\n     String serviceId \u003d \"META-INF/services/\" + property;\n     try {\n         ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n         InputStream is \u003d null;\n         if (cl \u003d\u003d null) {\n             is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n         } else {\n             is \u003d cl.getResourceAsStream(serviceId);\n         }\n         if (is !\u003d null) {\n             if (debug) {\n                 System.err.println(\"JXPath: found  \" + serviceId);\n             }\n             BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n-            foundFactory \u003d rd.readLine();\n+            String factory \u003d rd.readLine();\n             rd.close();\n-            if (debug) {\n-                System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n-            }\n-            if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n-                return foundFactory;\n+            if (factory !\u003d null \u0026\u0026 !\"\".equals(factory)) {\n+                if (debug) {\n+                    System.err.println(\"JXPath: loaded from services: \" + factory);\n+                }\n+                return factory;\n             }\n         }\n     } catch (Exception ex) {\n         if (debug) {\n             ex.printStackTrace();\n         }\n     }\n     return defaultFactory;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Ybodychange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/23/02, 9:06 PM",
      "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 262.07,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    if (foundFactory !\u003d null) {\n        return foundFactory;\n    }\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            props.load(new FileInputStream(f));\n            foundFactory \u003d props.getProperty(property);\n            if (debug) {\n                System.err.println(\"JXPath: found java.home property \" + foundFactory);\n            }\n            if (foundFactory !\u003d null) {\n                return foundFactory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            foundFactory \u003d rd.readLine();\n            rd.close();\n            if (debug) {\n                System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n            }\n            if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n                return foundFactory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
      "functionStartLine": 205,
      "functionName": "findFactory",
      "functionAnnotation": "",
      "functionDoc": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param defaultFactory Default implementation, if nothing else is found\n\n        @return class name of the JXPathContextFactory\n",
      "diff": "",
      "extendedDetails": {}
    },
    "907ab1054dc2a2c9c5e248aae74996d7a4ab1f6e": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Improved formatting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/02, 8:31 PM",
      "commitName": "907ab1054dc2a2c9c5e248aae74996d7a4ab1f6e",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Improved formatting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136726 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/23/02, 8:31 PM",
          "commitName": "907ab1054dc2a2c9c5e248aae74996d7a4ab1f6e",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 5:47 PM",
          "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 244.11,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    if (foundFactory !\u003d null) {\n        return foundFactory;\n    }\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            props.load(new FileInputStream(f));\n            foundFactory \u003d props.getProperty(property);\n            if (debug) {\n                System.err.println(\"JXPath: found java.home property \" + foundFactory);\n            }\n            if (foundFactory !\u003d null) {\n                return foundFactory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            foundFactory \u003d rd.readLine();\n            rd.close();\n            if (debug) {\n                System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n            }\n            if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n                return foundFactory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
          "functionStartLine": 196,
          "functionName": "findFactory",
          "functionAnnotation": "",
          "functionDoc": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param defaultFactory Default implementation, if nothing else is found\n\n        @return class name of the JXPathContextFactory\n",
          "diff": "@@ -1,65 +1,74 @@\n private static String findFactory(String property, String defaultFactory) {\n     try {\n         String systemProp \u003d System.getProperty(property);\n         if (systemProp !\u003d null) {\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found system property\" + systemProp);\n+            }\n             return systemProp;\n         }\n     } catch (SecurityException se) {\n     }\n-    if (foundFactory !\u003d null)\n+    if (foundFactory !\u003d null) {\n         return foundFactory;\n+    }\n     try {\n         String systemProp \u003d System.getProperty(property);\n         if (systemProp !\u003d null) {\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found system property\" + systemProp);\n+            }\n             return systemProp;\n         }\n     } catch (SecurityException se) {\n     }\n     try {\n         String javah \u003d System.getProperty(\"java.home\");\n         String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n         File f \u003d new File(configFile);\n         if (f.exists()) {\n             Properties props \u003d new Properties();\n             props.load(new FileInputStream(f));\n             foundFactory \u003d props.getProperty(property);\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found java.home property \" + foundFactory);\n-            if (foundFactory !\u003d null)\n+            }\n+            if (foundFactory !\u003d null) {\n                 return foundFactory;\n+            }\n         }\n     } catch (Exception ex) {\n-        if (debug)\n+        if (debug) {\n             ex.printStackTrace();\n+        }\n     }\n     String serviceId \u003d \"META-INF/services/\" + property;\n     try {\n         ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n         InputStream is \u003d null;\n         if (cl \u003d\u003d null) {\n             is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n         } else {\n             is \u003d cl.getResourceAsStream(serviceId);\n         }\n         if (is !\u003d null) {\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found  \" + serviceId);\n+            }\n             BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n             foundFactory \u003d rd.readLine();\n             rd.close();\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n+            }\n             if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n                 return foundFactory;\n             }\n         }\n     } catch (Exception ex) {\n-        if (debug)\n+        if (debug) {\n             ex.printStackTrace();\n+        }\n     }\n     return defaultFactory;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Improved formatting\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136726 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/23/02, 8:31 PM",
          "commitName": "907ab1054dc2a2c9c5e248aae74996d7a4ab1f6e",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 5:47 PM",
          "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 244.11,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    if (foundFactory !\u003d null) {\n        return foundFactory;\n    }\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            }\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            props.load(new FileInputStream(f));\n            foundFactory \u003d props.getProperty(property);\n            if (debug) {\n                System.err.println(\"JXPath: found java.home property \" + foundFactory);\n            }\n            if (foundFactory !\u003d null) {\n                return foundFactory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug) {\n                System.err.println(\"JXPath: found  \" + serviceId);\n            }\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            foundFactory \u003d rd.readLine();\n            rd.close();\n            if (debug) {\n                System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n            }\n            if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n                return foundFactory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug) {\n            ex.printStackTrace();\n        }\n    }\n    return defaultFactory;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
          "functionStartLine": 196,
          "functionName": "findFactory",
          "functionAnnotation": "",
          "functionDoc": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param defaultFactory Default implementation, if nothing else is found\n\n        @return class name of the JXPathContextFactory\n",
          "diff": "@@ -1,65 +1,74 @@\n private static String findFactory(String property, String defaultFactory) {\n     try {\n         String systemProp \u003d System.getProperty(property);\n         if (systemProp !\u003d null) {\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found system property\" + systemProp);\n+            }\n             return systemProp;\n         }\n     } catch (SecurityException se) {\n     }\n-    if (foundFactory !\u003d null)\n+    if (foundFactory !\u003d null) {\n         return foundFactory;\n+    }\n     try {\n         String systemProp \u003d System.getProperty(property);\n         if (systemProp !\u003d null) {\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found system property\" + systemProp);\n+            }\n             return systemProp;\n         }\n     } catch (SecurityException se) {\n     }\n     try {\n         String javah \u003d System.getProperty(\"java.home\");\n         String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n         File f \u003d new File(configFile);\n         if (f.exists()) {\n             Properties props \u003d new Properties();\n             props.load(new FileInputStream(f));\n             foundFactory \u003d props.getProperty(property);\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found java.home property \" + foundFactory);\n-            if (foundFactory !\u003d null)\n+            }\n+            if (foundFactory !\u003d null) {\n                 return foundFactory;\n+            }\n         }\n     } catch (Exception ex) {\n-        if (debug)\n+        if (debug) {\n             ex.printStackTrace();\n+        }\n     }\n     String serviceId \u003d \"META-INF/services/\" + property;\n     try {\n         ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n         InputStream is \u003d null;\n         if (cl \u003d\u003d null) {\n             is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n         } else {\n             is \u003d cl.getResourceAsStream(serviceId);\n         }\n         if (is !\u003d null) {\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: found  \" + serviceId);\n+            }\n             BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n             foundFactory \u003d rd.readLine();\n             rd.close();\n-            if (debug)\n+            if (debug) {\n                 System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n+            }\n             if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n                 return foundFactory;\n             }\n         }\n     } catch (Exception ex) {\n-        if (debug)\n+        if (debug) {\n             ex.printStackTrace();\n+        }\n     }\n     return defaultFactory;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param factoryId   Qualified property name\n        @param defaultFactory Default implementation, if nothing else is found\n",
            "newValue": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param defaultFactory Default implementation, if nothing else is found\n\n        @return class name of the JXPathContextFactory\n"
          }
        }
      ]
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,65 @@\n+private static String findFactory(String property, String defaultFactory) {\n+    try {\n+        String systemProp \u003d System.getProperty(property);\n+        if (systemProp !\u003d null) {\n+            if (debug)\n+                System.err.println(\"JXPath: found system property\" + systemProp);\n+            return systemProp;\n+        }\n+    } catch (SecurityException se) {\n+    }\n+    if (foundFactory !\u003d null)\n+        return foundFactory;\n+    try {\n+        String systemProp \u003d System.getProperty(property);\n+        if (systemProp !\u003d null) {\n+            if (debug)\n+                System.err.println(\"JXPath: found system property\" + systemProp);\n+            return systemProp;\n+        }\n+    } catch (SecurityException se) {\n+    }\n+    try {\n+        String javah \u003d System.getProperty(\"java.home\");\n+        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n+        File f \u003d new File(configFile);\n+        if (f.exists()) {\n+            Properties props \u003d new Properties();\n+            props.load(new FileInputStream(f));\n+            foundFactory \u003d props.getProperty(property);\n+            if (debug)\n+                System.err.println(\"JXPath: found java.home property \" + foundFactory);\n+            if (foundFactory !\u003d null)\n+                return foundFactory;\n+        }\n+    } catch (Exception ex) {\n+        if (debug)\n+            ex.printStackTrace();\n+    }\n+    String serviceId \u003d \"META-INF/services/\" + property;\n+    try {\n+        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n+        InputStream is \u003d null;\n+        if (cl \u003d\u003d null) {\n+            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n+        } else {\n+            is \u003d cl.getResourceAsStream(serviceId);\n+        }\n+        if (is !\u003d null) {\n+            if (debug)\n+                System.err.println(\"JXPath: found  \" + serviceId);\n+            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n+            foundFactory \u003d rd.readLine();\n+            rd.close();\n+            if (debug)\n+                System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n+            if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n+                return foundFactory;\n+            }\n+        }\n+    } catch (Exception ex) {\n+        if (debug)\n+            ex.printStackTrace();\n+    }\n+    return defaultFactory;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static String findFactory(String property, String defaultFactory) {\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug)\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    if (foundFactory !\u003d null)\n        return foundFactory;\n    try {\n        String systemProp \u003d System.getProperty(property);\n        if (systemProp !\u003d null) {\n            if (debug)\n                System.err.println(\"JXPath: found system property\" + systemProp);\n            return systemProp;\n        }\n    } catch (SecurityException se) {\n    }\n    try {\n        String javah \u003d System.getProperty(\"java.home\");\n        String configFile \u003d javah + File.separator + \"lib\" + File.separator + \"jxpath.properties\";\n        File f \u003d new File(configFile);\n        if (f.exists()) {\n            Properties props \u003d new Properties();\n            props.load(new FileInputStream(f));\n            foundFactory \u003d props.getProperty(property);\n            if (debug)\n                System.err.println(\"JXPath: found java.home property \" + foundFactory);\n            if (foundFactory !\u003d null)\n                return foundFactory;\n        }\n    } catch (Exception ex) {\n        if (debug)\n            ex.printStackTrace();\n    }\n    String serviceId \u003d \"META-INF/services/\" + property;\n    try {\n        ClassLoader cl \u003d JXPathContextFactory.class.getClassLoader();\n        InputStream is \u003d null;\n        if (cl \u003d\u003d null) {\n            is \u003d ClassLoader.getSystemResourceAsStream(serviceId);\n        } else {\n            is \u003d cl.getResourceAsStream(serviceId);\n        }\n        if (is !\u003d null) {\n            if (debug)\n                System.err.println(\"JXPath: found  \" + serviceId);\n            BufferedReader rd \u003d new BufferedReader(new InputStreamReader(is));\n            foundFactory \u003d rd.readLine();\n            rd.close();\n            if (debug)\n                System.err.println(\"JXPath: loaded from services: \" + foundFactory);\n            if (foundFactory !\u003d null \u0026\u0026 !\"\".equals(foundFactory)) {\n                return foundFactory;\n            }\n        }\n    } catch (Exception ex) {\n        if (debug)\n            ex.printStackTrace();\n    }\n    return defaultFactory;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathContextFactory.java",
      "functionStartLine": 193,
      "functionName": "findFactory",
      "functionAnnotation": "",
      "functionDoc": "Private implementation method - will find the implementation\n        class in the specified order.\n\n@ @param property    Property name\n        @param factoryId   Qualified property name\n        @param defaultFactory Default implementation, if nothing else is found\n"
    }
  }
}