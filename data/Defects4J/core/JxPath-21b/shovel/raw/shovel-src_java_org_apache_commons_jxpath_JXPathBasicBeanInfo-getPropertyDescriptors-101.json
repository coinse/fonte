{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JXPathBasicBeanInfo.java",
  "functionName": "getPropertyDescriptors",
  "functionId": "getPropertyDescriptors",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 101,
  "functionEndLine": 132,
  "numCommitsSeen": 19,
  "timeTaken": 491,
  "changeHistory": [
    "65811463048ef988c857aa4c87a4db54a4a826a4",
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
    "dd4faeb14ea5e624a4d084fdf0b06db2eada658c",
    "d824eaf8ba1e380a48f293fe093c3331a5b4e202",
    "e2b855e2fa0285679dfc2a9a11121c69f7f494d5",
    "fca9fd233a4c021d54ff7609fa8fb8b8333129f8",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "65811463048ef988c857aa4c87a4db54a4a826a4": "Ybodychange",
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f": "Ydocchange",
    "dd4faeb14ea5e624a4d084fdf0b06db2eada658c": "Ydocchange",
    "d824eaf8ba1e380a48f293fe093c3331a5b4e202": "Ybodychange",
    "e2b855e2fa0285679dfc2a9a11121c69f7f494d5": "Ymodifierchange",
    "fca9fd233a4c021d54ff7609fa8fb8b8333129f8": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65811463048ef988c857aa4c87a4db54a4a826a4": {
      "type": "Ybodychange",
      "commitMessage": "findbugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@668329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/08, 2:59 PM",
      "commitName": "65811463048ef988c857aa4c87a4db54a4a826a4",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "5/2/08, 10:46 AM",
      "commitNameOld": "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 45.18,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        if (clazz \u003d\u003d Object.class) {\n            propertyDescriptors \u003d new PropertyDescriptor[0];\n        } else {\n            try {\n                BeanInfo bi \u003d null;\n                if (clazz.isInterface()) {\n                    bi \u003d Introspector.getBeanInfo(clazz);\n                } else {\n                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n                }\n                PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n                PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n                System.arraycopy(pds, 0, descriptors, 0, pds.length);\n                Arrays.sort(descriptors, PROPERTY_DESCRIPTOR_COMPARATOR);\n                propertyDescriptors \u003d descriptors;\n            } catch (IntrospectionException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n    if (propertyDescriptors.length \u003d\u003d 0) {\n        return propertyDescriptors;\n    }\n    PropertyDescriptor[] result \u003d new PropertyDescriptor[propertyDescriptors.length];\n    System.arraycopy(propertyDescriptors, 0, result, 0, propertyDescriptors.length);\n    return result;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 101,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n     if (propertyDescriptors \u003d\u003d null) {\n         if (clazz \u003d\u003d Object.class) {\n             propertyDescriptors \u003d new PropertyDescriptor[0];\n         } else {\n             try {\n                 BeanInfo bi \u003d null;\n                 if (clazz.isInterface()) {\n                     bi \u003d Introspector.getBeanInfo(clazz);\n                 } else {\n                     bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n                 }\n                 PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n                 PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n                 System.arraycopy(pds, 0, descriptors, 0, pds.length);\n-                Arrays.sort(descriptors, new Comparator() {\n-\n-                    public int compare(Object left, Object right) {\n-                        return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n-                    }\n-                });\n+                Arrays.sort(descriptors, PROPERTY_DESCRIPTOR_COMPARATOR);\n                 propertyDescriptors \u003d descriptors;\n             } catch (IntrospectionException ex) {\n                 ex.printStackTrace();\n             }\n         }\n     }\n-    return propertyDescriptors;\n+    if (propertyDescriptors.length \u003d\u003d 0) {\n+        return propertyDescriptors;\n+    }\n+    PropertyDescriptor[] result \u003d new PropertyDescriptor[propertyDescriptors.length];\n+    System.arraycopy(propertyDescriptors, 0, result, 0, propertyDescriptors.length);\n+    return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f": {
      "type": "Ydocchange",
      "commitMessage": "Improved the Javadoc:\n- added external links to JDOM, BeanUtils, and JEE\n- added @links in the class and method documentations to improve the navigation\n- removed the @inheritDoc with no additional comments\nAdded line feeds at the end of the source files\nRemoved the old constructors and the suite() methods from the JUnit tests\nUpdated the relocated artifacts in the POM\nDowngraded the dependency on JUnit to 3.8.1\nAdded PMD to the reports\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@652845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/2/08, 10:46 AM",
      "commitName": "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "2/3/08, 6:04 PM",
      "commitNameOld": "00d67383c2e842626710831782f7ec768d1ddc1c",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 88.65,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        if (clazz \u003d\u003d Object.class) {\n            propertyDescriptors \u003d new PropertyDescriptor[0];\n        } else {\n            try {\n                BeanInfo bi \u003d null;\n                if (clazz.isInterface()) {\n                    bi \u003d Introspector.getBeanInfo(clazz);\n                } else {\n                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n                }\n                PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n                PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n                System.arraycopy(pds, 0, descriptors, 0, pds.length);\n                Arrays.sort(descriptors, new Comparator() {\n\n                    public int compare(Object left, Object right) {\n                        return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                    }\n                });\n                propertyDescriptors \u003d descriptors;\n            } catch (IntrospectionException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n    return propertyDescriptors;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 92,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldValue": "@inheritDoc}\n",
        "newValue": ""
      }
    },
    "dd4faeb14ea5e624a4d084fdf0b06db2eada658c": {
      "type": "Ydocchange",
      "commitMessage": "javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@617887 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/2/08, 12:31 PM",
      "commitName": "dd4faeb14ea5e624a4d084fdf0b06db2eada658c",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/2/08, 12:29 PM",
      "commitNameOld": "d824eaf8ba1e380a48f293fe093c3331a5b4e202",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        if (clazz \u003d\u003d Object.class) {\n            propertyDescriptors \u003d new PropertyDescriptor[0];\n        } else {\n            try {\n                BeanInfo bi \u003d null;\n                if (clazz.isInterface()) {\n                    bi \u003d Introspector.getBeanInfo(clazz);\n                } else {\n                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n                }\n                PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n                PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n                System.arraycopy(pds, 0, descriptors, 0, pds.length);\n                Arrays.sort(descriptors, new Comparator() {\n\n                    public int compare(Object left, Object right) {\n                        return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                    }\n                });\n                propertyDescriptors \u003d descriptors;\n            } catch (IntrospectionException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n    return propertyDescriptors;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 94,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@inheritDoc}\n"
      }
    },
    "d824eaf8ba1e380a48f293fe093c3331a5b4e202": {
      "type": "Ybodychange",
      "commitMessage": "avoid error due to calling getBeanInfo(Object.class, Object.class)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@617884 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/2/08, 12:29 PM",
      "commitName": "d824eaf8ba1e380a48f293fe093c3331a5b4e202",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/1/07, 12:50 PM",
      "commitNameOld": "e2b855e2fa0285679dfc2a9a11121c69f7f494d5",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 365.99,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        if (clazz \u003d\u003d Object.class) {\n            propertyDescriptors \u003d new PropertyDescriptor[0];\n        } else {\n            try {\n                BeanInfo bi \u003d null;\n                if (clazz.isInterface()) {\n                    bi \u003d Introspector.getBeanInfo(clazz);\n                } else {\n                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n                }\n                PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n                PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n                System.arraycopy(pds, 0, descriptors, 0, pds.length);\n                Arrays.sort(descriptors, new Comparator() {\n\n                    public int compare(Object left, Object right) {\n                        return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                    }\n                });\n                propertyDescriptors \u003d descriptors;\n            } catch (IntrospectionException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n    return propertyDescriptors;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 74,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,29 @@\n public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n     if (propertyDescriptors \u003d\u003d null) {\n-        try {\n-            BeanInfo bi \u003d null;\n-            if (clazz.isInterface()) {\n-                bi \u003d Introspector.getBeanInfo(clazz);\n-            } else {\n-                bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n-            }\n-            PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n-            PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n-            System.arraycopy(pds, 0, descriptors, 0, pds.length);\n-            Arrays.sort(descriptors, new Comparator() {\n-\n-                public int compare(Object left, Object right) {\n-                    return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n+        if (clazz \u003d\u003d Object.class) {\n+            propertyDescriptors \u003d new PropertyDescriptor[0];\n+        } else {\n+            try {\n+                BeanInfo bi \u003d null;\n+                if (clazz.isInterface()) {\n+                    bi \u003d Introspector.getBeanInfo(clazz);\n+                } else {\n+                    bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n                 }\n-            });\n-            propertyDescriptors \u003d descriptors;\n-        } catch (IntrospectionException ex) {\n-            ex.printStackTrace();\n+                PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n+                PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n+                System.arraycopy(pds, 0, descriptors, 0, pds.length);\n+                Arrays.sort(descriptors, new Comparator() {\n+\n+                    public int compare(Object left, Object right) {\n+                        return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n+                    }\n+                });\n+                propertyDescriptors \u003d descriptors;\n+            } catch (IntrospectionException ex) {\n+                ex.printStackTrace();\n+            }\n         }\n     }\n     return propertyDescriptors;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e2b855e2fa0285679dfc2a9a11121c69f7f494d5": {
      "type": "Ymodifierchange",
      "commitMessage": "don\u0027t loop through a String array calling equals(); use a map\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@502353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/1/07, 12:50 PM",
      "commitName": "e2b855e2fa0285679dfc2a9a11121c69f7f494d5",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 64.63,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        try {\n            BeanInfo bi \u003d null;\n            if (clazz.isInterface()) {\n                bi \u003d Introspector.getBeanInfo(clazz);\n            } else {\n                bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n            }\n            PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n            PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n            System.arraycopy(pds, 0, descriptors, 0, pds.length);\n            Arrays.sort(descriptors, new Comparator() {\n\n                public int compare(Object left, Object right) {\n                    return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                }\n            });\n            propertyDescriptors \u003d descriptors;\n        } catch (IntrospectionException ex) {\n            ex.printStackTrace();\n        }\n    }\n    return propertyDescriptors;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 74,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n-public PropertyDescriptor[] getPropertyDescriptors() {\n+public synchronized PropertyDescriptor[] getPropertyDescriptors() {\n     if (propertyDescriptors \u003d\u003d null) {\n         try {\n             BeanInfo bi \u003d null;\n             if (clazz.isInterface()) {\n                 bi \u003d Introspector.getBeanInfo(clazz);\n             } else {\n                 bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n             }\n             PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n             PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n             System.arraycopy(pds, 0, descriptors, 0, pds.length);\n             Arrays.sort(descriptors, new Comparator() {\n \n                 public int compare(Object left, Object right) {\n                     return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                 }\n             });\n             propertyDescriptors \u003d descriptors;\n         } catch (IntrospectionException ex) {\n             ex.printStackTrace();\n         }\n     }\n     return propertyDescriptors;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "fca9fd233a4c021d54ff7609fa8fb8b8333129f8": {
      "type": "Ybodychange",
      "commitMessage": "Fixed a synchronization issue described in this bug report:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id\u003d34552\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329470 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/29/05, 12:11 PM",
      "commitName": "fca9fd233a4c021d54ff7609fa8fb8b8333129f8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/26/05, 5:07 AM",
      "commitNameOld": "ecb571fc93e4a7bed9545a295c177d1ab4b1f4bf",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 245.25,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        try {\n            BeanInfo bi \u003d null;\n            if (clazz.isInterface()) {\n                bi \u003d Introspector.getBeanInfo(clazz);\n            } else {\n                bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n            }\n            PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n            PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n            System.arraycopy(pds, 0, descriptors, 0, pds.length);\n            Arrays.sort(descriptors, new Comparator() {\n\n                public int compare(Object left, Object right) {\n                    return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                }\n            });\n            propertyDescriptors \u003d descriptors;\n        } catch (IntrospectionException ex) {\n            ex.printStackTrace();\n        }\n    }\n    return propertyDescriptors;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 72,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,25 @@\n public PropertyDescriptor[] getPropertyDescriptors() {\n     if (propertyDescriptors \u003d\u003d null) {\n         try {\n             BeanInfo bi \u003d null;\n             if (clazz.isInterface()) {\n                 bi \u003d Introspector.getBeanInfo(clazz);\n             } else {\n                 bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n             }\n             PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n-            propertyDescriptors \u003d new PropertyDescriptor[pds.length];\n-            System.arraycopy(pds, 0, propertyDescriptors, 0, pds.length);\n-            Arrays.sort(propertyDescriptors, new Comparator() {\n+            PropertyDescriptor[] descriptors \u003d new PropertyDescriptor[pds.length];\n+            System.arraycopy(pds, 0, descriptors, 0, pds.length);\n+            Arrays.sort(descriptors, new Comparator() {\n \n                 public int compare(Object left, Object right) {\n                     return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                 }\n             });\n+            propertyDescriptors \u003d descriptors;\n         } catch (IntrospectionException ex) {\n             ex.printStackTrace();\n         }\n     }\n     return propertyDescriptors;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "6/15/02, 8:22 PM",
      "commitNameOld": "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 209.1,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "public PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        try {\n            BeanInfo bi \u003d null;\n            if (clazz.isInterface()) {\n                bi \u003d Introspector.getBeanInfo(clazz);\n            } else {\n                bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n            }\n            PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n            propertyDescriptors \u003d new PropertyDescriptor[pds.length];\n            System.arraycopy(pds, 0, propertyDescriptors, 0, pds.length);\n            Arrays.sort(propertyDescriptors, new Comparator() {\n\n                public int compare(Object left, Object right) {\n                    return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                }\n            });\n        } catch (IntrospectionException ex) {\n            ex.printStackTrace();\n        }\n    }\n    return propertyDescriptors;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 118,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,24 @@\n+public PropertyDescriptor[] getPropertyDescriptors() {\n+    if (propertyDescriptors \u003d\u003d null) {\n+        try {\n+            BeanInfo bi \u003d null;\n+            if (clazz.isInterface()) {\n+                bi \u003d Introspector.getBeanInfo(clazz);\n+            } else {\n+                bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n+            }\n+            PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n+            propertyDescriptors \u003d new PropertyDescriptor[pds.length];\n+            System.arraycopy(pds, 0, propertyDescriptors, 0, pds.length);\n+            Arrays.sort(propertyDescriptors, new Comparator() {\n+\n+                public int compare(Object left, Object right) {\n+                    return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n+                }\n+            });\n+        } catch (IntrospectionException ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+    return propertyDescriptors;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public PropertyDescriptor[] getPropertyDescriptors() {\n    if (propertyDescriptors \u003d\u003d null) {\n        try {\n            BeanInfo bi \u003d null;\n            if (clazz.isInterface()) {\n                bi \u003d Introspector.getBeanInfo(clazz);\n            } else {\n                bi \u003d Introspector.getBeanInfo(clazz, Object.class);\n            }\n            PropertyDescriptor[] pds \u003d bi.getPropertyDescriptors();\n            propertyDescriptors \u003d new PropertyDescriptor[pds.length];\n            System.arraycopy(pds, 0, propertyDescriptors, 0, pds.length);\n            Arrays.sort(propertyDescriptors, new Comparator() {\n\n                public int compare(Object left, Object right) {\n                    return ((PropertyDescriptor) left).getName().compareTo(((PropertyDescriptor) right).getName());\n                }\n            });\n        } catch (IntrospectionException ex) {\n            ex.printStackTrace();\n        }\n    }\n    return propertyDescriptors;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 114,
      "functionName": "getPropertyDescriptors",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}