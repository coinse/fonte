{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JXPathBasicBeanInfo.java",
  "functionName": "getPropertyDescriptor",
  "functionId": "getPropertyDescriptor___propertyName-String",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 134,
  "functionEndLine": 143,
  "numCommitsSeen": 26,
  "timeTaken": 2539,
  "changeHistory": [
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
    "dd4faeb14ea5e624a4d084fdf0b06db2eada658c",
    "e2b855e2fa0285679dfc2a9a11121c69f7f494d5",
    "fca9fd233a4c021d54ff7609fa8fb8b8333129f8",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "34b7a47ae949c763178a457582a5df2cb564f53d"
  ],
  "changeHistoryShort": {
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f": "Ydocchange",
    "dd4faeb14ea5e624a4d084fdf0b06db2eada658c": "Ydocchange",
    "e2b855e2fa0285679dfc2a9a11121c69f7f494d5": "Ymultichange(Ymodifierchange,Ybodychange)",
    "fca9fd233a4c021d54ff7609fa8fb8b8333129f8": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "34b7a47ae949c763178a457582a5df2cb564f53d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f": {
      "type": "Ydocchange",
      "commitMessage": "Improved the Javadoc:\n- added external links to JDOM, BeanUtils, and JEE\n- added @links in the class and method documentations to improve the navigation\n- removed the @inheritDoc with no additional comments\nAdded line feeds at the end of the source files\nRemoved the old constructors and the suite() methods from the JUnit tests\nUpdated the relocated artifacts in the POM\nDowngraded the dependency on JUnit to 3.8.1\nAdded PMD to the reports\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@652845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/2/08, 10:46 AM",
      "commitName": "cd0b3e7260bd6dbc87f0ae86308cf35d79e14d8f",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "2/3/08, 6:04 PM",
      "commitNameOld": "00d67383c2e842626710831782f7ec768d1ddc1c",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 88.65,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyDescriptorMap \u003d\u003d null) {\n        propertyDescriptorMap \u003d new HashMap();\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyDescriptorMap.put(pds[i].getName(), pds[i]);\n        }\n    }\n    return (PropertyDescriptor) propertyDescriptorMap.get(propertyName);\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 125,
      "functionName": "getPropertyDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldValue": "@inheritDoc}\n",
        "newValue": ""
      }
    },
    "dd4faeb14ea5e624a4d084fdf0b06db2eada658c": {
      "type": "Ydocchange",
      "commitMessage": "javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@617887 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/2/08, 12:31 PM",
      "commitName": "dd4faeb14ea5e624a4d084fdf0b06db2eada658c",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/2/08, 12:29 PM",
      "commitNameOld": "d824eaf8ba1e380a48f293fe093c3331a5b4e202",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyDescriptorMap \u003d\u003d null) {\n        propertyDescriptorMap \u003d new HashMap();\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyDescriptorMap.put(pds[i].getName(), pds[i]);\n        }\n    }\n    return (PropertyDescriptor) propertyDescriptorMap.get(propertyName);\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 130,
      "functionName": "getPropertyDescriptor",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@inheritDoc}\n"
      }
    },
    "e2b855e2fa0285679dfc2a9a11121c69f7f494d5": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "don\u0027t loop through a String array calling equals(); use a map\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@502353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/1/07, 12:50 PM",
      "commitName": "e2b855e2fa0285679dfc2a9a11121c69f7f494d5",
      "commitAuthor": "Matthew Jason Benson",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "don\u0027t loop through a String array calling equals(); use a map\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@502353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/07, 12:50 PM",
          "commitName": "e2b855e2fa0285679dfc2a9a11121c69f7f494d5",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "11/28/06, 9:37 PM",
          "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 64.63,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyDescriptorMap \u003d\u003d null) {\n        propertyDescriptorMap \u003d new HashMap();\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyDescriptorMap.put(pds[i].getName(), pds[i]);\n        }\n    }\n    return (PropertyDescriptor) propertyDescriptorMap.get(propertyName);\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 102,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,10 @@\n-public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n-    if (propertyNames \u003d\u003d null) {\n+public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyDescriptorMap \u003d\u003d null) {\n+        propertyDescriptorMap \u003d new HashMap();\n         PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n-        String[] names \u003d new String[pds.length];\n         for (int i \u003d 0; i \u003c pds.length; i++) {\n-            names[i] \u003d pds[i].getName();\n-        }\n-        propertyNames \u003d names;\n-    }\n-    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n-        if (propertyNames[i] \u003d\u003d propertyName) {\n-            return propertyDescriptors[i];\n+            propertyDescriptorMap.put(pds[i].getName(), pds[i]);\n         }\n     }\n-    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n-        if (propertyNames[i].equals(propertyName)) {\n-            return propertyDescriptors[i];\n-        }\n-    }\n-    return null;\n+    return (PropertyDescriptor) propertyDescriptorMap.get(propertyName);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "don\u0027t loop through a String array calling equals(); use a map\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@502353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/07, 12:50 PM",
          "commitName": "e2b855e2fa0285679dfc2a9a11121c69f7f494d5",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "11/28/06, 9:37 PM",
          "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 64.63,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyDescriptorMap \u003d\u003d null) {\n        propertyDescriptorMap \u003d new HashMap();\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyDescriptorMap.put(pds[i].getName(), pds[i]);\n        }\n    }\n    return (PropertyDescriptor) propertyDescriptorMap.get(propertyName);\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 102,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,10 @@\n-public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n-    if (propertyNames \u003d\u003d null) {\n+public synchronized PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyDescriptorMap \u003d\u003d null) {\n+        propertyDescriptorMap \u003d new HashMap();\n         PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n-        String[] names \u003d new String[pds.length];\n         for (int i \u003d 0; i \u003c pds.length; i++) {\n-            names[i] \u003d pds[i].getName();\n-        }\n-        propertyNames \u003d names;\n-    }\n-    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n-        if (propertyNames[i] \u003d\u003d propertyName) {\n-            return propertyDescriptors[i];\n+            propertyDescriptorMap.put(pds[i].getName(), pds[i]);\n         }\n     }\n-    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n-        if (propertyNames[i].equals(propertyName)) {\n-            return propertyDescriptors[i];\n-        }\n-    }\n-    return null;\n+    return (PropertyDescriptor) propertyDescriptorMap.get(propertyName);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "fca9fd233a4c021d54ff7609fa8fb8b8333129f8": {
      "type": "Ybodychange",
      "commitMessage": "Fixed a synchronization issue described in this bug report:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id\u003d34552\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329470 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/29/05, 12:11 PM",
      "commitName": "fca9fd233a4c021d54ff7609fa8fb8b8333129f8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/26/05, 5:07 AM",
      "commitNameOld": "ecb571fc93e4a7bed9545a295c177d1ab4b1f4bf",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 245.25,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        String[] names \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            names[i] \u003d pds[i].getName();\n        }\n        propertyNames \u003d names;\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 100,
      "functionName": "getPropertyDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,21 @@\n public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n     if (propertyNames \u003d\u003d null) {\n         PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n-        propertyNames \u003d new String[pds.length];\n+        String[] names \u003d new String[pds.length];\n         for (int i \u003d 0; i \u003c pds.length; i++) {\n-            propertyNames[i] \u003d pds[i].getName();\n+            names[i] \u003d pds[i].getName();\n         }\n+        propertyNames \u003d names;\n     }\n     for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n         if (propertyNames[i] \u003d\u003d propertyName) {\n             return propertyDescriptors[i];\n         }\n     }\n     for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n         if (propertyNames[i].equals(propertyName)) {\n             return propertyDescriptors[i];\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "6/15/02, 8:22 PM",
      "commitNameOld": "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 209.1,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 145,
      "functionName": "getPropertyDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268": {
      "type": "Ybodychange",
      "commitMessage": "Documentation clean-up and removal of deprecated methods\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/15/02, 8:22 PM",
      "commitName": "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/21/02, 2:52 PM",
      "commitNameOld": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 55.23,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
      "functionStartLine": 141,
      "functionName": "getPropertyDescriptor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 141,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,20 @@\n-private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n-    NodePointer pointer \u003d ptr;\n-    while (true) {\n-        if (pointer instanceof VariablePointer) {\n-            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n-        } else if (pointer instanceof ContainerPointer) {\n-            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n-        } else {\n-            break;\n+public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyNames \u003d\u003d null) {\n+        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n+        propertyNames \u003d new String[pds.length];\n+        for (int i \u003d 0; i \u003c pds.length; i++) {\n+            propertyNames[i] \u003d pds[i].getName();\n         }\n     }\n-    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n-        return null;\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i] \u003d\u003d propertyName) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    PropertyPointer prop;\n-    if (pointer !\u003d null) {\n-        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n-    } else {\n-        prop \u003d new NullPropertyPointer(ptr);\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i].equals(propertyName)) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    prop.setPropertyName(property);\n-    return prop.childNodePointer();\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
            "newPath": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
            "oldMethodName": "getPropertyPointer",
            "newMethodName": "getPropertyDescriptor"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 141,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,20 @@\n-private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n-    NodePointer pointer \u003d ptr;\n-    while (true) {\n-        if (pointer instanceof VariablePointer) {\n-            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n-        } else if (pointer instanceof ContainerPointer) {\n-            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n-        } else {\n-            break;\n+public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyNames \u003d\u003d null) {\n+        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n+        propertyNames \u003d new String[pds.length];\n+        for (int i \u003d 0; i \u003c pds.length; i++) {\n+            propertyNames[i] \u003d pds[i].getName();\n         }\n     }\n-    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n-        return null;\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i] \u003d\u003d propertyName) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    PropertyPointer prop;\n-    if (pointer !\u003d null) {\n-        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n-    } else {\n-        prop \u003d new NullPropertyPointer(ptr);\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i].equals(propertyName)) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    prop.setPropertyName(property);\n-    return prop.childNodePointer();\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "NodePointer",
            "newValue": "PropertyDescriptor"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 141,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,20 @@\n-private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n-    NodePointer pointer \u003d ptr;\n-    while (true) {\n-        if (pointer instanceof VariablePointer) {\n-            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n-        } else if (pointer instanceof ContainerPointer) {\n-            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n-        } else {\n-            break;\n+public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyNames \u003d\u003d null) {\n+        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n+        propertyNames \u003d new String[pds.length];\n+        for (int i \u003d 0; i \u003c pds.length; i++) {\n+            propertyNames[i] \u003d pds[i].getName();\n         }\n     }\n-    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n-        return null;\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i] \u003d\u003d propertyName) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    PropertyPointer prop;\n-    if (pointer !\u003d null) {\n-        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n-    } else {\n-        prop \u003d new NullPropertyPointer(ptr);\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i].equals(propertyName)) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    prop.setPropertyName(property);\n-    return prop.childNodePointer();\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 141,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,20 @@\n-private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n-    NodePointer pointer \u003d ptr;\n-    while (true) {\n-        if (pointer instanceof VariablePointer) {\n-            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n-        } else if (pointer instanceof ContainerPointer) {\n-            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n-        } else {\n-            break;\n+public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyNames \u003d\u003d null) {\n+        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n+        propertyNames \u003d new String[pds.length];\n+        for (int i \u003d 0; i \u003c pds.length; i++) {\n+            propertyNames[i] \u003d pds[i].getName();\n         }\n     }\n-    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n-        return null;\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i] \u003d\u003d propertyName) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    PropertyPointer prop;\n-    if (pointer !\u003d null) {\n-        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n-    } else {\n-        prop \u003d new NullPropertyPointer(ptr);\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i].equals(propertyName)) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    prop.setPropertyName(property);\n-    return prop.childNodePointer();\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 141,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,20 @@\n-private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n-    NodePointer pointer \u003d ptr;\n-    while (true) {\n-        if (pointer instanceof VariablePointer) {\n-            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n-        } else if (pointer instanceof ContainerPointer) {\n-            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n-        } else {\n-            break;\n+public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyNames \u003d\u003d null) {\n+        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n+        propertyNames \u003d new String[pds.length];\n+        for (int i \u003d 0; i \u003c pds.length; i++) {\n+            propertyNames[i] \u003d pds[i].getName();\n         }\n     }\n-    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n-        return null;\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i] \u003d\u003d propertyName) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    PropertyPointer prop;\n-    if (pointer !\u003d null) {\n-        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n-    } else {\n-        prop \u003d new NullPropertyPointer(ptr);\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i].equals(propertyName)) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    prop.setPropertyName(property);\n-    return prop.childNodePointer();\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "getPropertyPointer",
            "newValue": "getPropertyDescriptor"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n    if (propertyNames \u003d\u003d null) {\n        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n        propertyNames \u003d new String[pds.length];\n        for (int i \u003d 0; i \u003c pds.length; i++) {\n            propertyNames[i] \u003d pds[i].getName();\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i] \u003d\u003d propertyName) {\n            return propertyDescriptors[i];\n        }\n    }\n    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n        if (propertyNames[i].equals(propertyName)) {\n            return propertyDescriptors[i];\n        }\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/JXPathBasicBeanInfo.java",
          "functionStartLine": 141,
          "functionName": "getPropertyDescriptor",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,23 +1,20 @@\n-private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n-    NodePointer pointer \u003d ptr;\n-    while (true) {\n-        if (pointer instanceof VariablePointer) {\n-            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n-        } else if (pointer instanceof ContainerPointer) {\n-            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n-        } else {\n-            break;\n+public PropertyDescriptor getPropertyDescriptor(String propertyName) {\n+    if (propertyNames \u003d\u003d null) {\n+        PropertyDescriptor[] pds \u003d getPropertyDescriptors();\n+        propertyNames \u003d new String[pds.length];\n+        for (int i \u003d 0; i \u003c pds.length; i++) {\n+            propertyNames[i] \u003d pds[i].getName();\n         }\n     }\n-    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n-        return null;\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i] \u003d\u003d propertyName) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    PropertyPointer prop;\n-    if (pointer !\u003d null) {\n-        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n-    } else {\n-        prop \u003d new NullPropertyPointer(ptr);\n+    for (int i \u003d 0; i \u003c propertyNames.length; i++) {\n+        if (propertyNames[i].equals(propertyName)) {\n+            return propertyDescriptors[i];\n+        }\n     }\n-    prop.setPropertyName(property);\n-    return prop.childNodePointer();\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ptr-NodePointer, property-String]",
            "newValue": "[propertyName-String]"
          }
        }
      ]
    },
    "34b7a47ae949c763178a457582a5df2cb564f53d": {
      "type": "Yintroduced",
      "commitMessage": "Multiple changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/9/02, 8:40 PM",
      "commitName": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,23 @@\n+private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n+    NodePointer pointer \u003d ptr;\n+    while (true) {\n+        if (pointer instanceof VariablePointer) {\n+            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n+        } else if (pointer instanceof ContainerPointer) {\n+            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n+        } else {\n+            break;\n+        }\n+    }\n+    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n+        return null;\n+    }\n+    PropertyPointer prop;\n+    if (pointer !\u003d null) {\n+        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n+    } else {\n+        prop \u003d new NullPropertyPointer(ptr);\n+    }\n+    prop.setPropertyName(property);\n+    return prop.childNodePointer();\n+}\n\\ No newline at end of file\n",
      "actualSource": "private NodePointer getPropertyPointer(NodePointer ptr, String property) {\n    NodePointer pointer \u003d ptr;\n    while (true) {\n        if (pointer instanceof VariablePointer) {\n            pointer \u003d ((VariablePointer) pointer).getValuePointer();\n        } else if (pointer instanceof ContainerPointer) {\n            pointer \u003d ((ContainerPointer) pointer).getValuePointer();\n        } else {\n            break;\n        }\n    }\n    if (pointer !\u003d null \u0026\u0026 !(pointer instanceof PropertyOwnerPointer)) {\n        return null;\n    }\n    PropertyPointer prop;\n    if (pointer !\u003d null) {\n        prop \u003d ((PropertyOwnerPointer) pointer).getPropertyPointer();\n    } else {\n        prop \u003d new NullPropertyPointer(ptr);\n    }\n    prop.setPropertyName(property);\n    return prop.childNodePointer();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 865,
      "functionName": "getPropertyPointer",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}