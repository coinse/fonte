{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XPathParser.java",
  "functionName": "NodeTest",
  "functionId": "NodeTest___steps-ArrayList",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 605,
  "functionEndLine": 770,
  "numCommitsSeen": 8,
  "timeTaken": 1706,
  "changeHistory": [
    "10cb322e1c2fc92d4c2fb9580eb4435dc7242f3d",
    "5bbe586b1063ebafc02e20ca0b6b47465c9b9f06",
    "e5a284c0486a8b2a4289605939074cc6ddf9df44",
    "632e72228ad994efa19c0a9ae84923718f259cdf",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "10cb322e1c2fc92d4c2fb9580eb4435dc7242f3d": "Ybodychange",
    "5bbe586b1063ebafc02e20ca0b6b47465c9b9f06": "Ybodychange",
    "e5a284c0486a8b2a4289605939074cc6ddf9df44": "Ybodychange",
    "632e72228ad994efa19c0a9ae84923718f259cdf": "Ybodychange",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": "Ybodychange",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10cb322e1c2fc92d4c2fb9580eb4435dc7242f3d": {
      "type": "Ybodychange",
      "commitMessage": "Implemented the ends-with function (JXPATH-132)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@779915 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/29/09, 3:23 AM",
      "commitName": "10cb322e1c2fc92d4c2fb9580eb4435dc7242f3d",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "2/1/06, 10:03 AM",
      "commitNameOld": "36f069cec063cf1638cc07c3e886ac27f3f1557c",
      "commitAuthorOld": "Martin van den Bemt",
      "daysBetweenCommits": 1212.68,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void NodeTest(ArrayList steps) throws ParseException {\n    int axis;\n    int type \u003d -1;\n    String instruction \u003d null;\n    Object name \u003d null;\n    Object s;\n    Object p;\n    ArrayList ps \u003d new ArrayList();\n    switch(jj_nt.kind) {\n        case OR:\n        case AND:\n        case MOD:\n        case DIV:\n        case NODE:\n        case TEXT:\n        case COMMENT:\n        case PI:\n        case AXIS_SELF:\n        case AXIS_CHILD:\n        case AXIS_PARENT:\n        case AXIS_ANCESTOR:\n        case AXIS_ATTRIBUTE:\n        case AXIS_NAMESPACE:\n        case AXIS_PRECEDING:\n        case AXIS_FOLLOWING:\n        case AXIS_DESCENDANT:\n        case AXIS_ANCESTOR_OR_SELF:\n        case AXIS_FOLLOWING_SIBLING:\n        case AXIS_PRECEDING_SIBLING:\n        case AXIS_DESCENDANT_OR_SELF:\n        case FUNCTION_LAST:\n        case FUNCTION_POSITION:\n        case FUNCTION_COUNT:\n        case FUNCTION_ID:\n        case FUNCTION_KEY:\n        case FUNCTION_LOCAL_NAME:\n        case FUNCTION_NAMESPACE_URI:\n        case FUNCTION_NAME:\n        case FUNCTION_STRING:\n        case FUNCTION_CONCAT:\n        case FUNCTION_STARTS_WITH:\n        case FUNCTION_ENDS_WITH:\n        case FUNCTION_CONTAINS:\n        case FUNCTION_SUBSTRING_BEFORE:\n        case FUNCTION_SUBSTRING_AFTER:\n        case FUNCTION_SUBSTRING:\n        case FUNCTION_STRING_LENGTH:\n        case FUNCTION_NORMALIZE_SPACE:\n        case FUNCTION_TRANSLATE:\n        case FUNCTION_BOOLEAN:\n        case FUNCTION_NOT:\n        case FUNCTION_TRUE:\n        case FUNCTION_FALSE:\n        case FUNCTION_NULL:\n        case FUNCTION_LANG:\n        case FUNCTION_NUMBER:\n        case FUNCTION_SUM:\n        case FUNCTION_FLOOR:\n        case FUNCTION_CEILING:\n        case FUNCTION_ROUND:\n        case FUNCTION_FORMAT_NUMBER:\n        case NCName:\n        case 87:\n        case 89:\n            axis \u003d AxisSpecifier();\n            if (jj_2_3(2147483647)) {\n                type \u003d NodeType();\n                jj_consume_token(81);\n                jj_consume_token(82);\n            } else if (jj_2_4(2147483647)) {\n                jj_consume_token(PI);\n                jj_consume_token(81);\n                jj_consume_token(Literal);\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n                jj_consume_token(82);\n            } else {\n                switch(jj_nt.kind) {\n                    case OR:\n                    case AND:\n                    case MOD:\n                    case DIV:\n                    case NODE:\n                    case TEXT:\n                    case COMMENT:\n                    case PI:\n                    case FUNCTION_LAST:\n                    case FUNCTION_POSITION:\n                    case FUNCTION_COUNT:\n                    case FUNCTION_ID:\n                    case FUNCTION_KEY:\n                    case FUNCTION_LOCAL_NAME:\n                    case FUNCTION_NAMESPACE_URI:\n                    case FUNCTION_NAME:\n                    case FUNCTION_STRING:\n                    case FUNCTION_CONCAT:\n                    case FUNCTION_STARTS_WITH:\n                    case FUNCTION_ENDS_WITH:\n                    case FUNCTION_CONTAINS:\n                    case FUNCTION_SUBSTRING_BEFORE:\n                    case FUNCTION_SUBSTRING_AFTER:\n                    case FUNCTION_SUBSTRING:\n                    case FUNCTION_STRING_LENGTH:\n                    case FUNCTION_NORMALIZE_SPACE:\n                    case FUNCTION_TRANSLATE:\n                    case FUNCTION_BOOLEAN:\n                    case FUNCTION_NOT:\n                    case FUNCTION_TRUE:\n                    case FUNCTION_FALSE:\n                    case FUNCTION_NULL:\n                    case FUNCTION_LANG:\n                    case FUNCTION_NUMBER:\n                    case FUNCTION_SUM:\n                    case FUNCTION_FLOOR:\n                    case FUNCTION_CEILING:\n                    case FUNCTION_ROUND:\n                    case FUNCTION_FORMAT_NUMBER:\n                    case NCName:\n                    case 89:\n                        name \u003d WildcardName();\n                        break;\n                    default:\n                        jj_la1[10] \u003d jj_gen;\n                        jj_consume_token(-1);\n                        throw new ParseException();\n                }\n            }\n            break;\n        case 83:\n            jj_consume_token(83);\n            axis \u003d Compiler.AXIS_SELF;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        case 84:\n            jj_consume_token(84);\n            axis \u003d Compiler.AXIS_PARENT;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        default:\n            jj_la1[11] \u003d jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n    }\n    label_3: while (true) {\n        switch(jj_nt.kind) {\n            case 85:\n                ;\n                break;\n            default:\n                jj_la1[12] \u003d jj_gen;\n                break label_3;\n        }\n        p \u003d Predicate();\n        ps.add(p);\n    }\n    if (name !\u003d null) {\n        s \u003d compiler.nodeNameTest(name);\n    } else if (instruction !\u003d null) {\n        s \u003d compiler.processingInstructionTest(instruction);\n    } else {\n        s \u003d compiler.nodeTypeTest(type);\n    }\n    steps.add(compiler.step(axis, s, ps.toArray()));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java",
      "functionStartLine": 605,
      "functionName": "NodeTest",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,161 +1,163 @@\n public final void NodeTest(ArrayList steps) throws ParseException {\n     int axis;\n     int type \u003d -1;\n     String instruction \u003d null;\n     Object name \u003d null;\n     Object s;\n     Object p;\n     ArrayList ps \u003d new ArrayList();\n     switch(jj_nt.kind) {\n         case OR:\n         case AND:\n         case MOD:\n         case DIV:\n         case NODE:\n         case TEXT:\n         case COMMENT:\n         case PI:\n         case AXIS_SELF:\n         case AXIS_CHILD:\n         case AXIS_PARENT:\n         case AXIS_ANCESTOR:\n         case AXIS_ATTRIBUTE:\n         case AXIS_NAMESPACE:\n         case AXIS_PRECEDING:\n         case AXIS_FOLLOWING:\n         case AXIS_DESCENDANT:\n         case AXIS_ANCESTOR_OR_SELF:\n         case AXIS_FOLLOWING_SIBLING:\n         case AXIS_PRECEDING_SIBLING:\n         case AXIS_DESCENDANT_OR_SELF:\n         case FUNCTION_LAST:\n         case FUNCTION_POSITION:\n         case FUNCTION_COUNT:\n         case FUNCTION_ID:\n         case FUNCTION_KEY:\n         case FUNCTION_LOCAL_NAME:\n         case FUNCTION_NAMESPACE_URI:\n         case FUNCTION_NAME:\n         case FUNCTION_STRING:\n         case FUNCTION_CONCAT:\n         case FUNCTION_STARTS_WITH:\n+        case FUNCTION_ENDS_WITH:\n         case FUNCTION_CONTAINS:\n         case FUNCTION_SUBSTRING_BEFORE:\n         case FUNCTION_SUBSTRING_AFTER:\n         case FUNCTION_SUBSTRING:\n         case FUNCTION_STRING_LENGTH:\n         case FUNCTION_NORMALIZE_SPACE:\n         case FUNCTION_TRANSLATE:\n         case FUNCTION_BOOLEAN:\n         case FUNCTION_NOT:\n         case FUNCTION_TRUE:\n         case FUNCTION_FALSE:\n         case FUNCTION_NULL:\n         case FUNCTION_LANG:\n         case FUNCTION_NUMBER:\n         case FUNCTION_SUM:\n         case FUNCTION_FLOOR:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n         case FUNCTION_FORMAT_NUMBER:\n         case NCName:\n-        case 86:\n-        case 88:\n+        case 87:\n+        case 89:\n             axis \u003d AxisSpecifier();\n             if (jj_2_3(2147483647)) {\n                 type \u003d NodeType();\n-                jj_consume_token(80);\n                 jj_consume_token(81);\n+                jj_consume_token(82);\n             } else if (jj_2_4(2147483647)) {\n                 jj_consume_token(PI);\n-                jj_consume_token(80);\n+                jj_consume_token(81);\n                 jj_consume_token(Literal);\n                 instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n-                jj_consume_token(81);\n+                jj_consume_token(82);\n             } else {\n                 switch(jj_nt.kind) {\n                     case OR:\n                     case AND:\n                     case MOD:\n                     case DIV:\n                     case NODE:\n                     case TEXT:\n                     case COMMENT:\n                     case PI:\n                     case FUNCTION_LAST:\n                     case FUNCTION_POSITION:\n                     case FUNCTION_COUNT:\n                     case FUNCTION_ID:\n                     case FUNCTION_KEY:\n                     case FUNCTION_LOCAL_NAME:\n                     case FUNCTION_NAMESPACE_URI:\n                     case FUNCTION_NAME:\n                     case FUNCTION_STRING:\n                     case FUNCTION_CONCAT:\n                     case FUNCTION_STARTS_WITH:\n+                    case FUNCTION_ENDS_WITH:\n                     case FUNCTION_CONTAINS:\n                     case FUNCTION_SUBSTRING_BEFORE:\n                     case FUNCTION_SUBSTRING_AFTER:\n                     case FUNCTION_SUBSTRING:\n                     case FUNCTION_STRING_LENGTH:\n                     case FUNCTION_NORMALIZE_SPACE:\n                     case FUNCTION_TRANSLATE:\n                     case FUNCTION_BOOLEAN:\n                     case FUNCTION_NOT:\n                     case FUNCTION_TRUE:\n                     case FUNCTION_FALSE:\n                     case FUNCTION_NULL:\n                     case FUNCTION_LANG:\n                     case FUNCTION_NUMBER:\n                     case FUNCTION_SUM:\n                     case FUNCTION_FLOOR:\n                     case FUNCTION_CEILING:\n                     case FUNCTION_ROUND:\n                     case FUNCTION_FORMAT_NUMBER:\n                     case NCName:\n-                    case 88:\n+                    case 89:\n                         name \u003d WildcardName();\n                         break;\n                     default:\n                         jj_la1[10] \u003d jj_gen;\n                         jj_consume_token(-1);\n                         throw new ParseException();\n                 }\n             }\n             break;\n-        case 82:\n-            jj_consume_token(82);\n+        case 83:\n+            jj_consume_token(83);\n             axis \u003d Compiler.AXIS_SELF;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n-        case 83:\n-            jj_consume_token(83);\n+        case 84:\n+            jj_consume_token(84);\n             axis \u003d Compiler.AXIS_PARENT;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n         default:\n             jj_la1[11] \u003d jj_gen;\n             jj_consume_token(-1);\n             throw new ParseException();\n     }\n     label_3: while (true) {\n         switch(jj_nt.kind) {\n-            case 84:\n+            case 85:\n                 ;\n                 break;\n             default:\n                 jj_la1[12] \u003d jj_gen;\n                 break label_3;\n         }\n         p \u003d Predicate();\n         ps.add(p);\n     }\n     if (name !\u003d null) {\n         s \u003d compiler.nodeNameTest(name);\n     } else if (instruction !\u003d null) {\n         s \u003d compiler.processingInstructionTest(instruction);\n     } else {\n         s \u003d compiler.nodeTypeTest(type);\n     }\n     steps.add(compiler.step(axis, s, ps.toArray()));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5bbe586b1063ebafc02e20ca0b6b47465c9b9f06": {
      "type": "Ybodychange",
      "commitMessage": "Optimized parser by using SKIP instead of SPECIAL_CHARACTER\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136859 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/24/03, 6:28 PM",
      "commitName": "5bbe586b1063ebafc02e20ca0b6b47465c9b9f06",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "1/24/03, 5:49 PM",
      "commitNameOld": "e5a284c0486a8b2a4289605939074cc6ddf9df44",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 59.03,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void NodeTest(ArrayList steps) throws ParseException {\n    int axis;\n    int type \u003d -1;\n    String instruction \u003d null;\n    Object name \u003d null;\n    Object s;\n    Object p;\n    ArrayList ps \u003d new ArrayList();\n    switch(jj_nt.kind) {\n        case OR:\n        case AND:\n        case MOD:\n        case DIV:\n        case NODE:\n        case TEXT:\n        case COMMENT:\n        case PI:\n        case AXIS_SELF:\n        case AXIS_CHILD:\n        case AXIS_PARENT:\n        case AXIS_ANCESTOR:\n        case AXIS_ATTRIBUTE:\n        case AXIS_NAMESPACE:\n        case AXIS_PRECEDING:\n        case AXIS_FOLLOWING:\n        case AXIS_DESCENDANT:\n        case AXIS_ANCESTOR_OR_SELF:\n        case AXIS_FOLLOWING_SIBLING:\n        case AXIS_PRECEDING_SIBLING:\n        case AXIS_DESCENDANT_OR_SELF:\n        case FUNCTION_LAST:\n        case FUNCTION_POSITION:\n        case FUNCTION_COUNT:\n        case FUNCTION_ID:\n        case FUNCTION_KEY:\n        case FUNCTION_LOCAL_NAME:\n        case FUNCTION_NAMESPACE_URI:\n        case FUNCTION_NAME:\n        case FUNCTION_STRING:\n        case FUNCTION_CONCAT:\n        case FUNCTION_STARTS_WITH:\n        case FUNCTION_CONTAINS:\n        case FUNCTION_SUBSTRING_BEFORE:\n        case FUNCTION_SUBSTRING_AFTER:\n        case FUNCTION_SUBSTRING:\n        case FUNCTION_STRING_LENGTH:\n        case FUNCTION_NORMALIZE_SPACE:\n        case FUNCTION_TRANSLATE:\n        case FUNCTION_BOOLEAN:\n        case FUNCTION_NOT:\n        case FUNCTION_TRUE:\n        case FUNCTION_FALSE:\n        case FUNCTION_NULL:\n        case FUNCTION_LANG:\n        case FUNCTION_NUMBER:\n        case FUNCTION_SUM:\n        case FUNCTION_FLOOR:\n        case FUNCTION_CEILING:\n        case FUNCTION_ROUND:\n        case FUNCTION_FORMAT_NUMBER:\n        case NCName:\n        case 86:\n        case 88:\n            axis \u003d AxisSpecifier();\n            if (jj_2_3(2147483647)) {\n                type \u003d NodeType();\n                jj_consume_token(80);\n                jj_consume_token(81);\n            } else if (jj_2_4(2147483647)) {\n                jj_consume_token(PI);\n                jj_consume_token(80);\n                jj_consume_token(Literal);\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n                jj_consume_token(81);\n            } else {\n                switch(jj_nt.kind) {\n                    case OR:\n                    case AND:\n                    case MOD:\n                    case DIV:\n                    case NODE:\n                    case TEXT:\n                    case COMMENT:\n                    case PI:\n                    case FUNCTION_LAST:\n                    case FUNCTION_POSITION:\n                    case FUNCTION_COUNT:\n                    case FUNCTION_ID:\n                    case FUNCTION_KEY:\n                    case FUNCTION_LOCAL_NAME:\n                    case FUNCTION_NAMESPACE_URI:\n                    case FUNCTION_NAME:\n                    case FUNCTION_STRING:\n                    case FUNCTION_CONCAT:\n                    case FUNCTION_STARTS_WITH:\n                    case FUNCTION_CONTAINS:\n                    case FUNCTION_SUBSTRING_BEFORE:\n                    case FUNCTION_SUBSTRING_AFTER:\n                    case FUNCTION_SUBSTRING:\n                    case FUNCTION_STRING_LENGTH:\n                    case FUNCTION_NORMALIZE_SPACE:\n                    case FUNCTION_TRANSLATE:\n                    case FUNCTION_BOOLEAN:\n                    case FUNCTION_NOT:\n                    case FUNCTION_TRUE:\n                    case FUNCTION_FALSE:\n                    case FUNCTION_NULL:\n                    case FUNCTION_LANG:\n                    case FUNCTION_NUMBER:\n                    case FUNCTION_SUM:\n                    case FUNCTION_FLOOR:\n                    case FUNCTION_CEILING:\n                    case FUNCTION_ROUND:\n                    case FUNCTION_FORMAT_NUMBER:\n                    case NCName:\n                    case 88:\n                        name \u003d WildcardName();\n                        break;\n                    default:\n                        jj_la1[10] \u003d jj_gen;\n                        jj_consume_token(-1);\n                        throw new ParseException();\n                }\n            }\n            break;\n        case 82:\n            jj_consume_token(82);\n            axis \u003d Compiler.AXIS_SELF;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        case 83:\n            jj_consume_token(83);\n            axis \u003d Compiler.AXIS_PARENT;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        default:\n            jj_la1[11] \u003d jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n    }\n    label_3: while (true) {\n        switch(jj_nt.kind) {\n            case 84:\n                ;\n                break;\n            default:\n                jj_la1[12] \u003d jj_gen;\n                break label_3;\n        }\n        p \u003d Predicate();\n        ps.add(p);\n    }\n    if (name !\u003d null) {\n        s \u003d compiler.nodeNameTest(name);\n    } else if (instruction !\u003d null) {\n        s \u003d compiler.processingInstructionTest(instruction);\n    } else {\n        s \u003d compiler.nodeTypeTest(type);\n    }\n    steps.add(compiler.step(axis, s, ps.toArray()));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java",
      "functionStartLine": 597,
      "functionName": "NodeTest",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,161 +1,161 @@\n public final void NodeTest(ArrayList steps) throws ParseException {\n     int axis;\n     int type \u003d -1;\n     String instruction \u003d null;\n     Object name \u003d null;\n     Object s;\n     Object p;\n     ArrayList ps \u003d new ArrayList();\n     switch(jj_nt.kind) {\n         case OR:\n         case AND:\n         case MOD:\n         case DIV:\n         case NODE:\n         case TEXT:\n         case COMMENT:\n         case PI:\n         case AXIS_SELF:\n         case AXIS_CHILD:\n         case AXIS_PARENT:\n         case AXIS_ANCESTOR:\n         case AXIS_ATTRIBUTE:\n         case AXIS_NAMESPACE:\n         case AXIS_PRECEDING:\n         case AXIS_FOLLOWING:\n         case AXIS_DESCENDANT:\n         case AXIS_ANCESTOR_OR_SELF:\n         case AXIS_FOLLOWING_SIBLING:\n         case AXIS_PRECEDING_SIBLING:\n         case AXIS_DESCENDANT_OR_SELF:\n         case FUNCTION_LAST:\n         case FUNCTION_POSITION:\n         case FUNCTION_COUNT:\n         case FUNCTION_ID:\n         case FUNCTION_KEY:\n         case FUNCTION_LOCAL_NAME:\n         case FUNCTION_NAMESPACE_URI:\n         case FUNCTION_NAME:\n         case FUNCTION_STRING:\n         case FUNCTION_CONCAT:\n         case FUNCTION_STARTS_WITH:\n         case FUNCTION_CONTAINS:\n         case FUNCTION_SUBSTRING_BEFORE:\n         case FUNCTION_SUBSTRING_AFTER:\n         case FUNCTION_SUBSTRING:\n         case FUNCTION_STRING_LENGTH:\n         case FUNCTION_NORMALIZE_SPACE:\n         case FUNCTION_TRANSLATE:\n         case FUNCTION_BOOLEAN:\n         case FUNCTION_NOT:\n         case FUNCTION_TRUE:\n         case FUNCTION_FALSE:\n         case FUNCTION_NULL:\n         case FUNCTION_LANG:\n         case FUNCTION_NUMBER:\n         case FUNCTION_SUM:\n         case FUNCTION_FLOOR:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n         case FUNCTION_FORMAT_NUMBER:\n         case NCName:\n-        case 82:\n-        case 84:\n+        case 86:\n+        case 88:\n             axis \u003d AxisSpecifier();\n             if (jj_2_3(2147483647)) {\n                 type \u003d NodeType();\n-                jj_consume_token(76);\n-                jj_consume_token(77);\n+                jj_consume_token(80);\n+                jj_consume_token(81);\n             } else if (jj_2_4(2147483647)) {\n                 jj_consume_token(PI);\n-                jj_consume_token(76);\n+                jj_consume_token(80);\n                 jj_consume_token(Literal);\n                 instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n-                jj_consume_token(77);\n+                jj_consume_token(81);\n             } else {\n                 switch(jj_nt.kind) {\n                     case OR:\n                     case AND:\n                     case MOD:\n                     case DIV:\n                     case NODE:\n                     case TEXT:\n                     case COMMENT:\n                     case PI:\n                     case FUNCTION_LAST:\n                     case FUNCTION_POSITION:\n                     case FUNCTION_COUNT:\n                     case FUNCTION_ID:\n                     case FUNCTION_KEY:\n                     case FUNCTION_LOCAL_NAME:\n                     case FUNCTION_NAMESPACE_URI:\n                     case FUNCTION_NAME:\n                     case FUNCTION_STRING:\n                     case FUNCTION_CONCAT:\n                     case FUNCTION_STARTS_WITH:\n                     case FUNCTION_CONTAINS:\n                     case FUNCTION_SUBSTRING_BEFORE:\n                     case FUNCTION_SUBSTRING_AFTER:\n                     case FUNCTION_SUBSTRING:\n                     case FUNCTION_STRING_LENGTH:\n                     case FUNCTION_NORMALIZE_SPACE:\n                     case FUNCTION_TRANSLATE:\n                     case FUNCTION_BOOLEAN:\n                     case FUNCTION_NOT:\n                     case FUNCTION_TRUE:\n                     case FUNCTION_FALSE:\n                     case FUNCTION_NULL:\n                     case FUNCTION_LANG:\n                     case FUNCTION_NUMBER:\n                     case FUNCTION_SUM:\n                     case FUNCTION_FLOOR:\n                     case FUNCTION_CEILING:\n                     case FUNCTION_ROUND:\n                     case FUNCTION_FORMAT_NUMBER:\n                     case NCName:\n-                    case 84:\n+                    case 88:\n                         name \u003d WildcardName();\n                         break;\n                     default:\n                         jj_la1[10] \u003d jj_gen;\n                         jj_consume_token(-1);\n                         throw new ParseException();\n                 }\n             }\n             break;\n-        case 78:\n-            jj_consume_token(78);\n+        case 82:\n+            jj_consume_token(82);\n             axis \u003d Compiler.AXIS_SELF;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n-        case 79:\n-            jj_consume_token(79);\n+        case 83:\n+            jj_consume_token(83);\n             axis \u003d Compiler.AXIS_PARENT;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n         default:\n             jj_la1[11] \u003d jj_gen;\n             jj_consume_token(-1);\n             throw new ParseException();\n     }\n     label_3: while (true) {\n         switch(jj_nt.kind) {\n-            case 80:\n+            case 84:\n                 ;\n                 break;\n             default:\n                 jj_la1[12] \u003d jj_gen;\n                 break label_3;\n         }\n         p \u003d Predicate();\n         ps.add(p);\n     }\n     if (name !\u003d null) {\n         s \u003d compiler.nodeNameTest(name);\n     } else if (instruction !\u003d null) {\n         s \u003d compiler.processingInstructionTest(instruction);\n     } else {\n         s \u003d compiler.nodeTypeTest(type);\n     }\n     steps.add(compiler.step(axis, s, ps.toArray()));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e5a284c0486a8b2a4289605939074cc6ddf9df44": {
      "type": "Ybodychange",
      "commitMessage": "Upgraded to JavaCC 2.1\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136843 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/24/03, 5:49 PM",
      "commitName": "e5a284c0486a8b2a4289605939074cc6ddf9df44",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "6/8/02, 3:47 PM",
      "commitNameOld": "632e72228ad994efa19c0a9ae84923718f259cdf",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 230.13,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void NodeTest(ArrayList steps) throws ParseException {\n    int axis;\n    int type \u003d -1;\n    String instruction \u003d null;\n    Object name \u003d null;\n    Object s;\n    Object p;\n    ArrayList ps \u003d new ArrayList();\n    switch(jj_nt.kind) {\n        case OR:\n        case AND:\n        case MOD:\n        case DIV:\n        case NODE:\n        case TEXT:\n        case COMMENT:\n        case PI:\n        case AXIS_SELF:\n        case AXIS_CHILD:\n        case AXIS_PARENT:\n        case AXIS_ANCESTOR:\n        case AXIS_ATTRIBUTE:\n        case AXIS_NAMESPACE:\n        case AXIS_PRECEDING:\n        case AXIS_FOLLOWING:\n        case AXIS_DESCENDANT:\n        case AXIS_ANCESTOR_OR_SELF:\n        case AXIS_FOLLOWING_SIBLING:\n        case AXIS_PRECEDING_SIBLING:\n        case AXIS_DESCENDANT_OR_SELF:\n        case FUNCTION_LAST:\n        case FUNCTION_POSITION:\n        case FUNCTION_COUNT:\n        case FUNCTION_ID:\n        case FUNCTION_KEY:\n        case FUNCTION_LOCAL_NAME:\n        case FUNCTION_NAMESPACE_URI:\n        case FUNCTION_NAME:\n        case FUNCTION_STRING:\n        case FUNCTION_CONCAT:\n        case FUNCTION_STARTS_WITH:\n        case FUNCTION_CONTAINS:\n        case FUNCTION_SUBSTRING_BEFORE:\n        case FUNCTION_SUBSTRING_AFTER:\n        case FUNCTION_SUBSTRING:\n        case FUNCTION_STRING_LENGTH:\n        case FUNCTION_NORMALIZE_SPACE:\n        case FUNCTION_TRANSLATE:\n        case FUNCTION_BOOLEAN:\n        case FUNCTION_NOT:\n        case FUNCTION_TRUE:\n        case FUNCTION_FALSE:\n        case FUNCTION_NULL:\n        case FUNCTION_LANG:\n        case FUNCTION_NUMBER:\n        case FUNCTION_SUM:\n        case FUNCTION_FLOOR:\n        case FUNCTION_CEILING:\n        case FUNCTION_ROUND:\n        case FUNCTION_FORMAT_NUMBER:\n        case NCName:\n        case 82:\n        case 84:\n            axis \u003d AxisSpecifier();\n            if (jj_2_3(2147483647)) {\n                type \u003d NodeType();\n                jj_consume_token(76);\n                jj_consume_token(77);\n            } else if (jj_2_4(2147483647)) {\n                jj_consume_token(PI);\n                jj_consume_token(76);\n                jj_consume_token(Literal);\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n                jj_consume_token(77);\n            } else {\n                switch(jj_nt.kind) {\n                    case OR:\n                    case AND:\n                    case MOD:\n                    case DIV:\n                    case NODE:\n                    case TEXT:\n                    case COMMENT:\n                    case PI:\n                    case FUNCTION_LAST:\n                    case FUNCTION_POSITION:\n                    case FUNCTION_COUNT:\n                    case FUNCTION_ID:\n                    case FUNCTION_KEY:\n                    case FUNCTION_LOCAL_NAME:\n                    case FUNCTION_NAMESPACE_URI:\n                    case FUNCTION_NAME:\n                    case FUNCTION_STRING:\n                    case FUNCTION_CONCAT:\n                    case FUNCTION_STARTS_WITH:\n                    case FUNCTION_CONTAINS:\n                    case FUNCTION_SUBSTRING_BEFORE:\n                    case FUNCTION_SUBSTRING_AFTER:\n                    case FUNCTION_SUBSTRING:\n                    case FUNCTION_STRING_LENGTH:\n                    case FUNCTION_NORMALIZE_SPACE:\n                    case FUNCTION_TRANSLATE:\n                    case FUNCTION_BOOLEAN:\n                    case FUNCTION_NOT:\n                    case FUNCTION_TRUE:\n                    case FUNCTION_FALSE:\n                    case FUNCTION_NULL:\n                    case FUNCTION_LANG:\n                    case FUNCTION_NUMBER:\n                    case FUNCTION_SUM:\n                    case FUNCTION_FLOOR:\n                    case FUNCTION_CEILING:\n                    case FUNCTION_ROUND:\n                    case FUNCTION_FORMAT_NUMBER:\n                    case NCName:\n                    case 84:\n                        name \u003d WildcardName();\n                        break;\n                    default:\n                        jj_la1[10] \u003d jj_gen;\n                        jj_consume_token(-1);\n                        throw new ParseException();\n                }\n            }\n            break;\n        case 78:\n            jj_consume_token(78);\n            axis \u003d Compiler.AXIS_SELF;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        case 79:\n            jj_consume_token(79);\n            axis \u003d Compiler.AXIS_PARENT;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        default:\n            jj_la1[11] \u003d jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n    }\n    label_3: while (true) {\n        switch(jj_nt.kind) {\n            case 80:\n                ;\n                break;\n            default:\n                jj_la1[12] \u003d jj_gen;\n                break label_3;\n        }\n        p \u003d Predicate();\n        ps.add(p);\n    }\n    if (name !\u003d null) {\n        s \u003d compiler.nodeNameTest(name);\n    } else if (instruction !\u003d null) {\n        s \u003d compiler.processingInstructionTest(instruction);\n    } else {\n        s \u003d compiler.nodeTypeTest(type);\n    }\n    steps.add(compiler.step(axis, s, ps.toArray()));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java",
      "functionStartLine": 597,
      "functionName": "NodeTest",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,159 +1,161 @@\n public final void NodeTest(ArrayList steps) throws ParseException {\n     int axis;\n     int type \u003d -1;\n     String instruction \u003d null;\n     Object name \u003d null;\n     Object s;\n     Object p;\n     ArrayList ps \u003d new ArrayList();\n     switch(jj_nt.kind) {\n         case OR:\n         case AND:\n         case MOD:\n         case DIV:\n         case NODE:\n         case TEXT:\n         case COMMENT:\n         case PI:\n         case AXIS_SELF:\n         case AXIS_CHILD:\n         case AXIS_PARENT:\n         case AXIS_ANCESTOR:\n         case AXIS_ATTRIBUTE:\n         case AXIS_NAMESPACE:\n         case AXIS_PRECEDING:\n         case AXIS_FOLLOWING:\n         case AXIS_DESCENDANT:\n         case AXIS_ANCESTOR_OR_SELF:\n         case AXIS_FOLLOWING_SIBLING:\n         case AXIS_PRECEDING_SIBLING:\n         case AXIS_DESCENDANT_OR_SELF:\n         case FUNCTION_LAST:\n         case FUNCTION_POSITION:\n         case FUNCTION_COUNT:\n         case FUNCTION_ID:\n         case FUNCTION_KEY:\n         case FUNCTION_LOCAL_NAME:\n         case FUNCTION_NAMESPACE_URI:\n         case FUNCTION_NAME:\n         case FUNCTION_STRING:\n         case FUNCTION_CONCAT:\n         case FUNCTION_STARTS_WITH:\n         case FUNCTION_CONTAINS:\n         case FUNCTION_SUBSTRING_BEFORE:\n         case FUNCTION_SUBSTRING_AFTER:\n         case FUNCTION_SUBSTRING:\n         case FUNCTION_STRING_LENGTH:\n         case FUNCTION_NORMALIZE_SPACE:\n         case FUNCTION_TRANSLATE:\n         case FUNCTION_BOOLEAN:\n         case FUNCTION_NOT:\n         case FUNCTION_TRUE:\n         case FUNCTION_FALSE:\n         case FUNCTION_NULL:\n         case FUNCTION_LANG:\n         case FUNCTION_NUMBER:\n         case FUNCTION_SUM:\n         case FUNCTION_FLOOR:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n+        case FUNCTION_FORMAT_NUMBER:\n         case NCName:\n-        case 81:\n-        case 83:\n+        case 82:\n+        case 84:\n             axis \u003d AxisSpecifier();\n             if (jj_2_3(2147483647)) {\n                 type \u003d NodeType();\n-                jj_consume_token(75);\n                 jj_consume_token(76);\n+                jj_consume_token(77);\n             } else if (jj_2_4(2147483647)) {\n                 jj_consume_token(PI);\n-                jj_consume_token(75);\n+                jj_consume_token(76);\n                 jj_consume_token(Literal);\n                 instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n-                jj_consume_token(76);\n+                jj_consume_token(77);\n             } else {\n                 switch(jj_nt.kind) {\n                     case OR:\n                     case AND:\n                     case MOD:\n                     case DIV:\n                     case NODE:\n                     case TEXT:\n                     case COMMENT:\n                     case PI:\n                     case FUNCTION_LAST:\n                     case FUNCTION_POSITION:\n                     case FUNCTION_COUNT:\n                     case FUNCTION_ID:\n                     case FUNCTION_KEY:\n                     case FUNCTION_LOCAL_NAME:\n                     case FUNCTION_NAMESPACE_URI:\n                     case FUNCTION_NAME:\n                     case FUNCTION_STRING:\n                     case FUNCTION_CONCAT:\n                     case FUNCTION_STARTS_WITH:\n                     case FUNCTION_CONTAINS:\n                     case FUNCTION_SUBSTRING_BEFORE:\n                     case FUNCTION_SUBSTRING_AFTER:\n                     case FUNCTION_SUBSTRING:\n                     case FUNCTION_STRING_LENGTH:\n                     case FUNCTION_NORMALIZE_SPACE:\n                     case FUNCTION_TRANSLATE:\n                     case FUNCTION_BOOLEAN:\n                     case FUNCTION_NOT:\n                     case FUNCTION_TRUE:\n                     case FUNCTION_FALSE:\n                     case FUNCTION_NULL:\n                     case FUNCTION_LANG:\n                     case FUNCTION_NUMBER:\n                     case FUNCTION_SUM:\n                     case FUNCTION_FLOOR:\n                     case FUNCTION_CEILING:\n                     case FUNCTION_ROUND:\n+                    case FUNCTION_FORMAT_NUMBER:\n                     case NCName:\n-                    case 83:\n+                    case 84:\n                         name \u003d WildcardName();\n                         break;\n                     default:\n                         jj_la1[10] \u003d jj_gen;\n                         jj_consume_token(-1);\n                         throw new ParseException();\n                 }\n             }\n             break;\n-        case 77:\n-            jj_consume_token(77);\n+        case 78:\n+            jj_consume_token(78);\n             axis \u003d Compiler.AXIS_SELF;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n-        case 78:\n-            jj_consume_token(78);\n+        case 79:\n+            jj_consume_token(79);\n             axis \u003d Compiler.AXIS_PARENT;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n         default:\n             jj_la1[11] \u003d jj_gen;\n             jj_consume_token(-1);\n             throw new ParseException();\n     }\n     label_3: while (true) {\n         switch(jj_nt.kind) {\n-            case 79:\n+            case 80:\n                 ;\n                 break;\n             default:\n                 jj_la1[12] \u003d jj_gen;\n                 break label_3;\n         }\n         p \u003d Predicate();\n         ps.add(p);\n     }\n     if (name !\u003d null) {\n         s \u003d compiler.nodeNameTest(name);\n     } else if (instruction !\u003d null) {\n         s \u003d compiler.processingInstructionTest(instruction);\n     } else {\n         s \u003d compiler.nodeTypeTest(type);\n     }\n     steps.add(compiler.step(axis, s, ps.toArray()));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "632e72228ad994efa19c0a9ae84923718f259cdf": {
      "type": "Ybodychange",
      "commitMessage": "Added support for id() and key()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/8/02, 3:47 PM",
      "commitName": "632e72228ad994efa19c0a9ae84923718f259cdf",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "9/21/01, 4:22 PM",
      "commitNameOld": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 259.98,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void NodeTest(ArrayList steps) throws ParseException {\n    int axis;\n    int type \u003d -1;\n    String instruction \u003d null;\n    Object name \u003d null;\n    Object s;\n    Object p;\n    ArrayList ps \u003d new ArrayList();\n    switch(jj_nt.kind) {\n        case OR:\n        case AND:\n        case MOD:\n        case DIV:\n        case NODE:\n        case TEXT:\n        case COMMENT:\n        case PI:\n        case AXIS_SELF:\n        case AXIS_CHILD:\n        case AXIS_PARENT:\n        case AXIS_ANCESTOR:\n        case AXIS_ATTRIBUTE:\n        case AXIS_NAMESPACE:\n        case AXIS_PRECEDING:\n        case AXIS_FOLLOWING:\n        case AXIS_DESCENDANT:\n        case AXIS_ANCESTOR_OR_SELF:\n        case AXIS_FOLLOWING_SIBLING:\n        case AXIS_PRECEDING_SIBLING:\n        case AXIS_DESCENDANT_OR_SELF:\n        case FUNCTION_LAST:\n        case FUNCTION_POSITION:\n        case FUNCTION_COUNT:\n        case FUNCTION_ID:\n        case FUNCTION_KEY:\n        case FUNCTION_LOCAL_NAME:\n        case FUNCTION_NAMESPACE_URI:\n        case FUNCTION_NAME:\n        case FUNCTION_STRING:\n        case FUNCTION_CONCAT:\n        case FUNCTION_STARTS_WITH:\n        case FUNCTION_CONTAINS:\n        case FUNCTION_SUBSTRING_BEFORE:\n        case FUNCTION_SUBSTRING_AFTER:\n        case FUNCTION_SUBSTRING:\n        case FUNCTION_STRING_LENGTH:\n        case FUNCTION_NORMALIZE_SPACE:\n        case FUNCTION_TRANSLATE:\n        case FUNCTION_BOOLEAN:\n        case FUNCTION_NOT:\n        case FUNCTION_TRUE:\n        case FUNCTION_FALSE:\n        case FUNCTION_NULL:\n        case FUNCTION_LANG:\n        case FUNCTION_NUMBER:\n        case FUNCTION_SUM:\n        case FUNCTION_FLOOR:\n        case FUNCTION_CEILING:\n        case FUNCTION_ROUND:\n        case NCName:\n        case 81:\n        case 83:\n            axis \u003d AxisSpecifier();\n            if (jj_2_3(2147483647)) {\n                type \u003d NodeType();\n                jj_consume_token(75);\n                jj_consume_token(76);\n            } else if (jj_2_4(2147483647)) {\n                jj_consume_token(PI);\n                jj_consume_token(75);\n                jj_consume_token(Literal);\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n                jj_consume_token(76);\n            } else {\n                switch(jj_nt.kind) {\n                    case OR:\n                    case AND:\n                    case MOD:\n                    case DIV:\n                    case NODE:\n                    case TEXT:\n                    case COMMENT:\n                    case PI:\n                    case FUNCTION_LAST:\n                    case FUNCTION_POSITION:\n                    case FUNCTION_COUNT:\n                    case FUNCTION_ID:\n                    case FUNCTION_KEY:\n                    case FUNCTION_LOCAL_NAME:\n                    case FUNCTION_NAMESPACE_URI:\n                    case FUNCTION_NAME:\n                    case FUNCTION_STRING:\n                    case FUNCTION_CONCAT:\n                    case FUNCTION_STARTS_WITH:\n                    case FUNCTION_CONTAINS:\n                    case FUNCTION_SUBSTRING_BEFORE:\n                    case FUNCTION_SUBSTRING_AFTER:\n                    case FUNCTION_SUBSTRING:\n                    case FUNCTION_STRING_LENGTH:\n                    case FUNCTION_NORMALIZE_SPACE:\n                    case FUNCTION_TRANSLATE:\n                    case FUNCTION_BOOLEAN:\n                    case FUNCTION_NOT:\n                    case FUNCTION_TRUE:\n                    case FUNCTION_FALSE:\n                    case FUNCTION_NULL:\n                    case FUNCTION_LANG:\n                    case FUNCTION_NUMBER:\n                    case FUNCTION_SUM:\n                    case FUNCTION_FLOOR:\n                    case FUNCTION_CEILING:\n                    case FUNCTION_ROUND:\n                    case NCName:\n                    case 83:\n                        name \u003d WildcardName();\n                        break;\n                    default:\n                        jj_la1[10] \u003d jj_gen;\n                        jj_consume_token(-1);\n                        throw new ParseException();\n                }\n            }\n            break;\n        case 77:\n            jj_consume_token(77);\n            axis \u003d Compiler.AXIS_SELF;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        case 78:\n            jj_consume_token(78);\n            axis \u003d Compiler.AXIS_PARENT;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        default:\n            jj_la1[11] \u003d jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n    }\n    label_3: while (true) {\n        switch(jj_nt.kind) {\n            case 79:\n                ;\n                break;\n            default:\n                jj_la1[12] \u003d jj_gen;\n                break label_3;\n        }\n        p \u003d Predicate();\n        ps.add(p);\n    }\n    if (name !\u003d null) {\n        s \u003d compiler.nodeNameTest(name);\n    } else if (instruction !\u003d null) {\n        s \u003d compiler.processingInstructionTest(instruction);\n    } else {\n        s \u003d compiler.nodeTypeTest(type);\n    }\n    steps.add(compiler.step(axis, s, ps.toArray()));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java",
      "functionStartLine": 589,
      "functionName": "NodeTest",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,157 +1,159 @@\n public final void NodeTest(ArrayList steps) throws ParseException {\n     int axis;\n     int type \u003d -1;\n     String instruction \u003d null;\n     Object name \u003d null;\n     Object s;\n     Object p;\n     ArrayList ps \u003d new ArrayList();\n     switch(jj_nt.kind) {\n         case OR:\n         case AND:\n         case MOD:\n         case DIV:\n         case NODE:\n         case TEXT:\n         case COMMENT:\n         case PI:\n         case AXIS_SELF:\n         case AXIS_CHILD:\n         case AXIS_PARENT:\n         case AXIS_ANCESTOR:\n         case AXIS_ATTRIBUTE:\n         case AXIS_NAMESPACE:\n         case AXIS_PRECEDING:\n         case AXIS_FOLLOWING:\n         case AXIS_DESCENDANT:\n         case AXIS_ANCESTOR_OR_SELF:\n         case AXIS_FOLLOWING_SIBLING:\n         case AXIS_PRECEDING_SIBLING:\n         case AXIS_DESCENDANT_OR_SELF:\n         case FUNCTION_LAST:\n         case FUNCTION_POSITION:\n         case FUNCTION_COUNT:\n         case FUNCTION_ID:\n+        case FUNCTION_KEY:\n         case FUNCTION_LOCAL_NAME:\n         case FUNCTION_NAMESPACE_URI:\n         case FUNCTION_NAME:\n         case FUNCTION_STRING:\n         case FUNCTION_CONCAT:\n         case FUNCTION_STARTS_WITH:\n         case FUNCTION_CONTAINS:\n         case FUNCTION_SUBSTRING_BEFORE:\n         case FUNCTION_SUBSTRING_AFTER:\n         case FUNCTION_SUBSTRING:\n         case FUNCTION_STRING_LENGTH:\n         case FUNCTION_NORMALIZE_SPACE:\n         case FUNCTION_TRANSLATE:\n         case FUNCTION_BOOLEAN:\n         case FUNCTION_NOT:\n         case FUNCTION_TRUE:\n         case FUNCTION_FALSE:\n         case FUNCTION_NULL:\n         case FUNCTION_LANG:\n         case FUNCTION_NUMBER:\n         case FUNCTION_SUM:\n         case FUNCTION_FLOOR:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n         case NCName:\n-        case 80:\n-        case 82:\n+        case 81:\n+        case 83:\n             axis \u003d AxisSpecifier();\n             if (jj_2_3(2147483647)) {\n                 type \u003d NodeType();\n-                jj_consume_token(74);\n                 jj_consume_token(75);\n+                jj_consume_token(76);\n             } else if (jj_2_4(2147483647)) {\n                 jj_consume_token(PI);\n-                jj_consume_token(74);\n+                jj_consume_token(75);\n                 jj_consume_token(Literal);\n                 instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n-                jj_consume_token(75);\n+                jj_consume_token(76);\n             } else {\n                 switch(jj_nt.kind) {\n                     case OR:\n                     case AND:\n                     case MOD:\n                     case DIV:\n                     case NODE:\n                     case TEXT:\n                     case COMMENT:\n                     case PI:\n                     case FUNCTION_LAST:\n                     case FUNCTION_POSITION:\n                     case FUNCTION_COUNT:\n                     case FUNCTION_ID:\n+                    case FUNCTION_KEY:\n                     case FUNCTION_LOCAL_NAME:\n                     case FUNCTION_NAMESPACE_URI:\n                     case FUNCTION_NAME:\n                     case FUNCTION_STRING:\n                     case FUNCTION_CONCAT:\n                     case FUNCTION_STARTS_WITH:\n                     case FUNCTION_CONTAINS:\n                     case FUNCTION_SUBSTRING_BEFORE:\n                     case FUNCTION_SUBSTRING_AFTER:\n                     case FUNCTION_SUBSTRING:\n                     case FUNCTION_STRING_LENGTH:\n                     case FUNCTION_NORMALIZE_SPACE:\n                     case FUNCTION_TRANSLATE:\n                     case FUNCTION_BOOLEAN:\n                     case FUNCTION_NOT:\n                     case FUNCTION_TRUE:\n                     case FUNCTION_FALSE:\n                     case FUNCTION_NULL:\n                     case FUNCTION_LANG:\n                     case FUNCTION_NUMBER:\n                     case FUNCTION_SUM:\n                     case FUNCTION_FLOOR:\n                     case FUNCTION_CEILING:\n                     case FUNCTION_ROUND:\n                     case NCName:\n-                    case 82:\n+                    case 83:\n                         name \u003d WildcardName();\n                         break;\n                     default:\n                         jj_la1[10] \u003d jj_gen;\n                         jj_consume_token(-1);\n                         throw new ParseException();\n                 }\n             }\n             break;\n-        case 76:\n-            jj_consume_token(76);\n+        case 77:\n+            jj_consume_token(77);\n             axis \u003d Compiler.AXIS_SELF;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n-        case 77:\n-            jj_consume_token(77);\n+        case 78:\n+            jj_consume_token(78);\n             axis \u003d Compiler.AXIS_PARENT;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n         default:\n             jj_la1[11] \u003d jj_gen;\n             jj_consume_token(-1);\n             throw new ParseException();\n     }\n     label_3: while (true) {\n         switch(jj_nt.kind) {\n-            case 78:\n+            case 79:\n                 ;\n                 break;\n             default:\n                 jj_la1[12] \u003d jj_gen;\n                 break label_3;\n         }\n         p \u003d Predicate();\n         ps.add(p);\n     }\n     if (name !\u003d null) {\n         s \u003d compiler.nodeNameTest(name);\n     } else if (instruction !\u003d null) {\n         s \u003d compiler.processingInstructionTest(instruction);\n     } else {\n         s \u003d compiler.nodeTypeTest(type);\n     }\n     steps.add(compiler.step(axis, s, ps.toArray()));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": {
      "type": "Ybodychange",
      "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/21/01, 4:22 PM",
      "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/22/01, 5:47 PM",
      "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 29.94,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void NodeTest(ArrayList steps) throws ParseException {\n    int axis;\n    int type \u003d -1;\n    String instruction \u003d null;\n    Object name \u003d null;\n    Object s;\n    Object p;\n    ArrayList ps \u003d new ArrayList();\n    switch(jj_nt.kind) {\n        case OR:\n        case AND:\n        case MOD:\n        case DIV:\n        case NODE:\n        case TEXT:\n        case COMMENT:\n        case PI:\n        case AXIS_SELF:\n        case AXIS_CHILD:\n        case AXIS_PARENT:\n        case AXIS_ANCESTOR:\n        case AXIS_ATTRIBUTE:\n        case AXIS_NAMESPACE:\n        case AXIS_PRECEDING:\n        case AXIS_FOLLOWING:\n        case AXIS_DESCENDANT:\n        case AXIS_ANCESTOR_OR_SELF:\n        case AXIS_FOLLOWING_SIBLING:\n        case AXIS_PRECEDING_SIBLING:\n        case AXIS_DESCENDANT_OR_SELF:\n        case FUNCTION_LAST:\n        case FUNCTION_POSITION:\n        case FUNCTION_COUNT:\n        case FUNCTION_ID:\n        case FUNCTION_LOCAL_NAME:\n        case FUNCTION_NAMESPACE_URI:\n        case FUNCTION_NAME:\n        case FUNCTION_STRING:\n        case FUNCTION_CONCAT:\n        case FUNCTION_STARTS_WITH:\n        case FUNCTION_CONTAINS:\n        case FUNCTION_SUBSTRING_BEFORE:\n        case FUNCTION_SUBSTRING_AFTER:\n        case FUNCTION_SUBSTRING:\n        case FUNCTION_STRING_LENGTH:\n        case FUNCTION_NORMALIZE_SPACE:\n        case FUNCTION_TRANSLATE:\n        case FUNCTION_BOOLEAN:\n        case FUNCTION_NOT:\n        case FUNCTION_TRUE:\n        case FUNCTION_FALSE:\n        case FUNCTION_NULL:\n        case FUNCTION_LANG:\n        case FUNCTION_NUMBER:\n        case FUNCTION_SUM:\n        case FUNCTION_FLOOR:\n        case FUNCTION_CEILING:\n        case FUNCTION_ROUND:\n        case NCName:\n        case 80:\n        case 82:\n            axis \u003d AxisSpecifier();\n            if (jj_2_3(2147483647)) {\n                type \u003d NodeType();\n                jj_consume_token(74);\n                jj_consume_token(75);\n            } else if (jj_2_4(2147483647)) {\n                jj_consume_token(PI);\n                jj_consume_token(74);\n                jj_consume_token(Literal);\n                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n                jj_consume_token(75);\n            } else {\n                switch(jj_nt.kind) {\n                    case OR:\n                    case AND:\n                    case MOD:\n                    case DIV:\n                    case NODE:\n                    case TEXT:\n                    case COMMENT:\n                    case PI:\n                    case FUNCTION_LAST:\n                    case FUNCTION_POSITION:\n                    case FUNCTION_COUNT:\n                    case FUNCTION_ID:\n                    case FUNCTION_LOCAL_NAME:\n                    case FUNCTION_NAMESPACE_URI:\n                    case FUNCTION_NAME:\n                    case FUNCTION_STRING:\n                    case FUNCTION_CONCAT:\n                    case FUNCTION_STARTS_WITH:\n                    case FUNCTION_CONTAINS:\n                    case FUNCTION_SUBSTRING_BEFORE:\n                    case FUNCTION_SUBSTRING_AFTER:\n                    case FUNCTION_SUBSTRING:\n                    case FUNCTION_STRING_LENGTH:\n                    case FUNCTION_NORMALIZE_SPACE:\n                    case FUNCTION_TRANSLATE:\n                    case FUNCTION_BOOLEAN:\n                    case FUNCTION_NOT:\n                    case FUNCTION_TRUE:\n                    case FUNCTION_FALSE:\n                    case FUNCTION_NULL:\n                    case FUNCTION_LANG:\n                    case FUNCTION_NUMBER:\n                    case FUNCTION_SUM:\n                    case FUNCTION_FLOOR:\n                    case FUNCTION_CEILING:\n                    case FUNCTION_ROUND:\n                    case NCName:\n                    case 82:\n                        name \u003d WildcardName();\n                        break;\n                    default:\n                        jj_la1[10] \u003d jj_gen;\n                        jj_consume_token(-1);\n                        throw new ParseException();\n                }\n            }\n            break;\n        case 76:\n            jj_consume_token(76);\n            axis \u003d Compiler.AXIS_SELF;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        case 77:\n            jj_consume_token(77);\n            axis \u003d Compiler.AXIS_PARENT;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        default:\n            jj_la1[11] \u003d jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n    }\n    label_3: while (true) {\n        switch(jj_nt.kind) {\n            case 78:\n                ;\n                break;\n            default:\n                jj_la1[12] \u003d jj_gen;\n                break label_3;\n        }\n        p \u003d Predicate();\n        ps.add(p);\n    }\n    if (name !\u003d null) {\n        s \u003d compiler.nodeNameTest(name);\n    } else if (instruction !\u003d null) {\n        s \u003d compiler.processingInstructionTest(instruction);\n    } else {\n        s \u003d compiler.nodeTypeTest(type);\n    }\n    steps.add(compiler.step(axis, s, ps.toArray()));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java",
      "functionStartLine": 581,
      "functionName": "NodeTest",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,155 +1,157 @@\n public final void NodeTest(ArrayList steps) throws ParseException {\n     int axis;\n     int type \u003d -1;\n     String instruction \u003d null;\n     Object name \u003d null;\n     Object s;\n     Object p;\n     ArrayList ps \u003d new ArrayList();\n     switch(jj_nt.kind) {\n         case OR:\n         case AND:\n         case MOD:\n         case DIV:\n         case NODE:\n         case TEXT:\n         case COMMENT:\n         case PI:\n         case AXIS_SELF:\n         case AXIS_CHILD:\n         case AXIS_PARENT:\n         case AXIS_ANCESTOR:\n         case AXIS_ATTRIBUTE:\n         case AXIS_NAMESPACE:\n         case AXIS_PRECEDING:\n         case AXIS_FOLLOWING:\n         case AXIS_DESCENDANT:\n         case AXIS_ANCESTOR_OR_SELF:\n         case AXIS_FOLLOWING_SIBLING:\n         case AXIS_PRECEDING_SIBLING:\n         case AXIS_DESCENDANT_OR_SELF:\n         case FUNCTION_LAST:\n         case FUNCTION_POSITION:\n         case FUNCTION_COUNT:\n         case FUNCTION_ID:\n         case FUNCTION_LOCAL_NAME:\n         case FUNCTION_NAMESPACE_URI:\n         case FUNCTION_NAME:\n         case FUNCTION_STRING:\n         case FUNCTION_CONCAT:\n         case FUNCTION_STARTS_WITH:\n         case FUNCTION_CONTAINS:\n         case FUNCTION_SUBSTRING_BEFORE:\n         case FUNCTION_SUBSTRING_AFTER:\n         case FUNCTION_SUBSTRING:\n         case FUNCTION_STRING_LENGTH:\n         case FUNCTION_NORMALIZE_SPACE:\n         case FUNCTION_TRANSLATE:\n         case FUNCTION_BOOLEAN:\n         case FUNCTION_NOT:\n         case FUNCTION_TRUE:\n         case FUNCTION_FALSE:\n+        case FUNCTION_NULL:\n         case FUNCTION_LANG:\n         case FUNCTION_NUMBER:\n         case FUNCTION_SUM:\n         case FUNCTION_FLOOR:\n         case FUNCTION_CEILING:\n         case FUNCTION_ROUND:\n         case NCName:\n-        case 79:\n-        case 81:\n+        case 80:\n+        case 82:\n             axis \u003d AxisSpecifier();\n             if (jj_2_3(2147483647)) {\n                 type \u003d NodeType();\n-                jj_consume_token(73);\n                 jj_consume_token(74);\n+                jj_consume_token(75);\n             } else if (jj_2_4(2147483647)) {\n                 jj_consume_token(PI);\n-                jj_consume_token(73);\n-                jj_consume_token(Literal);\n-                instruction \u003d token.image;\n                 jj_consume_token(74);\n+                jj_consume_token(Literal);\n+                instruction \u003d unescape(token.image.substring(1, token.image.length() - 1));\n+                jj_consume_token(75);\n             } else {\n                 switch(jj_nt.kind) {\n                     case OR:\n                     case AND:\n                     case MOD:\n                     case DIV:\n                     case NODE:\n                     case TEXT:\n                     case COMMENT:\n                     case PI:\n                     case FUNCTION_LAST:\n                     case FUNCTION_POSITION:\n                     case FUNCTION_COUNT:\n                     case FUNCTION_ID:\n                     case FUNCTION_LOCAL_NAME:\n                     case FUNCTION_NAMESPACE_URI:\n                     case FUNCTION_NAME:\n                     case FUNCTION_STRING:\n                     case FUNCTION_CONCAT:\n                     case FUNCTION_STARTS_WITH:\n                     case FUNCTION_CONTAINS:\n                     case FUNCTION_SUBSTRING_BEFORE:\n                     case FUNCTION_SUBSTRING_AFTER:\n                     case FUNCTION_SUBSTRING:\n                     case FUNCTION_STRING_LENGTH:\n                     case FUNCTION_NORMALIZE_SPACE:\n                     case FUNCTION_TRANSLATE:\n                     case FUNCTION_BOOLEAN:\n                     case FUNCTION_NOT:\n                     case FUNCTION_TRUE:\n                     case FUNCTION_FALSE:\n+                    case FUNCTION_NULL:\n                     case FUNCTION_LANG:\n                     case FUNCTION_NUMBER:\n                     case FUNCTION_SUM:\n                     case FUNCTION_FLOOR:\n                     case FUNCTION_CEILING:\n                     case FUNCTION_ROUND:\n                     case NCName:\n-                    case 81:\n+                    case 82:\n                         name \u003d WildcardName();\n                         break;\n                     default:\n                         jj_la1[10] \u003d jj_gen;\n                         jj_consume_token(-1);\n                         throw new ParseException();\n                 }\n             }\n             break;\n-        case 75:\n-            jj_consume_token(75);\n+        case 76:\n+            jj_consume_token(76);\n             axis \u003d Compiler.AXIS_SELF;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n-        case 76:\n-            jj_consume_token(76);\n+        case 77:\n+            jj_consume_token(77);\n             axis \u003d Compiler.AXIS_PARENT;\n             type \u003d Compiler.NODE_TYPE_NODE;\n             break;\n         default:\n             jj_la1[11] \u003d jj_gen;\n             jj_consume_token(-1);\n             throw new ParseException();\n     }\n     label_3: while (true) {\n         switch(jj_nt.kind) {\n-            case 77:\n+            case 78:\n                 ;\n                 break;\n             default:\n                 jj_la1[12] \u003d jj_gen;\n                 break label_3;\n         }\n         p \u003d Predicate();\n         ps.add(p);\n     }\n     if (name !\u003d null) {\n-        s \u003d compiler.nodeNameTest(axis, name, ps.toArray());\n+        s \u003d compiler.nodeNameTest(name);\n     } else if (instruction !\u003d null) {\n-        s \u003d compiler.processingInstructionTest(axis, instruction, ps.toArray());\n+        s \u003d compiler.processingInstructionTest(instruction);\n     } else {\n-        s \u003d compiler.nodeTypeTest(axis, type, ps.toArray());\n+        s \u003d compiler.nodeTypeTest(type);\n     }\n-    steps.add(s);\n+    steps.add(compiler.step(axis, s, ps.toArray()));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,155 @@\n+public final void NodeTest(ArrayList steps) throws ParseException {\n+    int axis;\n+    int type \u003d -1;\n+    String instruction \u003d null;\n+    Object name \u003d null;\n+    Object s;\n+    Object p;\n+    ArrayList ps \u003d new ArrayList();\n+    switch(jj_nt.kind) {\n+        case OR:\n+        case AND:\n+        case MOD:\n+        case DIV:\n+        case NODE:\n+        case TEXT:\n+        case COMMENT:\n+        case PI:\n+        case AXIS_SELF:\n+        case AXIS_CHILD:\n+        case AXIS_PARENT:\n+        case AXIS_ANCESTOR:\n+        case AXIS_ATTRIBUTE:\n+        case AXIS_NAMESPACE:\n+        case AXIS_PRECEDING:\n+        case AXIS_FOLLOWING:\n+        case AXIS_DESCENDANT:\n+        case AXIS_ANCESTOR_OR_SELF:\n+        case AXIS_FOLLOWING_SIBLING:\n+        case AXIS_PRECEDING_SIBLING:\n+        case AXIS_DESCENDANT_OR_SELF:\n+        case FUNCTION_LAST:\n+        case FUNCTION_POSITION:\n+        case FUNCTION_COUNT:\n+        case FUNCTION_ID:\n+        case FUNCTION_LOCAL_NAME:\n+        case FUNCTION_NAMESPACE_URI:\n+        case FUNCTION_NAME:\n+        case FUNCTION_STRING:\n+        case FUNCTION_CONCAT:\n+        case FUNCTION_STARTS_WITH:\n+        case FUNCTION_CONTAINS:\n+        case FUNCTION_SUBSTRING_BEFORE:\n+        case FUNCTION_SUBSTRING_AFTER:\n+        case FUNCTION_SUBSTRING:\n+        case FUNCTION_STRING_LENGTH:\n+        case FUNCTION_NORMALIZE_SPACE:\n+        case FUNCTION_TRANSLATE:\n+        case FUNCTION_BOOLEAN:\n+        case FUNCTION_NOT:\n+        case FUNCTION_TRUE:\n+        case FUNCTION_FALSE:\n+        case FUNCTION_LANG:\n+        case FUNCTION_NUMBER:\n+        case FUNCTION_SUM:\n+        case FUNCTION_FLOOR:\n+        case FUNCTION_CEILING:\n+        case FUNCTION_ROUND:\n+        case NCName:\n+        case 79:\n+        case 81:\n+            axis \u003d AxisSpecifier();\n+            if (jj_2_3(2147483647)) {\n+                type \u003d NodeType();\n+                jj_consume_token(73);\n+                jj_consume_token(74);\n+            } else if (jj_2_4(2147483647)) {\n+                jj_consume_token(PI);\n+                jj_consume_token(73);\n+                jj_consume_token(Literal);\n+                instruction \u003d token.image;\n+                jj_consume_token(74);\n+            } else {\n+                switch(jj_nt.kind) {\n+                    case OR:\n+                    case AND:\n+                    case MOD:\n+                    case DIV:\n+                    case NODE:\n+                    case TEXT:\n+                    case COMMENT:\n+                    case PI:\n+                    case FUNCTION_LAST:\n+                    case FUNCTION_POSITION:\n+                    case FUNCTION_COUNT:\n+                    case FUNCTION_ID:\n+                    case FUNCTION_LOCAL_NAME:\n+                    case FUNCTION_NAMESPACE_URI:\n+                    case FUNCTION_NAME:\n+                    case FUNCTION_STRING:\n+                    case FUNCTION_CONCAT:\n+                    case FUNCTION_STARTS_WITH:\n+                    case FUNCTION_CONTAINS:\n+                    case FUNCTION_SUBSTRING_BEFORE:\n+                    case FUNCTION_SUBSTRING_AFTER:\n+                    case FUNCTION_SUBSTRING:\n+                    case FUNCTION_STRING_LENGTH:\n+                    case FUNCTION_NORMALIZE_SPACE:\n+                    case FUNCTION_TRANSLATE:\n+                    case FUNCTION_BOOLEAN:\n+                    case FUNCTION_NOT:\n+                    case FUNCTION_TRUE:\n+                    case FUNCTION_FALSE:\n+                    case FUNCTION_LANG:\n+                    case FUNCTION_NUMBER:\n+                    case FUNCTION_SUM:\n+                    case FUNCTION_FLOOR:\n+                    case FUNCTION_CEILING:\n+                    case FUNCTION_ROUND:\n+                    case NCName:\n+                    case 81:\n+                        name \u003d WildcardName();\n+                        break;\n+                    default:\n+                        jj_la1[10] \u003d jj_gen;\n+                        jj_consume_token(-1);\n+                        throw new ParseException();\n+                }\n+            }\n+            break;\n+        case 75:\n+            jj_consume_token(75);\n+            axis \u003d Compiler.AXIS_SELF;\n+            type \u003d Compiler.NODE_TYPE_NODE;\n+            break;\n+        case 76:\n+            jj_consume_token(76);\n+            axis \u003d Compiler.AXIS_PARENT;\n+            type \u003d Compiler.NODE_TYPE_NODE;\n+            break;\n+        default:\n+            jj_la1[11] \u003d jj_gen;\n+            jj_consume_token(-1);\n+            throw new ParseException();\n+    }\n+    label_3: while (true) {\n+        switch(jj_nt.kind) {\n+            case 77:\n+                ;\n+                break;\n+            default:\n+                jj_la1[12] \u003d jj_gen;\n+                break label_3;\n+        }\n+        p \u003d Predicate();\n+        ps.add(p);\n+    }\n+    if (name !\u003d null) {\n+        s \u003d compiler.nodeNameTest(axis, name, ps.toArray());\n+    } else if (instruction !\u003d null) {\n+        s \u003d compiler.processingInstructionTest(axis, instruction, ps.toArray());\n+    } else {\n+        s \u003d compiler.nodeTypeTest(axis, type, ps.toArray());\n+    }\n+    steps.add(s);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final void NodeTest(ArrayList steps) throws ParseException {\n    int axis;\n    int type \u003d -1;\n    String instruction \u003d null;\n    Object name \u003d null;\n    Object s;\n    Object p;\n    ArrayList ps \u003d new ArrayList();\n    switch(jj_nt.kind) {\n        case OR:\n        case AND:\n        case MOD:\n        case DIV:\n        case NODE:\n        case TEXT:\n        case COMMENT:\n        case PI:\n        case AXIS_SELF:\n        case AXIS_CHILD:\n        case AXIS_PARENT:\n        case AXIS_ANCESTOR:\n        case AXIS_ATTRIBUTE:\n        case AXIS_NAMESPACE:\n        case AXIS_PRECEDING:\n        case AXIS_FOLLOWING:\n        case AXIS_DESCENDANT:\n        case AXIS_ANCESTOR_OR_SELF:\n        case AXIS_FOLLOWING_SIBLING:\n        case AXIS_PRECEDING_SIBLING:\n        case AXIS_DESCENDANT_OR_SELF:\n        case FUNCTION_LAST:\n        case FUNCTION_POSITION:\n        case FUNCTION_COUNT:\n        case FUNCTION_ID:\n        case FUNCTION_LOCAL_NAME:\n        case FUNCTION_NAMESPACE_URI:\n        case FUNCTION_NAME:\n        case FUNCTION_STRING:\n        case FUNCTION_CONCAT:\n        case FUNCTION_STARTS_WITH:\n        case FUNCTION_CONTAINS:\n        case FUNCTION_SUBSTRING_BEFORE:\n        case FUNCTION_SUBSTRING_AFTER:\n        case FUNCTION_SUBSTRING:\n        case FUNCTION_STRING_LENGTH:\n        case FUNCTION_NORMALIZE_SPACE:\n        case FUNCTION_TRANSLATE:\n        case FUNCTION_BOOLEAN:\n        case FUNCTION_NOT:\n        case FUNCTION_TRUE:\n        case FUNCTION_FALSE:\n        case FUNCTION_LANG:\n        case FUNCTION_NUMBER:\n        case FUNCTION_SUM:\n        case FUNCTION_FLOOR:\n        case FUNCTION_CEILING:\n        case FUNCTION_ROUND:\n        case NCName:\n        case 79:\n        case 81:\n            axis \u003d AxisSpecifier();\n            if (jj_2_3(2147483647)) {\n                type \u003d NodeType();\n                jj_consume_token(73);\n                jj_consume_token(74);\n            } else if (jj_2_4(2147483647)) {\n                jj_consume_token(PI);\n                jj_consume_token(73);\n                jj_consume_token(Literal);\n                instruction \u003d token.image;\n                jj_consume_token(74);\n            } else {\n                switch(jj_nt.kind) {\n                    case OR:\n                    case AND:\n                    case MOD:\n                    case DIV:\n                    case NODE:\n                    case TEXT:\n                    case COMMENT:\n                    case PI:\n                    case FUNCTION_LAST:\n                    case FUNCTION_POSITION:\n                    case FUNCTION_COUNT:\n                    case FUNCTION_ID:\n                    case FUNCTION_LOCAL_NAME:\n                    case FUNCTION_NAMESPACE_URI:\n                    case FUNCTION_NAME:\n                    case FUNCTION_STRING:\n                    case FUNCTION_CONCAT:\n                    case FUNCTION_STARTS_WITH:\n                    case FUNCTION_CONTAINS:\n                    case FUNCTION_SUBSTRING_BEFORE:\n                    case FUNCTION_SUBSTRING_AFTER:\n                    case FUNCTION_SUBSTRING:\n                    case FUNCTION_STRING_LENGTH:\n                    case FUNCTION_NORMALIZE_SPACE:\n                    case FUNCTION_TRANSLATE:\n                    case FUNCTION_BOOLEAN:\n                    case FUNCTION_NOT:\n                    case FUNCTION_TRUE:\n                    case FUNCTION_FALSE:\n                    case FUNCTION_LANG:\n                    case FUNCTION_NUMBER:\n                    case FUNCTION_SUM:\n                    case FUNCTION_FLOOR:\n                    case FUNCTION_CEILING:\n                    case FUNCTION_ROUND:\n                    case NCName:\n                    case 81:\n                        name \u003d WildcardName();\n                        break;\n                    default:\n                        jj_la1[10] \u003d jj_gen;\n                        jj_consume_token(-1);\n                        throw new ParseException();\n                }\n            }\n            break;\n        case 75:\n            jj_consume_token(75);\n            axis \u003d Compiler.AXIS_SELF;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        case 76:\n            jj_consume_token(76);\n            axis \u003d Compiler.AXIS_PARENT;\n            type \u003d Compiler.NODE_TYPE_NODE;\n            break;\n        default:\n            jj_la1[11] \u003d jj_gen;\n            jj_consume_token(-1);\n            throw new ParseException();\n    }\n    label_3: while (true) {\n        switch(jj_nt.kind) {\n            case 77:\n                ;\n                break;\n            default:\n                jj_la1[12] \u003d jj_gen;\n                break label_3;\n        }\n        p \u003d Predicate();\n        ps.add(p);\n    }\n    if (name !\u003d null) {\n        s \u003d compiler.nodeNameTest(axis, name, ps.toArray());\n    } else if (instruction !\u003d null) {\n        s \u003d compiler.processingInstructionTest(axis, instruction, ps.toArray());\n    } else {\n        s \u003d compiler.nodeTypeTest(axis, type, ps.toArray());\n    }\n    steps.add(s);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/parser/XPathParser.java",
      "functionStartLine": 571,
      "functionName": "NodeTest",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}