{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplePathInterpreter.java",
  "functionName": "doStepPredicatesPropertyOwner",
  "functionId": "doStepPredicatesPropertyOwner___context-EvalContext__parentPointer-PropertyOwnerPointer__steps-Step[]__currentStep-int",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
  "functionAnnotation": "",
  "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n\n@param context evaluation context\n@param parentPointer parent pointer\n@param steps path steps\n@param currentStep step number\n@return NodePointer\n",
  "functionStartLine": 305,
  "functionEndLine": 330,
  "numCommitsSeen": 34,
  "timeTaken": 1383,
  "changeHistory": [
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "d5a51635e77e49efbf18c5b51834f533e7972953",
    "e6b562c6eca79b82a57a4532768d775d76f48694"
  ],
  "changeHistoryShort": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ymultichange(Ydocchange,Yformatchange)",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "d5a51635e77e49efbf18c5b51834f533e7972953": "Ybodychange",
    "e6b562c6eca79b82a57a4532768d775d76f48694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/16/07, 11:29 PM",
          "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/5/07, 1:04 PM",
          "commitNameOld": "48294fe62b52a1786a65aa3e15fbccd99f8e5bca",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 11.43,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 305,
          "functionName": "doStepPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n\n@param context evaluation context\n@param parentPointer parent pointer\n@param steps path steps\n@param currentStep step number\n@return NodePointer\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n",
            "newValue": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n\n@param context evaluation context\n@param parentPointer parent pointer\n@param steps path steps\n@param currentStep step number\n@return NodePointer\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/16/07, 11:29 PM",
          "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "12/5/07, 1:04 PM",
          "commitNameOld": "48294fe62b52a1786a65aa3e15fbccd99f8e5bca",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 11.43,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 305,
          "functionName": "doStepPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n\n@param context evaluation context\n@param parentPointer parent pointer\n@param steps path steps\n@param currentStep step number\n@return NodePointer\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 334,
          "functionName": "doStepPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n",
          "diff": "@@ -1,9 +1,9 @@\n-private static NodePointer doStep_predicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n-    Step step \u003d steps[current_step];\n+private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n+    Step step \u003d steps[currentStep];\n     Expression[] predicates \u003d step.getPredicates();\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n-        return createNullPointer(context, parentPointer, steps, current_step);\n+        return createNullPointer(context, parentPointer, steps, currentStep);\n     }\n-    return doPredicate(context, childPointer, steps, current_step, predicates, 0);\n+    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "doStep_predicates_propertyOwner",
            "newValue": "doStepPredicatesPropertyOwner"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 334,
          "functionName": "doStepPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n",
          "diff": "@@ -1,9 +1,9 @@\n-private static NodePointer doStep_predicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n-    Step step \u003d steps[current_step];\n+private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n+    Step step \u003d steps[currentStep];\n     Expression[] predicates \u003d step.getPredicates();\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n-        return createNullPointer(context, parentPointer, steps, current_step);\n+        return createNullPointer(context, parentPointer, steps, currentStep);\n     }\n-    return doPredicate(context, childPointer, steps, current_step, predicates, 0);\n+    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, parentPointer-PropertyOwnerPointer, steps-Step[], current_step-int]",
            "newValue": "[context-EvalContext, parentPointer-PropertyOwnerPointer, steps-Step[], currentStep-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, currentStep);\n    }\n    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 334,
          "functionName": "doStepPredicatesPropertyOwner",
          "functionAnnotation": "",
          "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n",
          "diff": "@@ -1,9 +1,9 @@\n-private static NodePointer doStep_predicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n-    Step step \u003d steps[current_step];\n+private static NodePointer doStepPredicatesPropertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int currentStep) {\n+    Step step \u003d steps[currentStep];\n     Expression[] predicates \u003d step.getPredicates();\n     NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n-        return createNullPointer(context, parentPointer, steps, current_step);\n+        return createNullPointer(context, parentPointer, steps, currentStep);\n     }\n-    return doPredicate(context, childPointer, steps, current_step, predicates, 0);\n+    return doPredicate(context, childPointer, steps, currentStep, predicates, 0);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d5a51635e77e49efbf18c5b51834f533e7972953": {
      "type": "Ybodychange",
      "commitMessage": "1. Now bean\u0027s properties can be accessed either with the child:: or the attribute:: axis.\n2. Missing attributes can be created with an AbstractFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/02, 7:59 PM",
      "commitName": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/9/02, 6:35 PM",
      "commitNameOld": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 64.06,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStep_predicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n    Step step \u003d steps[current_step];\n    Expression[] predicates \u003d step.getPredicates();\n    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, current_step);\n    }\n    return doPredicate(context, childPointer, steps, current_step, predicates, 0);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 306,
      "functionName": "doStep_predicates_propertyOwner",
      "functionAnnotation": "",
      "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n",
      "diff": "@@ -1,16 +1,9 @@\n private static NodePointer doStep_predicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n     Step step \u003d steps[current_step];\n     Expression[] predicates \u003d step.getPredicates();\n-    NodePointer childPointer;\n-    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD) {\n-        QName name \u003d ((NodeNameTest) step.getNodeTest()).getNodeName();\n-        childPointer \u003d parentPointer.getPropertyPointer();\n-        ((PropertyPointer) childPointer).setPropertyName(name.toString());\n-    } else {\n-        childPointer \u003d parentPointer;\n-    }\n+    NodePointer childPointer \u003d createChildPointerForStep(parentPointer, step);\n     if (!childPointer.isActual()) {\n         return createNullPointer(context, parentPointer, steps, current_step);\n     }\n     return doPredicate(context, childPointer, steps, current_step, predicates, 0);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e6b562c6eca79b82a57a4532768d775d76f48694": {
      "type": "Yintroduced",
      "commitMessage": "A complete re-write to address multiple additional use cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:35 PM",
      "commitName": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,16 @@\n+private static NodePointer doStep_predicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n+    Step step \u003d steps[current_step];\n+    Expression[] predicates \u003d step.getPredicates();\n+    NodePointer childPointer;\n+    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD) {\n+        QName name \u003d ((NodeNameTest) step.getNodeTest()).getNodeName();\n+        childPointer \u003d parentPointer.getPropertyPointer();\n+        ((PropertyPointer) childPointer).setPropertyName(name.toString());\n+    } else {\n+        childPointer \u003d parentPointer;\n+    }\n+    if (!childPointer.isActual()) {\n+        return createNullPointer(context, parentPointer, steps, current_step);\n+    }\n+    return doPredicate(context, childPointer, steps, current_step, predicates, 0);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static NodePointer doStep_predicates_propertyOwner(EvalContext context, PropertyOwnerPointer parentPointer, Step[] steps, int current_step) {\n    Step step \u003d steps[current_step];\n    Expression[] predicates \u003d step.getPredicates();\n    NodePointer childPointer;\n    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD) {\n        QName name \u003d ((NodeNameTest) step.getNodeTest()).getNodeName();\n        childPointer \u003d parentPointer.getPropertyPointer();\n        ((PropertyPointer) childPointer).setPropertyName(name.toString());\n    } else {\n        childPointer \u003d parentPointer;\n    }\n    if (!childPointer.isActual()) {\n        return createNullPointer(context, parentPointer, steps, current_step);\n    }\n    return doPredicate(context, childPointer, steps, current_step, predicates, 0);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 312,
      "functionName": "doStep_predicates_propertyOwner",
      "functionAnnotation": "",
      "functionDoc": "A path that starts with a property owner. The method evaluates\nthe first predicate in a special way and then forwards to\na general predicate processing method.\n"
    }
  }
}