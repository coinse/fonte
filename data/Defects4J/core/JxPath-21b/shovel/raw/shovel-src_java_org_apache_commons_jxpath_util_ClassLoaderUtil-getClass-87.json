{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClassLoaderUtil.java",
  "functionName": "getClass",
  "functionId": "getClass___classLoader-ClassLoader__className-String__initialize-boolean",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Returns the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the\n\u003ccode\u003eclassLoader\u003c/code\u003e.  This implementation supports names like\n\"\u003ccode\u003ejava.lang.String[]\u003c/code\u003e\" as well as \"\u003ccode\u003e[Ljava.lang.String;\u003c/code\u003e\".\n\n@param classLoader the class loader to use to load the class\n@param className the class name\n@param initialize whether the class must be initialized\n@return the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the \u003ccode\u003eclassLoader\u003c/code\u003e\n@throws ClassNotFoundException if the class is not found\n",
  "functionStartLine": 87,
  "functionEndLine": 97,
  "numCommitsSeen": 1,
  "timeTaken": 399,
  "changeHistory": [
    "b67345afa4817cc8bc7f14137ed1ef90ab299062"
  ],
  "changeHistoryShort": {
    "b67345afa4817cc8bc7f14137ed1ef90ab299062": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b67345afa4817cc8bc7f14137ed1ef90ab299062": {
      "type": "Yintroduced",
      "commitMessage": "[JXPATH-127] Change dynamic classloading to consult context ClassLoader\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@916559 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/25/10, 7:55 PM",
      "commitName": "b67345afa4817cc8bc7f14137ed1ef90ab299062",
      "commitAuthor": "Matthew Jason Benson",
      "diff": "@@ -0,0 +1,10 @@\n+public static Class getClass(ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {\n+    Class clazz;\n+    if (abbreviationMap.containsKey(className)) {\n+        String clsName \u003d \"[\" + abbreviationMap.get(className);\n+        clazz \u003d Class.forName(clsName, initialize, classLoader).getComponentType();\n+    } else {\n+        clazz \u003d Class.forName(toCanonicalName(className), initialize, classLoader);\n+    }\n+    return clazz;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Class getClass(ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {\n    Class clazz;\n    if (abbreviationMap.containsKey(className)) {\n        String clsName \u003d \"[\" + abbreviationMap.get(className);\n        clazz \u003d Class.forName(clsName, initialize, classLoader).getComponentType();\n    } else {\n        clazz \u003d Class.forName(toCanonicalName(className), initialize, classLoader);\n    }\n    return clazz;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/ClassLoaderUtil.java",
      "functionStartLine": 87,
      "functionName": "getClass",
      "functionAnnotation": "",
      "functionDoc": "Returns the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the\n\u003ccode\u003eclassLoader\u003c/code\u003e.  This implementation supports names like\n\"\u003ccode\u003ejava.lang.String[]\u003c/code\u003e\" as well as \"\u003ccode\u003e[Ljava.lang.String;\u003c/code\u003e\".\n\n@param classLoader the class loader to use to load the class\n@param className the class name\n@param initialize whether the class must be initialized\n@return the class represented by \u003ccode\u003eclassName\u003c/code\u003e using the \u003ccode\u003eclassLoader\u003c/code\u003e\n@throws ClassNotFoundException if the class is not found\n"
    }
  }
}