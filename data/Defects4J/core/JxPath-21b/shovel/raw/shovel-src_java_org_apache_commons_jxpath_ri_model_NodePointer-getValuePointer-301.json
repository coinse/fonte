{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodePointer.java",
  "functionName": "getValuePointer",
  "functionId": "getValuePointer",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
  "functionAnnotation": "",
  "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override\n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n\n@return NodePointer\n",
  "functionStartLine": 301,
  "functionEndLine": 304,
  "numCommitsSeen": 50,
  "timeTaken": 2139,
  "changeHistory": [
    "f53ab17b8d57ea6de8008952ceeebef312e4d34d",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "34b7a47ae949c763178a457582a5df2cb564f53d"
  ],
  "changeHistoryShort": {
    "f53ab17b8d57ea6de8008952ceeebef312e4d34d": "Ydocchange",
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ydocchange",
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2": "Ydocchange",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": "Ymultichange(Ybodychange,Ydocchange)",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Ymultichange(Yfilerename,Ybodychange,Ydocchange)",
    "34b7a47ae949c763178a457582a5df2cb564f53d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f53ab17b8d57ea6de8008952ceeebef312e4d34d": {
      "type": "Ydocchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@618011 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/3/08, 8:08 AM",
      "commitName": "f53ab17b8d57ea6de8008952ceeebef312e4d34d",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/2/08, 1:31 PM",
      "commitNameOld": "2aa453ad768d42b6aecfd27fdd1ecfbc17d4192b",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public NodePointer getValuePointer() {\n    NodePointer ivp \u003d getImmediateValuePointer();\n    return ivp \u003d\u003d this ? this : ivp.getValuePointer();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
      "functionStartLine": 295,
      "functionName": "getValuePointer",
      "functionAnnotation": "",
      "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override\n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n\n@return NodePointer\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override\n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n",
        "newValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override\n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n\n@return NodePointer\n"
      }
    },
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ydocchange",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "12/5/07, 2:48 PM",
      "commitNameOld": "d8ce20b6feb4a75ba74a9ded1bfbbac83399884f",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 11.36,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "public NodePointer getValuePointer() {\n    NodePointer ivp \u003d getImmediateValuePointer();\n    return ivp \u003d\u003d this ? this : ivp.getValuePointer();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
      "functionStartLine": 245,
      "functionName": "getValuePointer",
      "functionAnnotation": "",
      "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override\n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n",
        "newValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override\n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n"
      }
    },
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "public NodePointer getValuePointer() {\n    NodePointer ivp \u003d getImmediateValuePointer();\n    return ivp \u003d\u003d this ? this : ivp.getValuePointer();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
      "functionStartLine": 238,
      "functionName": "getValuePointer",
      "functionAnnotation": "",
      "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n",
      "diff": "@@ -1,7 +1,4 @@\n public NodePointer getValuePointer() {\n     NodePointer ivp \u003d getImmediateValuePointer();\n-    if (ivp !\u003d this) {\n-        return ivp.getValuePointer();\n-    }\n-    return this;\n+    return ivp \u003d\u003d this ? this : ivp.getValuePointer();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/27/02, 5:02 PM",
      "commitNameOld": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 44.19,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public NodePointer getValuePointer() {\n    NodePointer ivp \u003d getImmediateValuePointer();\n    if (ivp !\u003d this) {\n        return ivp.getValuePointer();\n    }\n    return this;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
      "functionStartLine": 258,
      "functionName": "getValuePointer",
      "functionAnnotation": "",
      "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2": {
      "type": "Ydocchange",
      "commitMessage": "Renamed isNode to !isContainer\nCleaned up asPath\nIgnore exceptions during a property iteration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/27/02, 5:02 PM",
      "commitName": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:20 PM",
      "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.99,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public NodePointer getValuePointer() {\n    NodePointer ivp \u003d getImmediateValuePointer();\n    if (ivp !\u003d this) {\n        return ivp.getValuePointer();\n    }\n    return this;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
      "functionStartLine": 254,
      "functionName": "getValuePointer",
      "functionAnnotation": "",
      "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \u003ccode\u003egetValuePointer()\u003c/code\u003e\ndirectly.  Override the \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e \nmethod instead.  The \u003ccode\u003egetValuePointer()\u003c/code\u003e method is\ncalls \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a \ncontainer within a container within a container.\nThe \u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all \nthose containers and return the pointer to the ultimate contents.\nIt does so with the above recursion.\n",
        "newValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \n\u003ccode\u003egetValuePointer()\u003c/code\u003e directly.  Override the\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e method instead.  The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method is calls\n\u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a\ncontainer within a container within a container. The\n\u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all those\ncontainers and return the pointer to the ultimate contents. It does so\nwith the above recursion.\n"
      }
    },
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Organized imports, formatted code\nFixed problems with getValue() and getNode()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:20 PM",
      "commitName": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Organized imports, formatted code\nFixed problems with getValue() and getNode()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136826 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/25/02, 5:20 PM",
          "commitName": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/19/02, 8:47 PM",
          "commitNameOld": "074cc8809cf0884f38bb22622d81209778a02b32",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 36.9,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public NodePointer getValuePointer() {\n    NodePointer ivp \u003d getImmediateValuePointer();\n    if (ivp !\u003d this) {\n        return ivp.getValuePointer();\n    }\n    return this;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
          "functionStartLine": 247,
          "functionName": "getValuePointer",
          "functionAnnotation": "",
          "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \u003ccode\u003egetValuePointer()\u003c/code\u003e\ndirectly.  Override the \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e \nmethod instead.  The \u003ccode\u003egetValuePointer()\u003c/code\u003e method is\ncalls \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a \ncontainer within a container within a container.\nThe \u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all \nthose containers and return the pointer to the ultimate contents.\nIt does so with the above recursion.\n",
          "diff": "@@ -1,3 +1,7 @@\n public NodePointer getValuePointer() {\n+    NodePointer ivp \u003d getImmediateValuePointer();\n+    if (ivp !\u003d this) {\n+        return ivp.getValuePointer();\n+    }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Organized imports, formatted code\nFixed problems with getValue() and getNode()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136826 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/25/02, 5:20 PM",
          "commitName": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/19/02, 8:47 PM",
          "commitNameOld": "074cc8809cf0884f38bb22622d81209778a02b32",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 36.9,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public NodePointer getValuePointer() {\n    NodePointer ivp \u003d getImmediateValuePointer();\n    if (ivp !\u003d this) {\n        return ivp.getValuePointer();\n    }\n    return this;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
          "functionStartLine": 247,
          "functionName": "getValuePointer",
          "functionAnnotation": "",
          "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \u003ccode\u003egetValuePointer()\u003c/code\u003e\ndirectly.  Override the \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e \nmethod instead.  The \u003ccode\u003egetValuePointer()\u003c/code\u003e method is\ncalls \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a \ncontainer within a container within a container.\nThe \u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all \nthose containers and return the pointer to the ultimate contents.\nIt does so with the above recursion.\n",
          "diff": "@@ -1,3 +1,7 @@\n public NodePointer getValuePointer() {\n+    NodePointer ivp \u003d getImmediateValuePointer();\n+    if (ivp !\u003d this) {\n+        return ivp.getValuePointer();\n+    }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\n",
            "newValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\nNote that you probably don\u0027t want to override \u003ccode\u003egetValuePointer()\u003c/code\u003e\ndirectly.  Override the \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e \nmethod instead.  The \u003ccode\u003egetValuePointer()\u003c/code\u003e method is\ncalls \u003ccode\u003egetImmediateValuePointer()\u003c/code\u003e and, if the result is not\n\u003ccode\u003ethis\u003c/code\u003e, invokes \u003ccode\u003egetValuePointer()\u003c/code\u003e recursively.\nThe idea here is to open all nested containers. Let\u0027s say we have a \ncontainer within a container within a container.\nThe \u003ccode\u003egetValuePointer()\u003c/code\u003e method should then open all \nthose containers and return the pointer to the ultimate contents.\nIt does so with the above recursion.\n"
          }
        }
      ]
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Ydocchange)",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public NodePointer getValuePointer() {\n    return this;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
          "functionStartLine": 211,
          "functionName": "getValuePointer",
          "functionAnnotation": "",
          "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\n",
          "diff": "@@ -1,6 +1,3 @@\n public NodePointer getValuePointer() {\n-    if (this instanceof PropertyOwnerPointer) {\n-        return this;\n-    }\n-    return null;\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/pointers/NodePointer.java",
            "newPath": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public NodePointer getValuePointer() {\n    return this;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
          "functionStartLine": 211,
          "functionName": "getValuePointer",
          "functionAnnotation": "",
          "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\n",
          "diff": "@@ -1,6 +1,3 @@\n public NodePointer getValuePointer() {\n-    if (this instanceof PropertyOwnerPointer) {\n-        return this;\n-    }\n-    return null;\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public NodePointer getValuePointer() {\n    return this;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/NodePointer.java",
          "functionStartLine": 211,
          "functionName": "getValuePointer",
          "functionAnnotation": "",
          "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\n",
          "diff": "@@ -1,6 +1,3 @@\n public NodePointer getValuePointer() {\n-    if (this instanceof PropertyOwnerPointer) {\n-        return this;\n-    }\n-    return null;\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the ponter to the contents.\n",
            "newValue": "If this pointer manages a transparent container, like a variable,\nthis method returns the pointer to the contents.\nOnly an auxiliary (non-node) pointer can (and should) return a\nvalue pointer other than itself.\n"
          }
        }
      ]
    },
    "34b7a47ae949c763178a457582a5df2cb564f53d": {
      "type": "Yintroduced",
      "commitMessage": "Multiple changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/9/02, 8:40 PM",
      "commitName": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,6 @@\n+public NodePointer getValuePointer() {\n+    if (this instanceof PropertyOwnerPointer) {\n+        return this;\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public NodePointer getValuePointer() {\n    if (this instanceof PropertyOwnerPointer) {\n        return this;\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/pointers/NodePointer.java",
      "functionStartLine": 245,
      "functionName": "getValuePointer",
      "functionAnnotation": "",
      "functionDoc": "If this pointer manages a transparent container, like a variable,\nthis method returns the ponter to the contents.\n"
    }
  }
}