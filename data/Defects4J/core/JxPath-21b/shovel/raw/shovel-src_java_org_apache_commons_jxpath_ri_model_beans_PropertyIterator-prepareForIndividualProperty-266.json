{
  "origin": "codeshovel",
  "repositoryName": "JxPath-21b",
  "repositoryPath": "/tmp/JxPath-21b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PropertyIterator.java",
  "functionName": "prepareForIndividualProperty",
  "functionId": "prepareForIndividualProperty___name-String",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
  "functionAnnotation": "",
  "functionDoc": "Prepare for an individual property.\n\n@param name property name\n",
  "functionStartLine": 266,
  "functionEndLine": 309,
  "numCommitsSeen": 28,
  "timeTaken": 890,
  "changeHistory": [
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "207c6dd98407506ff367d072be25b56f37989215",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": "Ymultichange(Ydocchange,Yformatchange)",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Ymultichange(Yfilerename,Ybodychange)",
    "207c6dd98407506ff367d072be25b56f37989215": "Ymultichange(Yfilerename,Ybodychange)",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21f932ed07fe75a5ca053ee1418b2db6cb99dc05": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/07, 11:29 PM",
      "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
      "commitAuthor": "Matthew Jason Benson",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/16/07, 11:29 PM",
          "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "2/19/07, 3:24 PM",
          "commitNameOld": "30e4fdde61866403ce8912dfb8afe328502c4d20",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 300.34,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void prepareForIndividualProperty(String name) {\n    targetReady \u003d true;\n    empty \u003d true;\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 275,
          "functionName": "prepareForIndividualProperty",
          "functionAnnotation": "",
          "functionDoc": "Prepare for an individual property.\n\n@param name property name\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Prepare for an individual property.\n\n@param name property name\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@604783 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/16/07, 11:29 PM",
          "commitName": "21f932ed07fe75a5ca053ee1418b2db6cb99dc05",
          "commitAuthor": "Matthew Jason Benson",
          "commitDateOld": "2/19/07, 3:24 PM",
          "commitNameOld": "30e4fdde61866403ce8912dfb8afe328502c4d20",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 300.34,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void prepareForIndividualProperty(String name) {\n    targetReady \u003d true;\n    empty \u003d true;\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 275,
          "functionName": "prepareForIndividualProperty",
          "functionAnnotation": "",
          "functionDoc": "Prepare for an individual property.\n\n@param name property name\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/27/02, 5:02 PM",
      "commitNameOld": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 44.19,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void prepareForIndividualProperty(String name) {\n    targetReady \u003d true;\n    empty \u003d true;\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
      "functionStartLine": 277,
      "functionName": "prepareForIndividualProperty",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Renamed isNode to !isContainer\nCleaned up asPath\nIgnore exceptions during a property iteration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/27/02, 5:02 PM",
      "commitName": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Renamed isNode to !isContainer\nCleaned up asPath\nIgnore exceptions during a property iteration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136829 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/27/02, 5:02 PM",
          "commitName": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/12/02, 2:02 PM",
          "commitNameOld": "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void prepareForIndividualProperty(String name) {\n    targetReady \u003d true;\n    empty \u003d true;\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 272,
          "functionName": "prepareForIndividualProperty",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,42 @@\n-private void prepare() {\n+protected void prepareForIndividualProperty(String name) {\n     targetReady \u003d true;\n     empty \u003d true;\n-    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n-        propertyNodePointer.setPropertyName(name);\n-    }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "prepare",
            "newValue": "prepareForIndividualProperty"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Renamed isNode to !isContainer\nCleaned up asPath\nIgnore exceptions during a property iteration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136829 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/27/02, 5:02 PM",
          "commitName": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/12/02, 2:02 PM",
          "commitNameOld": "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void prepareForIndividualProperty(String name) {\n    targetReady \u003d true;\n    empty \u003d true;\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 272,
          "functionName": "prepareForIndividualProperty",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,42 @@\n-private void prepare() {\n+protected void prepareForIndividualProperty(String name) {\n     targetReady \u003d true;\n     empty \u003d true;\n-    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n-        propertyNodePointer.setPropertyName(name);\n-    }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[name-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Renamed isNode to !isContainer\nCleaned up asPath\nIgnore exceptions during a property iteration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136829 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/27/02, 5:02 PM",
          "commitName": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/12/02, 2:02 PM",
          "commitNameOld": "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void prepareForIndividualProperty(String name) {\n    targetReady \u003d true;\n    empty \u003d true;\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 272,
          "functionName": "prepareForIndividualProperty",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,42 @@\n-private void prepare() {\n+protected void prepareForIndividualProperty(String name) {\n     targetReady \u003d true;\n     empty \u003d true;\n-    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n-        propertyNodePointer.setPropertyName(name);\n-    }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed isNode to !isContainer\nCleaned up asPath\nIgnore exceptions during a property iteration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136829 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/27/02, 5:02 PM",
          "commitName": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/12/02, 2:02 PM",
          "commitNameOld": "76ebe95238b7f12374429bc81e7aa3e6abe9a8a4",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.17,
          "commitsBetweenForRepo": 20,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void prepareForIndividualProperty(String name) {\n    targetReady \u003d true;\n    empty \u003d true;\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 272,
          "functionName": "prepareForIndividualProperty",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,42 @@\n-private void prepare() {\n+protected void prepareForIndividualProperty(String name) {\n     targetReady \u003d true;\n     empty \u003d true;\n-    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n-        propertyNodePointer.setPropertyName(name);\n-    }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n         if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n         if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268": {
      "type": "Ybodychange",
      "commitMessage": "Documentation clean-up and removal of deprecated methods\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/15/02, 8:22 PM",
      "commitName": "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/25/02, 8:28 PM",
      "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 51.0,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "private void prepare() {\n    targetReady \u003d true;\n    empty \u003d true;\n    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n        propertyNodePointer.setPropertyName(name);\n    }\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
      "functionStartLine": 263,
      "functionName": "prepare",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void prepare() {\n    targetReady \u003d true;\n    empty \u003d true;\n    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n        propertyNodePointer.setPropertyName(name);\n    }\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 262,
          "functionName": "prepare",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,47 +1,45 @@\n private void prepare() {\n     targetReady \u003d true;\n     empty \u003d true;\n     if (propertyNodePointer instanceof DynamicPropertyPointer) {\n         propertyNodePointer.setPropertyName(name);\n     }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n-        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n+        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n-        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n+        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n-        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n+        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n-        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n+        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyIterator.java",
            "newPath": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/21/02, 2:52 PM",
          "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/11/02, 7:28 PM",
          "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 9.81,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void prepare() {\n    targetReady \u003d true;\n    empty \u003d true;\n    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n        propertyNodePointer.setPropertyName(name);\n    }\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/beans/PropertyIterator.java",
          "functionStartLine": 262,
          "functionName": "prepare",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,47 +1,45 @@\n private void prepare() {\n     targetReady \u003d true;\n     empty \u003d true;\n     if (propertyNodePointer instanceof DynamicPropertyPointer) {\n         propertyNodePointer.setPropertyName(name);\n     }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n-        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n+        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n-        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n+        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n-        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n+        if (startPropertyIndex \u003d\u003d PropertyPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n-        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n+        if (startIndex \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "207c6dd98407506ff367d072be25b56f37989215": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/01, 6:22 PM",
      "commitName": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 8:38 PM",
          "commitNameOld": "ec798e97745ee2c294d374b873308065948dded4",
          "commitAuthorOld": "Craig R. McClanahan",
          "daysBetweenCommits": 10.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void prepare() {\n    targetReady \u003d true;\n    empty \u003d true;\n    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n        propertyNodePointer.setPropertyName(name);\n    }\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyIterator.java",
          "functionStartLine": 260,
          "functionName": "prepare",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,47 +1,47 @@\n private void prepare() {\n     targetReady \u003d true;\n     empty \u003d true;\n     if (propertyNodePointer instanceof DynamicPropertyPointer) {\n         propertyNodePointer.setPropertyName(name);\n     }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n         int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n+        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n         if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n         int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n+        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n         if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/axes/PropertyIterator.java",
            "newPath": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyIterator.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 8:38 PM",
          "commitNameOld": "ec798e97745ee2c294d374b873308065948dded4",
          "commitAuthorOld": "Craig R. McClanahan",
          "daysBetweenCommits": 10.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void prepare() {\n    targetReady \u003d true;\n    empty \u003d true;\n    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n        propertyNodePointer.setPropertyName(name);\n    }\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d 0;\n        }\n        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyIterator.java",
          "functionStartLine": 260,
          "functionName": "prepare",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,47 +1,47 @@\n private void prepare() {\n     targetReady \u003d true;\n     empty \u003d true;\n     if (propertyNodePointer instanceof DynamicPropertyPointer) {\n         propertyNodePointer.setPropertyName(name);\n     }\n     String[] names \u003d propertyNodePointer.getPropertyNames();\n     if (!reverse) {\n         int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n+        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d 0;\n         }\n         if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d 0;\n         }\n         for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d 0;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     } else {\n         int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n-        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n+        if (startPropertyIndex \u003d\u003d PropertyOwnerPointer.UNSPECIFIED_PROPERTY) {\n             startPropertyIndex \u003d names.length - 1;\n         }\n         if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n             startIndex \u003d -1;\n         }\n         for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n             if (names[i].equals(name)) {\n                 propertyNodePointer.setPropertyIndex(i);\n                 if (i !\u003d startPropertyIndex) {\n                     startIndex \u003d -1;\n                     includeStart \u003d true;\n                 }\n                 empty \u003d false;\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,47 @@\n+private void prepare() {\n+    targetReady \u003d true;\n+    empty \u003d true;\n+    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n+        propertyNodePointer.setPropertyName(name);\n+    }\n+    String[] names \u003d propertyNodePointer.getPropertyNames();\n+    if (!reverse) {\n+        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n+        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n+            startPropertyIndex \u003d 0;\n+        }\n+        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n+            startIndex \u003d 0;\n+        }\n+        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n+            if (names[i].equals(name)) {\n+                propertyNodePointer.setPropertyIndex(i);\n+                if (i !\u003d startPropertyIndex) {\n+                    startIndex \u003d 0;\n+                    includeStart \u003d true;\n+                }\n+                empty \u003d false;\n+                break;\n+            }\n+        }\n+    } else {\n+        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n+        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n+            startPropertyIndex \u003d names.length - 1;\n+        }\n+        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n+            startIndex \u003d -1;\n+        }\n+        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n+            if (names[i].equals(name)) {\n+                propertyNodePointer.setPropertyIndex(i);\n+                if (i !\u003d startPropertyIndex) {\n+                    startIndex \u003d -1;\n+                    includeStart \u003d true;\n+                }\n+                empty \u003d false;\n+                break;\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void prepare() {\n    targetReady \u003d true;\n    empty \u003d true;\n    if (propertyNodePointer instanceof DynamicPropertyPointer) {\n        propertyNodePointer.setPropertyName(name);\n    }\n    String[] names \u003d propertyNodePointer.getPropertyNames();\n    if (!reverse) {\n        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n            startPropertyIndex \u003d 0;\n        }\n        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d 0;\n        }\n        for (int i \u003d startPropertyIndex; i \u003c names.length; i++) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d 0;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    } else {\n        int startPropertyIndex \u003d propertyNodePointer.getPropertyIndex();\n        if (startPropertyIndex \u003d\u003d NodePointer.UNSPECIFIED) {\n            startPropertyIndex \u003d names.length - 1;\n        }\n        if (propertyNodePointer.getIndex() \u003d\u003d NodePointer.WHOLE_COLLECTION) {\n            startIndex \u003d -1;\n        }\n        for (int i \u003d startPropertyIndex; i \u003e\u003d 0; i--) {\n            if (names[i].equals(name)) {\n                propertyNodePointer.setPropertyIndex(i);\n                if (i !\u003d startPropertyIndex) {\n                    startIndex \u003d -1;\n                    includeStart \u003d true;\n                }\n                empty \u003d false;\n                break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/PropertyIterator.java",
      "functionStartLine": 275,
      "functionName": "prepare",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}