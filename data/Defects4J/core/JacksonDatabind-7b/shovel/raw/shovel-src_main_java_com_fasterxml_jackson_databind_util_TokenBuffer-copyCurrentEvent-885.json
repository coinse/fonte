{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TokenBuffer.java",
  "functionName": "copyCurrentEvent",
  "functionId": "copyCurrentEvent___jp-JsonParser",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 885,
  "functionEndLine": 952,
  "numCommitsSeen": 34,
  "timeTaken": 3552,
  "changeHistory": [
    "bc38763d9ce4058b8354fbe8e6476d3affa74946",
    "5fa08ecd5a7be950aa36cf8bd98fe83a5c699a9e",
    "767ecb29a5a79f799113d13eb137389ff5a4c2c5",
    "a342c0eef8c4abc3eba5568c52af73e59e1b6c17"
  ],
  "changeHistoryShort": {
    "bc38763d9ce4058b8354fbe8e6476d3affa74946": "Ybodychange",
    "5fa08ecd5a7be950aa36cf8bd98fe83a5c699a9e": "Ybodychange",
    "767ecb29a5a79f799113d13eb137389ff5a4c2c5": "Ybodychange",
    "a342c0eef8c4abc3eba5568c52af73e59e1b6c17": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bc38763d9ce4058b8354fbe8e6476d3affa74946": {
      "type": "Ybodychange",
      "commitMessage": "Implemented #277\n",
      "commitDate": "8/10/13, 9:37 AM",
      "commitName": "bc38763d9ce4058b8354fbe8e6476d3affa74946",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/7/13, 7:21 PM",
      "commitNameOld": "f6315d8e540ec5665dfa0cd2ba52920ff69c8ef3",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n    if (_mayHaveNativeIds) {\n        _checkNativeIds(jp);\n    }\n    switch(jp.getCurrentToken()) {\n        case START_OBJECT:\n            writeStartObject();\n            break;\n        case END_OBJECT:\n            writeEndObject();\n            break;\n        case START_ARRAY:\n            writeStartArray();\n            break;\n        case END_ARRAY:\n            writeEndArray();\n            break;\n        case FIELD_NAME:\n            writeFieldName(jp.getCurrentName());\n            break;\n        case VALUE_STRING:\n            if (jp.hasTextCharacters()) {\n                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n            } else {\n                writeString(jp.getText());\n            }\n            break;\n        case VALUE_NUMBER_INT:\n            switch(jp.getNumberType()) {\n                case INT:\n                    writeNumber(jp.getIntValue());\n                    break;\n                case BIG_INTEGER:\n                    writeNumber(jp.getBigIntegerValue());\n                    break;\n                default:\n                    writeNumber(jp.getLongValue());\n            }\n            break;\n        case VALUE_NUMBER_FLOAT:\n            switch(jp.getNumberType()) {\n                case BIG_DECIMAL:\n                    writeNumber(jp.getDecimalValue());\n                    break;\n                case FLOAT:\n                    writeNumber(jp.getFloatValue());\n                    break;\n                default:\n                    writeNumber(jp.getDoubleValue());\n            }\n            break;\n        case VALUE_TRUE:\n            writeBoolean(true);\n            break;\n        case VALUE_FALSE:\n            writeBoolean(false);\n            break;\n        case VALUE_NULL:\n            writeNull();\n            break;\n        case VALUE_EMBEDDED_OBJECT:\n            writeObject(jp.getEmbeddedObject());\n            break;\n        default:\n            throw new RuntimeException(\"Internal error: should never end up through this code path\");\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
      "functionStartLine": 851,
      "functionName": "copyCurrentEvent",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,71 +1,68 @@\n @Override\n public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n-    if (_hasNativeTypeIds) {\n-        _copyTypeId(jp);\n-    }\n-    if (_hasNativeObjectIds) {\n-        _copyObjectId(jp);\n+    if (_mayHaveNativeIds) {\n+        _checkNativeIds(jp);\n     }\n     switch(jp.getCurrentToken()) {\n         case START_OBJECT:\n             writeStartObject();\n             break;\n         case END_OBJECT:\n             writeEndObject();\n             break;\n         case START_ARRAY:\n             writeStartArray();\n             break;\n         case END_ARRAY:\n             writeEndArray();\n             break;\n         case FIELD_NAME:\n             writeFieldName(jp.getCurrentName());\n             break;\n         case VALUE_STRING:\n             if (jp.hasTextCharacters()) {\n                 writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n             } else {\n                 writeString(jp.getText());\n             }\n             break;\n         case VALUE_NUMBER_INT:\n             switch(jp.getNumberType()) {\n                 case INT:\n                     writeNumber(jp.getIntValue());\n                     break;\n                 case BIG_INTEGER:\n                     writeNumber(jp.getBigIntegerValue());\n                     break;\n                 default:\n                     writeNumber(jp.getLongValue());\n             }\n             break;\n         case VALUE_NUMBER_FLOAT:\n             switch(jp.getNumberType()) {\n                 case BIG_DECIMAL:\n                     writeNumber(jp.getDecimalValue());\n                     break;\n                 case FLOAT:\n                     writeNumber(jp.getFloatValue());\n                     break;\n                 default:\n                     writeNumber(jp.getDoubleValue());\n             }\n             break;\n         case VALUE_TRUE:\n             writeBoolean(true);\n             break;\n         case VALUE_FALSE:\n             writeBoolean(false);\n             break;\n         case VALUE_NULL:\n             writeNull();\n             break;\n         case VALUE_EMBEDDED_OBJECT:\n             writeObject(jp.getEmbeddedObject());\n             break;\n         default:\n             throw new RuntimeException(\"Internal error: should never end up through this code path\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fa08ecd5a7be950aa36cf8bd98fe83a5c699a9e": {
      "type": "Ybodychange",
      "commitMessage": "Change to work with \u0027untyped\u0027 type/object ids\n",
      "commitDate": "8/5/13, 6:55 PM",
      "commitName": "5fa08ecd5a7be950aa36cf8bd98fe83a5c699a9e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/4/13, 5:24 PM",
      "commitNameOld": "c35736f43cfe0a7d2e5c0d3939a96b978e25876e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n    if (_hasNativeTypeIds) {\n        _copyTypeId(jp);\n    }\n    if (_hasNativeObjectIds) {\n        _copyObjectId(jp);\n    }\n    switch(jp.getCurrentToken()) {\n        case START_OBJECT:\n            writeStartObject();\n            break;\n        case END_OBJECT:\n            writeEndObject();\n            break;\n        case START_ARRAY:\n            writeStartArray();\n            break;\n        case END_ARRAY:\n            writeEndArray();\n            break;\n        case FIELD_NAME:\n            writeFieldName(jp.getCurrentName());\n            break;\n        case VALUE_STRING:\n            if (jp.hasTextCharacters()) {\n                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n            } else {\n                writeString(jp.getText());\n            }\n            break;\n        case VALUE_NUMBER_INT:\n            switch(jp.getNumberType()) {\n                case INT:\n                    writeNumber(jp.getIntValue());\n                    break;\n                case BIG_INTEGER:\n                    writeNumber(jp.getBigIntegerValue());\n                    break;\n                default:\n                    writeNumber(jp.getLongValue());\n            }\n            break;\n        case VALUE_NUMBER_FLOAT:\n            switch(jp.getNumberType()) {\n                case BIG_DECIMAL:\n                    writeNumber(jp.getDecimalValue());\n                    break;\n                case FLOAT:\n                    writeNumber(jp.getFloatValue());\n                    break;\n                default:\n                    writeNumber(jp.getDoubleValue());\n            }\n            break;\n        case VALUE_TRUE:\n            writeBoolean(true);\n            break;\n        case VALUE_FALSE:\n            writeBoolean(false);\n            break;\n        case VALUE_NULL:\n            writeNull();\n            break;\n        case VALUE_EMBEDDED_OBJECT:\n            writeObject(jp.getEmbeddedObject());\n            break;\n        default:\n            throw new RuntimeException(\"Internal error: should never end up through this code path\");\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
      "functionStartLine": 764,
      "functionName": "copyCurrentEvent",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,71 +1,71 @@\n @Override\n public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n     if (_hasNativeTypeIds) {\n         _copyTypeId(jp);\n     }\n+    if (_hasNativeObjectIds) {\n+        _copyObjectId(jp);\n+    }\n     switch(jp.getCurrentToken()) {\n         case START_OBJECT:\n             writeStartObject();\n             break;\n         case END_OBJECT:\n             writeEndObject();\n             break;\n         case START_ARRAY:\n             writeStartArray();\n             break;\n         case END_ARRAY:\n             writeEndArray();\n             break;\n         case FIELD_NAME:\n             writeFieldName(jp.getCurrentName());\n             break;\n         case VALUE_STRING:\n             if (jp.hasTextCharacters()) {\n                 writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n             } else {\n                 writeString(jp.getText());\n             }\n             break;\n         case VALUE_NUMBER_INT:\n             switch(jp.getNumberType()) {\n                 case INT:\n                     writeNumber(jp.getIntValue());\n                     break;\n                 case BIG_INTEGER:\n                     writeNumber(jp.getBigIntegerValue());\n                     break;\n                 default:\n                     writeNumber(jp.getLongValue());\n             }\n             break;\n         case VALUE_NUMBER_FLOAT:\n             switch(jp.getNumberType()) {\n                 case BIG_DECIMAL:\n                     writeNumber(jp.getDecimalValue());\n                     break;\n                 case FLOAT:\n                     writeNumber(jp.getFloatValue());\n                     break;\n                 default:\n                     writeNumber(jp.getDoubleValue());\n             }\n             break;\n         case VALUE_TRUE:\n             writeBoolean(true);\n             break;\n         case VALUE_FALSE:\n             writeBoolean(false);\n             break;\n         case VALUE_NULL:\n             writeNull();\n             break;\n         case VALUE_EMBEDDED_OBJECT:\n-            if (_hasNativeTypeIds) {\n-                _copyTypeId(jp);\n-            }\n             writeObject(jp.getEmbeddedObject());\n             break;\n         default:\n             throw new RuntimeException(\"Internal error: should never end up through this code path\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "767ecb29a5a79f799113d13eb137389ff5a4c2c5": {
      "type": "Ybodychange",
      "commitMessage": "Try to add support for retaining type ids via TokenBuffer\n",
      "commitDate": "8/4/13, 5:17 PM",
      "commitName": "767ecb29a5a79f799113d13eb137389ff5a4c2c5",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 10:12 PM",
      "commitNameOld": "a455b53c75d4649461ba3e7fdcc625f2cd223202",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 9.8,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n    if (_hasNativeTypeIds) {\n        _copyTypeId(jp);\n    }\n    switch(jp.getCurrentToken()) {\n        case START_OBJECT:\n            writeStartObject();\n            break;\n        case END_OBJECT:\n            writeEndObject();\n            break;\n        case START_ARRAY:\n            writeStartArray();\n            break;\n        case END_ARRAY:\n            writeEndArray();\n            break;\n        case FIELD_NAME:\n            writeFieldName(jp.getCurrentName());\n            break;\n        case VALUE_STRING:\n            if (jp.hasTextCharacters()) {\n                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n            } else {\n                writeString(jp.getText());\n            }\n            break;\n        case VALUE_NUMBER_INT:\n            switch(jp.getNumberType()) {\n                case INT:\n                    writeNumber(jp.getIntValue());\n                    break;\n                case BIG_INTEGER:\n                    writeNumber(jp.getBigIntegerValue());\n                    break;\n                default:\n                    writeNumber(jp.getLongValue());\n            }\n            break;\n        case VALUE_NUMBER_FLOAT:\n            switch(jp.getNumberType()) {\n                case BIG_DECIMAL:\n                    writeNumber(jp.getDecimalValue());\n                    break;\n                case FLOAT:\n                    writeNumber(jp.getFloatValue());\n                    break;\n                default:\n                    writeNumber(jp.getDoubleValue());\n            }\n            break;\n        case VALUE_TRUE:\n            writeBoolean(true);\n            break;\n        case VALUE_FALSE:\n            writeBoolean(false);\n            break;\n        case VALUE_NULL:\n            writeNull();\n            break;\n        case VALUE_EMBEDDED_OBJECT:\n            if (_hasNativeTypeIds) {\n                _copyTypeId(jp);\n            }\n            writeObject(jp.getEmbeddedObject());\n            break;\n        default:\n            throw new RuntimeException(\"Internal error: should never end up through this code path\");\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
      "functionStartLine": 718,
      "functionName": "copyCurrentEvent",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,65 +1,71 @@\n @Override\n public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n+    if (_hasNativeTypeIds) {\n+        _copyTypeId(jp);\n+    }\n     switch(jp.getCurrentToken()) {\n         case START_OBJECT:\n             writeStartObject();\n             break;\n         case END_OBJECT:\n             writeEndObject();\n             break;\n         case START_ARRAY:\n             writeStartArray();\n             break;\n         case END_ARRAY:\n             writeEndArray();\n             break;\n         case FIELD_NAME:\n             writeFieldName(jp.getCurrentName());\n             break;\n         case VALUE_STRING:\n             if (jp.hasTextCharacters()) {\n                 writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n             } else {\n                 writeString(jp.getText());\n             }\n             break;\n         case VALUE_NUMBER_INT:\n             switch(jp.getNumberType()) {\n                 case INT:\n                     writeNumber(jp.getIntValue());\n                     break;\n                 case BIG_INTEGER:\n                     writeNumber(jp.getBigIntegerValue());\n                     break;\n                 default:\n                     writeNumber(jp.getLongValue());\n             }\n             break;\n         case VALUE_NUMBER_FLOAT:\n             switch(jp.getNumberType()) {\n                 case BIG_DECIMAL:\n                     writeNumber(jp.getDecimalValue());\n                     break;\n                 case FLOAT:\n                     writeNumber(jp.getFloatValue());\n                     break;\n                 default:\n                     writeNumber(jp.getDoubleValue());\n             }\n             break;\n         case VALUE_TRUE:\n             writeBoolean(true);\n             break;\n         case VALUE_FALSE:\n             writeBoolean(false);\n             break;\n         case VALUE_NULL:\n             writeNull();\n             break;\n         case VALUE_EMBEDDED_OBJECT:\n+            if (_hasNativeTypeIds) {\n+                _copyTypeId(jp);\n+            }\n             writeObject(jp.getEmbeddedObject());\n             break;\n         default:\n             throw new RuntimeException(\"Internal error: should never end up through this code path\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a342c0eef8c4abc3eba5568c52af73e59e1b6c17": {
      "type": "Yintroduced",
      "commitMessage": "Yet more clean up\n",
      "commitDate": "12/23/11, 8:38 AM",
      "commitName": "a342c0eef8c4abc3eba5568c52af73e59e1b6c17",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,65 @@\n+@Override\n+public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n+    switch(jp.getCurrentToken()) {\n+        case START_OBJECT:\n+            writeStartObject();\n+            break;\n+        case END_OBJECT:\n+            writeEndObject();\n+            break;\n+        case START_ARRAY:\n+            writeStartArray();\n+            break;\n+        case END_ARRAY:\n+            writeEndArray();\n+            break;\n+        case FIELD_NAME:\n+            writeFieldName(jp.getCurrentName());\n+            break;\n+        case VALUE_STRING:\n+            if (jp.hasTextCharacters()) {\n+                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n+            } else {\n+                writeString(jp.getText());\n+            }\n+            break;\n+        case VALUE_NUMBER_INT:\n+            switch(jp.getNumberType()) {\n+                case INT:\n+                    writeNumber(jp.getIntValue());\n+                    break;\n+                case BIG_INTEGER:\n+                    writeNumber(jp.getBigIntegerValue());\n+                    break;\n+                default:\n+                    writeNumber(jp.getLongValue());\n+            }\n+            break;\n+        case VALUE_NUMBER_FLOAT:\n+            switch(jp.getNumberType()) {\n+                case BIG_DECIMAL:\n+                    writeNumber(jp.getDecimalValue());\n+                    break;\n+                case FLOAT:\n+                    writeNumber(jp.getFloatValue());\n+                    break;\n+                default:\n+                    writeNumber(jp.getDoubleValue());\n+            }\n+            break;\n+        case VALUE_TRUE:\n+            writeBoolean(true);\n+            break;\n+        case VALUE_FALSE:\n+            writeBoolean(false);\n+            break;\n+        case VALUE_NULL:\n+            writeNull();\n+            break;\n+        case VALUE_EMBEDDED_OBJECT:\n+            writeObject(jp.getEmbeddedObject());\n+            break;\n+        default:\n+            throw new RuntimeException(\"Internal error: should never end up through this code path\");\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n    switch(jp.getCurrentToken()) {\n        case START_OBJECT:\n            writeStartObject();\n            break;\n        case END_OBJECT:\n            writeEndObject();\n            break;\n        case START_ARRAY:\n            writeStartArray();\n            break;\n        case END_ARRAY:\n            writeEndArray();\n            break;\n        case FIELD_NAME:\n            writeFieldName(jp.getCurrentName());\n            break;\n        case VALUE_STRING:\n            if (jp.hasTextCharacters()) {\n                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n            } else {\n                writeString(jp.getText());\n            }\n            break;\n        case VALUE_NUMBER_INT:\n            switch(jp.getNumberType()) {\n                case INT:\n                    writeNumber(jp.getIntValue());\n                    break;\n                case BIG_INTEGER:\n                    writeNumber(jp.getBigIntegerValue());\n                    break;\n                default:\n                    writeNumber(jp.getLongValue());\n            }\n            break;\n        case VALUE_NUMBER_FLOAT:\n            switch(jp.getNumberType()) {\n                case BIG_DECIMAL:\n                    writeNumber(jp.getDecimalValue());\n                    break;\n                case FLOAT:\n                    writeNumber(jp.getFloatValue());\n                    break;\n                default:\n                    writeNumber(jp.getDoubleValue());\n            }\n            break;\n        case VALUE_TRUE:\n            writeBoolean(true);\n            break;\n        case VALUE_FALSE:\n            writeBoolean(false);\n            break;\n        case VALUE_NULL:\n            writeNull();\n            break;\n        case VALUE_EMBEDDED_OBJECT:\n            writeObject(jp.getEmbeddedObject());\n            break;\n        default:\n            throw new RuntimeException(\"Internal error: should never end up through this code path\");\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java",
      "functionStartLine": 626,
      "functionName": "copyCurrentEvent",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}