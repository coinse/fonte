{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "_addDeserializerConstructors",
  "functionId": "_addDeserializerConstructors___ctxt-DeserializationContext__beanDesc-BeanDescription__vchecker-VisibilityChecker__?____intr-AnnotationIntrospector__creators-CreatorCollector",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 367,
  "functionEndLine": 467,
  "numCommitsSeen": 149,
  "timeTaken": 7898,
  "changeHistory": [
    "be05bb58d84b7d33c230ff838db842f5e4f96144",
    "1fd4d1f4b4e85deafccd62c5ee5574b3935bff69",
    "41484009964b69f81c91defe22b970f8f2dc5cd5",
    "ddb9e39a4924c40d919a6fd04ada1d6f7e11dd4a",
    "b009194c5f68fa4d773723113beeed3ae9308b9d",
    "1488cef12ee88e25dd0161f1b85c552a32775778",
    "32966849408561825efb2893830e856fd4727ecd",
    "970b895f59d5934258b2bac34477a9679477209b",
    "bfec7201df594c07e8b1c38d50e9f1d742dd9366",
    "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd",
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7",
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "be05bb58d84b7d33c230ff838db842f5e4f96144": "Ybodychange",
    "1fd4d1f4b4e85deafccd62c5ee5574b3935bff69": "Ybodychange",
    "41484009964b69f81c91defe22b970f8f2dc5cd5": "Ybodychange",
    "ddb9e39a4924c40d919a6fd04ada1d6f7e11dd4a": "Ybodychange",
    "b009194c5f68fa4d773723113beeed3ae9308b9d": "Yformatchange",
    "1488cef12ee88e25dd0161f1b85c552a32775778": "Ybodychange",
    "32966849408561825efb2893830e856fd4727ecd": "Ybodychange",
    "970b895f59d5934258b2bac34477a9679477209b": "Ybodychange",
    "bfec7201df594c07e8b1c38d50e9f1d742dd9366": "Ybodychange",
    "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd": "Ybodychange",
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7": "Ybodychange",
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25": "Ymultichange(Ymovefromfile,Yformatchange)",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026": "Ybodychange",
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "be05bb58d84b7d33c230ff838db842f5e4f96144": {
      "type": "Ybodychange",
      "commitMessage": "remove accidentally checked in debug stmt\n",
      "commitDate": "6/17/14, 7:01 PM",
      "commitName": "be05bb58d84b7d33c230ff838db842f5e4f96144",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "6/17/14, 6:57 PM",
      "commitNameOld": "1fd4d1f4b4e85deafccd62c5ee5574b3935bff69",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    PropertyName[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                name \u003d _findParamName(param, intr);\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else {\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++namedCount;\n                } else {\n                    if (nonAnnotatedParam \u003d\u003d null) {\n                        nonAnnotatedParam \u003d param;\n                    }\n                }\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 367,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,78 +1,77 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n     PropertyName[] ctorPropNames \u003d null;\n     AnnotatedConstructor propertyCtor \u003d null;\n     for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n         if (propDef.getConstructorParameter() !\u003d null) {\n             AnnotatedParameter param \u003d propDef.getConstructorParameter();\n             AnnotatedWithParams owner \u003d param.getOwner();\n             if (owner instanceof AnnotatedConstructor) {\n                 if (propertyCtor \u003d\u003d null) {\n                     propertyCtor \u003d (AnnotatedConstructor) owner;\n                     ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                 }\n                 ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n             }\n         }\n     }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n-            System.err.println(\"Visible: \" + isVisible + \", \" + ctor);\n             PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             PropertyName name \u003d null;\n             if (ctor \u003d\u003d propertyCtor) {\n                 name \u003d ctorPropNames[i];\n             }\n             if (name \u003d\u003d null) {\n                 name \u003d _findParamName(param, intr);\n             }\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else {\n                 NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                 if (unwrapper !\u003d null) {\n                     properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                     ++namedCount;\n                 } else {\n                     if (nonAnnotatedParam \u003d\u003d null) {\n                         nonAnnotatedParam \u003d param;\n                     }\n                 }\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 creators.addIncompeteParameter(nonAnnotatedParam);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1fd4d1f4b4e85deafccd62c5ee5574b3935bff69": {
      "type": "Ybodychange",
      "commitMessage": "minor fixes to javadoc comments\n",
      "commitDate": "6/17/14, 6:57 PM",
      "commitName": "1fd4d1f4b4e85deafccd62c5ee5574b3935bff69",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/25/14, 6:50 PM",
      "commitNameOld": "30bb911948e729d745f4729bc0fcce8c0d36e1fd",
      "commitAuthorOld": "Aaron Davidson",
      "daysBetweenCommits": 23.01,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    PropertyName[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            System.err.println(\"Visible: \" + isVisible + \", \" + ctor);\n            PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                name \u003d _findParamName(param, intr);\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else {\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++namedCount;\n                } else {\n                    if (nonAnnotatedParam \u003d\u003d null) {\n                        nonAnnotatedParam \u003d param;\n                    }\n                }\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 367,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,77 +1,78 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n     PropertyName[] ctorPropNames \u003d null;\n     AnnotatedConstructor propertyCtor \u003d null;\n     for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n         if (propDef.getConstructorParameter() !\u003d null) {\n             AnnotatedParameter param \u003d propDef.getConstructorParameter();\n             AnnotatedWithParams owner \u003d param.getOwner();\n             if (owner instanceof AnnotatedConstructor) {\n                 if (propertyCtor \u003d\u003d null) {\n                     propertyCtor \u003d (AnnotatedConstructor) owner;\n                     ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                 }\n                 ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n             }\n         }\n     }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n+            System.err.println(\"Visible: \" + isVisible + \", \" + ctor);\n             PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             PropertyName name \u003d null;\n             if (ctor \u003d\u003d propertyCtor) {\n                 name \u003d ctorPropNames[i];\n             }\n             if (name \u003d\u003d null) {\n                 name \u003d _findParamName(param, intr);\n             }\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else {\n                 NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                 if (unwrapper !\u003d null) {\n                     properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                     ++namedCount;\n                 } else {\n                     if (nonAnnotatedParam \u003d\u003d null) {\n                         nonAnnotatedParam \u003d param;\n                     }\n                 }\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 creators.addIncompeteParameter(nonAnnotatedParam);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "41484009964b69f81c91defe22b970f8f2dc5cd5": {
      "type": "Ybodychange",
      "commitMessage": "Minor fixes to parameter name discovery/introspection\n",
      "commitDate": "4/14/14, 10:19 PM",
      "commitName": "41484009964b69f81c91defe22b970f8f2dc5cd5",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/12/14, 12:57 PM",
      "commitNameOld": "ab53ab46d77ca191bdc9e418efd44548ead764fb",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.39,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    PropertyName[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                name \u003d _findParamName(param, intr);\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else {\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++namedCount;\n                } else {\n                    if (nonAnnotatedParam \u003d\u003d null) {\n                        nonAnnotatedParam \u003d param;\n                    }\n                }\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 368,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,77 +1,77 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n     PropertyName[] ctorPropNames \u003d null;\n     AnnotatedConstructor propertyCtor \u003d null;\n     for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n         if (propDef.getConstructorParameter() !\u003d null) {\n             AnnotatedParameter param \u003d propDef.getConstructorParameter();\n             AnnotatedWithParams owner \u003d param.getOwner();\n             if (owner instanceof AnnotatedConstructor) {\n                 if (propertyCtor \u003d\u003d null) {\n                     propertyCtor \u003d (AnnotatedConstructor) owner;\n                     ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                 }\n                 ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n             }\n         }\n     }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             PropertyName name \u003d null;\n             if (ctor \u003d\u003d propertyCtor) {\n                 name \u003d ctorPropNames[i];\n             }\n             if (name \u003d\u003d null) {\n-                name \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n+                name \u003d _findParamName(param, intr);\n             }\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else {\n                 NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                 if (unwrapper !\u003d null) {\n                     properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                     ++namedCount;\n                 } else {\n                     if (nonAnnotatedParam \u003d\u003d null) {\n                         nonAnnotatedParam \u003d param;\n                     }\n                 }\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 creators.addIncompeteParameter(nonAnnotatedParam);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ddb9e39a4924c40d919a6fd04ada1d6f7e11dd4a": {
      "type": "Ybodychange",
      "commitMessage": "Misc refactoring to eventually support #313, filtering of container types.\n",
      "commitDate": "10/21/13, 8:37 PM",
      "commitName": "ddb9e39a4924c40d919a6fd04ada1d6f7e11dd4a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/18/13, 11:52 PM",
      "commitNameOld": "b009194c5f68fa4d773723113beeed3ae9308b9d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    PropertyName[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                name \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else {\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++namedCount;\n                } else {\n                    if (nonAnnotatedParam \u003d\u003d null) {\n                        nonAnnotatedParam \u003d param;\n                    }\n                }\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 368,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "b009194c5f68fa4d773723113beeed3ae9308b9d": {
      "type": "Yformatchange",
      "commitMessage": "Full fix for #318\n",
      "commitDate": "10/18/13, 11:52 PM",
      "commitName": "b009194c5f68fa4d773723113beeed3ae9308b9d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/20/13, 5:33 PM",
      "commitNameOld": "83341f7530d341139e5613455dd7a8893d4f0d68",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 28.26,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    PropertyName[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                name \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else {\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++namedCount;\n                } else {\n                    if (nonAnnotatedParam \u003d\u003d null) {\n                        nonAnnotatedParam \u003d param;\n                    }\n                }\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 368,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "1488cef12ee88e25dd0161f1b85c552a32775778": {
      "type": "Ybodychange",
      "commitMessage": "Completing conversion to using PropertyName instead of String in most parts of API\n",
      "commitDate": "7/26/13, 2:42 PM",
      "commitName": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 10:42 PM",
      "commitNameOld": "fcbbccccff541e3492ebf5425ed5223581f77641",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    PropertyName[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                name \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else {\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++namedCount;\n                } else {\n                    if (nonAnnotatedParam \u003d\u003d null) {\n                        nonAnnotatedParam \u003d param;\n                    }\n                }\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 368,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,78 +1,77 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n-    String[] ctorPropNames \u003d null;\n+    PropertyName[] ctorPropNames \u003d null;\n     AnnotatedConstructor propertyCtor \u003d null;\n     for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n         if (propDef.getConstructorParameter() !\u003d null) {\n             AnnotatedParameter param \u003d propDef.getConstructorParameter();\n             AnnotatedWithParams owner \u003d param.getOwner();\n             if (owner instanceof AnnotatedConstructor) {\n                 if (propertyCtor \u003d\u003d null) {\n                     propertyCtor \u003d (AnnotatedConstructor) owner;\n-                    ctorPropNames \u003d new String[propertyCtor.getParameterCount()];\n+                    ctorPropNames \u003d new PropertyName[propertyCtor.getParameterCount()];\n                 }\n-                ctorPropNames[param.getIndex()] \u003d propDef.getName();\n+                ctorPropNames[param.getIndex()] \u003d propDef.getFullName();\n             }\n         }\n     }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n-            String name \u003d ctor \u003d\u003d propertyCtor ? ctorPropNames[0] : null;\n+            PropertyName name \u003d (ctor \u003d\u003d propertyCtor) ? ctorPropNames[0] : null;\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n-            String name \u003d null;\n+            PropertyName name \u003d null;\n             if (ctor \u003d\u003d propertyCtor) {\n                 name \u003d ctorPropNames[i];\n             }\n             if (name \u003d\u003d null) {\n-                PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n-                name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n+                name \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n             }\n             Object injectId \u003d intr.findInjectableValueId(param);\n-            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n+            if (name !\u003d null \u0026\u0026 name.hasSimpleName()) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else {\n                 NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                 if (unwrapper !\u003d null) {\n                     properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                     ++namedCount;\n                 } else {\n                     if (nonAnnotatedParam \u003d\u003d null) {\n                         nonAnnotatedParam \u003d param;\n                     }\n                 }\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 creators.addIncompeteParameter(nonAnnotatedParam);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "32966849408561825efb2893830e856fd4727ecd": {
      "type": "Ybodychange",
      "commitMessage": "Doing some work to maybe solve #265 eventually\n",
      "commitDate": "7/16/13, 8:46 PM",
      "commitName": "32966849408561825efb2893830e856fd4727ecd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/25/13, 5:02 PM",
      "commitNameOld": "d2ec7c3ddde6baf161c3f4619c6db65e06e9f3b7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 52.16,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    String[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new String[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            String name \u003d ctor \u003d\u003d propertyCtor ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n                name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else {\n                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n                if (unwrapper !\u003d null) {\n                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n                    ++namedCount;\n                } else {\n                    if (nonAnnotatedParam \u003d\u003d null) {\n                        nonAnnotatedParam \u003d param;\n                    }\n                }\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 368,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,70 +1,78 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n     String[] ctorPropNames \u003d null;\n     AnnotatedConstructor propertyCtor \u003d null;\n     for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n         if (propDef.getConstructorParameter() !\u003d null) {\n             AnnotatedParameter param \u003d propDef.getConstructorParameter();\n             AnnotatedWithParams owner \u003d param.getOwner();\n             if (owner instanceof AnnotatedConstructor) {\n                 if (propertyCtor \u003d\u003d null) {\n                     propertyCtor \u003d (AnnotatedConstructor) owner;\n                     ctorPropNames \u003d new String[propertyCtor.getParameterCount()];\n                 }\n                 ctorPropNames[param.getIndex()] \u003d propDef.getName();\n             }\n         }\n     }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             String name \u003d ctor \u003d\u003d propertyCtor ? ctorPropNames[0] : null;\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             String name \u003d null;\n             if (ctor \u003d\u003d propertyCtor) {\n                 name \u003d ctorPropNames[i];\n             }\n             if (name \u003d\u003d null) {\n                 PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n                 name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n             }\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n-            } else if (nonAnnotatedParam \u003d\u003d null) {\n-                nonAnnotatedParam \u003d param;\n+            } else {\n+                NameTransformer unwrapper \u003d intr.findUnwrappingNameTransformer(param);\n+                if (unwrapper !\u003d null) {\n+                    properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n+                    ++namedCount;\n+                } else {\n+                    if (nonAnnotatedParam \u003d\u003d null) {\n+                        nonAnnotatedParam \u003d param;\n+                    }\n+                }\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 creators.addIncompeteParameter(nonAnnotatedParam);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "970b895f59d5934258b2bac34477a9679477209b": {
      "type": "Ybodychange",
      "commitMessage": "Honor detected constructor properties/names\n",
      "commitDate": "3/17/13, 11:18 PM",
      "commitName": "970b895f59d5934258b2bac34477a9679477209b",
      "commitAuthor": "Christopher Currie",
      "commitDateOld": "3/13/13, 3:56 PM",
      "commitNameOld": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.31,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    String[] ctorPropNames \u003d null;\n    AnnotatedConstructor propertyCtor \u003d null;\n    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n        if (propDef.getConstructorParameter() !\u003d null) {\n            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n            AnnotatedWithParams owner \u003d param.getOwner();\n            if (owner instanceof AnnotatedConstructor) {\n                if (propertyCtor \u003d\u003d null) {\n                    propertyCtor \u003d (AnnotatedConstructor) owner;\n                    ctorPropNames \u003d new String[propertyCtor.getParameterCount()];\n                }\n                ctorPropNames[param.getIndex()] \u003d propDef.getName();\n            }\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            String name \u003d ctor \u003d\u003d propertyCtor ? ctorPropNames[0] : null;\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d null;\n            if (ctor \u003d\u003d propertyCtor) {\n                name \u003d ctorPropNames[i];\n            }\n            if (name \u003d\u003d null) {\n                PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n                name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n            }\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 370,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,70 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n+    String[] ctorPropNames \u003d null;\n+    AnnotatedConstructor propertyCtor \u003d null;\n+    for (BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n+        if (propDef.getConstructorParameter() !\u003d null) {\n+            AnnotatedParameter param \u003d propDef.getConstructorParameter();\n+            AnnotatedWithParams owner \u003d param.getOwner();\n+            if (owner instanceof AnnotatedConstructor) {\n+                if (propertyCtor \u003d\u003d null) {\n+                    propertyCtor \u003d (AnnotatedConstructor) owner;\n+                    ctorPropNames \u003d new String[propertyCtor.getParameterCount()];\n+                }\n+                ctorPropNames[param.getIndex()] \u003d propDef.getName();\n+            }\n+        }\n+    }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n-        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n+        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor) || ctor \u003d\u003d propertyCtor;\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n-            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n+            String name \u003d ctor \u003d\u003d propertyCtor ? ctorPropNames[0] : null;\n+            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible, name);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n-            PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n-            String name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n+            String name \u003d null;\n+            if (ctor \u003d\u003d propertyCtor) {\n+                name \u003d ctorPropNames[i];\n+            }\n+            if (name \u003d\u003d null) {\n+                PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n+                name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n+            }\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 creators.addIncompeteParameter(nonAnnotatedParam);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bfec7201df594c07e8b1c38d50e9f1d742dd9366": {
      "type": "Ybodychange",
      "commitMessage": "Defer incomplete ValueInstantiator build errors.\n\nIf a standard ValueInstantiator does not have a complete set of\nproperties, don\u0027t fail right away; there may be a later replacement\ncoming from a module.\n",
      "commitDate": "1/12/13, 11:33 AM",
      "commitName": "bfec7201df594c07e8b1c38d50e9f1d742dd9366",
      "commitAuthor": "Christopher Currie",
      "commitDateOld": "1/8/13, 8:31 PM",
      "commitNameOld": "981f3e1bc5a2e7fd7abc2970e01200ace83b8c2d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.63,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n            String name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                creators.addIncompeteParameter(nonAnnotatedParam);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 412,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,48 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n             String name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n-                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+                creators.addIncompeteParameter(nonAnnotatedParam);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd": {
      "type": "Ybodychange",
      "commitMessage": "Complete [Issue#69] implementation\n",
      "commitDate": "9/4/12, 10:10 PM",
      "commitName": "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/17/12, 2:59 PM",
      "commitNameOld": "bc6485776be5c45a52e4b07459caf3b9a78c80d3",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.3,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n            String name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 391,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,48 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n     if (defaultCtor !\u003d null) {\n         if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n             creators.setDefaultCreator(defaultCtor);\n         }\n     }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n-            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n+            PropertyName pn \u003d (param \u003d\u003d null) ? null : intr.findNameForDeserialization(param);\n+            String name \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-850]: allow use of zero-arg factory methods using @JsonCreator\n",
      "commitDate": "7/22/12, 10:33 PM",
      "commitName": "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/9/12, 9:46 PM",
      "commitNameOld": "1421af6eeaa8101c3ba8cef834f893943e244cf8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 134.99,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n    if (defaultCtor !\u003d null) {\n        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n            creators.setDefaultCreator(defaultCtor);\n        }\n    }\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 385,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,44 +1,47 @@\n protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n+    AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n+    if (defaultCtor !\u003d null) {\n+        if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n+            creators.setDefaultCreator(defaultCtor);\n+        }\n+    }\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n-        if (argCount \u003c 1) {\n-            continue;\n-        }\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "Further refactoring for DeserializerFactories\n",
      "commitDate": "1/26/12, 1:22 PM",
      "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Further refactoring for DeserializerFactories\n",
          "commitDate": "1/26/12, 1:22 PM",
          "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 1:07 PM",
          "commitNameOld": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 472,
          "functionName": "_addDeserializerConstructors",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
            "oldMethodName": "_addDeserializerConstructors",
            "newMethodName": "_addDeserializerConstructors"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Further refactoring for DeserializerFactories\n",
          "commitDate": "1/26/12, 1:22 PM",
          "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 1:07 PM",
          "commitNameOld": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 472,
          "functionName": "_addDeserializerConstructors",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 728,
          "functionName": "_addDeserializerConstructors",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,44 +1,44 @@\n-protected void _addDeserializerConstructors(DeserializationConfig config, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n+protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         if (argCount \u003c 1) {\n             continue;\n         }\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n-            _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n+            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n-                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n-                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, beanDesc-BeanDescription, vchecker-VisibilityChecker\u003c?\u003e, intr-AnnotationIntrospector, creators-CreatorCollector]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, vchecker-VisibilityChecker\u003c?\u003e, intr-AnnotationIntrospector, creators-CreatorCollector]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 728,
          "functionName": "_addDeserializerConstructors",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,44 +1,44 @@\n-protected void _addDeserializerConstructors(DeserializationConfig config, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n+protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         if (argCount \u003c 1) {\n             continue;\n         }\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n-            _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n+            _handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n-                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n-                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+                properties[i] \u003d constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationConfig config, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 750,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,44 +1,44 @@\n-protected void _addDeserializerConstructors(DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n+protected void _addDeserializerConstructors(DeserializationConfig config, BeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         if (argCount \u003c 1) {\n             continue;\n         }\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, beanDesc-BasicBeanDescription, vchecker-VisibilityChecker\u003c?\u003e, intr-AnnotationIntrospector, creators-CreatorCollector]",
        "newValue": "[config-DeserializationConfig, beanDesc-BeanDescription, vchecker-VisibilityChecker\u003c?\u003e, intr-AnnotationIntrospector, creators-CreatorCollector]"
      }
    },
    "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026": {
      "type": "Ybodychange",
      "commitMessage": "Fix [JACKSON-712], inability to use Injectables with delegation constructor\n",
      "commitDate": "1/19/12, 3:58 PM",
      "commitName": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/19/12, 2:36 PM",
      "commitNameOld": "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                creators.addDelegatingCreator(ctor, properties);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 751,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,44 @@\n protected void _addDeserializerConstructors(DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         if (argCount \u003c 1) {\n             continue;\n         }\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n-        boolean annotationFound \u003d false;\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n             String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n-                throw new IllegalArgumentException(\"Delegated constructor with Injectables not yet supported (see [JACKSON-712]) for \" + ctor);\n+                creators.addDelegatingCreator(ctor, properties);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n             }\n         }\n-        if (annotationFound) {\n-            creators.addPropertyCreator(ctor, properties);\n-        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5": {
      "type": "Ybodychange",
      "commitMessage": "Renaming of AnnotationIntrospector methods to be (more) consistent\n",
      "commitDate": "1/19/12, 2:36 PM",
      "commitName": "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/19/12, 12:31 PM",
      "commitNameOld": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addDeserializerConstructors(DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        boolean annotationFound \u003d false;\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                throw new IllegalArgumentException(\"Delegated constructor with Injectables not yet supported (see [JACKSON-712]) for \" + ctor);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n        if (annotationFound) {\n            creators.addPropertyCreator(ctor, properties);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 751,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,48 @@\n protected void _addDeserializerConstructors(DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n     for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n         int argCount \u003d ctor.getParameterCount();\n         if (argCount \u003c 1) {\n             continue;\n         }\n         boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n         boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n         if (argCount \u003d\u003d 1) {\n             _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n             continue;\n         }\n         if (!isCreator \u0026\u0026 !isVisible) {\n             continue;\n         }\n         boolean annotationFound \u003d false;\n         AnnotatedParameter nonAnnotatedParam \u003d null;\n         int namedCount \u003d 0;\n         int injectCount \u003d 0;\n         CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n         for (int i \u003d 0; i \u003c argCount; ++i) {\n             AnnotatedParameter param \u003d ctor.getParameter(i);\n-            String name \u003d (param \u003d\u003d null) ? null : intr.findPropertyNameForParam(param);\n+            String name \u003d (param \u003d\u003d null) ? null : intr.findDeserializationName(param);\n             Object injectId \u003d intr.findInjectableValueId(param);\n             if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                 ++namedCount;\n                 properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n             } else if (injectId !\u003d null) {\n                 ++injectCount;\n                 properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n             } else if (nonAnnotatedParam \u003d\u003d null) {\n                 nonAnnotatedParam \u003d param;\n             }\n         }\n         if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n             if ((namedCount + injectCount) \u003d\u003d argCount) {\n                 creators.addPropertyCreator(ctor, properties);\n             } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                 throw new IllegalArgumentException(\"Delegated constructor with Injectables not yet supported (see [JACKSON-712]) for \" + ctor);\n             } else {\n                 throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n             }\n         }\n         if (annotationFound) {\n             creators.addPropertyCreator(ctor, properties);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,48 @@\n+protected void _addDeserializerConstructors(DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n+    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n+        int argCount \u003d ctor.getParameterCount();\n+        if (argCount \u003c 1) {\n+            continue;\n+        }\n+        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n+        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n+        if (argCount \u003d\u003d 1) {\n+            _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n+            continue;\n+        }\n+        if (!isCreator \u0026\u0026 !isVisible) {\n+            continue;\n+        }\n+        boolean annotationFound \u003d false;\n+        AnnotatedParameter nonAnnotatedParam \u003d null;\n+        int namedCount \u003d 0;\n+        int injectCount \u003d 0;\n+        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n+        for (int i \u003d 0; i \u003c argCount; ++i) {\n+            AnnotatedParameter param \u003d ctor.getParameter(i);\n+            String name \u003d (param \u003d\u003d null) ? null : intr.findPropertyNameForParam(param);\n+            Object injectId \u003d intr.findInjectableValueId(param);\n+            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n+                ++namedCount;\n+                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+            } else if (injectId !\u003d null) {\n+                ++injectCount;\n+                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n+            } else if (nonAnnotatedParam \u003d\u003d null) {\n+                nonAnnotatedParam \u003d param;\n+            }\n+        }\n+        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n+            if ((namedCount + injectCount) \u003d\u003d argCount) {\n+                creators.addPropertyCreator(ctor, properties);\n+            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n+                throw new IllegalArgumentException(\"Delegated constructor with Injectables not yet supported (see [JACKSON-712]) for \" + ctor);\n+            } else {\n+                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n+            }\n+        }\n+        if (annotationFound) {\n+            creators.addPropertyCreator(ctor, properties);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void _addDeserializerConstructors(DeserializationConfig config, BasicBeanDescription beanDesc, VisibilityChecker\u003c?\u003e vchecker, AnnotationIntrospector intr, CreatorCollector creators) throws JsonMappingException {\n    for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n        int argCount \u003d ctor.getParameterCount();\n        if (argCount \u003c 1) {\n            continue;\n        }\n        boolean isCreator \u003d intr.hasCreatorAnnotation(ctor);\n        boolean isVisible \u003d vchecker.isCreatorVisible(ctor);\n        if (argCount \u003d\u003d 1) {\n            _handleSingleArgumentConstructor(config, beanDesc, vchecker, intr, creators, ctor, isCreator, isVisible);\n            continue;\n        }\n        if (!isCreator \u0026\u0026 !isVisible) {\n            continue;\n        }\n        boolean annotationFound \u003d false;\n        AnnotatedParameter nonAnnotatedParam \u003d null;\n        int namedCount \u003d 0;\n        int injectCount \u003d 0;\n        CreatorProperty[] properties \u003d new CreatorProperty[argCount];\n        for (int i \u003d 0; i \u003c argCount; ++i) {\n            AnnotatedParameter param \u003d ctor.getParameter(i);\n            String name \u003d (param \u003d\u003d null) ? null : intr.findPropertyNameForParam(param);\n            Object injectId \u003d intr.findInjectableValueId(param);\n            if (name !\u003d null \u0026\u0026 name.length() \u003e 0) {\n                ++namedCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (injectId !\u003d null) {\n                ++injectCount;\n                properties[i] \u003d constructCreatorProperty(config, beanDesc, name, i, param, injectId);\n            } else if (nonAnnotatedParam \u003d\u003d null) {\n                nonAnnotatedParam \u003d param;\n            }\n        }\n        if (isCreator || namedCount \u003e 0 || injectCount \u003e 0) {\n            if ((namedCount + injectCount) \u003d\u003d argCount) {\n                creators.addPropertyCreator(ctor, properties);\n            } else if ((namedCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\n                throw new IllegalArgumentException(\"Delegated constructor with Injectables not yet supported (see [JACKSON-712]) for \" + ctor);\n            } else {\n                throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \" + ctor + \" has no property name annotation; must have name when multiple-paramater constructor annotated as Creator\");\n            }\n        }\n        if (annotationFound) {\n            creators.addPropertyCreator(ctor, properties);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 794,
      "functionName": "_addDeserializerConstructors",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}