{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JdkDeserializers.java",
  "functionName": "find",
  "functionId": "find___rawType-Class__?____clsName-String",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 28,
  "functionEndLine": 50,
  "numCommitsSeen": 47,
  "timeTaken": 1480,
  "changeHistory": [
    "1d29e0f496a9a646e2379afa2504814064019a61",
    "a877f25e4b75a0e73cd572ef9e9cbc5375f6d70e",
    "845897f6970c70f35ddd880d538765ec5a2956f4",
    "3568997a05847b757f3d7510a4c833b3406bacb6",
    "f0af8c1f950e19813272e7b32c664026937fdece",
    "ac4059964a1c30b50d8b347777f45024b1a7e929",
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
    "e13574dbc83d4638f3061d5e25043aefcfca3eff",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f"
  ],
  "changeHistoryShort": {
    "1d29e0f496a9a646e2379afa2504814064019a61": "Ybodychange",
    "a877f25e4b75a0e73cd572ef9e9cbc5375f6d70e": "Ybodychange",
    "845897f6970c70f35ddd880d538765ec5a2956f4": "Ybodychange",
    "3568997a05847b757f3d7510a4c833b3406bacb6": "Ybodychange",
    "f0af8c1f950e19813272e7b32c664026937fdece": "Ybodychange",
    "ac4059964a1c30b50d8b347777f45024b1a7e929": "Ybodychange",
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00": "Ymultichange(Yparameterchange,Ybodychange)",
    "e13574dbc83d4638f3061d5e25043aefcfca3eff": "Ybodychange",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1d29e0f496a9a646e2379afa2504814064019a61": {
      "type": "Ybodychange",
      "commitMessage": "minor cleanup for jdk serializer mapping\n",
      "commitDate": "1/4/14, 9:20 PM",
      "commitName": "1d29e0f496a9a646e2379afa2504814064019a61",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/1/14, 1:13 PM",
      "commitNameOld": "a877f25e4b75a0e73cd572ef9e9cbc5375f6d70e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.34,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (_classNames.contains(clsName)) {\n        JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\n        if (d !\u003d null) {\n            return d;\n        }\n        if (rawType \u003d\u003d UUID.class) {\n            return new UUIDDeserializer();\n        }\n        if (rawType \u003d\u003d StackTraceElement.class) {\n            return new StackTraceElementDeserializer();\n        }\n        if (rawType \u003d\u003d AtomicBoolean.class) {\n            return new AtomicBooleanDeserializer();\n        }\n        if (rawType \u003d\u003d ByteBuffer.class) {\n            return new ByteBufferDeserializer();\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 28,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,21 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n-    if (!_classNames.contains(clsName)) {\n-        return null;\n+    if (_classNames.contains(clsName)) {\n+        JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\n+        if (d !\u003d null) {\n+            return d;\n+        }\n+        if (rawType \u003d\u003d UUID.class) {\n+            return new UUIDDeserializer();\n+        }\n+        if (rawType \u003d\u003d StackTraceElement.class) {\n+            return new StackTraceElementDeserializer();\n+        }\n+        if (rawType \u003d\u003d AtomicBoolean.class) {\n+            return new AtomicBooleanDeserializer();\n+        }\n+        if (rawType \u003d\u003d ByteBuffer.class) {\n+            return new ByteBufferDeserializer();\n+        }\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\n-    if (d !\u003d null) {\n-        return d;\n-    }\n-    if (rawType \u003d\u003d UUID.class) {\n-        return new UUIDDeserializer();\n-    }\n-    if (rawType \u003d\u003d StackTraceElement.class) {\n-        return new StackTraceElementDeserializer();\n-    }\n-    if (rawType \u003d\u003d AtomicBoolean.class) {\n-        return new AtomicBooleanDeserializer();\n-    }\n-    if (rawType \u003d\u003d ByteBuffer.class) {\n-        return new ByteBufferDeserializer();\n-    }\n-    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n+    return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a877f25e4b75a0e73cd572ef9e9cbc5375f6d70e": {
      "type": "Ybodychange",
      "commitMessage": "Remove 2 more \"simple\" string deserializers\n",
      "commitDate": "1/1/14, 1:13 PM",
      "commitName": "a877f25e4b75a0e73cd572ef9e9cbc5375f6d70e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/1/14, 12:56 PM",
      "commitNameOld": "845897f6970c70f35ddd880d538765ec5a2956f4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (!_classNames.contains(clsName)) {\n        return null;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\n    if (d !\u003d null) {\n        return d;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return new UUIDDeserializer();\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return new StackTraceElementDeserializer();\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return new AtomicBooleanDeserializer();\n    }\n    if (rawType \u003d\u003d ByteBuffer.class) {\n        return new ByteBufferDeserializer();\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 32,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,22 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n     if (!_classNames.contains(clsName)) {\n         return null;\n     }\n     JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\n     if (d !\u003d null) {\n         return d;\n     }\n     if (rawType \u003d\u003d UUID.class) {\n         return new UUIDDeserializer();\n     }\n-    if (rawType \u003d\u003d InetAddress.class) {\n-        return new InetAddressDeserializer();\n-    }\n-    if (rawType \u003d\u003d InetSocketAddress.class) {\n-        return new InetSocketAddressDeserializer();\n-    }\n-    if (rawType \u003d\u003d Charset.class) {\n-        return new CharsetDeserializer();\n-    }\n-    if (rawType \u003d\u003d Class.class) {\n-        return new ClassDeserializer();\n-    }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n         return new StackTraceElementDeserializer();\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n         return new AtomicBooleanDeserializer();\n     }\n     if (rawType \u003d\u003d ByteBuffer.class) {\n         return new ByteBufferDeserializer();\n     }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "845897f6970c70f35ddd880d538765ec5a2956f4": {
      "type": "Ybodychange",
      "commitMessage": "Combine a bunch of simple \"from-string\" deserialziers\n",
      "commitDate": "1/1/14, 12:56 PM",
      "commitName": "845897f6970c70f35ddd880d538765ec5a2956f4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/31/13, 10:50 PM",
      "commitNameOld": "3568997a05847b757f3d7510a4c833b3406bacb6",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.59,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (!_classNames.contains(clsName)) {\n        return null;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\n    if (d !\u003d null) {\n        return d;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return new UUIDDeserializer();\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return new InetAddressDeserializer();\n    }\n    if (rawType \u003d\u003d InetSocketAddress.class) {\n        return new InetSocketAddressDeserializer();\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return new CharsetDeserializer();\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return new ClassDeserializer();\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return new StackTraceElementDeserializer();\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return new AtomicBooleanDeserializer();\n    }\n    if (rawType \u003d\u003d ByteBuffer.class) {\n        return new ByteBufferDeserializer();\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 39,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,34 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n     if (!_classNames.contains(clsName)) {\n         return null;\n     }\n-    if (rawType \u003d\u003d URI.class) {\n-        return URIDeserializer.instance;\n-    }\n-    if (rawType \u003d\u003d URL.class) {\n-        return URLDeserializer.instance;\n-    }\n-    if (rawType \u003d\u003d File.class) {\n-        return FileDeserializer.instance;\n+    JsonDeserializer\u003c?\u003e d \u003d FromStringDeserializer.findDeserializer(rawType);\n+    if (d !\u003d null) {\n+        return d;\n     }\n     if (rawType \u003d\u003d UUID.class) {\n-        return UUIDDeserializer.instance;\n-    }\n-    if (rawType \u003d\u003d Currency.class) {\n-        return CurrencyDeserializer.instance;\n-    }\n-    if (rawType \u003d\u003d Pattern.class) {\n-        return PatternDeserializer.instance;\n-    }\n-    if (rawType \u003d\u003d Locale.class) {\n-        return LocaleDeserializer.instance;\n+        return new UUIDDeserializer();\n     }\n     if (rawType \u003d\u003d InetAddress.class) {\n-        return InetAddressDeserializer.instance;\n+        return new InetAddressDeserializer();\n     }\n     if (rawType \u003d\u003d InetSocketAddress.class) {\n-        return InetSocketAddressDeserializer.instance;\n+        return new InetSocketAddressDeserializer();\n     }\n     if (rawType \u003d\u003d Charset.class) {\n         return new CharsetDeserializer();\n     }\n     if (rawType \u003d\u003d Class.class) {\n         return new ClassDeserializer();\n     }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n         return new StackTraceElementDeserializer();\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n         return new AtomicBooleanDeserializer();\n     }\n     if (rawType \u003d\u003d ByteBuffer.class) {\n         return new ByteBufferDeserializer();\n     }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3568997a05847b757f3d7510a4c833b3406bacb6": {
      "type": "Ybodychange",
      "commitMessage": "yet more refactoring\n",
      "commitDate": "12/31/13, 10:50 PM",
      "commitName": "3568997a05847b757f3d7510a4c833b3406bacb6",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/13/13, 10:30 PM",
      "commitNameOld": "ac1f6d59323fee3e9cd9570fe8416e72933cc767",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 109.06,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (!_classNames.contains(clsName)) {\n        return null;\n    }\n    if (rawType \u003d\u003d URI.class) {\n        return URIDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URL.class) {\n        return URLDeserializer.instance;\n    }\n    if (rawType \u003d\u003d File.class) {\n        return FileDeserializer.instance;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return UUIDDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Currency.class) {\n        return CurrencyDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Pattern.class) {\n        return PatternDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Locale.class) {\n        return LocaleDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return InetAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetSocketAddress.class) {\n        return InetSocketAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return new CharsetDeserializer();\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return new ClassDeserializer();\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return new StackTraceElementDeserializer();\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return new AtomicBooleanDeserializer();\n    }\n    if (rawType \u003d\u003d ByteBuffer.class) {\n        return new ByteBufferDeserializer();\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 47,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,48 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n     if (!_classNames.contains(clsName)) {\n         return null;\n     }\n     if (rawType \u003d\u003d URI.class) {\n         return URIDeserializer.instance;\n     }\n     if (rawType \u003d\u003d URL.class) {\n         return URLDeserializer.instance;\n     }\n     if (rawType \u003d\u003d File.class) {\n         return FileDeserializer.instance;\n     }\n     if (rawType \u003d\u003d UUID.class) {\n         return UUIDDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Currency.class) {\n         return CurrencyDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Pattern.class) {\n         return PatternDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Locale.class) {\n         return LocaleDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetAddress.class) {\n         return InetAddressDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetSocketAddress.class) {\n         return InetSocketAddressDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Charset.class) {\n         return new CharsetDeserializer();\n     }\n     if (rawType \u003d\u003d Class.class) {\n-        return ClassDeserializer.instance;\n+        return new ClassDeserializer();\n     }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n-        return StackTraceElementDeserializer.instance;\n+        return new StackTraceElementDeserializer();\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n-        return AtomicBooleanDeserializer.instance;\n+        return new AtomicBooleanDeserializer();\n     }\n     if (rawType \u003d\u003d ByteBuffer.class) {\n         return new ByteBufferDeserializer();\n     }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f0af8c1f950e19813272e7b32c664026937fdece": {
      "type": "Ybodychange",
      "commitMessage": "Complete #239 implementation\n",
      "commitDate": "7/11/13, 10:20 AM",
      "commitName": "f0af8c1f950e19813272e7b32c664026937fdece",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/9/13, 9:40 PM",
      "commitNameOld": "9150a0356a3c484e2823a63d3570cdd90c0040da",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.53,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (!_classNames.contains(clsName)) {\n        return null;\n    }\n    if (rawType \u003d\u003d URI.class) {\n        return URIDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URL.class) {\n        return URLDeserializer.instance;\n    }\n    if (rawType \u003d\u003d File.class) {\n        return FileDeserializer.instance;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return UUIDDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Currency.class) {\n        return CurrencyDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Pattern.class) {\n        return PatternDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Locale.class) {\n        return LocaleDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return InetAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetSocketAddress.class) {\n        return InetSocketAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return new CharsetDeserializer();\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return ClassDeserializer.instance;\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return StackTraceElementDeserializer.instance;\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return AtomicBooleanDeserializer.instance;\n    }\n    if (rawType \u003d\u003d ByteBuffer.class) {\n        return new ByteBufferDeserializer();\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 48,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,48 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n     if (!_classNames.contains(clsName)) {\n         return null;\n     }\n     if (rawType \u003d\u003d URI.class) {\n         return URIDeserializer.instance;\n     }\n     if (rawType \u003d\u003d URL.class) {\n         return URLDeserializer.instance;\n     }\n     if (rawType \u003d\u003d File.class) {\n         return FileDeserializer.instance;\n     }\n     if (rawType \u003d\u003d UUID.class) {\n         return UUIDDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Currency.class) {\n         return CurrencyDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Pattern.class) {\n         return PatternDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Locale.class) {\n         return LocaleDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetAddress.class) {\n         return InetAddressDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetSocketAddress.class) {\n         return InetSocketAddressDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Charset.class) {\n-        return CharsetDeserializer.instance;\n+        return new CharsetDeserializer();\n     }\n     if (rawType \u003d\u003d Class.class) {\n         return ClassDeserializer.instance;\n     }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n         return StackTraceElementDeserializer.instance;\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n         return AtomicBooleanDeserializer.instance;\n     }\n+    if (rawType \u003d\u003d ByteBuffer.class) {\n+        return new ByteBufferDeserializer();\n+    }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac4059964a1c30b50d8b347777f45024b1a7e929": {
      "type": "Ybodychange",
      "commitMessage": "Add support for InetSocketAddress\n\nSupports serialization and deserialization of `InetSocketAddress`.\n\nFor serialization:\n\n    * When available, the hostname will be preferred over the IP\n    address.\n    * When serializing an IPv6 address, it will be surrounded by\n    brackets to disambiguate the address from the port,\n\n        e.g. `[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443`\n\nFor deserialization:\n\n    * When a port is present, IPv6 addresses must be bracketed\n    (as above) in order to discern the address from the port.\n    * When no port is present, IPv6 addresses may be unbracketed.\n    * Addresses are optionally followed by a colon and a port number.\n",
      "commitDate": "6/25/13, 2:26 AM",
      "commitName": "ac4059964a1c30b50d8b347777f45024b1a7e929",
      "commitAuthor": "Nick Telford",
      "commitDateOld": "2/19/13, 8:59 PM",
      "commitNameOld": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 125.19,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (!_classNames.contains(clsName)) {\n        return null;\n    }\n    if (rawType \u003d\u003d URI.class) {\n        return URIDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URL.class) {\n        return URLDeserializer.instance;\n    }\n    if (rawType \u003d\u003d File.class) {\n        return FileDeserializer.instance;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return UUIDDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Currency.class) {\n        return CurrencyDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Pattern.class) {\n        return PatternDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Locale.class) {\n        return LocaleDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return InetAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetSocketAddress.class) {\n        return InetSocketAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return CharsetDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return ClassDeserializer.instance;\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return StackTraceElementDeserializer.instance;\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return AtomicBooleanDeserializer.instance;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 80,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,42 +1,45 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n     if (!_classNames.contains(clsName)) {\n         return null;\n     }\n     if (rawType \u003d\u003d URI.class) {\n         return URIDeserializer.instance;\n     }\n     if (rawType \u003d\u003d URL.class) {\n         return URLDeserializer.instance;\n     }\n     if (rawType \u003d\u003d File.class) {\n         return FileDeserializer.instance;\n     }\n     if (rawType \u003d\u003d UUID.class) {\n         return UUIDDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Currency.class) {\n         return CurrencyDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Pattern.class) {\n         return PatternDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Locale.class) {\n         return LocaleDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetAddress.class) {\n         return InetAddressDeserializer.instance;\n     }\n+    if (rawType \u003d\u003d InetSocketAddress.class) {\n+        return InetSocketAddressDeserializer.instance;\n+    }\n     if (rawType \u003d\u003d Charset.class) {\n         return CharsetDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Class.class) {\n         return ClassDeserializer.instance;\n     }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n         return StackTraceElementDeserializer.instance;\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n         return AtomicBooleanDeserializer.instance;\n     }\n     throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c89a8b7838f362ebbd315f096b1ff0c419a22d00": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "...\n",
      "commitDate": "2/19/13, 8:59 PM",
      "commitName": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "...\n",
          "commitDate": "2/19/13, 8:59 PM",
          "commitName": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/19/13, 8:43 PM",
          "commitNameOld": "e13574dbc83d4638f3061d5e25043aefcfca3eff",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (!_classNames.contains(clsName)) {\n        return null;\n    }\n    if (rawType \u003d\u003d URI.class) {\n        return URIDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URL.class) {\n        return URLDeserializer.instance;\n    }\n    if (rawType \u003d\u003d File.class) {\n        return FileDeserializer.instance;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return UUIDDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Currency.class) {\n        return CurrencyDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Pattern.class) {\n        return PatternDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Locale.class) {\n        return LocaleDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return InetAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return CharsetDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return ClassDeserializer.instance;\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return StackTraceElementDeserializer.instance;\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return AtomicBooleanDeserializer.instance;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
          "functionStartLine": 76,
          "functionName": "find",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,42 +1,42 @@\n-public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n-    if (!_classNames.contains(rawType.getName())) {\n+public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n+    if (!_classNames.contains(clsName)) {\n         return null;\n     }\n     if (rawType \u003d\u003d URI.class) {\n         return URIDeserializer.instance;\n     }\n     if (rawType \u003d\u003d URL.class) {\n         return URLDeserializer.instance;\n     }\n     if (rawType \u003d\u003d File.class) {\n         return FileDeserializer.instance;\n     }\n     if (rawType \u003d\u003d UUID.class) {\n         return UUIDDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Currency.class) {\n         return CurrencyDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Pattern.class) {\n         return PatternDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Locale.class) {\n         return LocaleDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetAddress.class) {\n         return InetAddressDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Charset.class) {\n         return CharsetDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Class.class) {\n         return ClassDeserializer.instance;\n     }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n         return StackTraceElementDeserializer.instance;\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n         return AtomicBooleanDeserializer.instance;\n     }\n-    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n+    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[rawType-Class\u003c?\u003e]",
            "newValue": "[rawType-Class\u003c?\u003e, clsName-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "...\n",
          "commitDate": "2/19/13, 8:59 PM",
          "commitName": "c89a8b7838f362ebbd315f096b1ff0c419a22d00",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/19/13, 8:43 PM",
          "commitNameOld": "e13574dbc83d4638f3061d5e25043aefcfca3eff",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n    if (!_classNames.contains(clsName)) {\n        return null;\n    }\n    if (rawType \u003d\u003d URI.class) {\n        return URIDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URL.class) {\n        return URLDeserializer.instance;\n    }\n    if (rawType \u003d\u003d File.class) {\n        return FileDeserializer.instance;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return UUIDDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Currency.class) {\n        return CurrencyDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Pattern.class) {\n        return PatternDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Locale.class) {\n        return LocaleDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return InetAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return CharsetDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return ClassDeserializer.instance;\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return StackTraceElementDeserializer.instance;\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return AtomicBooleanDeserializer.instance;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
          "functionStartLine": 76,
          "functionName": "find",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,42 +1,42 @@\n-public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n-    if (!_classNames.contains(rawType.getName())) {\n+public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType, String clsName) {\n+    if (!_classNames.contains(clsName)) {\n         return null;\n     }\n     if (rawType \u003d\u003d URI.class) {\n         return URIDeserializer.instance;\n     }\n     if (rawType \u003d\u003d URL.class) {\n         return URLDeserializer.instance;\n     }\n     if (rawType \u003d\u003d File.class) {\n         return FileDeserializer.instance;\n     }\n     if (rawType \u003d\u003d UUID.class) {\n         return UUIDDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Currency.class) {\n         return CurrencyDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Pattern.class) {\n         return PatternDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Locale.class) {\n         return LocaleDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetAddress.class) {\n         return InetAddressDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Charset.class) {\n         return CharsetDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Class.class) {\n         return ClassDeserializer.instance;\n     }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n         return StackTraceElementDeserializer.instance;\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n         return AtomicBooleanDeserializer.instance;\n     }\n-    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n+    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + clsName);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e13574dbc83d4638f3061d5e25043aefcfca3eff": {
      "type": "Ybodychange",
      "commitMessage": "more cleanup, wrt deserializer registration\n",
      "commitDate": "2/19/13, 8:43 PM",
      "commitName": "e13574dbc83d4638f3061d5e25043aefcfca3eff",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/13, 8:22 PM",
      "commitNameOld": "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n    if (!_classNames.contains(rawType.getName())) {\n        return null;\n    }\n    if (rawType \u003d\u003d URI.class) {\n        return URIDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URL.class) {\n        return URLDeserializer.instance;\n    }\n    if (rawType \u003d\u003d File.class) {\n        return FileDeserializer.instance;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n        return UUIDDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Currency.class) {\n        return CurrencyDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Pattern.class) {\n        return PatternDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Locale.class) {\n        return LocaleDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return InetAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return CharsetDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return ClassDeserializer.instance;\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return StackTraceElementDeserializer.instance;\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return AtomicBooleanDeserializer.instance;\n    }\n    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 76,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,42 @@\n public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n-    if (rawType \u003d\u003d UUID.class) {\n-        return UUIDDeserializer.instance;\n+    if (!_classNames.contains(rawType.getName())) {\n+        return null;\n     }\n-    if (rawType \u003d\u003d URIDeserializer.class) {\n+    if (rawType \u003d\u003d URI.class) {\n         return URIDeserializer.instance;\n     }\n     if (rawType \u003d\u003d URL.class) {\n         return URLDeserializer.instance;\n     }\n     if (rawType \u003d\u003d File.class) {\n         return FileDeserializer.instance;\n     }\n+    if (rawType \u003d\u003d UUID.class) {\n+        return UUIDDeserializer.instance;\n+    }\n     if (rawType \u003d\u003d Currency.class) {\n         return CurrencyDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Pattern.class) {\n         return PatternDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Locale.class) {\n         return LocaleDeserializer.instance;\n     }\n     if (rawType \u003d\u003d InetAddress.class) {\n         return InetAddressDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Charset.class) {\n         return CharsetDeserializer.instance;\n     }\n     if (rawType \u003d\u003d Class.class) {\n         return ClassDeserializer.instance;\n     }\n     if (rawType \u003d\u003d StackTraceElement.class) {\n         return StackTraceElementDeserializer.instance;\n     }\n     if (rawType \u003d\u003d AtomicBoolean.class) {\n         return AtomicBooleanDeserializer.instance;\n     }\n-    return null;\n+    throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring to try to reduce amount of mandatory initializations\n",
      "commitDate": "2/19/13, 8:22 PM",
      "commitName": "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,39 @@\n+public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n+    if (rawType \u003d\u003d UUID.class) {\n+        return UUIDDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d URIDeserializer.class) {\n+        return URIDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d URL.class) {\n+        return URLDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d File.class) {\n+        return FileDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d Currency.class) {\n+        return CurrencyDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d Pattern.class) {\n+        return PatternDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d Locale.class) {\n+        return LocaleDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d InetAddress.class) {\n+        return InetAddressDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d Charset.class) {\n+        return CharsetDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d Class.class) {\n+        return ClassDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d StackTraceElement.class) {\n+        return StackTraceElementDeserializer.instance;\n+    }\n+    if (rawType \u003d\u003d AtomicBoolean.class) {\n+        return AtomicBooleanDeserializer.instance;\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType) {\n    if (rawType \u003d\u003d UUID.class) {\n        return UUIDDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URIDeserializer.class) {\n        return URIDeserializer.instance;\n    }\n    if (rawType \u003d\u003d URL.class) {\n        return URLDeserializer.instance;\n    }\n    if (rawType \u003d\u003d File.class) {\n        return FileDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Currency.class) {\n        return CurrencyDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Pattern.class) {\n        return PatternDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Locale.class) {\n        return LocaleDeserializer.instance;\n    }\n    if (rawType \u003d\u003d InetAddress.class) {\n        return InetAddressDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Charset.class) {\n        return CharsetDeserializer.instance;\n    }\n    if (rawType \u003d\u003d Class.class) {\n        return ClassDeserializer.instance;\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n        return StackTraceElementDeserializer.instance;\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n        return AtomicBooleanDeserializer.instance;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
      "functionStartLine": 53,
      "functionName": "find",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}