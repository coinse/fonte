{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializer.java",
  "functionName": "deserialize",
  "functionId": "deserialize___jp-JsonParser__ctxt-DeserializationContext",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n\u003cp\u003e\nNOTE: was declared \u0027final\u0027 in 2.2; should NOT be to let extensions\nlike Afterburner change definition.\n",
  "functionStartLine": 111,
  "functionEndLine": 127,
  "numCommitsSeen": 67,
  "timeTaken": 4535,
  "changeHistory": [
    "e9184dc35ec97a1ec343a211e31b9ffcc638c882",
    "e7d0a56902774041e70be12dd8acef38f326a253",
    "5bd18093a249a0a506e280bda6df90bc19035436",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "e9184dc35ec97a1ec343a211e31b9ffcc638c882": "Ymultichange(Ymodifierchange,Ydocchange)",
    "e7d0a56902774041e70be12dd8acef38f326a253": "Ybodychange",
    "5bd18093a249a0a506e280bda6df90bc19035436": "Ybodychange",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": "Ybodychange",
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e9184dc35ec97a1ec343a211e31b9ffcc638c882": {
      "type": "Ymultichange(Ymodifierchange,Ydocchange)",
      "commitMessage": "Remove \u0027final\u0027 modified from 2 places in BeanDeserializer where it shouldn\u0027t (have) be(en) used\n",
      "commitDate": "9/28/13, 12:10 PM",
      "commitName": "e9184dc35ec97a1ec343a211e31b9ffcc638c882",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Remove \u0027final\u0027 modified from 2 places in BeanDeserializer where it shouldn\u0027t (have) be(en) used\n",
          "commitDate": "9/28/13, 12:10 PM",
          "commitName": "e9184dc35ec97a1ec343a211e31b9ffcc638c882",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "9/5/13, 8:55 PM",
          "commitNameOld": "47ac6bd51e63b0cbfef2e431a94193433d15077a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 22.64,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\n        if (_vanillaProcessing) {\n            return vanillaDeserialize(jp, ctxt, jp.nextToken());\n        }\n        jp.nextToken();\n        if (_objectIdReader !\u003d null) {\n            return deserializeWithObjectId(jp, ctxt);\n        }\n        return deserializeFromObject(jp, ctxt);\n    }\n    return _deserializeOther(jp, ctxt, t);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 111,
          "functionName": "deserialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n\u003cp\u003e\nNOTE: was declared \u0027final\u0027 in 2.2; should NOT be to let extensions\nlike Afterburner change definition.\n",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n-public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.START_OBJECT) {\n         if (_vanillaProcessing) {\n             return vanillaDeserialize(jp, ctxt, jp.nextToken());\n         }\n         jp.nextToken();\n         if (_objectIdReader !\u003d null) {\n             return deserializeWithObjectId(jp, ctxt);\n         }\n         return deserializeFromObject(jp, ctxt);\n     }\n     return _deserializeOther(jp, ctxt, t);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Remove \u0027final\u0027 modified from 2 places in BeanDeserializer where it shouldn\u0027t (have) be(en) used\n",
          "commitDate": "9/28/13, 12:10 PM",
          "commitName": "e9184dc35ec97a1ec343a211e31b9ffcc638c882",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "9/5/13, 8:55 PM",
          "commitNameOld": "47ac6bd51e63b0cbfef2e431a94193433d15077a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 22.64,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\n        if (_vanillaProcessing) {\n            return vanillaDeserialize(jp, ctxt, jp.nextToken());\n        }\n        jp.nextToken();\n        if (_objectIdReader !\u003d null) {\n            return deserializeWithObjectId(jp, ctxt);\n        }\n        return deserializeFromObject(jp, ctxt);\n    }\n    return _deserializeOther(jp, ctxt, t);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 111,
          "functionName": "deserialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n\u003cp\u003e\nNOTE: was declared \u0027final\u0027 in 2.2; should NOT be to let extensions\nlike Afterburner change definition.\n",
          "diff": "@@ -1,15 +1,15 @@\n @Override\n-public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+public Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.START_OBJECT) {\n         if (_vanillaProcessing) {\n             return vanillaDeserialize(jp, ctxt, jp.nextToken());\n         }\n         jp.nextToken();\n         if (_objectIdReader !\u003d null) {\n             return deserializeWithObjectId(jp, ctxt);\n         }\n         return deserializeFromObject(jp, ctxt);\n     }\n     return _deserializeOther(jp, ctxt, t);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Main deserialization method for bean-based objects (POJOs).\n",
            "newValue": "Main deserialization method for bean-based objects (POJOs).\n\u003cp\u003e\nNOTE: was declared \u0027final\u0027 in 2.2; should NOT be to let extensions\nlike Afterburner change definition.\n"
          }
        }
      ]
    },
    "e7d0a56902774041e70be12dd8acef38f326a253": {
      "type": "Ybodychange",
      "commitMessage": "Try to refactor BeanDeserializers to share more (i.e. demote to -Base)\n",
      "commitDate": "11/17/12, 11:02 AM",
      "commitName": "e7d0a56902774041e70be12dd8acef38f326a253",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/26/12, 6:19 PM",
      "commitNameOld": "231be531579336ce5528ebc6ead81c09e5c5138b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 21.74,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\n        if (_vanillaProcessing) {\n            return vanillaDeserialize(jp, ctxt, jp.nextToken());\n        }\n        jp.nextToken();\n        if (_objectIdReader !\u003d null) {\n            return deserializeWithObjectId(jp, ctxt);\n        }\n        return deserializeFromObject(jp, ctxt);\n    }\n    return _deserializeOther(jp, ctxt, t);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 108,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n",
      "diff": "@@ -1,42 +1,15 @@\n @Override\n public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.START_OBJECT) {\n-        t \u003d jp.nextToken();\n         if (_vanillaProcessing) {\n-            return vanillaDeserialize(jp, ctxt, t);\n+            return vanillaDeserialize(jp, ctxt, jp.nextToken());\n         }\n+        jp.nextToken();\n         if (_objectIdReader !\u003d null) {\n             return deserializeWithObjectId(jp, ctxt);\n         }\n         return deserializeFromObject(jp, ctxt);\n     }\n-    if (t \u003d\u003d null) {\n-        return _missingToken(jp, ctxt);\n-    }\n-    switch(t) {\n-        case VALUE_STRING:\n-            return deserializeFromString(jp, ctxt);\n-        case VALUE_NUMBER_INT:\n-            return deserializeFromNumber(jp, ctxt);\n-        case VALUE_NUMBER_FLOAT:\n-            return deserializeFromDouble(jp, ctxt);\n-        case VALUE_EMBEDDED_OBJECT:\n-            return jp.getEmbeddedObject();\n-        case VALUE_TRUE:\n-        case VALUE_FALSE:\n-            return deserializeFromBoolean(jp, ctxt);\n-        case START_ARRAY:\n-            return deserializeFromArray(jp, ctxt);\n-        case FIELD_NAME:\n-        case END_OBJECT:\n-            if (_vanillaProcessing) {\n-                return vanillaDeserialize(jp, ctxt, t);\n-            }\n-            if (_objectIdReader !\u003d null) {\n-                return deserializeWithObjectId(jp, ctxt);\n-            }\n-            return deserializeFromObject(jp, ctxt);\n-    }\n-    throw ctxt.mappingException(getBeanClass());\n+    return _deserializeOther(jp, ctxt, t);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5bd18093a249a0a506e280bda6df90bc19035436": {
      "type": "Ybodychange",
      "commitMessage": "Minor improvement to error handling\n",
      "commitDate": "9/14/12, 8:19 PM",
      "commitName": "5bd18093a249a0a506e280bda6df90bc19035436",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/29/12, 11:49 AM",
      "commitNameOld": "e8c1b5308707d31a2a6500e5155148a15fba53cf",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 16.35,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\n        t \u003d jp.nextToken();\n        if (_vanillaProcessing) {\n            return vanillaDeserialize(jp, ctxt, t);\n        }\n        if (_objectIdReader !\u003d null) {\n            return deserializeWithObjectId(jp, ctxt);\n        }\n        return deserializeFromObject(jp, ctxt);\n    }\n    if (t \u003d\u003d null) {\n        return _missingToken(jp, ctxt);\n    }\n    switch(t) {\n        case VALUE_STRING:\n            return deserializeFromString(jp, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(jp, ctxt);\n        case VALUE_NUMBER_FLOAT:\n            return deserializeFromDouble(jp, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return jp.getEmbeddedObject();\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(jp, ctxt);\n        case START_ARRAY:\n            return deserializeFromArray(jp, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT:\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(jp, ctxt, t);\n            }\n            if (_objectIdReader !\u003d null) {\n                return deserializeWithObjectId(jp, ctxt);\n            }\n            return deserializeFromObject(jp, ctxt);\n    }\n    throw ctxt.mappingException(getBeanClass());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 105,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n",
      "diff": "@@ -1,39 +1,42 @@\n @Override\n public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.START_OBJECT) {\n         t \u003d jp.nextToken();\n         if (_vanillaProcessing) {\n             return vanillaDeserialize(jp, ctxt, t);\n         }\n         if (_objectIdReader !\u003d null) {\n             return deserializeWithObjectId(jp, ctxt);\n         }\n         return deserializeFromObject(jp, ctxt);\n     }\n+    if (t \u003d\u003d null) {\n+        return _missingToken(jp, ctxt);\n+    }\n     switch(t) {\n         case VALUE_STRING:\n             return deserializeFromString(jp, ctxt);\n         case VALUE_NUMBER_INT:\n             return deserializeFromNumber(jp, ctxt);\n         case VALUE_NUMBER_FLOAT:\n             return deserializeFromDouble(jp, ctxt);\n         case VALUE_EMBEDDED_OBJECT:\n             return jp.getEmbeddedObject();\n         case VALUE_TRUE:\n         case VALUE_FALSE:\n             return deserializeFromBoolean(jp, ctxt);\n         case START_ARRAY:\n             return deserializeFromArray(jp, ctxt);\n         case FIELD_NAME:\n         case END_OBJECT:\n             if (_vanillaProcessing) {\n                 return vanillaDeserialize(jp, ctxt, t);\n             }\n             if (_objectIdReader !\u003d null) {\n                 return deserializeWithObjectId(jp, ctxt);\n             }\n             return deserializeFromObject(jp, ctxt);\n     }\n     throw ctxt.mappingException(getBeanClass());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
      "commitDate": "3/5/12, 10:34 PM",
      "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/4/12, 7:52 PM",
      "commitNameOld": "e1ceccd484643cd7a8e213de14bc3a85eebb3c11",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\n        t \u003d jp.nextToken();\n        if (_vanillaProcessing) {\n            return vanillaDeserialize(jp, ctxt, t);\n        }\n        if (_objectIdReader !\u003d null) {\n            return deserializeWithObjectId(jp, ctxt);\n        }\n        return deserializeFromObject(jp, ctxt);\n    }\n    switch(t) {\n        case VALUE_STRING:\n            return deserializeFromString(jp, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(jp, ctxt);\n        case VALUE_NUMBER_FLOAT:\n            return deserializeFromDouble(jp, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return jp.getEmbeddedObject();\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(jp, ctxt);\n        case START_ARRAY:\n            return deserializeFromArray(jp, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT:\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(jp, ctxt, t);\n            }\n            if (_objectIdReader !\u003d null) {\n                return deserializeWithObjectId(jp, ctxt);\n            }\n            return deserializeFromObject(jp, ctxt);\n    }\n    throw ctxt.mappingException(getBeanClass());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 99,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n",
      "diff": "@@ -1,30 +1,39 @@\n @Override\n public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.START_OBJECT) {\n         t \u003d jp.nextToken();\n         if (_vanillaProcessing) {\n             return vanillaDeserialize(jp, ctxt, t);\n         }\n+        if (_objectIdReader !\u003d null) {\n+            return deserializeWithObjectId(jp, ctxt);\n+        }\n         return deserializeFromObject(jp, ctxt);\n     }\n     switch(t) {\n         case VALUE_STRING:\n             return deserializeFromString(jp, ctxt);\n         case VALUE_NUMBER_INT:\n             return deserializeFromNumber(jp, ctxt);\n         case VALUE_NUMBER_FLOAT:\n             return deserializeFromDouble(jp, ctxt);\n         case VALUE_EMBEDDED_OBJECT:\n             return jp.getEmbeddedObject();\n         case VALUE_TRUE:\n         case VALUE_FALSE:\n             return deserializeFromBoolean(jp, ctxt);\n         case START_ARRAY:\n             return deserializeFromArray(jp, ctxt);\n         case FIELD_NAME:\n         case END_OBJECT:\n+            if (_vanillaProcessing) {\n+                return vanillaDeserialize(jp, ctxt, t);\n+            }\n+            if (_objectIdReader !\u003d null) {\n+                return deserializeWithObjectId(jp, ctxt);\n+            }\n             return deserializeFromObject(jp, ctxt);\n     }\n     throw ctxt.mappingException(getBeanClass());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687": {
      "type": "Ybodychange",
      "commitMessage": "Bit more work on view handling\n",
      "commitDate": "1/27/12, 9:41 PM",
      "commitName": "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 10:26 PM",
      "commitNameOld": "19ab5808eb8e47662f1d55408fdb186320061f13",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\n        t \u003d jp.nextToken();\n        if (_vanillaProcessing) {\n            return vanillaDeserialize(jp, ctxt, t);\n        }\n        return deserializeFromObject(jp, ctxt);\n    }\n    switch(t) {\n        case VALUE_STRING:\n            return deserializeFromString(jp, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(jp, ctxt);\n        case VALUE_NUMBER_FLOAT:\n            return deserializeFromDouble(jp, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return jp.getEmbeddedObject();\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(jp, ctxt);\n        case START_ARRAY:\n            return deserializeFromArray(jp, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT:\n            return deserializeFromObject(jp, ctxt);\n    }\n    throw ctxt.mappingException(getBeanClass());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 595,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n",
      "diff": "@@ -1,27 +1,30 @@\n @Override\n public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     JsonToken t \u003d jp.getCurrentToken();\n     if (t \u003d\u003d JsonToken.START_OBJECT) {\n-        jp.nextToken();\n+        t \u003d jp.nextToken();\n+        if (_vanillaProcessing) {\n+            return vanillaDeserialize(jp, ctxt, t);\n+        }\n         return deserializeFromObject(jp, ctxt);\n     }\n     switch(t) {\n         case VALUE_STRING:\n             return deserializeFromString(jp, ctxt);\n         case VALUE_NUMBER_INT:\n             return deserializeFromNumber(jp, ctxt);\n         case VALUE_NUMBER_FLOAT:\n             return deserializeFromDouble(jp, ctxt);\n         case VALUE_EMBEDDED_OBJECT:\n             return jp.getEmbeddedObject();\n         case VALUE_TRUE:\n         case VALUE_FALSE:\n             return deserializeFromBoolean(jp, ctxt);\n         case START_ARRAY:\n             return deserializeFromArray(jp, ctxt);\n         case FIELD_NAME:\n         case END_OBJECT:\n             return deserializeFromObject(jp, ctxt);\n     }\n     throw ctxt.mappingException(getBeanClass());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,27 @@\n+@Override\n+public final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    JsonToken t \u003d jp.getCurrentToken();\n+    if (t \u003d\u003d JsonToken.START_OBJECT) {\n+        jp.nextToken();\n+        return deserializeFromObject(jp, ctxt);\n+    }\n+    switch(t) {\n+        case VALUE_STRING:\n+            return deserializeFromString(jp, ctxt);\n+        case VALUE_NUMBER_INT:\n+            return deserializeFromNumber(jp, ctxt);\n+        case VALUE_NUMBER_FLOAT:\n+            return deserializeFromDouble(jp, ctxt);\n+        case VALUE_EMBEDDED_OBJECT:\n+            return jp.getEmbeddedObject();\n+        case VALUE_TRUE:\n+        case VALUE_FALSE:\n+            return deserializeFromBoolean(jp, ctxt);\n+        case START_ARRAY:\n+            return deserializeFromArray(jp, ctxt);\n+        case FIELD_NAME:\n+        case END_OBJECT:\n+            return deserializeFromObject(jp, ctxt);\n+    }\n+    throw ctxt.mappingException(getBeanClass());\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic final Object deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    JsonToken t \u003d jp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.START_OBJECT) {\n        jp.nextToken();\n        return deserializeFromObject(jp, ctxt);\n    }\n    switch(t) {\n        case VALUE_STRING:\n            return deserializeFromString(jp, ctxt);\n        case VALUE_NUMBER_INT:\n            return deserializeFromNumber(jp, ctxt);\n        case VALUE_NUMBER_FLOAT:\n            return deserializeFromDouble(jp, ctxt);\n        case VALUE_EMBEDDED_OBJECT:\n            return jp.getEmbeddedObject();\n        case VALUE_TRUE:\n        case VALUE_FALSE:\n            return deserializeFromBoolean(jp, ctxt);\n        case START_ARRAY:\n            return deserializeFromArray(jp, ctxt);\n        case FIELD_NAME:\n        case END_OBJECT:\n            return deserializeFromObject(jp, ctxt);\n    }\n    throw ctxt.mappingException(getBeanClass());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 574,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "Main deserialization method for bean-based objects (POJOs).\n"
    }
  }
}