{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotatedClass.java",
  "functionName": "resolveCreators",
  "functionId": "resolveCreators",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
  "functionAnnotation": "",
  "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n",
  "functionStartLine": 331,
  "functionEndLine": 411,
  "numCommitsSeen": 25,
  "timeTaken": 1327,
  "changeHistory": [
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7",
    "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab",
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b",
    "0344ce08eb33d9d3aeb6478ce0391368596eac04",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7": "Ybodychange",
    "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b": "Ydocchange",
    "0344ce08eb33d9d3aeb6478ce0391368596eac04": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-850]: allow use of zero-arg factory methods using @JsonCreator\n",
      "commitDate": "7/22/12, 10:33 PM",
      "commitName": "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/28/12, 12:43 AM",
      "commitNameOld": "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 85.91,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveCreators() {\n    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (constructors \u003d\u003d null) {\n                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n            }\n            constructors.add(_constructConstructor(ctor, false));\n        }\n    }\n    if (constructors \u003d\u003d null) {\n        _constructors \u003d Collections.emptyList();\n    } else {\n        _constructors \u003d constructors;\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n    for (Method m : _class.getDeclaredMethods()) {\n        if (!Modifier.isStatic(m.getModifiers())) {\n            continue;\n        }\n        if (creatorMethods \u003d\u003d null) {\n            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n        }\n        creatorMethods.add(_constructCreatorMethod(m));\n    }\n    if (creatorMethods \u003d\u003d null) {\n        _creatorMethods \u003d Collections.emptyList();\n    } else {\n        _creatorMethods \u003d creatorMethods;\n        if (_primaryMixIn !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                    _creatorMethods.remove(i);\n                }\n            }\n        }\n    }\n    _creatorsResolved \u003d true;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 323,
      "functionName": "resolveCreators",
      "functionAnnotation": "",
      "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n",
      "diff": "@@ -1,68 +1,64 @@\n private void resolveCreators() {\n     List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n     Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n     for (Constructor\u003c?\u003e ctor : declaredCtors) {\n         if (ctor.getParameterTypes().length \u003d\u003d 0) {\n             _defaultConstructor \u003d _constructConstructor(ctor, true);\n         } else {\n             if (constructors \u003d\u003d null) {\n                 constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n             }\n             constructors.add(_constructConstructor(ctor, false));\n         }\n     }\n     if (constructors \u003d\u003d null) {\n         _constructors \u003d Collections.emptyList();\n     } else {\n         _constructors \u003d constructors;\n     }\n     if (_primaryMixIn !\u003d null) {\n         if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n             _addConstructorMixIns(_primaryMixIn);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (_defaultConstructor !\u003d null) {\n             if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                 _defaultConstructor \u003d null;\n             }\n         }\n         if (_constructors !\u003d null) {\n             for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                 if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                     _constructors.remove(i);\n                 }\n             }\n         }\n     }\n     List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n     for (Method m : _class.getDeclaredMethods()) {\n         if (!Modifier.isStatic(m.getModifiers())) {\n             continue;\n         }\n-        int argCount \u003d m.getParameterTypes().length;\n-        if (argCount \u003c 1) {\n-            continue;\n-        }\n         if (creatorMethods \u003d\u003d null) {\n             creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n         }\n         creatorMethods.add(_constructCreatorMethod(m));\n     }\n     if (creatorMethods \u003d\u003d null) {\n         _creatorMethods \u003d Collections.emptyList();\n     } else {\n         _creatorMethods \u003d creatorMethods;\n         if (_primaryMixIn !\u003d null) {\n             _addFactoryMixIns(_primaryMixIn);\n         }\n         if (_annotationIntrospector !\u003d null) {\n             for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                 if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                     _creatorMethods.remove(i);\n                 }\n             }\n         }\n     }\n     _creatorsResolved \u003d true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Cleaning up AnnotatedClass implementation\n",
      "commitDate": "1/22/12, 9:44 PM",
      "commitName": "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Cleaning up AnnotatedClass implementation\n",
          "commitDate": "1/22/12, 9:44 PM",
          "commitName": "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/17/12, 2:09 PM",
          "commitNameOld": "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 5.32,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "private void resolveCreators() {\n    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (constructors \u003d\u003d null) {\n                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n            }\n            constructors.add(_constructConstructor(ctor, false));\n        }\n    }\n    if (constructors \u003d\u003d null) {\n        _constructors \u003d Collections.emptyList();\n    } else {\n        _constructors \u003d constructors;\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n    for (Method m : _class.getDeclaredMethods()) {\n        if (!Modifier.isStatic(m.getModifiers())) {\n            continue;\n        }\n        int argCount \u003d m.getParameterTypes().length;\n        if (argCount \u003c 1) {\n            continue;\n        }\n        if (creatorMethods \u003d\u003d null) {\n            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n        }\n        creatorMethods.add(_constructCreatorMethod(m));\n    }\n    if (creatorMethods \u003d\u003d null) {\n        _creatorMethods \u003d Collections.emptyList();\n    } else {\n        _creatorMethods \u003d creatorMethods;\n        if (_primaryMixIn !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                    _creatorMethods.remove(i);\n                }\n            }\n        }\n    }\n    _creatorsResolved \u003d true;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 311,
          "functionName": "resolveCreators",
          "functionAnnotation": "",
          "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n",
          "diff": "@@ -1,63 +1,68 @@\n-public void resolveCreators(boolean includeAll) {\n-    _constructors \u003d null;\n+private void resolveCreators() {\n+    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n     Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n     for (Constructor\u003c?\u003e ctor : declaredCtors) {\n         if (ctor.getParameterTypes().length \u003d\u003d 0) {\n             _defaultConstructor \u003d _constructConstructor(ctor, true);\n         } else {\n-            if (includeAll) {\n-                if (_constructors \u003d\u003d null) {\n-                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n-                }\n-                _constructors.add(_constructConstructor(ctor, false));\n+            if (constructors \u003d\u003d null) {\n+                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n             }\n+            constructors.add(_constructConstructor(ctor, false));\n         }\n     }\n+    if (constructors \u003d\u003d null) {\n+        _constructors \u003d Collections.emptyList();\n+    } else {\n+        _constructors \u003d constructors;\n+    }\n     if (_primaryMixIn !\u003d null) {\n-        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n+        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n             _addConstructorMixIns(_primaryMixIn);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (_defaultConstructor !\u003d null) {\n             if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                 _defaultConstructor \u003d null;\n             }\n         }\n         if (_constructors !\u003d null) {\n             for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                 if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                     _constructors.remove(i);\n                 }\n             }\n         }\n     }\n-    _creatorMethods \u003d null;\n-    if (includeAll) {\n-        for (Method m : _class.getDeclaredMethods()) {\n-            if (!Modifier.isStatic(m.getModifiers())) {\n-                continue;\n-            }\n-            int argCount \u003d m.getParameterTypes().length;\n-            if (argCount \u003c 1) {\n-                continue;\n-            }\n-            if (_creatorMethods \u003d\u003d null) {\n-                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n-            }\n-            _creatorMethods.add(_constructCreatorMethod(m));\n+    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n+    for (Method m : _class.getDeclaredMethods()) {\n+        if (!Modifier.isStatic(m.getModifiers())) {\n+            continue;\n         }\n-        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n+        int argCount \u003d m.getParameterTypes().length;\n+        if (argCount \u003c 1) {\n+            continue;\n+        }\n+        if (creatorMethods \u003d\u003d null) {\n+            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n+        }\n+        creatorMethods.add(_constructCreatorMethod(m));\n+    }\n+    if (creatorMethods \u003d\u003d null) {\n+        _creatorMethods \u003d Collections.emptyList();\n+    } else {\n+        _creatorMethods \u003d creatorMethods;\n+        if (_primaryMixIn !\u003d null) {\n             _addFactoryMixIns(_primaryMixIn);\n         }\n         if (_annotationIntrospector !\u003d null) {\n-            if (_creatorMethods !\u003d null) {\n-                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n-                    if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n-                        _creatorMethods.remove(i);\n-                    }\n+            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n+                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n+                    _creatorMethods.remove(i);\n                 }\n             }\n         }\n     }\n+    _creatorsResolved \u003d true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[includeAll-boolean]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Cleaning up AnnotatedClass implementation\n",
          "commitDate": "1/22/12, 9:44 PM",
          "commitName": "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/17/12, 2:09 PM",
          "commitNameOld": "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 5.32,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "private void resolveCreators() {\n    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (constructors \u003d\u003d null) {\n                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n            }\n            constructors.add(_constructConstructor(ctor, false));\n        }\n    }\n    if (constructors \u003d\u003d null) {\n        _constructors \u003d Collections.emptyList();\n    } else {\n        _constructors \u003d constructors;\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n    for (Method m : _class.getDeclaredMethods()) {\n        if (!Modifier.isStatic(m.getModifiers())) {\n            continue;\n        }\n        int argCount \u003d m.getParameterTypes().length;\n        if (argCount \u003c 1) {\n            continue;\n        }\n        if (creatorMethods \u003d\u003d null) {\n            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n        }\n        creatorMethods.add(_constructCreatorMethod(m));\n    }\n    if (creatorMethods \u003d\u003d null) {\n        _creatorMethods \u003d Collections.emptyList();\n    } else {\n        _creatorMethods \u003d creatorMethods;\n        if (_primaryMixIn !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                    _creatorMethods.remove(i);\n                }\n            }\n        }\n    }\n    _creatorsResolved \u003d true;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 311,
          "functionName": "resolveCreators",
          "functionAnnotation": "",
          "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n",
          "diff": "@@ -1,63 +1,68 @@\n-public void resolveCreators(boolean includeAll) {\n-    _constructors \u003d null;\n+private void resolveCreators() {\n+    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n     Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n     for (Constructor\u003c?\u003e ctor : declaredCtors) {\n         if (ctor.getParameterTypes().length \u003d\u003d 0) {\n             _defaultConstructor \u003d _constructConstructor(ctor, true);\n         } else {\n-            if (includeAll) {\n-                if (_constructors \u003d\u003d null) {\n-                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n-                }\n-                _constructors.add(_constructConstructor(ctor, false));\n+            if (constructors \u003d\u003d null) {\n+                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n             }\n+            constructors.add(_constructConstructor(ctor, false));\n         }\n     }\n+    if (constructors \u003d\u003d null) {\n+        _constructors \u003d Collections.emptyList();\n+    } else {\n+        _constructors \u003d constructors;\n+    }\n     if (_primaryMixIn !\u003d null) {\n-        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n+        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n             _addConstructorMixIns(_primaryMixIn);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (_defaultConstructor !\u003d null) {\n             if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                 _defaultConstructor \u003d null;\n             }\n         }\n         if (_constructors !\u003d null) {\n             for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                 if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                     _constructors.remove(i);\n                 }\n             }\n         }\n     }\n-    _creatorMethods \u003d null;\n-    if (includeAll) {\n-        for (Method m : _class.getDeclaredMethods()) {\n-            if (!Modifier.isStatic(m.getModifiers())) {\n-                continue;\n-            }\n-            int argCount \u003d m.getParameterTypes().length;\n-            if (argCount \u003c 1) {\n-                continue;\n-            }\n-            if (_creatorMethods \u003d\u003d null) {\n-                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n-            }\n-            _creatorMethods.add(_constructCreatorMethod(m));\n+    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n+    for (Method m : _class.getDeclaredMethods()) {\n+        if (!Modifier.isStatic(m.getModifiers())) {\n+            continue;\n         }\n-        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n+        int argCount \u003d m.getParameterTypes().length;\n+        if (argCount \u003c 1) {\n+            continue;\n+        }\n+        if (creatorMethods \u003d\u003d null) {\n+            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n+        }\n+        creatorMethods.add(_constructCreatorMethod(m));\n+    }\n+    if (creatorMethods \u003d\u003d null) {\n+        _creatorMethods \u003d Collections.emptyList();\n+    } else {\n+        _creatorMethods \u003d creatorMethods;\n+        if (_primaryMixIn !\u003d null) {\n             _addFactoryMixIns(_primaryMixIn);\n         }\n         if (_annotationIntrospector !\u003d null) {\n-            if (_creatorMethods !\u003d null) {\n-                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n-                    if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n-                        _creatorMethods.remove(i);\n-                    }\n+            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n+                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n+                    _creatorMethods.remove(i);\n                 }\n             }\n         }\n     }\n+    _creatorsResolved \u003d true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Cleaning up AnnotatedClass implementation\n",
          "commitDate": "1/22/12, 9:44 PM",
          "commitName": "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/17/12, 2:09 PM",
          "commitNameOld": "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 5.32,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "private void resolveCreators() {\n    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (constructors \u003d\u003d null) {\n                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n            }\n            constructors.add(_constructConstructor(ctor, false));\n        }\n    }\n    if (constructors \u003d\u003d null) {\n        _constructors \u003d Collections.emptyList();\n    } else {\n        _constructors \u003d constructors;\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n    for (Method m : _class.getDeclaredMethods()) {\n        if (!Modifier.isStatic(m.getModifiers())) {\n            continue;\n        }\n        int argCount \u003d m.getParameterTypes().length;\n        if (argCount \u003c 1) {\n            continue;\n        }\n        if (creatorMethods \u003d\u003d null) {\n            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n        }\n        creatorMethods.add(_constructCreatorMethod(m));\n    }\n    if (creatorMethods \u003d\u003d null) {\n        _creatorMethods \u003d Collections.emptyList();\n    } else {\n        _creatorMethods \u003d creatorMethods;\n        if (_primaryMixIn !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                    _creatorMethods.remove(i);\n                }\n            }\n        }\n    }\n    _creatorsResolved \u003d true;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 311,
          "functionName": "resolveCreators",
          "functionAnnotation": "",
          "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n",
          "diff": "@@ -1,63 +1,68 @@\n-public void resolveCreators(boolean includeAll) {\n-    _constructors \u003d null;\n+private void resolveCreators() {\n+    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n     Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n     for (Constructor\u003c?\u003e ctor : declaredCtors) {\n         if (ctor.getParameterTypes().length \u003d\u003d 0) {\n             _defaultConstructor \u003d _constructConstructor(ctor, true);\n         } else {\n-            if (includeAll) {\n-                if (_constructors \u003d\u003d null) {\n-                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n-                }\n-                _constructors.add(_constructConstructor(ctor, false));\n+            if (constructors \u003d\u003d null) {\n+                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n             }\n+            constructors.add(_constructConstructor(ctor, false));\n         }\n     }\n+    if (constructors \u003d\u003d null) {\n+        _constructors \u003d Collections.emptyList();\n+    } else {\n+        _constructors \u003d constructors;\n+    }\n     if (_primaryMixIn !\u003d null) {\n-        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n+        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n             _addConstructorMixIns(_primaryMixIn);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (_defaultConstructor !\u003d null) {\n             if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                 _defaultConstructor \u003d null;\n             }\n         }\n         if (_constructors !\u003d null) {\n             for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                 if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                     _constructors.remove(i);\n                 }\n             }\n         }\n     }\n-    _creatorMethods \u003d null;\n-    if (includeAll) {\n-        for (Method m : _class.getDeclaredMethods()) {\n-            if (!Modifier.isStatic(m.getModifiers())) {\n-                continue;\n-            }\n-            int argCount \u003d m.getParameterTypes().length;\n-            if (argCount \u003c 1) {\n-                continue;\n-            }\n-            if (_creatorMethods \u003d\u003d null) {\n-                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n-            }\n-            _creatorMethods.add(_constructCreatorMethod(m));\n+    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n+    for (Method m : _class.getDeclaredMethods()) {\n+        if (!Modifier.isStatic(m.getModifiers())) {\n+            continue;\n         }\n-        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n+        int argCount \u003d m.getParameterTypes().length;\n+        if (argCount \u003c 1) {\n+            continue;\n+        }\n+        if (creatorMethods \u003d\u003d null) {\n+            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n+        }\n+        creatorMethods.add(_constructCreatorMethod(m));\n+    }\n+    if (creatorMethods \u003d\u003d null) {\n+        _creatorMethods \u003d Collections.emptyList();\n+    } else {\n+        _creatorMethods \u003d creatorMethods;\n+        if (_primaryMixIn !\u003d null) {\n             _addFactoryMixIns(_primaryMixIn);\n         }\n         if (_annotationIntrospector !\u003d null) {\n-            if (_creatorMethods !\u003d null) {\n-                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n-                    if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n-                        _creatorMethods.remove(i);\n-                    }\n+            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n+                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n+                    _creatorMethods.remove(i);\n                 }\n             }\n         }\n     }\n+    _creatorsResolved \u003d true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Cleaning up AnnotatedClass implementation\n",
          "commitDate": "1/22/12, 9:44 PM",
          "commitName": "4fdbd54e9e5c5d3cb5ce539f48ba6f1019decdab",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/17/12, 2:09 PM",
          "commitNameOld": "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 5.32,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "actualSource": "private void resolveCreators() {\n    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (constructors \u003d\u003d null) {\n                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n            }\n            constructors.add(_constructConstructor(ctor, false));\n        }\n    }\n    if (constructors \u003d\u003d null) {\n        _constructors \u003d Collections.emptyList();\n    } else {\n        _constructors \u003d constructors;\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n    for (Method m : _class.getDeclaredMethods()) {\n        if (!Modifier.isStatic(m.getModifiers())) {\n            continue;\n        }\n        int argCount \u003d m.getParameterTypes().length;\n        if (argCount \u003c 1) {\n            continue;\n        }\n        if (creatorMethods \u003d\u003d null) {\n            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n        }\n        creatorMethods.add(_constructCreatorMethod(m));\n    }\n    if (creatorMethods \u003d\u003d null) {\n        _creatorMethods \u003d Collections.emptyList();\n    } else {\n        _creatorMethods \u003d creatorMethods;\n        if (_primaryMixIn !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                    _creatorMethods.remove(i);\n                }\n            }\n        }\n    }\n    _creatorsResolved \u003d true;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 311,
          "functionName": "resolveCreators",
          "functionAnnotation": "",
          "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n",
          "diff": "@@ -1,63 +1,68 @@\n-public void resolveCreators(boolean includeAll) {\n-    _constructors \u003d null;\n+private void resolveCreators() {\n+    List\u003cAnnotatedConstructor\u003e constructors \u003d null;\n     Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n     for (Constructor\u003c?\u003e ctor : declaredCtors) {\n         if (ctor.getParameterTypes().length \u003d\u003d 0) {\n             _defaultConstructor \u003d _constructConstructor(ctor, true);\n         } else {\n-            if (includeAll) {\n-                if (_constructors \u003d\u003d null) {\n-                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n-                }\n-                _constructors.add(_constructConstructor(ctor, false));\n+            if (constructors \u003d\u003d null) {\n+                constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n             }\n+            constructors.add(_constructConstructor(ctor, false));\n         }\n     }\n+    if (constructors \u003d\u003d null) {\n+        _constructors \u003d Collections.emptyList();\n+    } else {\n+        _constructors \u003d constructors;\n+    }\n     if (_primaryMixIn !\u003d null) {\n-        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n+        if (_defaultConstructor !\u003d null || !_constructors.isEmpty()) {\n             _addConstructorMixIns(_primaryMixIn);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (_defaultConstructor !\u003d null) {\n             if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                 _defaultConstructor \u003d null;\n             }\n         }\n         if (_constructors !\u003d null) {\n             for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                 if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                     _constructors.remove(i);\n                 }\n             }\n         }\n     }\n-    _creatorMethods \u003d null;\n-    if (includeAll) {\n-        for (Method m : _class.getDeclaredMethods()) {\n-            if (!Modifier.isStatic(m.getModifiers())) {\n-                continue;\n-            }\n-            int argCount \u003d m.getParameterTypes().length;\n-            if (argCount \u003c 1) {\n-                continue;\n-            }\n-            if (_creatorMethods \u003d\u003d null) {\n-                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n-            }\n-            _creatorMethods.add(_constructCreatorMethod(m));\n+    List\u003cAnnotatedMethod\u003e creatorMethods \u003d null;\n+    for (Method m : _class.getDeclaredMethods()) {\n+        if (!Modifier.isStatic(m.getModifiers())) {\n+            continue;\n         }\n-        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n+        int argCount \u003d m.getParameterTypes().length;\n+        if (argCount \u003c 1) {\n+            continue;\n+        }\n+        if (creatorMethods \u003d\u003d null) {\n+            creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n+        }\n+        creatorMethods.add(_constructCreatorMethod(m));\n+    }\n+    if (creatorMethods \u003d\u003d null) {\n+        _creatorMethods \u003d Collections.emptyList();\n+    } else {\n+        _creatorMethods \u003d creatorMethods;\n+        if (_primaryMixIn !\u003d null) {\n             _addFactoryMixIns(_primaryMixIn);\n         }\n         if (_annotationIntrospector !\u003d null) {\n-            if (_creatorMethods !\u003d null) {\n-                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n-                    if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n-                        _creatorMethods.remove(i);\n-                    }\n+            for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n+                if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n+                    _creatorMethods.remove(i);\n                 }\n             }\n         }\n     }\n+    _creatorsResolved \u003d true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n\n@param includeAll If true, includes all creator methods; if false,\n  will only include the no-arguments \"default\" constructor\n",
            "newValue": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n"
          }
        }
      ]
    },
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b": {
      "type": "Ydocchange",
      "commitMessage": "Start work on [JACKSON-754], \"annotation bundles\"\n",
      "commitDate": "1/16/12, 5:24 PM",
      "commitName": "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/29/11, 3:12 PM",
      "commitNameOld": "0344ce08eb33d9d3aeb6478ce0391368596eac04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "public void resolveCreators(boolean includeAll) {\n    _constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (includeAll) {\n                if (_constructors \u003d\u003d null) {\n                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n                }\n                _constructors.add(_constructConstructor(ctor, false));\n            }\n        }\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    _creatorMethods \u003d null;\n    if (includeAll) {\n        for (Method m : _class.getDeclaredMethods()) {\n            if (!Modifier.isStatic(m.getModifiers())) {\n                continue;\n            }\n            int argCount \u003d m.getParameterTypes().length;\n            if (argCount \u003c 1) {\n                continue;\n            }\n            if (_creatorMethods \u003d\u003d null) {\n                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n            }\n            _creatorMethods.add(_constructCreatorMethod(m));\n        }\n        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            if (_creatorMethods !\u003d null) {\n                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                    if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                        _creatorMethods.remove(i);\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 301,
      "functionName": "resolveCreators",
      "functionAnnotation": "",
      "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n\n@param includeAll If true, includes all creator methods; if false,\n  will only include the no-arguments \"default\" constructor\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n\u003cp\u003e\nStarting with 1.2, it will also apply mix-in annotations,\nas per [JACKSON-76]\n\n@param includeAll If true, includes all creator methods; if false,\n  will only include the no-arguments \"default\" constructor\n",
        "newValue": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n\n@param includeAll If true, includes all creator methods; if false,\n  will only include the no-arguments \"default\" constructor\n"
      }
    },
    "0344ce08eb33d9d3aeb6478ce0391368596eac04": {
      "type": "Ybodychange",
      "commitMessage": "Remove separate \u0027isIgnoredXxx\u0027 methods; combined into \u0027hasIgnoralMarker\u0027 method in AnnotationIntrospector\n",
      "commitDate": "12/29/11, 3:12 PM",
      "commitName": "0344ce08eb33d9d3aeb6478ce0391368596eac04",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/25/11, 2:23 PM",
      "commitNameOld": "c601e6397ae0b92843e07e887dfad28bdb42a5b8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.03,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public void resolveCreators(boolean includeAll) {\n    _constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (includeAll) {\n                if (_constructors \u003d\u003d null) {\n                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n                }\n                _constructors.add(_constructConstructor(ctor, false));\n            }\n        }\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    _creatorMethods \u003d null;\n    if (includeAll) {\n        for (Method m : _class.getDeclaredMethods()) {\n            if (!Modifier.isStatic(m.getModifiers())) {\n                continue;\n            }\n            int argCount \u003d m.getParameterTypes().length;\n            if (argCount \u003c 1) {\n                continue;\n            }\n            if (_creatorMethods \u003d\u003d null) {\n                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n            }\n            _creatorMethods.add(_constructCreatorMethod(m));\n        }\n        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            if (_creatorMethods !\u003d null) {\n                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                    if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                        _creatorMethods.remove(i);\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 314,
      "functionName": "resolveCreators",
      "functionAnnotation": "",
      "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n\u003cp\u003e\nStarting with 1.2, it will also apply mix-in annotations,\nas per [JACKSON-76]\n\n@param includeAll If true, includes all creator methods; if false,\n  will only include the no-arguments \"default\" constructor\n",
      "diff": "@@ -1,63 +1,63 @@\n public void resolveCreators(boolean includeAll) {\n     _constructors \u003d null;\n     Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n     for (Constructor\u003c?\u003e ctor : declaredCtors) {\n         if (ctor.getParameterTypes().length \u003d\u003d 0) {\n             _defaultConstructor \u003d _constructConstructor(ctor, true);\n         } else {\n             if (includeAll) {\n                 if (_constructors \u003d\u003d null) {\n                     _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n                 }\n                 _constructors.add(_constructConstructor(ctor, false));\n             }\n         }\n     }\n     if (_primaryMixIn !\u003d null) {\n         if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n             _addConstructorMixIns(_primaryMixIn);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (_defaultConstructor !\u003d null) {\n-            if (_annotationIntrospector.isIgnorableConstructor(_defaultConstructor)) {\n+            if (_annotationIntrospector.hasIgnoreMarker(_defaultConstructor)) {\n                 _defaultConstructor \u003d null;\n             }\n         }\n         if (_constructors !\u003d null) {\n             for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n-                if (_annotationIntrospector.isIgnorableConstructor(_constructors.get(i))) {\n+                if (_annotationIntrospector.hasIgnoreMarker(_constructors.get(i))) {\n                     _constructors.remove(i);\n                 }\n             }\n         }\n     }\n     _creatorMethods \u003d null;\n     if (includeAll) {\n         for (Method m : _class.getDeclaredMethods()) {\n             if (!Modifier.isStatic(m.getModifiers())) {\n                 continue;\n             }\n             int argCount \u003d m.getParameterTypes().length;\n             if (argCount \u003c 1) {\n                 continue;\n             }\n             if (_creatorMethods \u003d\u003d null) {\n                 _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n             }\n             _creatorMethods.add(_constructCreatorMethod(m));\n         }\n         if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n             _addFactoryMixIns(_primaryMixIn);\n         }\n         if (_annotationIntrospector !\u003d null) {\n             if (_creatorMethods !\u003d null) {\n                 for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n-                    if (_annotationIntrospector.isIgnorableMethod(_creatorMethods.get(i))) {\n+                    if (_annotationIntrospector.hasIgnoreMarker(_creatorMethods.get(i))) {\n                         _creatorMethods.remove(i);\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,63 @@\n+public void resolveCreators(boolean includeAll) {\n+    _constructors \u003d null;\n+    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n+    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n+        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n+            _defaultConstructor \u003d _constructConstructor(ctor, true);\n+        } else {\n+            if (includeAll) {\n+                if (_constructors \u003d\u003d null) {\n+                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n+                }\n+                _constructors.add(_constructConstructor(ctor, false));\n+            }\n+        }\n+    }\n+    if (_primaryMixIn !\u003d null) {\n+        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n+            _addConstructorMixIns(_primaryMixIn);\n+        }\n+    }\n+    if (_annotationIntrospector !\u003d null) {\n+        if (_defaultConstructor !\u003d null) {\n+            if (_annotationIntrospector.isIgnorableConstructor(_defaultConstructor)) {\n+                _defaultConstructor \u003d null;\n+            }\n+        }\n+        if (_constructors !\u003d null) {\n+            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n+                if (_annotationIntrospector.isIgnorableConstructor(_constructors.get(i))) {\n+                    _constructors.remove(i);\n+                }\n+            }\n+        }\n+    }\n+    _creatorMethods \u003d null;\n+    if (includeAll) {\n+        for (Method m : _class.getDeclaredMethods()) {\n+            if (!Modifier.isStatic(m.getModifiers())) {\n+                continue;\n+            }\n+            int argCount \u003d m.getParameterTypes().length;\n+            if (argCount \u003c 1) {\n+                continue;\n+            }\n+            if (_creatorMethods \u003d\u003d null) {\n+                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n+            }\n+            _creatorMethods.add(_constructCreatorMethod(m));\n+        }\n+        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n+            _addFactoryMixIns(_primaryMixIn);\n+        }\n+        if (_annotationIntrospector !\u003d null) {\n+            if (_creatorMethods !\u003d null) {\n+                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n+                    if (_annotationIntrospector.isIgnorableMethod(_creatorMethods.get(i))) {\n+                        _creatorMethods.remove(i);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void resolveCreators(boolean includeAll) {\n    _constructors \u003d null;\n    Constructor\u003c?\u003e[] declaredCtors \u003d _class.getDeclaredConstructors();\n    for (Constructor\u003c?\u003e ctor : declaredCtors) {\n        if (ctor.getParameterTypes().length \u003d\u003d 0) {\n            _defaultConstructor \u003d _constructConstructor(ctor, true);\n        } else {\n            if (includeAll) {\n                if (_constructors \u003d\u003d null) {\n                    _constructors \u003d new ArrayList\u003cAnnotatedConstructor\u003e(Math.max(10, declaredCtors.length));\n                }\n                _constructors.add(_constructConstructor(ctor, false));\n            }\n        }\n    }\n    if (_primaryMixIn !\u003d null) {\n        if (_defaultConstructor !\u003d null || _constructors !\u003d null) {\n            _addConstructorMixIns(_primaryMixIn);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (_defaultConstructor !\u003d null) {\n            if (_annotationIntrospector.isIgnorableConstructor(_defaultConstructor)) {\n                _defaultConstructor \u003d null;\n            }\n        }\n        if (_constructors !\u003d null) {\n            for (int i \u003d _constructors.size(); --i \u003e\u003d 0; ) {\n                if (_annotationIntrospector.isIgnorableConstructor(_constructors.get(i))) {\n                    _constructors.remove(i);\n                }\n            }\n        }\n    }\n    _creatorMethods \u003d null;\n    if (includeAll) {\n        for (Method m : _class.getDeclaredMethods()) {\n            if (!Modifier.isStatic(m.getModifiers())) {\n                continue;\n            }\n            int argCount \u003d m.getParameterTypes().length;\n            if (argCount \u003c 1) {\n                continue;\n            }\n            if (_creatorMethods \u003d\u003d null) {\n                _creatorMethods \u003d new ArrayList\u003cAnnotatedMethod\u003e(8);\n            }\n            _creatorMethods.add(_constructCreatorMethod(m));\n        }\n        if (_primaryMixIn !\u003d null \u0026\u0026 _creatorMethods !\u003d null) {\n            _addFactoryMixIns(_primaryMixIn);\n        }\n        if (_annotationIntrospector !\u003d null) {\n            if (_creatorMethods !\u003d null) {\n                for (int i \u003d _creatorMethods.size(); --i \u003e\u003d 0; ) {\n                    if (_annotationIntrospector.isIgnorableMethod(_creatorMethods.get(i))) {\n                        _creatorMethods.remove(i);\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 314,
      "functionName": "resolveCreators",
      "functionAnnotation": "",
      "functionDoc": "Initialization method that will find out all constructors\nand potential static factory methods the class has.\n\u003cp\u003e\nStarting with 1.2, it will also apply mix-in annotations,\nas per [JACKSON-76]\n\n@param includeAll If true, includes all creator methods; if false,\n  will only include the no-arguments \"default\" constructor\n"
    }
  }
}