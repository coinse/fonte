{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotatedClass.java",
  "functionName": "resolveMemberMethods",
  "functionId": "resolveMemberMethods",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
  "functionAnnotation": "",
  "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
  "functionStartLine": 419,
  "functionEndLine": 461,
  "numCommitsSeen": 27,
  "timeTaken": 1232,
  "changeHistory": [
    "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c",
    "201c8ffd7931aa552fe42f077e23917695faf29a",
    "1dcce980954c9acef708aa9a0a128f04564bdd25",
    "920bb4e447b7ff1419c926277ebac4c9406de0f5",
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c": "Ybodychange",
    "201c8ffd7931aa552fe42f077e23917695faf29a": "Yformatchange",
    "1dcce980954c9acef708aa9a0a128f04564bdd25": "Ybodychange",
    "920bb4e447b7ff1419c926277ebac4c9406de0f5": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c": {
      "type": "Ybodychange",
      "commitMessage": "Fixed [Issue-14]: parent types of mix-in annotations were not resolved for fields, methods\n",
      "commitDate": "4/28/12, 12:43 AM",
      "commitName": "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/27/12, 7:56 PM",
      "commitNameOld": "201c8ffd7931aa552fe42f077e23917695faf29a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveMemberMethods() {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(_class, _memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 414,
      "functionName": "resolveMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
      "diff": "@@ -1,32 +1,32 @@\n private void resolveMemberMethods() {\n     _memberMethods \u003d new AnnotatedMethodMap();\n     AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n     _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n     for (Class\u003c?\u003e cls : _superTypes) {\n         Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n         _addMemberMethods(cls, _memberMethods, mixin, mixins);\n     }\n     if (_mixInResolver !\u003d null) {\n         Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n         if (mixin !\u003d null) {\n-            _addMethodMixIns(_memberMethods, mixin, mixins);\n+            _addMethodMixIns(_class, _memberMethods, mixin, mixins);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (!mixins.isEmpty()) {\n             Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n             while (it.hasNext()) {\n                 AnnotatedMethod mixIn \u003d it.next();\n                 try {\n                     Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());\n                     if (m !\u003d null) {\n                         AnnotatedMethod am \u003d _constructMethod(m);\n                         _addMixOvers(mixIn.getAnnotated(), am, false);\n                         _memberMethods.add(am);\n                     }\n                 } catch (Exception e) {\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "201c8ffd7931aa552fe42f077e23917695faf29a": {
      "type": "Yformatchange",
      "commitMessage": "Add test for [Issue-14]\n",
      "commitDate": "4/27/12, 7:56 PM",
      "commitName": "201c8ffd7931aa552fe42f077e23917695faf29a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 12:33 PM",
      "commitNameOld": "1dcce980954c9acef708aa9a0a128f04564bdd25",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 92.27,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveMemberMethods() {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(_memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 414,
      "functionName": "resolveMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
      "diff": "",
      "extendedDetails": {}
    },
    "1dcce980954c9acef708aa9a0a128f04564bdd25": {
      "type": "Ybodychange",
      "commitMessage": "Bit more renaming for consistency\n",
      "commitDate": "1/26/12, 12:33 PM",
      "commitName": "1dcce980954c9acef708aa9a0a128f04564bdd25",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/25/12, 12:07 PM",
      "commitNameOld": "0410f9a80edfb1fe4c73badd0e4c0ccf34da3ebb",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void resolveMemberMethods() {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(_memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 414,
      "functionName": "resolveMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
      "diff": "@@ -1,32 +1,32 @@\n private void resolveMemberMethods() {\n     _memberMethods \u003d new AnnotatedMethodMap();\n     AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n     _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n     for (Class\u003c?\u003e cls : _superTypes) {\n         Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n         _addMemberMethods(cls, _memberMethods, mixin, mixins);\n     }\n     if (_mixInResolver !\u003d null) {\n         Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n         if (mixin !\u003d null) {\n             _addMethodMixIns(_memberMethods, mixin, mixins);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (!mixins.isEmpty()) {\n             Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n             while (it.hasNext()) {\n                 AnnotatedMethod mixIn \u003d it.next();\n                 try {\n-                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n+                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());\n                     if (m !\u003d null) {\n                         AnnotatedMethod am \u003d _constructMethod(m);\n                         _addMixOvers(mixIn.getAnnotated(), am, false);\n                         _memberMethods.add(am);\n                     }\n                 } catch (Exception e) {\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "920bb4e447b7ff1419c926277ebac4c9406de0f5": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Completed refactoring of AnnotatedClass, now fully lazily initialized\n",
      "commitDate": "1/22/12, 10:00 PM",
      "commitName": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Completed refactoring of AnnotatedClass, now fully lazily initialized\n",
          "commitDate": "1/22/12, 10:00 PM",
          "commitName": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 9:49 PM",
          "commitNameOld": "cad988161f95e549ba352037223574a90a5a255a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void resolveMemberMethods() {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(_memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 414,
          "functionName": "resolveMemberMethods",
          "functionAnnotation": "",
          "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
          "diff": "@@ -1,32 +1,32 @@\n-public void resolveMemberMethods(MethodFilter methodFilter) {\n+private void resolveMemberMethods() {\n     _memberMethods \u003d new AnnotatedMethodMap();\n     AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n-    _addMemberMethods(_class, methodFilter, _memberMethods, _primaryMixIn, mixins);\n+    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n     for (Class\u003c?\u003e cls : _superTypes) {\n         Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n-        _addMemberMethods(cls, methodFilter, _memberMethods, mixin, mixins);\n+        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n     }\n     if (_mixInResolver !\u003d null) {\n         Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n         if (mixin !\u003d null) {\n-            _addMethodMixIns(methodFilter, _memberMethods, mixin, mixins);\n+            _addMethodMixIns(_memberMethods, mixin, mixins);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (!mixins.isEmpty()) {\n             Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n             while (it.hasNext()) {\n                 AnnotatedMethod mixIn \u003d it.next();\n                 try {\n                     Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                     if (m !\u003d null) {\n                         AnnotatedMethod am \u003d _constructMethod(m);\n                         _addMixOvers(mixIn.getAnnotated(), am, false);\n                         _memberMethods.add(am);\n                     }\n                 } catch (Exception e) {\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[methodFilter-MethodFilter]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Completed refactoring of AnnotatedClass, now fully lazily initialized\n",
          "commitDate": "1/22/12, 10:00 PM",
          "commitName": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 9:49 PM",
          "commitNameOld": "cad988161f95e549ba352037223574a90a5a255a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void resolveMemberMethods() {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(_memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 414,
          "functionName": "resolveMemberMethods",
          "functionAnnotation": "",
          "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
          "diff": "@@ -1,32 +1,32 @@\n-public void resolveMemberMethods(MethodFilter methodFilter) {\n+private void resolveMemberMethods() {\n     _memberMethods \u003d new AnnotatedMethodMap();\n     AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n-    _addMemberMethods(_class, methodFilter, _memberMethods, _primaryMixIn, mixins);\n+    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n     for (Class\u003c?\u003e cls : _superTypes) {\n         Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n-        _addMemberMethods(cls, methodFilter, _memberMethods, mixin, mixins);\n+        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n     }\n     if (_mixInResolver !\u003d null) {\n         Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n         if (mixin !\u003d null) {\n-            _addMethodMixIns(methodFilter, _memberMethods, mixin, mixins);\n+            _addMethodMixIns(_memberMethods, mixin, mixins);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (!mixins.isEmpty()) {\n             Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n             while (it.hasNext()) {\n                 AnnotatedMethod mixIn \u003d it.next();\n                 try {\n                     Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                     if (m !\u003d null) {\n                         AnnotatedMethod am \u003d _constructMethod(m);\n                         _addMixOvers(mixIn.getAnnotated(), am, false);\n                         _memberMethods.add(am);\n                     }\n                 } catch (Exception e) {\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Completed refactoring of AnnotatedClass, now fully lazily initialized\n",
          "commitDate": "1/22/12, 10:00 PM",
          "commitName": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 9:49 PM",
          "commitNameOld": "cad988161f95e549ba352037223574a90a5a255a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void resolveMemberMethods() {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(_memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 414,
          "functionName": "resolveMemberMethods",
          "functionAnnotation": "",
          "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
          "diff": "@@ -1,32 +1,32 @@\n-public void resolveMemberMethods(MethodFilter methodFilter) {\n+private void resolveMemberMethods() {\n     _memberMethods \u003d new AnnotatedMethodMap();\n     AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n-    _addMemberMethods(_class, methodFilter, _memberMethods, _primaryMixIn, mixins);\n+    _addMemberMethods(_class, _memberMethods, _primaryMixIn, mixins);\n     for (Class\u003c?\u003e cls : _superTypes) {\n         Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n-        _addMemberMethods(cls, methodFilter, _memberMethods, mixin, mixins);\n+        _addMemberMethods(cls, _memberMethods, mixin, mixins);\n     }\n     if (_mixInResolver !\u003d null) {\n         Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n         if (mixin !\u003d null) {\n-            _addMethodMixIns(methodFilter, _memberMethods, mixin, mixins);\n+            _addMethodMixIns(_memberMethods, mixin, mixins);\n         }\n     }\n     if (_annotationIntrospector !\u003d null) {\n         if (!mixins.isEmpty()) {\n             Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n             while (it.hasNext()) {\n                 AnnotatedMethod mixIn \u003d it.next();\n                 try {\n                     Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                     if (m !\u003d null) {\n                         AnnotatedMethod am \u003d _constructMethod(m);\n                         _addMixOvers(mixIn.getAnnotated(), am, false);\n                         _memberMethods.add(am);\n                     }\n                 } catch (Exception e) {\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b": {
      "type": "Ydocchange",
      "commitMessage": "Start work on [JACKSON-754], \"annotation bundles\"\n",
      "commitDate": "1/16/12, 5:24 PM",
      "commitName": "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/29/11, 3:12 PM",
      "commitNameOld": "0344ce08eb33d9d3aeb6478ce0391368596eac04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "public void resolveMemberMethods(MethodFilter methodFilter) {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, methodFilter, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, methodFilter, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(methodFilter, _memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 388,
      "functionName": "resolveMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n@since 1.9\n",
        "newValue": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,32 @@\n+public void resolveMemberMethods(MethodFilter methodFilter) {\n+    _memberMethods \u003d new AnnotatedMethodMap();\n+    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n+    _addMemberMethods(_class, methodFilter, _memberMethods, _primaryMixIn, mixins);\n+    for (Class\u003c?\u003e cls : _superTypes) {\n+        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n+        _addMemberMethods(cls, methodFilter, _memberMethods, mixin, mixins);\n+    }\n+    if (_mixInResolver !\u003d null) {\n+        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n+        if (mixin !\u003d null) {\n+            _addMethodMixIns(methodFilter, _memberMethods, mixin, mixins);\n+        }\n+    }\n+    if (_annotationIntrospector !\u003d null) {\n+        if (!mixins.isEmpty()) {\n+            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n+            while (it.hasNext()) {\n+                AnnotatedMethod mixIn \u003d it.next();\n+                try {\n+                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n+                    if (m !\u003d null) {\n+                        AnnotatedMethod am \u003d _constructMethod(m);\n+                        _addMixOvers(mixIn.getAnnotated(), am, false);\n+                        _memberMethods.add(am);\n+                    }\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void resolveMemberMethods(MethodFilter methodFilter) {\n    _memberMethods \u003d new AnnotatedMethodMap();\n    AnnotatedMethodMap mixins \u003d new AnnotatedMethodMap();\n    _addMemberMethods(_class, methodFilter, _memberMethods, _primaryMixIn, mixins);\n    for (Class\u003c?\u003e cls : _superTypes) {\n        Class\u003c?\u003e mixin \u003d (_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(cls);\n        _addMemberMethods(cls, methodFilter, _memberMethods, mixin, mixins);\n    }\n    if (_mixInResolver !\u003d null) {\n        Class\u003c?\u003e mixin \u003d _mixInResolver.findMixInClassFor(Object.class);\n        if (mixin !\u003d null) {\n            _addMethodMixIns(methodFilter, _memberMethods, mixin, mixins);\n        }\n    }\n    if (_annotationIntrospector !\u003d null) {\n        if (!mixins.isEmpty()) {\n            Iterator\u003cAnnotatedMethod\u003e it \u003d mixins.iterator();\n            while (it.hasNext()) {\n                AnnotatedMethod mixIn \u003d it.next();\n                try {\n                    Method m \u003d Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getParameterClasses());\n                    if (m !\u003d null) {\n                        AnnotatedMethod am \u003d _constructMethod(m);\n                        _addMixOvers(mixIn.getAnnotated(), am, false);\n                        _memberMethods.add(am);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 403,
      "functionName": "resolveMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for resolving member method information: aggregating all non-static methods\nand combining annotations (to implement method-annotation inheritance)\n\n@param methodFilter Filter used to determine which methods to include\n@since 1.9\n"
    }
  }
}