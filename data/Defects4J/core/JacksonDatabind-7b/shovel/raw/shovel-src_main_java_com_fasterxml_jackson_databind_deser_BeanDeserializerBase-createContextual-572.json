{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerBase.java",
  "functionName": "createContextual",
  "functionId": "createContextual___ctxt-DeserializationContext__property-BeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
  "functionStartLine": 572,
  "functionEndLine": 643,
  "numCommitsSeen": 97,
  "timeTaken": 5458,
  "changeHistory": [
    "b85ddf03612c6fe36b27c3985ee54675d91c5a7d",
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
    "81b47350f3056180e16e43c41ce8b1230afc1dc8",
    "e05e352f53245160fe761b88665f11f67cef9d43",
    "6a540c1be655c27f0cb05eb85b796a119ae10407",
    "3ff534413a5cd24438082c49ccc062bc252a6009",
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
    "d14fb0772edb682a1ee97e07c8b2e71bc39e845b",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
    "2cd82cded3fb6d7c11af5ddac14eaad384959436",
    "15212e8d7438bd862574c652e0419879d8b720c4",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "557bcd3d55fa779e40251506d159468bfe96fe04",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b"
  ],
  "changeHistoryShort": {
    "b85ddf03612c6fe36b27c3985ee54675d91c5a7d": "Ybodychange",
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": "Ybodychange",
    "81b47350f3056180e16e43c41ce8b1230afc1dc8": "Ybodychange",
    "e05e352f53245160fe761b88665f11f67cef9d43": "Ybodychange",
    "6a540c1be655c27f0cb05eb85b796a119ae10407": "Yformatchange",
    "3ff534413a5cd24438082c49ccc062bc252a6009": "Ymultichange(Yannotationchange,Ydocchange)",
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2": "Ybodychange",
    "d14fb0772edb682a1ee97e07c8b2e71bc39e845b": "Ybodychange",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": "Ymultichange(Yannotationchange,Ydocchange)",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": "Yformatchange",
    "2cd82cded3fb6d7c11af5ddac14eaad384959436": "Yformatchange",
    "15212e8d7438bd862574c652e0419879d8b720c4": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ymultichange(Ymovefromfile,Ybodychange)",
    "557bcd3d55fa779e40251506d159468bfe96fe04": "Ybodychange",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": "Ybodychange",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b85ddf03612c6fe36b27c3985ee54675d91c5a7d": {
      "type": "Ybodychange",
      "commitMessage": "minor refactoring\n",
      "commitDate": "4/10/14, 9:17 AM",
      "commitName": "b85ddf03612c6fe36b27c3985ee54675d91c5a7d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/4/14, 8:20 PM",
      "commitNameOld": "03a49b173536b3811585006a331faed5a00f277b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 36.5,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (accessor !\u003d null \u0026\u0026 intr !\u003d null) {\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(accessor, objectIdInfo);\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                PropertyName propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + handledType().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp, resolver);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (accessor !\u003d null) {\n        String[] ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n            HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n            contextual \u003d contextual.withIgnorableProperties(newIgnored);\n        }\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 564,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
      "diff": "@@ -1,57 +1,58 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n-    String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n-    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n-        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n+    if (accessor !\u003d null \u0026\u0026 intr !\u003d null) {\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(accessor, objectIdInfo);\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 PropertyName propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + handledType().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp, resolver);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n-    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n-        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n-        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n+    if (accessor !\u003d null) {\n+        String[] ignorals \u003d intr.findPropertiesToIgnore(accessor);\n+        if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n+            HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n+            contextual \u003d contextual.withIgnorableProperties(newIgnored);\n+        }\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArrayDeserializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": {
      "type": "Ybodychange",
      "commitMessage": "Implementation of custom object id resolution.\n",
      "commitDate": "2/10/14, 7:59 AM",
      "commitName": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
      "commitAuthor": "Pascal Gélinas",
      "commitDateOld": "1/13/14, 7:07 AM",
      "commitNameOld": "d823407ab82164afdd14832fe5159c44d42d89ef",
      "commitAuthorOld": "Pascal Gélinas",
      "daysBetweenCommits": 28.04,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(accessor, objectIdInfo);\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                PropertyName propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + handledType().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp, resolver);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 559,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
      "diff": "@@ -1,56 +1,57 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n+            ObjectIdResolver resolver \u003d ctxt.objectIdResolverInstance(accessor, objectIdInfo);\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 PropertyName propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + handledType().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n-            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n+            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp, resolver);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArrayDeserializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "81b47350f3056180e16e43c41ce8b1230afc1dc8": {
      "type": "Ybodychange",
      "commitMessage": "Changes needed by core-change (for adding dup detection)\n",
      "commitDate": "9/24/13, 3:35 PM",
      "commitName": "81b47350f3056180e16e43c41ce8b1230afc1dc8",
      "commitAuthor": "Tatu",
      "commitDateOld": "9/5/13, 9:45 PM",
      "commitNameOld": "4f90dbca87b680cb10abdb0df5129491da3486d2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.74,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                PropertyName propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + handledType().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 554,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
      "diff": "@@ -1,56 +1,56 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 PropertyName propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n-                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + handledType().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArrayDeserializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e05e352f53245160fe761b88665f11f67cef9d43": {
      "type": "Ybodychange",
      "commitMessage": "Start making changes to support full PropertyName passing, not just String name\n",
      "commitDate": "7/25/13, 11:05 PM",
      "commitName": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 10:12 PM",
      "commitNameOld": "a455b53c75d4649461ba3e7fdcc625f2cd223202",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                PropertyName propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 550,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
      "diff": "@@ -1,56 +1,56 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-                String propName \u003d objectIdInfo.getPropertyName();\n+                PropertyName propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArrayDeserializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a540c1be655c27f0cb05eb85b796a119ae10407": {
      "type": "Yformatchange",
      "commitMessage": "Make delegating (de)serializer properly delegate resolve()\n",
      "commitDate": "3/3/13, 8:47 PM",
      "commitName": "6a540c1be655c27f0cb05eb85b796a119ae10407",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/13, 1:11 PM",
      "commitNameOld": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 552,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "3ff534413a5cd24438082c49ccc062bc252a6009": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "cleanup of eclipse warnings\n",
      "commitDate": "3/2/13, 1:36 PM",
      "commitName": "3ff534413a5cd24438082c49ccc062bc252a6009",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "cleanup of eclipse warnings\n",
          "commitDate": "3/2/13, 1:36 PM",
          "commitName": "3ff534413a5cd24438082c49ccc062bc252a6009",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/20/13, 7:52 PM",
          "commitNameOld": "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 9.74,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 521,
          "functionName": "createContextual",
          "functionAnnotation": "@Override",
          "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
          "diff": "@@ -1,55 +1,56 @@\n+@Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArrayDeserializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "cleanup of eclipse warnings\n",
          "commitDate": "3/2/13, 1:36 PM",
          "commitName": "3ff534413a5cd24438082c49ccc062bc252a6009",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/20/13, 7:52 PM",
          "commitNameOld": "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 9.74,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 521,
          "functionName": "createContextual",
          "functionAnnotation": "@Override",
          "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n",
          "diff": "@@ -1,55 +1,56 @@\n+@Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArrayDeserializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\nWe will also consider Shape transformations (read from Array) at this\npoint, since it may come from either Class definition or property.\n"
          }
        }
      ]
    },
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2": {
      "type": "Ybodychange",
      "commitMessage": "Improved handling of \"always-as-id\" references; might now actually be useful\n",
      "commitDate": "8/24/12, 1:33 PM",
      "commitName": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/30/12, 9:36 PM",
      "commitNameOld": "6bf829f329e7fe34fe2f336b98ce4a693d232da7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 24.66,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 509,
      "functionName": "createContextual",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,54 +1,55 @@\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n-        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n+        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n+            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArrayDeserializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d14fb0772edb682a1ee97e07c8b2e71bc39e845b": {
      "type": "Ybodychange",
      "commitMessage": "Completing [Issue-29], ability to (de)serialize POJOs to/from JSON Arrays, to condense output\n",
      "commitDate": "7/17/12, 6:49 PM",
      "commitName": "d14fb0772edb682a1ee97e07c8b2e71bc39e845b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/17/12, 7:57 AM",
      "commitNameOld": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 91.45,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArrayDeserializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 509,
      "functionName": "createContextual",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,54 @@\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n+    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n-        final AnnotatedMember accessor \u003d property.getMember();\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n+    JsonFormat.Shape shape \u003d null;\n+    if (accessor !\u003d null) {\n+        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n+        if (format !\u003d null) {\n+            shape \u003d format.getShape();\n+        }\n+    }\n+    if (shape \u003d\u003d null) {\n+        shape \u003d _serializationShape;\n+    }\n+    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n+        contextual \u003d contextual.asArrayDeserializer();\n+    }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
      "commitDate": "4/17/12, 7:57 AM",
      "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/19/12, 7:11 PM",
          "commitNameOld": "337feca4a10581197656d497b94cde602c1b16a7",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 28.53,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    return contextual;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 484,
          "functionName": "createContextual",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,42 +1,41 @@\n-@Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         final AnnotatedMember accessor \u003d property.getMember();\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/19/12, 7:11 PM",
          "commitNameOld": "337feca4a10581197656d497b94cde602c1b16a7",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 28.53,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    return contextual;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 484,
          "functionName": "createContextual",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,42 +1,41 @@\n-@Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         final AnnotatedMember accessor \u003d property.getMember();\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         contextual \u003d contextual.withObjectIdReader(oir);\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n         contextual \u003d contextual.withIgnorableProperties(newIgnored);\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
            "newValue": ""
          }
        }
      ]
    },
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": {
      "type": "Yformatchange",
      "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
      "commitDate": "3/5/12, 10:34 PM",
      "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/12, 8:27 PM",
      "commitNameOld": "137aa17e69865f896b48f5113e47ef3ee0794806",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 486,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "2cd82cded3fb6d7c11af5ddac14eaad384959436": {
      "type": "Yformatchange",
      "commitMessage": "some groundwork to eventually fix [JACKSON-798]\n",
      "commitDate": "3/3/12, 8:00 PM",
      "commitName": "2cd82cded3fb6d7c11af5ddac14eaad384959436",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/26/12, 5:02 PM",
      "commitNameOld": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.12,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 492,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "15212e8d7438bd862574c652e0419879d8b720c4": {
      "type": "Ybodychange",
      "commitMessage": "Completed [JACKSON-787] implementation; @JsonIgnoreProperties now usable for properties too\n",
      "commitDate": "2/20/12, 10:13 PM",
      "commitName": "15212e8d7438bd862574c652e0419879d8b720c4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/17/12, 10:40 PM",
      "commitNameOld": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    BeanDeserializerBase contextual \u003d this;\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        contextual \u003d contextual.withObjectIdReader(oir);\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 572,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
      "diff": "@@ -1,35 +1,42 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n-    if (property !\u003d null) {\n-        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n+    String[] ignorals \u003d null;\n+    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n+    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         final AnnotatedMember accessor \u003d property.getMember();\n+        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType idType;\n             SettableBeanProperty idProp;\n             ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 idProp \u003d findProperty(propName);\n                 if (idProp \u003d\u003d null) {\n                     throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                 }\n                 idType \u003d idProp.getType();\n                 idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n                 JavaType type \u003d ctxt.constructType(implClass);\n                 idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                 idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n+    BeanDeserializerBase contextual \u003d this;\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n-        return withObjectIdReader(oir);\n+        contextual \u003d contextual.withObjectIdReader(oir);\n     }\n-    return this;\n+    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n+        HashSet\u003cString\u003e newIgnored \u003d ArrayBuilders.setAndArray(contextual._ignorableProps, ignorals);\n+        contextual \u003d contextual.withIgnorableProperties(newIgnored);\n+    }\n+    return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/11/12, 2:34 PM",
          "commitNameOld": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 6.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        return withObjectIdReader(oir);\n    }\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 543,
          "functionName": "createContextual",
          "functionAnnotation": "@Override",
          "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
          "diff": "@@ -1,28 +1,35 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     if (property !\u003d null) {\n         final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         final AnnotatedMember accessor \u003d property.getMember();\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n-            ObjectIdGenerator\u003c?\u003e idGen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n-            JavaType type \u003d ctxt.constructType(implClass);\n-            JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+            JavaType idType;\n+            SettableBeanProperty idProp;\n+            ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-                idGen \u003d null;\n-                if (true)\n-                    throw new IllegalStateException(\"Not yet implemented!\");\n+                String propName \u003d objectIdInfo.getPropertyName();\n+                idProp \u003d findProperty(propName);\n+                if (idProp \u003d\u003d null) {\n+                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+                }\n+                idType \u003d idProp.getType();\n+                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n+                JavaType type \u003d ctxt.constructType(implClass);\n+                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+                idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n-            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);\n+            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         return withObjectIdReader(oir);\n     }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
            "oldMethodName": "createContextual",
            "newMethodName": "createContextual"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
          "commitDate": "2/17/12, 10:40 PM",
          "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/11/12, 2:34 PM",
          "commitNameOld": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 6.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType idType;\n            SettableBeanProperty idProp;\n            ObjectIdGenerator\u003c?\u003e idGen;\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                idProp \u003d findProperty(propName);\n                if (idProp \u003d\u003d null) {\n                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                }\n                idType \u003d idProp.getType();\n                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n            } else {\n                JavaType type \u003d ctxt.constructType(implClass);\n                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n                idProp \u003d null;\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n        }\n    }\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        return withObjectIdReader(oir);\n    }\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 543,
          "functionName": "createContextual",
          "functionAnnotation": "@Override",
          "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
          "diff": "@@ -1,28 +1,35 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     if (property !\u003d null) {\n         final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         final AnnotatedMember accessor \u003d property.getMember();\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n-            ObjectIdGenerator\u003c?\u003e idGen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n-            JavaType type \u003d ctxt.constructType(implClass);\n-            JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+            JavaType idType;\n+            SettableBeanProperty idProp;\n+            ObjectIdGenerator\u003c?\u003e idGen;\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-                idGen \u003d null;\n-                if (true)\n-                    throw new IllegalStateException(\"Not yet implemented!\");\n+                String propName \u003d objectIdInfo.getPropertyName();\n+                idProp \u003d findProperty(propName);\n+                if (idProp \u003d\u003d null) {\n+                    throw new IllegalArgumentException(\"Invalid Object Id definition for \" + getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+                }\n+                idType \u003d idProp.getType();\n+                idGen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n             } else {\n+                JavaType type \u003d ctxt.constructType(implClass);\n+                idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+                idProp \u003d null;\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n-            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);\n+            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser, idProp);\n         }\n     }\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         return withObjectIdReader(oir);\n     }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "557bcd3d55fa779e40251506d159468bfe96fe04": {
      "type": "Ybodychange",
      "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
      "commitDate": "2/10/12, 9:44 AM",
      "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/9/12, 9:58 PM",
      "commitNameOld": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e idGen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d ctxt.constructType(implClass);\n            JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                idGen \u003d null;\n                if (true)\n                    throw new IllegalStateException(\"Not yet implemented!\");\n            } else {\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);\n        }\n    }\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        return withObjectIdReader(oir);\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 562,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
      "diff": "@@ -1,28 +1,28 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     if (property !\u003d null) {\n         final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         final AnnotatedMember accessor \u003d property.getMember();\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e idGen;\n-            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n+            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d ctxt.constructType(implClass);\n             JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 idGen \u003d null;\n                 if (true)\n                     throw new IllegalStateException(\"Not yet implemented!\");\n             } else {\n-                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, implClass);\n+                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, objectIdInfo);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n             oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);\n         }\n     }\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         return withObjectIdReader(oir);\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": {
      "type": "Ybodychange",
      "commitMessage": "Starting work on supporting custom (property-based) object ids.\n",
      "commitDate": "2/9/12, 9:58 PM",
      "commitName": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/8/12, 10:07 PM",
      "commitNameOld": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e idGen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n            JavaType type \u003d ctxt.constructType(implClass);\n            JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                idGen \u003d null;\n                if (true)\n                    throw new IllegalStateException(\"Not yet implemented!\");\n            } else {\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, implClass);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);\n        }\n    }\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        return withObjectIdReader(oir);\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 562,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n",
      "diff": "@@ -1,28 +1,28 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     ObjectIdReader oir \u003d _objectIdReader;\n     if (property !\u003d null) {\n         final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n         final AnnotatedMember accessor \u003d property.getMember();\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e idGen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n             JavaType type \u003d ctxt.constructType(implClass);\n             JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 idGen \u003d null;\n                 if (true)\n                     throw new IllegalStateException(\"Not yet implemented!\");\n             } else {\n                 idGen \u003d ctxt.objectIdGeneratorInstance(accessor, implClass);\n             }\n             JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n-            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getProperty(), idGen, deser);\n+            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), idGen, deser);\n         }\n     }\n     if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n         return withObjectIdReader(oir);\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": {
      "type": "Yintroduced",
      "commitMessage": "Yay! First end-to-end version of Object Id handling...\n",
      "commitDate": "2/8/12, 10:07 PM",
      "commitName": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,28 @@\n+@Override\n+public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n+    ObjectIdReader oir \u003d _objectIdReader;\n+    if (property !\u003d null) {\n+        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n+        final AnnotatedMember accessor \u003d property.getMember();\n+        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n+        if (objectIdInfo !\u003d null) {\n+            ObjectIdGenerator\u003c?\u003e idGen;\n+            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n+            JavaType type \u003d ctxt.constructType(implClass);\n+            JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n+                idGen \u003d null;\n+                if (true)\n+                    throw new IllegalStateException(\"Not yet implemented!\");\n+            } else {\n+                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, implClass);\n+            }\n+            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n+            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getProperty(), idGen, deser);\n+        }\n+    }\n+    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n+        return withObjectIdReader(oir);\n+    }\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    ObjectIdReader oir \u003d _objectIdReader;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e idGen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n            JavaType type \u003d ctxt.constructType(implClass);\n            JavaType idType \u003d ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                idGen \u003d null;\n                if (true)\n                    throw new IllegalStateException(\"Not yet implemented!\");\n            } else {\n                idGen \u003d ctxt.objectIdGeneratorInstance(accessor, implClass);\n            }\n            JsonDeserializer\u003c?\u003e deser \u003d ctxt.findRootValueDeserializer(idType);\n            oir \u003d ObjectIdReader.construct(idType, objectIdInfo.getProperty(), idGen, deser);\n        }\n    }\n    if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n        return withObjectIdReader(oir);\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 562,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Although most of post-processing is done in resolve(), we only get\naccess to referring property\u0027s annotations here; and this is needed\nto support per-property ObjectIds.\n"
    }
  }
}