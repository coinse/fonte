{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerFactory.java",
  "functionName": "addBeanProps",
  "functionId": "addBeanProps___ctxt-DeserializationContext__beanDesc-BeanDescription__builder-BeanDeserializerBuilder",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
  "functionStartLine": 484,
  "functionEndLine": 603,
  "numCommitsSeen": 102,
  "timeTaken": 4207,
  "changeHistory": [
    "b009194c5f68fa4d773723113beeed3ae9308b9d",
    "86e513387716012f58d193c5e5b2bbe1e456baf3",
    "a53b4a6fee9339c62f0ed2b4e54514a9fe7fb146",
    "f4523c5d254948c573751f8537bf9608da01d044",
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
    "5639f3459976aa04e02da9f72af97a92adc6b7a9",
    "65c410c0c40724f763e0b4bce2db6d43bf078818",
    "19ab5808eb8e47662f1d55408fdb186320061f13",
    "fbd795bbbe05709b4164e2c5ec4731990091f5f2",
    "9db4d99c6c425b779f1bb79ad4db667702657600",
    "1dcce980954c9acef708aa9a0a128f04564bdd25",
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
    "289b58d10604feb7b709b91da6d314e0d6ac3b5d",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "b009194c5f68fa4d773723113beeed3ae9308b9d": "Ybodychange",
    "86e513387716012f58d193c5e5b2bbe1e456baf3": "Ybodychange",
    "a53b4a6fee9339c62f0ed2b4e54514a9fe7fb146": "Ybodychange",
    "f4523c5d254948c573751f8537bf9608da01d044": "Yformatchange",
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c": "Ybodychange",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": "Ybodychange",
    "5639f3459976aa04e02da9f72af97a92adc6b7a9": "Ybodychange",
    "65c410c0c40724f763e0b4bce2db6d43bf078818": "Ybodychange",
    "19ab5808eb8e47662f1d55408fdb186320061f13": "Ybodychange",
    "fbd795bbbe05709b4164e2c5ec4731990091f5f2": "Ybodychange",
    "9db4d99c6c425b779f1bb79ad4db667702657600": "Ybodychange",
    "1dcce980954c9acef708aa9a0a128f04564bdd25": "Ybodychange",
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455": "Ybodychange",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": "Ybodychange",
    "289b58d10604feb7b709b91da6d314e0d6ac3b5d": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b009194c5f68fa4d773723113beeed3ae9308b9d": {
      "type": "Ybodychange",
      "commitMessage": "Full fix for #318\n",
      "commitDate": "10/18/13, 11:52 PM",
      "commitName": "b009194c5f68fa4d773723113beeed3ae9308b9d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/26/13, 4:18 PM",
      "commitNameOld": "8bdd49b36c8c05483669f6bd50b3839016f78983",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 84.32,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (propDef.hasConstructorParameter()) {\n            final String name \u003d propDef.getName();\n            CreatorProperty cprop \u003d null;\n            if (creatorProps !\u003d null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (name.equals(cp.getName())) {\n                        cprop \u003d (CreatorProperty) cp;\n                        break;\n                    }\n                }\n            }\n            if (cprop \u003d\u003d null) {\n                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027 (in class \" + beanDesc.getBeanClass().getName() + \")\");\n            }\n            if (prop !\u003d null) {\n                cprop \u003d cprop.withFallbackSetter(prop);\n            }\n            prop \u003d cprop;\n            builder.addCreatorProperty(cprop);\n            continue;\n        }\n        if (prop !\u003d null) {\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\n            if (views \u003d\u003d null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views \u003d NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 479,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,77 +1,82 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n     for (BeanPropertyDefinition propDef : propDefs) {\n         SettableBeanProperty prop \u003d null;\n-        if (propDef.hasConstructorParameter()) {\n-            final String name \u003d propDef.getName();\n-            if (creatorProps !\u003d null) {\n-                for (SettableBeanProperty cp : creatorProps) {\n-                    if (name.equals(cp.getName())) {\n-                        prop \u003d cp;\n-                        break;\n-                    }\n-                }\n-            }\n-            if (prop \u003d\u003d null) {\n-                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027 (in class \" + beanDesc.getBeanClass().getName() + \")\");\n-            }\n-            builder.addCreatorProperty(prop);\n-            continue;\n-        }\n         if (propDef.hasSetter()) {\n             Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (propDef.hasField()) {\n             Type propertyType \u003d propDef.getField().getGenericType();\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n             AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                 prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n+        if (propDef.hasConstructorParameter()) {\n+            final String name \u003d propDef.getName();\n+            CreatorProperty cprop \u003d null;\n+            if (creatorProps !\u003d null) {\n+                for (SettableBeanProperty cp : creatorProps) {\n+                    if (name.equals(cp.getName())) {\n+                        cprop \u003d (CreatorProperty) cp;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (cprop \u003d\u003d null) {\n+                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027 (in class \" + beanDesc.getBeanClass().getName() + \")\");\n+            }\n+            if (prop !\u003d null) {\n+                cprop \u003d cprop.withFallbackSetter(prop);\n+            }\n+            prop \u003d cprop;\n+            builder.addCreatorProperty(cprop);\n+            continue;\n+        }\n         if (prop !\u003d null) {\n             Class\u003c?\u003e[] views \u003d propDef.findViews();\n             if (views \u003d\u003d null) {\n                 if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                     views \u003d NO_VIEWS;\n                 }\n             }\n             prop.setViews(views);\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86e513387716012f58d193c5e5b2bbe1e456baf3": {
      "type": "Ybodychange",
      "commitMessage": "improve error message\n",
      "commitDate": "2/12/13, 4:11 PM",
      "commitName": "86e513387716012f58d193c5e5b2bbe1e456baf3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/21/12, 2:18 PM",
      "commitNameOld": "a53b4a6fee9339c62f0ed2b4e54514a9fe7fb146",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 83.08,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasConstructorParameter()) {\n            final String name \u003d propDef.getName();\n            if (creatorProps !\u003d null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (name.equals(cp.getName())) {\n                        prop \u003d cp;\n                        break;\n                    }\n                }\n            }\n            if (prop \u003d\u003d null) {\n                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027 (in class \" + beanDesc.getBeanClass().getName() + \")\");\n            }\n            builder.addCreatorProperty(prop);\n            continue;\n        }\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\n            if (views \u003d\u003d null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views \u003d NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 479,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,77 +1,77 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n     for (BeanPropertyDefinition propDef : propDefs) {\n         SettableBeanProperty prop \u003d null;\n         if (propDef.hasConstructorParameter()) {\n             final String name \u003d propDef.getName();\n             if (creatorProps !\u003d null) {\n                 for (SettableBeanProperty cp : creatorProps) {\n                     if (name.equals(cp.getName())) {\n                         prop \u003d cp;\n                         break;\n                     }\n                 }\n             }\n             if (prop \u003d\u003d null) {\n-                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027\");\n+                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027 (in class \" + beanDesc.getBeanClass().getName() + \")\");\n             }\n             builder.addCreatorProperty(prop);\n             continue;\n         }\n         if (propDef.hasSetter()) {\n             Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (propDef.hasField()) {\n             Type propertyType \u003d propDef.getField().getGenericType();\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n             AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                 prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n         if (prop !\u003d null) {\n             Class\u003c?\u003e[] views \u003d propDef.findViews();\n             if (views \u003d\u003d null) {\n                 if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                     views \u003d NO_VIEWS;\n                 }\n             }\n             prop.setViews(views);\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a53b4a6fee9339c62f0ed2b4e54514a9fe7fb146": {
      "type": "Ybodychange",
      "commitMessage": "minor change to help pinpoint [Issue#113]\n",
      "commitDate": "11/21/12, 2:18 PM",
      "commitName": "a53b4a6fee9339c62f0ed2b4e54514a9fe7fb146",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/6/12, 10:45 AM",
      "commitNameOld": "0e114114d330caaf6a56e63ab4d8a3ee1ba3e350",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 46.19,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasConstructorParameter()) {\n            final String name \u003d propDef.getName();\n            if (creatorProps !\u003d null) {\n                for (SettableBeanProperty cp : creatorProps) {\n                    if (name.equals(cp.getName())) {\n                        prop \u003d cp;\n                        break;\n                    }\n                }\n            }\n            if (prop \u003d\u003d null) {\n                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027\");\n            }\n            builder.addCreatorProperty(prop);\n            continue;\n        }\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\n            if (views \u003d\u003d null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views \u003d NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 479,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,75 +1,77 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n     for (BeanPropertyDefinition propDef : propDefs) {\n         SettableBeanProperty prop \u003d null;\n         if (propDef.hasConstructorParameter()) {\n             final String name \u003d propDef.getName();\n-            for (SettableBeanProperty cp : creatorProps) {\n-                if (name.equals(cp.getName())) {\n-                    prop \u003d cp;\n-                    break;\n+            if (creatorProps !\u003d null) {\n+                for (SettableBeanProperty cp : creatorProps) {\n+                    if (name.equals(cp.getName())) {\n+                        prop \u003d cp;\n+                        break;\n+                    }\n                 }\n             }\n             if (prop \u003d\u003d null) {\n                 throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027\");\n             }\n             builder.addCreatorProperty(prop);\n             continue;\n         }\n         if (propDef.hasSetter()) {\n             Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (propDef.hasField()) {\n             Type propertyType \u003d propDef.getField().getGenericType();\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n             AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                 prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n         if (prop !\u003d null) {\n             Class\u003c?\u003e[] views \u003d propDef.findViews();\n             if (views \u003d\u003d null) {\n                 if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                     views \u003d NO_VIEWS;\n                 }\n             }\n             prop.setViews(views);\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f4523c5d254948c573751f8537bf9608da01d044": {
      "type": "Yformatchange",
      "commitMessage": "...\n",
      "commitDate": "8/24/12, 9:00 PM",
      "commitName": "f4523c5d254948c573751f8537bf9608da01d044",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/23/12, 8:39 PM",
      "commitNameOld": "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 32.01,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasConstructorParameter()) {\n            final String name \u003d propDef.getName();\n            for (SettableBeanProperty cp : creatorProps) {\n                if (name.equals(cp.getName())) {\n                    prop \u003d cp;\n                    break;\n                }\n            }\n            if (prop \u003d\u003d null) {\n                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027\");\n            }\n            builder.addCreatorProperty(prop);\n            continue;\n        }\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\n            if (views \u003d\u003d null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views \u003d NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 476,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c": {
      "type": "Ybodychange",
      "commitMessage": "Solidify POJOs-as-array functionality\n",
      "commitDate": "7/23/12, 8:39 PM",
      "commitName": "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/19/12, 6:09 PM",
      "commitNameOld": "2481fa4b55203e9e8b2fbfddf9b146f720507d8b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 126.1,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasConstructorParameter()) {\n            final String name \u003d propDef.getName();\n            for (SettableBeanProperty cp : creatorProps) {\n                if (name.equals(cp.getName())) {\n                    prop \u003d cp;\n                    break;\n                }\n            }\n            if (prop \u003d\u003d null) {\n                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027\");\n            }\n            builder.addCreatorProperty(prop);\n            continue;\n        }\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\n            if (views \u003d\u003d null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views \u003d NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 476,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,64 +1,75 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+    final SettableBeanProperty[] creatorProps \u003d builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n     for (BeanPropertyDefinition propDef : propDefs) {\n+        SettableBeanProperty prop \u003d null;\n         if (propDef.hasConstructorParameter()) {\n-            builder.addCreatorProperty(propDef);\n+            final String name \u003d propDef.getName();\n+            for (SettableBeanProperty cp : creatorProps) {\n+                if (name.equals(cp.getName())) {\n+                    prop \u003d cp;\n+                    break;\n+                }\n+            }\n+            if (prop \u003d\u003d null) {\n+                throw ctxt.mappingException(\"Could not find creator property with name \u0027\" + name + \"\u0027\");\n+            }\n+            builder.addCreatorProperty(prop);\n             continue;\n         }\n-        SettableBeanProperty prop \u003d null;\n         if (propDef.hasSetter()) {\n             Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (propDef.hasField()) {\n             Type propertyType \u003d propDef.getField().getGenericType();\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n             AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                 prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n         if (prop !\u003d null) {\n             Class\u003c?\u003e[] views \u003d propDef.findViews();\n             if (views \u003d\u003d null) {\n                 if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                     views \u003d NO_VIEWS;\n                 }\n             }\n             prop.setViews(views);\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-777] (renamed SerializationConfig.Feature, DeserializationConfig.Feature); various other restructure\n",
      "commitDate": "2/2/12, 11:30 AM",
      "commitName": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/1/12, 10:18 PM",
      "commitNameOld": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.55,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        if (propDef.hasConstructorParameter()) {\n            builder.addCreatorProperty(propDef);\n            continue;\n        }\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\n            if (views \u003d\u003d null) {\n                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                    views \u003d NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 362,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,64 +1,64 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n-    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n+    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n     for (BeanPropertyDefinition propDef : propDefs) {\n         if (propDef.hasConstructorParameter()) {\n             builder.addCreatorProperty(propDef);\n             continue;\n         }\n         SettableBeanProperty prop \u003d null;\n         if (propDef.hasSetter()) {\n             Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (propDef.hasField()) {\n             Type propertyType \u003d propDef.getField().getGenericType();\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n             AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                 prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n         if (prop !\u003d null) {\n             Class\u003c?\u003e[] views \u003d propDef.findViews();\n             if (views \u003d\u003d null) {\n-                if (!ctxt.isEnabled(MapperConfig.Feature.DEFAULT_VIEW_INCLUSION)) {\n+                if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                     views \u003d NO_VIEWS;\n                 }\n             }\n             prop.setViews(views);\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5639f3459976aa04e02da9f72af97a92adc6b7a9": {
      "type": "Ybodychange",
      "commitMessage": "Completed [JACKSON-608] (Json Views for deserialization), with tests\n",
      "commitDate": "1/27/12, 10:33 PM",
      "commitName": "5639f3459976aa04e02da9f72af97a92adc6b7a9",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/27/12, 8:44 PM",
      "commitNameOld": "65c410c0c40724f763e0b4bce2db6d43bf078818",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        if (propDef.hasConstructorParameter()) {\n            builder.addCreatorProperty(propDef);\n            continue;\n        }\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            Class\u003c?\u003e[] views \u003d propDef.findViews();\n            if (views \u003d\u003d null) {\n                if (!ctxt.isEnabled(MapperConfig.Feature.DEFAULT_VIEW_INCLUSION)) {\n                    views \u003d NO_VIEWS;\n                }\n            }\n            prop.setViews(views);\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 361,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,58 +1,64 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n     for (BeanPropertyDefinition propDef : propDefs) {\n         if (propDef.hasConstructorParameter()) {\n             builder.addCreatorProperty(propDef);\n             continue;\n         }\n         SettableBeanProperty prop \u003d null;\n         if (propDef.hasSetter()) {\n             Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (propDef.hasField()) {\n             Type propertyType \u003d propDef.getField().getGenericType();\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n             AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                 prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n         if (prop !\u003d null) {\n-            prop.setViews(propDef.findViews());\n+            Class\u003c?\u003e[] views \u003d propDef.findViews();\n+            if (views \u003d\u003d null) {\n+                if (!ctxt.isEnabled(MapperConfig.Feature.DEFAULT_VIEW_INCLUSION)) {\n+                    views \u003d NO_VIEWS;\n+                }\n+            }\n+            prop.setViews(views);\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65c410c0c40724f763e0b4bce2db6d43bf078818": {
      "type": "Ybodychange",
      "commitMessage": "refactoring\n",
      "commitDate": "1/27/12, 8:44 PM",
      "commitName": "65c410c0c40724f763e0b4bce2db6d43bf078818",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 10:26 PM",
      "commitNameOld": "19ab5808eb8e47662f1d55408fdb186320061f13",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        if (propDef.hasConstructorParameter()) {\n            builder.addCreatorProperty(propDef);\n            continue;\n        }\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            prop.setViews(propDef.findViews());\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 359,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,58 +1,58 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n     for (BeanPropertyDefinition propDef : propDefs) {\n         if (propDef.hasConstructorParameter()) {\n             builder.addCreatorProperty(propDef);\n             continue;\n         }\n         SettableBeanProperty prop \u003d null;\n         if (propDef.hasSetter()) {\n             Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (propDef.hasField()) {\n             Type propertyType \u003d propDef.getField().getGenericType();\n             prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n         } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n             AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                 prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n         if (prop !\u003d null) {\n-            prop.setViews(propDef.getViews());\n+            prop.setViews(propDef.findViews());\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "19ab5808eb8e47662f1d55408fdb186320061f13": {
      "type": "Ybodychange",
      "commitMessage": "Getting back to implement deserialization-with-view\n",
      "commitDate": "1/26/12, 10:26 PM",
      "commitName": "19ab5808eb8e47662f1d55408fdb186320061f13",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 10:02 PM",
      "commitNameOld": "fbd795bbbe05709b4164e2c5ec4731990091f5f2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition propDef : propDefs) {\n        if (propDef.hasConstructorParameter()) {\n            builder.addCreatorProperty(propDef);\n            continue;\n        }\n        SettableBeanProperty prop \u003d null;\n        if (propDef.hasSetter()) {\n            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (propDef.hasField()) {\n            Type propertyType \u003d propDef.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n            AnnotatedMethod getter \u003d propDef.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n            }\n        }\n        if (prop !\u003d null) {\n            prop.setViews(propDef.getViews());\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 359,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,57 +1,58 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n     List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n     }\n-    for (BeanPropertyDefinition property : propDefs) {\n-        if (property.hasConstructorParameter()) {\n-            builder.addCreatorProperty(property);\n+    for (BeanPropertyDefinition propDef : propDefs) {\n+        if (propDef.hasConstructorParameter()) {\n+            builder.addCreatorProperty(propDef);\n             continue;\n         }\n         SettableBeanProperty prop \u003d null;\n-        if (property.hasSetter()) {\n-            Type propertyType \u003d property.getSetter().getGenericParameterType(0);\n-            prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n-        } else if (property.hasField()) {\n-            Type propertyType \u003d property.getField().getGenericType();\n-            prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n-        } else if (useGettersAsSetters \u0026\u0026 property.hasGetter()) {\n-            AnnotatedMethod getter \u003d property.getGetter();\n+        if (propDef.hasSetter()) {\n+            Type propertyType \u003d propDef.getSetter().getGenericParameterType(0);\n+            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n+        } else if (propDef.hasField()) {\n+            Type propertyType \u003d propDef.getField().getGenericType();\n+            prop \u003d constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n+        } else if (useGettersAsSetters \u0026\u0026 propDef.hasGetter()) {\n+            AnnotatedMethod getter \u003d propDef.getGetter();\n             Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n             if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n-                prop \u003d constructSetterlessProperty(ctxt, beanDesc, property);\n+                prop \u003d constructSetterlessProperty(ctxt, beanDesc, propDef);\n             }\n         }\n         if (prop !\u003d null) {\n+            prop.setViews(propDef.getViews());\n             builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fbd795bbbe05709b4164e2c5ec4731990091f5f2": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "1/26/12, 10:02 PM",
      "commitName": "fbd795bbbe05709b4164e2c5ec4731990091f5f2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 1:42 PM",
      "commitNameOld": "69e3ed44510efa3f31c52b82171884db82c7f59c",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.35,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n        }\n    }\n    for (BeanPropertyDefinition property : propDefs) {\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        SettableBeanProperty prop \u003d null;\n        if (property.hasSetter()) {\n            Type propertyType \u003d property.getSetter().getGenericParameterType(0);\n            prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n        } else if (property.hasField()) {\n            Type propertyType \u003d property.getField().getGenericType();\n            prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n        } else if (useGettersAsSetters \u0026\u0026 property.hasGetter()) {\n            AnnotatedMethod getter \u003d property.getGetter();\n            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n                prop \u003d constructSetterlessProperty(ctxt, beanDesc, property);\n            }\n        }\n        if (prop !\u003d null) {\n            builder.addProperty(prop);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 358,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,79 +1,57 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n-    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n-    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n-    for (BeanPropertyDefinition property : props) {\n-        String name \u003d property.getName();\n-        if (ignored.contains(name)) {\n-            continue;\n+    final boolean useGettersAsSetters \u003d (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperConfig.Feature.AUTO_DETECT_GETTERS));\n+    List\u003cBeanPropertyDefinition\u003e propDefs \u003d filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n+    if (_factoryConfig.hasDeserializerModifiers()) {\n+        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+            propDefs \u003d mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n         }\n+    }\n+    for (BeanPropertyDefinition property : propDefs) {\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n-        Class\u003c?\u003e rawPropertyType;\n-        Type propertyType;\n-        AnnotatedMethod setter \u003d property.getSetter();\n-        if (setter !\u003d null) {\n-            rawPropertyType \u003d setter.getRawParameterType(0);\n-            propertyType \u003d setter.getGenericParameterType(0);\n-        } else {\n-            AnnotatedField field \u003d property.getField();\n-            if (field !\u003d null) {\n-                rawPropertyType \u003d field.getRawType();\n-                propertyType \u003d field.getGenericType();\n-            } else {\n-                continue;\n+        SettableBeanProperty prop \u003d null;\n+        if (property.hasSetter()) {\n+            Type propertyType \u003d property.getSetter().getGenericParameterType(0);\n+            prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n+        } else if (property.hasField()) {\n+            Type propertyType \u003d property.getField().getGenericType();\n+            prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n+        } else if (useGettersAsSetters \u0026\u0026 property.hasGetter()) {\n+            AnnotatedMethod getter \u003d property.getGetter();\n+            Class\u003c?\u003e rawPropertyType \u003d getter.getRawType();\n+            if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {\n+                prop \u003d constructSetterlessProperty(ctxt, beanDesc, property);\n             }\n         }\n-        if (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n-            builder.addIgnorable(name);\n-        } else {\n-            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n-            if (prop !\u003d null) {\n-                builder.addProperty(prop);\n-            }\n-        }\n-    }\n-    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n-        for (BeanPropertyDefinition property : props) {\n-            if (property.hasGetter()) {\n-                String name \u003d property.getName();\n-                if (builder.hasProperty(name) || ignored.contains(name)) {\n-                    continue;\n-                }\n-                AnnotatedMethod getter \u003d property.getGetter();\n-                Class\u003c?\u003e rt \u003d getter.getRawType();\n-                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n-                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n-                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n-                    }\n-                }\n-            }\n+        if (prop !\u003d null) {\n+            builder.addProperty(prop);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9db4d99c6c425b779f1bb79ad4db667702657600": {
      "type": "Ybodychange",
      "commitMessage": "Yet more refactoring: making more use of BeanPropertyDefinition\n",
      "commitDate": "1/26/12, 1:07 PM",
      "commitName": "9db4d99c6c425b779f1bb79ad4db667702657600",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/26/12, 12:33 PM",
      "commitNameOld": "1dcce980954c9acef708aa9a0a128f04564bdd25",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        Class\u003c?\u003e rawPropertyType;\n        Type propertyType;\n        AnnotatedMethod setter \u003d property.getSetter();\n        if (setter !\u003d null) {\n            rawPropertyType \u003d setter.getRawParameterType(0);\n            propertyType \u003d setter.getGenericParameterType(0);\n        } else {\n            AnnotatedField field \u003d property.getField();\n            if (field !\u003d null) {\n                rawPropertyType \u003d field.getRawType();\n                propertyType \u003d field.getGenericType();\n            } else {\n                continue;\n            }\n        }\n        if (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n            builder.addIgnorable(name);\n        } else {\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 890,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,79 +1,79 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n-        AnnotatedMember accessor;\n         Class\u003c?\u003e rawPropertyType;\n         Type propertyType;\n-        if (property.hasSetter()) {\n-            AnnotatedMethod setter \u003d property.getSetter();\n+        AnnotatedMethod setter \u003d property.getSetter();\n+        if (setter !\u003d null) {\n             rawPropertyType \u003d setter.getRawParameterType(0);\n             propertyType \u003d setter.getGenericParameterType(0);\n-            accessor \u003d setter;\n-        } else if (property.hasField()) {\n-            accessor \u003d property.getField();\n-            rawPropertyType \u003d accessor.getRawType();\n-            propertyType \u003d accessor.getGenericType();\n         } else {\n-            continue;\n+            AnnotatedField field \u003d property.getField();\n+            if (field !\u003d null) {\n+                rawPropertyType \u003d field.getRawType();\n+                propertyType \u003d field.getGenericType();\n+            } else {\n+                continue;\n+            }\n         }\n         if (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n             builder.addIgnorable(name);\n         } else {\n-            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, accessor, propertyType);\n+            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, property, propertyType);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n     if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                         builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1dcce980954c9acef708aa9a0a128f04564bdd25": {
      "type": "Ybodychange",
      "commitMessage": "Bit more renaming for consistency\n",
      "commitDate": "1/26/12, 12:33 PM",
      "commitName": "1dcce980954c9acef708aa9a0a128f04564bdd25",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/26/12, 12:01 PM",
      "commitNameOld": "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        AnnotatedMember accessor;\n        Class\u003c?\u003e rawPropertyType;\n        Type propertyType;\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            rawPropertyType \u003d setter.getRawParameterType(0);\n            propertyType \u003d setter.getGenericParameterType(0);\n            accessor \u003d setter;\n        } else if (property.hasField()) {\n            accessor \u003d property.getField();\n            rawPropertyType \u003d accessor.getRawType();\n            propertyType \u003d accessor.getGenericType();\n        } else {\n            continue;\n        }\n        if (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n            builder.addIgnorable(name);\n        } else {\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, accessor, propertyType);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 888,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,79 +1,79 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n         AnnotatedMember accessor;\n         Class\u003c?\u003e rawPropertyType;\n         Type propertyType;\n         if (property.hasSetter()) {\n             AnnotatedMethod setter \u003d property.getSetter();\n-            rawPropertyType \u003d setter.getParameterClass(0);\n-            propertyType \u003d setter.getParameterType(0);\n+            rawPropertyType \u003d setter.getRawParameterType(0);\n+            propertyType \u003d setter.getGenericParameterType(0);\n             accessor \u003d setter;\n         } else if (property.hasField()) {\n             accessor \u003d property.getField();\n             rawPropertyType \u003d accessor.getRawType();\n             propertyType \u003d accessor.getGenericType();\n         } else {\n             continue;\n         }\n         if (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n             builder.addIgnorable(name);\n         } else {\n             SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, accessor, propertyType);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n     if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                         builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "1/26/12, 12:01 PM",
      "commitName": "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 5:01 PM",
      "commitNameOld": "e14295471644955129d9f1a70a66207e7ee50856",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        AnnotatedMember accessor;\n        Class\u003c?\u003e rawPropertyType;\n        Type propertyType;\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            rawPropertyType \u003d setter.getParameterClass(0);\n            propertyType \u003d setter.getParameterType(0);\n            accessor \u003d setter;\n        } else if (property.hasField()) {\n            accessor \u003d property.getField();\n            rawPropertyType \u003d accessor.getRawType();\n            propertyType \u003d accessor.getGenericType();\n        } else {\n            continue;\n        }\n        if (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n            builder.addIgnorable(name);\n        } else {\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, accessor, propertyType);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 888,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,81 +1,79 @@\n protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n+        AnnotatedMember accessor;\n+        Class\u003c?\u003e rawPropertyType;\n+        Type propertyType;\n         if (property.hasSetter()) {\n             AnnotatedMethod setter \u003d property.getSetter();\n-            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n-            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n-                builder.addIgnorable(name);\n-                continue;\n-            }\n-            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, setter);\n-            if (prop !\u003d null) {\n-                builder.addProperty(prop);\n-            }\n+            rawPropertyType \u003d setter.getParameterClass(0);\n+            propertyType \u003d setter.getParameterType(0);\n+            accessor \u003d setter;\n+        } else if (property.hasField()) {\n+            accessor \u003d property.getField();\n+            rawPropertyType \u003d accessor.getRawType();\n+            propertyType \u003d accessor.getGenericType();\n+        } else {\n             continue;\n         }\n-        if (property.hasField()) {\n-            AnnotatedField field \u003d property.getField();\n-            Class\u003c?\u003e type \u003d field.getRawType();\n-            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n-                builder.addIgnorable(name);\n-                continue;\n-            }\n-            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, field);\n+        if (isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n+            builder.addIgnorable(name);\n+        } else {\n+            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, accessor, propertyType);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n     if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                         builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, setter);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n            continue;\n        }\n        if (property.hasField()) {\n            AnnotatedField field \u003d property.getField();\n            Class\u003c?\u003e type \u003d field.getRawType();\n            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, field);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 999,
          "functionName": "addBeanProps",
          "functionAnnotation": "",
          "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
          "diff": "@@ -1,81 +1,81 @@\n-protected void addBeanProps(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n-        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n+        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n         if (property.hasSetter()) {\n             AnnotatedMethod setter \u003d property.getSetter();\n             Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n-            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n+            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n-            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n+            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, setter);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n             continue;\n         }\n         if (property.hasField()) {\n             AnnotatedField field \u003d property.getField();\n             Class\u003c?\u003e type \u003d field.getRawType();\n-            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n+            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n-            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n+            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, field);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n-    if (config.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n+    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n-                        builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n+                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, beanDesc-BeanDescription, builder-BeanDeserializerBuilder]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription, builder-BeanDeserializerBuilder]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, setter);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n            continue;\n        }\n        if (property.hasField()) {\n            AnnotatedField field \u003d property.getField();\n            Class\u003c?\u003e type \u003d field.getRawType();\n            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, field);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 999,
          "functionName": "addBeanProps",
          "functionAnnotation": "",
          "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
          "diff": "@@ -1,81 +1,81 @@\n-protected void addBeanProps(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n-        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n+        builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n         if (property.hasSetter()) {\n             AnnotatedMethod setter \u003d property.getSetter();\n             Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n-            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n+            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n-            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n+            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, setter);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n             continue;\n         }\n         if (property.hasField()) {\n             AnnotatedField field \u003d property.getField();\n             Class\u003c?\u003e type \u003d field.getRawType();\n-            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n+            if (isIgnorableType(ctxt.getConfig(), beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n-            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n+            SettableBeanProperty prop \u003d constructSettableProperty(ctxt, beanDesc, name, field);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n-    if (config.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n+    if (ctxt.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n-                        builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n+                        builder.addProperty(constructSetterlessProperty(ctxt, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n            continue;\n        }\n        if (property.hasField()) {\n            AnnotatedField field \u003d property.getField();\n            Class\u003c?\u003e type \u003d field.getRawType();\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (config.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1020,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,81 +1,81 @@\n-protected void addBeanProps(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+protected void addBeanProps(DeserializationConfig config, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n         if (property.hasSetter()) {\n             AnnotatedMethod setter \u003d property.getSetter();\n             Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n             if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n             SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n             continue;\n         }\n         if (property.hasField()) {\n             AnnotatedField field \u003d property.getField();\n             Class\u003c?\u003e type \u003d field.getRawType();\n             if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n             SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n     if (config.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                         builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, beanDesc-BasicBeanDescription, builder-BeanDeserializerBuilder]",
        "newValue": "[config-DeserializationConfig, beanDesc-BeanDescription, builder-BeanDeserializerBuilder]"
      }
    },
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": {
      "type": "Ybodychange",
      "commitMessage": "Completed major rewrite of handling of on/off features for ObjectMapper/SerConfig/DeserConfig\n",
      "commitDate": "1/19/12, 12:31 PM",
      "commitName": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/17/12, 5:09 PM",
      "commitNameOld": "4489c26bd4384249f198cc052bfb54eeffd4ae23",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n            continue;\n        }\n        if (property.hasField()) {\n            AnnotatedField field \u003d property.getField();\n            Class\u003c?\u003e type \u003d field.getRawType();\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (config.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1008,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,81 +1,81 @@\n protected void addBeanProps(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n     AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n     if (anySetter !\u003d null) {\n         builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n     }\n     if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n         if (property.hasSetter()) {\n             AnnotatedMethod setter \u003d property.getSetter();\n             Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n             if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n             SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n             continue;\n         }\n         if (property.hasField()) {\n             AnnotatedField field \u003d property.getField();\n             Class\u003c?\u003e type \u003d field.getRawType();\n             if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n             SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n-    if (config.isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n+    if (config.isEnabled(MapperConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                         builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "289b58d10604feb7b709b91da6d314e0d6ac3b5d": {
      "type": "Ybodychange",
      "commitMessage": "Improve ValueInstantiator interface to pass enough information to properly construct types (i.e. give DeserializationConfig)\n",
      "commitDate": "12/27/11, 10:34 PM",
      "commitName": "289b58d10604feb7b709b91da6d314e0d6ac3b5d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/25/11, 2:23 PM",
      "commitNameOld": "c601e6397ae0b92843e07e887dfad28bdb42a5b8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.34,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void addBeanProps(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n    }\n    if (anySetter \u003d\u003d null) {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n            continue;\n        }\n        if (property.hasField()) {\n            AnnotatedField field \u003d property.getField();\n            Class\u003c?\u003e type \u003d field.getRawType();\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    if (config.isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1028,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n",
      "diff": "@@ -1,81 +1,81 @@\n protected void addBeanProps(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     boolean ignoreAny \u003d false;\n     {\n         Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n         if (B !\u003d null) {\n             ignoreAny \u003d B.booleanValue();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n         }\n     }\n     Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n     for (String propName : ignored) {\n         builder.addIgnorable(propName);\n     }\n-    {\n+    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n+    if (anySetter !\u003d null) {\n+        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n+    }\n+    if (anySetter \u003d\u003d null) {\n         Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n         if (ignored2 !\u003d null) {\n             for (String propName : ignored2) {\n                 builder.addIgnorable(propName);\n             }\n         }\n     }\n     HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n     for (BeanPropertyDefinition property : props) {\n         String name \u003d property.getName();\n         if (ignored.contains(name)) {\n             continue;\n         }\n         if (property.hasConstructorParameter()) {\n             builder.addCreatorProperty(property);\n             continue;\n         }\n         if (property.hasSetter()) {\n             AnnotatedMethod setter \u003d property.getSetter();\n             Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n             if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n             SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n             continue;\n         }\n         if (property.hasField()) {\n             AnnotatedField field \u003d property.getField();\n             Class\u003c?\u003e type \u003d field.getRawType();\n             if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                 builder.addIgnorable(name);\n                 continue;\n             }\n             SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n             if (prop !\u003d null) {\n                 builder.addProperty(prop);\n             }\n         }\n     }\n-    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n-    if (anySetter !\u003d null) {\n-        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n-    }\n     if (config.isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n         for (BeanPropertyDefinition property : props) {\n             if (property.hasGetter()) {\n                 String name \u003d property.getName();\n                 if (builder.hasProperty(name) || ignored.contains(name)) {\n                     continue;\n                 }\n                 AnnotatedMethod getter \u003d property.getGetter();\n                 Class\u003c?\u003e rt \u003d getter.getRawType();\n                 if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                     if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                         builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n                     }\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,81 @@\n+protected void addBeanProps(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n+    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n+    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    boolean ignoreAny \u003d false;\n+    {\n+        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n+        if (B !\u003d null) {\n+            ignoreAny \u003d B.booleanValue();\n+            builder.setIgnoreUnknownProperties(ignoreAny);\n+        }\n+    }\n+    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n+    for (String propName : ignored) {\n+        builder.addIgnorable(propName);\n+    }\n+    {\n+        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n+        if (ignored2 !\u003d null) {\n+            for (String propName : ignored2) {\n+                builder.addIgnorable(propName);\n+            }\n+        }\n+    }\n+    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n+    for (BeanPropertyDefinition property : props) {\n+        String name \u003d property.getName();\n+        if (ignored.contains(name)) {\n+            continue;\n+        }\n+        if (property.hasConstructorParameter()) {\n+            builder.addCreatorProperty(property);\n+            continue;\n+        }\n+        if (property.hasSetter()) {\n+            AnnotatedMethod setter \u003d property.getSetter();\n+            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n+            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n+                builder.addIgnorable(name);\n+                continue;\n+            }\n+            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n+            if (prop !\u003d null) {\n+                builder.addProperty(prop);\n+            }\n+            continue;\n+        }\n+        if (property.hasField()) {\n+            AnnotatedField field \u003d property.getField();\n+            Class\u003c?\u003e type \u003d field.getRawType();\n+            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n+                builder.addIgnorable(name);\n+                continue;\n+            }\n+            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n+            if (prop !\u003d null) {\n+                builder.addProperty(prop);\n+            }\n+        }\n+    }\n+    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n+    if (anySetter !\u003d null) {\n+        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n+    }\n+    if (config.isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n+        for (BeanPropertyDefinition property : props) {\n+            if (property.hasGetter()) {\n+                String name \u003d property.getName();\n+                if (builder.hasProperty(name) || ignored.contains(name)) {\n+                    continue;\n+                }\n+                AnnotatedMethod getter \u003d property.getGetter();\n+                Class\u003c?\u003e rt \u003d getter.getRawType();\n+                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n+                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n+                        builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void addBeanProps(DeserializationConfig config, BasicBeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e props \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    boolean ignoreAny \u003d false;\n    {\n        Boolean B \u003d intr.findIgnoreUnknownProperties(beanDesc.getClassInfo());\n        if (B !\u003d null) {\n            ignoreAny \u003d B.booleanValue();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n        }\n    }\n    Set\u003cString\u003e ignored \u003d ArrayBuilders.arrayToSet(intr.findPropertiesToIgnore(beanDesc.getClassInfo()));\n    for (String propName : ignored) {\n        builder.addIgnorable(propName);\n    }\n    {\n        Collection\u003cString\u003e ignored2 \u003d beanDesc.getIgnoredPropertyNames();\n        if (ignored2 !\u003d null) {\n            for (String propName : ignored2) {\n                builder.addIgnorable(propName);\n            }\n        }\n    }\n    HashMap\u003cClass\u003c?\u003e, Boolean\u003e ignoredTypes \u003d new HashMap\u003cClass\u003c?\u003e, Boolean\u003e();\n    for (BeanPropertyDefinition property : props) {\n        String name \u003d property.getName();\n        if (ignored.contains(name)) {\n            continue;\n        }\n        if (property.hasConstructorParameter()) {\n            builder.addCreatorProperty(property);\n            continue;\n        }\n        if (property.hasSetter()) {\n            AnnotatedMethod setter \u003d property.getSetter();\n            Class\u003c?\u003e type \u003d setter.getParameterClass(0);\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, setter);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n            continue;\n        }\n        if (property.hasField()) {\n            AnnotatedField field \u003d property.getField();\n            Class\u003c?\u003e type \u003d field.getRawType();\n            if (isIgnorableType(config, beanDesc, type, ignoredTypes)) {\n                builder.addIgnorable(name);\n                continue;\n            }\n            SettableBeanProperty prop \u003d constructSettableProperty(config, beanDesc, name, field);\n            if (prop !\u003d null) {\n                builder.addProperty(prop);\n            }\n        }\n    }\n    AnnotatedMethod anySetter \u003d beanDesc.findAnySetter();\n    if (anySetter !\u003d null) {\n        builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n    }\n    if (config.isEnabled(DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS)) {\n        for (BeanPropertyDefinition property : props) {\n            if (property.hasGetter()) {\n                String name \u003d property.getName();\n                if (builder.hasProperty(name) || ignored.contains(name)) {\n                    continue;\n                }\n                AnnotatedMethod getter \u003d property.getGetter();\n                Class\u003c?\u003e rt \u003d getter.getRawType();\n                if (Collection.class.isAssignableFrom(rt) || Map.class.isAssignableFrom(rt)) {\n                    if (!ignored.contains(name) \u0026\u0026 !builder.hasProperty(name)) {\n                        builder.addProperty(constructSetterlessProperty(config, beanDesc, name, getter));\n                    }\n                }\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 1051,
      "functionName": "addBeanProps",
      "functionAnnotation": "",
      "functionDoc": "Method called to figure out settable properties for the\nbean deserializer to use.\n\u003cp\u003e\nNote: designed to be overridable, and effort is made to keep interface\nsimilar between versions.\n"
    }
  }
}