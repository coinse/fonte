{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerFactory.java",
  "functionName": "buildBeanDeserializer",
  "functionId": "buildBeanDeserializer___ctxt-DeserializationContext__type-JavaType__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
  "functionStartLine": 261,
  "functionEndLine": 302,
  "numCommitsSeen": 134,
  "timeTaken": 4270,
  "changeHistory": [
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
    "2481fa4b55203e9e8b2fbfddf9b146f720507d8b",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "d71dffac80c387b8f48090e9c43fd3e5a5207e27",
    "d6e90d0259da622ddc593215361acdec3950bfe8",
    "19ab5808eb8e47662f1d55408fdb186320061f13",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c": "Yformatchange",
    "2481fa4b55203e9e8b2fbfddf9b146f720507d8b": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ybodychange",
    "d71dffac80c387b8f48090e9c43fd3e5a5207e27": "Ybodychange",
    "d6e90d0259da622ddc593215361acdec3950bfe8": "Ymultichange(Yparameterchange,Ybodychange)",
    "19ab5808eb8e47662f1d55408fdb186320061f13": "Ybodychange",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f0650ba80825c50c3c1b27e64a94b3d21cea452c": {
      "type": "Yformatchange",
      "commitMessage": "Solidify POJOs-as-array functionality\n",
      "commitDate": "7/23/12, 8:39 PM",
      "commitName": "f0650ba80825c50c3c1b27e64a94b3d21cea452c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/19/12, 6:09 PM",
      "commitNameOld": "2481fa4b55203e9e8b2fbfddf9b146f720507d8b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 126.1,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addObjectIdReader(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer;\n    if (type.isAbstract() \u0026\u0026 !valueInstantiator.canInstantiate()) {\n        deserializer \u003d builder.buildAbstract();\n    } else {\n        deserializer \u003d builder.build();\n    }\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 255,
      "functionName": "buildBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "2481fa4b55203e9e8b2fbfddf9b146f720507d8b": {
      "type": "Ybodychange",
      "commitMessage": "Fixed [JACKSON-811]\n",
      "commitDate": "3/19/12, 6:09 PM",
      "commitName": "2481fa4b55203e9e8b2fbfddf9b146f720507d8b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/19/12, 5:44 PM",
      "commitNameOld": "a73f9e410349a70fe7d024c1305d281a9705a420",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addObjectIdReader(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer;\n    if (type.isAbstract() \u0026\u0026 !valueInstantiator.canInstantiate()) {\n        deserializer \u003d builder.buildAbstract();\n    } else {\n        deserializer \u003d builder.build();\n    }\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 255,
      "functionName": "buildBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
      "diff": "@@ -1,28 +1,28 @@\n @SuppressWarnings(\"unchecked\")\n public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n-    if (type.isAbstract()) {\n-        if (!valueInstantiator.canInstantiate()) {\n-            return new AbstractDeserializer(type);\n-        }\n-    }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n     builder.setValueInstantiator(valueInstantiator);\n     addBeanProps(ctxt, beanDesc, builder);\n     addObjectIdReader(ctxt, beanDesc, builder);\n     addReferenceProperties(ctxt, beanDesc, builder);\n     addInjectables(ctxt, beanDesc, builder);\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n-    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n+    JsonDeserializer\u003c?\u003e deserializer;\n+    if (type.isAbstract() \u0026\u0026 !valueInstantiator.canInstantiate()) {\n+        deserializer \u003d builder.buildAbstract();\n+    } else {\n+        deserializer \u003d builder.build();\n+    }\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ybodychange",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/10/12, 9:44 AM",
      "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.54,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addObjectIdReader(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 255,
      "functionName": "buildBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
      "diff": "@@ -1,28 +1,28 @@\n @SuppressWarnings(\"unchecked\")\n public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n-    final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n-    builder.setObjectIdReader(constructObjectIdReader(ctxt, beanDesc));\n     builder.setValueInstantiator(valueInstantiator);\n     addBeanProps(ctxt, beanDesc, builder);\n+    addObjectIdReader(ctxt, beanDesc, builder);\n     addReferenceProperties(ctxt, beanDesc, builder);\n     addInjectables(ctxt, beanDesc, builder);\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d71dffac80c387b8f48090e9c43fd3e5a5207e27": {
      "type": "Ybodychange",
      "commitMessage": "Start work on deser side of object id handlign\n",
      "commitDate": "2/7/12, 9:05 PM",
      "commitName": "d71dffac80c387b8f48090e9c43fd3e5a5207e27",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.97,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n    builder.setObjectIdReader(constructObjectIdReader(ctxt, beanDesc));\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 238,
      "functionName": "buildBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
      "diff": "@@ -1,27 +1,28 @@\n @SuppressWarnings(\"unchecked\")\n public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n+    builder.setObjectIdReader(constructObjectIdReader(ctxt, beanDesc));\n     builder.setValueInstantiator(valueInstantiator);\n     addBeanProps(ctxt, beanDesc, builder);\n     addReferenceProperties(ctxt, beanDesc, builder);\n     addInjectables(ctxt, beanDesc, builder);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d6e90d0259da622ddc593215361acdec3950bfe8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
      "commitDate": "1/30/12, 7:15 PM",
      "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
          "commitDate": "1/30/12, 7:15 PM",
          "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/12, 3:55 PM",
          "commitNameOld": "e5d31900983a1e187c1fe5eb737353ddb74909d0",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 235,
          "functionName": "buildBeanDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
          "diff": "@@ -1,27 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n     builder.setValueInstantiator(valueInstantiator);\n     addBeanProps(ctxt, beanDesc, builder);\n     addReferenceProperties(ctxt, beanDesc, builder);\n     addInjectables(ctxt, beanDesc, builder);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n-    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n+    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
          "commitDate": "1/30/12, 7:15 PM",
          "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/12, 3:55 PM",
          "commitNameOld": "e5d31900983a1e187c1fe5eb737353ddb74909d0",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 235,
          "functionName": "buildBeanDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
          "diff": "@@ -1,27 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n     builder.setValueInstantiator(valueInstantiator);\n     addBeanProps(ctxt, beanDesc, builder);\n     addReferenceProperties(ctxt, beanDesc, builder);\n     addInjectables(ctxt, beanDesc, builder);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n-    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n+    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build();\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "19ab5808eb8e47662f1d55408fdb186320061f13": {
      "type": "Ybodychange",
      "commitMessage": "Getting back to implement deserialization-with-view\n",
      "commitDate": "1/26/12, 10:26 PM",
      "commitName": "19ab5808eb8e47662f1d55408fdb186320061f13",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 10:02 PM",
      "commitNameOld": "fbd795bbbe05709b4164e2c5ec4731990091f5f2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 233,
      "functionName": "buildBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
      "diff": "@@ -1,27 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n-    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n+    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(ctxt, beanDesc);\n     builder.setValueInstantiator(valueInstantiator);\n     addBeanProps(ctxt, beanDesc, builder);\n     addReferenceProperties(ctxt, beanDesc, builder);\n     addInjectables(ctxt, beanDesc, builder);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 567,
          "functionName": "buildBeanDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
          "diff": "@@ -1,26 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n-    ValueInstantiator valueInstantiator \u003d findValueInstantiator(config, beanDesc);\n+public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n     builder.setValueInstantiator(valueInstantiator);\n-    addBeanProps(config, beanDesc, builder);\n-    addReferenceProperties(config, beanDesc, builder);\n-    addInjectables(config, beanDesc, builder);\n+    addBeanProps(ctxt, beanDesc, builder);\n+    addReferenceProperties(ctxt, beanDesc, builder);\n+    addInjectables(ctxt, beanDesc, builder);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(ctxt, beanDesc, builder);\n    addReferenceProperties(ctxt, beanDesc, builder);\n    addInjectables(ctxt, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 567,
          "functionName": "buildBeanDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
          "diff": "@@ -1,26 +1,27 @@\n @SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n-    ValueInstantiator valueInstantiator \u003d findValueInstantiator(config, beanDesc);\n+public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+    ValueInstantiator valueInstantiator \u003d findValueInstantiator(ctxt, beanDesc);\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n     builder.setValueInstantiator(valueInstantiator);\n-    addBeanProps(config, beanDesc, builder);\n-    addReferenceProperties(config, beanDesc, builder);\n-    addInjectables(config, beanDesc, builder);\n+    addBeanProps(ctxt, beanDesc, builder);\n+    addReferenceProperties(ctxt, beanDesc, builder);\n+    addInjectables(ctxt, beanDesc, builder);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(config, beanDesc);\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(config, beanDesc, builder);\n    addReferenceProperties(config, beanDesc, builder);\n    addInjectables(config, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 592,
      "functionName": "buildBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n",
      "diff": "@@ -1,26 +1,26 @@\n @SuppressWarnings(\"unchecked\")\n-public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationConfig config, JavaType type, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     ValueInstantiator valueInstantiator \u003d findValueInstantiator(config, beanDesc);\n     if (type.isAbstract()) {\n         if (!valueInstantiator.canInstantiate()) {\n             return new AbstractDeserializer(type);\n         }\n     }\n     BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n     builder.setValueInstantiator(valueInstantiator);\n     addBeanProps(config, beanDesc, builder);\n     addReferenceProperties(config, beanDesc, builder);\n     addInjectables(config, beanDesc, builder);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n         }\n     }\n     return (JsonDeserializer\u003cObject\u003e) deserializer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, type-JavaType, beanDesc-BasicBeanDescription, property-BeanProperty]",
        "newValue": "[config-DeserializationConfig, type-JavaType, beanDesc-BeanDescription, property-BeanProperty]"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,26 @@\n+@SuppressWarnings(\"unchecked\")\n+public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationConfig config, JavaType type, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+    ValueInstantiator valueInstantiator \u003d findValueInstantiator(config, beanDesc);\n+    if (type.isAbstract()) {\n+        if (!valueInstantiator.canInstantiate()) {\n+            return new AbstractDeserializer(type);\n+        }\n+    }\n+    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n+    builder.setValueInstantiator(valueInstantiator);\n+    addBeanProps(config, beanDesc, builder);\n+    addReferenceProperties(config, beanDesc, builder);\n+    addInjectables(config, beanDesc, builder);\n+    if (_factoryConfig.hasDeserializerModifiers()) {\n+        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n+    if (_factoryConfig.hasDeserializerModifiers()) {\n+        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n+        }\n+    }\n+    return (JsonDeserializer\u003cObject\u003e) deserializer;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationConfig config, JavaType type, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    ValueInstantiator valueInstantiator \u003d findValueInstantiator(config, beanDesc);\n    if (type.isAbstract()) {\n        if (!valueInstantiator.canInstantiate()) {\n            return new AbstractDeserializer(type);\n        }\n    }\n    BeanDeserializerBuilder builder \u003d constructBeanDeserializerBuilder(beanDesc);\n    builder.setValueInstantiator(valueInstantiator);\n    addBeanProps(config, beanDesc, builder);\n    addReferenceProperties(config, beanDesc, builder);\n    addInjectables(config, beanDesc, builder);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonDeserializer\u003c?\u003e deserializer \u003d builder.build(property);\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deserializer \u003d mod.modifyDeserializer(config, beanDesc, deserializer);\n        }\n    }\n    return (JsonDeserializer\u003cObject\u003e) deserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 639,
      "functionName": "buildBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method that is to actually build a bean deserializer instance.\nAll basic sanity checks have been done to know that what we have\nmay be a valid bean type, and that there are no default simple\ndeserializers.\n"
    }
  }
}