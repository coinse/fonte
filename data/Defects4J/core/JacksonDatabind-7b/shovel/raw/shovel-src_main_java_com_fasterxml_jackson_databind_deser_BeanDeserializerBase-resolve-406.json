{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerBase.java",
  "functionName": "resolve",
  "functionId": "resolve___ctxt-DeserializationContext",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
  "functionStartLine": 406,
  "functionEndLine": 538,
  "numCommitsSeen": 124,
  "timeTaken": 7530,
  "changeHistory": [
    "c28f74c3cc6eb190a7e185939a93d978d306368d",
    "b85ddf03612c6fe36b27c3985ee54675d91c5a7d",
    "d823407ab82164afdd14832fe5159c44d42d89ef",
    "4f90dbca87b680cb10abdb0df5129491da3486d2",
    "f72fe21f7e7c306d42722456a5eff319155df99e",
    "8bdd49b36c8c05483669f6bd50b3839016f78983",
    "1488cef12ee88e25dd0161f1b85c552a32775778",
    "8d53c22404fbd066cf3f81d1248e188dba5caebd",
    "9fb0c8df13778d37a0b6b2e1de2b513950c21224",
    "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d",
    "231be531579336ce5528ebc6ead81c09e5c5138b",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
    "05fce93ce799a3fa402c269ed04ca32ec957d665",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
    "137aa17e69865f896b48f5113e47ef3ee0794806",
    "2cd82cded3fb6d7c11af5ddac14eaad384959436",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b",
    "df060b78cc608db646c3c9a7f1d14dbf148618b9",
    "c166fa380d2716480ff4a0548bc062744defb57f",
    "69afdff1fac0fc4a472a0b04d5bc01df49a427c5",
    "6997ce367c941c52774377324197fb0a1896c439",
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
    "53fb8522b402a409139175cbf867afa924e549f5",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "1826df76743de7de97bc9423794262e335d640ff",
    "289b58d10604feb7b709b91da6d314e0d6ac3b5d",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "c28f74c3cc6eb190a7e185939a93d978d306368d": "Ybodychange",
    "b85ddf03612c6fe36b27c3985ee54675d91c5a7d": "Ybodychange",
    "d823407ab82164afdd14832fe5159c44d42d89ef": "Ybodychange",
    "4f90dbca87b680cb10abdb0df5129491da3486d2": "Ybodychange",
    "f72fe21f7e7c306d42722456a5eff319155df99e": "Ybodychange",
    "8bdd49b36c8c05483669f6bd50b3839016f78983": "Ybodychange",
    "1488cef12ee88e25dd0161f1b85c552a32775778": "Ybodychange",
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": "Ybodychange",
    "9fb0c8df13778d37a0b6b2e1de2b513950c21224": "Ybodychange",
    "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d": "Ymultichange(Yannotationchange,Ydocchange)",
    "231be531579336ce5528ebc6ead81c09e5c5138b": "Ybodychange",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": "Ymultichange(Yannotationchange,Ydocchange)",
    "05fce93ce799a3fa402c269ed04ca32ec957d665": "Ybodychange",
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": "Ybodychange",
    "137aa17e69865f896b48f5113e47ef3ee0794806": "Ybodychange",
    "2cd82cded3fb6d7c11af5ddac14eaad384959436": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ymovefromfile",
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": "Ybodychange",
    "df060b78cc608db646c3c9a7f1d14dbf148618b9": "Ybodychange",
    "c166fa380d2716480ff4a0548bc062744defb57f": "Yformatchange",
    "69afdff1fac0fc4a472a0b04d5bc01df49a427c5": "Ybodychange",
    "6997ce367c941c52774377324197fb0a1896c439": "Ybodychange",
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687": "Ybodychange",
    "53fb8522b402a409139175cbf867afa924e549f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Yparameterchange",
    "1826df76743de7de97bc9423794262e335d640ff": "Ybodychange",
    "289b58d10604feb7b709b91da6d314e0d6ac3b5d": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c28f74c3cc6eb190a7e185939a93d978d306368d": {
      "type": "Ybodychange",
      "commitMessage": "Fix #580\n",
      "commitDate": "10/14/14, 5:21 PM",
      "commitName": "c28f74c3cc6eb190a7e185939a93d978d306368d",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "8/7/14, 11:27 PM",
      "commitNameOld": "c7906ba19b9d69c62b29fd648e921c853bc2655f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 67.75,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n            if (cd !\u003d deser) {\n                prop \u003d prop.withValueDeserializer(cd);\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        if (!(prop instanceof ManagedReferenceProperty)) {\n            prop \u003d _resolvedObjectIdProperty(ctxt, prop);\n        }\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            if (prop !\u003d origProp) {\n                _beanProperties.replace(prop);\n            }\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n        TypeDeserializer td \u003d delegateType.getTypeHandler();\n        if (td \u003d\u003d null) {\n            td \u003d ctxt.getConfig().findTypeDeserializer(delegateType);\n        }\n        JsonDeserializer\u003cObject\u003e dd \u003d findDeserializer(ctxt, delegateType, property);\n        if (td !\u003d null) {\n            dd \u003d new TypeWrappedDeserializer(td, dd);\n        }\n        _delegateDeserializer \u003d dd;\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 406,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,88 +1,96 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n             if (cd !\u003d deser) {\n                 prop \u003d prop.withValueDeserializer(cd);\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         if (!(prop instanceof ManagedReferenceProperty)) {\n             prop \u003d _resolvedObjectIdProperty(ctxt, prop);\n         }\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             if (prop !\u003d origProp) {\n                 _beanProperties.replace(prop);\n             }\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n-        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n+        TypeDeserializer td \u003d delegateType.getTypeHandler();\n+        if (td \u003d\u003d null) {\n+            td \u003d ctxt.getConfig().findTypeDeserializer(delegateType);\n+        }\n+        JsonDeserializer\u003cObject\u003e dd \u003d findDeserializer(ctxt, delegateType, property);\n+        if (td !\u003d null) {\n+            dd \u003d new TypeWrappedDeserializer(td, dd);\n+        }\n+        _delegateDeserializer \u003d dd;\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b85ddf03612c6fe36b27c3985ee54675d91c5a7d": {
      "type": "Ybodychange",
      "commitMessage": "minor refactoring\n",
      "commitDate": "4/10/14, 9:17 AM",
      "commitName": "b85ddf03612c6fe36b27c3985ee54675d91c5a7d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/4/14, 8:20 PM",
      "commitNameOld": "03a49b173536b3811585006a331faed5a00f277b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 36.5,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n            if (cd !\u003d deser) {\n                prop \u003d prop.withValueDeserializer(cd);\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        if (!(prop instanceof ManagedReferenceProperty)) {\n            prop \u003d _resolvedObjectIdProperty(ctxt, prop);\n        }\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            if (prop !\u003d origProp) {\n                _beanProperties.replace(prop);\n            }\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 407,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,85 +1,88 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n             if (cd !\u003d deser) {\n                 prop \u003d prop.withValueDeserializer(cd);\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         if (!(prop instanceof ManagedReferenceProperty)) {\n             prop \u003d _resolvedObjectIdProperty(ctxt, prop);\n         }\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n+            if (prop !\u003d origProp) {\n+                _beanProperties.replace(prop);\n+            }\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d823407ab82164afdd14832fe5159c44d42d89ef": {
      "type": "Ybodychange",
      "commitMessage": "Implemented forward reference resolution for general property based deserialization.\n",
      "commitDate": "1/13/14, 7:07 AM",
      "commitName": "d823407ab82164afdd14832fe5159c44d42d89ef",
      "commitAuthor": "Pascal Gélinas",
      "commitDateOld": "1/13/14, 7:07 AM",
      "commitNameOld": "a4c91739eff103d2982fced95a9e50f7754fba51",
      "commitAuthorOld": "Pascal Gélinas",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n            if (cd !\u003d deser) {\n                prop \u003d prop.withValueDeserializer(cd);\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        if (!(prop instanceof ManagedReferenceProperty)) {\n            prop \u003d _resolvedObjectIdProperty(ctxt, prop);\n        }\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 407,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,82 +1,85 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n             if (cd !\u003d deser) {\n                 prop \u003d prop.withValueDeserializer(cd);\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n+        if (!(prop instanceof ManagedReferenceProperty)) {\n+            prop \u003d _resolvedObjectIdProperty(ctxt, prop);\n+        }\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4f90dbca87b680cb10abdb0df5129491da3486d2": {
      "type": "Ybodychange",
      "commitMessage": "Further improvements to contextualization for deser side\n",
      "commitDate": "9/5/13, 9:45 PM",
      "commitName": "4f90dbca87b680cb10abdb0df5129491da3486d2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/5/13, 8:55 PM",
      "commitNameOld": "47ac6bd51e63b0cbfef2e431a94193433d15077a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n            if (cd !\u003d deser) {\n                prop \u003d prop.withValueDeserializer(cd);\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 406,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,82 +1,82 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n-            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handleContextualization(deser, prop);\n+            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handlePrimaryContextualization(deser, prop);\n             if (cd !\u003d deser) {\n                 prop \u003d prop.withValueDeserializer(cd);\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f72fe21f7e7c306d42722456a5eff319155df99e": {
      "type": "Ybodychange",
      "commitMessage": "Bit of groundwork for (possibly?) implementing #224; contextualization isolated in one place\n",
      "commitDate": "9/4/13, 10:07 PM",
      "commitName": "f72fe21f7e7c306d42722456a5eff319155df99e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/20/13, 4:23 PM",
      "commitNameOld": "e8a17a9195dafe66df62c677c8984955e198fc63",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 15.24,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handleContextualization(deser, prop);\n            if (cd !\u003d deser) {\n                prop \u003d prop.withValueDeserializer(cd);\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 406,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,84 +1,82 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n-            if (deser instanceof ContextualDeserializer) {\n-                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n-                if (cd !\u003d deser) {\n-                    prop \u003d prop.withValueDeserializer(cd);\n-                }\n+            JsonDeserializer\u003c?\u003e cd \u003d ctxt.handleContextualization(deser, prop);\n+            if (cd !\u003d deser) {\n+                prop \u003d prop.withValueDeserializer(cd);\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bdd49b36c8c05483669f6bd50b3839016f78983": {
      "type": "Ybodychange",
      "commitMessage": "Complete handling of property description -- need to test still\n",
      "commitDate": "7/26/13, 4:18 PM",
      "commitName": "8bdd49b36c8c05483669f6bd50b3839016f78983",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/26/13, 2:42 PM",
      "commitNameOld": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 406,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,84 +1,84 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n-        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, false);\n+        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1488cef12ee88e25dd0161f1b85c552a32775778": {
      "type": "Ybodychange",
      "commitMessage": "Completing conversion to using PropertyName instead of String in most parts of API\n",
      "commitDate": "7/26/13, 2:42 PM",
      "commitName": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 11:05 PM",
      "commitNameOld": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, false);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 406,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,84 +1,84 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n-        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, null, _classAnnotations, delegateCreator, false);\n+        BeanProperty.Std property \u003d new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, false);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": {
      "type": "Ybodychange",
      "commitMessage": "More refactoring, piping through \"wrapper name\" so downstream code need not use introspector\n",
      "commitDate": "3/13/13, 3:56 PM",
      "commitName": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/13, 8:47 PM",
      "commitNameOld": "6a540c1be655c27f0cb05eb85b796a119ae10407",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 9.76,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, null, _classAnnotations, delegateCreator, false);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 406,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,84 +1,84 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n             if (deser \u003d\u003d null) {\n                 deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n             }\n             prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n-        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n+        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, null, _classAnnotations, delegateCreator, false);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9fb0c8df13778d37a0b6b2e1de2b513950c21224": {
      "type": "Ybodychange",
      "commitMessage": "Complete #125 implementation\n",
      "commitDate": "3/2/13, 6:04 PM",
      "commitName": "9fb0c8df13778d37a0b6b2e1de2b513950c21224",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 1:36 PM",
      "commitNameOld": "3ff534413a5cd24438082c49ccc062bc252a6009",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n            if (deser \u003d\u003d null) {\n                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n            }\n            prop \u003d prop.withValueDeserializer(deser);\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 408,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,80 +1,84 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n-            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n+            JsonDeserializer\u003c?\u003e deser \u003d findConvertingDeserializer(ctxt, prop);\n+            if (deser \u003d\u003d null) {\n+                deser \u003d findDeserializer(ctxt, prop.getType(), prop);\n+            }\n+            prop \u003d prop.withValueDeserializer(deser);\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "...\n",
      "commitDate": "2/20/13, 7:52 PM",
      "commitName": "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "...\n",
          "commitDate": "2/20/13, 7:52 PM",
          "commitName": "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/17/13, 7:05 PM",
          "commitNameOld": "81c9937f244120b7505eb50bd659dbca42b2d69b",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 3.03,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 404,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
          "diff": "@@ -1,79 +1,80 @@\n+@Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "...\n",
          "commitDate": "2/20/13, 7:52 PM",
          "commitName": "3f237f8a8c7c99aa30cc0eb3b923b1973099c17d",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/17/13, 7:05 PM",
          "commitNameOld": "81c9937f244120b7505eb50bd659dbca42b2d69b",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 3.03,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 404,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
          "diff": "@@ -1,79 +1,80 @@\n+@Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n"
          }
        }
      ]
    },
    "231be531579336ce5528ebc6ead81c09e5c5138b": {
      "type": "Ybodychange",
      "commitMessage": "Fix issues #94 and #96\n",
      "commitDate": "10/26/12, 6:19 PM",
      "commitName": "231be531579336ce5528ebc6ead81c09e5c5138b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/5/12, 11:51 PM",
      "commitNameOld": "65d186e7f2561b6e3fedce1869546b2443036b50",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser);\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser);\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 399,
      "functionName": "resolve",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,79 +1,79 @@\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n-                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n+                    extTypes.addExternal(prop, typeDeser);\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n-                extTypes.addExternal(prop, typeDeser.getPropertyName());\n+                extTypes.addExternal(prop, typeDeser);\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
      "commitDate": "4/17/12, 7:57 AM",
      "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/19/12, 7:11 PM",
          "commitNameOld": "337feca4a10581197656d497b94cde602c1b16a7",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 28.53,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "actualSource": "public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 369,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,80 +1,79 @@\n-@Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/19/12, 7:11 PM",
          "commitNameOld": "337feca4a10581197656d497b94cde602c1b16a7",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 28.53,
          "commitsBetweenForRepo": 40,
          "commitsBetweenForFile": 1,
          "actualSource": "public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
          "functionStartLine": 369,
          "functionName": "resolve",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,80 +1,79 @@\n-@Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 }\n             }\n         }\n     }\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
            "newValue": ""
          }
        }
      ]
    },
    "05fce93ce799a3fa402c269ed04ca32ec957d665": {
      "type": "Ybodychange",
      "commitMessage": "Minor improvement to UnrecognizedPropertyException: list name of known properties to help user see what might be going wrong\n",
      "commitDate": "3/19/12, 5:14 PM",
      "commitName": "05fce93ce799a3fa402c269ed04ca32ec957d665",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/5/12, 10:34 PM",
      "commitNameOld": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 13.74,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n                }\n            }\n        }\n    }\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    for (SettableBeanProperty origProp : _beanProperties) {\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 369,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,82 +1,80 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 }\n             }\n         }\n     }\n-    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n-    while (it.hasNext()) {\n-        SettableBeanProperty origProp \u003d it.next();\n+    for (SettableBeanProperty origProp : _beanProperties) {\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n                 continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-792]; can now handle Object Id forward references correctly\n",
      "commitDate": "3/5/12, 10:34 PM",
      "commitName": "60e30f499e9318b2b18c3cbac4edc2bfcf6d6d66",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/12, 8:27 PM",
      "commitNameOld": "137aa17e69865f896b48f5113e47ef3ee0794806",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n                }\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n                continue;\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 369,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,81 +1,82 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 }\n             }\n         }\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n+                continue;\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "137aa17e69865f896b48f5113e47ef3ee0794806": {
      "type": "Ybodychange",
      "commitMessage": "Bit more work for [JACKSON-798].. getting there\n",
      "commitDate": "3/3/12, 8:27 PM",
      "commitName": "137aa17e69865f896b48f5113e47ef3ee0794806",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/12, 8:00 PM",
      "commitNameOld": "2cd82cded3fb6d7c11af5ddac14eaad384959436",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n                }\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 376,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,81 +1,81 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n-        for (SettableBeanProperty prop : creatorProps) {\n+        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n+        for (SettableBeanProperty prop : _propertyBasedCreator.properties()) {\n             if (prop.hasValueTypeDeserializer()) {\n                 TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                 if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                     if (extTypes \u003d\u003d null) {\n                         extTypes \u003d new ExternalTypeHandler.Builder();\n                     }\n                     extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 }\n             }\n         }\n-        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2cd82cded3fb6d7c11af5ddac14eaad384959436": {
      "type": "Ybodychange",
      "commitMessage": "some groundwork to eventually fix [JACKSON-798]\n",
      "commitDate": "3/3/12, 8:00 PM",
      "commitName": "2cd82cded3fb6d7c11af5ddac14eaad384959436",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/26/12, 5:02 PM",
      "commitNameOld": "61add0346b9bca1caee8f229b2866be9d1dcd37f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.12,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        for (SettableBeanProperty prop : creatorProps) {\n            if (prop.hasValueTypeDeserializer()) {\n                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                    if (extTypes \u003d\u003d null) {\n                        extTypes \u003d new ExternalTypeHandler.Builder();\n                    }\n                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n                }\n            }\n        }\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 376,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,70 +1,81 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n+    ExternalTypeHandler.Builder extTypes \u003d null;\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n+        for (SettableBeanProperty prop : creatorProps) {\n+            if (prop.hasValueTypeDeserializer()) {\n+                TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n+                if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n+                    if (extTypes \u003d\u003d null) {\n+                        extTypes \u003d new ExternalTypeHandler.Builder();\n+                    }\n+                    extTypes.addExternal(prop, typeDeser.getPropertyName());\n+                }\n+            }\n+        }\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n-    ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ymovefromfile",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/11/12, 2:34 PM",
      "commitNameOld": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
      "functionStartLine": 439,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
        "oldMethodName": "resolve",
        "newMethodName": "resolve"
      }
    },
    "34a8adf9c4b5e757f82011a5657a779c03cb133b": {
      "type": "Ybodychange",
      "commitMessage": "Yay! First end-to-end version of Object Id handling...\n",
      "commitDate": "2/8/12, 10:07 PM",
      "commitName": "34a8adf9c4b5e757f82011a5657a779c03cb133b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 9:04 PM",
      "commitNameOld": "df060b78cc608db646c3c9a7f1d14dbf148618b9",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 458,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "df060b78cc608db646c3c9a7f1d14dbf148618b9": {
      "type": "Ybodychange",
      "commitMessage": "Minor simplification for BeanDeserializer: drop ref to AnnotatedClass (which is heavy-weight), replaced by Annotations to retain class annotations, much lighter object\n",
      "commitDate": "2/7/12, 9:04 PM",
      "commitName": "df060b78cc608db646c3c9a7f1d14dbf148618b9",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/6/12, 10:44 PM",
      "commitNameOld": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 408,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,70 +1,70 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n-        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n+        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _classAnnotations, delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c166fa380d2716480ff4a0548bc062744defb57f": {
      "type": "Yformatchange",
      "commitMessage": "Implemented [JACKSON-737]\n",
      "commitDate": "2/3/12, 7:42 PM",
      "commitName": "c166fa380d2716480ff4a0548bc062744defb57f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/2/12, 1:00 PM",
      "commitNameOld": "69afdff1fac0fc4a472a0b04d5bc01df49a427c5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.28,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 415,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "69afdff1fac0fc4a472a0b04d5bc01df49a427c5": {
      "type": "Ybodychange",
      "commitMessage": "Fixed [JACKSON-774] for 2.0.0 as well\n",
      "commitDate": "2/2/12, 1:00 PM",
      "commitName": "69afdff1fac0fc4a472a0b04d5bc01df49a427c5",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 11:30 AM",
      "commitNameOld": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 376,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,75 +1,70 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n-        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n-        for (SettableBeanProperty prop : creatorProps) {\n-            if (!prop.hasValueDeserializer()) {\n-                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n-            }\n-        }\n+        _propertyBasedCreator \u003d PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps);\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         } else {\n             JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n             if (deser instanceof ContextualDeserializer) {\n                 JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                 if (cd !\u003d deser) {\n                     prop \u003d prop.withValueDeserializer(cd);\n                 }\n             }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6997ce367c941c52774377324197fb0a1896c439": {
      "type": "Ybodychange",
      "commitMessage": "Fix the last problem wrt contextual deserialization; back to fully working again\n",
      "commitDate": "1/31/12, 3:50 PM",
      "commitName": "6997ce367c941c52774377324197fb0a1896c439",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/30/12, 7:15 PM",
      "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : creatorProps) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        } else {\n            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n            if (deser instanceof ContextualDeserializer) {\n                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n                if (cd !\u003d deser) {\n                    prop \u003d prop.withValueDeserializer(cd);\n                }\n            }\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 376,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,67 +1,75 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : creatorProps) {\n             if (!prop.hasValueDeserializer()) {\n                 _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n             }\n         }\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n+        } else {\n+            JsonDeserializer\u003cObject\u003e deser \u003d prop.getValueDeserializer();\n+            if (deser instanceof ContextualDeserializer) {\n+                JsonDeserializer\u003c?\u003e cd \u003d ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n+                if (cd !\u003d deser) {\n+                    prop \u003d prop.withValueDeserializer(cd);\n+                }\n+            }\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n     _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687": {
      "type": "Ybodychange",
      "commitMessage": "Bit more work on view handling\n",
      "commitDate": "1/27/12, 9:41 PM",
      "commitName": "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/12, 10:26 PM",
      "commitNameOld": "19ab5808eb8e47662f1d55408fdb186320061f13",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : creatorProps) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 386,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,66 +1,67 @@\n @Override\n public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : creatorProps) {\n             if (!prop.hasValueDeserializer()) {\n                 _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n             }\n         }\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         }\n         prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n+    _vanillaProcessing \u003d _vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53fb8522b402a409139175cbf867afa924e549f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
      "commitDate": "1/24/12, 1:02 PM",
      "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : creatorProps) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 352,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
          "diff": "@@ -1,66 +1,66 @@\n @Override\n-public void resolve(DeserializationConfig config, DeserializerCache provider) throws JsonMappingException {\n+public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n-        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n+        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : creatorProps) {\n             if (!prop.hasValueDeserializer()) {\n-                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n+                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n             }\n         }\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n-            prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n+            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         }\n-        prop \u003d _resolveManagedReferenceProperty(config, prop);\n-        SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n+        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n+        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n-        prop \u003d _resolveInnerClassValuedProperty(config, prop);\n+        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n-        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n+        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n-        JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n+        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n-        _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n+        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, provider-DeserializerCache]",
            "newValue": "[ctxt-DeserializationContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void resolve(DeserializationContext ctxt) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : creatorProps) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n        }\n        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 352,
          "functionName": "resolve",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
          "diff": "@@ -1,66 +1,66 @@\n @Override\n-public void resolve(DeserializationConfig config, DeserializerCache provider) throws JsonMappingException {\n+public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n-        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n+        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n         _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : creatorProps) {\n             if (!prop.hasValueDeserializer()) {\n-                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n+                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(ctxt, prop.getType(), prop));\n             }\n         }\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n-            prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n+            prop \u003d prop.withValueDeserializer(findDeserializer(ctxt, prop.getType(), prop));\n         }\n-        prop \u003d _resolveManagedReferenceProperty(config, prop);\n-        SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n+        prop \u003d _resolveManagedReferenceProperty(ctxt, prop);\n+        SettableBeanProperty u \u003d _resolveUnwrappedProperty(ctxt, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n-        prop \u003d _resolveInnerClassValuedProperty(config, prop);\n+        prop \u003d _resolveInnerClassValuedProperty(ctxt, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n-        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n+        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n-        JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n+        JavaType delegateType \u003d _valueInstantiator.getDelegateType(ctxt.getConfig());\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n-        _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n+        _delegateDeserializer \u003d findDeserializer(ctxt, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Yparameterchange",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/23/12, 7:43 PM",
      "commitNameOld": "1826df76743de7de97bc9423794262e335d640ff",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationConfig config, DeserializerCache provider) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : creatorProps) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n        }\n        prop \u003d _resolveManagedReferenceProperty(config, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(config, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 352,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,66 +1,66 @@\n @Override\n-public void resolve(DeserializationConfig config, DeserializerProvider provider) throws JsonMappingException {\n+public void resolve(DeserializationConfig config, DeserializerCache provider) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n         _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : creatorProps) {\n             if (!prop.hasValueDeserializer()) {\n                 _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n             }\n         }\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n         }\n         prop \u003d _resolveManagedReferenceProperty(config, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n             continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(config, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, provider-DeserializerProvider]",
        "newValue": "[config-DeserializationConfig, provider-DeserializerCache]"
      }
    },
    "1826df76743de7de97bc9423794262e335d640ff": {
      "type": "Ybodychange",
      "commitMessage": "FINALLY fixed handling of nested @JsonUnwrapped+prefix\n",
      "commitDate": "1/23/12, 7:43 PM",
      "commitName": "1826df76743de7de97bc9423794262e335d640ff",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/14/12, 11:03 PM",
      "commitNameOld": "7555fa2b7e070b2bc50bfc0bd4e18526e3962b1f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 8.86,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationConfig config, DeserializerProvider provider) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : creatorProps) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n        }\n        prop \u003d _resolveManagedReferenceProperty(config, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n            continue;\n        }\n        prop \u003d _resolveInnerClassValuedProperty(config, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 352,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,65 +1,66 @@\n @Override\n public void resolve(DeserializationConfig config, DeserializerProvider provider) throws JsonMappingException {\n     if (_valueInstantiator.canCreateFromObjectWith()) {\n         SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n         _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n         for (SettableBeanProperty prop : creatorProps) {\n             if (!prop.hasValueDeserializer()) {\n                 _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n             }\n         }\n     }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n         }\n         prop \u003d _resolveManagedReferenceProperty(config, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n+            continue;\n         }\n         prop \u003d _resolveInnerClassValuedProperty(config, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n         JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n     }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "289b58d10604feb7b709b91da6d314e0d6ac3b5d": {
      "type": "Ybodychange",
      "commitMessage": "Improve ValueInstantiator interface to pass enough information to properly construct types (i.e. give DeserializationConfig)\n",
      "commitDate": "12/27/11, 10:34 PM",
      "commitName": "289b58d10604feb7b709b91da6d314e0d6ac3b5d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/24/11, 10:18 PM",
      "commitNameOld": "a07e5485ebcd96fde24e71e023a7888deb74f70b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void resolve(DeserializationConfig config, DeserializerProvider provider) throws JsonMappingException {\n    if (_valueInstantiator.canCreateFromObjectWith()) {\n        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n        for (SettableBeanProperty prop : creatorProps) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n            }\n        }\n    }\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n        }\n        prop \u003d _resolveManagedReferenceProperty(config, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n        }\n        prop \u003d _resolveInnerClassValuedProperty(config, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 319,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n",
      "diff": "@@ -1,63 +1,65 @@\n @Override\n public void resolve(DeserializationConfig config, DeserializerProvider provider) throws JsonMappingException {\n+    if (_valueInstantiator.canCreateFromObjectWith()) {\n+        SettableBeanProperty[] creatorProps \u003d _valueInstantiator.getFromObjectArguments(config);\n+        _propertyBasedCreator \u003d new PropertyBasedCreator(_valueInstantiator, creatorProps);\n+        for (SettableBeanProperty prop : creatorProps) {\n+            if (!prop.hasValueDeserializer()) {\n+                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n+            }\n+        }\n+    }\n     Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n     UnwrappedPropertyHandler unwrapped \u003d null;\n     ExternalTypeHandler.Builder extTypes \u003d null;\n     while (it.hasNext()) {\n         SettableBeanProperty origProp \u003d it.next();\n         SettableBeanProperty prop \u003d origProp;\n         if (!prop.hasValueDeserializer()) {\n             prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n         }\n         prop \u003d _resolveManagedReferenceProperty(config, prop);\n         SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n         if (u !\u003d null) {\n             prop \u003d u;\n             if (unwrapped \u003d\u003d null) {\n                 unwrapped \u003d new UnwrappedPropertyHandler();\n             }\n             unwrapped.addProperty(prop);\n         }\n         prop \u003d _resolveInnerClassValuedProperty(config, prop);\n         if (prop !\u003d origProp) {\n             _beanProperties.replace(prop);\n         }\n         if (prop.hasValueTypeDeserializer()) {\n             TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n             if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                 if (extTypes \u003d\u003d null) {\n                     extTypes \u003d new ExternalTypeHandler.Builder();\n                 }\n                 extTypes.addExternal(prop, typeDeser.getPropertyName());\n                 _beanProperties.remove(prop);\n             }\n         }\n     }\n     if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n         _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n     }\n     if (_valueInstantiator.canCreateUsingDelegate()) {\n-        JavaType delegateType \u003d _valueInstantiator.getDelegateType();\n+        JavaType delegateType \u003d _valueInstantiator.getDelegateType(config);\n         if (delegateType \u003d\u003d null) {\n             throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n         }\n         AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n         BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n         _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n     }\n-    if (_propertyBasedCreator !\u003d null) {\n-        for (SettableBeanProperty prop : _propertyBasedCreator.getCreatorProperties()) {\n-            if (!prop.hasValueDeserializer()) {\n-                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n-            }\n-        }\n-    }\n     if (extTypes !\u003d null) {\n         _externalTypeIdHandler \u003d extTypes.build();\n         _nonStandardCreation \u003d true;\n     }\n     _unwrappedPropertyHandler \u003d unwrapped;\n     if (unwrapped !\u003d null) {\n         _nonStandardCreation \u003d true;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,63 @@\n+@Override\n+public void resolve(DeserializationConfig config, DeserializerProvider provider) throws JsonMappingException {\n+    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n+    UnwrappedPropertyHandler unwrapped \u003d null;\n+    ExternalTypeHandler.Builder extTypes \u003d null;\n+    while (it.hasNext()) {\n+        SettableBeanProperty origProp \u003d it.next();\n+        SettableBeanProperty prop \u003d origProp;\n+        if (!prop.hasValueDeserializer()) {\n+            prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n+        }\n+        prop \u003d _resolveManagedReferenceProperty(config, prop);\n+        SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n+        if (u !\u003d null) {\n+            prop \u003d u;\n+            if (unwrapped \u003d\u003d null) {\n+                unwrapped \u003d new UnwrappedPropertyHandler();\n+            }\n+            unwrapped.addProperty(prop);\n+        }\n+        prop \u003d _resolveInnerClassValuedProperty(config, prop);\n+        if (prop !\u003d origProp) {\n+            _beanProperties.replace(prop);\n+        }\n+        if (prop.hasValueTypeDeserializer()) {\n+            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n+            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n+                if (extTypes \u003d\u003d null) {\n+                    extTypes \u003d new ExternalTypeHandler.Builder();\n+                }\n+                extTypes.addExternal(prop, typeDeser.getPropertyName());\n+                _beanProperties.remove(prop);\n+            }\n+        }\n+    }\n+    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n+        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n+    }\n+    if (_valueInstantiator.canCreateUsingDelegate()) {\n+        JavaType delegateType \u003d _valueInstantiator.getDelegateType();\n+        if (delegateType \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n+        }\n+        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n+        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n+        _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n+    }\n+    if (_propertyBasedCreator !\u003d null) {\n+        for (SettableBeanProperty prop : _propertyBasedCreator.getCreatorProperties()) {\n+            if (!prop.hasValueDeserializer()) {\n+                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n+            }\n+        }\n+    }\n+    if (extTypes !\u003d null) {\n+        _externalTypeIdHandler \u003d extTypes.build();\n+        _nonStandardCreation \u003d true;\n+    }\n+    _unwrappedPropertyHandler \u003d unwrapped;\n+    if (unwrapped !\u003d null) {\n+        _nonStandardCreation \u003d true;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void resolve(DeserializationConfig config, DeserializerProvider provider) throws JsonMappingException {\n    Iterator\u003cSettableBeanProperty\u003e it \u003d _beanProperties.allProperties();\n    UnwrappedPropertyHandler unwrapped \u003d null;\n    ExternalTypeHandler.Builder extTypes \u003d null;\n    while (it.hasNext()) {\n        SettableBeanProperty origProp \u003d it.next();\n        SettableBeanProperty prop \u003d origProp;\n        if (!prop.hasValueDeserializer()) {\n            prop \u003d prop.withValueDeserializer(findDeserializer(config, provider, prop.getType(), prop));\n        }\n        prop \u003d _resolveManagedReferenceProperty(config, prop);\n        SettableBeanProperty u \u003d _resolveUnwrappedProperty(config, prop);\n        if (u !\u003d null) {\n            prop \u003d u;\n            if (unwrapped \u003d\u003d null) {\n                unwrapped \u003d new UnwrappedPropertyHandler();\n            }\n            unwrapped.addProperty(prop);\n        }\n        prop \u003d _resolveInnerClassValuedProperty(config, prop);\n        if (prop !\u003d origProp) {\n            _beanProperties.replace(prop);\n        }\n        if (prop.hasValueTypeDeserializer()) {\n            TypeDeserializer typeDeser \u003d prop.getValueTypeDeserializer();\n            if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n                if (extTypes \u003d\u003d null) {\n                    extTypes \u003d new ExternalTypeHandler.Builder();\n                }\n                extTypes.addExternal(prop, typeDeser.getPropertyName());\n                _beanProperties.remove(prop);\n            }\n        }\n    }\n    if (_anySetter !\u003d null \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n        _anySetter \u003d _anySetter.withValueDeserializer(findDeserializer(config, provider, _anySetter.getType(), _anySetter.getProperty()));\n    }\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n        JavaType delegateType \u003d _valueInstantiator.getDelegateType();\n        if (delegateType \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid delegate-creator definition for \" + _beanType + \": value instantiator (\" + _valueInstantiator.getClass().getName() + \") returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\");\n        }\n        AnnotatedWithParams delegateCreator \u003d _valueInstantiator.getDelegateCreator();\n        BeanProperty.Std property \u003d new BeanProperty.Std(null, delegateType, _forClass.getAnnotations(), delegateCreator);\n        _delegateDeserializer \u003d findDeserializer(config, provider, delegateType, property);\n    }\n    if (_propertyBasedCreator !\u003d null) {\n        for (SettableBeanProperty prop : _propertyBasedCreator.getCreatorProperties()) {\n            if (!prop.hasValueDeserializer()) {\n                _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n            }\n        }\n    }\n    if (extTypes !\u003d null) {\n        _externalTypeIdHandler \u003d extTypes.build();\n        _nonStandardCreation \u003d true;\n    }\n    _unwrappedPropertyHandler \u003d unwrapped;\n    if (unwrapped !\u003d null) {\n        _nonStandardCreation \u003d true;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 368,
      "functionName": "resolve",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to finalize setup of this deserializer,\nafter deserializer itself has been registered.\nThis is needed to handle recursive and transitive dependencies.\n"
    }
  }
}