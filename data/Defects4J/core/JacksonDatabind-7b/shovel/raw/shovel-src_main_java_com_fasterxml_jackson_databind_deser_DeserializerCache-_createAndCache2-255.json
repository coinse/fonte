{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeserializerCache.java",
  "functionName": "_createAndCache2",
  "functionId": "_createAndCache2___ctxt-DeserializationContext__factory-DeserializerFactory__type-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
  "functionAnnotation": "",
  "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
  "functionStartLine": 255,
  "functionEndLine": 299,
  "numCommitsSeen": 72,
  "timeTaken": 1956,
  "changeHistory": [
    "82b474d51545919cb38a49485f56fd29d6ed199b",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
    "bf355caa0821e58968df3bf6c12f612639224e47",
    "53fb8522b402a409139175cbf867afa924e549f5",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "530067bb8db8fc31c27c6075c64c1c075c3ea671",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "82b474d51545919cb38a49485f56fd29d6ed199b": "Yfilerename",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf355caa0821e58968df3bf6c12f612639224e47": "Ybodychange",
    "53fb8522b402a409139175cbf867afa924e549f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Yfilerename",
    "530067bb8db8fc31c27c6075c64c1c075c3ea671": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82b474d51545919cb38a49485f56fd29d6ed199b": {
      "type": "Yfilerename",
      "commitMessage": "Fix 3 unit test failures\n",
      "commitDate": "2/2/12, 5:33 PM",
      "commitName": "82b474d51545919cb38a49485f56fd29d6ed199b",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 1:00 PM",
      "commitNameOld": "69afdff1fac0fc4a472a0b04d5bc01df49a427c5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt, factory, type);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        ((ResolvableDeserializer) deser).resolve(ctxt);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 243,
      "functionName": "_createAndCache2",
      "functionAnnotation": "",
      "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
      }
    },
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
      "commitDate": "2/1/12, 10:18 PM",
      "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt, factory, type);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        ((ResolvableDeserializer) deser).resolve(ctxt);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 245,
          "functionName": "_createAndCache2",
          "functionAnnotation": "",
          "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(ctxt, type);\n+        deser \u003d _createDeserializer(ctxt, factory, type);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n         ((ResolvableDeserializer) deser).resolve(ctxt);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt, factory, type);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        ((ResolvableDeserializer) deser).resolve(ctxt);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 245,
          "functionName": "_createAndCache2",
          "functionAnnotation": "",
          "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(ctxt, type);\n+        deser \u003d _createDeserializer(ctxt, factory, type);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n         ((ResolvableDeserializer) deser).resolve(ctxt);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt, factory, type);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        ((ResolvableDeserializer) deser).resolve(ctxt);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 245,
          "functionName": "_createAndCache2",
          "functionAnnotation": "",
          "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(ctxt, type);\n+        deser \u003d _createDeserializer(ctxt, factory, type);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n         ((ResolvableDeserializer) deser).resolve(ctxt);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType]",
            "newValue": "[ctxt-DeserializationContext, factory-DeserializerFactory, type-JavaType]"
          }
        }
      ]
    },
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
      "commitDate": "1/31/12, 12:45 PM",
      "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt, type);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        ((ResolvableDeserializer) deser).resolve(ctxt);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 307,
          "functionName": "_createAndCache2",
          "functionAnnotation": "",
          "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(ctxt, type, property);\n+        deser \u003d _createDeserializer(ctxt, type);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n         ((ResolvableDeserializer) deser).resolve(ctxt);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt, type);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        ((ResolvableDeserializer) deser).resolve(ctxt);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 307,
          "functionName": "_createAndCache2",
          "functionAnnotation": "",
          "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(ctxt, type, property);\n+        deser \u003d _createDeserializer(ctxt, type);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n         ((ResolvableDeserializer) deser).resolve(ctxt);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bf355caa0821e58968df3bf6c12f612639224e47": {
      "type": "Ybodychange",
      "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
      "commitDate": "1/24/12, 2:46 PM",
      "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 1:27 PM",
      "commitNameOld": "f0b28a96644b3dc22c997a05975de335dfed0418",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt, type, property);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        ((ResolvableDeserializer) deser).resolve(ctxt);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 335,
      "functionName": "_createAndCache2",
      "functionAnnotation": "",
      "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
      "diff": "@@ -1,22 +1,22 @@\n protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(ctxt.getConfig(), type, property);\n+        deser \u003d _createDeserializer(ctxt, type, property);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n-        _resolveDeserializer(ctxt, (ResolvableDeserializer) deser);\n+        ((ResolvableDeserializer) deser).resolve(ctxt);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "53fb8522b402a409139175cbf867afa924e549f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
      "commitDate": "1/24/12, 1:02 PM",
      "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt.getConfig(), type, property);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        _resolveDeserializer(ctxt, (ResolvableDeserializer) deser);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 333,
          "functionName": "_createAndCache2",
          "functionAnnotation": "",
          "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(config, type, property);\n+        deser \u003d _createDeserializer(ctxt.getConfig(), type, property);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n-        _resolveDeserializer(config, (ResolvableDeserializer) deser);\n+        _resolveDeserializer(ctxt, (ResolvableDeserializer) deser);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(ctxt.getConfig(), type, property);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        _resolveDeserializer(ctxt, (ResolvableDeserializer) deser);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 333,
          "functionName": "_createAndCache2",
          "functionAnnotation": "",
          "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n-        deser \u003d _createDeserializer(config, type, property);\n+        deser \u003d _createDeserializer(ctxt.getConfig(), type, property);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n     boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n-        _resolveDeserializer(config, (ResolvableDeserializer) deser);\n+        _resolveDeserializer(ctxt, (ResolvableDeserializer) deser);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Yfilerename",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:08 AM",
      "commitNameOld": "c9e0c1712bb188783acb586a4eb4ece4217b2962",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(config, type, property);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        _resolveDeserializer(config, (ResolvableDeserializer) deser);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 333,
      "functionName": "_createAndCache2",
      "functionAnnotation": "",
      "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
      }
    },
    "530067bb8db8fc31c27c6075c64c1c075c3ea671": {
      "type": "Ybodychange",
      "commitMessage": "Remove @JsonCachable, replace with a method\n",
      "commitDate": "12/28/11, 10:35 AM",
      "commitName": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/11, 8:05 PM",
      "commitNameOld": "df6302f807bb230ae985a35100cbcc30af523bd1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.6,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(config, type, property);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d deser.isCachable();\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        _resolveDeserializer(config, (ResolvableDeserializer) deser);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
      "functionStartLine": 331,
      "functionName": "_createAndCache2",
      "functionAnnotation": "",
      "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n",
      "diff": "@@ -1,32 +1,22 @@\n protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003cObject\u003e deser;\n     try {\n         deser \u003d _createDeserializer(config, type, property);\n     } catch (IllegalArgumentException iae) {\n         throw new JsonMappingException(iae.getMessage(), null, iae);\n     }\n     if (deser \u003d\u003d null) {\n         return null;\n     }\n     boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n-    boolean addToCache \u003d (deser.getClass() \u003d\u003d BeanDeserializer.class);\n-    if (!addToCache) {\n-        if (config.isEnabled(DeserializationConfig.Feature.USE_ANNOTATIONS)) {\n-            AnnotationIntrospector aintr \u003d config.getAnnotationIntrospector();\n-            AnnotatedClass ac \u003d AnnotatedClass.construct(deser.getClass(), aintr, null);\n-            Boolean cacheAnn \u003d aintr.findCachability(ac);\n-            if (cacheAnn !\u003d null) {\n-                addToCache \u003d cacheAnn.booleanValue();\n-            }\n-        }\n-    }\n+    boolean addToCache \u003d deser.isCachable();\n     if (isResolvable) {\n         _incompleteDeserializers.put(type, deser);\n         _resolveDeserializer(config, (ResolvableDeserializer) deser);\n         _incompleteDeserializers.remove(type);\n     }\n     if (addToCache) {\n         _cachedDeserializers.put(type, deser);\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,32 @@\n+protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+    JsonDeserializer\u003cObject\u003e deser;\n+    try {\n+        deser \u003d _createDeserializer(config, type, property);\n+    } catch (IllegalArgumentException iae) {\n+        throw new JsonMappingException(iae.getMessage(), null, iae);\n+    }\n+    if (deser \u003d\u003d null) {\n+        return null;\n+    }\n+    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n+    boolean addToCache \u003d (deser.getClass() \u003d\u003d BeanDeserializer.class);\n+    if (!addToCache) {\n+        if (config.isEnabled(DeserializationConfig.Feature.USE_ANNOTATIONS)) {\n+            AnnotationIntrospector aintr \u003d config.getAnnotationIntrospector();\n+            AnnotatedClass ac \u003d AnnotatedClass.construct(deser.getClass(), aintr, null);\n+            Boolean cacheAnn \u003d aintr.findCachability(ac);\n+            if (cacheAnn !\u003d null) {\n+                addToCache \u003d cacheAnn.booleanValue();\n+            }\n+        }\n+    }\n+    if (isResolvable) {\n+        _incompleteDeserializers.put(type, deser);\n+        _resolveDeserializer(config, (ResolvableDeserializer) deser);\n+        _incompleteDeserializers.remove(type);\n+    }\n+    if (addToCache) {\n+        _cachedDeserializers.put(type, deser);\n+    }\n+    return deser;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003cObject\u003e deser;\n    try {\n        deser \u003d _createDeserializer(config, type, property);\n    } catch (IllegalArgumentException iae) {\n        throw new JsonMappingException(iae.getMessage(), null, iae);\n    }\n    if (deser \u003d\u003d null) {\n        return null;\n    }\n    boolean isResolvable \u003d (deser instanceof ResolvableDeserializer);\n    boolean addToCache \u003d (deser.getClass() \u003d\u003d BeanDeserializer.class);\n    if (!addToCache) {\n        if (config.isEnabled(DeserializationConfig.Feature.USE_ANNOTATIONS)) {\n            AnnotationIntrospector aintr \u003d config.getAnnotationIntrospector();\n            AnnotatedClass ac \u003d AnnotatedClass.construct(deser.getClass(), aintr, null);\n            Boolean cacheAnn \u003d aintr.findCachability(ac);\n            if (cacheAnn !\u003d null) {\n                addToCache \u003d cacheAnn.booleanValue();\n            }\n        }\n    }\n    if (isResolvable) {\n        _incompleteDeserializers.put(type, deser);\n        _resolveDeserializer(config, (ResolvableDeserializer) deser);\n        _incompleteDeserializers.remove(type);\n    }\n    if (addToCache) {\n        _cachedDeserializers.put(type, deser);\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
      "functionStartLine": 334,
      "functionName": "_createAndCache2",
      "functionAnnotation": "",
      "functionDoc": "Method that handles actual construction (via factory) and caching (both\nintermediate and eventual)\n"
    }
  }
}