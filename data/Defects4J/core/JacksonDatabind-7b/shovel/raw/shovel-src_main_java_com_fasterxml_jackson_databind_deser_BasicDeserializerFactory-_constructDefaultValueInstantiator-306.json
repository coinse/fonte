{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "_constructDefaultValueInstantiator",
  "functionId": "_constructDefaultValueInstantiator___ctxt-DeserializationContext__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
  "functionStartLine": 306,
  "functionEndLine": 328,
  "numCommitsSeen": 149,
  "timeTaken": 7640,
  "changeHistory": [
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7",
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7": "Ybodychange",
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25": "Ymultichange(Ymovefromfile,Yrename)",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ybodychange",
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a": "Ydocchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-850]: allow use of zero-arg factory methods using @JsonCreator\n",
      "commitDate": "7/22/12, 10:33 PM",
      "commitName": "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/9/12, 9:46 PM",
      "commitNameOld": "1421af6eeaa8101c3ba8cef834f893943e244cf8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 134.99,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n    if (beanDesc.getType().isConcrete()) {\n        _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n    }\n    return creators.constructValueInstantiator(config);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 323,
      "functionName": "_constructDefaultValueInstantiator",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
      "diff": "@@ -1,20 +1,13 @@\n protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n     CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n-    if (beanDesc.getType().isConcrete()) {\n-        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n-        if (defaultCtor !\u003d null) {\n-            if (fixAccess) {\n-                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n-            }\n-            creators.setDefaultConstructor(defaultCtor);\n-        }\n-    }\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n-    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n+    vchecker \u003d intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n     _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n-    _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n+    if (beanDesc.getType().isConcrete()) {\n+        _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n+    }\n     return creators.constructValueInstantiator(config);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25": {
      "type": "Ymultichange(Ymovefromfile,Yrename)",
      "commitMessage": "Further refactoring for DeserializerFactories\n",
      "commitDate": "1/26/12, 1:22 PM",
      "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Further refactoring for DeserializerFactories\n",
          "commitDate": "1/26/12, 1:22 PM",
          "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 1:07 PM",
          "commitNameOld": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 400,
          "functionName": "_constructDefaultValueInstantiator",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
          "diff": "@@ -1,20 +1,20 @@\n-protected ValueInstantiator constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n+protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n     CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     if (beanDesc.getType().isConcrete()) {\n         AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n         if (defaultCtor !\u003d null) {\n             if (fixAccess) {\n                 ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n             }\n             creators.setDefaultConstructor(defaultCtor);\n         }\n     }\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n     vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n     _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n     _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n     return creators.constructValueInstantiator(config);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
            "oldMethodName": "constructDefaultValueInstantiator",
            "newMethodName": "_constructDefaultValueInstantiator"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "Further refactoring for DeserializerFactories\n",
          "commitDate": "1/26/12, 1:22 PM",
          "commitName": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/26/12, 1:07 PM",
          "commitNameOld": "9db4d99c6c425b779f1bb79ad4db667702657600",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 400,
          "functionName": "_constructDefaultValueInstantiator",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
          "diff": "@@ -1,20 +1,20 @@\n-protected ValueInstantiator constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n+protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n     boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n     CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n     AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     if (beanDesc.getType().isConcrete()) {\n         AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n         if (defaultCtor !\u003d null) {\n             if (fixAccess) {\n                 ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n             }\n             creators.setDefaultConstructor(defaultCtor);\n         }\n     }\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n     vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n     _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n     _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n     return creators.constructValueInstantiator(config);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "constructDefaultValueInstantiator",
            "newValue": "_constructDefaultValueInstantiator"
          }
        }
      ]
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected ValueInstantiator constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 694,
          "functionName": "constructDefaultValueInstantiator",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
          "diff": "@@ -1,19 +1,20 @@\n-protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n-    boolean fixAccess \u003d config.canOverrideAccessModifiers();\n+protected ValueInstantiator constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n+    boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n     CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     if (beanDesc.getType().isConcrete()) {\n         AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n         if (defaultCtor !\u003d null) {\n             if (fixAccess) {\n                 ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n             }\n             creators.setDefaultConstructor(defaultCtor);\n         }\n     }\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n     vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n-    _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n-    _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n+    _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n+    _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n     return creators.constructValueInstantiator(config);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, beanDesc-BeanDescription]",
            "newValue": "[ctxt-DeserializationContext, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected ValueInstantiator constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 694,
          "functionName": "constructDefaultValueInstantiator",
          "functionAnnotation": "",
          "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
          "diff": "@@ -1,19 +1,20 @@\n-protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n-    boolean fixAccess \u003d config.canOverrideAccessModifiers();\n+protected ValueInstantiator constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {\n+    boolean fixAccess \u003d ctxt.canOverrideAccessModifiers();\n     CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     if (beanDesc.getType().isConcrete()) {\n         AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n         if (defaultCtor !\u003d null) {\n             if (fixAccess) {\n                 ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n             }\n             creators.setDefaultConstructor(defaultCtor);\n         }\n     }\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n     vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n-    _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n-    _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n+    _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n+    _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n     return creators.constructValueInstantiator(config);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 3:58 PM",
      "commitNameOld": "9e6c28f2ec520cc669e05c6d2f13b4486fa3f026",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 3.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d config.canOverrideAccessModifiers();\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 717,
      "functionName": "constructDefaultValueInstantiator",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
      "diff": "@@ -1,19 +1,19 @@\n-protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n+protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n     boolean fixAccess \u003d config.canOverrideAccessModifiers();\n     CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     if (beanDesc.getType().isConcrete()) {\n         AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n         if (defaultCtor !\u003d null) {\n             if (fixAccess) {\n                 ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n             }\n             creators.setDefaultConstructor(defaultCtor);\n         }\n     }\n     VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n     vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n     _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n     _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n     return creators.constructValueInstantiator(config);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, beanDesc-BasicBeanDescription]",
        "newValue": "[config-DeserializationConfig, beanDesc-BeanDescription]"
      }
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/28/11, 10:35 AM",
      "commitNameOld": "530067bb8db8fc31c27c6075c64c1c075c3ea671",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 14.49,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d config.canOverrideAccessModifiers();\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 747,
      "functionName": "constructDefaultValueInstantiator",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
      "diff": "@@ -1,19 +1,19 @@\n protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n-    boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n+    boolean fixAccess \u003d config.canOverrideAccessModifiers();\n     CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     if (beanDesc.getType().isConcrete()) {\n         AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n         if (defaultCtor !\u003d null) {\n             if (fixAccess) {\n                 ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n             }\n             creators.setDefaultConstructor(defaultCtor);\n         }\n     }\n     VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n     vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n     _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n     _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n     return creators.constructValueInstantiator(config);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d3fc10bcaed6834823eed08d1b8990b71590e5a": {
      "type": "Ydocchange",
      "commitMessage": "Add back support for deserializing JsonLocation (using ValueInstiator, for added style points)\n",
      "commitDate": "12/28/11, 12:52 AM",
      "commitName": "6d3fc10bcaed6834823eed08d1b8990b71590e5a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/27/11, 10:34 PM",
      "commitNameOld": "289b58d10604feb7b709b91da6d314e0d6ac3b5d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 748,
      "functionName": "constructDefaultValueInstantiator",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n\n@since 1.9\n",
        "newValue": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,19 @@\n+protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n+    boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n+    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n+    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    if (beanDesc.getType().isConcrete()) {\n+        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n+        if (defaultCtor !\u003d null) {\n+            if (fixAccess) {\n+                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n+            }\n+            creators.setDefaultConstructor(defaultCtor);\n+        }\n+    }\n+    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n+    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n+    _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n+    _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n+    return creators.constructValueInstantiator(config);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected ValueInstantiator constructDefaultValueInstantiator(DeserializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n    boolean fixAccess \u003d config.isEnabled(DeserializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n    CreatorCollector creators \u003d new CreatorCollector(beanDesc, fixAccess);\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    if (beanDesc.getType().isConcrete()) {\n        AnnotatedConstructor defaultCtor \u003d beanDesc.findDefaultConstructor();\n        if (defaultCtor !\u003d null) {\n            if (fixAccess) {\n                ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n            }\n            creators.setDefaultConstructor(defaultCtor);\n        }\n    }\n    VisibilityChecker\u003c?\u003e vchecker \u003d config.getDefaultVisibilityChecker();\n    vchecker \u003d config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n    _addDeserializerFactoryMethods(config, beanDesc, vchecker, intr, creators);\n    _addDeserializerConstructors(config, beanDesc, vchecker, intr, creators);\n    return creators.constructValueInstantiator(config);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 761,
      "functionName": "constructDefaultValueInstantiator",
      "functionAnnotation": "",
      "functionDoc": "Method that will construct standard default {@link ValueInstantiator}\nusing annotations (like @JsonCreator) and visibility rules\n\n@since 1.9\n"
    }
  }
}