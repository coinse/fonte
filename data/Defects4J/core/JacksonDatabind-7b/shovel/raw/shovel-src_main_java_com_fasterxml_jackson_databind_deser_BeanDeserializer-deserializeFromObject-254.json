{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializer.java",
  "functionName": "deserializeFromObject",
  "functionId": "deserializeFromObject___jp-JsonParser__ctxt-DeserializationContext",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
  "functionAnnotation": "@Override",
  "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
  "functionStartLine": 254,
  "functionEndLine": 315,
  "numCommitsSeen": 67,
  "timeTaken": 4562,
  "changeHistory": [
    "779a259bee468f0b75d638bf4aec975642229234",
    "70c7e1df3072ce404adb7d11165253fc51157e44",
    "301ea2d804e95710395cc0c52dcb5ed3afae1888",
    "11f7304cd625e21eff1cfc5ad27fe4a9e4cb9549",
    "6932e0706954018d3674604ff73cea0ba1365f97",
    "6751d13d4e0da1af79b05937ad738728ba031f70",
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
    "7555fa2b7e070b2bc50bfc0bd4e18526e3962b1f",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "779a259bee468f0b75d638bf4aec975642229234": "Ybodychange",
    "70c7e1df3072ce404adb7d11165253fc51157e44": "Ybodychange",
    "301ea2d804e95710395cc0c52dcb5ed3afae1888": "Ybodychange",
    "11f7304cd625e21eff1cfc5ad27fe4a9e4cb9549": "Ybodychange",
    "6932e0706954018d3674604ff73cea0ba1365f97": "Ybodychange",
    "6751d13d4e0da1af79b05937ad738728ba031f70": "Yannotationchange",
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687": "Ymultichange(Ybodychange,Ydocchange)",
    "7555fa2b7e070b2bc50bfc0bd4e18526e3962b1f": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "779a259bee468f0b75d638bf4aec975642229234": {
      "type": "Ybodychange",
      "commitMessage": "Minor tweaking of a contribution\n",
      "commitDate": "5/27/14, 4:34 PM",
      "commitName": "779a259bee468f0b75d638bf4aec975642229234",
      "commitAuthor": "Tatu",
      "commitDateOld": "5/25/14, 11:51 PM",
      "commitNameOld": "70c7e1df3072ce404adb7d11165253fc51157e44",
      "commitAuthorOld": "Pier Fumagalli",
      "daysBetweenCommits": 1.7,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        Object bean \u003d deserializeFromObjectUsingNonDefault(jp, ctxt);\n        if (_injectables !\u003d null) {\n            injectValues(ctxt, bean);\n        }\n        return bean;\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (jp.canReadObjectId()) {\n        Object id \u003d jp.getObjectId();\n        if (id !\u003d null) {\n            _handleTypedObjectId(jp, ctxt, bean, id);\n        }\n    }\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    JsonToken t \u003d jp.getCurrentToken();\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        handleUnknownVanilla(jp, ctxt, bean, propName);\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 258,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "@Override",
      "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
      "diff": "@@ -1,54 +1,48 @@\n @Override\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         Object bean \u003d deserializeFromObjectUsingNonDefault(jp, ctxt);\n         if (_injectables !\u003d null) {\n             injectValues(ctxt, bean);\n         }\n-        if (_needViewProcesing) {\n-            Class\u003c?\u003e view \u003d ctxt.getActiveView();\n-            if (view !\u003d null) {\n-                return deserializeWithView(jp, ctxt, bean, view);\n-            }\n-        }\n         return bean;\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (jp.canReadObjectId()) {\n         Object id \u003d jp.getObjectId();\n         if (id !\u003d null) {\n             _handleTypedObjectId(jp, ctxt, bean, id);\n         }\n     }\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n     if (_needViewProcesing) {\n         Class\u003c?\u003e view \u003d ctxt.getActiveView();\n         if (view !\u003d null) {\n             return deserializeWithView(jp, ctxt, bean, view);\n         }\n     }\n     JsonToken t \u003d jp.getCurrentToken();\n     for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         handleUnknownVanilla(jp, ctxt, bean, propName);\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "70c7e1df3072ce404adb7d11165253fc51157e44": {
      "type": "Ybodychange",
      "commitMessage": "Process injections when @JsonCreator annotated constructor is used.\n\nFixes jackson-databind/issues#471\n",
      "commitDate": "5/25/14, 11:51 PM",
      "commitName": "70c7e1df3072ce404adb7d11165253fc51157e44",
      "commitAuthor": "Pier Fumagalli",
      "commitDateOld": "3/16/14, 10:26 PM",
      "commitNameOld": "301ea2d804e95710395cc0c52dcb5ed3afae1888",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 70.06,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        Object bean \u003d deserializeFromObjectUsingNonDefault(jp, ctxt);\n        if (_injectables !\u003d null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            Class\u003c?\u003e view \u003d ctxt.getActiveView();\n            if (view !\u003d null) {\n                return deserializeWithView(jp, ctxt, bean, view);\n            }\n        }\n        return bean;\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (jp.canReadObjectId()) {\n        Object id \u003d jp.getObjectId();\n        if (id !\u003d null) {\n            _handleTypedObjectId(jp, ctxt, bean, id);\n        }\n    }\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    JsonToken t \u003d jp.getCurrentToken();\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        handleUnknownVanilla(jp, ctxt, bean, propName);\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 258,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "@Override",
      "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
      "diff": "@@ -1,44 +1,54 @@\n @Override\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n-        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n+        Object bean \u003d deserializeFromObjectUsingNonDefault(jp, ctxt);\n+        if (_injectables !\u003d null) {\n+            injectValues(ctxt, bean);\n+        }\n+        if (_needViewProcesing) {\n+            Class\u003c?\u003e view \u003d ctxt.getActiveView();\n+            if (view !\u003d null) {\n+                return deserializeWithView(jp, ctxt, bean, view);\n+            }\n+        }\n+        return bean;\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (jp.canReadObjectId()) {\n         Object id \u003d jp.getObjectId();\n         if (id !\u003d null) {\n             _handleTypedObjectId(jp, ctxt, bean, id);\n         }\n     }\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n     if (_needViewProcesing) {\n         Class\u003c?\u003e view \u003d ctxt.getActiveView();\n         if (view !\u003d null) {\n             return deserializeWithView(jp, ctxt, bean, view);\n         }\n     }\n     JsonToken t \u003d jp.getCurrentToken();\n     for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         handleUnknownVanilla(jp, ctxt, bean, propName);\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "301ea2d804e95710395cc0c52dcb5ed3afae1888": {
      "type": "Ybodychange",
      "commitMessage": "Minor code cleanup; should produce better error message for #354\n",
      "commitDate": "3/16/14, 10:26 PM",
      "commitName": "301ea2d804e95710395cc0c52dcb5ed3afae1888",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/7/13, 10:25 PM",
      "commitNameOld": "11f7304cd625e21eff1cfc5ad27fe4a9e4cb9549",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 128.96,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (jp.canReadObjectId()) {\n        Object id \u003d jp.getObjectId();\n        if (id !\u003d null) {\n            _handleTypedObjectId(jp, ctxt, bean, id);\n        }\n    }\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    JsonToken t \u003d jp.getCurrentToken();\n    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        handleUnknownVanilla(jp, ctxt, bean, propName);\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 258,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "@Override",
      "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
      "diff": "@@ -1,43 +1,44 @@\n @Override\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         return deserializeFromObjectUsingNonDefault(jp, ctxt);\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (jp.canReadObjectId()) {\n         Object id \u003d jp.getObjectId();\n         if (id !\u003d null) {\n             _handleTypedObjectId(jp, ctxt, bean, id);\n         }\n     }\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n     if (_needViewProcesing) {\n         Class\u003c?\u003e view \u003d ctxt.getActiveView();\n         if (view !\u003d null) {\n             return deserializeWithView(jp, ctxt, bean, view);\n         }\n     }\n-    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n+    JsonToken t \u003d jp.getCurrentToken();\n+    for (; t \u003d\u003d JsonToken.FIELD_NAME; t \u003d jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         handleUnknownVanilla(jp, ctxt, bean, propName);\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "11f7304cd625e21eff1cfc5ad27fe4a9e4cb9549": {
      "type": "Ybodychange",
      "commitMessage": "Implemented #343, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES\n",
      "commitDate": "11/7/13, 10:25 PM",
      "commitName": "11f7304cd625e21eff1cfc5ad27fe4a9e4cb9549",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/28/13, 12:10 PM",
      "commitNameOld": "e9184dc35ec97a1ec343a211e31b9ffcc638c882",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 40.47,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (jp.canReadObjectId()) {\n        Object id \u003d jp.getObjectId();\n        if (id !\u003d null) {\n            _handleTypedObjectId(jp, ctxt, bean, id);\n        }\n    }\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        handleUnknownVanilla(jp, ctxt, bean, propName);\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 258,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "@Override",
      "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
      "diff": "@@ -1,54 +1,43 @@\n @Override\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         return deserializeFromObjectUsingNonDefault(jp, ctxt);\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (jp.canReadObjectId()) {\n         Object id \u003d jp.getObjectId();\n         if (id !\u003d null) {\n             _handleTypedObjectId(jp, ctxt, bean, id);\n         }\n     }\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n     if (_needViewProcesing) {\n         Class\u003c?\u003e view \u003d ctxt.getActiveView();\n         if (view !\u003d null) {\n             return deserializeWithView(jp, ctxt, bean, view);\n         }\n     }\n     for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n-        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n-            jp.skipChildren();\n-        } else if (_anySetter !\u003d null) {\n-            try {\n-                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n-            } catch (Exception e) {\n-                wrapAndThrow(e, bean, propName, ctxt);\n-            }\n-            continue;\n-        } else {\n-            handleUnknownProperty(jp, ctxt, bean, propName);\n-        }\n+        handleUnknownVanilla(jp, ctxt, bean, propName);\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6932e0706954018d3674604ff73cea0ba1365f97": {
      "type": "Ybodychange",
      "commitMessage": "More support for reading native Object Ids\n",
      "commitDate": "8/5/13, 9:28 PM",
      "commitName": "6932e0706954018d3674604ff73cea0ba1365f97",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/4/13, 5:17 PM",
      "commitNameOld": "767ecb29a5a79f799113d13eb137389ff5a4c2c5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.17,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (jp.canReadObjectId()) {\n        Object id \u003d jp.getObjectId();\n        if (id !\u003d null) {\n            _handleTypedObjectId(jp, ctxt, bean, id);\n        }\n    }\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n            jp.skipChildren();\n        } else if (_anySetter !\u003d null) {\n            try {\n                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        } else {\n            handleUnknownProperty(jp, ctxt, bean, propName);\n        }\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 266,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "@Override",
      "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
      "diff": "@@ -1,48 +1,54 @@\n @Override\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         return deserializeFromObjectUsingNonDefault(jp, ctxt);\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n+    if (jp.canReadObjectId()) {\n+        Object id \u003d jp.getObjectId();\n+        if (id !\u003d null) {\n+            _handleTypedObjectId(jp, ctxt, bean, id);\n+        }\n+    }\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n     if (_needViewProcesing) {\n         Class\u003c?\u003e view \u003d ctxt.getActiveView();\n         if (view !\u003d null) {\n             return deserializeWithView(jp, ctxt, bean, view);\n         }\n     }\n     for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n             jp.skipChildren();\n         } else if (_anySetter !\u003d null) {\n             try {\n                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         } else {\n             handleUnknownProperty(jp, ctxt, bean, propName);\n         }\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6751d13d4e0da1af79b05937ad738728ba031f70": {
      "type": "Yannotationchange",
      "commitMessage": "Refactoring to demote more stuff in DatabindContext\n",
      "commitDate": "3/2/13, 1:23 PM",
      "commitName": "6751d13d4e0da1af79b05937ad738728ba031f70",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/18/13, 9:25 PM",
      "commitNameOld": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 11.67,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n            jp.skipChildren();\n        } else if (_anySetter !\u003d null) {\n            try {\n                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        } else {\n            handleUnknownProperty(jp, ctxt, bean, propName);\n        }\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 266,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "@Override",
      "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
      "diff": "@@ -1,47 +1,48 @@\n+@Override\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         return deserializeFromObjectUsingNonDefault(jp, ctxt);\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n     if (_needViewProcesing) {\n         Class\u003c?\u003e view \u003d ctxt.getActiveView();\n         if (view !\u003d null) {\n             return deserializeWithView(jp, ctxt, bean, view);\n         }\n     }\n     for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n             jp.skipChildren();\n         } else if (_anySetter !\u003d null) {\n             try {\n                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         } else {\n             handleUnknownProperty(jp, ctxt, bean, propName);\n         }\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "b2d3c7d55b46ee36a7435495e1fa97cac9acf687": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Bit more work on view handling\n",
      "commitDate": "1/27/12, 9:41 PM",
      "commitName": "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Bit more work on view handling\n",
          "commitDate": "1/27/12, 9:41 PM",
          "commitName": "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/26/12, 10:26 PM",
          "commitNameOld": "19ab5808eb8e47662f1d55408fdb186320061f13",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n            jp.skipChildren();\n        } else if (_anySetter !\u003d null) {\n            try {\n                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        } else {\n            handleUnknownProperty(jp, ctxt, bean, propName);\n        }\n    }\n    return bean;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 757,
          "functionName": "deserializeFromObject",
          "functionAnnotation": "",
          "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
          "diff": "@@ -1,41 +1,47 @@\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         return deserializeFromObjectUsingNonDefault(jp, ctxt);\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n+    if (_needViewProcesing) {\n+        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n+        if (view !\u003d null) {\n+            return deserializeWithView(jp, ctxt, bean, view);\n+        }\n+    }\n     for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n             jp.skipChildren();\n         } else if (_anySetter !\u003d null) {\n             try {\n                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         } else {\n             handleUnknownProperty(jp, ctxt, bean, propName);\n         }\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Bit more work on view handling\n",
          "commitDate": "1/27/12, 9:41 PM",
          "commitName": "b2d3c7d55b46ee36a7435495e1fa97cac9acf687",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/26/12, 10:26 PM",
          "commitNameOld": "19ab5808eb8e47662f1d55408fdb186320061f13",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    if (_needViewProcesing) {\n        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n        if (view !\u003d null) {\n            return deserializeWithView(jp, ctxt, bean, view);\n        }\n    }\n    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n            jp.skipChildren();\n        } else if (_anySetter !\u003d null) {\n            try {\n                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        } else {\n            handleUnknownProperty(jp, ctxt, bean, propName);\n        }\n    }\n    return bean;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
          "functionStartLine": 757,
          "functionName": "deserializeFromObject",
          "functionAnnotation": "",
          "functionDoc": "General version used when handling needs more advanced\nfeatures.\n",
          "diff": "@@ -1,41 +1,47 @@\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         return deserializeFromObjectUsingNonDefault(jp, ctxt);\n     }\n     final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n+    if (_needViewProcesing) {\n+        Class\u003c?\u003e view \u003d ctxt.getActiveView();\n+        if (view !\u003d null) {\n+            return deserializeWithView(jp, ctxt, bean, view);\n+        }\n+    }\n     for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n             jp.skipChildren();\n         } else if (_anySetter !\u003d null) {\n             try {\n                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         } else {\n             handleUnknownProperty(jp, ctxt, bean, propName);\n         }\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "General version used when handling needs more advanced\nfeatures.\n"
          }
        }
      ]
    },
    "7555fa2b7e070b2bc50bfc0bd4e18526e3962b1f": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-690]: pass DeserializationContext to ValueInstantiator.createXxx methods\n",
      "commitDate": "1/14/12, 11:03 PM",
      "commitName": "7555fa2b7e070b2bc50bfc0bd4e18526e3962b1f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/13/12, 10:25 PM",
      "commitNameOld": "4dc01e735c57e1a3d6e79f819713efaf77998edb",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n            jp.skipChildren();\n        } else if (_anySetter !\u003d null) {\n            try {\n                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        } else {\n            handleUnknownProperty(jp, ctxt, bean, propName);\n        }\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 649,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,41 @@\n public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (_nonStandardCreation) {\n         if (_unwrappedPropertyHandler !\u003d null) {\n             return deserializeWithUnwrapped(jp, ctxt);\n         }\n         if (_externalTypeIdHandler !\u003d null) {\n             return deserializeWithExternalTypeId(jp, ctxt);\n         }\n         return deserializeFromObjectUsingNonDefault(jp, ctxt);\n     }\n-    final Object bean \u003d _valueInstantiator.createUsingDefault();\n+    final Object bean \u003d _valueInstantiator.createUsingDefault(ctxt);\n     if (_injectables !\u003d null) {\n         injectValues(ctxt, bean);\n     }\n     for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n         String propName \u003d jp.getCurrentName();\n         jp.nextToken();\n         SettableBeanProperty prop \u003d _beanProperties.find(propName);\n         if (prop !\u003d null) {\n             try {\n                 prop.deserializeAndSet(jp, ctxt, bean);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         }\n         if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n             jp.skipChildren();\n         } else if (_anySetter !\u003d null) {\n             try {\n                 _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n             } catch (Exception e) {\n                 wrapAndThrow(e, bean, propName, ctxt);\n             }\n             continue;\n         } else {\n             handleUnknownProperty(jp, ctxt, bean, propName);\n         }\n     }\n     return bean;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,41 @@\n+public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    if (_nonStandardCreation) {\n+        if (_unwrappedPropertyHandler !\u003d null) {\n+            return deserializeWithUnwrapped(jp, ctxt);\n+        }\n+        if (_externalTypeIdHandler !\u003d null) {\n+            return deserializeWithExternalTypeId(jp, ctxt);\n+        }\n+        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n+    }\n+    final Object bean \u003d _valueInstantiator.createUsingDefault();\n+    if (_injectables !\u003d null) {\n+        injectValues(ctxt, bean);\n+    }\n+    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n+        String propName \u003d jp.getCurrentName();\n+        jp.nextToken();\n+        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n+        if (prop !\u003d null) {\n+            try {\n+                prop.deserializeAndSet(jp, ctxt, bean);\n+            } catch (Exception e) {\n+                wrapAndThrow(e, bean, propName, ctxt);\n+            }\n+            continue;\n+        }\n+        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n+            jp.skipChildren();\n+        } else if (_anySetter !\u003d null) {\n+            try {\n+                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n+            } catch (Exception e) {\n+                wrapAndThrow(e, bean, propName, ctxt);\n+            }\n+            continue;\n+        } else {\n+            handleUnknownProperty(jp, ctxt, bean, propName);\n+        }\n+    }\n+    return bean;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (_nonStandardCreation) {\n        if (_unwrappedPropertyHandler !\u003d null) {\n            return deserializeWithUnwrapped(jp, ctxt);\n        }\n        if (_externalTypeIdHandler !\u003d null) {\n            return deserializeWithExternalTypeId(jp, ctxt);\n        }\n        return deserializeFromObjectUsingNonDefault(jp, ctxt);\n    }\n    final Object bean \u003d _valueInstantiator.createUsingDefault();\n    if (_injectables !\u003d null) {\n        injectValues(ctxt, bean);\n    }\n    for (; jp.getCurrentToken() !\u003d JsonToken.END_OBJECT; jp.nextToken()) {\n        String propName \u003d jp.getCurrentName();\n        jp.nextToken();\n        SettableBeanProperty prop \u003d _beanProperties.find(propName);\n        if (prop !\u003d null) {\n            try {\n                prop.deserializeAndSet(jp, ctxt, bean);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        }\n        if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n            jp.skipChildren();\n        } else if (_anySetter !\u003d null) {\n            try {\n                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n            } catch (Exception e) {\n                wrapAndThrow(e, bean, propName, ctxt);\n            }\n            continue;\n        } else {\n            handleUnknownProperty(jp, ctxt, bean, propName);\n        }\n    }\n    return bean;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
      "functionStartLine": 674,
      "functionName": "deserializeFromObject",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}