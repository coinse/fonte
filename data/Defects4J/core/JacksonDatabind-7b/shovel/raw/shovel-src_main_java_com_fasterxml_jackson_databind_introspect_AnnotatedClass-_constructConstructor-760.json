{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotatedClass.java",
  "functionName": "_constructConstructor",
  "functionId": "_constructConstructor___ctor-Constructor__?____defaultCtor-boolean",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 760,
  "functionEndLine": 806,
  "numCommitsSeen": 18,
  "timeTaken": 1230,
  "changeHistory": [
    "0410f9a80edfb1fe4c73badd0e4c0ccf34da3ebb",
    "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "0410f9a80edfb1fe4c73badd0e4c0ccf34da3ebb": "Ybodychange",
    "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0410f9a80edfb1fe4c73badd0e4c0ccf34da3ebb": {
      "type": "Ybodychange",
      "commitMessage": "Further fixes for [JACKSON-757]\n",
      "commitDate": "1/25/12, 12:07 PM",
      "commitName": "0410f9a80edfb1fe4c73badd0e4c0ccf34da3ebb",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/22/12, 10:00 PM",
      "commitNameOld": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "protected AnnotatedConstructor _constructConstructor(Constructor\u003c?\u003e ctor, boolean defaultCtor) {\n    if (_annotationIntrospector \u003d\u003d null) {\n        return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n    }\n    if (defaultCtor) {\n        return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n    }\n    Annotation[][] paramAnns \u003d ctor.getParameterAnnotations();\n    int paramCount \u003d ctor.getParameterTypes().length;\n    AnnotationMap[] resolvedAnnotations \u003d null;\n    if (paramCount !\u003d paramAnns.length) {\n        Class\u003c?\u003e dc \u003d ctor.getDeclaringClass();\n        if (dc.isEnum() \u0026\u0026 (paramCount \u003d\u003d paramAnns.length + 2)) {\n            Annotation[][] old \u003d paramAnns;\n            paramAnns \u003d new Annotation[old.length + 2][];\n            System.arraycopy(old, 0, paramAnns, 2, old.length);\n            resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n        } else if (dc.isMemberClass()) {\n            if (paramCount \u003d\u003d (paramAnns.length + 1)) {\n                Annotation[][] old \u003d paramAnns;\n                paramAnns \u003d new Annotation[old.length + 1][];\n                System.arraycopy(old, 0, paramAnns, 1, old.length);\n                resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n            }\n        }\n        if (resolvedAnnotations \u003d\u003d null) {\n            throw new IllegalStateException(\"Internal error: constructor for \" + ctor.getDeclaringClass().getName() + \" has mismatch: \" + paramCount + \" parameters; \" + paramAnns.length + \" sets of annotations\");\n        }\n    } else {\n        resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n    }\n    return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 740,
      "functionName": "_constructConstructor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n protected AnnotatedConstructor _constructConstructor(Constructor\u003c?\u003e ctor, boolean defaultCtor) {\n     if (_annotationIntrospector \u003d\u003d null) {\n         return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n     }\n     if (defaultCtor) {\n         return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n     }\n     Annotation[][] paramAnns \u003d ctor.getParameterAnnotations();\n     int paramCount \u003d ctor.getParameterTypes().length;\n     AnnotationMap[] resolvedAnnotations \u003d null;\n     if (paramCount !\u003d paramAnns.length) {\n         Class\u003c?\u003e dc \u003d ctor.getDeclaringClass();\n-        if (dc.isMemberClass()) {\n+        if (dc.isEnum() \u0026\u0026 (paramCount \u003d\u003d paramAnns.length + 2)) {\n+            Annotation[][] old \u003d paramAnns;\n+            paramAnns \u003d new Annotation[old.length + 2][];\n+            System.arraycopy(old, 0, paramAnns, 2, old.length);\n+            resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n+        } else if (dc.isMemberClass()) {\n             if (paramCount \u003d\u003d (paramAnns.length + 1)) {\n                 Annotation[][] old \u003d paramAnns;\n                 paramAnns \u003d new Annotation[old.length + 1][];\n                 System.arraycopy(old, 0, paramAnns, 1, old.length);\n                 resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n-            } else if (dc.isEnum() \u0026\u0026 (paramCount \u003d\u003d paramAnns.length + 2)) {\n-                Annotation[][] old \u003d paramAnns;\n-                paramAnns \u003d new Annotation[old.length + 2][];\n-                System.arraycopy(old, 0, paramAnns, 2, old.length);\n-                resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n             }\n         }\n         if (resolvedAnnotations \u003d\u003d null) {\n             throw new IllegalStateException(\"Internal error: constructor for \" + ctor.getDeclaringClass().getName() + \" has mismatch: \" + paramCount + \" parameters; \" + paramAnns.length + \" sets of annotations\");\n         }\n     } else {\n         resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n     }\n     return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446": {
      "type": "Ybodychange",
      "commitMessage": "Fix [JACKSON-757]\n",
      "commitDate": "1/17/12, 2:09 PM",
      "commitName": "3a7cf58e48ee6d7cd63c030002777d9ee1ca4446",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/16/12, 6:26 PM",
      "commitNameOld": "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected AnnotatedConstructor _constructConstructor(Constructor\u003c?\u003e ctor, boolean defaultCtor) {\n    if (_annotationIntrospector \u003d\u003d null) {\n        return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n    }\n    if (defaultCtor) {\n        return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n    }\n    Annotation[][] paramAnns \u003d ctor.getParameterAnnotations();\n    int paramCount \u003d ctor.getParameterTypes().length;\n    AnnotationMap[] resolvedAnnotations \u003d null;\n    if (paramCount !\u003d paramAnns.length) {\n        Class\u003c?\u003e dc \u003d ctor.getDeclaringClass();\n        if (dc.isMemberClass()) {\n            if (paramCount \u003d\u003d (paramAnns.length + 1)) {\n                Annotation[][] old \u003d paramAnns;\n                paramAnns \u003d new Annotation[old.length + 1][];\n                System.arraycopy(old, 0, paramAnns, 1, old.length);\n                resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n            } else if (dc.isEnum() \u0026\u0026 (paramCount \u003d\u003d paramAnns.length + 2)) {\n                Annotation[][] old \u003d paramAnns;\n                paramAnns \u003d new Annotation[old.length + 2][];\n                System.arraycopy(old, 0, paramAnns, 2, old.length);\n                resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n            }\n        }\n        if (resolvedAnnotations \u003d\u003d null) {\n            throw new IllegalStateException(\"Internal error: constructor for \" + ctor.getDeclaringClass().getName() + \" has mismatch: \" + paramCount + \" parameters; \" + paramAnns.length + \" sets of annotations\");\n        }\n    } else {\n        resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n    }\n    return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 708,
      "functionName": "_constructConstructor",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,33 @@\n protected AnnotatedConstructor _constructConstructor(Constructor\u003c?\u003e ctor, boolean defaultCtor) {\n     if (_annotationIntrospector \u003d\u003d null) {\n         return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n     }\n     if (defaultCtor) {\n         return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n     }\n     Annotation[][] paramAnns \u003d ctor.getParameterAnnotations();\n     int paramCount \u003d ctor.getParameterTypes().length;\n-    AnnotationMap[] resolvedAnnotations;\n+    AnnotationMap[] resolvedAnnotations \u003d null;\n     if (paramCount !\u003d paramAnns.length) {\n-        if (ctor.getDeclaringClass().isMemberClass() \u0026\u0026 paramCount \u003d\u003d (paramAnns.length + 1)) {\n-            Annotation[][] old \u003d paramAnns;\n-            paramAnns \u003d new Annotation[old.length + 1][];\n-            System.arraycopy(old, 0, paramAnns, 1, old.length);\n-            resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n-        } else {\n+        Class\u003c?\u003e dc \u003d ctor.getDeclaringClass();\n+        if (dc.isMemberClass()) {\n+            if (paramCount \u003d\u003d (paramAnns.length + 1)) {\n+                Annotation[][] old \u003d paramAnns;\n+                paramAnns \u003d new Annotation[old.length + 1][];\n+                System.arraycopy(old, 0, paramAnns, 1, old.length);\n+                resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n+            } else if (dc.isEnum() \u0026\u0026 (paramCount \u003d\u003d paramAnns.length + 2)) {\n+                Annotation[][] old \u003d paramAnns;\n+                paramAnns \u003d new Annotation[old.length + 2][];\n+                System.arraycopy(old, 0, paramAnns, 2, old.length);\n+                resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n+            }\n+        }\n+        if (resolvedAnnotations \u003d\u003d null) {\n             throw new IllegalStateException(\"Internal error: constructor for \" + ctor.getDeclaringClass().getName() + \" has mismatch: \" + paramCount + \" parameters; \" + paramAnns.length + \" sets of annotations\");\n         }\n     } else {\n         resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n     }\n     return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,24 @@\n+protected AnnotatedConstructor _constructConstructor(Constructor\u003c?\u003e ctor, boolean defaultCtor) {\n+    if (_annotationIntrospector \u003d\u003d null) {\n+        return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n+    }\n+    if (defaultCtor) {\n+        return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n+    }\n+    Annotation[][] paramAnns \u003d ctor.getParameterAnnotations();\n+    int paramCount \u003d ctor.getParameterTypes().length;\n+    AnnotationMap[] resolvedAnnotations;\n+    if (paramCount !\u003d paramAnns.length) {\n+        if (ctor.getDeclaringClass().isMemberClass() \u0026\u0026 paramCount \u003d\u003d (paramAnns.length + 1)) {\n+            Annotation[][] old \u003d paramAnns;\n+            paramAnns \u003d new Annotation[old.length + 1][];\n+            System.arraycopy(old, 0, paramAnns, 1, old.length);\n+            resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n+        } else {\n+            throw new IllegalStateException(\"Internal error: constructor for \" + ctor.getDeclaringClass().getName() + \" has mismatch: \" + paramCount + \" parameters; \" + paramAnns.length + \" sets of annotations\");\n+        }\n+    } else {\n+        resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n+    }\n+    return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected AnnotatedConstructor _constructConstructor(Constructor\u003c?\u003e ctor, boolean defaultCtor) {\n    if (_annotationIntrospector \u003d\u003d null) {\n        return new AnnotatedConstructor(ctor, _emptyAnnotationMap(), _emptyAnnotationMaps(ctor.getParameterTypes().length));\n    }\n    if (defaultCtor) {\n        return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), null);\n    }\n    Annotation[][] paramAnns \u003d ctor.getParameterAnnotations();\n    int paramCount \u003d ctor.getParameterTypes().length;\n    AnnotationMap[] resolvedAnnotations;\n    if (paramCount !\u003d paramAnns.length) {\n        if (ctor.getDeclaringClass().isMemberClass() \u0026\u0026 paramCount \u003d\u003d (paramAnns.length + 1)) {\n            Annotation[][] old \u003d paramAnns;\n            paramAnns \u003d new Annotation[old.length + 1][];\n            System.arraycopy(old, 0, paramAnns, 1, old.length);\n            resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n        } else {\n            throw new IllegalStateException(\"Internal error: constructor for \" + ctor.getDeclaringClass().getName() + \" has mismatch: \" + paramCount + \" parameters; \" + paramAnns.length + \" sets of annotations\");\n        }\n    } else {\n        resolvedAnnotations \u003d _collectRelevantAnnotations(paramAnns);\n    }\n    return new AnnotatedConstructor(ctor, _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 764,
      "functionName": "_constructConstructor",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}