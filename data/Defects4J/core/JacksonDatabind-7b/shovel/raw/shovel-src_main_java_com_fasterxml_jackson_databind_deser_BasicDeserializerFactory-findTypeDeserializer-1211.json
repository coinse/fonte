{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-7b",
  "repositoryPath": "/tmp/JacksonDatabind-7b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "findTypeDeserializer",
  "functionId": "findTypeDeserializer___config-DeserializationConfig__baseType-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 1211,
  "functionEndLine": 1241,
  "numCommitsSeen": 129,
  "timeTaken": 6837,
  "changeHistory": [
    "0583b3a55de91d9c7f816233dca8690393f5e698",
    "49b712169c432100297164f6b5102f3578bd636c",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "0583b3a55de91d9c7f816233dca8690393f5e698": "Ybodychange",
    "49b712169c432100297164f6b5102f3578bd636c": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0583b3a55de91d9c7f816233dca8690393f5e698": {
      "type": "Ybodychange",
      "commitMessage": "Add access to type deserializer construction via DeserializationConfig\n",
      "commitDate": "5/4/14, 11:28 PM",
      "commitName": "0583b3a55de91d9c7f816233dca8690393f5e698",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/14/14, 10:19 PM",
      "commitNameOld": "41484009964b69f81c91defe22b970f8f2dc5cd5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 20.05,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType) throws JsonMappingException {\n    BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n        if (b \u003d\u003d null) {\n            return null;\n        }\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n        JavaType defaultType \u003d mapAbstractType(config, baseType);\n        if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n            b \u003d b.defaultImpl(defaultType.getRawClass());\n        }\n    }\n    return b.buildTypeDeserializer(config, baseType, subtypes);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 1208,
      "functionName": "findTypeDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,23 @@\n @Override\n public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType) throws JsonMappingException {\n-    Class\u003c?\u003e cls \u003d baseType.getRawClass();\n-    BeanDescription bean \u003d config.introspectClassAnnotations(cls);\n+    BeanDescription bean \u003d config.introspectClassAnnotations(baseType.getRawClass());\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n         if (b \u003d\u003d null) {\n             return null;\n         }\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n     if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n         JavaType defaultType \u003d mapAbstractType(config, baseType);\n         if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n             b \u003d b.defaultImpl(defaultType.getRawClass());\n         }\n     }\n     return b.buildTypeDeserializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "49b712169c432100297164f6b5102f3578bd636c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
      "commitDate": "1/30/12, 10:13 PM",
      "commitName": "49b712169c432100297164f6b5102f3578bd636c",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
          "commitDate": "1/30/12, 10:13 PM",
          "commitName": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/12, 7:15 PM",
          "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d baseType.getRawClass();\n    BeanDescription bean \u003d config.introspectClassAnnotations(cls);\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n        if (b \u003d\u003d null) {\n            return null;\n        }\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n        JavaType defaultType \u003d mapAbstractType(config, baseType);\n        if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n            b \u003d b.defaultImpl(defaultType.getRawClass());\n        }\n    }\n    return b.buildTypeDeserializer(config, baseType, subtypes);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1070,
          "functionName": "findTypeDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,24 +1,24 @@\n @Override\n-public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType, BeanProperty property) throws JsonMappingException {\n+public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d baseType.getRawClass();\n     BeanDescription bean \u003d config.introspectClassAnnotations(cls);\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n         if (b \u003d\u003d null) {\n             return null;\n         }\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n     if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n         JavaType defaultType \u003d mapAbstractType(config, baseType);\n         if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n             b \u003d b.defaultImpl(defaultType.getRawClass());\n         }\n     }\n-    return b.buildTypeDeserializer(config, baseType, subtypes, property);\n+    return b.buildTypeDeserializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, baseType-JavaType, property-BeanProperty]",
            "newValue": "[config-DeserializationConfig, baseType-JavaType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
          "commitDate": "1/30/12, 10:13 PM",
          "commitName": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/12, 7:15 PM",
          "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d baseType.getRawClass();\n    BeanDescription bean \u003d config.introspectClassAnnotations(cls);\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n        if (b \u003d\u003d null) {\n            return null;\n        }\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n        JavaType defaultType \u003d mapAbstractType(config, baseType);\n        if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n            b \u003d b.defaultImpl(defaultType.getRawClass());\n        }\n    }\n    return b.buildTypeDeserializer(config, baseType, subtypes);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 1070,
          "functionName": "findTypeDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,24 +1,24 @@\n @Override\n-public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType, BeanProperty property) throws JsonMappingException {\n+public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d baseType.getRawClass();\n     BeanDescription bean \u003d config.introspectClassAnnotations(cls);\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n         if (b \u003d\u003d null) {\n             return null;\n         }\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n     if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n         JavaType defaultType \u003d mapAbstractType(config, baseType);\n         if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n             b \u003d b.defaultImpl(defaultType.getRawClass());\n         }\n     }\n-    return b.buildTypeDeserializer(config, baseType, subtypes, property);\n+    return b.buildTypeDeserializer(config, baseType, subtypes);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/21/12, 11:03 AM",
      "commitNameOld": "37914e65ce1dca8869d5e2baa53043cf0d725ce0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d baseType.getRawClass();\n    BeanDescription bean \u003d config.introspectClassAnnotations(cls);\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n        if (b \u003d\u003d null) {\n            return null;\n        }\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n        JavaType defaultType \u003d mapAbstractType(config, baseType);\n        if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n            b \u003d b.defaultImpl(defaultType.getRawClass());\n        }\n    }\n    return b.buildTypeDeserializer(config, baseType, subtypes, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 611,
      "functionName": "findTypeDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,24 @@\n @Override\n public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType, BeanProperty property) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d baseType.getRawClass();\n-    BasicBeanDescription bean \u003d config.introspectClassAnnotations(cls);\n+    BeanDescription bean \u003d config.introspectClassAnnotations(cls);\n     AnnotatedClass ac \u003d bean.getClassInfo();\n     AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n     TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n     Collection\u003cNamedType\u003e subtypes \u003d null;\n     if (b \u003d\u003d null) {\n         b \u003d config.getDefaultTyper(baseType);\n         if (b \u003d\u003d null) {\n             return null;\n         }\n     } else {\n         subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n     }\n     if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n         JavaType defaultType \u003d mapAbstractType(config, baseType);\n         if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n             b \u003d b.defaultImpl(defaultType.getRawClass());\n         }\n     }\n     return b.buildTypeDeserializer(config, baseType, subtypes, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,24 @@\n+@Override\n+public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType, BeanProperty property) throws JsonMappingException {\n+    Class\u003c?\u003e cls \u003d baseType.getRawClass();\n+    BasicBeanDescription bean \u003d config.introspectClassAnnotations(cls);\n+    AnnotatedClass ac \u003d bean.getClassInfo();\n+    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n+    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n+    Collection\u003cNamedType\u003e subtypes \u003d null;\n+    if (b \u003d\u003d null) {\n+        b \u003d config.getDefaultTyper(baseType);\n+        if (b \u003d\u003d null) {\n+            return null;\n+        }\n+    } else {\n+        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n+    }\n+    if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n+        JavaType defaultType \u003d mapAbstractType(config, baseType);\n+        if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n+            b \u003d b.defaultImpl(defaultType.getRawClass());\n+        }\n+    }\n+    return b.buildTypeDeserializer(config, baseType, subtypes, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d baseType.getRawClass();\n    BasicBeanDescription bean \u003d config.introspectClassAnnotations(cls);\n    AnnotatedClass ac \u003d bean.getClassInfo();\n    AnnotationIntrospector ai \u003d config.getAnnotationIntrospector();\n    TypeResolverBuilder\u003c?\u003e b \u003d ai.findTypeResolver(config, ac, baseType);\n    Collection\u003cNamedType\u003e subtypes \u003d null;\n    if (b \u003d\u003d null) {\n        b \u003d config.getDefaultTyper(baseType);\n        if (b \u003d\u003d null) {\n            return null;\n        }\n    } else {\n        subtypes \u003d config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n    }\n    if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n        JavaType defaultType \u003d mapAbstractType(config, baseType);\n        if (defaultType !\u003d null \u0026\u0026 defaultType.getRawClass() !\u003d baseType.getRawClass()) {\n            b \u003d b.defaultImpl(defaultType.getRawClass());\n        }\n    }\n    return b.buildTypeDeserializer(config, baseType, subtypes, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 563,
      "functionName": "findTypeDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}