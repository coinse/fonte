{
  "origin": "codeshovel",
  "repositoryName": "Gson-5b",
  "repositoryPath": "/tmp/Gson-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultDateTypeAdapter.java",
  "functionName": "deserialize",
  "functionId": "deserialize___json-JsonElement__typeOfT-Type__context-JsonDeserializationContext",
  "sourceFilePath": "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 79,
  "functionEndLine": 94,
  "numCommitsSeen": 90,
  "timeTaken": 3778,
  "changeHistory": [
    "e5b3f6368db33c846b094b0d695d3a1b826e3892",
    "4da08b0ec6c35d4d36bf8e91cc402f9fb3117567",
    "81854db4ac8c50aa65ffb5ad7b66747cdea4ab4c",
    "f9b6c2095f3409b2324579e9edea25cd64a2ceb1",
    "d20df34b8b65067b54138639678cc11391d3c47a",
    "4402240294300515e8f4141adba42732395b5c21",
    "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53",
    "f9976f4b0125ffb6482728448e56c917dd6b35a7",
    "84c71409da812c1ccc62196ac2ff71f761bbf31b",
    "454f58a7b144d2f16e3ea55b34074b8a66a9a2fe",
    "e26a6d5c187228d5f8152db6a8cbbd157a28b0a5",
    "0d8150fe52eba34a0472c47be71587885ba4a94c",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b"
  ],
  "changeHistoryShort": {
    "e5b3f6368db33c846b094b0d695d3a1b826e3892": "Yannotationchange",
    "4da08b0ec6c35d4d36bf8e91cc402f9fb3117567": "Ymultichange(Ymovefromfile,Yformatchange)",
    "81854db4ac8c50aa65ffb5ad7b66747cdea4ab4c": "Ymultichange(Yreturntypechange,Ybodychange)",
    "f9b6c2095f3409b2324579e9edea25cd64a2ceb1": "Ymultichange(Yreturntypechange,Ybodychange)",
    "d20df34b8b65067b54138639678cc11391d3c47a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "4402240294300515e8f4141adba42732395b5c21": "Ymultichange(Yreturntypechange,Ybodychange)",
    "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53": "Ymultichange(Yreturntypechange,Ybodychange)",
    "f9976f4b0125ffb6482728448e56c917dd6b35a7": "Ymultichange(Yreturntypechange,Ybodychange)",
    "84c71409da812c1ccc62196ac2ff71f761bbf31b": "Ymultichange(Yreturntypechange,Ybodychange)",
    "454f58a7b144d2f16e3ea55b34074b8a66a9a2fe": "Yformatchange",
    "e26a6d5c187228d5f8152db6a8cbbd157a28b0a5": "Ybodychange",
    "0d8150fe52eba34a0472c47be71587885ba4a94c": "Ymultichange(Yreturntypechange,Ybodychange)",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e5b3f6368db33c846b094b0d695d3a1b826e3892": {
      "type": "Yannotationchange",
      "commitMessage": "updated minimum JDK version to 1.6.\nAdded Overrides for methods implementing an interface.\n",
      "commitDate": "11/4/15, 6:52 PM",
      "commitName": "e5b3f6368db33c846b094b0d695d3a1b826e3892",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "11/20/11, 10:23 PM",
      "commitNameOld": "4da08b0ec6c35d4d36bf8e91cc402f9fb3117567",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 1444.85,
      "commitsBetweenForRepo": 334,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n    }\n    Date date \u003d deserializeToDate(json);\n    if (typeOfT \u003d\u003d Date.class) {\n        return date;\n    } else if (typeOfT \u003d\u003d Timestamp.class) {\n        return new Timestamp(date.getTime());\n    } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java",
      "functionStartLine": 79,
      "functionName": "deserialize",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,16 @@\n+@Override\n public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n     if (!(json instanceof JsonPrimitive)) {\n         throw new JsonParseException(\"The date should be a string value\");\n     }\n     Date date \u003d deserializeToDate(json);\n     if (typeOfT \u003d\u003d Date.class) {\n         return date;\n     } else if (typeOfT \u003d\u003d Timestamp.class) {\n         return new Timestamp(date.getTime());\n     } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n         return new java.sql.Date(date.getTime());\n     } else {\n         throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "4da08b0ec6c35d4d36bf8e91cc402f9fb3117567": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "Remove two implementation classes that weren\u0027t generally useful:\n - The cache interface has only one implementation. Drop the interface; we can add it back later if necessary.\n - The DefaultTypeAdapters class contains one member class. Just make that a top-level class.\n",
      "commitDate": "11/20/11, 10:23 PM",
      "commitName": "4da08b0ec6c35d4d36bf8e91cc402f9fb3117567",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Remove two implementation classes that weren\u0027t generally useful:\n - The cache interface has only one implementation. Drop the interface; we can add it back later if necessary.\n - The DefaultTypeAdapters class contains one member class. Just make that a top-level class.\n",
          "commitDate": "11/20/11, 10:23 PM",
          "commitName": "4da08b0ec6c35d4d36bf8e91cc402f9fb3117567",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "11/20/11, 10:14 PM",
          "commitNameOld": "7def596775df746f3440f40ffdb937ad5f535265",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n    }\n    Date date \u003d deserializeToDate(json);\n    if (typeOfT \u003d\u003d Date.class) {\n        return date;\n    } else if (typeOfT \u003d\u003d Timestamp.class) {\n        return new Timestamp(date.getTime());\n    } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java",
          "functionStartLine": 77,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {
            "oldPath": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
            "newPath": "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java",
            "oldMethodName": "deserialize",
            "newMethodName": "deserialize"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Remove two implementation classes that weren\u0027t generally useful:\n - The cache interface has only one implementation. Drop the interface; we can add it back later if necessary.\n - The DefaultTypeAdapters class contains one member class. Just make that a top-level class.\n",
          "commitDate": "11/20/11, 10:23 PM",
          "commitName": "4da08b0ec6c35d4d36bf8e91cc402f9fb3117567",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "11/20/11, 10:14 PM",
          "commitNameOld": "7def596775df746f3440f40ffdb937ad5f535265",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n    }\n    Date date \u003d deserializeToDate(json);\n    if (typeOfT \u003d\u003d Date.class) {\n        return date;\n    } else if (typeOfT \u003d\u003d Timestamp.class) {\n        return new Timestamp(date.getTime());\n    } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java",
          "functionStartLine": 77,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "81854db4ac8c50aa65ffb5ad7b66747cdea4ab4c": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Converted java.sql.Timestamp type adapter to the new style.\n",
      "commitDate": "9/25/11, 2:35 PM",
      "commitName": "81854db4ac8c50aa65ffb5ad7b66747cdea4ab4c",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Converted java.sql.Timestamp type adapter to the new style.\n",
          "commitDate": "9/25/11, 2:35 PM",
          "commitName": "81854db4ac8c50aa65ffb5ad7b66747cdea4ab4c",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/23/11, 11:42 AM",
          "commitNameOld": "f9b6c2095f3409b2324579e9edea25cd64a2ceb1",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 2.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n    }\n    Date date \u003d deserializeToDate(json);\n    if (typeOfT \u003d\u003d Date.class) {\n        return date;\n    } else if (typeOfT \u003d\u003d Timestamp.class) {\n        return new Timestamp(date.getTime());\n    } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 126,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,15 @@\n-public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    Date date \u003d context.deserialize(json, Date.class);\n-    return new Timestamp(date.getTime());\n+public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    if (!(json instanceof JsonPrimitive)) {\n+        throw new JsonParseException(\"The date should be a string value\");\n+    }\n+    Date date \u003d deserializeToDate(json);\n+    if (typeOfT \u003d\u003d Date.class) {\n+        return date;\n+    } else if (typeOfT \u003d\u003d Timestamp.class) {\n+        return new Timestamp(date.getTime());\n+    } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n+        return new java.sql.Date(date.getTime());\n+    } else {\n+        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Timestamp",
            "newValue": "Date"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Converted java.sql.Timestamp type adapter to the new style.\n",
          "commitDate": "9/25/11, 2:35 PM",
          "commitName": "81854db4ac8c50aa65ffb5ad7b66747cdea4ab4c",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/23/11, 11:42 AM",
          "commitNameOld": "f9b6c2095f3409b2324579e9edea25cd64a2ceb1",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 2.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n    }\n    Date date \u003d deserializeToDate(json);\n    if (typeOfT \u003d\u003d Date.class) {\n        return date;\n    } else if (typeOfT \u003d\u003d Timestamp.class) {\n        return new Timestamp(date.getTime());\n    } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 126,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,4 +1,15 @@\n-public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    Date date \u003d context.deserialize(json, Date.class);\n-    return new Timestamp(date.getTime());\n+public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    if (!(json instanceof JsonPrimitive)) {\n+        throw new JsonParseException(\"The date should be a string value\");\n+    }\n+    Date date \u003d deserializeToDate(json);\n+    if (typeOfT \u003d\u003d Date.class) {\n+        return date;\n+    } else if (typeOfT \u003d\u003d Timestamp.class) {\n+        return new Timestamp(date.getTime());\n+    } else if (typeOfT \u003d\u003d java.sql.Date.class) {\n+        return new java.sql.Date(date.getTime());\n+    } else {\n+        throw new IllegalArgumentException(getClass() + \" cannot deserialize to \" + typeOfT);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f9b6c2095f3409b2324579e9edea25cd64a2ceb1": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Converted java.sql.Time type adapter to the new style.\n",
      "commitDate": "9/23/11, 11:42 AM",
      "commitName": "f9b6c2095f3409b2324579e9edea25cd64a2ceb1",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Converted java.sql.Time type adapter to the new style.\n",
          "commitDate": "9/23/11, 11:42 AM",
          "commitName": "f9b6c2095f3409b2324579e9edea25cd64a2ceb1",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/19/11, 5:26 PM",
          "commitNameOld": "8217aca9250c59fef8dbe3b7fe7fd4da86ab1ae0",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 3.76,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    Date date \u003d context.deserialize(json, Date.class);\n    return new Timestamp(date.getTime());\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 174,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,4 @@\n-public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    if (!(json instanceof JsonPrimitive)) {\n-        throw new JsonParseException(\"The date should be a string value\");\n-    }\n-    try {\n-        synchronized (format) {\n-            Date date \u003d format.parse(json.getAsString());\n-            return new Time(date.getTime());\n-        }\n-    } catch (ParseException e) {\n-        throw new JsonSyntaxException(e);\n-    }\n+public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    Date date \u003d context.deserialize(json, Date.class);\n+    return new Timestamp(date.getTime());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Time",
            "newValue": "Timestamp"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Converted java.sql.Time type adapter to the new style.\n",
          "commitDate": "9/23/11, 11:42 AM",
          "commitName": "f9b6c2095f3409b2324579e9edea25cd64a2ceb1",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/19/11, 5:26 PM",
          "commitNameOld": "8217aca9250c59fef8dbe3b7fe7fd4da86ab1ae0",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 3.76,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    Date date \u003d context.deserialize(json, Date.class);\n    return new Timestamp(date.getTime());\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 174,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,13 +1,4 @@\n-public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    if (!(json instanceof JsonPrimitive)) {\n-        throw new JsonParseException(\"The date should be a string value\");\n-    }\n-    try {\n-        synchronized (format) {\n-            Date date \u003d format.parse(json.getAsString());\n-            return new Time(date.getTime());\n-        }\n-    } catch (ParseException e) {\n-        throw new JsonSyntaxException(e);\n-    }\n+public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    Date date \u003d context.deserialize(json, Date.class);\n+    return new Timestamp(date.getTime());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d20df34b8b65067b54138639678cc11391d3c47a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Converted Calendar/GregorianCalendar type adapters to the new style.\n",
      "commitDate": "9/19/11, 5:08 PM",
      "commitName": "d20df34b8b65067b54138639678cc11391d3c47a",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Converted Calendar/GregorianCalendar type adapters to the new style.\n",
          "commitDate": "9/19/11, 5:08 PM",
          "commitName": "d20df34b8b65067b54138639678cc11391d3c47a",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/19/11, 10:02 AM",
          "commitNameOld": "4402240294300515e8f4141adba42732395b5c21",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.3,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n    }\n    try {\n        synchronized (format) {\n            Date date \u003d format.parse(json.getAsString());\n            return new Time(date.getTime());\n        }\n    } catch (ParseException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 234,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,13 @@\n-public GregorianCalendar deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    JsonObject obj \u003d json.getAsJsonObject();\n-    int year \u003d obj.get(YEAR).getAsInt();\n-    int month \u003d obj.get(MONTH).getAsInt();\n-    int dayOfMonth \u003d obj.get(DAY_OF_MONTH).getAsInt();\n-    int hourOfDay \u003d obj.get(HOUR_OF_DAY).getAsInt();\n-    int minute \u003d obj.get(MINUTE).getAsInt();\n-    int second \u003d obj.get(SECOND).getAsInt();\n-    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n+public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    if (!(json instanceof JsonPrimitive)) {\n+        throw new JsonParseException(\"The date should be a string value\");\n+    }\n+    try {\n+        synchronized (format) {\n+            Date date \u003d format.parse(json.getAsString());\n+            return new Time(date.getTime());\n+        }\n+    } catch (ParseException e) {\n+        throw new JsonSyntaxException(e);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "GregorianCalendar",
            "newValue": "Time"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Converted Calendar/GregorianCalendar type adapters to the new style.\n",
          "commitDate": "9/19/11, 5:08 PM",
          "commitName": "d20df34b8b65067b54138639678cc11391d3c47a",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/19/11, 10:02 AM",
          "commitNameOld": "4402240294300515e8f4141adba42732395b5c21",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.3,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n    }\n    try {\n        synchronized (format) {\n            Date date \u003d format.parse(json.getAsString());\n            return new Time(date.getTime());\n        }\n    } catch (ParseException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 234,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,10 +1,13 @@\n-public GregorianCalendar deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    JsonObject obj \u003d json.getAsJsonObject();\n-    int year \u003d obj.get(YEAR).getAsInt();\n-    int month \u003d obj.get(MONTH).getAsInt();\n-    int dayOfMonth \u003d obj.get(DAY_OF_MONTH).getAsInt();\n-    int hourOfDay \u003d obj.get(HOUR_OF_DAY).getAsInt();\n-    int minute \u003d obj.get(MINUTE).getAsInt();\n-    int second \u003d obj.get(SECOND).getAsInt();\n-    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n+public Time deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    if (!(json instanceof JsonPrimitive)) {\n+        throw new JsonParseException(\"The date should be a string value\");\n+    }\n+    try {\n+        synchronized (format) {\n+            Date date \u003d format.parse(json.getAsString());\n+            return new Time(date.getTime());\n+        }\n+    } catch (ParseException e) {\n+        throw new JsonSyntaxException(e);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "4402240294300515e8f4141adba42732395b5c21": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Converted Number type adapter to the new style.\n",
      "commitDate": "9/19/11, 10:02 AM",
      "commitName": "4402240294300515e8f4141adba42732395b5c21",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Converted Number type adapter to the new style.\n",
          "commitDate": "9/19/11, 10:02 AM",
          "commitName": "4402240294300515e8f4141adba42732395b5c21",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/15/11, 10:58 PM",
          "commitNameOld": "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 3.46,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public GregorianCalendar deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    JsonObject obj \u003d json.getAsJsonObject();\n    int year \u003d obj.get(YEAR).getAsInt();\n    int month \u003d obj.get(MONTH).getAsInt();\n    int dayOfMonth \u003d obj.get(DAY_OF_MONTH).getAsInt();\n    int hourOfDay \u003d obj.get(HOUR_OF_DAY).getAsInt();\n    int minute \u003d obj.get(MINUTE).getAsInt();\n    int second \u003d obj.get(SECOND).getAsInt();\n    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 279,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,10 @@\n-public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    try {\n-        return json.getAsNumber();\n-    } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-    } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-    } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-    }\n+public GregorianCalendar deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    JsonObject obj \u003d json.getAsJsonObject();\n+    int year \u003d obj.get(YEAR).getAsInt();\n+    int month \u003d obj.get(MONTH).getAsInt();\n+    int dayOfMonth \u003d obj.get(DAY_OF_MONTH).getAsInt();\n+    int hourOfDay \u003d obj.get(HOUR_OF_DAY).getAsInt();\n+    int minute \u003d obj.get(MINUTE).getAsInt();\n+    int second \u003d obj.get(SECOND).getAsInt();\n+    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Number",
            "newValue": "GregorianCalendar"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Converted Number type adapter to the new style.\n",
          "commitDate": "9/19/11, 10:02 AM",
          "commitName": "4402240294300515e8f4141adba42732395b5c21",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/15/11, 10:58 PM",
          "commitNameOld": "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 3.46,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public GregorianCalendar deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    JsonObject obj \u003d json.getAsJsonObject();\n    int year \u003d obj.get(YEAR).getAsInt();\n    int month \u003d obj.get(MONTH).getAsInt();\n    int dayOfMonth \u003d obj.get(DAY_OF_MONTH).getAsInt();\n    int hourOfDay \u003d obj.get(HOUR_OF_DAY).getAsInt();\n    int minute \u003d obj.get(MINUTE).getAsInt();\n    int second \u003d obj.get(SECOND).getAsInt();\n    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 279,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,11 +1,10 @@\n-public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    try {\n-        return json.getAsNumber();\n-    } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-    } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-    } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-    }\n+public GregorianCalendar deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    JsonObject obj \u003d json.getAsJsonObject();\n+    int year \u003d obj.get(YEAR).getAsInt();\n+    int month \u003d obj.get(MONTH).getAsInt();\n+    int dayOfMonth \u003d obj.get(DAY_OF_MONTH).getAsInt();\n+    int hourOfDay \u003d obj.get(HOUR_OF_DAY).getAsInt();\n+    int minute \u003d obj.get(MINUTE).getAsInt();\n+    int second \u003d obj.get(SECOND).getAsInt();\n+    return new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Converted CharacterTypeAdapter to the new style.\n",
      "commitDate": "9/15/11, 10:58 PM",
      "commitName": "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Converted CharacterTypeAdapter to the new style.\n",
          "commitDate": "9/15/11, 10:58 PM",
          "commitName": "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/15/11, 10:52 PM",
          "commitNameOld": "882c14a36782889b54fc284c43e386252ae2de23",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    try {\n        return json.getAsNumber();\n    } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n    } catch (UnsupportedOperationException e) {\n        throw new JsonSyntaxException(e);\n    } catch (IllegalStateException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 309,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,11 @@\n-public Character deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    return json.getAsCharacter();\n+public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    try {\n+        return json.getAsNumber();\n+    } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+    } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+    } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Character",
            "newValue": "Number"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Converted CharacterTypeAdapter to the new style.\n",
          "commitDate": "9/15/11, 10:58 PM",
          "commitName": "b5f8ef6e16d615f48c35ed3c6826db0616e1fb53",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/15/11, 10:52 PM",
          "commitNameOld": "882c14a36782889b54fc284c43e386252ae2de23",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    try {\n        return json.getAsNumber();\n    } catch (NumberFormatException e) {\n        throw new JsonSyntaxException(e);\n    } catch (UnsupportedOperationException e) {\n        throw new JsonSyntaxException(e);\n    } catch (IllegalStateException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 309,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,11 @@\n-public Character deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    return json.getAsCharacter();\n+public Number deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    try {\n+        return json.getAsNumber();\n+    } catch (NumberFormatException e) {\n+        throw new JsonSyntaxException(e);\n+    } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+    } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f9976f4b0125ffb6482728448e56c917dd6b35a7": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Switched Short, URI, URL, UUID, StringBuilder and StringBuffer type adapters to new-style.\n",
      "commitDate": "8/25/11, 7:33 PM",
      "commitName": "f9976f4b0125ffb6482728448e56c917dd6b35a7",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Switched Short, URI, URL, UUID, StringBuilder and StringBuffer type adapters to new-style.\n",
          "commitDate": "8/25/11, 7:33 PM",
          "commitName": "f9976f4b0125ffb6482728448e56c917dd6b35a7",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "8/18/11, 8:13 PM",
          "commitNameOld": "84c71409da812c1ccc62196ac2ff71f761bbf31b",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public Character deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return json.getAsCharacter();\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 733,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n-public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    return new StringBuffer(json.getAsString());\n+public Character deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    return json.getAsCharacter();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "StringBuffer",
            "newValue": "Character"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Switched Short, URI, URL, UUID, StringBuilder and StringBuffer type adapters to new-style.\n",
          "commitDate": "8/25/11, 7:33 PM",
          "commitName": "f9976f4b0125ffb6482728448e56c917dd6b35a7",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "8/18/11, 8:13 PM",
          "commitNameOld": "84c71409da812c1ccc62196ac2ff71f761bbf31b",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 6.97,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public Character deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return json.getAsCharacter();\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 733,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n-public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    return new StringBuffer(json.getAsString());\n+public Character deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    return json.getAsCharacter();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "84c71409da812c1ccc62196ac2ff71f761bbf31b": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Removed Gson type adapters for boolean, integer, float, double, String, BigDecimal and BigInteger.\nSwitched Gson.fromJson() methods to use miniGson directly instead of using a DOM.\n",
      "commitDate": "8/18/11, 8:13 PM",
      "commitName": "84c71409da812c1ccc62196ac2ff71f761bbf31b",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Removed Gson type adapters for boolean, integer, float, double, String, BigDecimal and BigInteger.\nSwitched Gson.fromJson() methods to use miniGson directly instead of using a DOM.\n",
          "commitDate": "8/18/11, 8:13 PM",
          "commitName": "84c71409da812c1ccc62196ac2ff71f761bbf31b",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "7/1/11, 2:29 PM",
          "commitNameOld": "62675b7f46e805fe15a04a7b8b252da6dac00c15",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 48.24,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return new StringBuffer(json.getAsString());\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 873,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,3 @@\n-public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    try {\n-        return json.getAsBoolean();\n-    } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-    } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-    }\n+public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    return new StringBuffer(json.getAsString());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Boolean",
            "newValue": "StringBuffer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Removed Gson type adapters for boolean, integer, float, double, String, BigDecimal and BigInteger.\nSwitched Gson.fromJson() methods to use miniGson directly instead of using a DOM.\n",
          "commitDate": "8/18/11, 8:13 PM",
          "commitName": "84c71409da812c1ccc62196ac2ff71f761bbf31b",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "7/1/11, 2:29 PM",
          "commitNameOld": "62675b7f46e805fe15a04a7b8b252da6dac00c15",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 48.24,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return new StringBuffer(json.getAsString());\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 873,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,9 +1,3 @@\n-public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    try {\n-        return json.getAsBoolean();\n-    } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-    } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-    }\n+public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    return new StringBuffer(json.getAsString());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "454f58a7b144d2f16e3ea55b34074b8a66a9a2fe": {
      "type": "Yformatchange",
      "commitMessage": "Adding in instance creator to instantiate the concrete Collection or Map class if known, otherwise fallback to a default instance.\n\nAlso, added some caching as part of the default constructor lookups.\n",
      "commitDate": "3/29/11, 9:57 AM",
      "commitName": "454f58a7b144d2f16e3ea55b34074b8a66a9a2fe",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "3/21/11, 3:30 PM",
      "commitNameOld": "861e047a6222d581ecf1f617599629bbf8654d34",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 7.77,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    try {\n        return json.getAsBoolean();\n    } catch (UnsupportedOperationException e) {\n        throw new JsonSyntaxException(e);\n    } catch (IllegalStateException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
      "functionStartLine": 1001,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e26a6d5c187228d5f8152db6a8cbbd157a28b0a5": {
      "type": "Ybodychange",
      "commitMessage": "removed the wrapping (regarding exception handling) of some primitive deserializers (numbers and boolean).\nAdded a number of additional tests that cover the cases of attempts to deserialize JsonObjects or arrays as primitives that must fail.\n",
      "commitDate": "3/11/11, 2:14 PM",
      "commitName": "e26a6d5c187228d5f8152db6a8cbbd157a28b0a5",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "2/24/11, 2:47 PM",
      "commitNameOld": "52288d712730a50f13fc6c2bf07d339642d06846",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 14.98,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    try {\n        return json.getAsBoolean();\n    } catch (UnsupportedOperationException e) {\n        throw new JsonSyntaxException(e);\n    } catch (IllegalStateException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
      "functionStartLine": 1055,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,9 @@\n public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    return json.getAsBoolean();\n+    try {\n+        return json.getAsBoolean();\n+    } catch (UnsupportedOperationException e) {\n+        throw new JsonSyntaxException(e);\n+    } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0d8150fe52eba34a0472c47be71587885ba4a94c": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Major restructuring of Primitve type serialization and deserializtion.  From the end-user\u0027s point of view there should be no difference other than the user can now override the default serialization/deserialization their own custom type adapter (not sure if there is a real use-case out there for this).\n\nThis restructuring greatly cleans up the code and reduces some complexity; however, there is more that can be done to clean this up (i.e. get rid of \"InstanceCreators\" for primitive Type Adapters).\n",
      "commitDate": "11/14/08, 6:26 PM",
      "commitName": "0d8150fe52eba34a0472c47be71587885ba4a94c",
      "commitAuthor": "Joel Leitch",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Major restructuring of Primitve type serialization and deserializtion.  From the end-user\u0027s point of view there should be no difference other than the user can now override the default serialization/deserialization their own custom type adapter (not sure if there is a real use-case out there for this).\n\nThis restructuring greatly cleans up the code and reduces some complexity; however, there is more that can be done to clean this up (i.e. get rid of \"InstanceCreators\" for primitive Type Adapters).\n",
          "commitDate": "11/14/08, 6:26 PM",
          "commitName": "0d8150fe52eba34a0472c47be71587885ba4a94c",
          "commitAuthor": "Joel Leitch",
          "commitDateOld": "11/13/08, 6:17 PM",
          "commitNameOld": "bc2c25f235808c7e90d9bde6b2795997405af0cf",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return json.getAsBoolean();\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 688,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n-public BigInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    return json.getAsBigInteger();\n+public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    return json.getAsBoolean();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "BigInteger",
            "newValue": "Boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Major restructuring of Primitve type serialization and deserializtion.  From the end-user\u0027s point of view there should be no difference other than the user can now override the default serialization/deserialization their own custom type adapter (not sure if there is a real use-case out there for this).\n\nThis restructuring greatly cleans up the code and reduces some complexity; however, there is more that can be done to clean this up (i.e. get rid of \"InstanceCreators\" for primitive Type Adapters).\n",
          "commitDate": "11/14/08, 6:26 PM",
          "commitName": "0d8150fe52eba34a0472c47be71587885ba4a94c",
          "commitAuthor": "Joel Leitch",
          "commitDateOld": "11/13/08, 6:17 PM",
          "commitNameOld": "bc2c25f235808c7e90d9bde6b2795997405af0cf",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return json.getAsBoolean();\n}",
          "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
          "functionStartLine": 688,
          "functionName": "deserialize",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,3 +1,3 @@\n-public BigInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n-    return json.getAsBigInteger();\n+public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    return json.getAsBoolean();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": {
      "type": "Yintroduced",
      "commitMessage": "moved gson as a project under trunk\n",
      "commitDate": "8/31/08, 8:13 PM",
      "commitName": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,3 @@\n+public BigInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n+    return json.getAsBigInteger();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public BigInteger deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n    return json.getAsBigInteger();\n}",
      "path": "gson/src/main/java/com/google/gson/DefaultTypeAdapters.java",
      "functionStartLine": 346,
      "functionName": "deserialize",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}