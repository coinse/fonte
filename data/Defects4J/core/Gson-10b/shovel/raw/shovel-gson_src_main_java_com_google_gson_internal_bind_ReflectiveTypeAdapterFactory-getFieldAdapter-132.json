{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReflectiveTypeAdapterFactory.java",
  "functionName": "getFieldAdapter",
  "functionId": "getFieldAdapter___gson-Gson__field-Field__fieldType-TypeToken__?__",
  "sourceFilePath": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 132,
  "functionEndLine": 139,
  "numCommitsSeen": 50,
  "timeTaken": 1264,
  "changeHistory": [
    "7a1c94f9863bfc6915eaa56236dcef46876d4674",
    "117d8ea68ff953a271c492736ba3eed3bb209da2",
    "125e6d9d3d42516de6b6797be8ef0c59e6360512",
    "edf66083e6245abfab4a85dce03c0bf79a66f474",
    "7f6a0960300792f47ee6c153595e0681ea07cd91",
    "e280ffd7e2fe14140c9478a546c6f074cf089a13",
    "bf549f0589105a42f159c78a621fc28087561d16"
  ],
  "changeHistoryShort": {
    "7a1c94f9863bfc6915eaa56236dcef46876d4674": "Ymodifierchange",
    "117d8ea68ff953a271c492736ba3eed3bb209da2": "Ybodychange",
    "125e6d9d3d42516de6b6797be8ef0c59e6360512": "Ybodychange",
    "edf66083e6245abfab4a85dce03c0bf79a66f474": "Ybodychange",
    "7f6a0960300792f47ee6c153595e0681ea07cd91": "Ybodychange",
    "e280ffd7e2fe14140c9478a546c6f074cf089a13": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf549f0589105a42f159c78a621fc28087561d16": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a1c94f9863bfc6915eaa56236dcef46876d4674": {
      "type": "Ymodifierchange",
      "commitMessage": "Remove synthetic accessors from being generated.\n",
      "commitDate": "12/26/15, 10:39 PM",
      "commitName": "7a1c94f9863bfc6915eaa56236dcef46876d4674",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "11/16/15, 9:16 AM",
      "commitNameOld": "c935f89b23c69e7c9d6d98df87f81635b3eb3700",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 40.56,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n    JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n    if (annotation !\u003d null) {\n        TypeAdapter\u003c?\u003e adapter \u003d getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n        if (adapter !\u003d null)\n            return adapter;\n    }\n    return gson.getAdapter(fieldType);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "functionStartLine": 129,
      "functionName": "getFieldAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n-private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n+TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n     JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n     if (annotation !\u003d null) {\n         TypeAdapter\u003c?\u003e adapter \u003d getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n         if (adapter !\u003d null)\n             return adapter;\n     }\n     return gson.getAdapter(fieldType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "117d8ea68ff953a271c492736ba3eed3bb209da2": {
      "type": "Ybodychange",
      "commitMessage": "Add TypeAdapterFactory support to @JsonAdapter.\n",
      "commitDate": "8/4/14, 9:58 AM",
      "commitName": "117d8ea68ff953a271c492736ba3eed3bb209da2",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "8/2/14, 11:22 AM",
      "commitNameOld": "125e6d9d3d42516de6b6797be8ef0c59e6360512",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 1.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n    JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n    if (annotation !\u003d null) {\n        TypeAdapter\u003c?\u003e adapter \u003d getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n        if (adapter !\u003d null)\n            return adapter;\n    }\n    return gson.getAdapter(fieldType);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "functionStartLine": 103,
      "functionName": "getFieldAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,4 +1,9 @@\n private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n     JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n-    return (annotation !\u003d null) ? constructorConstructor.get(TypeToken.get(annotation.value())).construct() : gson.getAdapter(fieldType);\n+    if (annotation !\u003d null) {\n+        TypeAdapter\u003c?\u003e adapter \u003d getTypeAdapter(constructorConstructor, gson, fieldType, annotation);\n+        if (adapter !\u003d null)\n+            return adapter;\n+    }\n+    return gson.getAdapter(fieldType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "125e6d9d3d42516de6b6797be8ef0c59e6360512": {
      "type": "Ybodychange",
      "commitMessage": "Change field annotations to take precedence over registered type adapters.\n",
      "commitDate": "8/2/14, 11:22 AM",
      "commitName": "125e6d9d3d42516de6b6797be8ef0c59e6360512",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "3/26/14, 10:59 AM",
      "commitNameOld": "edf66083e6245abfab4a85dce03c0bf79a66f474",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 129.02,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n    JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n    return (annotation !\u003d null) ? constructorConstructor.get(TypeToken.get(annotation.value())).construct() : gson.getAdapter(fieldType);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "functionStartLine": 101,
      "functionName": "getFieldAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,4 @@\n private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n-    TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n-    boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n-    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n-        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n-        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n-    }\n-    return adapter;\n+    JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n+    return (annotation !\u003d null) ? constructorConstructor.get(TypeToken.get(annotation.value())).construct() : gson.getAdapter(fieldType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "edf66083e6245abfab4a85dce03c0bf79a66f474": {
      "type": "Ybodychange",
      "commitMessage": "renamed @Adapt to @JsonAdapter\n",
      "commitDate": "3/26/14, 10:59 AM",
      "commitName": "edf66083e6245abfab4a85dce03c0bf79a66f474",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "3/9/14, 4:08 PM",
      "commitNameOld": "7f6a0960300792f47ee6c153595e0681ea07cd91",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 16.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n    TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n    boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n    }\n    return adapter;\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "functionStartLine": 104,
      "functionName": "getFieldAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n     TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n     boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n-    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(Adapt.class)) {\n-        Adapt annotation \u003d field.getAnnotation(Adapt.class);\n-        return AdaptAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n+    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n+        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n+        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n     }\n     return adapter;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f6a0960300792f47ee6c153595e0681ea07cd91": {
      "type": "Ybodychange",
      "commitMessage": "renamed JsonAdapter annotation to Adapt annotation.\n",
      "commitDate": "3/9/14, 4:08 PM",
      "commitName": "7f6a0960300792f47ee6c153595e0681ea07cd91",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "3/9/14, 12:36 AM",
      "commitNameOld": "e280ffd7e2fe14140c9478a546c6f074cf089a13",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n    TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n    boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(Adapt.class)) {\n        Adapt annotation \u003d field.getAnnotation(Adapt.class);\n        return AdaptAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n    }\n    return adapter;\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "functionStartLine": 104,
      "functionName": "getFieldAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,9 @@\n private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n     TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n     boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n-    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n-        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n-        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n+    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(Adapt.class)) {\n+        Adapt annotation \u003d field.getAnnotation(Adapt.class);\n+        return AdaptAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n     }\n     return adapter;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e280ffd7e2fe14140c9478a546c6f074cf089a13": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fixed broken test to ensure that a field JsonAdapter annotation supersedes the class JsonAdapter annotation.\nAdded a map in Gson to keep track of TypeAdapters which are generated by Gson.\n",
      "commitDate": "3/9/14, 12:36 AM",
      "commitName": "e280ffd7e2fe14140c9478a546c6f074cf089a13",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fixed broken test to ensure that a field JsonAdapter annotation supersedes the class JsonAdapter annotation.\nAdded a map in Gson to keep track of TypeAdapters which are generated by Gson.\n",
          "commitDate": "3/9/14, 12:36 AM",
          "commitName": "e280ffd7e2fe14140c9478a546c6f074cf089a13",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "3/8/14, 11:28 PM",
          "commitNameOld": "bf549f0589105a42f159c78a621fc28087561d16",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n    TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n    boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n    }\n    return adapter;\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
          "functionStartLine": 104,
          "functionName": "getFieldAdapter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,9 @@\n-private TypeAdapter\u003c?\u003e getFieldAdapter(Gson context, Field field, TypeToken\u003c?\u003e fieldType) {\n-    TypeAdapter\u003c?\u003e adapter \u003d context.getAdapter(fieldType);\n-    if (adapter instanceof Adapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n+private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n+    TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n+    boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n+    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n         JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n-        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(constructorConstructor, annotation);\n+        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n     }\n     return adapter;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-Gson, field-Field, fieldType-TypeToken\u003c?\u003e]",
            "newValue": "[gson-Gson, field-Field, fieldType-TypeToken\u003c?\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed broken test to ensure that a field JsonAdapter annotation supersedes the class JsonAdapter annotation.\nAdded a map in Gson to keep track of TypeAdapters which are generated by Gson.\n",
          "commitDate": "3/9/14, 12:36 AM",
          "commitName": "e280ffd7e2fe14140c9478a546c6f074cf089a13",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "3/8/14, 11:28 PM",
          "commitNameOld": "bf549f0589105a42f159c78a621fc28087561d16",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n    TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n    boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n    }\n    return adapter;\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
          "functionStartLine": 104,
          "functionName": "getFieldAdapter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,9 @@\n-private TypeAdapter\u003c?\u003e getFieldAdapter(Gson context, Field field, TypeToken\u003c?\u003e fieldType) {\n-    TypeAdapter\u003c?\u003e adapter \u003d context.getAdapter(fieldType);\n-    if (adapter instanceof Adapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n+private TypeAdapter\u003c?\u003e getFieldAdapter(Gson gson, Field field, TypeToken\u003c?\u003e fieldType) {\n+    TypeAdapter\u003c?\u003e adapter \u003d gson.getAdapter(fieldType);\n+    boolean generatedAdapter \u003d Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n+    if (generatedAdapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n         JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n-        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(constructorConstructor, annotation);\n+        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n     }\n     return adapter;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bf549f0589105a42f159c78a621fc28087561d16": {
      "type": "Yintroduced",
      "commitMessage": "Added support for JsonAdapter annotation on fields\n",
      "commitDate": "3/8/14, 11:28 PM",
      "commitName": "bf549f0589105a42f159c78a621fc28087561d16",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,8 @@\n+private TypeAdapter\u003c?\u003e getFieldAdapter(Gson context, Field field, TypeToken\u003c?\u003e fieldType) {\n+    TypeAdapter\u003c?\u003e adapter \u003d context.getAdapter(fieldType);\n+    if (adapter instanceof Adapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n+        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n+        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(constructorConstructor, annotation);\n+    }\n+    return adapter;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private TypeAdapter\u003c?\u003e getFieldAdapter(Gson context, Field field, TypeToken\u003c?\u003e fieldType) {\n    TypeAdapter\u003c?\u003e adapter \u003d context.getAdapter(fieldType);\n    if (adapter instanceof Adapter \u0026\u0026 field.isAnnotationPresent(JsonAdapter.class)) {\n        JsonAdapter annotation \u003d field.getAnnotation(JsonAdapter.class);\n        return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(constructorConstructor, annotation);\n    }\n    return adapter;\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
      "functionStartLine": 102,
      "functionName": "getFieldAdapter",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}