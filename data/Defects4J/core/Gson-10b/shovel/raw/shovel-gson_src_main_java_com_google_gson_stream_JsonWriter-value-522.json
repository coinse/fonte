{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonWriter.java",
  "functionName": "value",
  "functionId": "value___value-Number",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
  "functionAnnotation": "",
  "functionDoc": "Encodes {@code value}.\n\n@param value a finite value. May not be {@link Double#isNaN() NaNs} or\n    {@link Double#isInfinite() infinities}.\n@return this writer.\n",
  "functionStartLine": 522,
  "functionEndLine": 536,
  "numCommitsSeen": 17,
  "timeTaken": 678,
  "changeHistory": [
    "c8627c8ab831dec86eeb52fc02600b22c81ba858",
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
    "486820f51521d0348160a18b9ba0326f78dcf518",
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e"
  ],
  "changeHistoryShort": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": "Ybodychange",
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": "Ybodychange",
    "486820f51521d0348160a18b9ba0326f78dcf518": "Ybodychange",
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": {
      "type": "Ybodychange",
      "commitMessage": "Update reader and writer for RFC 7159.\n",
      "commitDate": "1/18/16, 12:07 PM",
      "commitName": "c8627c8ab831dec86eeb52fc02600b22c81ba858",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "9/26/15, 6:10 PM",
      "commitNameOld": "1e9004403c619729ad1c49f070ab61427bd462c5",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 113.79,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonWriter value(Number value) throws IOException {\n    if (value \u003d\u003d null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string \u003d value.toString();\n    if (!lenient \u0026\u0026 (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue();\n    out.append(string);\n    return this;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 507,
      "functionName": "value",
      "functionAnnotation": "",
      "functionDoc": "Encodes {@code value}.\n\n@param value a finite value. May not be {@link Double#isNaN() NaNs} or\n    {@link Double#isInfinite() infinities}.\n@return this writer.\n",
      "diff": "@@ -1,13 +1,13 @@\n public JsonWriter value(Number value) throws IOException {\n     if (value \u003d\u003d null) {\n         return nullValue();\n     }\n     writeDeferredName();\n     String string \u003d value.toString();\n     if (!lenient \u0026\u0026 (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n-    beforeValue(false);\n+    beforeValue();\n     out.append(string);\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": {
      "type": "Ybodychange",
      "commitMessage": "Adopt JsonElementWriter in GSON.\nAdd setSerializeNulls() to JsonWriter, so nulls can be skipped from serialization. This does not yet impact JsonElementWriter.\n\nOne change in behavior: if the only value is skipped, we now emit \"null\" rather than \"\".\n",
      "commitDate": "9/30/11, 12:08 AM",
      "commitName": "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/29/11, 11:26 PM",
      "commitNameOld": "d26c8189182fa96691cc8e0d0f312469ee0627bb",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonWriter value(Number value) throws IOException {\n    if (value \u003d\u003d null) {\n        return nullValue();\n    }\n    writeDeferredName();\n    String string \u003d value.toString();\n    if (!lenient \u0026\u0026 (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 435,
      "functionName": "value",
      "functionAnnotation": "",
      "functionDoc": "Encodes {@code value}.\n\n@param value a finite value. May not be {@link Double#isNaN() NaNs} or\n    {@link Double#isInfinite() infinities}.\n@return this writer.\n",
      "diff": "@@ -1,12 +1,13 @@\n public JsonWriter value(Number value) throws IOException {\n     if (value \u003d\u003d null) {\n         return nullValue();\n     }\n+    writeDeferredName();\n     String string \u003d value.toString();\n     if (!lenient \u0026\u0026 (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     beforeValue(false);\n     out.append(string);\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "486820f51521d0348160a18b9ba0326f78dcf518": {
      "type": "Ybodychange",
      "commitMessage": "Fix some test problems.\n\nJsonWriter was using suboptimal escape characters for newlines etc: unicode escapes rather than \\x escapes.\n\nJsonObjectTest was banning empty and whitespace-only keys. These values are permitted as of r585.\n",
      "commitDate": "8/28/10, 1:18 AM",
      "commitName": "486820f51521d0348160a18b9ba0326f78dcf518",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/28/10, 12:29 AM",
      "commitNameOld": "ff7aa3f3314e9e9ac50f3b8b259126ad379aead6",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonWriter value(Number value) throws IOException {\n    if (value \u003d\u003d null) {\n        return nullValue();\n    }\n    String string \u003d value.toString();\n    if (!lenient \u0026\u0026 (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 359,
      "functionName": "value",
      "functionAnnotation": "",
      "functionDoc": "Encodes {@code value}.\n\n@param value a finite value. May not be {@link Double#isNaN() NaNs} or\n    {@link Double#isInfinite() infinities}.\n@return this writer.\n",
      "diff": "@@ -1,12 +1,12 @@\n public JsonWriter value(Number value) throws IOException {\n     if (value \u003d\u003d null) {\n         return nullValue();\n     }\n     String string \u003d value.toString();\n-    if (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")) {\n+    if (!lenient \u0026\u0026 (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) {\n         throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n     }\n     beforeValue(false);\n     out.append(string);\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e": {
      "type": "Yintroduced",
      "commitMessage": "Brand new classes for streaming JSON efficiently.\n\nNotable features:\n - Efficiency. The parser is faster than the current javacc parser. It\u0027s also faster than popular libraries for JSON streaming.\n - Toggle lenient/strict\n - Toggle pretty/compact\n - Friendly error messages on bad JSON\n - GSON-quality Javadoc\n - Non-execute prefix handling\n\nThis doesn\u0027t wire JsonReader up into Gson just yet. That\u0027s coming soon...\n",
      "commitDate": "8/26/10, 1:44 AM",
      "commitName": "765a9f1ecdfaf96f3587f488385111c9d6a4927e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,12 @@\n+public JsonWriter value(Number value) throws IOException {\n+    if (value \u003d\u003d null) {\n+        return nullValue();\n+    }\n+    String string \u003d value.toString();\n+    if (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")) {\n+        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n+    }\n+    beforeValue(false);\n+    out.append(string);\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JsonWriter value(Number value) throws IOException {\n    if (value \u003d\u003d null) {\n        return nullValue();\n    }\n    String string \u003d value.toString();\n    if (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\")) {\n        throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value);\n    }\n    beforeValue(false);\n    out.append(string);\n    return this;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 341,
      "functionName": "value",
      "functionAnnotation": "",
      "functionDoc": "Encodes {@code value}.\n\n@param value a finite value. May not be {@link Double#isNaN() NaNs} or\n    {@link Double#isInfinite() infinities}.\n@return this writer.\n"
    }
  }
}