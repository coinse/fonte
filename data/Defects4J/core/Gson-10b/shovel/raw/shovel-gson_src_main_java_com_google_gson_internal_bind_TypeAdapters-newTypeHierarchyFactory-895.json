{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeAdapters.java",
  "functionName": "newTypeHierarchyFactory",
  "functionId": "newTypeHierarchyFactory___clazz-Class__T1__(modifiers-final)__typeAdapter-TypeAdapter__T1__(modifiers-final)",
  "sourceFilePath": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
  "functionAnnotation": "",
  "functionDoc": "Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\nthat the deserialized type matches the type requested.\n",
  "functionStartLine": 895,
  "functionEndLine": 923,
  "numCommitsSeen": 129,
  "timeTaken": 2902,
  "changeHistory": [
    "e5b3f6368db33c846b094b0d695d3a1b826e3892",
    "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699",
    "d7fbac03844aa86dbb1c65a8ba50ac364c4b2050",
    "26ab404599643fac25442646b829a65a7f86bca1",
    "7e760143fdc8b689daeebdee33ad6ea7d0a62a56",
    "94d59b550ead8ad81259505def3759cf5926c3df",
    "c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a",
    "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22",
    "60e6ed912d52716f46a1ba71923ef203c4248857",
    "c5f1df10175c254b823fc019832bf1bf7b71e929"
  ],
  "changeHistoryShort": {
    "e5b3f6368db33c846b094b0d695d3a1b826e3892": "Ybodychange",
    "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "d7fbac03844aa86dbb1c65a8ba50ac364c4b2050": "Ymultichange(Yreturntypechange,Ybodychange)",
    "26ab404599643fac25442646b829a65a7f86bca1": "Ybodychange",
    "7e760143fdc8b689daeebdee33ad6ea7d0a62a56": "Ybodychange",
    "94d59b550ead8ad81259505def3759cf5926c3df": "Ybodychange",
    "c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a": "Ymultichange(Yparameterchange,Ybodychange)",
    "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "60e6ed912d52716f46a1ba71923ef203c4248857": "Yfilerename",
    "c5f1df10175c254b823fc019832bf1bf7b71e929": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e5b3f6368db33c846b094b0d695d3a1b826e3892": {
      "type": "Ybodychange",
      "commitMessage": "updated minimum JDK version to 1.6.\nAdded Overrides for methods implementing an interface.\n",
      "commitDate": "11/4/15, 6:52 PM",
      "commitName": "e5b3f6368db33c846b094b0d695d3a1b826e3892",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/22/15, 9:29 AM",
      "commitNameOld": "fe101c10bc3597d8e715a31d94d2cc0cc54b660f",
      "commitAuthorOld": "",
      "daysBetweenCommits": 13.43,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n            final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n\n                @Override\n                public void write(JsonWriter out, T1 value) throws IOException {\n                    typeAdapter.write(out, value);\n                }\n\n                @Override\n                public T1 read(JsonReader in) throws IOException {\n                    T1 result \u003d typeAdapter.read(in);\n                    if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n                        throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n                    }\n                    return result;\n                }\n            };\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
      "functionStartLine": 824,
      "functionName": "newTypeHierarchyFactory",
      "functionAnnotation": "",
      "functionDoc": "Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\nthat the deserialized type matches the type requested.\n",
      "diff": "@@ -1,33 +1,34 @@\n public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n     return new TypeAdapterFactory() {\n \n         @SuppressWarnings(\"unchecked\")\n+        @Override\n         public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n             final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n             if (!clazz.isAssignableFrom(requestedType)) {\n                 return null;\n             }\n             return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n \n                 @Override\n                 public void write(JsonWriter out, T1 value) throws IOException {\n                     typeAdapter.write(out, value);\n                 }\n \n                 @Override\n                 public T1 read(JsonReader in) throws IOException {\n                     T1 result \u003d typeAdapter.read(in);\n                     if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n                         throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n                     }\n                     return result;\n                 }\n             };\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Fix type hierarchy adapters to do a runtime check.\n\nOtherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.\n",
      "commitDate": "10/21/15, 8:42 AM",
      "commitName": "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699",
      "commitAuthor": "jwilson",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix type hierarchy adapters to do a runtime check.\n\nOtherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.\n",
          "commitDate": "10/21/15, 8:42 AM",
          "commitName": "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699",
          "commitAuthor": "jwilson",
          "commitDateOld": "8/14/15, 4:29 PM",
          "commitNameOld": "eb79ec73f01d31853e411843f64172ee1c5703d0",
          "commitAuthorOld": "Vladislav Bauer",
          "daysBetweenCommits": 67.68,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n            final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n\n                @Override\n                public void write(JsonWriter out, T1 value) throws IOException {\n                    typeAdapter.write(out, value);\n                }\n\n                @Override\n                public T1 read(JsonReader in) throws IOException {\n                    T1 result \u003d typeAdapter.read(in);\n                    if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n                        throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n                    }\n                    return result;\n                }\n            };\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 821,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\nthat the deserialized type matches the type requested.\n",
          "diff": "@@ -1,14 +1,33 @@\n-public static \u003cTT\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n+public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n     return new TypeAdapterFactory() {\n \n         @SuppressWarnings(\"unchecked\")\n-        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n-            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n+        public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n+            final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n+            if (!clazz.isAssignableFrom(requestedType)) {\n+                return null;\n+            }\n+            return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n+\n+                @Override\n+                public void write(JsonWriter out, T1 value) throws IOException {\n+                    typeAdapter.write(out, value);\n+                }\n+\n+                @Override\n+                public T1 read(JsonReader in) throws IOException {\n+                    T1 result \u003d typeAdapter.read(in);\n+                    if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n+                        throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n+                    }\n+                    return result;\n+                }\n+            };\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[clazz-Class\u003cTT\u003e(modifiers-final), typeAdapter-TypeAdapter\u003cTT\u003e(modifiers-final)]",
            "newValue": "[clazz-Class\u003cT1\u003e(modifiers-final), typeAdapter-TypeAdapter\u003cT1\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix type hierarchy adapters to do a runtime check.\n\nOtherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.\n",
          "commitDate": "10/21/15, 8:42 AM",
          "commitName": "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699",
          "commitAuthor": "jwilson",
          "commitDateOld": "8/14/15, 4:29 PM",
          "commitNameOld": "eb79ec73f01d31853e411843f64172ee1c5703d0",
          "commitAuthorOld": "Vladislav Bauer",
          "daysBetweenCommits": 67.68,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n            final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n\n                @Override\n                public void write(JsonWriter out, T1 value) throws IOException {\n                    typeAdapter.write(out, value);\n                }\n\n                @Override\n                public T1 read(JsonReader in) throws IOException {\n                    T1 result \u003d typeAdapter.read(in);\n                    if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n                        throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n                    }\n                    return result;\n                }\n            };\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 821,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\nthat the deserialized type matches the type requested.\n",
          "diff": "@@ -1,14 +1,33 @@\n-public static \u003cTT\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n+public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n     return new TypeAdapterFactory() {\n \n         @SuppressWarnings(\"unchecked\")\n-        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n-            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n+        public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n+            final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n+            if (!clazz.isAssignableFrom(requestedType)) {\n+                return null;\n+            }\n+            return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n+\n+                @Override\n+                public void write(JsonWriter out, T1 value) throws IOException {\n+                    typeAdapter.write(out, value);\n+                }\n+\n+                @Override\n+                public T1 read(JsonReader in) throws IOException {\n+                    T1 result \u003d typeAdapter.read(in);\n+                    if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n+                        throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n+                    }\n+                    return result;\n+                }\n+            };\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fix type hierarchy adapters to do a runtime check.\n\nOtherwise if we have a type hierarchy adapter for Vehicle, and we\nattempt to decode a JSON string as a Car, we get the right exception\nif the JSON string is actually decoded as a Truck.\n",
          "commitDate": "10/21/15, 8:42 AM",
          "commitName": "7d1973e6c5e270c0c94eaf6a3e81f4f2c5b2a699",
          "commitAuthor": "jwilson",
          "commitDateOld": "8/14/15, 4:29 PM",
          "commitNameOld": "eb79ec73f01d31853e411843f64172ee1c5703d0",
          "commitAuthorOld": "Vladislav Bauer",
          "daysBetweenCommits": 67.68,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n            final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n            if (!clazz.isAssignableFrom(requestedType)) {\n                return null;\n            }\n            return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n\n                @Override\n                public void write(JsonWriter out, T1 value) throws IOException {\n                    typeAdapter.write(out, value);\n                }\n\n                @Override\n                public T1 read(JsonReader in) throws IOException {\n                    T1 result \u003d typeAdapter.read(in);\n                    if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n                        throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n                    }\n                    return result;\n                }\n            };\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 821,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\nthat the deserialized type matches the type requested.\n",
          "diff": "@@ -1,14 +1,33 @@\n-public static \u003cTT\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n+public static \u003cT1\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cT1\u003e clazz, final TypeAdapter\u003cT1\u003e typeAdapter) {\n     return new TypeAdapterFactory() {\n \n         @SuppressWarnings(\"unchecked\")\n-        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n-            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n+        public \u003cT2\u003e TypeAdapter\u003cT2\u003e create(Gson gson, TypeToken\u003cT2\u003e typeToken) {\n+            final Class\u003c? super T2\u003e requestedType \u003d typeToken.getRawType();\n+            if (!clazz.isAssignableFrom(requestedType)) {\n+                return null;\n+            }\n+            return (TypeAdapter\u003cT2\u003e) new TypeAdapter\u003cT1\u003e() {\n+\n+                @Override\n+                public void write(JsonWriter out, T1 value) throws IOException {\n+                    typeAdapter.write(out, value);\n+                }\n+\n+                @Override\n+                public T1 read(JsonReader in) throws IOException {\n+                    T1 result \u003d typeAdapter.read(in);\n+                    if (result !\u003d null \u0026\u0026 !requestedType.isInstance(result)) {\n+                        throw new JsonSyntaxException(\"Expected a \" + requestedType.getName() + \" but was \" + result.getClass().getName());\n+                    }\n+                    return result;\n+                }\n+            };\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Returns a factory for all subtypes of {@code typeAdapter}. We do a runtime check to confirm\nthat the deserialized type matches the type requested.\n"
          }
        }
      ]
    },
    "d7fbac03844aa86dbb1c65a8ba50ac364c4b2050": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Rename TypeAdapter.Factory to TypeAdapterFactory.\n",
      "commitDate": "12/23/11, 10:27 AM",
      "commitName": "d7fbac03844aa86dbb1c65a8ba50ac364c4b2050",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename TypeAdapter.Factory to TypeAdapterFactory.\n",
          "commitDate": "12/23/11, 10:27 AM",
          "commitName": "d7fbac03844aa86dbb1c65a8ba50ac364c4b2050",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "12/23/11, 7:52 AM",
          "commitNameOld": "82f18a257faafa4501d91003e72a33fdafe85bd0",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cTT\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 773,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,14 @@\n-public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n-    return new TypeAdapter.Factory() {\n+public static \u003cTT\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n+    return new TypeAdapterFactory() {\n \n         @SuppressWarnings(\"unchecked\")\n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n             return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "TypeAdapter.Factory",
            "newValue": "TypeAdapterFactory"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rename TypeAdapter.Factory to TypeAdapterFactory.\n",
          "commitDate": "12/23/11, 10:27 AM",
          "commitName": "d7fbac03844aa86dbb1c65a8ba50ac364c4b2050",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "12/23/11, 7:52 AM",
          "commitNameOld": "82f18a257faafa4501d91003e72a33fdafe85bd0",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.11,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cTT\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n    return new TypeAdapterFactory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 773,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,14 +1,14 @@\n-public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n-    return new TypeAdapter.Factory() {\n+public static \u003cTT\u003e TypeAdapterFactory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n+    return new TypeAdapterFactory() {\n \n         @SuppressWarnings(\"unchecked\")\n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n             return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "26ab404599643fac25442646b829a65a7f86bca1": {
      "type": "Ybodychange",
      "commitMessage": "Cleanup names for TypeAdapters.\n",
      "commitDate": "12/2/11, 2:57 PM",
      "commitName": "26ab404599643fac25442646b829a65a7f86bca1",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "11/20/11, 1:02 PM",
      "commitNameOld": "f777a192ee13fd59048aa7ba640cc8023051c89d",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 12.08,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
      "functionStartLine": 731,
      "functionName": "newTypeHierarchyFactory",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n         @SuppressWarnings(\"unchecked\")\n-        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson context, TypeToken\u003cT\u003e typeToken) {\n+        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e typeToken) {\n             return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7e760143fdc8b689daeebdee33ad6ea7d0a62a56": {
      "type": "Ybodychange",
      "commitMessage": "Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable \u0027Gson\u0027 objects. \n\nThe most notable impact of this change is that it adds several new public APIs:\n - The TypeAdapter abstract class\n - The TypeAdapter.Factory interface\n - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)\n - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) \n\nStill outstanding:\n - Write beautiful prose to document the new APIs above\n - Change GsonBuilder\u0027s precedence so that both old and new-style type adapters are registered in one lot\n",
      "commitDate": "11/20/11, 7:23 AM",
      "commitName": "7e760143fdc8b689daeebdee33ad6ea7d0a62a56",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "10/23/11, 2:41 PM",
      "commitNameOld": "0340e01f98274f2ec573fcd1475fdc3d3fbca4ef",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 27.74,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson context, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
      "functionStartLine": 740,
      "functionName": "newTypeHierarchyFactory",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,14 @@\n public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n         @SuppressWarnings(\"unchecked\")\n-        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n+        public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson context, TypeToken\u003cT\u003e typeToken) {\n             return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n \n         @Override\n         public String toString() {\n             return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "94d59b550ead8ad81259505def3759cf5926c3df": {
      "type": "Ybodychange",
      "commitMessage": "Give a nice toString on type adapter factories to make debugging easier.\n",
      "commitDate": "10/22/11, 12:26 PM",
      "commitName": "94d59b550ead8ad81259505def3759cf5926c3df",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "10/20/11, 2:32 PM",
      "commitNameOld": "31964507c1caabc9a70e3270fa56aaee29eff6b2",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 1.91,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n\n        @Override\n        public String toString() {\n            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
      "functionStartLine": 735,
      "functionName": "newTypeHierarchyFactory",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,9 +1,14 @@\n public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n         @SuppressWarnings(\"unchecked\")\n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n             return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n+\n+        @Override\n+        public String toString() {\n+            return \"Factory[typeHierarchy\u003d\" + clazz.getName() + \",adapter\u003d\" + typeAdapter + \"]\";\n+        }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Converted EnumTypeAdapter to new style.\nGot rid of default Hierarchy Serializer/Deserializers from DefaultTypeAdapters.\nGot rid of methods for gettting default serializers/deserializers/instance creators. Instead we reuse the static final instances.\nFixed warnings in TypeAdapters where a parameterized type T was hiding the parameterized T in methods.\nRemoved support to unwrap single element array of enums into enum values. Also removed the test that verifies this behavior.\n",
      "commitDate": "9/15/11, 10:40 PM",
      "commitName": "c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Converted EnumTypeAdapter to new style.\nGot rid of default Hierarchy Serializer/Deserializers from DefaultTypeAdapters.\nGot rid of methods for gettting default serializers/deserializers/instance creators. Instead we reuse the static final instances.\nFixed warnings in TypeAdapters where a parameterized type T was hiding the parameterized T in methods.\nRemoved support to unwrap single element array of enums into enum values. Also removed the test that verifies this behavior.\n",
          "commitDate": "9/15/11, 10:40 PM",
          "commitName": "c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/15/11, 10:02 PM",
          "commitNameOld": "915c5d4d6f46ca65f60430b7a9b403be87453243",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 463,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,9 @@\n-public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n+public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n+        @SuppressWarnings(\"unchecked\")\n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n             return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[clazz-Class\u003cT\u003e(modifiers-final), typeAdapter-TypeAdapter\u003cT\u003e(modifiers-final)]",
            "newValue": "[clazz-Class\u003cTT\u003e(modifiers-final), typeAdapter-TypeAdapter\u003cTT\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Converted EnumTypeAdapter to new style.\nGot rid of default Hierarchy Serializer/Deserializers from DefaultTypeAdapters.\nGot rid of methods for gettting default serializers/deserializers/instance creators. Instead we reuse the static final instances.\nFixed warnings in TypeAdapters where a parameterized type T was hiding the parameterized T in methods.\nRemoved support to unwrap single element array of enums into enum values. Also removed the test that verifies this behavior.\n",
          "commitDate": "9/15/11, 10:40 PM",
          "commitName": "c71e61cf4830ee950b8fbc601ccadfe4d7ab6d1a",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/15/11, 10:02 PM",
          "commitNameOld": "915c5d4d6f46ca65f60430b7a9b403be87453243",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        @SuppressWarnings(\"unchecked\")\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 463,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,9 @@\n-public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n+public static \u003cTT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cTT\u003e clazz, final TypeAdapter\u003cTT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n+        @SuppressWarnings(\"unchecked\")\n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n             return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "Converted InetAddress type adapter to new style.\n",
      "commitDate": "9/8/11, 9:02 PM",
      "commitName": "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Converted InetAddress type adapter to new style.\n",
          "commitDate": "9/8/11, 9:02 PM",
          "commitName": "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/8/11, 8:40 PM",
          "commitNameOld": "4f6a36d68fbc38f9fb4a84a43875e64676a73139",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 273,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n-public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(TypeToken\u003cT\u003e type, TypeAdapter\u003cT\u003e typeAdapter) {\n+public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n-            throw new UnsupportedOperationException();\n+            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[type-TypeToken\u003cT\u003e, typeAdapter-TypeAdapter\u003cT\u003e]",
            "newValue": "[clazz-Class\u003cT\u003e(modifiers-final), typeAdapter-TypeAdapter\u003cT\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Converted InetAddress type adapter to new style.\n",
          "commitDate": "9/8/11, 9:02 PM",
          "commitName": "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/8/11, 8:40 PM",
          "commitNameOld": "4f6a36d68fbc38f9fb4a84a43875e64676a73139",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 273,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n-public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(TypeToken\u003cT\u003e type, TypeAdapter\u003cT\u003e typeAdapter) {\n+public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n-            throw new UnsupportedOperationException();\n+            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "Converted InetAddress type adapter to new style.\n",
          "commitDate": "9/8/11, 9:02 PM",
          "commitName": "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/8/11, 8:40 PM",
          "commitNameOld": "4f6a36d68fbc38f9fb4a84a43875e64676a73139",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
          "functionStartLine": 273,
          "functionName": "newTypeHierarchyFactory",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n-public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(TypeToken\u003cT\u003e type, TypeAdapter\u003cT\u003e typeAdapter) {\n+public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(final Class\u003cT\u003e clazz, final TypeAdapter\u003cT\u003e typeAdapter) {\n     return new TypeAdapter.Factory() {\n \n         public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n-            throw new UnsupportedOperationException();\n+            return clazz.isAssignableFrom(typeToken.getRawType()) ? (TypeAdapter\u003cT\u003e) typeAdapter : null;\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[type-TypeToken\u003cT\u003e, typeAdapter-TypeAdapter\u003cT\u003e]",
            "newValue": "[clazz-Class\u003cT\u003e(modifiers-final), typeAdapter-TypeAdapter\u003cT\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "60e6ed912d52716f46a1ba71923ef203c4248857": {
      "type": "Yfilerename",
      "commitMessage": "Promote MiniGson to gson.internal.bind\n",
      "commitDate": "8/2/11, 5:25 PM",
      "commitName": "60e6ed912d52716f46a1ba71923ef203c4248857",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/2/11, 5:17 PM",
      "commitNameOld": "759eb8ede50f61fd525f5d703dd9fd45ddae1dcd",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(TypeToken\u003cT\u003e type, TypeAdapter\u003cT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            throw new UnsupportedOperationException();\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
      "functionStartLine": 120,
      "functionName": "newTypeHierarchyFactory",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "extras/src/main/java/com/google/gson/mini/TypeAdapters.java",
        "newPath": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"
      }
    },
    "c5f1df10175c254b823fc019832bf1bf7b71e929": {
      "type": "Yintroduced",
      "commitMessage": "MiniGSON prototype!\n",
      "commitDate": "7/11/11, 9:46 AM",
      "commitName": "c5f1df10175c254b823fc019832bf1bf7b71e929",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,8 @@\n+public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(TypeToken\u003cT\u003e type, TypeAdapter\u003cT\u003e typeAdapter) {\n+    return new TypeAdapter.Factory() {\n+\n+        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n+            throw new UnsupportedOperationException();\n+        }\n+    };\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static \u003cT\u003e TypeAdapter.Factory newTypeHierarchyFactory(TypeToken\u003cT\u003e type, TypeAdapter\u003cT\u003e typeAdapter) {\n    return new TypeAdapter.Factory() {\n\n        public \u003cT\u003e TypeAdapter\u003cT\u003e create(MiniGson context, TypeToken\u003cT\u003e typeToken) {\n            throw new UnsupportedOperationException();\n        }\n    };\n}",
      "path": "extras/src/main/java/com/google/gson/mini/TypeAdapters.java",
      "functionStartLine": 120,
      "functionName": "newTypeHierarchyFactory",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}