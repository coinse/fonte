{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ConstructorConstructor.java",
  "functionName": "newUnsafeAllocator",
  "functionId": "newUnsafeAllocator___type-Type(modifiers-final)__rawType-Class__? super T__(modifiers-final)",
  "sourceFilePath": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 216,
  "functionEndLine": 231,
  "numCommitsSeen": 18,
  "timeTaken": 1421,
  "changeHistory": [
    "fef43b2aaa4fd7cb8f0dff395980c69f614635af",
    "2780a2a9bf5b0bf7eb6b14fc6ec27916c1c867fc",
    "4a6c084ef73e5e8a3fca12f9bb829a218fad7a84",
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165"
  ],
  "changeHistoryShort": {
    "fef43b2aaa4fd7cb8f0dff395980c69f614635af": "Ybodychange",
    "2780a2a9bf5b0bf7eb6b14fc6ec27916c1c867fc": "Ybodychange",
    "4a6c084ef73e5e8a3fca12f9bb829a218fad7a84": "Ybodychange",
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fef43b2aaa4fd7cb8f0dff395980c69f614635af": {
      "type": "Ybodychange",
      "commitMessage": "Added support to serialize/deserialize ConcurrentMap and ConcurrentNavigableMap.\n",
      "commitDate": "11/4/15, 9:25 PM",
      "commitName": "fef43b2aaa4fd7cb8f0dff395980c69f614635af",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "9/27/15, 3:31 AM",
      "commitNameOld": "2ecce944948e63f703e10cd34f4e2f410a7f3921",
      "commitAuthorOld": "dushyant",
      "daysBetweenCommits": 38.79,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n    return new ObjectConstructor\u003cT\u003e() {\n\n        private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public T construct() {\n            try {\n                Object newInstance \u003d unsafeAllocator.newInstance(rawType);\n                return (T) newInstance;\n            } catch (Exception e) {\n                throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n            }\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
      "functionStartLine": 216,
      "functionName": "newUnsafeAllocator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,17 @@\n private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n     return new ObjectConstructor\u003cT\u003e() {\n \n         private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n \n         @SuppressWarnings(\"unchecked\")\n+        @Override\n         public T construct() {\n             try {\n                 Object newInstance \u003d unsafeAllocator.newInstance(rawType);\n                 return (T) newInstance;\n             } catch (Exception e) {\n                 throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n             }\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2780a2a9bf5b0bf7eb6b14fc6ec27916c1c867fc": {
      "type": "Ybodychange",
      "commitMessage": "Fixed eclipse warnings.\n",
      "commitDate": "9/15/11, 11:03 PM",
      "commitName": "2780a2a9bf5b0bf7eb6b14fc6ec27916c1c867fc",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "9/15/11, 8:27 PM",
      "commitNameOld": "4a6c084ef73e5e8a3fca12f9bb829a218fad7a84",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n    return new ObjectConstructor\u003cT\u003e() {\n\n        private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n\n        @SuppressWarnings(\"unchecked\")\n        public T construct() {\n            try {\n                Object newInstance \u003d unsafeAllocator.newInstance(rawType);\n                return (T) newInstance;\n            } catch (Exception e) {\n                throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n            }\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
      "functionStartLine": 155,
      "functionName": "newUnsafeAllocator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,16 @@\n private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n     return new ObjectConstructor\u003cT\u003e() {\n \n         private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n \n+        @SuppressWarnings(\"unchecked\")\n         public T construct() {\n             try {\n-                return (T) unsafeAllocator.newInstance(rawType);\n+                Object newInstance \u003d unsafeAllocator.newInstance(rawType);\n+                return (T) newInstance;\n             } catch (Exception e) {\n                 throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n             }\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4a6c084ef73e5e8a3fca12f9bb829a218fad7a84": {
      "type": "Ybodychange",
      "commitMessage": "removed JDK 1.5 incompatible use of @Overrides annotation on overridden interface methods.\n",
      "commitDate": "9/15/11, 8:27 PM",
      "commitName": "4a6c084ef73e5e8a3fca12f9bb829a218fad7a84",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "9/11/11, 12:04 AM",
      "commitNameOld": "25c6ae177b1ca56db7f3c29eb574bdd032a06165",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 4.85,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n    return new ObjectConstructor\u003cT\u003e() {\n\n        private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n\n        public T construct() {\n            try {\n                return (T) unsafeAllocator.newInstance(rawType);\n            } catch (Exception e) {\n                throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n            }\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
      "functionStartLine": 155,
      "functionName": "newUnsafeAllocator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,14 @@\n private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n     return new ObjectConstructor\u003cT\u003e() {\n \n         private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n \n-        @Override\n         public T construct() {\n             try {\n                 return (T) unsafeAllocator.newInstance(rawType);\n             } catch (Exception e) {\n                 throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n             }\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165": {
      "type": "Yintroduced",
      "commitMessage": "Down to 22 failing tests.\n\nConsolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don\u0027t need to ever do reflection to lookup a constructor at construction time.\n\nCleaned up some buggy type adapters, particularly around handling of null.\n\nRemoved dead code for object graph navigation.\n\nMoved some classes into \u0027internal\u0027 so they are visible to the \u0027bind\u0027 subpackage.\n\nTurned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.\n\nAdded an API to request the \u0027next\u0027 type adapter for a type. This allows type adapters to compose other type adapters. We\u0027re using this in two places:\n - where the user has excluded a type from serialization but not deserialization, we need to use the \"default\" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.\n - similarly when a DOM type serializer is registered but no deserializer, or vice versa.\nThis is the biggest change to the MiniGson core.\n\nFor backwards compatibility, return null for the empty string.\n\nSimplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.\n\nMore useful error messages when calling getAsBoolean on a JsonNull.\n\nRemove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don\u0027t interject ourselves between the users\u0027 various type adapters.\n",
      "commitDate": "9/11/11, 12:04 AM",
      "commitName": "25c6ae177b1ca56db7f3c29eb574bdd032a06165",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,15 @@\n+private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n+    return new ObjectConstructor\u003cT\u003e() {\n+\n+        private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n+\n+        @Override\n+        public T construct() {\n+            try {\n+                return (T) unsafeAllocator.newInstance(rawType);\n+            } catch (Exception e) {\n+                throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n+            }\n+        }\n+    };\n+}\n\\ No newline at end of file\n",
      "actualSource": "private \u003cT\u003e ObjectConstructor\u003cT\u003e newUnsafeAllocator(final Type type, final Class\u003c? super T\u003e rawType) {\n    return new ObjectConstructor\u003cT\u003e() {\n\n        private final UnsafeAllocator unsafeAllocator \u003d UnsafeAllocator.create();\n\n        @Override\n        public T construct() {\n            try {\n                return (T) unsafeAllocator.newInstance(rawType);\n            } catch (Exception e) {\n                throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);\n            }\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
      "functionStartLine": 155,
      "functionName": "newUnsafeAllocator",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}