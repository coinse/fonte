{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonWriter.java",
  "functionName": "string",
  "functionId": "string___value-String",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 564,
  "functionEndLine": 594,
  "numCommitsSeen": 17,
  "timeTaken": 734,
  "changeHistory": [
    "a991e54157f694d603c013f05e8870ba5e49c78f",
    "d3a4b48ad92ce5e5a45a7046e737984608c22cc6",
    "747e3c3051153779954e49b7dbc475daa678e1f4",
    "486820f51521d0348160a18b9ba0326f78dcf518",
    "ff7aa3f3314e9e9ac50f3b8b259126ad379aead6",
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e"
  ],
  "changeHistoryShort": {
    "a991e54157f694d603c013f05e8870ba5e49c78f": "Ybodychange",
    "d3a4b48ad92ce5e5a45a7046e737984608c22cc6": "Ybodychange",
    "747e3c3051153779954e49b7dbc475daa678e1f4": "Ybodychange",
    "486820f51521d0348160a18b9ba0326f78dcf518": "Ybodychange",
    "ff7aa3f3314e9e9ac50f3b8b259126ad379aead6": "Ybodychange",
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a991e54157f694d603c013f05e8870ba5e49c78f": {
      "type": "Ybodychange",
      "commitMessage": "Make fewer calls to out.write() when serializing strings. On one Android test, this improved serialization time of some documents by 83%.\n\n                                 TWEETS                              \n   run          vm htmlSafe   ms linear runtime                    % \nBefore app_process     true 68.7 \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d 100% \n After app_process     true 35.9 \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d                 52% \n\n\n                                  READER_LONG                         \n   run          vm htmlSafe    ms linear runtime                    % \nBefore app_process     true 439.0 \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d 100%\n After app_process     true  74.5 \u003d\u003d\u003d\u003d\u003d                           17% \n",
      "commitDate": "4/12/12, 6:24 AM",
      "commitName": "a991e54157f694d603c013f05e8870ba5e49c78f",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2/12/12, 12:42 PM",
      "commitNameOld": "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 59.7,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void string(String value) throws IOException {\n    String[] replacements \u003d htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;\n    out.write(\"\\\"\");\n    int last \u003d 0;\n    int length \u003d value.length();\n    for (int i \u003d 0; i \u003c length; i++) {\n        char c \u003d value.charAt(i);\n        String replacement;\n        if (c \u003c 128) {\n            replacement \u003d replacements[c];\n            if (replacement \u003d\u003d null) {\n                continue;\n            }\n        } else if (c \u003d\u003d \u0027\\u2028\u0027) {\n            replacement \u003d \"\\\\u2028\";\n        } else if (c \u003d\u003d \u0027\\u2029\u0027) {\n            replacement \u003d \"\\\\u2029\";\n        } else {\n            continue;\n        }\n        if (last \u003c i) {\n            out.write(value, last, i - last);\n        }\n        out.write(replacement);\n        last \u003d i + 1;\n    }\n    if (last \u003c length) {\n        out.write(value, last, length - last);\n    }\n    out.write(\"\\\"\");\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 516,
      "functionName": "string",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,31 @@\n private void string(String value) throws IOException {\n+    String[] replacements \u003d htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS;\n     out.write(\"\\\"\");\n-    for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n+    int last \u003d 0;\n+    int length \u003d value.length();\n+    for (int i \u003d 0; i \u003c length; i++) {\n         char c \u003d value.charAt(i);\n-        switch(c) {\n-            case \u0027\"\u0027:\n-            case \u0027\\\\\u0027:\n-                out.write(\u0027\\\\\u0027);\n-                out.write(c);\n-                break;\n-            case \u0027\\t\u0027:\n-                out.write(\"\\\\t\");\n-                break;\n-            case \u0027\\b\u0027:\n-                out.write(\"\\\\b\");\n-                break;\n-            case \u0027\\n\u0027:\n-                out.write(\"\\\\n\");\n-                break;\n-            case \u0027\\r\u0027:\n-                out.write(\"\\\\r\");\n-                break;\n-            case \u0027\\f\u0027:\n-                out.write(\"\\\\f\");\n-                break;\n-            case \u0027\u003c\u0027:\n-            case \u0027\u003e\u0027:\n-            case \u0027\u0026\u0027:\n-            case \u0027\u003d\u0027:\n-            case \u0027\\\u0027\u0027:\n-                if (htmlSafe) {\n-                    out.write(String.format(\"\\\\u%04x\", (int) c));\n-                } else {\n-                    out.write(c);\n-                }\n-                break;\n-            case \u0027\\u2028\u0027:\n-            case \u0027\\u2029\u0027:\n-                out.write(String.format(\"\\\\u%04x\", (int) c));\n-                break;\n-            default:\n-                if (c \u003c\u003d 0x1F) {\n-                    out.write(String.format(\"\\\\u%04x\", (int) c));\n-                } else {\n-                    out.write(c);\n-                }\n-                break;\n+        String replacement;\n+        if (c \u003c 128) {\n+            replacement \u003d replacements[c];\n+            if (replacement \u003d\u003d null) {\n+                continue;\n+            }\n+        } else if (c \u003d\u003d \u0027\\u2028\u0027) {\n+            replacement \u003d \"\\\\u2028\";\n+        } else if (c \u003d\u003d \u0027\\u2029\u0027) {\n+            replacement \u003d \"\\\\u2029\";\n+        } else {\n+            continue;\n         }\n+        if (last \u003c i) {\n+            out.write(value, last, i - last);\n+        }\n+        out.write(replacement);\n+        last \u003d i + 1;\n+    }\n+    if (last \u003c length) {\n+        out.write(value, last, length - last);\n     }\n     out.write(\"\\\"\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d3a4b48ad92ce5e5a45a7046e737984608c22cc6": {
      "type": "Ybodychange",
      "commitMessage": "Unconditionally escape unicode newline characters.\n\nFixes issue 341.\n",
      "commitDate": "7/12/11, 9:05 AM",
      "commitName": "d3a4b48ad92ce5e5a45a7046e737984608c22cc6",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "10/27/10, 4:53 PM",
      "commitNameOld": "2b993d83b6dc502f47022ee3390d11d8c74e3f62",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 257.68,
      "commitsBetweenForRepo": 243,
      "commitsBetweenForFile": 1,
      "actualSource": "private void string(String value) throws IOException {\n    out.write(\"\\\"\");\n    for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n        char c \u003d value.charAt(i);\n        switch(c) {\n            case \u0027\"\u0027:\n            case \u0027\\\\\u0027:\n                out.write(\u0027\\\\\u0027);\n                out.write(c);\n                break;\n            case \u0027\\t\u0027:\n                out.write(\"\\\\t\");\n                break;\n            case \u0027\\b\u0027:\n                out.write(\"\\\\b\");\n                break;\n            case \u0027\\n\u0027:\n                out.write(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                out.write(\"\\\\r\");\n                break;\n            case \u0027\\f\u0027:\n                out.write(\"\\\\f\");\n                break;\n            case \u0027\u003c\u0027:\n            case \u0027\u003e\u0027:\n            case \u0027\u0026\u0027:\n            case \u0027\u003d\u0027:\n            case \u0027\\\u0027\u0027:\n                if (htmlSafe) {\n                    out.write(String.format(\"\\\\u%04x\", (int) c));\n                } else {\n                    out.write(c);\n                }\n                break;\n            case \u0027\\u2028\u0027:\n            case \u0027\\u2029\u0027:\n                out.write(String.format(\"\\\\u%04x\", (int) c));\n                break;\n            default:\n                if (c \u003c\u003d 0x1F) {\n                    out.write(String.format(\"\\\\u%04x\", (int) c));\n                } else {\n                    out.write(c);\n                }\n                break;\n        }\n    }\n    out.write(\"\\\"\");\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 424,
      "functionName": "string",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,51 @@\n private void string(String value) throws IOException {\n     out.write(\"\\\"\");\n     for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n         char c \u003d value.charAt(i);\n         switch(c) {\n             case \u0027\"\u0027:\n             case \u0027\\\\\u0027:\n                 out.write(\u0027\\\\\u0027);\n                 out.write(c);\n                 break;\n             case \u0027\\t\u0027:\n                 out.write(\"\\\\t\");\n                 break;\n             case \u0027\\b\u0027:\n                 out.write(\"\\\\b\");\n                 break;\n             case \u0027\\n\u0027:\n                 out.write(\"\\\\n\");\n                 break;\n             case \u0027\\r\u0027:\n                 out.write(\"\\\\r\");\n                 break;\n             case \u0027\\f\u0027:\n                 out.write(\"\\\\f\");\n                 break;\n             case \u0027\u003c\u0027:\n             case \u0027\u003e\u0027:\n             case \u0027\u0026\u0027:\n             case \u0027\u003d\u0027:\n             case \u0027\\\u0027\u0027:\n                 if (htmlSafe) {\n                     out.write(String.format(\"\\\\u%04x\", (int) c));\n                 } else {\n                     out.write(c);\n                 }\n                 break;\n+            case \u0027\\u2028\u0027:\n+            case \u0027\\u2029\u0027:\n+                out.write(String.format(\"\\\\u%04x\", (int) c));\n+                break;\n             default:\n                 if (c \u003c\u003d 0x1F) {\n                     out.write(String.format(\"\\\\u%04x\", (int) c));\n                 } else {\n                     out.write(c);\n                 }\n                 break;\n         }\n     }\n     out.write(\"\\\"\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "747e3c3051153779954e49b7dbc475daa678e1f4": {
      "type": "Ybodychange",
      "commitMessage": "Support mixed streaming and databinding with new APIs.\n",
      "commitDate": "9/1/10, 5:15 PM",
      "commitName": "747e3c3051153779954e49b7dbc475daa678e1f4",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/28/10, 1:18 AM",
      "commitNameOld": "486820f51521d0348160a18b9ba0326f78dcf518",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 4.66,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void string(String value) throws IOException {\n    out.write(\"\\\"\");\n    for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n        char c \u003d value.charAt(i);\n        switch(c) {\n            case \u0027\"\u0027:\n            case \u0027\\\\\u0027:\n                out.write(\u0027\\\\\u0027);\n                out.write(c);\n                break;\n            case \u0027\\t\u0027:\n                out.write(\"\\\\t\");\n                break;\n            case \u0027\\b\u0027:\n                out.write(\"\\\\b\");\n                break;\n            case \u0027\\n\u0027:\n                out.write(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                out.write(\"\\\\r\");\n                break;\n            case \u0027\\f\u0027:\n                out.write(\"\\\\f\");\n                break;\n            case \u0027\u003c\u0027:\n            case \u0027\u003e\u0027:\n            case \u0027\u0026\u0027:\n            case \u0027\u003d\u0027:\n            case \u0027\\\u0027\u0027:\n                if (htmlSafe) {\n                    out.write(String.format(\"\\\\u%04x\", (int) c));\n                } else {\n                    out.write(c);\n                }\n                break;\n            default:\n                if (c \u003c\u003d 0x1F) {\n                    out.write(String.format(\"\\\\u%04x\", (int) c));\n                } else {\n                    out.write(c);\n                }\n                break;\n        }\n    }\n    out.write(\"\\\"\");\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 423,
      "functionName": "string",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,47 @@\n private void string(String value) throws IOException {\n     out.write(\"\\\"\");\n     for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n         char c \u003d value.charAt(i);\n         switch(c) {\n             case \u0027\"\u0027:\n             case \u0027\\\\\u0027:\n                 out.write(\u0027\\\\\u0027);\n                 out.write(c);\n                 break;\n             case \u0027\\t\u0027:\n                 out.write(\"\\\\t\");\n                 break;\n             case \u0027\\b\u0027:\n                 out.write(\"\\\\b\");\n                 break;\n             case \u0027\\n\u0027:\n                 out.write(\"\\\\n\");\n                 break;\n             case \u0027\\r\u0027:\n                 out.write(\"\\\\r\");\n                 break;\n             case \u0027\\f\u0027:\n                 out.write(\"\\\\f\");\n                 break;\n+            case \u0027\u003c\u0027:\n+            case \u0027\u003e\u0027:\n+            case \u0027\u0026\u0027:\n+            case \u0027\u003d\u0027:\n+            case \u0027\\\u0027\u0027:\n+                if (htmlSafe) {\n+                    out.write(String.format(\"\\\\u%04x\", (int) c));\n+                } else {\n+                    out.write(c);\n+                }\n+                break;\n             default:\n                 if (c \u003c\u003d 0x1F) {\n                     out.write(String.format(\"\\\\u%04x\", (int) c));\n                 } else {\n                     out.write(c);\n                 }\n                 break;\n         }\n     }\n     out.write(\"\\\"\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "486820f51521d0348160a18b9ba0326f78dcf518": {
      "type": "Ybodychange",
      "commitMessage": "Fix some test problems.\n\nJsonWriter was using suboptimal escape characters for newlines etc: unicode escapes rather than \\x escapes.\n\nJsonObjectTest was banning empty and whitespace-only keys. These values are permitted as of r585.\n",
      "commitDate": "8/28/10, 1:18 AM",
      "commitName": "486820f51521d0348160a18b9ba0326f78dcf518",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/28/10, 12:29 AM",
      "commitNameOld": "ff7aa3f3314e9e9ac50f3b8b259126ad379aead6",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void string(String value) throws IOException {\n    out.write(\"\\\"\");\n    for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n        char c \u003d value.charAt(i);\n        switch(c) {\n            case \u0027\"\u0027:\n            case \u0027\\\\\u0027:\n                out.write(\u0027\\\\\u0027);\n                out.write(c);\n                break;\n            case \u0027\\t\u0027:\n                out.write(\"\\\\t\");\n                break;\n            case \u0027\\b\u0027:\n                out.write(\"\\\\b\");\n                break;\n            case \u0027\\n\u0027:\n                out.write(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                out.write(\"\\\\r\");\n                break;\n            case \u0027\\f\u0027:\n                out.write(\"\\\\f\");\n                break;\n            default:\n                if (c \u003c\u003d 0x1F) {\n                    out.write(String.format(\"\\\\u%04x\", (int) c));\n                } else {\n                    out.write(c);\n                }\n                break;\n        }\n    }\n    out.write(\"\\\"\");\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 395,
      "functionName": "string",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,36 @@\n private void string(String value) throws IOException {\n     out.write(\"\\\"\");\n     for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n         char c \u003d value.charAt(i);\n-        if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d \u0027\\\\\u0027) {\n-            out.write(\u0027\\\\\u0027);\n-            out.write(c);\n-        } else if (c \u003c\u003d 0x1F) {\n-            out.write(String.format(\"\\\\u%04x\", (int) c));\n-        } else {\n-            out.write(c);\n+        switch(c) {\n+            case \u0027\"\u0027:\n+            case \u0027\\\\\u0027:\n+                out.write(\u0027\\\\\u0027);\n+                out.write(c);\n+                break;\n+            case \u0027\\t\u0027:\n+                out.write(\"\\\\t\");\n+                break;\n+            case \u0027\\b\u0027:\n+                out.write(\"\\\\b\");\n+                break;\n+            case \u0027\\n\u0027:\n+                out.write(\"\\\\n\");\n+                break;\n+            case \u0027\\r\u0027:\n+                out.write(\"\\\\r\");\n+                break;\n+            case \u0027\\f\u0027:\n+                out.write(\"\\\\f\");\n+                break;\n+            default:\n+                if (c \u003c\u003d 0x1F) {\n+                    out.write(String.format(\"\\\\u%04x\", (int) c));\n+                } else {\n+                    out.write(c);\n+                }\n+                break;\n         }\n     }\n     out.write(\"\\\"\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ff7aa3f3314e9e9ac50f3b8b259126ad379aead6": {
      "type": "Ybodychange",
      "commitMessage": "Escape only the required characters when emitting JSON. This means that instead of emitting \n\n  [\"foo\\nbar\", \"baz\"]\n\nwe\u0027ll emit this:\n\n  [\"foo\nbar\", baz\"]\n\nThis simple change measured about ~35% faster for in-memory writes!\n",
      "commitDate": "8/28/10, 12:29 AM",
      "commitName": "ff7aa3f3314e9e9ac50f3b8b259126ad379aead6",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/10, 1:44 AM",
      "commitNameOld": "765a9f1ecdfaf96f3587f488385111c9d6a4927e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private void string(String value) throws IOException {\n    out.write(\"\\\"\");\n    for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n        char c \u003d value.charAt(i);\n        if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d \u0027\\\\\u0027) {\n            out.write(\u0027\\\\\u0027);\n            out.write(c);\n        } else if (c \u003c\u003d 0x1F) {\n            out.write(String.format(\"\\\\u%04x\", (int) c));\n        } else {\n            out.write(c);\n        }\n    }\n    out.write(\"\\\"\");\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 376,
      "functionName": "string",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,37 +1,15 @@\n private void string(String value) throws IOException {\n     out.write(\"\\\"\");\n     for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n         char c \u003d value.charAt(i);\n-        switch(c) {\n-            case \u0027\"\u0027:\n-            case \u0027\\\\\u0027:\n-            case \u0027/\u0027:\n-                out.write(\u0027\\\\\u0027);\n-                out.write(c);\n-                break;\n-            case \u0027\\t\u0027:\n-                out.write(\"\\\\t\");\n-                break;\n-            case \u0027\\b\u0027:\n-                out.write(\"\\\\b\");\n-                break;\n-            case \u0027\\n\u0027:\n-                out.write(\"\\\\n\");\n-                break;\n-            case \u0027\\r\u0027:\n-                out.write(\"\\\\r\");\n-                break;\n-            case \u0027\\f\u0027:\n-                out.write(\"\\\\f\");\n-                break;\n-            default:\n-                if (c \u003c\u003d 0x1F) {\n-                    out.write(String.format(\"\\\\u%04x\", (int) c));\n-                } else {\n-                    out.write(c);\n-                }\n-                break;\n+        if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d \u0027\\\\\u0027) {\n+            out.write(\u0027\\\\\u0027);\n+            out.write(c);\n+        } else if (c \u003c\u003d 0x1F) {\n+            out.write(String.format(\"\\\\u%04x\", (int) c));\n+        } else {\n+            out.write(c);\n         }\n     }\n     out.write(\"\\\"\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e": {
      "type": "Yintroduced",
      "commitMessage": "Brand new classes for streaming JSON efficiently.\n\nNotable features:\n - Efficiency. The parser is faster than the current javacc parser. It\u0027s also faster than popular libraries for JSON streaming.\n - Toggle lenient/strict\n - Toggle pretty/compact\n - Friendly error messages on bad JSON\n - GSON-quality Javadoc\n - Non-execute prefix handling\n\nThis doesn\u0027t wire JsonReader up into Gson just yet. That\u0027s coming soon...\n",
      "commitDate": "8/26/10, 1:44 AM",
      "commitName": "765a9f1ecdfaf96f3587f488385111c9d6a4927e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,37 @@\n+private void string(String value) throws IOException {\n+    out.write(\"\\\"\");\n+    for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n+        char c \u003d value.charAt(i);\n+        switch(c) {\n+            case \u0027\"\u0027:\n+            case \u0027\\\\\u0027:\n+            case \u0027/\u0027:\n+                out.write(\u0027\\\\\u0027);\n+                out.write(c);\n+                break;\n+            case \u0027\\t\u0027:\n+                out.write(\"\\\\t\");\n+                break;\n+            case \u0027\\b\u0027:\n+                out.write(\"\\\\b\");\n+                break;\n+            case \u0027\\n\u0027:\n+                out.write(\"\\\\n\");\n+                break;\n+            case \u0027\\r\u0027:\n+                out.write(\"\\\\r\");\n+                break;\n+            case \u0027\\f\u0027:\n+                out.write(\"\\\\f\");\n+                break;\n+            default:\n+                if (c \u003c\u003d 0x1F) {\n+                    out.write(String.format(\"\\\\u%04x\", (int) c));\n+                } else {\n+                    out.write(c);\n+                }\n+                break;\n+        }\n+    }\n+    out.write(\"\\\"\");\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void string(String value) throws IOException {\n    out.write(\"\\\"\");\n    for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n        char c \u003d value.charAt(i);\n        switch(c) {\n            case \u0027\"\u0027:\n            case \u0027\\\\\u0027:\n            case \u0027/\u0027:\n                out.write(\u0027\\\\\u0027);\n                out.write(c);\n                break;\n            case \u0027\\t\u0027:\n                out.write(\"\\\\t\");\n                break;\n            case \u0027\\b\u0027:\n                out.write(\"\\\\b\");\n                break;\n            case \u0027\\n\u0027:\n                out.write(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                out.write(\"\\\\r\");\n                break;\n            case \u0027\\f\u0027:\n                out.write(\"\\\\f\");\n                break;\n            default:\n                if (c \u003c\u003d 0x1F) {\n                    out.write(String.format(\"\\\\u%04x\", (int) c));\n                } else {\n                    out.write(c);\n                }\n                break;\n        }\n    }\n    out.write(\"\\\"\");\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 376,
      "functionName": "string",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}