{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeToken.java",
  "functionName": "getSuperclassTypeParameter",
  "functionId": "getSuperclassTypeParameter___subclass-Class__?__",
  "sourceFilePath": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
  "functionAnnotation": "",
  "functionDoc": "Returns the type from super class\u0027s type parameter in {@link $Gson$Types#canonicalize\ncanonical form}.\n",
  "functionStartLine": 81,
  "functionEndLine": 88,
  "numCommitsSeen": 16,
  "timeTaken": 789,
  "changeHistory": [
    "31964507c1caabc9a70e3270fa56aaee29eff6b2",
    "c8bd121db2b382cc0e15d317b19178e6db373d9b",
    "4efb133b4a6cc93708dda782d948b9c88c3b5ff0",
    "52288d712730a50f13fc6c2bf07d339642d06846",
    "d1ddab2e6ffcd938ac0d133fd46caf5fb2417009",
    "3b0f8f4340c68d8fde0840befbc1b89afa14933f",
    "18b301dfeb91ca4468e0955d4cafcb32186efe1e",
    "82771f006cad2047df9b30cdc35338599c31da45",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b"
  ],
  "changeHistoryShort": {
    "31964507c1caabc9a70e3270fa56aaee29eff6b2": "Yannotationchange",
    "c8bd121db2b382cc0e15d317b19178e6db373d9b": "Ymultichange(Ybodychange,Ydocchange)",
    "4efb133b4a6cc93708dda782d948b9c88c3b5ff0": "Ymultichange(Ybodychange,Ydocchange)",
    "52288d712730a50f13fc6c2bf07d339642d06846": "Yannotationchange",
    "d1ddab2e6ffcd938ac0d133fd46caf5fb2417009": "Ymultichange(Ybodychange,Ydocchange)",
    "3b0f8f4340c68d8fde0840befbc1b89afa14933f": "Ybodychange",
    "18b301dfeb91ca4468e0955d4cafcb32186efe1e": "Yannotationchange",
    "82771f006cad2047df9b30cdc35338599c31da45": "Yannotationchange",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31964507c1caabc9a70e3270fa56aaee29eff6b2": {
      "type": "Yannotationchange",
      "commitMessage": "Updated SuppressWarnings annotations to Eclipse 3.6/3.7 which is unfortunately incompatible with Eclipse 3.5 (rawtypes vs unchecked)\nThis CL eliminates all eclipse warnings.\n",
      "commitDate": "10/20/11, 2:32 PM",
      "commitName": "31964507c1caabc9a70e3270fa56aaee29eff6b2",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "4/5/11, 5:26 PM",
      "commitNameOld": "c8bd121db2b382cc0e15d317b19178e6db373d9b",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 197.88,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "actualSource": "static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
      "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
      "functionStartLine": 82,
      "functionName": "getSuperclassTypeParameter",
      "functionAnnotation": "",
      "functionDoc": "Returns the type from super class\u0027s type parameter in {@link $Gson$Types#canonicalize\ncanonical form}.\n",
      "diff": "@@ -1,9 +1,8 @@\n-@SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n     return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@SuppressWarnings(\"unchecked\")",
        "newValue": ""
      }
    },
    "c8bd121db2b382cc0e15d317b19178e6db373d9b": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Renamed $Preconditions to $Gson$Preconditions and $Types to $Gson$Types.\nMarked the two private classes in $Types as final.\n",
      "commitDate": "4/5/11, 5:26 PM",
      "commitName": "c8bd121db2b382cc0e15d317b19178e6db373d9b",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed $Preconditions to $Gson$Preconditions and $Types to $Gson$Types.\nMarked the two private classes in $Types as final.\n",
          "commitDate": "4/5/11, 5:26 PM",
          "commitName": "c8bd121db2b382cc0e15d317b19178e6db373d9b",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "3/29/11, 2:24 PM",
          "commitNameOld": "4efb133b4a6cc93708dda782d948b9c88c3b5ff0",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 7.13,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
          "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
          "functionStartLine": 83,
          "functionName": "getSuperclassTypeParameter",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Returns the type from super class\u0027s type parameter in {@link $Gson$Types#canonicalize\ncanonical form}.\n",
          "diff": "@@ -1,9 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n-    return $Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n+    return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Renamed $Preconditions to $Gson$Preconditions and $Types to $Gson$Types.\nMarked the two private classes in $Types as final.\n",
          "commitDate": "4/5/11, 5:26 PM",
          "commitName": "c8bd121db2b382cc0e15d317b19178e6db373d9b",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "3/29/11, 2:24 PM",
          "commitNameOld": "4efb133b4a6cc93708dda782d948b9c88c3b5ff0",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 7.13,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
          "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
          "functionStartLine": 83,
          "functionName": "getSuperclassTypeParameter",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Returns the type from super class\u0027s type parameter in {@link $Gson$Types#canonicalize\ncanonical form}.\n",
          "diff": "@@ -1,9 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n-    return $Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n+    return $Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns the type from super class\u0027s type parameter in {@link $Types#canonicalize\ncanonical form}.\n",
            "newValue": "Returns the type from super class\u0027s type parameter in {@link $Gson$Types#canonicalize\ncanonical form}.\n"
          }
        }
      ]
    },
    "4efb133b4a6cc93708dda782d948b9c88c3b5ff0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "bling bling\n\nPrefix internal classes with $ to prevent them from interfering with IDE\u0027s auto import functionality.\n",
      "commitDate": "3/29/11, 2:24 PM",
      "commitName": "4efb133b4a6cc93708dda782d948b9c88c3b5ff0",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "bling bling\n\nPrefix internal classes with $ to prevent them from interfering with IDE\u0027s auto import functionality.\n",
          "commitDate": "3/29/11, 2:24 PM",
          "commitName": "4efb133b4a6cc93708dda782d948b9c88c3b5ff0",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "3/29/11, 2:18 PM",
          "commitNameOld": "5e74dabad9acaed40c2c0db88680f09bbbdbf28d",
          "commitAuthorOld": "Joel Leitch",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return $Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
          "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
          "functionStartLine": 83,
          "functionName": "getSuperclassTypeParameter",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Returns the type from super class\u0027s type parameter in {@link $Types#canonicalize\ncanonical form}.\n",
          "diff": "@@ -1,9 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n-    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n+    return $Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "bling bling\n\nPrefix internal classes with $ to prevent them from interfering with IDE\u0027s auto import functionality.\n",
          "commitDate": "3/29/11, 2:24 PM",
          "commitName": "4efb133b4a6cc93708dda782d948b9c88c3b5ff0",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "3/29/11, 2:18 PM",
          "commitNameOld": "5e74dabad9acaed40c2c0db88680f09bbbdbf28d",
          "commitAuthorOld": "Joel Leitch",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return $Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
          "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
          "functionStartLine": 83,
          "functionName": "getSuperclassTypeParameter",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Returns the type from super class\u0027s type parameter in {@link $Types#canonicalize\ncanonical form}.\n",
          "diff": "@@ -1,9 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n-    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n+    return $Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns the type from super class\u0027s type parameter in {@link Types#canonicalize(java.lang.reflect.Type)\ncanonical form}.\n",
            "newValue": "Returns the type from super class\u0027s type parameter in {@link $Types#canonicalize\ncanonical form}.\n"
          }
        }
      ]
    },
    "52288d712730a50f13fc6c2bf07d339642d06846": {
      "type": "Yannotationchange",
      "commitMessage": "rawtypes -\u003e unchecked\nFixed spurious eclipse warnings on deprecation, missing classes or parameters, etc.\n",
      "commitDate": "2/24/11, 2:47 PM",
      "commitName": "52288d712730a50f13fc6c2bf07d339642d06846",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "1/18/11, 11:34 PM",
      "commitNameOld": "edc71130c44e82fec4a3b4712f44b1912d374036",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 36.63,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
      "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
      "functionStartLine": 97,
      "functionName": "getSuperclassTypeParameter",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Returns the type from super class\u0027s type parameter in {@link Types#canonicalize(java.lang.reflect.Type)\ncanonical form}.\n",
      "diff": "@@ -1,8 +1,9 @@\n+@SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n     return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@SuppressWarnings(\"unchecked\")"
      }
    },
    "d1ddab2e6ffcd938ac0d133fd46caf5fb2417009": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Swap out GSON\u0027s type mechanics with the Type resolution code from Guice.\n\nThe most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.\n\nabstract class Foo\u003cA, B\u003e {\n   A a;\n   B b;\n   List\u003cA\u003e list;\n   Map\u003cA, List\u003cB\u003e\u003e map;\n}\nclass RealFoo extends Foo\u003cString, Integer\u003e {...}\n\nThis is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we\u0027re exposing more than we need to!\n",
      "commitDate": "12/3/10, 12:07 AM",
      "commitName": "d1ddab2e6ffcd938ac0d133fd46caf5fb2417009",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Swap out GSON\u0027s type mechanics with the Type resolution code from Guice.\n\nThe most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.\n\nabstract class Foo\u003cA, B\u003e {\n   A a;\n   B b;\n   List\u003cA\u003e list;\n   Map\u003cA, List\u003cB\u003e\u003e map;\n}\nclass RealFoo extends Foo\u003cString, Integer\u003e {...}\n\nThis is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we\u0027re exposing more than we need to!\n",
          "commitDate": "12/3/10, 12:07 AM",
          "commitName": "d1ddab2e6ffcd938ac0d133fd46caf5fb2417009",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/23/09, 10:45 AM",
          "commitNameOld": "3b0f8f4340c68d8fde0840befbc1b89afa14933f",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 435.6,
          "commitsBetweenForRepo": 227,
          "commitsBetweenForFile": 1,
          "actualSource": "static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
          "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
          "functionStartLine": 104,
          "functionName": "getSuperclassTypeParameter",
          "functionAnnotation": "",
          "functionDoc": "Returns the type from super class\u0027s type parameter in {@link Types#canonicalize(java.lang.reflect.Type)\ncanonical form}.\n",
          "diff": "@@ -1,7 +1,8 @@\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n-    if (superclass instanceof Class\u003c?\u003e) {\n+    if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n-    return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n+    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n+    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Swap out GSON\u0027s type mechanics with the Type resolution code from Guice.\n\nThe most significant impact of this change is that fields whose types are type parameters should now GSONify just fine. For example, consider the class below.\n\nabstract class Foo\u003cA, B\u003e {\n   A a;\n   B b;\n   List\u003cA\u003e list;\n   Map\u003cA, List\u003cB\u003e\u003e map;\n}\nclass RealFoo extends Foo\u003cString, Integer\u003e {...}\n\nThis is a reasonable checkpoint but some work still needs to be done for this. In particular, the level of visibility of methods in TypeToken and Type should be reconsidered; we\u0027re exposing more than we need to!\n",
          "commitDate": "12/3/10, 12:07 AM",
          "commitName": "d1ddab2e6ffcd938ac0d133fd46caf5fb2417009",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/23/09, 10:45 AM",
          "commitNameOld": "3b0f8f4340c68d8fde0840befbc1b89afa14933f",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 435.6,
          "commitsBetweenForRepo": 227,
          "commitsBetweenForFile": 1,
          "actualSource": "static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n}",
          "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
          "functionStartLine": 104,
          "functionName": "getSuperclassTypeParameter",
          "functionAnnotation": "",
          "functionDoc": "Returns the type from super class\u0027s type parameter in {@link Types#canonicalize(java.lang.reflect.Type)\ncanonical form}.\n",
          "diff": "@@ -1,7 +1,8 @@\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n-    if (superclass instanceof Class\u003c?\u003e) {\n+    if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n-    return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n+    ParameterizedType parameterized \u003d (ParameterizedType) superclass;\n+    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Gets type from super class\u0027s type parameter.\n",
            "newValue": "Returns the type from super class\u0027s type parameter in {@link Types#canonicalize(java.lang.reflect.Type)\ncanonical form}.\n"
          }
        }
      ]
    },
    "3b0f8f4340c68d8fde0840befbc1b89afa14933f": {
      "type": "Ybodychange",
      "commitMessage": "Removed all the JDK warnings about unused fields in test classes or unused constructors for use by Gson or instanceof calls on parameterized types.\n",
      "commitDate": "9/23/09, 10:45 AM",
      "commitName": "3b0f8f4340c68d8fde0840befbc1b89afa14933f",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "9/22/09, 12:04 PM",
      "commitNameOld": "18b301dfeb91ca4468e0955d4cafcb32186efe1e",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class\u003c?\u003e) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n}",
      "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
      "functionStartLine": 88,
      "functionName": "getSuperclassTypeParameter",
      "functionAnnotation": "",
      "functionDoc": "Gets type from super class\u0027s type parameter.\n",
      "diff": "@@ -1,7 +1,7 @@\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n-    if (superclass instanceof Class) {\n+    if (superclass instanceof Class\u003c?\u003e) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "18b301dfeb91ca4468e0955d4cafcb32186efe1e": {
      "type": "Yannotationchange",
      "commitMessage": "- Serializing of Object arrays.\n- Fixed incorrect warning\n",
      "commitDate": "9/22/09, 12:04 PM",
      "commitName": "18b301dfeb91ca4468e0955d4cafcb32186efe1e",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "8/31/09, 10:51 AM",
      "commitNameOld": "82771f006cad2047df9b30cdc35338599c31da45",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 22.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n}",
      "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
      "functionStartLine": 88,
      "functionName": "getSuperclassTypeParameter",
      "functionAnnotation": "",
      "functionDoc": "Gets type from super class\u0027s type parameter.\n",
      "diff": "@@ -1,8 +1,7 @@\n-@SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@SuppressWarnings(\"unchecked\")",
        "newValue": ""
      }
    },
    "82771f006cad2047df9b30cdc35338599c31da45": {
      "type": "Yannotationchange",
      "commitMessage": "removed Java 1.5 warnings\n",
      "commitDate": "8/31/09, 10:51 AM",
      "commitName": "82771f006cad2047df9b30cdc35338599c31da45",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "8/31/08, 8:13 PM",
      "commitNameOld": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 364.61,
      "commitsBetweenForRepo": 187,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n}",
      "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
      "functionStartLine": 89,
      "functionName": "getSuperclassTypeParameter",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Gets type from super class\u0027s type parameter.\n",
      "diff": "@@ -1,7 +1,8 @@\n+@SuppressWarnings(\"unchecked\")\n static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n     Type superclass \u003d subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n         throw new RuntimeException(\"Missing type parameter.\");\n     }\n     return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@SuppressWarnings(\"unchecked\")"
      }
    },
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": {
      "type": "Yintroduced",
      "commitMessage": "moved gson as a project under trunk\n",
      "commitDate": "8/31/08, 8:13 PM",
      "commitName": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,7 @@\n+static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n+    Type superclass \u003d subclass.getGenericSuperclass();\n+    if (superclass instanceof Class) {\n+        throw new RuntimeException(\"Missing type parameter.\");\n+    }\n+    return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n+}\n\\ No newline at end of file\n",
      "actualSource": "static Type getSuperclassTypeParameter(Class\u003c?\u003e subclass) {\n    Type superclass \u003d subclass.getGenericSuperclass();\n    if (superclass instanceof Class) {\n        throw new RuntimeException(\"Missing type parameter.\");\n    }\n    return ((ParameterizedType) superclass).getActualTypeArguments()[0];\n}",
      "path": "gson/src/main/java/com/google/gson/reflect/TypeToken.java",
      "functionStartLine": 88,
      "functionName": "getSuperclassTypeParameter",
      "functionAnnotation": "",
      "functionDoc": "Gets type from super class\u0027s type parameter.\n"
    }
  }
}