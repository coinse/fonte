{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "toJson",
  "functionId": "toJson___src-Object__typeOfSrc-Type",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "",
  "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n",
  "functionStartLine": 598,
  "functionEndLine": 602,
  "numCommitsSeen": 184,
  "timeTaken": 3662,
  "changeHistory": [
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
    "747e3c3051153779954e49b7dbc475daa678e1f4",
    "e37add7836afe3768f1e517eed3ffbf440bff6bb",
    "b634804533ab68697b6f5414e8c93c3613850bf2",
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b"
  ],
  "changeHistoryShort": {
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": "Ybodychange",
    "747e3c3051153779954e49b7dbc475daa678e1f4": "Ybodychange",
    "e37add7836afe3768f1e517eed3ffbf440bff6bb": "Ybodychange",
    "b634804533ab68697b6f5414e8c93c3613850bf2": "Ybodychange",
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a": "Ydocchange",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": {
      "type": "Ybodychange",
      "commitMessage": "Adopt JsonElementWriter in GSON.\nAdd setSerializeNulls() to JsonWriter, so nulls can be skipped from serialization. This does not yet impact JsonElementWriter.\n\nOne change in behavior: if the only value is skipped, we now emit \"null\" rather than \"\".\n",
      "commitDate": "9/30/11, 12:08 AM",
      "commitName": "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/28/11, 12:14 PM",
      "commitNameOld": "46e65a77c5856d21f2d5e7c90306dbbd894da57e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src, Type typeOfSrc) {\n    StringWriter writer \u003d new StringWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.toString();\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 444,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n",
      "diff": "@@ -1,5 +1,5 @@\n public String toJson(Object src, Type typeOfSrc) {\n     StringWriter writer \u003d new StringWriter();\n-    toJson(toJsonTree(src, typeOfSrc), writer);\n+    toJson(src, typeOfSrc, writer);\n     return writer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "747e3c3051153779954e49b7dbc475daa678e1f4": {
      "type": "Ybodychange",
      "commitMessage": "Support mixed streaming and databinding with new APIs.\n",
      "commitDate": "9/1/10, 5:15 PM",
      "commitName": "747e3c3051153779954e49b7dbc475daa678e1f4",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/1/10, 5:10 PM",
      "commitNameOld": "fa40b4c63a57e92e87b3fb6079b01fd5304a01c1",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src, Type typeOfSrc) {\n    StringWriter writer \u003d new StringWriter();\n    toJson(toJsonTree(src, typeOfSrc), writer);\n    return writer.toString();\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 272,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n",
      "diff": "@@ -1,5 +1,5 @@\n public String toJson(Object src, Type typeOfSrc) {\n     StringWriter writer \u003d new StringWriter();\n-    toJson(src, typeOfSrc, writer);\n+    toJson(toJsonTree(src, typeOfSrc), writer);\n     return writer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e37add7836afe3768f1e517eed3ffbf440bff6bb": {
      "type": "Ybodychange",
      "commitMessage": "Implemented some code review comments from r482\n",
      "commitDate": "10/8/09, 6:35 PM",
      "commitName": "e37add7836afe3768f1e517eed3ffbf440bff6bb",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/8/09, 12:28 PM",
      "commitNameOld": "b634804533ab68697b6f5414e8c93c3613850bf2",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src, Type typeOfSrc) {\n    StringWriter writer \u003d new StringWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.toString();\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 268,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n",
      "diff": "@@ -1,3 +1,5 @@\n public String toJson(Object src, Type typeOfSrc) {\n-    return toJson(src, typeOfSrc, true);\n+    StringWriter writer \u003d new StringWriter();\n+    toJson(src, typeOfSrc, writer);\n+    return writer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b634804533ab68697b6f5414e8c93c3613850bf2": {
      "type": "Ybodychange",
      "commitMessage": "Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. \nCreated some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.\n",
      "commitDate": "10/8/09, 12:28 PM",
      "commitName": "b634804533ab68697b6f5414e8c93c3613850bf2",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/7/09, 2:23 AM",
      "commitNameOld": "839b0c2f94746b89c08212b9d199a174ae2c407b",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src, Type typeOfSrc) {\n    return toJson(src, typeOfSrc, true);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 272,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n",
      "diff": "@@ -1,5 +1,3 @@\n public String toJson(Object src, Type typeOfSrc) {\n-    StringWriter writer \u003d new StringWriter();\n-    toJson(src, typeOfSrc, writer);\n-    return writer.toString();\n+    return toJson(src, typeOfSrc, true);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a": {
      "type": "Ydocchange",
      "commitMessage": "Fixed issue 52 by switching Gson.toJson methods to use Appendable instead of java.io.Writer\n",
      "commitDate": "11/26/08, 11:13 AM",
      "commitName": "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "11/14/08, 9:11 PM",
      "commitNameOld": "cf2a457af7b0422e7728e0d55a4e794048af5a6b",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 11.58,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src, Type typeOfSrc) {\n    StringWriter writer \u003d new StringWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.toString();\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 220,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Writer}, use {@link #toJson(Object, Type, Writer)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n",
        "newValue": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n"
      }
    },
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": {
      "type": "Yintroduced",
      "commitMessage": "moved gson as a project under trunk\n",
      "commitDate": "8/31/08, 8:13 PM",
      "commitName": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,5 @@\n+public String toJson(Object src, Type typeOfSrc) {\n+    StringWriter writer \u003d new StringWriter();\n+    toJson(src, typeOfSrc, writer);\n+    return writer.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String toJson(Object src, Type typeOfSrc) {\n    StringWriter writer \u003d new StringWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.toString();\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 226,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\nthe object to a {@link Writer}, use {@link #toJson(Object, Type, Writer)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return Json representation of {@code src}\n"
    }
  }
}