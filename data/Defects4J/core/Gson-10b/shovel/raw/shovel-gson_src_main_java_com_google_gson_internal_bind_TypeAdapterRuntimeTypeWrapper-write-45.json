{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeAdapterRuntimeTypeWrapper.java",
  "functionName": "write",
  "functionId": "write___out-JsonWriter__value-T",
  "sourceFilePath": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
  "functionAnnotation": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }),@Override",
  "functionDoc": "",
  "functionStartLine": 45,
  "functionEndLine": 69,
  "numCommitsSeen": 15,
  "timeTaken": 827,
  "changeHistory": [
    "f602bce9f536df971b8bfa01b7ffb111e2896c97",
    "f777a192ee13fd59048aa7ba640cc8023051c89d",
    "31964507c1caabc9a70e3270fa56aaee29eff6b2",
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165",
    "57ea7ff9f36409039ede0012680a8b0d3a2c02a2",
    "f7121ad87d2916c72a854f746b37d62aead1ff0b",
    "ad5ff0f2d9c08fb25d821bdc038934642c3c7367"
  ],
  "changeHistoryShort": {
    "f602bce9f536df971b8bfa01b7ffb111e2896c97": "Ymultichange(Yparameterchange,Ybodychange)",
    "f777a192ee13fd59048aa7ba640cc8023051c89d": "Ybodychange",
    "31964507c1caabc9a70e3270fa56aaee29eff6b2": "Yannotationchange",
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165": "Ybodychange",
    "57ea7ff9f36409039ede0012680a8b0d3a2c02a2": "Ybodychange",
    "f7121ad87d2916c72a854f746b37d62aead1ff0b": "Ybodychange",
    "ad5ff0f2d9c08fb25d821bdc038934642c3c7367": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f602bce9f536df971b8bfa01b7ffb111e2896c97": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Nice documentation for TypeAdapter.\n",
      "commitDate": "12/3/11, 11:46 AM",
      "commitName": "f602bce9f536df971b8bfa01b7ffb111e2896c97",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Nice documentation for TypeAdapter.\n",
          "commitDate": "12/3/11, 11:46 AM",
          "commitName": "f602bce9f536df971b8bfa01b7ffb111e2896c97",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "11/20/11, 1:02 PM",
          "commitNameOld": "f777a192ee13fd59048aa7ba640cc8023051c89d",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 12.95,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n@Override\npublic void write(JsonWriter out, T value) throws IOException {\n    TypeAdapter chosen \u003d delegate;\n    Type runtimeType \u003d getRuntimeTypeIfMoreSpecific(type, value);\n    if (runtimeType !\u003d type) {\n        TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d runtimeTypeAdapter;\n        } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d delegate;\n        } else {\n            chosen \u003d runtimeTypeAdapter;\n        }\n    }\n    chosen.write(out, value);\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
          "functionStartLine": 45,
          "functionName": "write",
          "functionAnnotation": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }),@Override",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,17 @@\n @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n @Override\n-public void write(JsonWriter writer, T value) throws IOException {\n+public void write(JsonWriter out, T value) throws IOException {\n     TypeAdapter chosen \u003d delegate;\n     Type runtimeType \u003d getRuntimeTypeIfMoreSpecific(type, value);\n     if (runtimeType !\u003d type) {\n         TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n         if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d runtimeTypeAdapter;\n         } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d delegate;\n         } else {\n             chosen \u003d runtimeTypeAdapter;\n         }\n     }\n-    chosen.write(writer, value);\n+    chosen.write(out, value);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[writer-JsonWriter, value-T]",
            "newValue": "[out-JsonWriter, value-T]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Nice documentation for TypeAdapter.\n",
          "commitDate": "12/3/11, 11:46 AM",
          "commitName": "f602bce9f536df971b8bfa01b7ffb111e2896c97",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "11/20/11, 1:02 PM",
          "commitNameOld": "f777a192ee13fd59048aa7ba640cc8023051c89d",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 12.95,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n@Override\npublic void write(JsonWriter out, T value) throws IOException {\n    TypeAdapter chosen \u003d delegate;\n    Type runtimeType \u003d getRuntimeTypeIfMoreSpecific(type, value);\n    if (runtimeType !\u003d type) {\n        TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d runtimeTypeAdapter;\n        } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d delegate;\n        } else {\n            chosen \u003d runtimeTypeAdapter;\n        }\n    }\n    chosen.write(out, value);\n}",
          "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
          "functionStartLine": 45,
          "functionName": "write",
          "functionAnnotation": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }),@Override",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,17 @@\n @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n @Override\n-public void write(JsonWriter writer, T value) throws IOException {\n+public void write(JsonWriter out, T value) throws IOException {\n     TypeAdapter chosen \u003d delegate;\n     Type runtimeType \u003d getRuntimeTypeIfMoreSpecific(type, value);\n     if (runtimeType !\u003d type) {\n         TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n         if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d runtimeTypeAdapter;\n         } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d delegate;\n         } else {\n             chosen \u003d runtimeTypeAdapter;\n         }\n     }\n-    chosen.write(writer, value);\n+    chosen.write(out, value);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f777a192ee13fd59048aa7ba640cc8023051c89d": {
      "type": "Ybodychange",
      "commitMessage": "Remove dead code and fold contents of single-member helper classes into their clients.\n",
      "commitDate": "11/20/11, 1:02 PM",
      "commitName": "f777a192ee13fd59048aa7ba640cc8023051c89d",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "11/20/11, 7:23 AM",
      "commitNameOld": "7e760143fdc8b689daeebdee33ad6ea7d0a62a56",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n@Override\npublic void write(JsonWriter writer, T value) throws IOException {\n    TypeAdapter chosen \u003d delegate;\n    Type runtimeType \u003d getRuntimeTypeIfMoreSpecific(type, value);\n    if (runtimeType !\u003d type) {\n        TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d runtimeTypeAdapter;\n        } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d delegate;\n        } else {\n            chosen \u003d runtimeTypeAdapter;\n        }\n    }\n    chosen.write(writer, value);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
      "functionStartLine": 45,
      "functionName": "write",
      "functionAnnotation": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }),@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n @Override\n public void write(JsonWriter writer, T value) throws IOException {\n     TypeAdapter chosen \u003d delegate;\n-    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n+    Type runtimeType \u003d getRuntimeTypeIfMoreSpecific(type, value);\n     if (runtimeType !\u003d type) {\n         TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n         if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d runtimeTypeAdapter;\n         } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d delegate;\n         } else {\n             chosen \u003d runtimeTypeAdapter;\n         }\n     }\n     chosen.write(writer, value);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "31964507c1caabc9a70e3270fa56aaee29eff6b2": {
      "type": "Yannotationchange",
      "commitMessage": "Updated SuppressWarnings annotations to Eclipse 3.6/3.7 which is unfortunately incompatible with Eclipse 3.5 (rawtypes vs unchecked)\nThis CL eliminates all eclipse warnings.\n",
      "commitDate": "10/20/11, 2:32 PM",
      "commitName": "31964507c1caabc9a70e3270fa56aaee29eff6b2",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "9/11/11, 12:04 AM",
      "commitNameOld": "25c6ae177b1ca56db7f3c29eb574bdd032a06165",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 39.6,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n@Override\npublic void write(JsonWriter writer, T value) throws IOException {\n    TypeAdapter chosen \u003d delegate;\n    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n    if (runtimeType !\u003d type) {\n        TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d runtimeTypeAdapter;\n        } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d delegate;\n        } else {\n            chosen \u003d runtimeTypeAdapter;\n        }\n    }\n    chosen.write(writer, value);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
      "functionStartLine": 43,
      "functionName": "write",
      "functionAnnotation": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }),@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n-@SuppressWarnings(\"unchecked\")\n+@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n @Override\n public void write(JsonWriter writer, T value) throws IOException {\n     TypeAdapter chosen \u003d delegate;\n     Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n     if (runtimeType !\u003d type) {\n         TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n         if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d runtimeTypeAdapter;\n         } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d delegate;\n         } else {\n             chosen \u003d runtimeTypeAdapter;\n         }\n     }\n     chosen.write(writer, value);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@SuppressWarnings(\"unchecked\"),@Override",
        "newValue": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }),@Override"
      }
    },
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165": {
      "type": "Ybodychange",
      "commitMessage": "Down to 22 failing tests.\n\nConsolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don\u0027t need to ever do reflection to lookup a constructor at construction time.\n\nCleaned up some buggy type adapters, particularly around handling of null.\n\nRemoved dead code for object graph navigation.\n\nMoved some classes into \u0027internal\u0027 so they are visible to the \u0027bind\u0027 subpackage.\n\nTurned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.\n\nAdded an API to request the \u0027next\u0027 type adapter for a type. This allows type adapters to compose other type adapters. We\u0027re using this in two places:\n - where the user has excluded a type from serialization but not deserialization, we need to use the \"default\" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.\n - similarly when a DOM type serializer is registered but no deserializer, or vice versa.\nThis is the biggest change to the MiniGson core.\n\nFor backwards compatibility, return null for the empty string.\n\nSimplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.\n\nMore useful error messages when calling getAsBoolean on a JsonNull.\n\nRemove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don\u0027t interject ourselves between the users\u0027 various type adapters.\n",
      "commitDate": "9/11/11, 12:04 AM",
      "commitName": "25c6ae177b1ca56db7f3c29eb574bdd032a06165",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/11/11, 7:18 PM",
      "commitNameOld": "57ea7ff9f36409039ede0012680a8b0d3a2c02a2",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 30.2,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\n@Override\npublic void write(JsonWriter writer, T value) throws IOException {\n    TypeAdapter chosen \u003d delegate;\n    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n    if (runtimeType !\u003d type) {\n        TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d runtimeTypeAdapter;\n        } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen \u003d delegate;\n        } else {\n            chosen \u003d runtimeTypeAdapter;\n        }\n    }\n    chosen.write(writer, value);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
      "functionStartLine": 43,
      "functionName": "write",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\"),@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,17 @@\n @SuppressWarnings(\"unchecked\")\n @Override\n public void write(JsonWriter writer, T value) throws IOException {\n     TypeAdapter chosen \u003d delegate;\n     Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n     if (runtimeType !\u003d type) {\n         TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n-        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapter)) {\n+        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d runtimeTypeAdapter;\n-        } else if (!(delegate instanceof ReflectiveTypeAdapter)) {\n+        } else if (!(delegate instanceof ReflectiveTypeAdapterFactory.Adapter)) {\n             chosen \u003d delegate;\n         } else {\n             chosen \u003d runtimeTypeAdapter;\n         }\n     }\n     chosen.write(writer, value);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57ea7ff9f36409039ede0012680a8b0d3a2c02a2": {
      "type": "Ybodychange",
      "commitMessage": "Restored this behavior for serialization: (as verified in CustomSerializerTest)\nFirst preference: a type adapter registered for the runtime type\nSecond preference: a type adapter registered for the declared type\nThird preference: reflective type adapter for the runtime type (if it is a sub class of the declared type)\nFourth preference: reflective type adapter for the declared type\n",
      "commitDate": "8/11/11, 7:18 PM",
      "commitName": "57ea7ff9f36409039ede0012680a8b0d3a2c02a2",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "8/11/11, 6:59 PM",
      "commitNameOld": "f7121ad87d2916c72a854f746b37d62aead1ff0b",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\n@Override\npublic void write(JsonWriter writer, T value) throws IOException {\n    TypeAdapter chosen \u003d delegate;\n    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n    if (runtimeType !\u003d type) {\n        TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapter)) {\n            chosen \u003d runtimeTypeAdapter;\n        } else if (!(delegate instanceof ReflectiveTypeAdapter)) {\n            chosen \u003d delegate;\n        } else {\n            chosen \u003d runtimeTypeAdapter;\n        }\n    }\n    chosen.write(writer, value);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
      "functionStartLine": 44,
      "functionName": "write",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\"),@Override",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,17 @@\n @SuppressWarnings(\"unchecked\")\n @Override\n public void write(JsonWriter writer, T value) throws IOException {\n-    TypeAdapter t \u003d delegate;\n-    if (delegate instanceof ReflectiveTypeAdapter) {\n-        Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n-        if (runtimeType !\u003d type) {\n-            t \u003d context.getAdapter(TypeToken.get(runtimeType));\n+    TypeAdapter chosen \u003d delegate;\n+    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n+    if (runtimeType !\u003d type) {\n+        TypeAdapter runtimeTypeAdapter \u003d context.getAdapter(TypeToken.get(runtimeType));\n+        if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapter)) {\n+            chosen \u003d runtimeTypeAdapter;\n+        } else if (!(delegate instanceof ReflectiveTypeAdapter)) {\n+            chosen \u003d delegate;\n+        } else {\n+            chosen \u003d runtimeTypeAdapter;\n         }\n     }\n-    t.write(writer, value);\n+    chosen.write(writer, value);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f7121ad87d2916c72a854f746b37d62aead1ff0b": {
      "type": "Ybodychange",
      "commitMessage": "Restored this behavior:\nIf a type adapter is registered for a base class, then a field of that type is serialized with the type adapter instead of using the run-time type.\nThis fixes: CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances\n",
      "commitDate": "8/11/11, 6:59 PM",
      "commitName": "f7121ad87d2916c72a854f746b37d62aead1ff0b",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "8/4/11, 5:41 PM",
      "commitNameOld": "ad5ff0f2d9c08fb25d821bdc038934642c3c7367",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 7.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\n@Override\npublic void write(JsonWriter writer, T value) throws IOException {\n    TypeAdapter t \u003d delegate;\n    if (delegate instanceof ReflectiveTypeAdapter) {\n        Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n        if (runtimeType !\u003d type) {\n            t \u003d context.getAdapter(TypeToken.get(runtimeType));\n        }\n    }\n    t.write(writer, value);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
      "functionStartLine": 44,
      "functionName": "write",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\"),@Override",
      "functionDoc": "",
      "diff": "@@ -1,7 +1,12 @@\n @SuppressWarnings(\"unchecked\")\n @Override\n public void write(JsonWriter writer, T value) throws IOException {\n-    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n-    TypeAdapter t \u003d runtimeType !\u003d type ? context.getAdapter(TypeToken.get(runtimeType)) : delegate;\n+    TypeAdapter t \u003d delegate;\n+    if (delegate instanceof ReflectiveTypeAdapter) {\n+        Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n+        if (runtimeType !\u003d type) {\n+            t \u003d context.getAdapter(TypeToken.get(runtimeType));\n+        }\n+    }\n     t.write(writer, value);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad5ff0f2d9c08fb25d821bdc038934642c3c7367": {
      "type": "Yintroduced",
      "commitMessage": "Created a wrapper for runtime type determination.\n",
      "commitDate": "8/4/11, 5:41 PM",
      "commitName": "ad5ff0f2d9c08fb25d821bdc038934642c3c7367",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,7 @@\n+@SuppressWarnings(\"unchecked\")\n+@Override\n+public void write(JsonWriter writer, T value) throws IOException {\n+    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n+    TypeAdapter t \u003d runtimeType !\u003d type ? context.getAdapter(TypeToken.get(runtimeType)) : delegate;\n+    t.write(writer, value);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\n@Override\npublic void write(JsonWriter writer, T value) throws IOException {\n    Type runtimeType \u003d Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n    TypeAdapter t \u003d runtimeType !\u003d type ? context.getAdapter(TypeToken.get(runtimeType)) : delegate;\n    t.write(writer, value);\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
      "functionStartLine": 44,
      "functionName": "write",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\"),@Override",
      "functionDoc": ""
    }
  }
}