{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "toJson",
  "functionId": "toJson___src-Object__typeOfSrc-Type__writer-JsonWriter",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n\n@throws JsonIOException if there was a problem writing to the writer\n",
  "functionStartLine": 657,
  "functionEndLine": 674,
  "numCommitsSeen": 184,
  "timeTaken": 3595,
  "changeHistory": [
    "7e760143fdc8b689daeebdee33ad6ea7d0a62a56",
    "47a36fd0952d8b9a884ad7b2948a93011b4d667e",
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
    "10db917e9380ca4d741e06152fd1ee506666c1c3",
    "747e3c3051153779954e49b7dbc475daa678e1f4"
  ],
  "changeHistoryShort": {
    "7e760143fdc8b689daeebdee33ad6ea7d0a62a56": "Ybodychange",
    "47a36fd0952d8b9a884ad7b2948a93011b4d667e": "Yannotationchange",
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": "Ybodychange",
    "10db917e9380ca4d741e06152fd1ee506666c1c3": "Ymultichange(Yexceptionschange,Ydocchange)",
    "747e3c3051153779954e49b7dbc475daa678e1f4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7e760143fdc8b689daeebdee33ad6ea7d0a62a56": {
      "type": "Ybodychange",
      "commitMessage": "Smash together MiniGson and Gson. This changes Gson to be the MiniGson rather than delegating to the MiniGson. It means that the MiniGson objects passed into streaming type adapters are now fully-capable \u0027Gson\u0027 objects. \n\nThe most notable impact of this change is that it adds several new public APIs:\n - The TypeAdapter abstract class\n - The TypeAdapter.Factory interface\n - Four new methods on GsonBuilder to register streaming TypeAdapters (via Factory, via Class, via TypeToken, and as a type hierarchy)\n - Three new methods on Gson to lookup streaming TypeAdapters (by type, by class, and to get the next type adapter) \n\nStill outstanding:\n - Write beautiful prose to document the new APIs above\n - Change GsonBuilder\u0027s precedence so that both old and new-style type adapters are registered in one lot\n",
      "commitDate": "11/20/11, 7:23 AM",
      "commitName": "7e760143fdc8b689daeebdee33ad6ea7d0a62a56",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "11/13/11, 12:04 PM",
      "commitNameOld": "a92cf394e827089f8a10853ca5d5f0da6c23654c",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n    TypeAdapter\u003c?\u003e adapter \u003d getAdapter(TypeToken.get(typeOfSrc));\n    boolean oldLenient \u003d writer.isLenient();\n    writer.setLenient(true);\n    boolean oldHtmlSafe \u003d writer.isHtmlSafe();\n    writer.setHtmlSafe(htmlSafe);\n    boolean oldSerializeNulls \u003d writer.getSerializeNulls();\n    writer.setSerializeNulls(serializeNulls);\n    try {\n        ((TypeAdapter\u003cObject\u003e) adapter).write(writer, src);\n    } catch (IOException e) {\n        throw new JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 584,
      "functionName": "toJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n\n@throws JsonIOException if there was a problem writing to the writer\n",
      "diff": "@@ -1,19 +1,19 @@\n @SuppressWarnings(\"unchecked\")\n public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n-    TypeAdapter\u003c?\u003e adapter \u003d miniGson.getAdapter(TypeToken.get(typeOfSrc));\n+    TypeAdapter\u003c?\u003e adapter \u003d getAdapter(TypeToken.get(typeOfSrc));\n     boolean oldLenient \u003d writer.isLenient();\n     writer.setLenient(true);\n     boolean oldHtmlSafe \u003d writer.isHtmlSafe();\n     writer.setHtmlSafe(htmlSafe);\n     boolean oldSerializeNulls \u003d writer.getSerializeNulls();\n     writer.setSerializeNulls(serializeNulls);\n     try {\n         ((TypeAdapter\u003cObject\u003e) adapter).write(writer, src);\n     } catch (IOException e) {\n         throw new JsonIOException(e);\n     } finally {\n         writer.setLenient(oldLenient);\n         writer.setHtmlSafe(oldHtmlSafe);\n         writer.setSerializeNulls(oldSerializeNulls);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "47a36fd0952d8b9a884ad7b2948a93011b4d667e": {
      "type": "Yannotationchange",
      "commitMessage": "Fixed Eclipse warnings\n",
      "commitDate": "9/30/11, 10:08 AM",
      "commitName": "47a36fd0952d8b9a884ad7b2948a93011b4d667e",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "9/30/11, 12:24 AM",
      "commitNameOld": "cf15565243dc20e2b9fb27dcfcd65566fed261c7",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.41,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n    TypeAdapter\u003c?\u003e adapter \u003d miniGson.getAdapter(TypeToken.get(typeOfSrc));\n    boolean oldLenient \u003d writer.isLenient();\n    writer.setLenient(true);\n    boolean oldHtmlSafe \u003d writer.isHtmlSafe();\n    writer.setHtmlSafe(htmlSafe);\n    boolean oldSerializeNulls \u003d writer.getSerializeNulls();\n    writer.setSerializeNulls(serializeNulls);\n    try {\n        ((TypeAdapter\u003cObject\u003e) adapter).write(writer, src);\n    } catch (IOException e) {\n        throw new JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 504,
      "functionName": "toJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n\n@throws JsonIOException if there was a problem writing to the writer\n",
      "diff": "@@ -1,18 +1,19 @@\n+@SuppressWarnings(\"unchecked\")\n public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n     TypeAdapter\u003c?\u003e adapter \u003d miniGson.getAdapter(TypeToken.get(typeOfSrc));\n     boolean oldLenient \u003d writer.isLenient();\n     writer.setLenient(true);\n     boolean oldHtmlSafe \u003d writer.isHtmlSafe();\n     writer.setHtmlSafe(htmlSafe);\n     boolean oldSerializeNulls \u003d writer.getSerializeNulls();\n     writer.setSerializeNulls(serializeNulls);\n     try {\n         ((TypeAdapter\u003cObject\u003e) adapter).write(writer, src);\n     } catch (IOException e) {\n         throw new JsonIOException(e);\n     } finally {\n         writer.setLenient(oldLenient);\n         writer.setHtmlSafe(oldHtmlSafe);\n         writer.setSerializeNulls(oldSerializeNulls);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@SuppressWarnings(\"unchecked\")"
      }
    },
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": {
      "type": "Ybodychange",
      "commitMessage": "Adopt JsonElementWriter in GSON.\nAdd setSerializeNulls() to JsonWriter, so nulls can be skipped from serialization. This does not yet impact JsonElementWriter.\n\nOne change in behavior: if the only value is skipped, we now emit \"null\" rather than \"\".\n",
      "commitDate": "9/30/11, 12:08 AM",
      "commitName": "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/28/11, 12:14 PM",
      "commitNameOld": "46e65a77c5856d21f2d5e7c90306dbbd894da57e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n    TypeAdapter\u003c?\u003e adapter \u003d miniGson.getAdapter(TypeToken.get(typeOfSrc));\n    boolean oldLenient \u003d writer.isLenient();\n    writer.setLenient(true);\n    boolean oldHtmlSafe \u003d writer.isHtmlSafe();\n    writer.setHtmlSafe(htmlSafe);\n    boolean oldSerializeNulls \u003d writer.getSerializeNulls();\n    writer.setSerializeNulls(serializeNulls);\n    try {\n        ((TypeAdapter\u003cObject\u003e) adapter).write(writer, src);\n    } catch (IOException e) {\n        throw new JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 502,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n\n@throws JsonIOException if there was a problem writing to the writer\n",
      "diff": "@@ -1,3 +1,18 @@\n public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n-    toJson(toJsonTree(src, typeOfSrc), writer);\n+    TypeAdapter\u003c?\u003e adapter \u003d miniGson.getAdapter(TypeToken.get(typeOfSrc));\n+    boolean oldLenient \u003d writer.isLenient();\n+    writer.setLenient(true);\n+    boolean oldHtmlSafe \u003d writer.isHtmlSafe();\n+    writer.setHtmlSafe(htmlSafe);\n+    boolean oldSerializeNulls \u003d writer.getSerializeNulls();\n+    writer.setSerializeNulls(serializeNulls);\n+    try {\n+        ((TypeAdapter\u003cObject\u003e) adapter).write(writer, src);\n+    } catch (IOException e) {\n+        throw new JsonIOException(e);\n+    } finally {\n+        writer.setLenient(oldLenient);\n+        writer.setHtmlSafe(oldHtmlSafe);\n+        writer.setSerializeNulls(oldSerializeNulls);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10db917e9380ca4d741e06152fd1ee506666c1c3": {
      "type": "Ymultichange(Yexceptionschange,Ydocchange)",
      "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
      "commitDate": "11/3/10, 12:46 PM",
      "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n    toJson(toJsonTree(src, typeOfSrc), writer);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 327,
          "functionName": "toJson",
          "functionAnnotation": "",
          "functionDoc": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n\n@throws JsonIOException if there was a problem writing to the writer\n",
          "diff": "@@ -1,3 +1,3 @@\n-public void toJson(Object src, Type typeOfSrc, JsonWriter writer) {\n+public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n     toJson(toJsonTree(src, typeOfSrc), writer);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[JsonIOException]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n    toJson(toJsonTree(src, typeOfSrc), writer);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 327,
          "functionName": "toJson",
          "functionAnnotation": "",
          "functionDoc": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n\n@throws JsonIOException if there was a problem writing to the writer\n",
          "diff": "@@ -1,3 +1,3 @@\n-public void toJson(Object src, Type typeOfSrc, JsonWriter writer) {\n+public void toJson(Object src, Type typeOfSrc, JsonWriter writer) throws JsonIOException {\n     toJson(toJsonTree(src, typeOfSrc), writer);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n",
            "newValue": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n\n@throws JsonIOException if there was a problem writing to the writer\n"
          }
        }
      ]
    },
    "747e3c3051153779954e49b7dbc475daa678e1f4": {
      "type": "Yintroduced",
      "commitMessage": "Support mixed streaming and databinding with new APIs.\n",
      "commitDate": "9/1/10, 5:15 PM",
      "commitName": "747e3c3051153779954e49b7dbc475daa678e1f4",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,3 @@\n+public void toJson(Object src, Type typeOfSrc, JsonWriter writer) {\n+    toJson(toJsonTree(src, typeOfSrc), writer);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void toJson(Object src, Type typeOfSrc, JsonWriter writer) {\n    toJson(toJsonTree(src, typeOfSrc), writer);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 327,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "Writes the JSON representation of {@code src} of type {@code typeOfSrc} to\n{@code writer}.\n"
    }
  }
}