{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonWriter.java",
  "functionName": "setLenient",
  "functionId": "setLenient___lenient-boolean",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
  "functionAnnotation": "",
  "functionDoc": "Configure this writer to relax its syntax rules. By default, this writer\nonly emits well-formed JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc7159.txt\"\u003eRFC 7159\u003c/a\u003e. Setting the writer\nto lenient permits the following:\n\u003cul\u003e\n  \u003cli\u003eTop-level values of any type. With strict writing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n\u003c/ul\u003e\n",
  "functionStartLine": 234,
  "functionEndLine": 236,
  "numCommitsSeen": 17,
  "timeTaken": 694,
  "changeHistory": [
    "c8627c8ab831dec86eeb52fc02600b22c81ba858",
    "d26c8189182fa96691cc8e0d0f312469ee0627bb",
    "486820f51521d0348160a18b9ba0326f78dcf518"
  ],
  "changeHistoryShort": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": "Ydocchange",
    "d26c8189182fa96691cc8e0d0f312469ee0627bb": "Ymodifierchange",
    "486820f51521d0348160a18b9ba0326f78dcf518": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": {
      "type": "Ydocchange",
      "commitMessage": "Update reader and writer for RFC 7159.\n",
      "commitDate": "1/18/16, 12:07 PM",
      "commitName": "c8627c8ab831dec86eeb52fc02600b22c81ba858",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "9/26/15, 6:10 PM",
      "commitNameOld": "1e9004403c619729ad1c49f070ab61427bd462c5",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 113.79,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void setLenient(boolean lenient) {\n    this.lenient \u003d lenient;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 234,
      "functionName": "setLenient",
      "functionAnnotation": "",
      "functionDoc": "Configure this writer to relax its syntax rules. By default, this writer\nonly emits well-formed JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc7159.txt\"\u003eRFC 7159\u003c/a\u003e. Setting the writer\nto lenient permits the following:\n\u003cul\u003e\n  \u003cli\u003eTop-level values of any type. With strict writing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n\u003c/ul\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Configure this writer to relax its syntax rules. By default, this writer\nonly emits well-formed JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the writer\nto lenient permits the following:\n\u003cul\u003e\n  \u003cli\u003eTop-level values of any type. With strict writing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n\u003c/ul\u003e\n",
        "newValue": "Configure this writer to relax its syntax rules. By default, this writer\nonly emits well-formed JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc7159.txt\"\u003eRFC 7159\u003c/a\u003e. Setting the writer\nto lenient permits the following:\n\u003cul\u003e\n  \u003cli\u003eTop-level values of any type. With strict writing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n\u003c/ul\u003e\n"
      }
    },
    "d26c8189182fa96691cc8e0d0f312469ee0627bb": {
      "type": "Ymodifierchange",
      "commitMessage": "New streaming writer writes to DOMs\n",
      "commitDate": "9/29/11, 11:26 PM",
      "commitName": "d26c8189182fa96691cc8e0d0f312469ee0627bb",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "7/12/11, 9:05 AM",
      "commitNameOld": "d3a4b48ad92ce5e5a45a7046e737984608c22cc6",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 79.6,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void setLenient(boolean lenient) {\n    this.lenient \u003d lenient;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 190,
      "functionName": "setLenient",
      "functionAnnotation": "",
      "functionDoc": "Configure this writer to relax its syntax rules. By default, this writer\nonly emits well-formed JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the writer\nto lenient permits the following:\n\u003cul\u003e\n  \u003cli\u003eTop-level values of any type. With strict writing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n\u003c/ul\u003e\n",
      "diff": "@@ -1,3 +1,3 @@\n-public void setLenient(boolean lenient) {\n+public final void setLenient(boolean lenient) {\n     this.lenient \u003d lenient;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, final]"
      }
    },
    "486820f51521d0348160a18b9ba0326f78dcf518": {
      "type": "Yintroduced",
      "commitMessage": "Fix some test problems.\n\nJsonWriter was using suboptimal escape characters for newlines etc: unicode escapes rather than \\x escapes.\n\nJsonObjectTest was banning empty and whitespace-only keys. These values are permitted as of r585.\n",
      "commitDate": "8/28/10, 1:18 AM",
      "commitName": "486820f51521d0348160a18b9ba0326f78dcf518",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,3 @@\n+public void setLenient(boolean lenient) {\n+    this.lenient \u003d lenient;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void setLenient(boolean lenient) {\n    this.lenient \u003d lenient;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 187,
      "functionName": "setLenient",
      "functionAnnotation": "",
      "functionDoc": "Configure this writer to relax its syntax rules. By default, this writer\nonly emits well-formed JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the writer\nto lenient permits the following:\n\u003cul\u003e\n  \u003cli\u003eTop-level values of any type. With strict writing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n\u003c/ul\u003e\n"
    }
  }
}