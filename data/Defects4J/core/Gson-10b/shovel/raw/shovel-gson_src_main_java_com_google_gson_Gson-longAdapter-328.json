{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "longAdapter",
  "functionId": "longAdapter___longSerializationPolicy-LongSerializationPolicy",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 328,
  "functionEndLine": 348,
  "numCommitsSeen": 184,
  "timeTaken": 3632,
  "changeHistory": [
    "cc54e4dbdd16c6d269eb6686f472999445cba22b",
    "f602bce9f536df971b8bfa01b7ffb111e2896c97",
    "bc68d7293c437fd2e5bbcd4bffff4414b03b74a6",
    "0e02cbb33ec43b301b6835a99db020a2df3c6f51",
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165",
    "9db0c5321710f1cebb6ae297b2d7c35ef15b56ce",
    "aa067056c3f0846f84ab94c771f3f756a9b3e40c"
  ],
  "changeHistoryShort": {
    "cc54e4dbdd16c6d269eb6686f472999445cba22b": "Ymodifierchange",
    "f602bce9f536df971b8bfa01b7ffb111e2896c97": "Ybodychange",
    "bc68d7293c437fd2e5bbcd4bffff4414b03b74a6": "Ybodychange",
    "0e02cbb33ec43b301b6835a99db020a2df3c6f51": "Ybodychange",
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165": "Ybodychange",
    "9db0c5321710f1cebb6ae297b2d7c35ef15b56ce": "Ymultichange(Yreturntypechange,Ybodychange)",
    "aa067056c3f0846f84ab94c771f3f756a9b3e40c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cc54e4dbdd16c6d269eb6686f472999445cba22b": {
      "type": "Ymodifierchange",
      "commitMessage": "made methods static\n",
      "commitDate": "11/5/15, 10:46 AM",
      "commitName": "cc54e4dbdd16c6d269eb6686f472999445cba22b",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "11/5/15, 10:45 AM",
      "commitNameOld": "7821b73202a878bea091d4bc97195fdd87d76382",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private static TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cNumber\u003e() {\n\n        @Override\n        public Number read(JsonReader in) throws IOException {\n            if (in.peek() \u003d\u003d JsonToken.NULL) {\n                in.nextNull();\n                return null;\n            }\n            return in.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter out, Number value) throws IOException {\n            if (value \u003d\u003d null) {\n                out.nullValue();\n                return;\n            }\n            out.value(value.toString());\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 314,
      "functionName": "longAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n-private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n+private static TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n     if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n         return TypeAdapters.LONG;\n     }\n     return new TypeAdapter\u003cNumber\u003e() {\n \n         @Override\n         public Number read(JsonReader in) throws IOException {\n             if (in.peek() \u003d\u003d JsonToken.NULL) {\n                 in.nextNull();\n                 return null;\n             }\n             return in.nextLong();\n         }\n \n         @Override\n         public void write(JsonWriter out, Number value) throws IOException {\n             if (value \u003d\u003d null) {\n                 out.nullValue();\n                 return;\n             }\n             out.value(value.toString());\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "f602bce9f536df971b8bfa01b7ffb111e2896c97": {
      "type": "Ybodychange",
      "commitMessage": "Nice documentation for TypeAdapter.\n",
      "commitDate": "12/3/11, 11:46 AM",
      "commitName": "f602bce9f536df971b8bfa01b7ffb111e2896c97",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "12/2/11, 6:37 PM",
      "commitNameOld": "8ee2c24f616b1a3c133611091ef352caceb065aa",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cNumber\u003e() {\n\n        @Override\n        public Number read(JsonReader in) throws IOException {\n            if (in.peek() \u003d\u003d JsonToken.NULL) {\n                in.nextNull();\n                return null;\n            }\n            return in.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter out, Number value) throws IOException {\n            if (value \u003d\u003d null) {\n                out.nullValue();\n                return;\n            }\n            out.value(value.toString());\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 305,
      "functionName": "longAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n     if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n         return TypeAdapters.LONG;\n     }\n     return new TypeAdapter\u003cNumber\u003e() {\n \n         @Override\n-        public Number read(JsonReader reader) throws IOException {\n-            if (reader.peek() \u003d\u003d JsonToken.NULL) {\n-                reader.nextNull();\n+        public Number read(JsonReader in) throws IOException {\n+            if (in.peek() \u003d\u003d JsonToken.NULL) {\n+                in.nextNull();\n                 return null;\n             }\n-            return reader.nextLong();\n+            return in.nextLong();\n         }\n \n         @Override\n-        public void write(JsonWriter writer, Number value) throws IOException {\n+        public void write(JsonWriter out, Number value) throws IOException {\n             if (value \u003d\u003d null) {\n-                writer.nullValue();\n+                out.nullValue();\n                 return;\n             }\n-            writer.value(value.toString());\n+            out.value(value.toString());\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc68d7293c437fd2e5bbcd4bffff4414b03b74a6": {
      "type": "Ybodychange",
      "commitMessage": "Comment clean up.\n",
      "commitDate": "11/23/11, 5:39 AM",
      "commitName": "bc68d7293c437fd2e5bbcd4bffff4414b03b74a6",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "11/22/11, 10:16 PM",
      "commitNameOld": "1794182a560588973c6ec131e9c24bd39508433d",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cNumber\u003e() {\n\n        @Override\n        public Number read(JsonReader reader) throws IOException {\n            if (reader.peek() \u003d\u003d JsonToken.NULL) {\n                reader.nextNull();\n                return null;\n            }\n            return reader.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter writer, Number value) throws IOException {\n            if (value \u003d\u003d null) {\n                writer.nullValue();\n                return;\n            }\n            writer.value(value.toString());\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 302,
      "functionName": "longAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "0e02cbb33ec43b301b6835a99db020a2df3c6f51": {
      "type": "Ybodychange",
      "commitMessage": "Nulls are here to stay. Sigh.\n",
      "commitDate": "10/13/11, 8:20 PM",
      "commitName": "0e02cbb33ec43b301b6835a99db020a2df3c6f51",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "10/2/11, 9:59 AM",
      "commitNameOld": "65df3b97ba7352fd1d6afc925b9c30f5067a3f53",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 11.43,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cNumber\u003e() {\n\n        @Override\n        public Number read(JsonReader reader) throws IOException {\n            if (reader.peek() \u003d\u003d JsonToken.NULL) {\n                reader.nextNull();\n                return null;\n            }\n            return reader.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter writer, Number value) throws IOException {\n            if (value \u003d\u003d null) {\n                writer.nullValue();\n                return;\n            }\n            writer.value(value.toString());\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 334,
      "functionName": "longAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "25c6ae177b1ca56db7f3c29eb574bdd032a06165": {
      "type": "Ybodychange",
      "commitMessage": "Down to 22 failing tests.\n\nConsolidated all of the different code paths that we use to construct instances. We now have an ObjectConstructor class that knows what type it constructs; this means that we don\u0027t need to ever do reflection to lookup a constructor at construction time.\n\nCleaned up some buggy type adapters, particularly around handling of null.\n\nRemoved dead code for object graph navigation.\n\nMoved some classes into \u0027internal\u0027 so they are visible to the \u0027bind\u0027 subpackage.\n\nTurned some TypeAdapterFactory/TypeAdapter pairs inside out so that the TypeAdapter is now the inner class. This is necessary so that the factories can take parameters.\n\nAdded an API to request the \u0027next\u0027 type adapter for a type. This allows type adapters to compose other type adapters. We\u0027re using this in two places:\n - where the user has excluded a type from serialization but not deserialization, we need to use the \"default\" deserialization but interpose null on serialization. We create a type adapter that delegates for one and returns null for the other.\n - similarly when a DOM type serializer is registered but no deserializer, or vice versa.\nThis is the biggest change to the MiniGson core.\n\nFor backwards compatibility, return null for the empty string.\n\nSimplify JsonSerializationContext/JsonDeserializationContext to simply call through to GSON. SerializeDefault is currently unsupported.\n\nMore useful error messages when calling getAsBoolean on a JsonNull.\n\nRemove currently unused MemoryRefStack. We might need this back again, though wiring it back in will be much more difficult because we don\u0027t interject ourselves between the users\u0027 various type adapters.\n",
      "commitDate": "9/11/11, 12:04 AM",
      "commitName": "25c6ae177b1ca56db7f3c29eb574bdd032a06165",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/9/11, 1:04 AM",
      "commitNameOld": "d22e11b1846d43efef5179851a131f6ebb9cf1a9",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cNumber\u003e() {\n\n        @Override\n        public Number read(JsonReader reader) throws IOException {\n            if (reader.peek() \u003d\u003d JsonToken.NULL) {\n                reader.nextNull();\n                return null;\n            }\n            return reader.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter writer, Number value) throws IOException {\n            if (value \u003d\u003d null) {\n                writer.nullValue();\n                return;\n            }\n            writer.value(value.toString());\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 316,
      "functionName": "longAdapter",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,25 @@\n private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n     if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n         return TypeAdapters.LONG;\n     }\n     return new TypeAdapter\u003cNumber\u003e() {\n \n         @Override\n         public Number read(JsonReader reader) throws IOException {\n+            if (reader.peek() \u003d\u003d JsonToken.NULL) {\n+                reader.nextNull();\n+                return null;\n+            }\n             return reader.nextLong();\n         }\n \n         @Override\n         public void write(JsonWriter writer, Number value) throws IOException {\n+            if (value \u003d\u003d null) {\n+                writer.nullValue();\n+                return;\n+            }\n             writer.value(value.toString());\n         }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9db0c5321710f1cebb6ae297b2d7c35ef15b56ce": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Adapt bytes\n",
      "commitDate": "9/8/11, 9:39 PM",
      "commitName": "9db0c5321710f1cebb6ae297b2d7c35ef15b56ce",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Adapt bytes\n",
          "commitDate": "9/8/11, 9:39 PM",
          "commitName": "9db0c5321710f1cebb6ae297b2d7c35ef15b56ce",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/8/11, 9:02 PM",
          "commitNameOld": "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cNumber\u003e() {\n\n        @Override\n        public Number read(JsonReader reader) throws IOException {\n            return reader.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter writer, Number value) throws IOException {\n            writer.value(value.toString());\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 301,
          "functionName": "longAdapter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,17 @@\n-private TypeAdapter\u003cLong\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n+private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n     if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n         return TypeAdapters.LONG;\n     }\n-    return new TypeAdapter\u003cLong\u003e() {\n+    return new TypeAdapter\u003cNumber\u003e() {\n \n         @Override\n-        public Long read(JsonReader reader) throws IOException {\n+        public Number read(JsonReader reader) throws IOException {\n             return reader.nextLong();\n         }\n \n         @Override\n-        public void write(JsonWriter writer, Long value) throws IOException {\n+        public void write(JsonWriter writer, Number value) throws IOException {\n             writer.value(value.toString());\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "TypeAdapter\u003cLong\u003e",
            "newValue": "TypeAdapter\u003cNumber\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Adapt bytes\n",
          "commitDate": "9/8/11, 9:39 PM",
          "commitName": "9db0c5321710f1cebb6ae297b2d7c35ef15b56ce",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/8/11, 9:02 PM",
          "commitNameOld": "ea9c0236c79134cd2ecdd1b6d244a584e7fc6c22",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cNumber\u003e() {\n\n        @Override\n        public Number read(JsonReader reader) throws IOException {\n            return reader.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter writer, Number value) throws IOException {\n            writer.value(value.toString());\n        }\n    };\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 301,
          "functionName": "longAdapter",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,17 @@\n-private TypeAdapter\u003cLong\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n+private TypeAdapter\u003cNumber\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n     if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n         return TypeAdapters.LONG;\n     }\n-    return new TypeAdapter\u003cLong\u003e() {\n+    return new TypeAdapter\u003cNumber\u003e() {\n \n         @Override\n-        public Long read(JsonReader reader) throws IOException {\n+        public Number read(JsonReader reader) throws IOException {\n             return reader.nextLong();\n         }\n \n         @Override\n-        public void write(JsonWriter writer, Long value) throws IOException {\n+        public void write(JsonWriter writer, Number value) throws IOException {\n             writer.value(value.toString());\n         }\n     };\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "aa067056c3f0846f84ab94c771f3f756a9b3e40c": {
      "type": "Yintroduced",
      "commitMessage": "Restore support for long serialization policy.\n",
      "commitDate": "8/4/11, 3:57 PM",
      "commitName": "aa067056c3f0846f84ab94c771f3f756a9b3e40c",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,17 @@\n+private TypeAdapter\u003cLong\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n+    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n+        return TypeAdapters.LONG;\n+    }\n+    return new TypeAdapter\u003cLong\u003e() {\n+\n+        @Override\n+        public Long read(JsonReader reader) throws IOException {\n+            return reader.nextLong();\n+        }\n+\n+        @Override\n+        public void write(JsonWriter writer, Long value) throws IOException {\n+            writer.value(value.toString());\n+        }\n+    };\n+}\n\\ No newline at end of file\n",
      "actualSource": "private TypeAdapter\u003cLong\u003e longAdapter(LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy \u003d\u003d LongSerializationPolicy.DEFAULT) {\n        return TypeAdapters.LONG;\n    }\n    return new TypeAdapter\u003cLong\u003e() {\n\n        @Override\n        public Long read(JsonReader reader) throws IOException {\n            return reader.nextLong();\n        }\n\n        @Override\n        public void write(JsonWriter writer, Long value) throws IOException {\n            writer.value(value.toString());\n        }\n    };\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 228,
      "functionName": "longAdapter",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}