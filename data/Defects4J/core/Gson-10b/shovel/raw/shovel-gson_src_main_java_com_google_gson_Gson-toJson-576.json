{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "toJson",
  "functionId": "toJson___src-Object",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "",
  "functionDoc": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n",
  "functionStartLine": 576,
  "functionEndLine": 581,
  "numCommitsSeen": 184,
  "timeTaken": 3757,
  "changeHistory": [
    "e79bcde8bf95a6f19f85f74d9f448c70fae19141",
    "56aa8283505e1813bcd800c3c05dbdacccf22ee7",
    "e37add7836afe3768f1e517eed3ffbf440bff6bb",
    "b634804533ab68697b6f5414e8c93c3613850bf2",
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b"
  ],
  "changeHistoryShort": {
    "e79bcde8bf95a6f19f85f74d9f448c70fae19141": "Ybodychange",
    "56aa8283505e1813bcd800c3c05dbdacccf22ee7": "Ybodychange",
    "e37add7836afe3768f1e517eed3ffbf440bff6bb": "Ybodychange",
    "b634804533ab68697b6f5414e8c93c3613850bf2": "Ybodychange",
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a": "Ydocchange",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e79bcde8bf95a6f19f85f74d9f448c70fae19141": {
      "type": "Ybodychange",
      "commitMessage": "Using JsonNull.INSTANCE instead of JsonNull.createJsonNull() method\n",
      "commitDate": "5/25/11, 9:55 AM",
      "commitName": "e79bcde8bf95a6f19f85f74d9f448c70fae19141",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "5/20/11, 2:50 PM",
      "commitNameOld": "572421b7712bf2f369ec9f529416ddef5235d975",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 4.8,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src) {\n    if (src \u003d\u003d null) {\n        return toJson(JsonNull.INSTANCE);\n    }\n    return toJson(src, src.getClass());\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 237,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n",
      "diff": "@@ -1,6 +1,6 @@\n public String toJson(Object src) {\n     if (src \u003d\u003d null) {\n-        return toJson(JsonNull.createJsonNull());\n+        return toJson(JsonNull.INSTANCE);\n     }\n     return toJson(src, src.getClass());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "56aa8283505e1813bcd800c3c05dbdacccf22ee7": {
      "type": "Ybodychange",
      "commitMessage": "Minor clean-up in Gson class.\n",
      "commitDate": "1/22/11, 2:43 PM",
      "commitName": "56aa8283505e1813bcd800c3c05dbdacccf22ee7",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "1/22/11, 2:15 PM",
      "commitNameOld": "b883f8f4aaa7ae906b4298cc43223060495fc6ff",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src) {\n    if (src \u003d\u003d null) {\n        return toJson(JsonNull.createJsonNull());\n    }\n    return toJson(src, src.getClass());\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 239,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n",
      "diff": "@@ -1,6 +1,6 @@\n public String toJson(Object src) {\n     if (src \u003d\u003d null) {\n-        return serializeNulls ? NULL_STRING : \"\";\n+        return toJson(JsonNull.createJsonNull());\n     }\n     return toJson(src, src.getClass());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e37add7836afe3768f1e517eed3ffbf440bff6bb": {
      "type": "Ybodychange",
      "commitMessage": "Implemented some code review comments from r482\n",
      "commitDate": "10/8/09, 6:35 PM",
      "commitName": "e37add7836afe3768f1e517eed3ffbf440bff6bb",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/8/09, 12:28 PM",
      "commitNameOld": "b634804533ab68697b6f5414e8c93c3613850bf2",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src) {\n    if (src \u003d\u003d null) {\n        return serializeNulls ? NULL_STRING : \"\";\n    }\n    return toJson(src, src.getClass());\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 246,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n",
      "diff": "@@ -1,6 +1,6 @@\n public String toJson(Object src) {\n     if (src \u003d\u003d null) {\n         return serializeNulls ? NULL_STRING : \"\";\n     }\n-    return toJson(src, src.getClass(), false);\n+    return toJson(src, src.getClass());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b634804533ab68697b6f5414e8c93c3613850bf2": {
      "type": "Ybodychange",
      "commitMessage": "Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. \nCreated some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.\n",
      "commitDate": "10/8/09, 12:28 PM",
      "commitName": "b634804533ab68697b6f5414e8c93c3613850bf2",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/7/09, 2:23 AM",
      "commitNameOld": "839b0c2f94746b89c08212b9d199a174ae2c407b",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src) {\n    if (src \u003d\u003d null) {\n        return serializeNulls ? NULL_STRING : \"\";\n    }\n    return toJson(src, src.getClass(), false);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 250,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n",
      "diff": "@@ -1,6 +1,6 @@\n public String toJson(Object src) {\n     if (src \u003d\u003d null) {\n         return serializeNulls ? NULL_STRING : \"\";\n     }\n-    return toJson(src, src.getClass());\n+    return toJson(src, src.getClass(), false);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a": {
      "type": "Ydocchange",
      "commitMessage": "Fixed issue 52 by switching Gson.toJson methods to use Appendable instead of java.io.Writer\n",
      "commitDate": "11/26/08, 11:13 AM",
      "commitName": "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "11/14/08, 9:11 PM",
      "commitNameOld": "cf2a457af7b0422e7728e0d55a4e794048af5a6b",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 11.58,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public String toJson(Object src) {\n    if (src \u003d\u003d null) {\n        return serializeNulls ? NULL_STRING : \"\";\n    }\n    return toJson(src, src.getClass());\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 198,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Writer)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n",
        "newValue": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n"
      }
    },
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": {
      "type": "Yintroduced",
      "commitMessage": "moved gson as a project under trunk\n",
      "commitDate": "8/31/08, 8:13 PM",
      "commitName": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,6 @@\n+public String toJson(Object src) {\n+    if (src \u003d\u003d null) {\n+        return serializeNulls ? NULL_STRING : \"\";\n+    }\n+    return toJson(src, src.getClass());\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String toJson(Object src) {\n    if (src \u003d\u003d null) {\n        return serializeNulls ? NULL_STRING : \"\";\n    }\n    return toJson(src, src.getClass());\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 204,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object into its equivalent Json representation.\nThis method should be used when the specified object is not a generic type. This method uses\n{@link Class#getClass()} to get the type for the specified object, but the\n{@code getClass()} loses the generic type information because of the Type Erasure feature\nof Java. Note that this method works fine if the any of the object fields are of generic type,\njust the object itself should not be of a generic type. If the object is of generic type, use\n{@link #toJson(Object, Type)} instead. If you want to write out the object to a\n{@link Writer}, use {@link #toJson(Object, Writer)} instead.\n\n@param src the object for which Json representation is to be created setting for Gson\n@return Json representation of {@code src}.\n"
    }
  }
}