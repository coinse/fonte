{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "toJson",
  "functionId": "toJson___src-Object__typeOfSrc-Type__writer-Appendable",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "",
  "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@throws JsonIOException if there was a problem writing to the writer\n@since 1.2\n",
  "functionStartLine": 642,
  "functionEndLine": 649,
  "numCommitsSeen": 190,
  "timeTaken": 4195,
  "changeHistory": [
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
    "10db917e9380ca4d741e06152fd1ee506666c1c3",
    "e37add7836afe3768f1e517eed3ffbf440bff6bb",
    "b634804533ab68697b6f5414e8c93c3613850bf2",
    "b7cbfc5c347869a271270ab98b8238428813517f",
    "b44bbbf5e70d2589e3293be1c91c63dba6b5bbfb",
    "b2b2e5dc0a595a597ed64968f48c877f4f526277",
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
    "9dfa454f6da6e88b51dba7840881feb874dbbdef",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b"
  ],
  "changeHistoryShort": {
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": "Ybodychange",
    "10db917e9380ca4d741e06152fd1ee506666c1c3": "Ymultichange(Yexceptionschange,Ydocchange)",
    "e37add7836afe3768f1e517eed3ffbf440bff6bb": "Ybodychange",
    "b634804533ab68697b6f5414e8c93c3613850bf2": "Ybodychange",
    "b7cbfc5c347869a271270ab98b8238428813517f": "Ybodychange",
    "b44bbbf5e70d2589e3293be1c91c63dba6b5bbfb": "Ybodychange",
    "b2b2e5dc0a595a597ed64968f48c877f4f526277": "Ybodychange",
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "9dfa454f6da6e88b51dba7840881feb874dbbdef": "Ybodychange",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb7f0b6bb01b0e98e32229cb528772a66a9d6075": {
      "type": "Ybodychange",
      "commitMessage": "Adopt JsonElementWriter in GSON.\nAdd setSerializeNulls() to JsonWriter, so nulls can be skipped from serialization. This does not yet impact JsonElementWriter.\n\nOne change in behavior: if the only value is skipped, we now emit \"null\" rather than \"\".\n",
      "commitDate": "9/30/11, 12:08 AM",
      "commitName": "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/28/11, 12:14 PM",
      "commitNameOld": "46e65a77c5856d21f2d5e7c90306dbbd894da57e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\n    try {\n        JsonWriter jsonWriter \u003d newJsonWriter(Streams.writerForAppendable(writer));\n        toJson(src, typeOfSrc, jsonWriter);\n    } catch (IOException e) {\n        throw new JsonIOException(e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 488,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@throws JsonIOException if there was a problem writing to the writer\n@since 1.2\n",
      "diff": "@@ -1,4 +1,8 @@\n public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\n-    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n-    toJson(jsonElement, writer);\n+    try {\n+        JsonWriter jsonWriter \u003d newJsonWriter(Streams.writerForAppendable(writer));\n+        toJson(src, typeOfSrc, jsonWriter);\n+    } catch (IOException e) {\n+        throw new JsonIOException(e);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10db917e9380ca4d741e06152fd1ee506666c1c3": {
      "type": "Ymultichange(Yexceptionschange,Ydocchange)",
      "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
      "commitDate": "11/3/10, 12:46 PM",
      "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\n    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n    toJson(jsonElement, writer);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 317,
          "functionName": "toJson",
          "functionAnnotation": "",
          "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@throws JsonIOException if there was a problem writing to the writer\n@since 1.2\n",
          "diff": "@@ -1,4 +1,4 @@\n-public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n+public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\n     JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n     toJson(jsonElement, writer);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[JsonIOException]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\n    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n    toJson(jsonElement, writer);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 317,
          "functionName": "toJson",
          "functionAnnotation": "",
          "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@throws JsonIOException if there was a problem writing to the writer\n@since 1.2\n",
          "diff": "@@ -1,4 +1,4 @@\n-public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n+public void toJson(Object src, Type typeOfSrc, Appendable writer) throws JsonIOException {\n     JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n     toJson(jsonElement, writer);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
            "newValue": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@throws JsonIOException if there was a problem writing to the writer\n@since 1.2\n"
          }
        }
      ]
    },
    "e37add7836afe3768f1e517eed3ffbf440bff6bb": {
      "type": "Ybodychange",
      "commitMessage": "Implemented some code review comments from r482\n",
      "commitDate": "10/8/09, 6:35 PM",
      "commitName": "e37add7836afe3768f1e517eed3ffbf440bff6bb",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/8/09, 12:28 PM",
      "commitNameOld": "b634804533ab68697b6f5414e8c93c3613850bf2",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n    toJson(jsonElement, writer);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 314,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
      "diff": "@@ -1,3 +1,4 @@\n public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n-    toJson(src, typeOfSrc, writer, true);\n+    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n+    toJson(jsonElement, writer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b634804533ab68697b6f5414e8c93c3613850bf2": {
      "type": "Ybodychange",
      "commitMessage": "Ensured that a base class custom serializer is run when the type is specified explicitly during serialization. For all other situations, ensured that the actual type of the object is taken into consideration while serializing. First a custom handler corresponding to the actual type is looked up, then a custom handler for the specified type. \nCreated some serialization specific tests regarding custom serializers. Revised some tests to use toJsonTree for better asserts instead of string matching.\n",
      "commitDate": "10/8/09, 12:28 PM",
      "commitName": "b634804533ab68697b6f5414e8c93c3613850bf2",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/7/09, 2:23 AM",
      "commitNameOld": "839b0c2f94746b89c08212b9d199a174ae2c407b",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 1.42,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    toJson(src, typeOfSrc, writer, true);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 322,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
      "diff": "@@ -1,4 +1,3 @@\n public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n-    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n-    toJson(jsonElement, writer);\n+    toJson(src, typeOfSrc, writer, true);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b7cbfc5c347869a271270ab98b8238428813517f": {
      "type": "Ybodychange",
      "commitMessage": "Fixed Issue 141 by adding new APIs for writing out JSON string representation for JsonElements.\n",
      "commitDate": "8/7/09, 1:58 PM",
      "commitName": "b7cbfc5c347869a271270ab98b8238428813517f",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "5/19/09, 4:47 PM",
      "commitNameOld": "6d50bcea8711642c90caa6db6b1f13ccd38290c1",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 79.88,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n    toJson(jsonElement, writer);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 317,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
      "diff": "@@ -1,11 +1,4 @@\n public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n-    try {\n-        if (generateNonExecutableJson) {\n-            writer.append(JSON_NON_EXECUTABLE_PREFIX);\n-        }\n-        JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n-        formatter.format(jsonElement, writer, serializeNulls);\n-    } catch (IOException ioe) {\n-        throw new RuntimeException(ioe);\n-    }\n+    JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n+    toJson(jsonElement, writer);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b44bbbf5e70d2589e3293be1c91c63dba6b5bbfb": {
      "type": "Ybodychange",
      "commitMessage": "Added an API method to create a tree of JsonElement from an object.\n",
      "commitDate": "4/3/09, 2:33 PM",
      "commitName": "b44bbbf5e70d2589e3293be1c91c63dba6b5bbfb",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "4/1/09, 12:26 PM",
      "commitNameOld": "5c6d5a0d119481e7ca61b0884c881c6811d7af86",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    try {\n        if (generateNonExecutableJson) {\n            writer.append(JSON_NON_EXECUTABLE_PREFIX);\n        }\n        JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n        formatter.format(jsonElement, writer, serializeNulls);\n    } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 311,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
      "diff": "@@ -1,18 +1,11 @@\n public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n     try {\n-        if (src !\u003d null) {\n-            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n-            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n-            if (generateNonExecutableJson) {\n-                writer.append(JSON_NON_EXECUTABLE_PREFIX);\n-            }\n-            formatter.format(jsonElement, writer, serializeNulls);\n-        } else {\n-            if (serializeNulls) {\n-                writeOutNullString(writer);\n-            }\n+        if (generateNonExecutableJson) {\n+            writer.append(JSON_NON_EXECUTABLE_PREFIX);\n         }\n+        JsonElement jsonElement \u003d toJsonTree(src, typeOfSrc);\n+        formatter.format(jsonElement, writer, serializeNulls);\n     } catch (IOException ioe) {\n         throw new RuntimeException(ioe);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2b2e5dc0a595a597ed64968f48c877f4f526277": {
      "type": "Ybodychange",
      "commitMessage": "Implemented enhancement request from issue 42 by supporting a new GsonBuilder setting generateNonExecutableJson() that prefixes the generated JSON with some special text that makes the output non-executable javascript. Gson now recognizes this special text in the input while parsing the JSON in fromJson and filters it out, if present.\n",
      "commitDate": "3/17/09, 2:15 PM",
      "commitName": "b2b2e5dc0a595a597ed64968f48c877f4f526277",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "2/3/09, 5:56 PM",
      "commitNameOld": "2c7cc620d4975521dc5d1c54ea1c0b2247b4fdad",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 41.8,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    try {\n        if (src !\u003d null) {\n            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n            if (generateNonExecutableJson) {\n                writer.append(JSON_NON_EXECUTABLE_PREFIX);\n            }\n            formatter.format(jsonElement, writer, serializeNulls);\n        } else {\n            if (serializeNulls) {\n                writeOutNullString(writer);\n            }\n        }\n    } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 264,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
      "diff": "@@ -1,15 +1,18 @@\n public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n     try {\n         if (src !\u003d null) {\n             JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n             JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n+            if (generateNonExecutableJson) {\n+                writer.append(JSON_NON_EXECUTABLE_PREFIX);\n+            }\n             formatter.format(jsonElement, writer, serializeNulls);\n         } else {\n             if (serializeNulls) {\n                 writeOutNullString(writer);\n             }\n         }\n     } catch (IOException ioe) {\n         throw new RuntimeException(ioe);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Fixed issue 52 by switching Gson.toJson methods to use Appendable instead of java.io.Writer\n",
      "commitDate": "11/26/08, 11:13 AM",
      "commitName": "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fixed issue 52 by switching Gson.toJson methods to use Appendable instead of java.io.Writer\n",
          "commitDate": "11/26/08, 11:13 AM",
          "commitName": "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/14/08, 9:11 PM",
          "commitNameOld": "cf2a457af7b0422e7728e0d55a4e794048af5a6b",
          "commitAuthorOld": "Joel Leitch",
          "daysBetweenCommits": 11.58,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    try {\n        if (src !\u003d null) {\n            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n            formatter.format(jsonElement, writer, serializeNulls);\n        } else {\n            if (serializeNulls) {\n                writeOutNullString(writer);\n            }\n        }\n    } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 266,
          "functionName": "toJson",
          "functionAnnotation": "",
          "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
          "diff": "@@ -1,11 +1,15 @@\n-public void toJson(Object src, Type typeOfSrc, Writer writer) {\n-    if (src !\u003d null) {\n-        JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n-        JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n-        formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n-    } else {\n-        if (serializeNulls) {\n-            writeOutNullString(writer);\n+public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n+    try {\n+        if (src !\u003d null) {\n+            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n+            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n+            formatter.format(jsonElement, writer, serializeNulls);\n+        } else {\n+            if (serializeNulls) {\n+                writeOutNullString(writer);\n+            }\n         }\n+    } catch (IOException ioe) {\n+        throw new RuntimeException(ioe);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[src-Object, typeOfSrc-Type, writer-Writer]",
            "newValue": "[src-Object, typeOfSrc-Type, writer-Appendable]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed issue 52 by switching Gson.toJson methods to use Appendable instead of java.io.Writer\n",
          "commitDate": "11/26/08, 11:13 AM",
          "commitName": "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/14/08, 9:11 PM",
          "commitNameOld": "cf2a457af7b0422e7728e0d55a4e794048af5a6b",
          "commitAuthorOld": "Joel Leitch",
          "daysBetweenCommits": 11.58,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    try {\n        if (src !\u003d null) {\n            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n            formatter.format(jsonElement, writer, serializeNulls);\n        } else {\n            if (serializeNulls) {\n                writeOutNullString(writer);\n            }\n        }\n    } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 266,
          "functionName": "toJson",
          "functionAnnotation": "",
          "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
          "diff": "@@ -1,11 +1,15 @@\n-public void toJson(Object src, Type typeOfSrc, Writer writer) {\n-    if (src !\u003d null) {\n-        JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n-        JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n-        formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n-    } else {\n-        if (serializeNulls) {\n-            writeOutNullString(writer);\n+public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n+    try {\n+        if (src !\u003d null) {\n+            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n+            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n+            formatter.format(jsonElement, writer, serializeNulls);\n+        } else {\n+            if (serializeNulls) {\n+                writeOutNullString(writer);\n+            }\n         }\n+    } catch (IOException ioe) {\n+        throw new RuntimeException(ioe);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Fixed issue 52 by switching Gson.toJson methods to use Appendable instead of java.io.Writer\n",
          "commitDate": "11/26/08, 11:13 AM",
          "commitName": "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/14/08, 9:11 PM",
          "commitNameOld": "cf2a457af7b0422e7728e0d55a4e794048af5a6b",
          "commitAuthorOld": "Joel Leitch",
          "daysBetweenCommits": 11.58,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n    try {\n        if (src !\u003d null) {\n            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n            formatter.format(jsonElement, writer, serializeNulls);\n        } else {\n            if (serializeNulls) {\n                writeOutNullString(writer);\n            }\n        }\n    } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 266,
          "functionName": "toJson",
          "functionAnnotation": "",
          "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
          "diff": "@@ -1,11 +1,15 @@\n-public void toJson(Object src, Type typeOfSrc, Writer writer) {\n-    if (src !\u003d null) {\n-        JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n-        JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n-        formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n-    } else {\n-        if (serializeNulls) {\n-            writeOutNullString(writer);\n+public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n+    try {\n+        if (src !\u003d null) {\n+            JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n+            JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n+            formatter.format(jsonElement, writer, serializeNulls);\n+        } else {\n+            if (serializeNulls) {\n+                writeOutNullString(writer);\n+            }\n         }\n+    } catch (IOException ioe) {\n+        throw new RuntimeException(ioe);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Writer)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
            "newValue": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n"
          }
        }
      ]
    },
    "9dfa454f6da6e88b51dba7840881feb874dbbdef": {
      "type": "Ybodychange",
      "commitMessage": "Fixed issue 63 where Gson could not operate in a thread-safe manner. Resolved the issue by recreating ObjectNavigatorFactory for each call instead of reusing the same object everywhere. This is needed since ObjectNavigatorFactory had MemoryRefStack that was incorrectly being shared across calls.\n",
      "commitDate": "10/20/08, 1:09 PM",
      "commitName": "9dfa454f6da6e88b51dba7840881feb874dbbdef",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/13/08, 11:40 AM",
      "commitNameOld": "2b9fd47b720f0743d69dfcc48bc04b471e37d240",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 7.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Writer writer) {\n    if (src !\u003d null) {\n        JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n        JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n        formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n    } else {\n        if (serializeNulls) {\n            writeOutNullString(writer);\n        }\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 271,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Writer)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n",
      "diff": "@@ -1,11 +1,11 @@\n public void toJson(Object src, Type typeOfSrc, Writer writer) {\n     if (src !\u003d null) {\n-        JsonSerializationContext context \u003d new JsonSerializationContextDefault(navigatorFactory, serializeNulls, serializers);\n+        JsonSerializationContext context \u003d new JsonSerializationContextDefault(createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n         JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n         formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n     } else {\n         if (serializeNulls) {\n             writeOutNullString(writer);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": {
      "type": "Yintroduced",
      "commitMessage": "moved gson as a project under trunk\n",
      "commitDate": "8/31/08, 8:13 PM",
      "commitName": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,11 @@\n+public void toJson(Object src, Type typeOfSrc, Writer writer) {\n+    if (src !\u003d null) {\n+        JsonSerializationContext context \u003d new JsonSerializationContextDefault(navigatorFactory, serializeNulls, serializers);\n+        JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n+        formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n+    } else {\n+        if (serializeNulls) {\n+            writeOutNullString(writer);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void toJson(Object src, Type typeOfSrc, Writer writer) {\n    if (src !\u003d null) {\n        JsonSerializationContext context \u003d new JsonSerializationContextDefault(navigatorFactory, serializeNulls, serializers);\n        JsonElement jsonElement \u003d context.serialize(src, typeOfSrc);\n        formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n    } else {\n        if (serializeNulls) {\n            writeOutNullString(writer);\n        }\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 268,
      "functionName": "toJson",
      "functionAnnotation": "",
      "functionDoc": "This method serializes the specified object, including those of generic types, into its\nequivalent Json representation. This method must be used if the specified object is a generic\ntype. For non-generic objects, use {@link #toJson(Object, Writer)} instead.\n\n@param src the object for which JSON representation is to be created\n@param typeOfSrc The specific genericized type of src. You can obtain\nthis type by using the {@link com.google.gson.reflect.TypeToken} class. For example,\nto get the type for {@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfSrc \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@param writer Writer to which the Json representation of src needs to be written.\n@since 1.2\n"
    }
  }
}