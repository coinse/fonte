{
  "origin": "codeshovel",
  "repositoryName": "Gson-10b",
  "repositoryPath": "/tmp/Gson-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonWriter.java",
  "functionName": "beforeValue",
  "functionId": "beforeValue",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
  "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
  "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n",
  "functionStartLine": 628,
  "functionEndLine": 658,
  "numCommitsSeen": 32,
  "timeTaken": 1017,
  "changeHistory": [
    "c8627c8ab831dec86eeb52fc02600b22c81ba858",
    "35c13173b0c509fd7088566fcc8f75473d5a3b7c",
    "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48",
    "486820f51521d0348160a18b9ba0326f78dcf518",
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e"
  ],
  "changeHistoryShort": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "35c13173b0c509fd7088566fcc8f75473d5a3b7c": "Ybodychange",
    "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48": "Ymultichange(Ybodychange,Yannotationchange)",
    "486820f51521d0348160a18b9ba0326f78dcf518": "Ybodychange",
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Update reader and writer for RFC 7159.\n",
      "commitDate": "1/18/16, 12:07 PM",
      "commitName": "c8627c8ab831dec86eeb52fc02600b22c81ba858",
      "commitAuthor": "Jake Wharton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Update reader and writer for RFC 7159.\n",
          "commitDate": "1/18/16, 12:07 PM",
          "commitName": "c8627c8ab831dec86eeb52fc02600b22c81ba858",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "9/26/15, 6:10 PM",
          "commitNameOld": "1e9004403c619729ad1c49f070ab61427bd462c5",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 113.79,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue() throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n        case EMPTY_DOCUMENT:\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
          "functionStartLine": 613,
          "functionName": "beforeValue",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n",
          "diff": "@@ -1,29 +1,26 @@\n @SuppressWarnings(\"fallthrough\")\n-private void beforeValue(boolean root) throws IOException {\n+private void beforeValue() throws IOException {\n     switch(peek()) {\n         case NONEMPTY_DOCUMENT:\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n         case EMPTY_DOCUMENT:\n-            if (!lenient \u0026\u0026 !root) {\n-                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n-            }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n         case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n         case NONEMPTY_ARRAY:\n             out.append(\u0027,\u0027);\n             newline();\n             break;\n         case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n         default:\n             throw new IllegalStateException(\"Nesting problem.\");\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-boolean]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Update reader and writer for RFC 7159.\n",
          "commitDate": "1/18/16, 12:07 PM",
          "commitName": "c8627c8ab831dec86eeb52fc02600b22c81ba858",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "9/26/15, 6:10 PM",
          "commitNameOld": "1e9004403c619729ad1c49f070ab61427bd462c5",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 113.79,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue() throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n        case EMPTY_DOCUMENT:\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
          "functionStartLine": 613,
          "functionName": "beforeValue",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n",
          "diff": "@@ -1,29 +1,26 @@\n @SuppressWarnings(\"fallthrough\")\n-private void beforeValue(boolean root) throws IOException {\n+private void beforeValue() throws IOException {\n     switch(peek()) {\n         case NONEMPTY_DOCUMENT:\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n         case EMPTY_DOCUMENT:\n-            if (!lenient \u0026\u0026 !root) {\n-                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n-            }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n         case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n         case NONEMPTY_ARRAY:\n             out.append(\u0027,\u0027);\n             newline();\n             break;\n         case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n         default:\n             throw new IllegalStateException(\"Nesting problem.\");\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Update reader and writer for RFC 7159.\n",
          "commitDate": "1/18/16, 12:07 PM",
          "commitName": "c8627c8ab831dec86eeb52fc02600b22c81ba858",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "9/26/15, 6:10 PM",
          "commitNameOld": "1e9004403c619729ad1c49f070ab61427bd462c5",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 113.79,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue() throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n        case EMPTY_DOCUMENT:\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
          "functionStartLine": 613,
          "functionName": "beforeValue",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n",
          "diff": "@@ -1,29 +1,26 @@\n @SuppressWarnings(\"fallthrough\")\n-private void beforeValue(boolean root) throws IOException {\n+private void beforeValue() throws IOException {\n     switch(peek()) {\n         case NONEMPTY_DOCUMENT:\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n         case EMPTY_DOCUMENT:\n-            if (!lenient \u0026\u0026 !root) {\n-                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n-            }\n             replaceTop(NONEMPTY_DOCUMENT);\n             break;\n         case EMPTY_ARRAY:\n             replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n         case NONEMPTY_ARRAY:\n             out.append(\u0027,\u0027);\n             newline();\n             break;\n         case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(NONEMPTY_OBJECT);\n             break;\n         default:\n             throw new IllegalStateException(\"Nesting problem.\");\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n\n@param root true if the value is a new array or object, the two values\n    permitted as top-level elements.\n",
            "newValue": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n"
          }
        }
      ]
    },
    "35c13173b0c509fd7088566fcc8f75473d5a3b7c": {
      "type": "Ybodychange",
      "commitMessage": "Switch on ints rather than enums in JsonReader.\n\nUsing enums was triggering this Android bug:\nhttp://code.google.com/p/android/issues/detail?id\u003d36349\n",
      "commitDate": "8/14/12, 2:32 PM",
      "commitName": "35c13173b0c509fd7088566fcc8f75473d5a3b7c",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "6/29/12, 7:46 PM",
      "commitNameOld": "1c7aee40f3d0d6f50b3d149e94a2b3b4627ca8a9",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 45.78,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n        case EMPTY_DOCUMENT:\n            if (!lenient \u0026\u0026 !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem.\");\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 599,
      "functionName": "beforeValue",
      "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
      "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n\n@param root true if the value is a new array or object, the two values\n    permitted as top-level elements.\n",
      "diff": "@@ -1,29 +1,29 @@\n @SuppressWarnings(\"fallthrough\")\n private void beforeValue(boolean root) throws IOException {\n     switch(peek()) {\n         case NONEMPTY_DOCUMENT:\n             if (!lenient) {\n                 throw new IllegalStateException(\"JSON must have only one top-level value.\");\n             }\n         case EMPTY_DOCUMENT:\n             if (!lenient \u0026\u0026 !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n-            replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n+            replaceTop(NONEMPTY_DOCUMENT);\n             break;\n         case EMPTY_ARRAY:\n-            replaceTop(JsonScope.NONEMPTY_ARRAY);\n+            replaceTop(NONEMPTY_ARRAY);\n             newline();\n             break;\n         case NONEMPTY_ARRAY:\n             out.append(\u0027,\u0027);\n             newline();\n             break;\n         case DANGLING_NAME:\n             out.append(separator);\n-            replaceTop(JsonScope.NONEMPTY_OBJECT);\n+            replaceTop(NONEMPTY_OBJECT);\n             break;\n         default:\n-            throw new IllegalStateException(\"Nesting problem: \" + stack);\n+            throw new IllegalStateException(\"Nesting problem.\");\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Permit multiple top-level values in JsonWriter in lenient mode. Also fix some cases where we don\u0027t throw the right thing on a closed JsonWriter.\n\nI\u0027d prefer to not support multiple top-level values, but we support it in JsonReader and it\u0027s easier to be consistent. Kevin Hayen\u0027s patch pointed me in the right direction here, but I needed to do more work to cover some of the edge cases.\n\nFixes issue 397.\n",
      "commitDate": "2/12/12, 12:42 PM",
      "commitName": "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Permit multiple top-level values in JsonWriter in lenient mode. Also fix some cases where we don\u0027t throw the right thing on a closed JsonWriter.\n\nI\u0027d prefer to not support multiple top-level values, but we support it in JsonReader and it\u0027s easier to be consistent. Kevin Hayen\u0027s patch pointed me in the right direction here, but I needed to do more work to cover some of the edge cases.\n\nFixes issue 397.\n",
          "commitDate": "2/12/12, 12:42 PM",
          "commitName": "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/30/11, 12:08 AM",
          "commitNameOld": "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 135.56,
          "commitsBetweenForRepo": 147,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n        case EMPTY_DOCUMENT:\n            if (!lenient \u0026\u0026 !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(JsonScope.NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(JsonScope.NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem: \" + stack);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
          "functionStartLine": 590,
          "functionName": "beforeValue",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n\n@param root true if the value is a new array or object, the two values\n    permitted as top-level elements.\n",
          "diff": "@@ -1,26 +1,29 @@\n+@SuppressWarnings(\"fallthrough\")\n private void beforeValue(boolean root) throws IOException {\n     switch(peek()) {\n+        case NONEMPTY_DOCUMENT:\n+            if (!lenient) {\n+                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n+            }\n         case EMPTY_DOCUMENT:\n             if (!lenient \u0026\u0026 !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n             break;\n         case EMPTY_ARRAY:\n             replaceTop(JsonScope.NONEMPTY_ARRAY);\n             newline();\n             break;\n         case NONEMPTY_ARRAY:\n             out.append(\u0027,\u0027);\n             newline();\n             break;\n         case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(JsonScope.NONEMPTY_OBJECT);\n             break;\n-        case NONEMPTY_DOCUMENT:\n-            throw new IllegalStateException(\"JSON must have only one top-level value.\");\n         default:\n             throw new IllegalStateException(\"Nesting problem: \" + stack);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Permit multiple top-level values in JsonWriter in lenient mode. Also fix some cases where we don\u0027t throw the right thing on a closed JsonWriter.\n\nI\u0027d prefer to not support multiple top-level values, but we support it in JsonReader and it\u0027s easier to be consistent. Kevin Hayen\u0027s patch pointed me in the right direction here, but I needed to do more work to cover some of the edge cases.\n\nFixes issue 397.\n",
          "commitDate": "2/12/12, 12:42 PM",
          "commitName": "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/30/11, 12:08 AM",
          "commitNameOld": "bb7f0b6bb01b0e98e32229cb528772a66a9d6075",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 135.56,
          "commitsBetweenForRepo": 147,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"fallthrough\")\nprivate void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case NONEMPTY_DOCUMENT:\n            if (!lenient) {\n                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n            }\n        case EMPTY_DOCUMENT:\n            if (!lenient \u0026\u0026 !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(JsonScope.NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(JsonScope.NONEMPTY_OBJECT);\n            break;\n        default:\n            throw new IllegalStateException(\"Nesting problem: \" + stack);\n    }\n}",
          "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
          "functionStartLine": 590,
          "functionName": "beforeValue",
          "functionAnnotation": "@SuppressWarnings(\"fallthrough\")",
          "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n\n@param root true if the value is a new array or object, the two values\n    permitted as top-level elements.\n",
          "diff": "@@ -1,26 +1,29 @@\n+@SuppressWarnings(\"fallthrough\")\n private void beforeValue(boolean root) throws IOException {\n     switch(peek()) {\n+        case NONEMPTY_DOCUMENT:\n+            if (!lenient) {\n+                throw new IllegalStateException(\"JSON must have only one top-level value.\");\n+            }\n         case EMPTY_DOCUMENT:\n             if (!lenient \u0026\u0026 !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n             break;\n         case EMPTY_ARRAY:\n             replaceTop(JsonScope.NONEMPTY_ARRAY);\n             newline();\n             break;\n         case NONEMPTY_ARRAY:\n             out.append(\u0027,\u0027);\n             newline();\n             break;\n         case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(JsonScope.NONEMPTY_OBJECT);\n             break;\n-        case NONEMPTY_DOCUMENT:\n-            throw new IllegalStateException(\"JSON must have only one top-level value.\");\n         default:\n             throw new IllegalStateException(\"Nesting problem: \" + stack);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@SuppressWarnings(\"fallthrough\")"
          }
        }
      ]
    },
    "486820f51521d0348160a18b9ba0326f78dcf518": {
      "type": "Ybodychange",
      "commitMessage": "Fix some test problems.\n\nJsonWriter was using suboptimal escape characters for newlines etc: unicode escapes rather than \\x escapes.\n\nJsonObjectTest was banning empty and whitespace-only keys. These values are permitted as of r585.\n",
      "commitDate": "8/28/10, 1:18 AM",
      "commitName": "486820f51521d0348160a18b9ba0326f78dcf518",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/28/10, 12:29 AM",
      "commitNameOld": "ff7aa3f3314e9e9ac50f3b8b259126ad379aead6",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case EMPTY_DOCUMENT:\n            if (!lenient \u0026\u0026 !root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(JsonScope.NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(JsonScope.NONEMPTY_OBJECT);\n            break;\n        case NONEMPTY_DOCUMENT:\n            throw new IllegalStateException(\"JSON must have only one top-level value.\");\n        default:\n            throw new IllegalStateException(\"Nesting problem: \" + stack);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 479,
      "functionName": "beforeValue",
      "functionAnnotation": "",
      "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n\n@param root true if the value is a new array or object, the two values\n    permitted as top-level elements.\n",
      "diff": "@@ -1,26 +1,26 @@\n private void beforeValue(boolean root) throws IOException {\n     switch(peek()) {\n         case EMPTY_DOCUMENT:\n-            if (!root) {\n+            if (!lenient \u0026\u0026 !root) {\n                 throw new IllegalStateException(\"JSON must start with an array or an object.\");\n             }\n             replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n             break;\n         case EMPTY_ARRAY:\n             replaceTop(JsonScope.NONEMPTY_ARRAY);\n             newline();\n             break;\n         case NONEMPTY_ARRAY:\n             out.append(\u0027,\u0027);\n             newline();\n             break;\n         case DANGLING_NAME:\n             out.append(separator);\n             replaceTop(JsonScope.NONEMPTY_OBJECT);\n             break;\n         case NONEMPTY_DOCUMENT:\n             throw new IllegalStateException(\"JSON must have only one top-level value.\");\n         default:\n             throw new IllegalStateException(\"Nesting problem: \" + stack);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "765a9f1ecdfaf96f3587f488385111c9d6a4927e": {
      "type": "Yintroduced",
      "commitMessage": "Brand new classes for streaming JSON efficiently.\n\nNotable features:\n - Efficiency. The parser is faster than the current javacc parser. It\u0027s also faster than popular libraries for JSON streaming.\n - Toggle lenient/strict\n - Toggle pretty/compact\n - Friendly error messages on bad JSON\n - GSON-quality Javadoc\n - Non-execute prefix handling\n\nThis doesn\u0027t wire JsonReader up into Gson just yet. That\u0027s coming soon...\n",
      "commitDate": "8/26/10, 1:44 AM",
      "commitName": "765a9f1ecdfaf96f3587f488385111c9d6a4927e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,26 @@\n+private void beforeValue(boolean root) throws IOException {\n+    switch(peek()) {\n+        case EMPTY_DOCUMENT:\n+            if (!root) {\n+                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n+            }\n+            replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n+            break;\n+        case EMPTY_ARRAY:\n+            replaceTop(JsonScope.NONEMPTY_ARRAY);\n+            newline();\n+            break;\n+        case NONEMPTY_ARRAY:\n+            out.append(\u0027,\u0027);\n+            newline();\n+            break;\n+        case DANGLING_NAME:\n+            out.append(separator);\n+            replaceTop(JsonScope.NONEMPTY_OBJECT);\n+            break;\n+        case NONEMPTY_DOCUMENT:\n+            throw new IllegalStateException(\"JSON must have only one top-level value.\");\n+        default:\n+            throw new IllegalStateException(\"Nesting problem: \" + stack);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void beforeValue(boolean root) throws IOException {\n    switch(peek()) {\n        case EMPTY_DOCUMENT:\n            if (!root) {\n                throw new IllegalStateException(\"JSON must start with an array or an object.\");\n            }\n            replaceTop(JsonScope.NONEMPTY_DOCUMENT);\n            break;\n        case EMPTY_ARRAY:\n            replaceTop(JsonScope.NONEMPTY_ARRAY);\n            newline();\n            break;\n        case NONEMPTY_ARRAY:\n            out.append(\u0027,\u0027);\n            newline();\n            break;\n        case DANGLING_NAME:\n            out.append(separator);\n            replaceTop(JsonScope.NONEMPTY_OBJECT);\n            break;\n        case NONEMPTY_DOCUMENT:\n            throw new IllegalStateException(\"JSON must have only one top-level value.\");\n        default:\n            throw new IllegalStateException(\"Nesting problem: \" + stack);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
      "functionStartLine": 462,
      "functionName": "beforeValue",
      "functionAnnotation": "",
      "functionDoc": "Inserts any necessary separators and whitespace before a literal value,\ninline array, or inline object. Also adjusts the stack to expect either a\nclosing bracket or another element.\n\n@param root true if the value is a new array or object, the two values\n    permitted as top-level elements.\n"
    }
  }
}