{
  "origin": "codeshovel",
  "repositoryName": "Cli-31b",
  "repositoryPath": "/tmp/Cli-31b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HelpFormatter.java",
  "functionName": "renderWrappedText",
  "functionId": "renderWrappedText___sb-StringBuffer__width-int__nextLineTabStop-int__text-String",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
  "functionAnnotation": "",
  "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
  "functionStartLine": 842,
  "functionEndLine": 884,
  "numCommitsSeen": 44,
  "timeTaken": 1862,
  "changeHistory": [
    "d8df5107a76b1a7fa579ec91f5482be901d18435",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "6a585453d385449dc23d90479488f92f02cd6b83",
    "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22",
    "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6",
    "84234a65638f0e9e4be73dfcccaa6530a5b571af",
    "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4",
    "d1121d3ad3154e3564e150555dcedb368ad3aa94",
    "2ddaae14dd23643a4b5f71f8274534b0b34556a4",
    "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06",
    "a8a8ec06a85a1090d560dc6cf236663da580863e",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "aae50c585ec3ac33c6a9af792e80378904a73195"
  ],
  "changeHistoryShort": {
    "d8df5107a76b1a7fa579ec91f5482be901d18435": "Yformatchange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "6a585453d385449dc23d90479488f92f02cd6b83": "Ybodychange",
    "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22": "Ybodychange",
    "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6": "Ybodychange",
    "84234a65638f0e9e4be73dfcccaa6530a5b571af": "Ybodychange",
    "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4": "Yformatchange",
    "d1121d3ad3154e3564e150555dcedb368ad3aa94": "Ybodychange",
    "2ddaae14dd23643a4b5f71f8274534b0b34556a4": "Ybodychange",
    "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e": "Ybodychange",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ydocchange",
    "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06": "Ybodychange",
    "a8a8ec06a85a1090d560dc6cf236663da580863e": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "aae50c585ec3ac33c6a9af792e80378904a73195": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d8df5107a76b1a7fa579ec91f5482be901d18435": {
      "type": "Yformatchange",
      "commitMessage": "Fixed some of the checkstyle errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955185 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 3:32 AM",
      "commitName": "d8df5107a76b1a7fa579ec91f5482be901d18435",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10, 2:45 AM",
      "commitNameOld": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop \u003e\u003d width) {\n        nextLineTabStop \u003d 1;\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 842,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 2:45 AM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10, 2:42 AM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop \u003e\u003d width) {\n        nextLineTabStop \u003d 1;\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 842,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/HelpFormatter.java",
        "newPath": "src/main/java/org/apache/commons/cli/HelpFormatter.java"
      }
    },
    "6a585453d385449dc23d90479488f92f02cd6b83": {
      "type": "Ybodychange",
      "commitMessage": "Adjusting - best is to switch to an indent of 1 than do silly things like having every line have 1 character. CLI-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@748463 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/27/09, 1:38 AM",
      "commitName": "6a585453d385449dc23d90479488f92f02cd6b83",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/27/09, 1:34 AM",
      "commitNameOld": "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop \u003e\u003d width) {\n        nextLineTabStop \u003d 1;\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 809,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     if (nextLineTabStop \u003e\u003d width) {\n-        nextLineTabStop \u003d width - 1;\n+        nextLineTabStop \u003d 1;\n     }\n     final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n         }\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n             pos \u003d width;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22": {
      "type": "Ybodychange",
      "commitMessage": "Switching from the IllegalStateException to trying hard to work. A better user experience and didn\u0027t end up with the code being any more evil. CLI-162\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@748461 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/27/09, 1:34 AM",
      "commitName": "02dd7c20646bf67dcfb6f7da6beeb7cdffc6ac22",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/27/09, 1:18 AM",
      "commitNameOld": "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop \u003e\u003d width) {\n        nextLineTabStop \u003d width - 1;\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 809,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     if (nextLineTabStop \u003e\u003d width) {\n-        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\n+        nextLineTabStop \u003d width - 1;\n     }\n     final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n         }\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n             pos \u003d width;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6": {
      "type": "Ybodychange",
      "commitMessage": "Improving the order of the code - no point using a variable before it is tested\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@748453 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/27/09, 1:18 AM",
      "commitName": "ac6e754ecfc86822aa1ab74d657b0b3f0222b2e6",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/19/09, 9:09 PM",
      "commitNameOld": "eeb83e4d69f835a5a1da54f6fd1f541d9ed7a80d",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 7.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    if (nextLineTabStop \u003e\u003d width) {\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 809,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,24 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n-    final String padding \u003d createPadding(nextLineTabStop);\n     if (nextLineTabStop \u003e\u003d width) {\n         throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\n     }\n+    final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n         }\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n             pos \u003d width;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "84234a65638f0e9e4be73dfcccaa6530a5b571af": {
      "type": "Ybodychange",
      "commitMessage": "Applying additional patch to throw IllegalStateException when the specified width is not enough to fit the flags, indent and 1 character for the description. This closes out CLI-162 (for now :) ). \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@746137 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/09, 9:00 PM",
      "commitName": "84234a65638f0e9e4be73dfcccaa6530a5b571af",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/18/09, 9:07 PM",
      "commitNameOld": "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    if (nextLineTabStop \u003e\u003d width) {\n        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\n    }\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,21 +1,24 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     final String padding \u003d createPadding(nextLineTabStop);\n+    if (nextLineTabStop \u003e\u003d width) {\n+        throw new IllegalStateException(\"Total width is less than the width of the argument and indent \" + \"- no room for the description\");\n+    }\n     while (true) {\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n         }\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n             pos \u003d width;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4": {
      "type": "Yformatchange",
      "commitMessage": "Always hard to remember to drop the braces in CLI\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/18/09, 9:07 PM",
      "commitName": "a3e716227a66fb02fc9cce926b8820a7b1c5f2c4",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/18/09, 9:06 PM",
      "commitNameOld": "d1121d3ad3154e3564e150555dcedb368ad3aa94",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d1121d3ad3154e3564e150555dcedb368ad3aa94": {
      "type": "Ybodychange",
      "commitMessage": "Adjusting so that long lines are mercilessly cut off at the maxwidth and continued as before on the following line. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745725 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/18/09, 9:06 PM",
      "commitName": "d1121d3ad3154e3564e150555dcedb368ad3aa94",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/17/09, 9:42 PM",
      "commitNameOld": "2ddaae14dd23643a4b5f71f8274534b0b34556a4",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            pos \u003d width;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,22 +1,21 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n         }\n         if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n-            sb.append(text);\n-            return sb;\n+            pos \u003d width;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ddaae14dd23643a4b5f71f8274534b0b34556a4": {
      "type": "Ybodychange",
      "commitMessage": "Applying my second attempt at a patch to CLI-162. This fixes Gary\u0027s reported bug (one of which was an example of CLI-162, and one a bug in my first attempt to patch). Open question is whether to output text that is too long, or try and break it up to fit the screen width. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@745388 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/17/09, 9:42 PM",
      "commitName": "2ddaae14dd23643a4b5f71f8274534b0b34556a4",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "1/17/09, 1:30 AM",
      "commitNameOld": "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 31.84,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,21 +1,22 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n-        int lastPos \u003d pos;\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n-        } else if (pos \u003d\u003d lastPos) {\n-            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n+        }\n+        if ((text.length() \u003e width) \u0026\u0026 (pos \u003d\u003d nextLineTabStop - 1)) {\n+            sb.append(text);\n+            return sb;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e": {
      "type": "Ybodychange",
      "commitMessage": "Changing the current OutOfMemoryError to a RuntimeException per CLI-162. A new ticket for the RuntimeException is at CLI-174\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@735257 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/17/09, 1:30 AM",
      "commitName": "880a9f6c45dbcb14215bb35de21fdbbfaeb89c2e",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "7/29/08, 1:13 AM",
      "commitNameOld": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 172.05,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        int lastPos \u003d pos;\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        } else if (pos \u003d\u003d lastPos) {\n            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,18 +1,21 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n+        int lastPos \u003d pos;\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n+        } else if (pos \u003d\u003d lastPos) {\n+            throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ydocchange",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08, 1:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/30/08, 3:22 AM",
      "commitNameOld": "d36adebd3547279b709960c902c3fb7b89a9a4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 59.91,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 805,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eRender the specified text and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
        "newValue": "Render the specified text and return the rendered Options\nin a StringBuffer.\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n"
      }
    },
    "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06": {
      "type": "Ybodychange",
      "commitMessage": "Applying J. Lewis Muir\u0027s patch from CLI-151 fixing HelpFormatter so it wraps properly on multiple lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654428 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/08, 11:40 PM",
      "commitName": "4f407378c93b9e2a8e24c855e8bed5eb12bf7a06",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "6/13/07, 4:13 PM",
      "commitNameOld": "a52a9af7c135b93a2f8c2480916ec5f5bad226ec",
      "commitAuthorOld": "Niall Kegan Pemberton",
      "daysBetweenCommits": 329.31,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, 0);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 792,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,18 +1,18 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n     }\n     sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n         text \u003d padding + text.substring(pos).trim();\n-        pos \u003d findWrapPos(text, width, nextLineTabStop);\n+        pos \u003d findWrapPos(text, width, 0);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a8a8ec06a85a1090d560dc6cf236663da580863e": {
      "type": "Ybodychange",
      "commitMessage": "Lots of minor refactoring and tidying to avoid compiler warnings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@155293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/24/05, 7:21 PM",
      "commitName": "a8a8ec06a85a1090d560dc6cf236663da580863e",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "12/27/04, 6:51 AM",
      "commitNameOld": "9cb37e0e0363bc71646a146b1dac6ac59b6a629e",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 59.52,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 743,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
      "diff": "@@ -1,19 +1,18 @@\n protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n     int pos \u003d findWrapPos(text, width, 0);\n     if (pos \u003d\u003d -1) {\n         sb.append(rtrim(text));\n         return sb;\n-    } else {\n-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n+    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     final String padding \u003d createPadding(nextLineTabStop);\n     while (true) {\n         text \u003d padding + text.substring(pos).trim();\n         pos \u003d findWrapPos(text, width, nextLineTabStop);\n         if (pos \u003d\u003d -1) {\n             sb.append(text);\n             return sb;\n         }\n         sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/19/02, 2:50 PM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    } else {\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 782,
          "functionName": "renderWrappedText",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
          "diff": "",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/19/02, 2:50 PM",
          "commitNameOld": "6bcbf153c4497c38c4c36c3a04c1eac1f4cc153b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 20.04,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    } else {\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
          "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
          "functionStartLine": 782,
          "functionName": "renderWrappedText",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eRender the specified text and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eRender the specified text and return the rendered Options\nin a StringBuffer.\u003c/p\u003e\n\n@param sb The StringBuffer to place the rendered text into.\n@param width The number of characters to display per line\n@param nextLineTabStop The position on the next line for the first tab.\n@param text The text to be rendered.\n@return the StringBuffer with the rendered Options contents.\n"
          }
        }
      ]
    },
    "aae50c585ec3ac33c6a9af792e80378904a73195": {
      "type": "Yintroduced",
      "commitMessage": "moved cli over from the sandbox to commons proper\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/10/02, 11:01 AM",
      "commitName": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthor": "James Strachan",
      "diff": "@@ -0,0 +1,19 @@\n+protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n+    int pos \u003d findWrapPos(text, width, 0);\n+    if (pos \u003d\u003d -1) {\n+        sb.append(rtrim(text));\n+        return sb;\n+    } else {\n+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n+    }\n+    final String padding \u003d createPadding(nextLineTabStop);\n+    while (true) {\n+        text \u003d padding + text.substring(pos).trim();\n+        pos \u003d findWrapPos(text, width, nextLineTabStop);\n+        if (pos \u003d\u003d -1) {\n+            sb.append(text);\n+            return sb;\n+        }\n+        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {\n    int pos \u003d findWrapPos(text, width, 0);\n    if (pos \u003d\u003d -1) {\n        sb.append(rtrim(text));\n        return sb;\n    } else {\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n    final String padding \u003d createPadding(nextLineTabStop);\n    while (true) {\n        text \u003d padding + text.substring(pos).trim();\n        pos \u003d findWrapPos(text, width, nextLineTabStop);\n        if (pos \u003d\u003d -1) {\n            sb.append(text);\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/HelpFormatter.java",
      "functionStartLine": 214,
      "functionName": "renderWrappedText",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}