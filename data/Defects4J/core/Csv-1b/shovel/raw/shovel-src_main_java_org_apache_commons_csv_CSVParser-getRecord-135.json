{
  "origin": "codeshovel",
  "repositoryName": "Csv-1b",
  "repositoryPath": "/tmp/Csv-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CSVParser.java",
  "functionName": "getRecord",
  "functionId": "getRecord",
  "sourceFilePath": "src/main/java/org/apache/commons/csv/CSVParser.java",
  "functionAnnotation": "",
  "functionDoc": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n",
  "functionStartLine": 135,
  "functionEndLine": 164,
  "numCommitsSeen": 83,
  "timeTaken": 1989,
  "changeHistory": [
    "aee6c50e2830c007a572cc96a57bc105308acc49",
    "9141cb39e6659340574a96b41d7f463ebdc2610e",
    "2ec4c994c0458ef893af9bd518849bec21b2dec4",
    "ca7bbae40ef89e561f74d1a00776e3a9f697bd37",
    "9dd3dda09f09c6baa7e053b39043bc9e2ef47ee0",
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
    "045dbbbe4ab84618cee8ba27d00b9283ce0a2715",
    "16bfec07ffd785e5abbabdc4145eeac5cccc2c79",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
    "1b0ccbe4c7d5a183913063429198e8c51bb768f9",
    "d7e94581d784067fccddd34e19ae46aea526f9fa",
    "f047581f9526aad1c9c9e624710a4e860f88ecaa",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955"
  ],
  "changeHistoryShort": {
    "aee6c50e2830c007a572cc96a57bc105308acc49": "Ymultichange(Yreturntypechange,Ybodychange)",
    "9141cb39e6659340574a96b41d7f463ebdc2610e": "Ybodychange",
    "2ec4c994c0458ef893af9bd518849bec21b2dec4": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
    "ca7bbae40ef89e561f74d1a00776e3a9f697bd37": "Ybodychange",
    "9dd3dda09f09c6baa7e053b39043bc9e2ef47ee0": "Ydocchange",
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512": "Ymultichange(Ybodychange,Ydocchange)",
    "045dbbbe4ab84618cee8ba27d00b9283ce0a2715": "Ymodifierchange",
    "16bfec07ffd785e5abbabdc4145eeac5cccc2c79": "Ybodychange",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": "Yfilerename",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": "Ymultichange(Ydocchange,Yformatchange)",
    "1b0ccbe4c7d5a183913063429198e8c51bb768f9": "Ybodychange",
    "d7e94581d784067fccddd34e19ae46aea526f9fa": "Ybodychange",
    "f047581f9526aad1c9c9e624710a4e860f88ecaa": "Ybodychange",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": "Yfilerename",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aee6c50e2830c007a572cc96a57bc105308acc49": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/16/12, 6:39 PM",
      "commitName": "aee6c50e2830c007a572cc96a57bc105308acc49",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/16/12, 6:39 PM",
          "commitName": "aee6c50e2830c007a572cc96a57bc105308acc49",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/15/12, 1:52 AM",
          "commitNameOld": "38670dbe9232dc9b56d6464c42293e745974cf60",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 1.7,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "CSVRecord getRecord() throws IOException {\n    CSVRecord result \u003d new CSVRecord(null, headerMapping);\n    record.clear();\n    do {\n        reusableToken.reset();\n        lexer.nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    result \u003d null;\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n    } while (reusableToken.type \u003d\u003d TOKEN);\n    if (!record.isEmpty()) {\n        result \u003d new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 145,
          "functionName": "getRecord",
          "functionAnnotation": "",
          "functionDoc": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,29 +1,29 @@\n-String[] getRecord() throws IOException {\n-    String[] result \u003d EMPTY_STRING_ARRAY;\n+CSVRecord getRecord() throws IOException {\n+    CSVRecord result \u003d new CSVRecord(null, headerMapping);\n     record.clear();\n     do {\n         reusableToken.reset();\n         lexer.nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     result \u003d null;\n                 }\n                 break;\n             case INVALID:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n     } while (reusableToken.type \u003d\u003d TOKEN);\n     if (!record.isEmpty()) {\n-        result \u003d record.toArray(new String[record.size()]);\n+        result \u003d new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "String[]",
            "newValue": "CSVRecord"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/16/12, 6:39 PM",
          "commitName": "aee6c50e2830c007a572cc96a57bc105308acc49",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/15/12, 1:52 AM",
          "commitNameOld": "38670dbe9232dc9b56d6464c42293e745974cf60",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 1.7,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "CSVRecord getRecord() throws IOException {\n    CSVRecord result \u003d new CSVRecord(null, headerMapping);\n    record.clear();\n    do {\n        reusableToken.reset();\n        lexer.nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    result \u003d null;\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n    } while (reusableToken.type \u003d\u003d TOKEN);\n    if (!record.isEmpty()) {\n        result \u003d new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 145,
          "functionName": "getRecord",
          "functionAnnotation": "",
          "functionDoc": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,29 +1,29 @@\n-String[] getRecord() throws IOException {\n-    String[] result \u003d EMPTY_STRING_ARRAY;\n+CSVRecord getRecord() throws IOException {\n+    CSVRecord result \u003d new CSVRecord(null, headerMapping);\n     record.clear();\n     do {\n         reusableToken.reset();\n         lexer.nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     result \u003d null;\n                 }\n                 break;\n             case INVALID:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n     } while (reusableToken.type \u003d\u003d TOKEN);\n     if (!record.isEmpty()) {\n-        result \u003d record.toArray(new String[record.size()]);\n+        result \u003d new CSVRecord(record.toArray(new String[record.size()]), headerMapping);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9141cb39e6659340574a96b41d7f463ebdc2610e": {
      "type": "Ybodychange",
      "commitMessage": "Changed while loops (CSV-55)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1299706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/12/12, 8:12 AM",
      "commitName": "9141cb39e6659340574a96b41d7f463ebdc2610e",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/11/12, 4:23 PM",
      "commitNameOld": "94b9f8dc957d3a2276232c8e6f3acc6fe633b00a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "String[] getRecord() throws IOException {\n    String[] result \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    do {\n        reusableToken.reset();\n        lexer.nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    result \u003d null;\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n    } while (reusableToken.type \u003d\u003d TOKEN);\n    if (!record.isEmpty()) {\n        result \u003d record.toArray(new String[record.size()]);\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 143,
      "functionName": "getRecord",
      "functionAnnotation": "",
      "functionDoc": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,32 +1,29 @@\n String[] getRecord() throws IOException {\n     String[] result \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n-    while (true) {\n+    do {\n         reusableToken.reset();\n         lexer.nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     result \u003d null;\n                 }\n                 break;\n             case INVALID:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n-        if (reusableToken.type !\u003d TOKEN) {\n-            break;\n-        }\n-    }\n+    } while (reusableToken.type \u003d\u003d TOKEN);\n     if (!record.isEmpty()) {\n         result \u003d record.toArray(new String[record.size()]);\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ec4c994c0458ef893af9bd518849bec21b2dec4": {
      "type": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
      "commitMessage": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/8/12, 1:59 AM",
      "commitName": "2ec4c994c0458ef893af9bd518849bec21b2dec4",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/12, 1:59 AM",
          "commitName": "2ec4c994c0458ef893af9bd518849bec21b2dec4",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/7/12, 4:00 PM",
          "commitNameOld": "a65806a126d71477b3538b571c45f27de054ff84",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String[] getRecord() throws IOException {\n    String[] result \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        lexer.nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    result \u003d null;\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        result \u003d record.toArray(new String[record.size()]);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 143,
          "functionName": "getRecord",
          "functionAnnotation": "",
          "functionDoc": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,33 +1,32 @@\n-String[] getLine() throws IOException {\n-    String[] ret \u003d EMPTY_STRING_ARRAY;\n+String[] getRecord() throws IOException {\n+    String[] result \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         lexer.nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n-                    ret \u003d null;\n+                    result \u003d null;\n                 }\n                 break;\n             case INVALID:\n-            default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n         if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n-        ret \u003d record.toArray(new String[record.size()]);\n+        result \u003d record.toArray(new String[record.size()]);\n     }\n-    return ret;\n+    return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "getLine",
            "newValue": "getRecord"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/12, 1:59 AM",
          "commitName": "2ec4c994c0458ef893af9bd518849bec21b2dec4",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/7/12, 4:00 PM",
          "commitNameOld": "a65806a126d71477b3538b571c45f27de054ff84",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String[] getRecord() throws IOException {\n    String[] result \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        lexer.nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    result \u003d null;\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        result \u003d record.toArray(new String[record.size()]);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 143,
          "functionName": "getRecord",
          "functionAnnotation": "",
          "functionDoc": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,33 +1,32 @@\n-String[] getLine() throws IOException {\n-    String[] ret \u003d EMPTY_STRING_ARRAY;\n+String[] getRecord() throws IOException {\n+    String[] result \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         lexer.nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n-                    ret \u003d null;\n+                    result \u003d null;\n                 }\n                 break;\n             case INVALID:\n-            default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n         if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n-        ret \u003d record.toArray(new String[record.size()]);\n+        result \u003d record.toArray(new String[record.size()]);\n     }\n-    return ret;\n+    return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/12, 1:59 AM",
          "commitName": "2ec4c994c0458ef893af9bd518849bec21b2dec4",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/7/12, 4:00 PM",
          "commitNameOld": "a65806a126d71477b3538b571c45f27de054ff84",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String[] getRecord() throws IOException {\n    String[] result \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        lexer.nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    result \u003d null;\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        result \u003d record.toArray(new String[record.size()]);\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 143,
          "functionName": "getRecord",
          "functionAnnotation": "",
          "functionDoc": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,33 +1,32 @@\n-String[] getLine() throws IOException {\n-    String[] ret \u003d EMPTY_STRING_ARRAY;\n+String[] getRecord() throws IOException {\n+    String[] result \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         lexer.nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n-                    ret \u003d null;\n+                    result \u003d null;\n                 }\n                 break;\n             case INVALID:\n-            default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n         if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n-        ret \u003d record.toArray(new String[record.size()]);\n+        result \u003d record.toArray(new String[record.size()]);\n     }\n-    return ret;\n+    return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parses from the current point in the stream til the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
            "newValue": "Parses the next record from the current point in the stream.\n\n@return the record as an array of values, or \u003ctt\u003enull\u003c/tt\u003e if the end of the stream has been reached\n@throws IOException on parse error or input read-failure\n"
          }
        }
      ]
    },
    "ca7bbae40ef89e561f74d1a00776e3a9f697bd37": {
      "type": "Ybodychange",
      "commitMessage": "Extracted the lexer from CSVParser in a distinct class (suggested by Bob Smith)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298033 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/7/12, 10:21 AM",
      "commitName": "ca7bbae40ef89e561f74d1a00776e3a9f697bd37",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/7/12, 7:58 AM",
      "commitNameOld": "00d0def6953d414af6ecf36a9584c5453ee39c29",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        lexer.nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 138,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,33 +1,33 @@\n String[] getLine() throws IOException {\n     String[] ret \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n-        nextToken(reusableToken);\n+        lexer.nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     ret \u003d null;\n                 }\n                 break;\n             case INVALID:\n             default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n         if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n         ret \u003d record.toArray(new String[record.size()]);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9dd3dda09f09c6baa7e053b39043bc9e2ef47ee0": {
      "type": "Ydocchange",
      "commitMessage": "Removed the package private method CSVParser.nextToken()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297431 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/6/12, 3:23 AM",
      "commitName": "9dd3dda09f09c6baa7e053b39043bc9e2ef47ee0",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/5/12, 9:27 AM",
      "commitNameOld": "f6c0433b65a97745b9a3044cebe3ddc6e28c1836",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 187,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses from the current point in the stream til * the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
        "newValue": "Parses from the current point in the stream til the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n"
      }
    },
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Updated the Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/12, 5:08 AM",
      "commitName": "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Updated the Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297043 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/5/12, 5:08 AM",
          "commitName": "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "11/9/11, 3:04 PM",
          "commitNameOld": "045dbbbe4ab84618cee8ba27d00b9283ce0a2715",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 116.59,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 176,
          "functionName": "getLine",
          "functionAnnotation": "",
          "functionDoc": "Parses from the current point in the stream til * the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,33 +1,33 @@\n String[] getLine() throws IOException {\n     String[] ret \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     ret \u003d null;\n                 }\n                 break;\n             case INVALID:\n             default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n         if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n-        ret \u003d (String[]) record.toArray(new String[record.size()]);\n+        ret \u003d record.toArray(new String[record.size()]);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated the Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297043 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/5/12, 5:08 AM",
          "commitName": "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "11/9/11, 3:04 PM",
          "commitNameOld": "045dbbbe4ab84618cee8ba27d00b9283ce0a2715",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 116.59,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 176,
          "functionName": "getLine",
          "functionAnnotation": "",
          "functionDoc": "Parses from the current point in the stream til * the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,33 +1,33 @@\n String[] getLine() throws IOException {\n     String[] ret \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     ret \u003d null;\n                 }\n                 break;\n             case INVALID:\n             default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n         if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n-        ret \u003d (String[]) record.toArray(new String[record.size()]);\n+        ret \u003d record.toArray(new String[record.size()]);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line\n        (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
            "newValue": "Parses from the current point in the stream til * the end of the current line.\n\n@return array of values til end of line (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n"
          }
        }
      ]
    },
    "045dbbbe4ab84618cee8ba27d00b9283ce0a2715": {
      "type": "Ymodifierchange",
      "commitMessage": "Made CSVParser iterable to simplify the iteration over the records\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1200024 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 3:04 PM",
      "commitName": "045dbbbe4ab84618cee8ba27d00b9283ce0a2715",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 2:04 PM",
      "commitNameOld": "a7bd28c496457aa7c32db4ea529c4f3df7e78fe9",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 181,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line\n        (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,33 +1,33 @@\n-public String[] getLine() throws IOException {\n+String[] getLine() throws IOException {\n     String[] ret \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     ret \u003d null;\n                 }\n                 break;\n             case INVALID:\n             default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n         if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n         ret \u003d (String[]) record.toArray(new String[record.size()]);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "16bfec07ffd785e5abbabdc4145eeac5cccc2c79": {
      "type": "Ybodychange",
      "commitMessage": "Turned the token types into an Enum\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199872 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 9:11 AM",
      "commitName": "16bfec07ffd785e5abbabdc4145eeac5cccc2c79",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 8:58 AM",
      "commitNameOld": "cbcfb72912f41d1fac3f6d26ca27406cca94da9e",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 175,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line\n        (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,33 +1,33 @@\n public String[] getLine() throws IOException {\n     String[] ret \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         nextToken(reusableToken);\n         switch(reusableToken.type) {\n-            case TT_TOKEN:\n+            case TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n-            case TT_EORECORD:\n+            case EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n-            case TT_EOF:\n+            case EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     ret \u003d null;\n                 }\n                 break;\n-            case TT_INVALID:\n+            case INVALID:\n             default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n-        if (reusableToken.type !\u003d TT_TOKEN) {\n+        if (reusableToken.type !\u003d TOKEN) {\n             break;\n         }\n     }\n     if (!record.isEmpty()) {\n         ret \u003d (String[]) record.toArray(new String[record.size()]);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": {
      "type": "Yfilerename",
      "commitMessage": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 2:38 AM",
      "commitName": "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/20/11, 9:14 AM",
      "commitNameOld": "76cab04936e8b539d983510079419fabeeaecea0",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 111.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TT_TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 255,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line\n        (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/csv/CSVParser.java",
        "newPath": "src/main/java/org/apache/commons/csv/CSVParser.java"
      }
    },
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/1/11, 12:46 AM",
      "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
      "commitAuthor": "Jacopo Cappellato",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/11, 12:46 AM",
          "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
          "commitAuthor": "Jacopo Cappellato",
          "commitDateOld": "1/31/11, 2:47 AM",
          "commitNameOld": "c6bdecabd82eebc9efce450aa4057b668984479e",
          "commitAuthorOld": "Jacopo Cappellato",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TT_TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
          "path": "src/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 255,
          "functionName": "getLine",
          "functionAnnotation": "",
          "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line\n        (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line \n       (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
            "newValue": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line\n        (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/11, 12:46 AM",
          "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
          "commitAuthor": "Jacopo Cappellato",
          "commitDateOld": "1/31/11, 2:47 AM",
          "commitNameOld": "c6bdecabd82eebc9efce450aa4057b668984479e",
          "commitAuthorOld": "Jacopo Cappellato",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TT_TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
          "path": "src/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 255,
          "functionName": "getLine",
          "functionAnnotation": "",
          "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line\n        (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "1b0ccbe4c7d5a183913063429198e8c51bb768f9": {
      "type": "Ybodychange",
      "commitMessage": "Applying checkstyle changes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@631133 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/26/08, 12:47 AM",
      "commitName": "1b0ccbe4c7d5a183913063429198e8c51bb768f9",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "1/6/08, 7:13 AM",
      "commitNameOld": "086f434320e68a82ce1adcac69668ffcd7f48e52",
      "commitAuthorOld": "Yonik Seeley",
      "daysBetweenCommits": 50.73,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TT_TOKEN) {\n            break;\n        }\n    }\n    if (!record.isEmpty()) {\n        ret \u003d (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 237,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line \n       (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,32 +1,33 @@\n public String[] getLine() throws IOException {\n     String[] ret \u003d EMPTY_STRING_ARRAY;\n     record.clear();\n     while (true) {\n         reusableToken.reset();\n         nextToken(reusableToken);\n         switch(reusableToken.type) {\n             case TT_TOKEN:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case TT_EORECORD:\n                 record.add(reusableToken.content.toString());\n                 break;\n             case TT_EOF:\n                 if (reusableToken.isReady) {\n                     record.add(reusableToken.content.toString());\n                 } else {\n                     ret \u003d null;\n                 }\n                 break;\n             case TT_INVALID:\n             default:\n                 throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n         }\n-        if (reusableToken.type !\u003d TT_TOKEN)\n+        if (reusableToken.type !\u003d TT_TOKEN) {\n             break;\n+        }\n     }\n     if (!record.isEmpty()) {\n         ret \u003d (String[]) record.toArray(new String[record.size()]);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d7e94581d784067fccddd34e19ae46aea526f9fa": {
      "type": "Ybodychange",
      "commitMessage": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Glück\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/10/06, 2:01 AM",
      "commitName": "d7e94581d784067fccddd34e19ae46aea526f9fa",
      "commitAuthor": "Ortwin Glueck",
      "commitDateOld": "7/31/06, 11:50 PM",
      "commitNameOld": "ce34196827e6ac834b4c566e1e6fbe863c8e8d1c",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 9.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[] getLine() throws IOException {\n    String[] ret \u003d EMPTY_STRING_ARRAY;\n    record.clear();\n    while (true) {\n        reusableToken.reset();\n        nextToken(reusableToken);\n        switch(reusableToken.type) {\n            case TT_TOKEN:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EORECORD:\n                record.add(reusableToken.content.toString());\n                break;\n            case TT_EOF:\n                if (reusableToken.isReady) {\n                    record.add(reusableToken.content.toString());\n                } else {\n                    ret \u003d null;\n                }\n                break;\n            case TT_INVALID:\n            default:\n                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n        }\n        if (reusableToken.type !\u003d TT_TOKEN)\n            break;\n    }\n    if (!record.isEmpty()) {\n        ret \u003d (String[]) record.toArray(new String[record.size()]);\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 225,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line \n       (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,28 +1,32 @@\n public String[] getLine() throws IOException {\n-    Vector record \u003d new Vector();\n-    String[] ret \u003d new String[0];\n-    Token tkn;\n-    while ((tkn \u003d nextToken()).type \u003d\u003d TT_TOKEN) {\n-        record.add(tkn.content.toString());\n-    }\n-    switch(tkn.type) {\n-        case TT_EORECORD:\n-            record.add(tkn.content.toString());\n+    String[] ret \u003d EMPTY_STRING_ARRAY;\n+    record.clear();\n+    while (true) {\n+        reusableToken.reset();\n+        nextToken(reusableToken);\n+        switch(reusableToken.type) {\n+            case TT_TOKEN:\n+                record.add(reusableToken.content.toString());\n+                break;\n+            case TT_EORECORD:\n+                record.add(reusableToken.content.toString());\n+                break;\n+            case TT_EOF:\n+                if (reusableToken.isReady) {\n+                    record.add(reusableToken.content.toString());\n+                } else {\n+                    ret \u003d null;\n+                }\n+                break;\n+            case TT_INVALID:\n+            default:\n+                throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n+        }\n+        if (reusableToken.type !\u003d TT_TOKEN)\n             break;\n-        case TT_EOF:\n-            if (tkn.isReady) {\n-                record.add(tkn.content.toString());\n-            } else {\n-                ret \u003d null;\n-            }\n-            break;\n-        case TT_INVALID:\n-        default:\n-            throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n     }\n-    if (record.size() \u003e 0) {\n-        ret \u003d new String[record.size()];\n-        record.toArray(ret);\n+    if (!record.isEmpty()) {\n+        ret \u003d (String[]) record.toArray(new String[record.size()]);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f047581f9526aad1c9c9e624710a4e860f88ecaa": {
      "type": "Ybodychange",
      "commitMessage": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/06, 9:11 PM",
      "commitName": "f047581f9526aad1c9c9e624710a4e860f88ecaa",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:46 PM",
      "commitNameOld": "0e1f0adb716515aba5e98e5690779f2fb73ad716",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 78.98,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[] getLine() throws IOException {\n    Vector record \u003d new Vector();\n    String[] ret \u003d new String[0];\n    Token tkn;\n    while ((tkn \u003d nextToken()).type \u003d\u003d TT_TOKEN) {\n        record.add(tkn.content.toString());\n    }\n    switch(tkn.type) {\n        case TT_EORECORD:\n            record.add(tkn.content.toString());\n            break;\n        case TT_EOF:\n            if (tkn.isReady) {\n                record.add(tkn.content.toString());\n            } else {\n                ret \u003d null;\n            }\n            break;\n        case TT_INVALID:\n        default:\n            throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n    }\n    if (record.size() \u003e 0) {\n        ret \u003d new String[record.size()];\n        record.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 276,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line \n       (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,24 +1,28 @@\n public String[] getLine() throws IOException {\n     Vector record \u003d new Vector();\n     String[] ret \u003d new String[0];\n     Token tkn;\n     while ((tkn \u003d nextToken()).type \u003d\u003d TT_TOKEN) {\n         record.add(tkn.content.toString());\n     }\n     switch(tkn.type) {\n         case TT_EORECORD:\n             record.add(tkn.content.toString());\n             break;\n         case TT_EOF:\n-            ret \u003d null;\n+            if (tkn.isReady) {\n+                record.add(tkn.content.toString());\n+            } else {\n+                ret \u003d null;\n+            }\n             break;\n         case TT_INVALID:\n         default:\n             throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n     }\n     if (record.size() \u003e 0) {\n         ret \u003d new String[record.size()];\n         record.toArray(ret);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": {
      "type": "Yfilerename",
      "commitMessage": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:42 PM",
      "commitName": "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:41 PM",
      "commitNameOld": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[] getLine() throws IOException {\n    Vector record \u003d new Vector();\n    String[] ret \u003d new String[0];\n    Token tkn;\n    while ((tkn \u003d nextToken()).type \u003d\u003d TT_TOKEN) {\n        record.add(tkn.content.toString());\n    }\n    switch(tkn.type) {\n        case TT_EORECORD:\n            record.add(tkn.content.toString());\n            break;\n        case TT_EOF:\n            ret \u003d null;\n            break;\n        case TT_INVALID:\n        default:\n            throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n    }\n    if (record.size() \u003e 0) {\n        ret \u003d new String[record.size()];\n        record.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 250,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line \n       (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java",
        "newPath": "src/java/org/apache/commons/csv/CSVParser.java"
      }
    },
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": {
      "type": "Yintroduced",
      "commitMessage": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:41 PM",
      "commitName": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,24 @@\n+public String[] getLine() throws IOException {\n+    Vector record \u003d new Vector();\n+    String[] ret \u003d new String[0];\n+    Token tkn;\n+    while ((tkn \u003d nextToken()).type \u003d\u003d TT_TOKEN) {\n+        record.add(tkn.content.toString());\n+    }\n+    switch(tkn.type) {\n+        case TT_EORECORD:\n+            record.add(tkn.content.toString());\n+            break;\n+        case TT_EOF:\n+            ret \u003d null;\n+            break;\n+        case TT_INVALID:\n+        default:\n+            throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n+    }\n+    if (record.size() \u003e 0) {\n+        ret \u003d new String[record.size()];\n+        record.toArray(ret);\n+    }\n+    return ret;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String[] getLine() throws IOException {\n    Vector record \u003d new Vector();\n    String[] ret \u003d new String[0];\n    Token tkn;\n    while ((tkn \u003d nextToken()).type \u003d\u003d TT_TOKEN) {\n        record.add(tkn.content.toString());\n    }\n    switch(tkn.type) {\n        case TT_EORECORD:\n            record.add(tkn.content.toString());\n            break;\n        case TT_EOF:\n            ret \u003d null;\n            break;\n        case TT_INVALID:\n        default:\n            throw new IOException(\"(line \" + getLineNumber() + \") invalid parse sequence\");\n    }\n    if (record.size() \u003e 0) {\n        ret \u003d new String[record.size()];\n        record.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java",
      "functionStartLine": 250,
      "functionName": "getLine",
      "functionAnnotation": "",
      "functionDoc": "Parses from the current point in the stream til\nthe end of the current line.\n\n@return array of values til end of line \n       (\u0027null\u0027 when end of file has been reached)\n@throws IOException on parse error or input read-failure\n"
    }
  }
}