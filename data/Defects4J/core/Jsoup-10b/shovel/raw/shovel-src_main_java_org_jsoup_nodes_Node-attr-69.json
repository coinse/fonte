{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-10b",
  "repositoryPath": "/tmp/Jsoup-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Node.java",
  "functionName": "attr",
  "functionId": "attr___attributeKey-String",
  "sourceFilePath": "src/main/java/org/jsoup/nodes/Node.java",
  "functionAnnotation": "",
  "functionDoc": "Get an attribute\u0027s value by its key.\n\u003cp/\u003e\nTo get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\nwhich is a shortcut to the {@link #absUrl} method.\nE.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #attributes()\n@see #hasAttr(String)\n@see #absUrl(String)\n",
  "functionStartLine": 69,
  "functionEndLine": 77,
  "numCommitsSeen": 40,
  "timeTaken": 842,
  "changeHistory": [
    "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2",
    "e322266704817edd0a19e05207a15b791ca160b6",
    "43e16a608ddc00981c92cf3772c350c8b7e934dc",
    "d23db47db68a1b25b90e4ce255156e9758697ed2",
    "b04c5412eb75a7a35925896db7121c3a2c67e1c4"
  ],
  "changeHistoryShort": {
    "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2": "Ydocchange",
    "e322266704817edd0a19e05207a15b791ca160b6": "Ymultichange(Ybodychange,Ydocchange)",
    "43e16a608ddc00981c92cf3772c350c8b7e934dc": "Ydocchange",
    "d23db47db68a1b25b90e4ce255156e9758697ed2": "Ybodychange",
    "b04c5412eb75a7a35925896db7121c3a2c67e1c4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2": {
      "type": "Ydocchange",
      "commitMessage": "Dropped \"get\"\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e5cd584705f746893f75e85cf7acdb2d7a0db1af",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public String attr(String attributeKey) {\n    Validate.notNull(attributeKey);\n    if (hasAttr(attributeKey))\n        return attributes.get(attributeKey);\n    else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n        return absUrl(attributeKey.substring(\"abs:\".length()));\n    else\n        return \"\";\n}",
      "path": "src/main/java/org/jsoup/nodes/Node.java",
      "functionStartLine": 52,
      "functionName": "attr",
      "functionAnnotation": "",
      "functionDoc": "Get an attribute\u0027s value by its key.\n\u003cp/\u003e\nTo get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\nwhich is a shortcut to the {@link #absUrl} method.\nE.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #attributes()\n@see #hasAttr(String)\n@see #absUrl(String)\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Get an attribute\u0027s value by its key.\n\u003cp/\u003e\nTo get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\nwhich is a shortcut to the {@link #absUrl} method.\nE.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #getAttributes()\n@see #hasAttr(String)\n@see #absUrl(String)\n",
        "newValue": "Get an attribute\u0027s value by its key.\n\u003cp/\u003e\nTo get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\nwhich is a shortcut to the {@link #absUrl} method.\nE.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #attributes()\n@see #hasAttr(String)\n@see #absUrl(String)\n"
      }
    },
    "e322266704817edd0a19e05207a15b791ca160b6": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Implemented \"abs:\" virtual attribute prefix for absolute URLs.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e322266704817edd0a19e05207a15b791ca160b6",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented \"abs:\" virtual attribute prefix for absolute URLs.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "e322266704817edd0a19e05207a15b791ca160b6",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "83b8d1a6c8db2d34fbb344ae3125781978910725",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "public String attr(String attributeKey) {\n    Validate.notNull(attributeKey);\n    if (hasAttr(attributeKey))\n        return attributes.get(attributeKey);\n    else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n        return absUrl(attributeKey.substring(\"abs:\".length()));\n    else\n        return \"\";\n}",
          "path": "src/main/java/org/jsoup/nodes/Node.java",
          "functionStartLine": 52,
          "functionName": "attr",
          "functionAnnotation": "",
          "functionDoc": "Get an attribute\u0027s value by its key.\n\u003cp/\u003e\nTo get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\nwhich is a shortcut to the {@link #absUrl} method.\nE.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #getAttributes()\n@see #hasAttr(String)\n@see #absUrl(String)\n",
          "diff": "@@ -1,4 +1,9 @@\n public String attr(String attributeKey) {\n-    String value \u003d attributes.get(attributeKey);\n-    return value \u003d\u003d null ? \"\" : value;\n+    Validate.notNull(attributeKey);\n+    if (hasAttr(attributeKey))\n+        return attributes.get(attributeKey);\n+    else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n+        return absUrl(attributeKey.substring(\"abs:\".length()));\n+    else\n+        return \"\";\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Implemented \"abs:\" virtual attribute prefix for absolute URLs.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "e322266704817edd0a19e05207a15b791ca160b6",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "83b8d1a6c8db2d34fbb344ae3125781978910725",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "public String attr(String attributeKey) {\n    Validate.notNull(attributeKey);\n    if (hasAttr(attributeKey))\n        return attributes.get(attributeKey);\n    else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n        return absUrl(attributeKey.substring(\"abs:\".length()));\n    else\n        return \"\";\n}",
          "path": "src/main/java/org/jsoup/nodes/Node.java",
          "functionStartLine": 52,
          "functionName": "attr",
          "functionAnnotation": "",
          "functionDoc": "Get an attribute\u0027s value by its key.\n\u003cp/\u003e\nTo get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\nwhich is a shortcut to the {@link #absUrl} method.\nE.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #getAttributes()\n@see #hasAttr(String)\n@see #absUrl(String)\n",
          "diff": "@@ -1,4 +1,9 @@\n public String attr(String attributeKey) {\n-    String value \u003d attributes.get(attributeKey);\n-    return value \u003d\u003d null ? \"\" : value;\n+    Validate.notNull(attributeKey);\n+    if (hasAttr(attributeKey))\n+        return attributes.get(attributeKey);\n+    else if (attributeKey.toLowerCase().startsWith(\"abs:\"))\n+        return absUrl(attributeKey.substring(\"abs:\".length()));\n+    else\n+        return \"\";\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Get an attribute.\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #getAttributes()\n@see #hasAttr(String)\n",
            "newValue": "Get an attribute\u0027s value by its key.\n\u003cp/\u003e\nTo get an absolute URL from an attribute that may be a relative URL, prefix the key with \u003ccode\u003e\u003cb\u003eabs\u003c/b\u003e\u003c/code\u003e,\nwhich is a shortcut to the {@link #absUrl} method.\nE.g.: \u003cblockquote\u003e\u003ccode\u003eString url \u003d a.attr(\"abs:href\");\u003c/code\u003e\u003c/blockquote\u003e\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #getAttributes()\n@see #hasAttr(String)\n@see #absUrl(String)\n"
          }
        }
      ]
    },
    "43e16a608ddc00981c92cf3772c350c8b7e934dc": {
      "type": "Ydocchange",
      "commitMessage": "Attribute helpers in Element and Elements.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "43e16a608ddc00981c92cf3772c350c8b7e934dc",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "d23db47db68a1b25b90e4ce255156e9758697ed2",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public String attr(String attributeKey) {\n    String value \u003d attributes.get(attributeKey);\n    return value \u003d\u003d null ? \"\" : value;\n}",
      "path": "src/main/java/org/jsoup/nodes/Node.java",
      "functionStartLine": 47,
      "functionName": "attr",
      "functionAnnotation": "",
      "functionDoc": "Get an attribute.\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #getAttributes()\n@see #hasAttr(String)\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Get an attribute.\n\n@param attributeKey The attribute key.\n@return The attribute, or empty string if not present (to avoid nulls).\n@see #getAttributes()\n@see #hasAttr(String)\n"
      }
    },
    "d23db47db68a1b25b90e4ce255156e9758697ed2": {
      "type": "Ybodychange",
      "commitMessage": "Implement baseURIs for all Nodes, and absolute URL attribute getter.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "d23db47db68a1b25b90e4ce255156e9758697ed2",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "1f3cfcfb08a5e7454e61513389b814c7da6072ac",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public String attr(String attributeKey) {\n    String value \u003d attributes.get(attributeKey);\n    return value \u003d\u003d null ? \"\" : value;\n}",
      "path": "src/main/java/org/jsoup/nodes/Node.java",
      "functionStartLine": 40,
      "functionName": "attr",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,4 @@\n public String attr(String attributeKey) {\n-    return attributes.get(attributeKey);\n+    String value \u003d attributes.get(attributeKey);\n+    return value \u003d\u003d null ? \"\" : value;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b04c5412eb75a7a35925896db7121c3a2c67e1c4": {
      "type": "Yintroduced",
      "commitMessage": "Element child(int) method, attr(key) method\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "b04c5412eb75a7a35925896db7121c3a2c67e1c4",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,3 @@\n+public String attr(String attributeKey) {\n+    return attributes.get(attributeKey);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String attr(String attributeKey) {\n    return attributes.get(attributeKey);\n}",
      "path": "src/main/java/org/jsoup/nodes/Node.java",
      "functionStartLine": 32,
      "functionName": "attr",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}