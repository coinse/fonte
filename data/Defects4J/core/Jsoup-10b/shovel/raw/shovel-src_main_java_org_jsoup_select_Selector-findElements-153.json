{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-10b",
  "repositoryPath": "/tmp/Jsoup-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Selector.java",
  "functionName": "findElements",
  "functionId": "findElements",
  "sourceFilePath": "src/main/java/org/jsoup/select/Selector.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 153,
  "functionEndLine": 183,
  "numCommitsSeen": 31,
  "timeTaken": 768,
  "changeHistory": [
    "2217137d9254f124e01aa935628a4076f7478995",
    "eb1edd463b1f3b52b541d58487718676445d0d34",
    "916d5399a698ccf3eb2e0f02f4cad234fedec177",
    "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
    "cf3676c534e92052acf870c71e2fa8fb9c060fe6",
    "214c5686b075152d2bf8995731632080ed8f8e83",
    "aec561f3328980182f299e61eaae45420245141b",
    "5eecccd3eae2d7af9c8426473e9ee53bc01bc7c0",
    "72fe7662416118598bc0af126c15cba3ca09d9b4"
  ],
  "changeHistoryShort": {
    "2217137d9254f124e01aa935628a4076f7478995": "Ybodychange",
    "eb1edd463b1f3b52b541d58487718676445d0d34": "Ybodychange",
    "916d5399a698ccf3eb2e0f02f4cad234fedec177": "Ybodychange",
    "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23": "Ybodychange",
    "cf3676c534e92052acf870c71e2fa8fb9c060fe6": "Ybodychange",
    "214c5686b075152d2bf8995731632080ed8f8e83": "Ybodychange",
    "aec561f3328980182f299e61eaae45420245141b": "Ybodychange",
    "5eecccd3eae2d7af9c8426473e9ee53bc01bc7c0": "Ybodychange",
    "72fe7662416118598bc0af126c15cba3ca09d9b4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2217137d9254f124e01aa935628a4076f7478995": {
      "type": "Ybodychange",
      "commitMessage": "Added support for selectors :containsOwn(text) and :matchesOwn(regex), to supplement Element.ownText().\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2217137d9254f124e01aa935628a4076f7478995",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "18e9a8f2ba83bd50dff8766bb0dab902a317f2f5",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        return contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        return matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        return matches(true);\n    } else {\n        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 152,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,31 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n     } else if (tq.matches(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n     } else if (tq.matchChomp(\":lt(\")) {\n         return indexLessThan();\n     } else if (tq.matchChomp(\":gt(\")) {\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n     } else if (tq.matches(\":has(\")) {\n         return has();\n     } else if (tq.matches(\":contains(\")) {\n-        return contains();\n+        return contains(false);\n+    } else if (tq.matches(\":containsOwn(\")) {\n+        return contains(true);\n     } else if (tq.matches(\":matches(\")) {\n-        return matches();\n+        return matches(false);\n+    } else if (tq.matches(\":matchesOwn(\")) {\n+        return matches(true);\n     } else {\n         throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eb1edd463b1f3b52b541d58487718676445d0d34": {
      "type": "Ybodychange",
      "commitMessage": "Fixed support for character class regular expressions in [attr\u003d~regex] selector\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "eb1edd463b1f3b52b541d58487718676445d0d34",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e5f6e084f755969196ca9a87c6b334f7125359aa",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matches(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains();\n    } else if (tq.matches(\":matches(\")) {\n        return matches();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 149,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n-    } else if (tq.matchChomp(\"[\")) {\n+    } else if (tq.matches(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n     } else if (tq.matchChomp(\":lt(\")) {\n         return indexLessThan();\n     } else if (tq.matchChomp(\":gt(\")) {\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n     } else if (tq.matches(\":has(\")) {\n         return has();\n     } else if (tq.matches(\":contains(\")) {\n         return contains();\n     } else if (tq.matches(\":matches(\")) {\n         return matches();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "916d5399a698ccf3eb2e0f02f4cad234fedec177": {
      "type": "Ybodychange",
      "commitMessage": "Implemented :matches(regex) selector.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "916d5399a698ccf3eb2e0f02f4cad234fedec177",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains();\n    } else if (tq.matches(\":matches(\")) {\n        return matches();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 146,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,27 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n     } else if (tq.matchChomp(\":lt(\")) {\n         return indexLessThan();\n     } else if (tq.matchChomp(\":gt(\")) {\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n     } else if (tq.matches(\":has(\")) {\n         return has();\n     } else if (tq.matches(\":contains(\")) {\n         return contains();\n+    } else if (tq.matches(\":matches(\")) {\n+        return matches();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23": {
      "type": "Ybodychange",
      "commitMessage": "Updated TokenQueue so :contains(text) can be escaped, if looking\nfor ( or ) within text\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "cf3676c534e92052acf870c71e2fa8fb9c060fe6",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matches(\":contains(\")) {\n        return contains();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 145,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n     } else if (tq.matchChomp(\":lt(\")) {\n         return indexLessThan();\n     } else if (tq.matchChomp(\":gt(\")) {\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n     } else if (tq.matches(\":has(\")) {\n         return has();\n-    } else if (tq.matchChomp(\":contains(\")) {\n+    } else if (tq.matches(\":contains(\")) {\n         return contains();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf3676c534e92052acf870c71e2fa8fb9c060fe6": {
      "type": "Ybodychange",
      "commitMessage": "Upgraded the selector query parser to allow nested selectors like \u0027div:has(p:has(span))\u0027\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "cf3676c534e92052acf870c71e2fa8fb9c060fe6",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "97d203b3e70d9f2387fb6b11fb115b182e1f5e41",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        return has();\n    } else if (tq.matchChomp(\":contains(\")) {\n        return contains();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 145,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n     } else if (tq.matchChomp(\":lt(\")) {\n         return indexLessThan();\n     } else if (tq.matchChomp(\":gt(\")) {\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n-    } else if (tq.matchChomp(\":has(\")) {\n+    } else if (tq.matches(\":has(\")) {\n         return has();\n     } else if (tq.matchChomp(\":contains(\")) {\n         return contains();\n     } else {\n-        throw new SelectorParseException(\"Could not parse query \" + query);\n+        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "214c5686b075152d2bf8995731632080ed8f8e83": {
      "type": "Ybodychange",
      "commitMessage": "Added :contains(text) selector\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "214c5686b075152d2bf8995731632080ed8f8e83",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "aec561f3328980182f299e61eaae45420245141b",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matchChomp(\":has(\")) {\n        return has();\n    } else if (tq.matchChomp(\":contains(\")) {\n        return contains();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \" + query);\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 145,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,25 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n     } else if (tq.matchChomp(\":lt(\")) {\n         return indexLessThan();\n     } else if (tq.matchChomp(\":gt(\")) {\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n     } else if (tq.matchChomp(\":has(\")) {\n         return has();\n+    } else if (tq.matchChomp(\":contains(\")) {\n+        return contains();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \" + query);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aec561f3328980182f299e61eaae45420245141b": {
      "type": "Ybodychange",
      "commitMessage": "Added :has(selector) pseudo-selector.\nAdded Element#parents() and Elements#parents() methods.\n\nFixes #20\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "aec561f3328980182f299e61eaae45420245141b",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "5eecccd3eae2d7af9c8426473e9ee53bc01bc7c0",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else if (tq.matchChomp(\":has(\")) {\n        return has();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \" + query);\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 144,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,23 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n     } else if (tq.matchChomp(\":lt(\")) {\n         return indexLessThan();\n     } else if (tq.matchChomp(\":gt(\")) {\n         return indexGreaterThan();\n     } else if (tq.matchChomp(\":eq(\")) {\n         return indexEquals();\n+    } else if (tq.matchChomp(\":has(\")) {\n+        return has();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \" + query);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5eecccd3eae2d7af9c8426473e9ee53bc01bc7c0": {
      "type": "Ybodychange",
      "commitMessage": "Added selector support for :eq, :lt, and gt\n\nCloses #16\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "5eecccd3eae2d7af9c8426473e9ee53bc01bc7c0",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "3eb8a67876703682e4156b378871911870fcaad9",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        return indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        return indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        return indexEquals();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \" + query);\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 143,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,21 @@\n private Elements findElements() {\n     if (tq.matchChomp(\"#\")) {\n         return byId();\n     } else if (tq.matchChomp(\".\")) {\n         return byClass();\n     } else if (tq.matchesWord()) {\n         return byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         return byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         return allElements();\n+    } else if (tq.matchChomp(\":lt(\")) {\n+        return indexLessThan();\n+    } else if (tq.matchChomp(\":gt(\")) {\n+        return indexGreaterThan();\n+    } else if (tq.matchChomp(\":eq(\")) {\n+        return indexEquals();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \" + query);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "72fe7662416118598bc0af126c15cba3ca09d9b4": {
      "type": "Yintroduced",
      "commitMessage": "Fixed select parser for childs.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "72fe7662416118598bc0af126c15cba3ca09d9b4",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,15 @@\n+private Elements findElements() {\n+    if (tq.matchChomp(\"#\")) {\n+        return byId();\n+    } else if (tq.matchChomp(\".\")) {\n+        return byClass();\n+    } else if (tq.matchesWord()) {\n+        return byTag();\n+    } else if (tq.matchChomp(\"[\")) {\n+        return byAttribute();\n+    } else if (tq.matchChomp(\"*\")) {\n+        return allElements();\n+    } else {\n+        throw new SelectorParseException(\"Could not parse query \" + query);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Elements findElements() {\n    if (tq.matchChomp(\"#\")) {\n        return byId();\n    } else if (tq.matchChomp(\".\")) {\n        return byClass();\n    } else if (tq.matchesWord()) {\n        return byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        return byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        return allElements();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \" + query);\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 75,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}