{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-10b",
  "repositoryPath": "/tmp/Jsoup-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "addChildToParent",
  "functionId": "addChildToParent___child-Element__isEmptyElement-boolean",
  "sourceFilePath": "src/main/java/org/jsoup/parser/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 234,
  "functionEndLine": 262,
  "numCommitsSeen": 67,
  "timeTaken": 956,
  "changeHistory": [
    "0081d162cca8ad23b500b53799195fec644f261b",
    "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2",
    "3205f0ef9409bb622f66315983830aa89d9313cf",
    "83d1848144abf29b501d59e0c3ec41e40c9cf020",
    "7f653fab63ce7ae048a6fba1c2f529dc586369ed",
    "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80",
    "d23db47db68a1b25b90e4ce255156e9758697ed2",
    "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d"
  ],
  "changeHistoryShort": {
    "0081d162cca8ad23b500b53799195fec644f261b": "Ybodychange",
    "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2": "Ybodychange",
    "3205f0ef9409bb622f66315983830aa89d9313cf": "Ybodychange",
    "83d1848144abf29b501d59e0c3ec41e40c9cf020": "Ybodychange",
    "7f653fab63ce7ae048a6fba1c2f529dc586369ed": "Ymultichange(Yparameterchange,Ybodychange)",
    "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80": "Ybodychange",
    "d23db47db68a1b25b90e4ce255156e9758697ed2": "Ybodychange",
    "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0081d162cca8ad23b500b53799195fec644f261b": {
      "type": "Ybodychange",
      "commitMessage": "Improved implicit close tag heuristic detection when parsing malformed HTML.\n\nFixes an issue where appending / prepending rows to a table (or  to similar implicit\nelement structures) would create a redundant wrapping elements.\n\nFixes #21\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "0081d162cca8ad23b500b53799195fec644f261b",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "bb4ead7c350695c1ed3c52d028090da4d4cecd1e",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Element addChildToParent(Element child, boolean isEmptyElement) {\n    Element parent \u003d popStackToSuitableContainer(child.tag());\n    Tag childTag \u003d child.tag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor \u0026\u0026 !relaxed) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        Element implicit \u003d new Element(parentTag, baseUri);\n        if (child.tag().equals(bodyTag)) {\n            Element head \u003d new Element(headTag, baseUri);\n            implicit.appendChild(head);\n        }\n        implicit.appendChild(child);\n        Element root \u003d addChildToParent(implicit, false);\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return root;\n    }\n    parent.appendChild(child);\n    if (!isEmptyElement)\n        stack.addLast(child);\n    return parent;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 225,
      "functionName": "addChildToParent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n private Element addChildToParent(Element child, boolean isEmptyElement) {\n     Element parent \u003d popStackToSuitableContainer(child.tag());\n     Tag childTag \u003d child.tag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n-    if (!validAncestor) {\n+    if (!validAncestor \u0026\u0026 !relaxed) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n         Element implicit \u003d new Element(parentTag, baseUri);\n         if (child.tag().equals(bodyTag)) {\n             Element head \u003d new Element(headTag, baseUri);\n             implicit.appendChild(head);\n         }\n         implicit.appendChild(child);\n         Element root \u003d addChildToParent(implicit, false);\n         if (!isEmptyElement)\n             stack.addLast(child);\n         return root;\n     }\n     parent.appendChild(child);\n     if (!isEmptyElement)\n         stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2": {
      "type": "Ybodychange",
      "commitMessage": "Dropped \"get\"\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "37d4c1f1d3297fd078dd8d1574b7f7c2357a99b4",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private Element addChildToParent(Element child, boolean isEmptyElement) {\n    Element parent \u003d popStackToSuitableContainer(child.tag());\n    Tag childTag \u003d child.tag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        Element implicit \u003d new Element(parentTag, baseUri);\n        if (child.tag().equals(bodyTag)) {\n            Element head \u003d new Element(headTag, baseUri);\n            implicit.appendChild(head);\n        }\n        implicit.appendChild(child);\n        Element root \u003d addChildToParent(implicit, false);\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return root;\n    }\n    parent.appendChild(child);\n    if (!isEmptyElement)\n        stack.addLast(child);\n    return parent;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 195,
      "functionName": "addChildToParent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n private Element addChildToParent(Element child, boolean isEmptyElement) {\n-    Element parent \u003d popStackToSuitableContainer(child.getTag());\n-    Tag childTag \u003d child.getTag();\n+    Element parent \u003d popStackToSuitableContainer(child.tag());\n+    Tag childTag \u003d child.tag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n     if (!validAncestor) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n         Element implicit \u003d new Element(parentTag, baseUri);\n-        if (child.getTag().equals(bodyTag)) {\n+        if (child.tag().equals(bodyTag)) {\n             Element head \u003d new Element(headTag, baseUri);\n             implicit.appendChild(head);\n         }\n         implicit.appendChild(child);\n         Element root \u003d addChildToParent(implicit, false);\n         if (!isEmptyElement)\n             stack.addLast(child);\n         return root;\n     }\n     parent.appendChild(child);\n     if (!isEmptyElement)\n         stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3205f0ef9409bb622f66315983830aa89d9313cf": {
      "type": "Ybodychange",
      "commitMessage": "Removed StartTag\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "3205f0ef9409bb622f66315983830aa89d9313cf",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "abdf22714e557304d9f6782d30da9b7254ce017c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Element addChildToParent(Element child, boolean isEmptyElement) {\n    Element parent \u003d popStackToSuitableContainer(child.getTag());\n    Tag childTag \u003d child.getTag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        Element implicit \u003d new Element(parentTag, baseUri);\n        if (child.getTag().equals(bodyTag)) {\n            Element head \u003d new Element(headTag, baseUri);\n            implicit.appendChild(head);\n        }\n        implicit.appendChild(child);\n        Element root \u003d addChildToParent(implicit, false);\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return root;\n    }\n    parent.appendChild(child);\n    if (!isEmptyElement)\n        stack.addLast(child);\n    return parent;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 193,
      "functionName": "addChildToParent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,22 @@\n private Element addChildToParent(Element child, boolean isEmptyElement) {\n     Element parent \u003d popStackToSuitableContainer(child.getTag());\n     Tag childTag \u003d child.getTag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n     if (!validAncestor) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n-        StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n-        Element implicit \u003d new Element(parentStart);\n+        Element implicit \u003d new Element(parentTag, baseUri);\n         if (child.getTag().equals(bodyTag)) {\n-            Element head \u003d new Element(new StartTag(headTag, baseUri));\n+            Element head \u003d new Element(headTag, baseUri);\n             implicit.appendChild(head);\n         }\n         implicit.appendChild(child);\n         Element root \u003d addChildToParent(implicit, false);\n         if (!isEmptyElement)\n             stack.addLast(child);\n         return root;\n     }\n     parent.appendChild(child);\n     if (!isEmptyElement)\n         stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83d1848144abf29b501d59e0c3ec41e40c9cf020": {
      "type": "Ybodychange",
      "commitMessage": "Rename Element.addChild to appendChild.\n\nAlso implement Element.addElement(String tagName)\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "83d1848144abf29b501d59e0c3ec41e40c9cf020",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "4899674eccbb5b188a97915db8b858a3fd618098",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Element addChildToParent(Element child, boolean isEmptyElement) {\n    Element parent \u003d popStackToSuitableContainer(child.getTag());\n    Tag childTag \u003d child.getTag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n        Element implicit \u003d new Element(parentStart);\n        if (child.getTag().equals(bodyTag)) {\n            Element head \u003d new Element(new StartTag(headTag, baseUri));\n            implicit.appendChild(head);\n        }\n        implicit.appendChild(child);\n        Element root \u003d addChildToParent(implicit, false);\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return root;\n    }\n    parent.appendChild(child);\n    if (!isEmptyElement)\n        stack.addLast(child);\n    return parent;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 194,
      "functionName": "addChildToParent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n private Element addChildToParent(Element child, boolean isEmptyElement) {\n     Element parent \u003d popStackToSuitableContainer(child.getTag());\n     Tag childTag \u003d child.getTag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n     if (!validAncestor) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n         StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n         Element implicit \u003d new Element(parentStart);\n         if (child.getTag().equals(bodyTag)) {\n             Element head \u003d new Element(new StartTag(headTag, baseUri));\n-            implicit.addChild(head);\n+            implicit.appendChild(head);\n         }\n-        implicit.addChild(child);\n+        implicit.appendChild(child);\n         Element root \u003d addChildToParent(implicit, false);\n         if (!isEmptyElement)\n             stack.addLast(child);\n         return root;\n     }\n-    parent.addChild(child);\n+    parent.appendChild(child);\n     if (!isEmptyElement)\n         stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f653fab63ce7ae048a6fba1c2f529dc586369ed": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Handle empty (self closing) blocks.\n\n\u003cdiv/\u003e\u003cdiv\u003e\u003c/div\u003e was parsing as \u003cdiv\u003e\u003cdiv\u003e\u003c/div\u003e\u003c/div\u003e. No longer.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "7f653fab63ce7ae048a6fba1c2f529dc586369ed",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Handle empty (self closing) blocks.\n\n\u003cdiv/\u003e\u003cdiv\u003e\u003c/div\u003e was parsing as \u003cdiv\u003e\u003cdiv\u003e\u003c/div\u003e\u003c/div\u003e. No longer.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "7f653fab63ce7ae048a6fba1c2f529dc586369ed",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "00734226f07e57a2d13f82a4b395b4bb7b9ee20b",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "private Element addChildToParent(Element child, boolean isEmptyElement) {\n    Element parent \u003d popStackToSuitableContainer(child.getTag());\n    Tag childTag \u003d child.getTag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n        Element implicit \u003d new Element(parentStart);\n        if (child.getTag().equals(bodyTag)) {\n            Element head \u003d new Element(new StartTag(headTag, baseUri));\n            implicit.addChild(head);\n        }\n        implicit.addChild(child);\n        Element root \u003d addChildToParent(implicit, false);\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return root;\n    }\n    parent.addChild(child);\n    if (!isEmptyElement)\n        stack.addLast(child);\n    return parent;\n}",
          "path": "src/main/java/org/jsoup/parser/Parser.java",
          "functionStartLine": 183,
          "functionName": "addChildToParent",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,22 +1,23 @@\n-private Element addChildToParent(Element child) {\n+private Element addChildToParent(Element child, boolean isEmptyElement) {\n     Element parent \u003d popStackToSuitableContainer(child.getTag());\n     Tag childTag \u003d child.getTag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n     if (!validAncestor) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n         StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n         Element implicit \u003d new Element(parentStart);\n         if (child.getTag().equals(bodyTag)) {\n             Element head \u003d new Element(new StartTag(headTag, baseUri));\n             implicit.addChild(head);\n         }\n         implicit.addChild(child);\n-        Element root \u003d addChildToParent(implicit);\n-        stack.addLast(child);\n+        Element root \u003d addChildToParent(implicit, false);\n+        if (!isEmptyElement)\n+            stack.addLast(child);\n         return root;\n     }\n     parent.addChild(child);\n-    if (!childTag.isEmpty())\n+    if (!isEmptyElement)\n         stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[child-Element]",
            "newValue": "[child-Element, isEmptyElement-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Handle empty (self closing) blocks.\n\n\u003cdiv/\u003e\u003cdiv\u003e\u003c/div\u003e was parsing as \u003cdiv\u003e\u003cdiv\u003e\u003c/div\u003e\u003c/div\u003e. No longer.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "7f653fab63ce7ae048a6fba1c2f529dc586369ed",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "00734226f07e57a2d13f82a4b395b4bb7b9ee20b",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "private Element addChildToParent(Element child, boolean isEmptyElement) {\n    Element parent \u003d popStackToSuitableContainer(child.getTag());\n    Tag childTag \u003d child.getTag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n        Element implicit \u003d new Element(parentStart);\n        if (child.getTag().equals(bodyTag)) {\n            Element head \u003d new Element(new StartTag(headTag, baseUri));\n            implicit.addChild(head);\n        }\n        implicit.addChild(child);\n        Element root \u003d addChildToParent(implicit, false);\n        if (!isEmptyElement)\n            stack.addLast(child);\n        return root;\n    }\n    parent.addChild(child);\n    if (!isEmptyElement)\n        stack.addLast(child);\n    return parent;\n}",
          "path": "src/main/java/org/jsoup/parser/Parser.java",
          "functionStartLine": 183,
          "functionName": "addChildToParent",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,22 +1,23 @@\n-private Element addChildToParent(Element child) {\n+private Element addChildToParent(Element child, boolean isEmptyElement) {\n     Element parent \u003d popStackToSuitableContainer(child.getTag());\n     Tag childTag \u003d child.getTag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n     if (!validAncestor) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n         StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n         Element implicit \u003d new Element(parentStart);\n         if (child.getTag().equals(bodyTag)) {\n             Element head \u003d new Element(new StartTag(headTag, baseUri));\n             implicit.addChild(head);\n         }\n         implicit.addChild(child);\n-        Element root \u003d addChildToParent(implicit);\n-        stack.addLast(child);\n+        Element root \u003d addChildToParent(implicit, false);\n+        if (!isEmptyElement)\n+            stack.addLast(child);\n         return root;\n     }\n     parent.addChild(child);\n-    if (!childTag.isEmpty())\n+    if (!isEmptyElement)\n         stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80": {
      "type": "Ybodychange",
      "commitMessage": "Updated parser to support namespaced attributes (i.e xml:lang\u003den).\nImplemented Elements first(), last(), attr(), hasAttr() methods.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "8bb732b7ccb51f4006fa7fa221762755eed949c7",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Element addChildToParent(Element child) {\n    Element parent \u003d popStackToSuitableContainer(child.getTag());\n    Tag childTag \u003d child.getTag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n        Element implicit \u003d new Element(parentStart);\n        if (child.getTag().equals(bodyTag)) {\n            Element head \u003d new Element(new StartTag(headTag, baseUri));\n            implicit.addChild(head);\n        }\n        implicit.addChild(child);\n        Element root \u003d addChildToParent(implicit);\n        stack.addLast(child);\n        return root;\n    }\n    parent.addChild(child);\n    if (!childTag.isEmpty())\n        stack.addLast(child);\n    return parent;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 165,
      "functionName": "addChildToParent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,22 @@\n private Element addChildToParent(Element child) {\n     Element parent \u003d popStackToSuitableContainer(child.getTag());\n     Tag childTag \u003d child.getTag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n     if (!validAncestor) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n         StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n         Element implicit \u003d new Element(parentStart);\n         if (child.getTag().equals(bodyTag)) {\n             Element head \u003d new Element(new StartTag(headTag, baseUri));\n             implicit.addChild(head);\n         }\n         implicit.addChild(child);\n         Element root \u003d addChildToParent(implicit);\n         stack.addLast(child);\n         return root;\n     }\n     parent.addChild(child);\n-    stack.addLast(child);\n+    if (!childTag.isEmpty())\n+        stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d23db47db68a1b25b90e4ce255156e9758697ed2": {
      "type": "Ybodychange",
      "commitMessage": "Implement baseURIs for all Nodes, and absolute URL attribute getter.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "d23db47db68a1b25b90e4ce255156e9758697ed2",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "ce691239d40e469b75fa22b0bb6a065202c475a7",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Element addChildToParent(Element child) {\n    Element parent \u003d popStackToSuitableContainer(child.getTag());\n    Tag childTag \u003d child.getTag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n        Element implicit \u003d new Element(parentStart);\n        if (child.getTag().equals(bodyTag)) {\n            Element head \u003d new Element(new StartTag(headTag, baseUri));\n            implicit.addChild(head);\n        }\n        implicit.addChild(child);\n        Element root \u003d addChildToParent(implicit);\n        stack.addLast(child);\n        return root;\n    }\n    parent.addChild(child);\n    stack.addLast(child);\n    return parent;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 165,
      "functionName": "addChildToParent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n private Element addChildToParent(Element child) {\n     Element parent \u003d popStackToSuitableContainer(child.getTag());\n     Tag childTag \u003d child.getTag();\n     boolean validAncestor \u003d stackHasValidParent(childTag);\n     if (!validAncestor) {\n         Tag parentTag \u003d childTag.getImplicitParent();\n-        StartTag parentStart \u003d new StartTag(parentTag);\n+        StartTag parentStart \u003d new StartTag(parentTag, baseUri);\n         Element implicit \u003d new Element(parentStart);\n         if (child.getTag().equals(bodyTag)) {\n-            Element head \u003d new Element(new StartTag(headTag));\n+            Element head \u003d new Element(new StartTag(headTag, baseUri));\n             implicit.addChild(head);\n         }\n         implicit.addChild(child);\n         Element root \u003d addChildToParent(implicit);\n         stack.addLast(child);\n         return root;\n     }\n     parent.addChild(child);\n     stack.addLast(child);\n     return parent;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d": {
      "type": "Yintroduced",
      "commitMessage": "Implicit parent creation for elements, more general document structure creation.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,21 @@\n+private Element addChildToParent(Element child) {\n+    Element parent \u003d popStackToSuitableContainer(child.getTag());\n+    Tag childTag \u003d child.getTag();\n+    boolean validAncestor \u003d stackHasValidParent(childTag);\n+    if (!validAncestor) {\n+        Tag parentTag \u003d childTag.getImplicitParent();\n+        StartTag parentStart \u003d new StartTag(parentTag);\n+        Element implicit \u003d new Element(parentStart);\n+        if (child.getTag().equals(bodyTag)) {\n+            Element head \u003d new Element(new StartTag(headTag));\n+            implicit.addChild(head);\n+        }\n+        implicit.addChild(child);\n+        Element root \u003d addChildToParent(implicit);\n+        stack.addLast(child);\n+        return root;\n+    }\n+    parent.addChild(child);\n+    stack.addLast(child);\n+    return parent;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Element addChildToParent(Element child) {\n    Element parent \u003d popStackToSuitableContainer(child.getTag());\n    Tag childTag \u003d child.getTag();\n    boolean validAncestor \u003d stackHasValidParent(childTag);\n    if (!validAncestor) {\n        Tag parentTag \u003d childTag.getImplicitParent();\n        StartTag parentStart \u003d new StartTag(parentTag);\n        Element implicit \u003d new Element(parentStart);\n        if (child.getTag().equals(bodyTag)) {\n            Element head \u003d new Element(new StartTag(headTag));\n            implicit.addChild(head);\n        }\n        implicit.addChild(child);\n        Element root \u003d addChildToParent(implicit);\n        stack.addLast(child);\n        return root;\n    }\n    parent.addChild(child);\n    stack.addLast(child);\n    return parent;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 156,
      "functionName": "addChildToParent",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}