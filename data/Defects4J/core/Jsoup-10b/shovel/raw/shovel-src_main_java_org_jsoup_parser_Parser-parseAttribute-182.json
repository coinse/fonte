{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-10b",
  "repositoryPath": "/tmp/Jsoup-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "parseAttribute",
  "functionId": "parseAttribute",
  "sourceFilePath": "src/main/java/org/jsoup/parser/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 182,
  "functionEndLine": 212,
  "numCommitsSeen": 47,
  "timeTaken": 1249,
  "changeHistory": [
    "62afbdf6a85fec75fde38d327928a180bc5bccb3",
    "40a35750e655d5229744684086a9249b233058bf",
    "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80",
    "8bb732b7ccb51f4006fa7fa221762755eed949c7",
    "e2f6a9d19c7025431278f0d77085dde4dc2da798",
    "04025259e96d3676097e84126fb55124b92c50ed",
    "eaf6bf4ad42f86fb6c2608e4a8bb5d5fdf1e46ce",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268"
  ],
  "changeHistoryShort": {
    "62afbdf6a85fec75fde38d327928a180bc5bccb3": "Ybodychange",
    "40a35750e655d5229744684086a9249b233058bf": "Ybodychange",
    "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80": "Ybodychange",
    "8bb732b7ccb51f4006fa7fa221762755eed949c7": "Ybodychange",
    "e2f6a9d19c7025431278f0d77085dde4dc2da798": "Ybodychange",
    "04025259e96d3676097e84126fb55124b92c50ed": "Ybodychange",
    "eaf6bf4ad42f86fb6c2608e4a8bb5d5fdf1e46ce": "Ybodychange",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": "Ybodychange",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": "Yintroduced"
  },
  "changeHistoryDetails": {
    "62afbdf6a85fec75fde38d327928a180bc5bccb3": {
      "type": "Ybodychange",
      "commitMessage": "Fixed issue when parsing tags with keyless attributes.\n\nFixes #32\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "62afbdf6a85fec75fde38d327928a180bc5bccb3",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "18e9a8f2ba83bd50dff8766bb0dab902a317f2f5",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeAttributeKey();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (key.length() !\u003d 0)\n        return Attribute.createFromEncoded(key, value);\n    else {\n        if (value.length() \u003d\u003d 0)\n            tq.advance();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 181,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,28 @@\n private Attribute parseAttribute() {\n     tq.consumeWhitespace();\n     String key \u003d tq.consumeAttributeKey();\n     String value \u003d \"\";\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"\u003d\")) {\n         tq.consumeWhitespace();\n         if (tq.matchChomp(SQ)) {\n             value \u003d tq.chompTo(SQ);\n         } else if (tq.matchChomp(DQ)) {\n             value \u003d tq.chompTo(DQ);\n         } else {\n             StringBuilder valueAccum \u003d new StringBuilder();\n             while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                 valueAccum.append(tq.consume());\n             }\n             value \u003d valueAccum.toString();\n         }\n         tq.consumeWhitespace();\n     }\n     if (key.length() !\u003d 0)\n         return Attribute.createFromEncoded(key, value);\n     else {\n-        tq.consume();\n+        if (value.length() \u003d\u003d 0)\n+            tq.advance();\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40a35750e655d5229744684086a9249b233058bf": {
      "type": "Ybodychange",
      "commitMessage": "String.isEmpty() and LinkedList.peekFirst() is not part of the Java 5.0 API.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "40a35750e655d5229744684086a9249b233058bf",
      "commitAuthor": "Eivind Uggedal",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "fcab98cdd311deb3dd4fd63fef2bc6c4c397f186",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeAttributeKey();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (key.length() !\u003d 0)\n        return Attribute.createFromEncoded(key, value);\n    else {\n        tq.consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 168,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private Attribute parseAttribute() {\n     tq.consumeWhitespace();\n     String key \u003d tq.consumeAttributeKey();\n     String value \u003d \"\";\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"\u003d\")) {\n         tq.consumeWhitespace();\n         if (tq.matchChomp(SQ)) {\n             value \u003d tq.chompTo(SQ);\n         } else if (tq.matchChomp(DQ)) {\n             value \u003d tq.chompTo(DQ);\n         } else {\n             StringBuilder valueAccum \u003d new StringBuilder();\n             while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                 valueAccum.append(tq.consume());\n             }\n             value \u003d valueAccum.toString();\n         }\n         tq.consumeWhitespace();\n     }\n-    if (!key.isEmpty())\n+    if (key.length() !\u003d 0)\n         return Attribute.createFromEncoded(key, value);\n     else {\n         tq.consume();\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80": {
      "type": "Ybodychange",
      "commitMessage": "Updated parser to support namespaced attributes (i.e xml:lang\u003den).\nImplemented Elements first(), last(), attr(), hasAttr() methods.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "8bb732b7ccb51f4006fa7fa221762755eed949c7",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeAttributeKey();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (!key.isEmpty())\n        return Attribute.createFromEncoded(key, value);\n    else {\n        tq.consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 128,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private Attribute parseAttribute() {\n     tq.consumeWhitespace();\n-    String key \u003d tq.consumeWord();\n+    String key \u003d tq.consumeAttributeKey();\n     String value \u003d \"\";\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"\u003d\")) {\n         tq.consumeWhitespace();\n         if (tq.matchChomp(SQ)) {\n             value \u003d tq.chompTo(SQ);\n         } else if (tq.matchChomp(DQ)) {\n             value \u003d tq.chompTo(DQ);\n         } else {\n             StringBuilder valueAccum \u003d new StringBuilder();\n             while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                 valueAccum.append(tq.consume());\n             }\n             value \u003d valueAccum.toString();\n         }\n         tq.consumeWhitespace();\n     }\n     if (!key.isEmpty())\n         return Attribute.createFromEncoded(key, value);\n     else {\n         tq.consume();\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bb732b7ccb51f4006fa7fa221762755eed949c7": {
      "type": "Ybodychange",
      "commitMessage": "Initial test suite from real world html\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "8bb732b7ccb51f4006fa7fa221762755eed949c7",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "d23db47db68a1b25b90e4ce255156e9758697ed2",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeWord();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (!key.isEmpty())\n        return Attribute.createFromEncoded(key, value);\n    else {\n        tq.consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 128,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e2f6a9d19c7025431278f0d77085dde4dc2da798": {
      "type": "Ybodychange",
      "commitMessage": "Neatened Parser\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e2f6a9d19c7025431278f0d77085dde4dc2da798",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeWord();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (!key.isEmpty())\n        return Attribute.createFromEncoded(key, value);\n    else {\n        tq.consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 149,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private Attribute parseAttribute() {\n     tq.consumeWhitespace();\n     String key \u003d tq.consumeWord();\n     String value \u003d \"\";\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"\u003d\")) {\n         tq.consumeWhitespace();\n         if (tq.matchChomp(SQ)) {\n             value \u003d tq.chompTo(SQ);\n         } else if (tq.matchChomp(DQ)) {\n             value \u003d tq.chompTo(DQ);\n         } else {\n             StringBuilder valueAccum \u003d new StringBuilder();\n-            while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n+            while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                 valueAccum.append(tq.consume());\n             }\n             value \u003d valueAccum.toString();\n         }\n         tq.consumeWhitespace();\n     }\n     if (!key.isEmpty())\n         return Attribute.createFromEncoded(key, value);\n     else {\n         tq.consume();\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "04025259e96d3676097e84126fb55124b92c50ed": {
      "type": "Ybodychange",
      "commitMessage": "Initial, partial implementation of Selector.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "04025259e96d3676097e84126fb55124b92c50ed",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "ac95e9f55bc7ffb60febb341571d85635dada8fd",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeWord();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (!key.isEmpty())\n        return Attribute.createFromEncoded(key, value);\n    else {\n        tq.consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 141,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private Attribute parseAttribute() {\n     tq.consumeWhitespace();\n     String key \u003d tq.consumeWord();\n     String value \u003d \"\";\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"\u003d\")) {\n         tq.consumeWhitespace();\n         if (tq.matchChomp(SQ)) {\n             value \u003d tq.chompTo(SQ);\n         } else if (tq.matchChomp(DQ)) {\n             value \u003d tq.chompTo(DQ);\n         } else {\n             StringBuilder valueAccum \u003d new StringBuilder();\n-            while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(tq.peek()) \u0026\u0026 !tq.isEmpty()) {\n+            while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.matchesWhitespace() \u0026\u0026 !tq.isEmpty()) {\n                 valueAccum.append(tq.consume());\n             }\n             value \u003d valueAccum.toString();\n         }\n         tq.consumeWhitespace();\n     }\n     if (!key.isEmpty())\n         return Attribute.createFromEncoded(key, value);\n     else {\n         tq.consume();\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eaf6bf4ad42f86fb6c2608e4a8bb5d5fdf1e46ce": {
      "type": "Ybodychange",
      "commitMessage": "Handle HTML encoded (escaped) data in text nodes and attributes.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "eaf6bf4ad42f86fb6c2608e4a8bb5d5fdf1e46ce",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeWord();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(tq.peek()) \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (!key.isEmpty())\n        return Attribute.createFromEncoded(key, value);\n    else {\n        tq.consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 140,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n private Attribute parseAttribute() {\n     tq.consumeWhitespace();\n     String key \u003d tq.consumeWord();\n     String value \u003d \"\";\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"\u003d\")) {\n         tq.consumeWhitespace();\n         if (tq.matchChomp(SQ)) {\n             value \u003d tq.chompTo(SQ);\n         } else if (tq.matchChomp(DQ)) {\n             value \u003d tq.chompTo(DQ);\n         } else {\n             StringBuilder valueAccum \u003d new StringBuilder();\n             while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(tq.peek()) \u0026\u0026 !tq.isEmpty()) {\n                 valueAccum.append(tq.consume());\n             }\n             value \u003d valueAccum.toString();\n         }\n         tq.consumeWhitespace();\n     }\n     if (!key.isEmpty())\n-        return new Attribute(key, value);\n+        return Attribute.createFromEncoded(key, value);\n     else {\n         tq.consume();\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": {
      "type": "Ybodychange",
      "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Attribute parseAttribute() {\n    tq.consumeWhitespace();\n    String key \u003d tq.consumeWord();\n    String value \u003d \"\";\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"\u003d\")) {\n        tq.consumeWhitespace();\n        if (tq.matchChomp(SQ)) {\n            value \u003d tq.chompTo(SQ);\n        } else if (tq.matchChomp(DQ)) {\n            value \u003d tq.chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(tq.peek()) \u0026\u0026 !tq.isEmpty()) {\n                valueAccum.append(tq.consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        tq.consumeWhitespace();\n    }\n    if (!key.isEmpty())\n        return new Attribute(key, value);\n    else {\n        tq.consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 140,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,27 @@\n private Attribute parseAttribute() {\n-    consumeWhitespace();\n-    String key \u003d consumeWord();\n+    tq.consumeWhitespace();\n+    String key \u003d tq.consumeWord();\n     String value \u003d \"\";\n-    consumeWhitespace();\n-    if (matches(\"\u003d\")) {\n-        consume(\"\u003d\");\n-        consumeWhitespace();\n-        if (matches(SQ)) {\n-            consume(SQ);\n-            value \u003d chompTo(SQ);\n-        } else if (matches(DQ)) {\n-            consume(DQ);\n-            value \u003d chompTo(DQ);\n+    tq.consumeWhitespace();\n+    if (tq.matchChomp(\"\u003d\")) {\n+        tq.consumeWhitespace();\n+        if (tq.matchChomp(SQ)) {\n+            value \u003d tq.chompTo(SQ);\n+        } else if (tq.matchChomp(DQ)) {\n+            value \u003d tq.chompTo(DQ);\n         } else {\n             StringBuilder valueAccum \u003d new StringBuilder();\n-            while (!matches(\"/\u003e\") \u0026\u0026 !matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(queue.peekFirst())) {\n-                valueAccum.append(consume());\n+            while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(tq.peek()) \u0026\u0026 !tq.isEmpty()) {\n+                valueAccum.append(tq.consume());\n             }\n             value \u003d valueAccum.toString();\n         }\n-        consumeWhitespace();\n+        tq.consumeWhitespace();\n     }\n     if (!key.isEmpty())\n         return new Attribute(key, value);\n     else {\n-        consume();\n+        tq.consume();\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": {
      "type": "Yintroduced",
      "commitMessage": "Reimplemented parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,30 @@\n+private Attribute parseAttribute() {\n+    consumeWhitespace();\n+    String key \u003d consumeWord();\n+    String value \u003d \"\";\n+    consumeWhitespace();\n+    if (matches(\"\u003d\")) {\n+        consume(\"\u003d\");\n+        consumeWhitespace();\n+        if (matches(SQ)) {\n+            consume(SQ);\n+            value \u003d chompTo(SQ);\n+        } else if (matches(DQ)) {\n+            consume(DQ);\n+            value \u003d chompTo(DQ);\n+        } else {\n+            StringBuilder valueAccum \u003d new StringBuilder();\n+            while (!matches(\"/\u003e\") \u0026\u0026 !matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(queue.peekFirst())) {\n+                valueAccum.append(consume());\n+            }\n+            value \u003d valueAccum.toString();\n+        }\n+        consumeWhitespace();\n+    }\n+    if (!key.isEmpty())\n+        return new Attribute(key, value);\n+    else {\n+        consume();\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Attribute parseAttribute() {\n    consumeWhitespace();\n    String key \u003d consumeWord();\n    String value \u003d \"\";\n    consumeWhitespace();\n    if (matches(\"\u003d\")) {\n        consume(\"\u003d\");\n        consumeWhitespace();\n        if (matches(SQ)) {\n            consume(SQ);\n            value \u003d chompTo(SQ);\n        } else if (matches(DQ)) {\n            consume(DQ);\n            value \u003d chompTo(DQ);\n        } else {\n            StringBuilder valueAccum \u003d new StringBuilder();\n            while (!matches(\"/\u003e\") \u0026\u0026 !matches(\"\u003e\") \u0026\u0026 !Character.isWhitespace(queue.peekFirst())) {\n                valueAccum.append(consume());\n            }\n            value \u003d valueAccum.toString();\n        }\n        consumeWhitespace();\n    }\n    if (!key.isEmpty())\n        return new Attribute(key, value);\n    else {\n        consume();\n        return null;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 140,
      "functionName": "parseAttribute",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}