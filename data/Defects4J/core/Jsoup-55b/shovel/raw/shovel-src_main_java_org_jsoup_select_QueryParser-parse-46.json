{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-55b",
  "repositoryPath": "/tmp/Jsoup-55b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueryParser.java",
  "functionName": "parse",
  "functionId": "parse",
  "sourceFilePath": "src/main/java/org/jsoup/select/QueryParser.java",
  "functionAnnotation": "",
  "functionDoc": "Parse the query\n\n@return Evaluator\n",
  "functionStartLine": 46,
  "functionEndLine": 73,
  "numCommitsSeen": 13,
  "timeTaken": 1260,
  "changeHistory": [
    "249e5a8aae9324cc6c8caf5303a607056b15a9da",
    "64ec9cfb151f26e85c0c206ce6aba063695e47cd",
    "bbca7db20b9a45fb3d8efb29447349ed8593649c",
    "43a39b308abfbe39ea06729277d0630786b9956d",
    "b800dd756bf956aa210165073824bfcf159780fd",
    "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca",
    "e9909538549c96800dad1e94284b99575d1be628"
  ],
  "changeHistoryShort": {
    "249e5a8aae9324cc6c8caf5303a607056b15a9da": "Ybodychange",
    "64ec9cfb151f26e85c0c206ce6aba063695e47cd": "Ybodychange",
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange)",
    "43a39b308abfbe39ea06729277d0630786b9956d": "Ybodychange",
    "b800dd756bf956aa210165073824bfcf159780fd": "Ybodychange",
    "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca": "Ybodychange",
    "e9909538549c96800dad1e94284b99575d1be628": "Yintroduced"
  },
  "changeHistoryDetails": {
    "249e5a8aae9324cc6c8caf5303a607056b15a9da": {
      "type": "Ybodychange",
      "commitMessage": "Fixed parsing of group-or commas in CSS selectors.\n\nFixes #179\n",
      "commitDate": "4/2/12, 7:40 PM",
      "commitName": "249e5a8aae9324cc6c8caf5303a607056b15a9da",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "64ec9cfb151f26e85c0c206ce6aba063695e47cd",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 275.65,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "actualSource": "Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        evals.add(new StructuralEvaluator.Root());\n        combinator(tq.consume());\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (evals.size() \u003d\u003d 1)\n        return evals.get(0);\n    return new CombiningEvaluator.And(evals);\n}",
      "path": "src/main/java/org/jsoup/select/QueryParser.java",
      "functionStartLine": 44,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the query\n\n@return Evaluator\n",
      "diff": "@@ -1,30 +1,22 @@\n Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n         evals.add(new StructuralEvaluator.Root());\n         combinator(tq.consume());\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n-        if (tq.matchChomp(\",\")) {\n-            CombiningEvaluator.Or or \u003d new CombiningEvaluator.Or(evals);\n-            evals.clear();\n-            evals.add(or);\n-            while (!tq.isEmpty()) {\n-                String subQuery \u003d tq.chompTo(\",\");\n-                or.add(parse(subQuery));\n-            }\n-        } else if (tq.matchesAny(combinators)) {\n+        if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n     if (evals.size() \u003d\u003d 1)\n         return evals.get(0);\n     return new CombiningEvaluator.And(evals);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "64ec9cfb151f26e85c0c206ce6aba063695e47cd": {
      "type": "Ybodychange",
      "commitMessage": "Cleanup of selector class files\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "64ec9cfb151f26e85c0c206ce6aba063695e47cd",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        evals.add(new StructuralEvaluator.Root());\n        combinator(tq.consume());\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            CombiningEvaluator.Or or \u003d new CombiningEvaluator.Or(evals);\n            evals.clear();\n            evals.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (evals.size() \u003d\u003d 1)\n        return evals.get(0);\n    return new CombiningEvaluator.And(evals);\n}",
      "path": "src/main/java/org/jsoup/select/QueryParser.java",
      "functionStartLine": 44,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the query\n\n@return Evaluator\n",
      "diff": "@@ -1,30 +1,30 @@\n Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n-        evals.add(new RootSelector());\n+        evals.add(new StructuralEvaluator.Root());\n         combinator(tq.consume());\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n-            OrSelector or \u003d new OrSelector(evals);\n+            CombiningEvaluator.Or or \u003d new CombiningEvaluator.Or(evals);\n             evals.clear();\n             evals.add(or);\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 or.add(parse(subQuery));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n     if (evals.size() \u003d\u003d 1)\n         return evals.get(0);\n-    return new AndSelector(evals);\n+    return new CombiningEvaluator.And(evals);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        evals.add(new RootSelector());\n        combinator(tq.consume());\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(evals);\n            evals.clear();\n            evals.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (evals.size() \u003d\u003d 1)\n        return evals.get(0);\n    return new AndSelector(evals);\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 45,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the query\n\n@return Evaluator\n",
          "diff": "@@ -1,31 +1,30 @@\n-public Evaluator parse() {\n+Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n-        s.add(new RootSelector());\n+        evals.add(new RootSelector());\n         combinator(tq.consume());\n-    } else if (tq.matches(\":has(\")) {\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n-            OrSelector or \u003d new OrSelector(s);\n-            s.clear();\n-            s.add(or);\n+            OrSelector or \u003d new OrSelector(evals);\n+            evals.clear();\n+            evals.add(or);\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 or.add(parse(subQuery));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n-    if (s.size() \u003d\u003d 1)\n-        return s.get(0);\n-    return new AndSelector(s);\n+    if (evals.size() \u003d\u003d 1)\n+        return evals.get(0);\n+    return new AndSelector(evals);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
            "newPath": "src/main/java/org/jsoup/select/QueryParser.java",
            "oldMethodName": "parse",
            "newMethodName": "parse"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        evals.add(new RootSelector());\n        combinator(tq.consume());\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(evals);\n            evals.clear();\n            evals.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (evals.size() \u003d\u003d 1)\n        return evals.get(0);\n    return new AndSelector(evals);\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 45,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the query\n\n@return Evaluator\n",
          "diff": "@@ -1,31 +1,30 @@\n-public Evaluator parse() {\n+Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n-        s.add(new RootSelector());\n+        evals.add(new RootSelector());\n         combinator(tq.consume());\n-    } else if (tq.matches(\":has(\")) {\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n-            OrSelector or \u003d new OrSelector(s);\n-            s.clear();\n-            s.add(or);\n+            OrSelector or \u003d new OrSelector(evals);\n+            evals.clear();\n+            evals.add(or);\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 or.add(parse(subQuery));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n-    if (s.size() \u003d\u003d 1)\n-        return s.get(0);\n-    return new AndSelector(s);\n+    if (evals.size() \u003d\u003d 1)\n+        return evals.get(0);\n+    return new AndSelector(evals);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        evals.add(new RootSelector());\n        combinator(tq.consume());\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(evals);\n            evals.clear();\n            evals.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (evals.size() \u003d\u003d 1)\n        return evals.get(0);\n    return new AndSelector(evals);\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 45,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the query\n\n@return Evaluator\n",
          "diff": "@@ -1,31 +1,30 @@\n-public Evaluator parse() {\n+Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n-        s.add(new RootSelector());\n+        evals.add(new RootSelector());\n         combinator(tq.consume());\n-    } else if (tq.matches(\":has(\")) {\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n-            OrSelector or \u003d new OrSelector(s);\n-            s.clear();\n-            s.add(or);\n+            OrSelector or \u003d new OrSelector(evals);\n+            evals.clear();\n+            evals.add(or);\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 or.add(parse(subQuery));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n-    if (s.size() \u003d\u003d 1)\n-        return s.get(0);\n-    return new AndSelector(s);\n+    if (evals.size() \u003d\u003d 1)\n+        return evals.get(0);\n+    return new AndSelector(evals);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        evals.add(new RootSelector());\n        combinator(tq.consume());\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(evals);\n            evals.clear();\n            evals.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (evals.size() \u003d\u003d 1)\n        return evals.get(0);\n    return new AndSelector(evals);\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 45,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the query\n\n@return Evaluator\n",
          "diff": "@@ -1,31 +1,30 @@\n-public Evaluator parse() {\n+Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n-        s.add(new RootSelector());\n+        evals.add(new RootSelector());\n         combinator(tq.consume());\n-    } else if (tq.matches(\":has(\")) {\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n-            OrSelector or \u003d new OrSelector(s);\n-            s.clear();\n-            s.add(or);\n+            OrSelector or \u003d new OrSelector(evals);\n+            evals.clear();\n+            evals.add(or);\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 or.add(parse(subQuery));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n-    if (s.size() \u003d\u003d 1)\n-        return s.get(0);\n-    return new AndSelector(s);\n+    if (evals.size() \u003d\u003d 1)\n+        return evals.get(0);\n+    return new AndSelector(evals);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Parse the query\n\n@return Evaluator\n"
          }
        }
      ]
    },
    "43a39b308abfbe39ea06729277d0630786b9956d": {
      "type": "Ybodychange",
      "commitMessage": "Added javadocs for Evaluators.\nUpdated tests.\nUpdated parser\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "43a39b308abfbe39ea06729277d0630786b9956d",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "b800dd756bf956aa210165073824bfcf159780fd",
      "commitAuthorOld": "Anton Kazennikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        s.add(new RootSelector());\n        combinator(tq.consume());\n    } else if (tq.matches(\":has(\")) {\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(s);\n            s.clear();\n            s.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (s.size() \u003d\u003d 1)\n        return s.get(0);\n    return new AndSelector(s);\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 45,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "b800dd756bf956aa210165073824bfcf159780fd": {
      "type": "Ybodychange",
      "commitMessage": "Added RootSelector support\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "b800dd756bf956aa210165073824bfcf159780fd",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca",
      "commitAuthorOld": "Anton Kazennikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        s.add(new RootSelector());\n        combinator(tq.consume());\n    } else if (tq.matches(\":has(\")) {\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(s);\n            s.clear();\n            s.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (s.size() \u003d\u003d 1)\n        return s.get(0);\n    return new AndSelector(s);\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 45,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,31 @@\n public Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n+        s.add(new RootSelector());\n         combinator(tq.consume());\n     } else if (tq.matches(\":has(\")) {\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             OrSelector or \u003d new OrSelector(s);\n             s.clear();\n             s.add(or);\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 or.add(parse(subQuery));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n     if (s.size() \u003d\u003d 1)\n         return s.get(0);\n     return new AndSelector(s);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca": {
      "type": "Ybodychange",
      "commitMessage": "parser update: normal order of selectors\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "e9909538549c96800dad1e94284b99575d1be628",
      "commitAuthorOld": "Anton Kazennikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        combinator(tq.consume());\n    } else if (tq.matches(\":has(\")) {\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(s);\n            s.clear();\n            s.add(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (s.size() \u003d\u003d 1)\n        return s.get(0);\n    return new AndSelector(s);\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 44,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n public Evaluator parse() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n         combinator(tq.consume());\n     } else if (tq.matches(\":has(\")) {\n     } else {\n         findElements();\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             OrSelector or \u003d new OrSelector(s);\n             s.clear();\n-            s.push(or);\n+            s.add(or);\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 or.add(parse(subQuery));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume());\n         } else if (seenWhite) {\n             combinator(\u0027 \u0027);\n         } else {\n             findElements();\n         }\n     }\n     if (s.size() \u003d\u003d 1)\n-        return s.getFirst();\n+        return s.get(0);\n     return new AndSelector(s);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e9909538549c96800dad1e94284b99575d1be628": {
      "type": "Yintroduced",
      "commitMessage": "Working parser except the root node selector.\nAdded basic tests\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "e9909538549c96800dad1e94284b99575d1be628",
      "commitAuthor": "Anton Kazennikov",
      "diff": "@@ -0,0 +1,30 @@\n+public Evaluator parse() {\n+    tq.consumeWhitespace();\n+    if (tq.matchesAny(combinators)) {\n+        combinator(tq.consume());\n+    } else if (tq.matches(\":has(\")) {\n+    } else {\n+        findElements();\n+    }\n+    while (!tq.isEmpty()) {\n+        boolean seenWhite \u003d tq.consumeWhitespace();\n+        if (tq.matchChomp(\",\")) {\n+            OrSelector or \u003d new OrSelector(s);\n+            s.clear();\n+            s.push(or);\n+            while (!tq.isEmpty()) {\n+                String subQuery \u003d tq.chompTo(\",\");\n+                or.add(parse(subQuery));\n+            }\n+        } else if (tq.matchesAny(combinators)) {\n+            combinator(tq.consume());\n+        } else if (seenWhite) {\n+            combinator(\u0027 \u0027);\n+        } else {\n+            findElements();\n+        }\n+    }\n+    if (s.size() \u003d\u003d 1)\n+        return s.getFirst();\n+    return new AndSelector(s);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Evaluator parse() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        combinator(tq.consume());\n    } else if (tq.matches(\":has(\")) {\n    } else {\n        findElements();\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            OrSelector or \u003d new OrSelector(s);\n            s.clear();\n            s.push(or);\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                or.add(parse(subQuery));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            findElements();\n        }\n    }\n    if (s.size() \u003d\u003d 1)\n        return s.getFirst();\n    return new AndSelector(s);\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 46,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}