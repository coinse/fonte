{
  "origin": "codeshovel",
  "repositoryName": "Cli-10b",
  "repositoryPath": "/tmp/Cli-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GnuParser.java",
  "functionName": "flatten",
  "functionId": "flatten___options-Options__arguments-String[]__stopAtNonOption-boolean",
  "sourceFilePath": "src/java/org/apache/commons/cli/GnuParser.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The Options to parse the arguments by.\n@param arguments The arguments that have to be flattened.\n@param stopAtNonOption specifies whether to stop \nflattening when a non option has been encountered\n@return a String array of the flattened arguments\n",
  "functionStartLine": 62,
  "functionEndLine": 177,
  "numCommitsSeen": 17,
  "timeTaken": 533,
  "changeHistory": [
    "b599e124a373de091bb6e5b0d771505efccc444d",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1",
    "745d1a535c9cf45d24455afc150b808981c8e0df",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78"
  ],
  "changeHistoryShort": {
    "b599e124a373de091bb6e5b0d771505efccc444d": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1": "Ybodychange",
    "745d1a535c9cf45d24455afc150b808981c8e0df": "Ydocchange",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b599e124a373de091bb6e5b0d771505efccc444d": {
      "type": "Ybodychange",
      "commitMessage": "Fixing Findbugs warnings and adding a bold WARNING to GnuParser that there is a large lump of non-executable code\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@542151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/28/07, 1:32 AM",
      "commitName": "b599e124a373de091bb6e5b0d771505efccc444d",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/28/07, 1:01 AM",
      "commitNameOld": "79a1091bd0a2dba7decacd23beac8104f3b5a5cb",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    boolean eatTheRest \u003d false;\n    Option currentOption \u003d null;\n    for (int i \u003d 0; i \u003c arguments.length; i++) {\n        if (\"--\".equals(arguments[i])) {\n            eatTheRest \u003d true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arguments[i])) {\n            tokens.add(\"-\");\n        } else if (arguments[i].startsWith(\"-\")) {\n            Option option \u003d options.getOption(arguments[i]);\n            if (option \u003d\u003d null) {\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if (specialOption !\u003d null) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            } else {\n                currentOption \u003d option;\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if ((specialOption !\u003d null) \u0026\u0026 (option \u003d\u003d null)) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if ((currentOption !\u003d null) \u0026\u0026 currentOption.hasArg()) {\n                    if (currentOption.hasArg()) {\n                        tokens.add(arguments[i]);\n                        currentOption \u003d null;\n                    } else if (currentOption.hasArgs()) {\n                        tokens.add(arguments[i]);\n                    } else if (stopAtNonOption) {\n                        eatTheRest \u003d true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    } else {\n                        tokens.add(arguments[i]);\n                    }\n                } else if (currentOption !\u003d null) {\n                    tokens.add(arguments[i]);\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(\"--\");\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            }\n        } else {\n            tokens.add(arguments[i]);\n        }\n        if (eatTheRest) {\n            for (i++; i \u003c arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}",
      "path": "src/java/org/apache/commons/cli/GnuParser.java",
      "functionStartLine": 62,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The Options to parse the arguments by.\n@param arguments The arguments that have to be flattened.\n@param stopAtNonOption specifies whether to stop \nflattening when a non option has been encountered\n@return a String array of the flattened arguments\n",
      "diff": "@@ -1,63 +1,63 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n     init();\n     boolean eatTheRest \u003d false;\n     Option currentOption \u003d null;\n     for (int i \u003d 0; i \u003c arguments.length; i++) {\n         if (\"--\".equals(arguments[i])) {\n             eatTheRest \u003d true;\n             tokens.add(\"--\");\n         } else if (\"-\".equals(arguments[i])) {\n             tokens.add(\"-\");\n         } else if (arguments[i].startsWith(\"-\")) {\n             Option option \u003d options.getOption(arguments[i]);\n             if (option \u003d\u003d null) {\n                 Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                 if (specialOption !\u003d null) {\n                     tokens.add(arguments[i].substring(0, 2));\n                     tokens.add(arguments[i].substring(2));\n                 } else if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                     tokens.add(arguments[i]);\n                 } else {\n                     tokens.add(arguments[i]);\n                 }\n             } else {\n                 currentOption \u003d option;\n                 Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                 if ((specialOption !\u003d null) \u0026\u0026 (option \u003d\u003d null)) {\n                     tokens.add(arguments[i].substring(0, 2));\n                     tokens.add(arguments[i].substring(2));\n                 } else if ((currentOption !\u003d null) \u0026\u0026 currentOption.hasArg()) {\n                     if (currentOption.hasArg()) {\n                         tokens.add(arguments[i]);\n                         currentOption \u003d null;\n                     } else if (currentOption.hasArgs()) {\n                         tokens.add(arguments[i]);\n                     } else if (stopAtNonOption) {\n                         eatTheRest \u003d true;\n                         tokens.add(\"--\");\n                         tokens.add(arguments[i]);\n                     } else {\n                         tokens.add(arguments[i]);\n                     }\n                 } else if (currentOption !\u003d null) {\n                     tokens.add(arguments[i]);\n                 } else if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                     tokens.add(\"--\");\n                     tokens.add(arguments[i]);\n                 } else {\n                     tokens.add(arguments[i]);\n                 }\n             }\n         } else {\n             tokens.add(arguments[i]);\n         }\n         if (eatTheRest) {\n             for (i++; i \u003c arguments.length; i++) {\n                 tokens.add(arguments[i]);\n             }\n         }\n     }\n-    return (String[]) tokens.toArray(new String[] {});\n+    return (String[]) tokens.toArray(new String[tokens.size()]);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/19/02, 3:59 PM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    boolean eatTheRest \u003d false;\n    Option currentOption \u003d null;\n    for (int i \u003d 0; i \u003c arguments.length; i++) {\n        if (\"--\".equals(arguments[i])) {\n            eatTheRest \u003d true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arguments[i])) {\n            tokens.add(\"-\");\n        } else if (arguments[i].startsWith(\"-\")) {\n            Option option \u003d options.getOption(arguments[i]);\n            if (option \u003d\u003d null) {\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if (specialOption !\u003d null) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            } else {\n                currentOption \u003d option;\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if ((specialOption !\u003d null) \u0026\u0026 (option \u003d\u003d null)) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if ((currentOption !\u003d null) \u0026\u0026 currentOption.hasArg()) {\n                    if (currentOption.hasArg()) {\n                        tokens.add(arguments[i]);\n                        currentOption \u003d null;\n                    } else if (currentOption.hasArgs()) {\n                        tokens.add(arguments[i]);\n                    } else if (stopAtNonOption) {\n                        eatTheRest \u003d true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    } else {\n                        tokens.add(arguments[i]);\n                    }\n                } else if (currentOption !\u003d null) {\n                    tokens.add(arguments[i]);\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(\"--\");\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            }\n        } else {\n            tokens.add(arguments[i]);\n        }\n        if (eatTheRest) {\n            for (i++; i \u003c arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
          "path": "src/java/org/apache/commons/cli/GnuParser.java",
          "functionStartLine": 106,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The Options to parse the arguments by.\n@param arguments The arguments that have to be flattened.\n@param stopAtNonOption specifies whether to stop \nflattening when a non option has been encountered\n@return a String array of the flattened arguments\n",
          "diff": "@@ -1,63 +1,63 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n     init();\n     boolean eatTheRest \u003d false;\n     Option currentOption \u003d null;\n     for (int i \u003d 0; i \u003c arguments.length; i++) {\n         if (\"--\".equals(arguments[i])) {\n             eatTheRest \u003d true;\n             tokens.add(\"--\");\n         } else if (\"-\".equals(arguments[i])) {\n             tokens.add(\"-\");\n         } else if (arguments[i].startsWith(\"-\")) {\n             Option option \u003d options.getOption(arguments[i]);\n             if (option \u003d\u003d null) {\n                 Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                 if (specialOption !\u003d null) {\n                     tokens.add(arguments[i].substring(0, 2));\n                     tokens.add(arguments[i].substring(2));\n                 } else if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                     tokens.add(arguments[i]);\n                 } else {\n                     tokens.add(arguments[i]);\n                 }\n             } else {\n                 currentOption \u003d option;\n                 Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n-                if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n+                if ((specialOption !\u003d null) \u0026\u0026 (option \u003d\u003d null)) {\n                     tokens.add(arguments[i].substring(0, 2));\n                     tokens.add(arguments[i].substring(2));\n-                } else if (currentOption !\u003d null \u0026\u0026 currentOption.hasArg()) {\n+                } else if ((currentOption !\u003d null) \u0026\u0026 currentOption.hasArg()) {\n                     if (currentOption.hasArg()) {\n                         tokens.add(arguments[i]);\n                         currentOption \u003d null;\n                     } else if (currentOption.hasArgs()) {\n                         tokens.add(arguments[i]);\n                     } else if (stopAtNonOption) {\n                         eatTheRest \u003d true;\n                         tokens.add(\"--\");\n                         tokens.add(arguments[i]);\n                     } else {\n                         tokens.add(arguments[i]);\n                     }\n                 } else if (currentOption !\u003d null) {\n                     tokens.add(arguments[i]);\n                 } else if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                     tokens.add(\"--\");\n                     tokens.add(arguments[i]);\n                 } else {\n                     tokens.add(arguments[i]);\n                 }\n             }\n         } else {\n             tokens.add(arguments[i]);\n         }\n         if (eatTheRest) {\n             for (i++; i \u003c arguments.length; i++) {\n                 tokens.add(arguments[i]);\n             }\n         }\n     }\n     return (String[]) tokens.toArray(new String[] {});\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/19/02, 3:59 PM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    boolean eatTheRest \u003d false;\n    Option currentOption \u003d null;\n    for (int i \u003d 0; i \u003c arguments.length; i++) {\n        if (\"--\".equals(arguments[i])) {\n            eatTheRest \u003d true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arguments[i])) {\n            tokens.add(\"-\");\n        } else if (arguments[i].startsWith(\"-\")) {\n            Option option \u003d options.getOption(arguments[i]);\n            if (option \u003d\u003d null) {\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if (specialOption !\u003d null) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            } else {\n                currentOption \u003d option;\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if ((specialOption !\u003d null) \u0026\u0026 (option \u003d\u003d null)) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if ((currentOption !\u003d null) \u0026\u0026 currentOption.hasArg()) {\n                    if (currentOption.hasArg()) {\n                        tokens.add(arguments[i]);\n                        currentOption \u003d null;\n                    } else if (currentOption.hasArgs()) {\n                        tokens.add(arguments[i]);\n                    } else if (stopAtNonOption) {\n                        eatTheRest \u003d true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    } else {\n                        tokens.add(arguments[i]);\n                    }\n                } else if (currentOption !\u003d null) {\n                    tokens.add(arguments[i]);\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(\"--\");\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            }\n        } else {\n            tokens.add(arguments[i]);\n        }\n        if (eatTheRest) {\n            for (i++; i \u003c arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
          "path": "src/java/org/apache/commons/cli/GnuParser.java",
          "functionStartLine": 106,
          "functionName": "flatten",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The Options to parse the arguments by.\n@param arguments The arguments that have to be flattened.\n@param stopAtNonOption specifies whether to stop \nflattening when a non option has been encountered\n@return a String array of the flattened arguments\n",
          "diff": "@@ -1,63 +1,63 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n     init();\n     boolean eatTheRest \u003d false;\n     Option currentOption \u003d null;\n     for (int i \u003d 0; i \u003c arguments.length; i++) {\n         if (\"--\".equals(arguments[i])) {\n             eatTheRest \u003d true;\n             tokens.add(\"--\");\n         } else if (\"-\".equals(arguments[i])) {\n             tokens.add(\"-\");\n         } else if (arguments[i].startsWith(\"-\")) {\n             Option option \u003d options.getOption(arguments[i]);\n             if (option \u003d\u003d null) {\n                 Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                 if (specialOption !\u003d null) {\n                     tokens.add(arguments[i].substring(0, 2));\n                     tokens.add(arguments[i].substring(2));\n                 } else if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                     tokens.add(arguments[i]);\n                 } else {\n                     tokens.add(arguments[i]);\n                 }\n             } else {\n                 currentOption \u003d option;\n                 Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n-                if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n+                if ((specialOption !\u003d null) \u0026\u0026 (option \u003d\u003d null)) {\n                     tokens.add(arguments[i].substring(0, 2));\n                     tokens.add(arguments[i].substring(2));\n-                } else if (currentOption !\u003d null \u0026\u0026 currentOption.hasArg()) {\n+                } else if ((currentOption !\u003d null) \u0026\u0026 currentOption.hasArg()) {\n                     if (currentOption.hasArg()) {\n                         tokens.add(arguments[i]);\n                         currentOption \u003d null;\n                     } else if (currentOption.hasArgs()) {\n                         tokens.add(arguments[i]);\n                     } else if (stopAtNonOption) {\n                         eatTheRest \u003d true;\n                         tokens.add(\"--\");\n                         tokens.add(arguments[i]);\n                     } else {\n                         tokens.add(arguments[i]);\n                     }\n                 } else if (currentOption !\u003d null) {\n                     tokens.add(arguments[i]);\n                 } else if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                     tokens.add(\"--\");\n                     tokens.add(arguments[i]);\n                 } else {\n                     tokens.add(arguments[i]);\n                 }\n             }\n         } else {\n             tokens.add(arguments[i]);\n         }\n         if (eatTheRest) {\n             for (i++; i \u003c arguments.length; i++) {\n                 tokens.add(arguments[i]);\n             }\n         }\n     }\n     return (String[]) tokens.toArray(new String[] {});\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n",
            "newValue": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n\n@param options The Options to parse the arguments by.\n@param arguments The arguments that have to be flattened.\n@param stopAtNonOption specifies whether to stop \nflattening when a non option has been encountered\n@return a String array of the flattened arguments\n"
          }
        }
      ]
    },
    "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1": {
      "type": "Ybodychange",
      "commitMessage": "bug #12210 fixed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/31/02, 10:53 AM",
      "commitName": "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/26/02, 1:15 PM",
      "commitNameOld": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 4.9,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    boolean eatTheRest \u003d false;\n    Option currentOption \u003d null;\n    for (int i \u003d 0; i \u003c arguments.length; i++) {\n        if (\"--\".equals(arguments[i])) {\n            eatTheRest \u003d true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arguments[i])) {\n            tokens.add(\"-\");\n        } else if (arguments[i].startsWith(\"-\")) {\n            Option option \u003d options.getOption(arguments[i]);\n            if (option \u003d\u003d null) {\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if (specialOption !\u003d null) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            } else {\n                currentOption \u003d option;\n                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n                if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n                    tokens.add(arguments[i].substring(0, 2));\n                    tokens.add(arguments[i].substring(2));\n                } else if (currentOption !\u003d null \u0026\u0026 currentOption.hasArg()) {\n                    if (currentOption.hasArg()) {\n                        tokens.add(arguments[i]);\n                        currentOption \u003d null;\n                    } else if (currentOption.hasArgs()) {\n                        tokens.add(arguments[i]);\n                    } else if (stopAtNonOption) {\n                        eatTheRest \u003d true;\n                        tokens.add(\"--\");\n                        tokens.add(arguments[i]);\n                    } else {\n                        tokens.add(arguments[i]);\n                    }\n                } else if (currentOption !\u003d null) {\n                    tokens.add(arguments[i]);\n                } else if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                    tokens.add(\"--\");\n                    tokens.add(arguments[i]);\n                } else {\n                    tokens.add(arguments[i]);\n                }\n            }\n        } else {\n            tokens.add(arguments[i]);\n        }\n        if (eatTheRest) {\n            for (i++; i \u003c arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
      "path": "src/java/org/apache/commons/cli/GnuParser.java",
      "functionStartLine": 102,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n",
      "diff": "@@ -1,18 +1,63 @@\n protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n     init();\n+    boolean eatTheRest \u003d false;\n+    Option currentOption \u003d null;\n     for (int i \u003d 0; i \u003c arguments.length; i++) {\n-        Option option \u003d options.getOption(arguments[i]);\n-        try {\n-            Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n-            if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n-                tokens.add(arguments[i].substring(0, 2));\n-                tokens.add(arguments[i].substring(2));\n+        if (\"--\".equals(arguments[i])) {\n+            eatTheRest \u003d true;\n+            tokens.add(\"--\");\n+        } else if (\"-\".equals(arguments[i])) {\n+            tokens.add(\"-\");\n+        } else if (arguments[i].startsWith(\"-\")) {\n+            Option option \u003d options.getOption(arguments[i]);\n+            if (option \u003d\u003d null) {\n+                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n+                if (specialOption !\u003d null) {\n+                    tokens.add(arguments[i].substring(0, 2));\n+                    tokens.add(arguments[i].substring(2));\n+                } else if (stopAtNonOption) {\n+                    eatTheRest \u003d true;\n+                    tokens.add(arguments[i]);\n+                } else {\n+                    tokens.add(arguments[i]);\n+                }\n             } else {\n+                currentOption \u003d option;\n+                Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n+                if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n+                    tokens.add(arguments[i].substring(0, 2));\n+                    tokens.add(arguments[i].substring(2));\n+                } else if (currentOption !\u003d null \u0026\u0026 currentOption.hasArg()) {\n+                    if (currentOption.hasArg()) {\n+                        tokens.add(arguments[i]);\n+                        currentOption \u003d null;\n+                    } else if (currentOption.hasArgs()) {\n+                        tokens.add(arguments[i]);\n+                    } else if (stopAtNonOption) {\n+                        eatTheRest \u003d true;\n+                        tokens.add(\"--\");\n+                        tokens.add(arguments[i]);\n+                    } else {\n+                        tokens.add(arguments[i]);\n+                    }\n+                } else if (currentOption !\u003d null) {\n+                    tokens.add(arguments[i]);\n+                } else if (stopAtNonOption) {\n+                    eatTheRest \u003d true;\n+                    tokens.add(\"--\");\n+                    tokens.add(arguments[i]);\n+                } else {\n+                    tokens.add(arguments[i]);\n+                }\n+            }\n+        } else {\n+            tokens.add(arguments[i]);\n+        }\n+        if (eatTheRest) {\n+            for (i++; i \u003c arguments.length; i++) {\n                 tokens.add(arguments[i]);\n             }\n-        } catch (IndexOutOfBoundsException exp) {\n-            tokens.add(arguments[i]);\n         }\n     }\n     return (String[]) tokens.toArray(new String[] {});\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "745d1a535c9cf45d24455afc150b808981c8e0df": {
      "type": "Ydocchange",
      "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/26/02, 1:15 PM",
      "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/24/02, 3:15 PM",
      "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 1.92,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    for (int i \u003d 0; i \u003c arguments.length; i++) {\n        Option option \u003d options.getOption(arguments[i]);\n        try {\n            Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n            if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n                tokens.add(arguments[i].substring(0, 2));\n                tokens.add(arguments[i].substring(2));\n            } else {\n                tokens.add(arguments[i]);\n            }\n        } catch (IndexOutOfBoundsException exp) {\n            tokens.add(arguments[i]);\n        }\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
      "path": "src/java/org/apache/commons/cli/GnuParser.java",
      "functionStartLine": 104,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "\u003cp\u003eThis flatten method does so using the following rules:\n\u003col\u003e\n \u003cli\u003eIf an {@link Option} exists for the first character of \n the \u003ccode\u003earguments\u003c/code\u003e entry \u003cb\u003eAND\u003c/b\u003e an {@link Option} \n does not exist for the whole \u003ccode\u003eargument\u003c/code\u003e then\n add the first character as an option to the processed tokens\n list e.g. \"-D\" and add the rest of the entry to the also.\u003c/li\u003e\n \u003cli\u003eOtherwise just add the token to the processed tokens list.\n \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/p\u003e\n"
      }
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Yintroduced",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/24/02, 3:15 PM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,18 @@\n+protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n+    init();\n+    for (int i \u003d 0; i \u003c arguments.length; i++) {\n+        Option option \u003d options.getOption(arguments[i]);\n+        try {\n+            Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n+            if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n+                tokens.add(arguments[i].substring(0, 2));\n+                tokens.add(arguments[i].substring(2));\n+            } else {\n+                tokens.add(arguments[i]);\n+            }\n+        } catch (IndexOutOfBoundsException exp) {\n+            tokens.add(arguments[i]);\n+        }\n+    }\n+    return (String[]) tokens.toArray(new String[] {});\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    init();\n    for (int i \u003d 0; i \u003c arguments.length; i++) {\n        Option option \u003d options.getOption(arguments[i]);\n        try {\n            Option specialOption \u003d options.getOption(arguments[i].substring(0, 2));\n            if (specialOption !\u003d null \u0026\u0026 option \u003d\u003d null) {\n                tokens.add(arguments[i].substring(0, 2));\n                tokens.add(arguments[i].substring(2));\n            } else {\n                tokens.add(arguments[i]);\n            }\n        } catch (IndexOutOfBoundsException exp) {\n            tokens.add(arguments[i]);\n        }\n    }\n    return (String[]) tokens.toArray(new String[] {});\n}",
      "path": "src/java/org/apache/commons/cli/GnuParser.java",
      "functionStartLine": 21,
      "functionName": "flatten",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}