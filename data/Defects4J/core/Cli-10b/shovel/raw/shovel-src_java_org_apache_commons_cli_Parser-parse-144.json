{
  "origin": "codeshovel",
  "repositoryName": "Cli-10b",
  "repositoryPath": "/tmp/Cli-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "parse",
  "functionId": "parse___options-Options__arguments-String[]__properties-Properties__stopAtNonOption-boolean",
  "sourceFilePath": "src/java/org/apache/commons/cli/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption stop parsing the arguments when the first\nnon option is encountered.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
  "functionStartLine": 144,
  "functionEndLine": 241,
  "numCommitsSeen": 53,
  "timeTaken": 1056,
  "changeHistory": [
    "298804b71d4e5f8b621f48a300f421229a3f5c86",
    "c155cebd4127367a7b649ca167c0c69284cc066b",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "347bbeb8f98a49744501ac50850457ba8751d545",
    "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
    "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
    "66d0ae6216730abd8bd736e210be73229c8e807b",
    "ead3757ef361f85cfb92754e808dafd74eb15702"
  ],
  "changeHistoryShort": {
    "298804b71d4e5f8b621f48a300f421229a3f5c86": "Ybodychange",
    "c155cebd4127367a7b649ca167c0c69284cc066b": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "347bbeb8f98a49744501ac50850457ba8751d545": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1": "Ybodychange",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange,Yparameterchange)",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": "Yformatchange",
    "66d0ae6216730abd8bd736e210be73229c8e807b": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange,Ydocchange)",
    "ead3757ef361f85cfb92754e808dafd74eb15702": "Yintroduced"
  },
  "changeHistoryDetails": {
    "298804b71d4e5f8b621f48a300f421229a3f5c86": {
      "type": "Ybodychange",
      "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/08, 11:43 PM",
      "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "6/29/07, 12:08 AM",
      "commitNameOld": "97744806d59820b096fb502b1d51ca54b5d0921d",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 313.98,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    for (Iterator it \u003d options.helpOptions().iterator(); it.hasNext(); ) {\n        Option opt \u003d (Option) it.next();\n        opt.clearValues();\n    }\n    setOptions(options);\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !getOptions().hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 144,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption stop parsing the arguments when the first\nnon option is encountered.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
      "diff": "@@ -1,50 +1,49 @@\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n-    this.options \u003d options;\n     for (Iterator it \u003d options.helpOptions().iterator(); it.hasNext(); ) {\n         Option opt \u003d (Option) it.next();\n         opt.clearValues();\n     }\n-    requiredOptions \u003d options.getRequiredOptions();\n+    setOptions(options);\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n     if (arguments \u003d\u003d null) {\n         arguments \u003d new String[0];\n     }\n-    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n+    List tokenList \u003d Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n-            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n+            if (stopAtNonOption \u0026\u0026 !getOptions().hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c155cebd4127367a7b649ca167c0c69284cc066b": {
      "type": "Ybodychange",
      "commitMessage": "Applying Brian Egge and my work from CLI-71 to fix a lingering data problem in the parser and to confirm that other bugs have already been fixed\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@541408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/24/07, 1:07 PM",
      "commitName": "c155cebd4127367a7b649ca167c0c69284cc066b",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/26/05, 4:53 AM",
      "commitNameOld": "e543edc2a488729baea94cc554631cec3fb62b74",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 817.3,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    for (Iterator it \u003d options.helpOptions().iterator(); it.hasNext(); ) {\n        Option opt \u003d (Option) it.next();\n        opt.clearValues();\n    }\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 129,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption stop parsing the arguments when the first\nnon option is encountered.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
      "diff": "@@ -1,46 +1,50 @@\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n     this.options \u003d options;\n+    for (Iterator it \u003d options.helpOptions().iterator(); it.hasNext(); ) {\n+        Option opt \u003d (Option) it.next();\n+        opt.clearValues();\n+    }\n     requiredOptions \u003d options.getRequiredOptions();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n     if (arguments \u003d\u003d null) {\n         arguments \u003d new String[0];\n     }\n     List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n             if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/27/02, 3:22 PM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 174,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption stop parsing the arguments when the first\nnon option is encountered.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,46 +1,46 @@\n-public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n-    options \u003d opts;\n+public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n+    this.options \u003d options;\n     requiredOptions \u003d options.getRequiredOptions();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n     if (arguments \u003d\u003d null) {\n         arguments \u003d new String[0];\n     }\n-    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n+    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n             if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[opts-Options, arguments-String[], properties-Properties, stopAtNonOption-boolean]",
            "newValue": "[options-Options, arguments-String[], properties-Properties, stopAtNonOption-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/27/02, 3:22 PM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 174,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption stop parsing the arguments when the first\nnon option is encountered.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,46 +1,46 @@\n-public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n-    options \u003d opts;\n+public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n+    this.options \u003d options;\n     requiredOptions \u003d options.getRequiredOptions();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n     if (arguments \u003d\u003d null) {\n         arguments \u003d new String[0];\n     }\n-    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n+    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n             if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/27/02, 3:22 PM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 174,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption stop parsing the arguments when the first\nnon option is encountered.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,46 +1,46 @@\n-public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n-    options \u003d opts;\n+public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n+    this.options \u003d options;\n     requiredOptions \u003d options.getRequiredOptions();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n     if (arguments \u003d\u003d null) {\n         arguments \u003d new String[0];\n     }\n-    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n+    List tokenList \u003d Arrays.asList(flatten(this.options, arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n             if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
            "newValue": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption stop parsing the arguments when the first\nnon option is encountered.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n"
          }
        }
      ]
    },
    "347bbeb8f98a49744501ac50850457ba8751d545": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/02, 12:41 AM",
      "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02, 12:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "10/24/02, 4:17 PM",
          "commitNameOld": "436ef8b2ff7381e797436fc50d087d70b8032f40",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 24.39,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 175,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,42 +1,46 @@\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n     requiredOptions \u003d options.getRequiredOptions();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n+    if (arguments \u003d\u003d null) {\n+        arguments \u003d new String[0];\n+    }\n     List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n             if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n+    processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[opts-Options, arguments-String[], stopAtNonOption-boolean]",
            "newValue": "[opts-Options, arguments-String[], properties-Properties, stopAtNonOption-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02, 12:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "10/24/02, 4:17 PM",
          "commitNameOld": "436ef8b2ff7381e797436fc50d087d70b8032f40",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 24.39,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 175,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,42 +1,46 @@\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n     requiredOptions \u003d options.getRequiredOptions();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n+    if (arguments \u003d\u003d null) {\n+        arguments \u003d new String[0];\n+    }\n     List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n             if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n+    processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02, 12:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "10/24/02, 4:17 PM",
          "commitNameOld": "436ef8b2ff7381e797436fc50d087d70b8032f40",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 24.39,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    if (arguments \u003d\u003d null) {\n        arguments \u003d new String[0];\n    }\n    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    processProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 175,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,42 +1,46 @@\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n     requiredOptions \u003d options.getRequiredOptions();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n+    if (arguments \u003d\u003d null) {\n+        arguments \u003d new String[0];\n+    }\n     List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n     ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (\"-\".equals(t)) {\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             } else {\n                 cmd.addArg(t);\n             }\n         } else if (t.startsWith(\"-\")) {\n             if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n+    processProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eParses the specified \u003ccode\u003earguments\u003c/code\u003e \nbased on the specifed {@link Options}.\u003c/p\u003e\n\n@param options the \u003ccode\u003eOptions\u003c/code\u003e\n@param arguments the \u003ccode\u003earguments\u003c/code\u003e\n@param stopAtNonOption specifies whether to stop \ninterpreting the arguments when a non option has \nbeen encountered and to add them to the CommandLines\nargs list.\n@return the \u003ccode\u003eCommandLine\u003c/code\u003e\n@throws ParseException if an error occurs when parsing the\narguments.\n",
            "newValue": "Parse the arguments according to the specified options and\nproperties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n"
          }
        }
      ]
    },
    "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "allowed characters are now isJavaIdentifierPart, added javadoc to Parser, minor refactoring for required options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129809 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/1/02, 3:54 PM",
      "commitName": "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "allowed characters are now isJavaIdentifierPart, added javadoc to Parser, minor refactoring for required options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129809 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/1/02, 3:54 PM",
          "commitName": "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/31/02, 10:53 AM",
          "commitNameOld": "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.21,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 131,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eParses the specified \u003ccode\u003earguments\u003c/code\u003e \nbased on the specifed {@link Options}.\u003c/p\u003e\n\n@param options the \u003ccode\u003eOptions\u003c/code\u003e\n@param arguments the \u003ccode\u003earguments\u003c/code\u003e\n@param stopAtNonOption specifies whether to stop \ninterpreting the arguments when a non option has \nbeen encountered and to add them to the CommandLines\nargs list.\n@return the \u003ccode\u003eCommandLine\u003c/code\u003e\n@throws ParseException if an error occurs when parsing the\narguments.\n",
          "diff": "@@ -1,43 +1,42 @@\n-public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n     requiredOptions \u003d options.getRequiredOptions();\n-    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n-    List tokenList \u003d Arrays.asList(tokens);\n-    ListIterator iterator \u003d tokenList.listIterator();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n+    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n+    ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n+        } else if (\"-\".equals(t)) {\n+            if (stopAtNonOption) {\n+                eatTheRest \u003d true;\n+            } else {\n+                cmd.addArg(t);\n+            }\n         } else if (t.startsWith(\"-\")) {\n-            if (t.length() \u003d\u003d 1) {\n-                if (stopAtNonOption) {\n-                    eatTheRest \u003d true;\n-                } else {\n-                    cmd.addArg(t);\n-                }\n-            } else if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n+            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[opts-Options, args-String[], stopAtNonOption-boolean]",
            "newValue": "[opts-Options, arguments-String[], stopAtNonOption-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "allowed characters are now isJavaIdentifierPart, added javadoc to Parser, minor refactoring for required options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129809 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/1/02, 3:54 PM",
          "commitName": "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/31/02, 10:53 AM",
          "commitNameOld": "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.21,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 131,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eParses the specified \u003ccode\u003earguments\u003c/code\u003e \nbased on the specifed {@link Options}.\u003c/p\u003e\n\n@param options the \u003ccode\u003eOptions\u003c/code\u003e\n@param arguments the \u003ccode\u003earguments\u003c/code\u003e\n@param stopAtNonOption specifies whether to stop \ninterpreting the arguments when a non option has \nbeen encountered and to add them to the CommandLines\nargs list.\n@return the \u003ccode\u003eCommandLine\u003c/code\u003e\n@throws ParseException if an error occurs when parsing the\narguments.\n",
          "diff": "@@ -1,43 +1,42 @@\n-public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n     requiredOptions \u003d options.getRequiredOptions();\n-    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n-    List tokenList \u003d Arrays.asList(tokens);\n-    ListIterator iterator \u003d tokenList.listIterator();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n+    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n+    ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n+        } else if (\"-\".equals(t)) {\n+            if (stopAtNonOption) {\n+                eatTheRest \u003d true;\n+            } else {\n+                cmd.addArg(t);\n+            }\n         } else if (t.startsWith(\"-\")) {\n-            if (t.length() \u003d\u003d 1) {\n-                if (stopAtNonOption) {\n-                    eatTheRest \u003d true;\n-                } else {\n-                    cmd.addArg(t);\n-                }\n-            } else if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n+            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "allowed characters are now isJavaIdentifierPart, added javadoc to Parser, minor refactoring for required options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129809 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/1/02, 3:54 PM",
          "commitName": "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/31/02, 10:53 AM",
          "commitNameOld": "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.21,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n    ListIterator iterator \u003d tokenList.listIterator();\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (\"-\".equals(t)) {\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            } else {\n                cmd.addArg(t);\n            }\n        } else if (t.startsWith(\"-\")) {\n            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 131,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eParses the specified \u003ccode\u003earguments\u003c/code\u003e \nbased on the specifed {@link Options}.\u003c/p\u003e\n\n@param options the \u003ccode\u003eOptions\u003c/code\u003e\n@param arguments the \u003ccode\u003earguments\u003c/code\u003e\n@param stopAtNonOption specifies whether to stop \ninterpreting the arguments when a non option has \nbeen encountered and to add them to the CommandLines\nargs list.\n@return the \u003ccode\u003eCommandLine\u003c/code\u003e\n@throws ParseException if an error occurs when parsing the\narguments.\n",
          "diff": "@@ -1,43 +1,42 @@\n-public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n     requiredOptions \u003d options.getRequiredOptions();\n-    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n-    List tokenList \u003d Arrays.asList(tokens);\n-    ListIterator iterator \u003d tokenList.listIterator();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n+    List tokenList \u003d Arrays.asList(flatten(opts, arguments, stopAtNonOption));\n+    ListIterator iterator \u003d tokenList.listIterator();\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n+        } else if (\"-\".equals(t)) {\n+            if (stopAtNonOption) {\n+                eatTheRest \u003d true;\n+            } else {\n+                cmd.addArg(t);\n+            }\n         } else if (t.startsWith(\"-\")) {\n-            if (t.length() \u003d\u003d 1) {\n-                if (stopAtNonOption) {\n-                    eatTheRest \u003d true;\n-                } else {\n-                    cmd.addArg(t);\n-                }\n-            } else if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n+            if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                 eatTheRest \u003d true;\n                 cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n                 String str \u003d (String) iterator.next();\n                 if (!\"--\".equals(str)) {\n                     cmd.addArg(str);\n                 }\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eParses the specified \u003ccode\u003earguments\u003c/code\u003e \nbased on the specifed {@link Options}.\u003c/p\u003e\n\n@param options the \u003ccode\u003eOptions\u003c/code\u003e\n@param arguments the \u003ccode\u003earguments\u003c/code\u003e\n@param stopAtNonOption specifies whether to stop \ninterpreting the arguments when a non option has \nbeen encountered and to add them to the CommandLines\nargs list.\n@return the \u003ccode\u003eCommandLine\u003c/code\u003e\n@throws ParseException if an error occurs when parsing the\narguments.\n"
          }
        }
      ]
    },
    "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1": {
      "type": "Ybodychange",
      "commitMessage": "bug #12210 fixed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/31/02, 10:53 AM",
      "commitName": "fc0723b7aa9d4f05dd7ac5fb6131efe419da31d1",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/26/02, 1:15 PM",
      "commitNameOld": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 4.9,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n    List tokenList \u003d Arrays.asList(tokens);\n    ListIterator iterator \u003d tokenList.listIterator();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (t.startsWith(\"-\")) {\n            if (t.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(t);\n                }\n            } else if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n                eatTheRest \u003d true;\n                cmd.addArg(t);\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                String str \u003d (String) iterator.next();\n                if (!\"--\".equals(str)) {\n                    cmd.addArg(str);\n                }\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 25,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,37 +1,43 @@\n public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n     requiredOptions \u003d options.getRequiredOptions();\n     String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n     List tokenList \u003d Arrays.asList(tokens);\n     ListIterator iterator \u003d tokenList.listIterator();\n     cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n     while (iterator.hasNext()) {\n         String t \u003d (String) iterator.next();\n         if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n         } else if (t.startsWith(\"-\")) {\n             if (t.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n                     cmd.addArg(t);\n                 }\n+            } else if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n+                eatTheRest \u003d true;\n+                cmd.addArg(t);\n             } else {\n                 processOption(t, iterator);\n             }\n         } else {\n             cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n             while (iterator.hasNext()) {\n-                cmd.addArg((String) iterator.next());\n+                String str \u003d (String) iterator.next();\n+                if (!\"--\".equals(str)) {\n+                    cmd.addArg(str);\n+                }\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/24/02, 3:15 PM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n    List tokenList \u003d Arrays.asList(tokens);\n    ListIterator iterator \u003d tokenList.listIterator();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (t.startsWith(\"-\")) {\n            if (t.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(t);\n                }\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                cmd.addArg((String) iterator.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 25,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,38 +1,37 @@\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n-    cmd \u003d new CommandLine();\n     requiredOptions \u003d options.getRequiredOptions();\n-    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n-    String token \u003d null;\n+    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n+    List tokenList \u003d Arrays.asList(tokens);\n+    ListIterator iterator \u003d tokenList.listIterator();\n+    cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n-    while (iter.hasNext()) {\n-        token \u003d (String) iter.next();\n-        if (token.equals(\"--\")) {\n+    while (iterator.hasNext()) {\n+        String t \u003d (String) iterator.next();\n+        if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n-        } else if (token.startsWith(\"--\")) {\n-            processOption(token, iter);\n-        } else if (token.startsWith(\"-\")) {\n-            if (token.length() \u003d\u003d 1) {\n+        } else if (t.startsWith(\"-\")) {\n+            if (t.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    cmd.addArg(token);\n+                    cmd.addArg(t);\n                 }\n             } else {\n-                processOption(token, iter);\n+                processOption(t, iterator);\n             }\n         } else {\n-            cmd.addArg(token);\n+            cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (iter.hasNext()) {\n-                cmd.addArg((String) iter.next());\n+            while (iterator.hasNext()) {\n+                cmd.addArg((String) iterator.next());\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/GnuParser.java",
            "newPath": "src/java/org/apache/commons/cli/Parser.java",
            "oldMethodName": "parse",
            "newMethodName": "parse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n    List tokenList \u003d Arrays.asList(tokens);\n    ListIterator iterator \u003d tokenList.listIterator();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (t.startsWith(\"-\")) {\n            if (t.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(t);\n                }\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                cmd.addArg((String) iterator.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 25,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,38 +1,37 @@\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n-    cmd \u003d new CommandLine();\n     requiredOptions \u003d options.getRequiredOptions();\n-    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n-    String token \u003d null;\n+    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n+    List tokenList \u003d Arrays.asList(tokens);\n+    ListIterator iterator \u003d tokenList.listIterator();\n+    cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n-    while (iter.hasNext()) {\n-        token \u003d (String) iter.next();\n-        if (token.equals(\"--\")) {\n+    while (iterator.hasNext()) {\n+        String t \u003d (String) iterator.next();\n+        if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n-        } else if (token.startsWith(\"--\")) {\n-            processOption(token, iter);\n-        } else if (token.startsWith(\"-\")) {\n-            if (token.length() \u003d\u003d 1) {\n+        } else if (t.startsWith(\"-\")) {\n+            if (t.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    cmd.addArg(token);\n+                    cmd.addArg(t);\n                 }\n             } else {\n-                processOption(token, iter);\n+                processOption(t, iterator);\n             }\n         } else {\n-            cmd.addArg(token);\n+            cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (iter.hasNext()) {\n-                cmd.addArg((String) iter.next());\n+            while (iterator.hasNext()) {\n+                cmd.addArg((String) iterator.next());\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n    List tokenList \u003d Arrays.asList(tokens);\n    ListIterator iterator \u003d tokenList.listIterator();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (t.startsWith(\"-\")) {\n            if (t.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(t);\n                }\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                cmd.addArg((String) iterator.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 25,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,38 +1,37 @@\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n-    cmd \u003d new CommandLine();\n     requiredOptions \u003d options.getRequiredOptions();\n-    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n-    String token \u003d null;\n+    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n+    List tokenList \u003d Arrays.asList(tokens);\n+    ListIterator iterator \u003d tokenList.listIterator();\n+    cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n-    while (iter.hasNext()) {\n-        token \u003d (String) iter.next();\n-        if (token.equals(\"--\")) {\n+    while (iterator.hasNext()) {\n+        String t \u003d (String) iterator.next();\n+        if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n-        } else if (token.startsWith(\"--\")) {\n-            processOption(token, iter);\n-        } else if (token.startsWith(\"-\")) {\n-            if (token.length() \u003d\u003d 1) {\n+        } else if (t.startsWith(\"-\")) {\n+            if (t.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    cmd.addArg(token);\n+                    cmd.addArg(t);\n                 }\n             } else {\n-                processOption(token, iter);\n+                processOption(t, iterator);\n             }\n         } else {\n-            cmd.addArg(token);\n+            cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (iter.hasNext()) {\n-                cmd.addArg((String) iter.next());\n+            while (iterator.hasNext()) {\n+                cmd.addArg((String) iterator.next());\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
            "newValue": ""
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    requiredOptions \u003d options.getRequiredOptions();\n    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n    List tokenList \u003d Arrays.asList(tokens);\n    ListIterator iterator \u003d tokenList.listIterator();\n    cmd \u003d new CommandLine();\n    boolean eatTheRest \u003d false;\n    while (iterator.hasNext()) {\n        String t \u003d (String) iterator.next();\n        if (\"--\".equals(t)) {\n            eatTheRest \u003d true;\n        } else if (t.startsWith(\"-\")) {\n            if (t.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(t);\n                }\n            } else {\n                processOption(t, iterator);\n            }\n        } else {\n            cmd.addArg(t);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iterator.hasNext()) {\n                cmd.addArg((String) iterator.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 25,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,38 +1,37 @@\n-public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+public CommandLine parse(Options opts, String[] args, boolean stopAtNonOption) throws ParseException {\n     options \u003d opts;\n-    cmd \u003d new CommandLine();\n     requiredOptions \u003d options.getRequiredOptions();\n-    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n-    String token \u003d null;\n+    String[] tokens \u003d flatten(opts, args, stopAtNonOption);\n+    List tokenList \u003d Arrays.asList(tokens);\n+    ListIterator iterator \u003d tokenList.listIterator();\n+    cmd \u003d new CommandLine();\n     boolean eatTheRest \u003d false;\n-    while (iter.hasNext()) {\n-        token \u003d (String) iter.next();\n-        if (token.equals(\"--\")) {\n+    while (iterator.hasNext()) {\n+        String t \u003d (String) iterator.next();\n+        if (\"--\".equals(t)) {\n             eatTheRest \u003d true;\n-        } else if (token.startsWith(\"--\")) {\n-            processOption(token, iter);\n-        } else if (token.startsWith(\"-\")) {\n-            if (token.length() \u003d\u003d 1) {\n+        } else if (t.startsWith(\"-\")) {\n+            if (t.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    cmd.addArg(token);\n+                    cmd.addArg(t);\n                 }\n             } else {\n-                processOption(token, iter);\n+                processOption(t, iterator);\n             }\n         } else {\n-            cmd.addArg(token);\n+            cmd.addArg(t);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (iter.hasNext()) {\n-                cmd.addArg((String) iter.next());\n+            while (iterator.hasNext()) {\n+                cmd.addArg((String) iterator.next());\n             }\n         }\n     }\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[opts-Options, arguments-String[], stopAtNonOption-boolean]",
            "newValue": "[opts-Options, args-String[], stopAtNonOption-boolean]"
          }
        }
      ]
    },
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": {
      "type": "Yformatchange",
      "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/3/02, 4:45 PM",
      "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/4/02, 3:32 PM",
      "commitNameOld": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 30.05,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    cmd \u003d new CommandLine();\n    requiredOptions \u003d options.getRequiredOptions();\n    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n    String token \u003d null;\n    boolean eatTheRest \u003d false;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.equals(\"--\")) {\n            eatTheRest \u003d true;\n        } else if (token.startsWith(\"--\")) {\n            processOption(token, iter);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(token);\n                }\n            } else {\n                processOption(token, iter);\n            }\n        } else {\n            cmd.addArg(token);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iter.hasNext()) {\n                cmd.addArg((String) iter.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/java/org/apache/commons/cli/GnuParser.java",
      "functionStartLine": 112,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "66d0ae6216730abd8bd736e210be73229c8e807b": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/4/02, 3:32 PM",
      "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/19/02, 2:25 PM",
          "commitNameOld": "ead3757ef361f85cfb92754e808dafd74eb15702",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    cmd \u003d new CommandLine();\n    requiredOptions \u003d options.getRequiredOptions();\n    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n    String token \u003d null;\n    boolean eatTheRest \u003d false;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.equals(\"--\")) {\n            eatTheRest \u003d true;\n        } else if (token.startsWith(\"--\")) {\n            processOption(token, iter);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(token);\n                }\n            } else {\n                processOption(token, iter);\n            }\n        } else {\n            cmd.addArg(token);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iter.hasNext()) {\n                cmd.addArg((String) iter.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/GnuParser.java",
          "functionStartLine": 112,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,44 +1,38 @@\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\n-    List args \u003d new LinkedList();\n-    Iterator argIter \u003d arguments.iterator();\n-    String eachArg \u003d null;\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+    options \u003d opts;\n+    cmd \u003d new CommandLine();\n+    requiredOptions \u003d options.getRequiredOptions();\n+    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n+    String token \u003d null;\n     boolean eatTheRest \u003d false;\n-    while (argIter.hasNext()) {\n-        eachArg \u003d (String) argIter.next();\n-        if (eachArg.equals(\"--\")) {\n-            args.add(eachArg);\n+    while (iter.hasNext()) {\n+        token \u003d (String) iter.next();\n+        if (token.equals(\"--\")) {\n             eatTheRest \u003d true;\n-        } else if (eachArg.startsWith(\"--\")) {\n-            args.add(eachArg);\n-        } else if (eachArg.startsWith(\"-\")) {\n-            if (eachArg.length() \u003d\u003d 1) {\n+        } else if (token.startsWith(\"--\")) {\n+            processOption(token, iter);\n+        } else if (token.startsWith(\"-\")) {\n+            if (token.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    args.add(eachArg);\n+                    cmd.addArg(token);\n                 }\n-            } else if (eachArg.length() \u003d\u003d 2) {\n-                args.add(eachArg);\n             } else {\n-                String charOpt \u003d eachArg.substring(1, 2);\n-                if (options.getOption(charOpt) !\u003d null \u0026\u0026 options.getOption(eachArg) \u003d\u003d null) {\n-                    args.add(\"-\" + charOpt);\n-                    args.add(eachArg.substring(2, eachArg.length()));\n-                } else {\n-                    args.add(eachArg);\n-                }\n+                processOption(token, iter);\n             }\n         } else {\n-            args.add(eachArg);\n+            cmd.addArg(token);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (argIter.hasNext()) {\n-                args.add(argIter.next());\n+            while (iter.hasNext()) {\n+                cmd.addArg((String) iter.next());\n             }\n         }\n     }\n-    return args;\n+    checkRequiredOptions();\n+    return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[options-Options, arguments-List, stopAtNonOption-boolean]",
            "newValue": "[opts-Options, arguments-String[], stopAtNonOption-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/19/02, 2:25 PM",
          "commitNameOld": "ead3757ef361f85cfb92754e808dafd74eb15702",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    cmd \u003d new CommandLine();\n    requiredOptions \u003d options.getRequiredOptions();\n    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n    String token \u003d null;\n    boolean eatTheRest \u003d false;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.equals(\"--\")) {\n            eatTheRest \u003d true;\n        } else if (token.startsWith(\"--\")) {\n            processOption(token, iter);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(token);\n                }\n            } else {\n                processOption(token, iter);\n            }\n        } else {\n            cmd.addArg(token);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iter.hasNext()) {\n                cmd.addArg((String) iter.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/GnuParser.java",
          "functionStartLine": 112,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,44 +1,38 @@\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\n-    List args \u003d new LinkedList();\n-    Iterator argIter \u003d arguments.iterator();\n-    String eachArg \u003d null;\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+    options \u003d opts;\n+    cmd \u003d new CommandLine();\n+    requiredOptions \u003d options.getRequiredOptions();\n+    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n+    String token \u003d null;\n     boolean eatTheRest \u003d false;\n-    while (argIter.hasNext()) {\n-        eachArg \u003d (String) argIter.next();\n-        if (eachArg.equals(\"--\")) {\n-            args.add(eachArg);\n+    while (iter.hasNext()) {\n+        token \u003d (String) iter.next();\n+        if (token.equals(\"--\")) {\n             eatTheRest \u003d true;\n-        } else if (eachArg.startsWith(\"--\")) {\n-            args.add(eachArg);\n-        } else if (eachArg.startsWith(\"-\")) {\n-            if (eachArg.length() \u003d\u003d 1) {\n+        } else if (token.startsWith(\"--\")) {\n+            processOption(token, iter);\n+        } else if (token.startsWith(\"-\")) {\n+            if (token.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    args.add(eachArg);\n+                    cmd.addArg(token);\n                 }\n-            } else if (eachArg.length() \u003d\u003d 2) {\n-                args.add(eachArg);\n             } else {\n-                String charOpt \u003d eachArg.substring(1, 2);\n-                if (options.getOption(charOpt) !\u003d null \u0026\u0026 options.getOption(eachArg) \u003d\u003d null) {\n-                    args.add(\"-\" + charOpt);\n-                    args.add(eachArg.substring(2, eachArg.length()));\n-                } else {\n-                    args.add(eachArg);\n-                }\n+                processOption(token, iter);\n             }\n         } else {\n-            args.add(eachArg);\n+            cmd.addArg(token);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (argIter.hasNext()) {\n-                args.add(argIter.next());\n+            while (iter.hasNext()) {\n+                cmd.addArg((String) iter.next());\n             }\n         }\n     }\n-    return args;\n+    checkRequiredOptions();\n+    return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "List",
            "newValue": "CommandLine"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/19/02, 2:25 PM",
          "commitNameOld": "ead3757ef361f85cfb92754e808dafd74eb15702",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    cmd \u003d new CommandLine();\n    requiredOptions \u003d options.getRequiredOptions();\n    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n    String token \u003d null;\n    boolean eatTheRest \u003d false;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.equals(\"--\")) {\n            eatTheRest \u003d true;\n        } else if (token.startsWith(\"--\")) {\n            processOption(token, iter);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(token);\n                }\n            } else {\n                processOption(token, iter);\n            }\n        } else {\n            cmd.addArg(token);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iter.hasNext()) {\n                cmd.addArg((String) iter.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/GnuParser.java",
          "functionStartLine": 112,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,44 +1,38 @@\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\n-    List args \u003d new LinkedList();\n-    Iterator argIter \u003d arguments.iterator();\n-    String eachArg \u003d null;\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+    options \u003d opts;\n+    cmd \u003d new CommandLine();\n+    requiredOptions \u003d options.getRequiredOptions();\n+    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n+    String token \u003d null;\n     boolean eatTheRest \u003d false;\n-    while (argIter.hasNext()) {\n-        eachArg \u003d (String) argIter.next();\n-        if (eachArg.equals(\"--\")) {\n-            args.add(eachArg);\n+    while (iter.hasNext()) {\n+        token \u003d (String) iter.next();\n+        if (token.equals(\"--\")) {\n             eatTheRest \u003d true;\n-        } else if (eachArg.startsWith(\"--\")) {\n-            args.add(eachArg);\n-        } else if (eachArg.startsWith(\"-\")) {\n-            if (eachArg.length() \u003d\u003d 1) {\n+        } else if (token.startsWith(\"--\")) {\n+            processOption(token, iter);\n+        } else if (token.startsWith(\"-\")) {\n+            if (token.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    args.add(eachArg);\n+                    cmd.addArg(token);\n                 }\n-            } else if (eachArg.length() \u003d\u003d 2) {\n-                args.add(eachArg);\n             } else {\n-                String charOpt \u003d eachArg.substring(1, 2);\n-                if (options.getOption(charOpt) !\u003d null \u0026\u0026 options.getOption(eachArg) \u003d\u003d null) {\n-                    args.add(\"-\" + charOpt);\n-                    args.add(eachArg.substring(2, eachArg.length()));\n-                } else {\n-                    args.add(eachArg);\n-                }\n+                processOption(token, iter);\n             }\n         } else {\n-            args.add(eachArg);\n+            cmd.addArg(token);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (argIter.hasNext()) {\n-                args.add(argIter.next());\n+            while (iter.hasNext()) {\n+                cmd.addArg((String) iter.next());\n             }\n         }\n     }\n-    return args;\n+    checkRequiredOptions();\n+    return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ParseException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/19/02, 2:25 PM",
          "commitNameOld": "ead3757ef361f85cfb92754e808dafd74eb15702",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    cmd \u003d new CommandLine();\n    requiredOptions \u003d options.getRequiredOptions();\n    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n    String token \u003d null;\n    boolean eatTheRest \u003d false;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.equals(\"--\")) {\n            eatTheRest \u003d true;\n        } else if (token.startsWith(\"--\")) {\n            processOption(token, iter);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(token);\n                }\n            } else {\n                processOption(token, iter);\n            }\n        } else {\n            cmd.addArg(token);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iter.hasNext()) {\n                cmd.addArg((String) iter.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/GnuParser.java",
          "functionStartLine": 112,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,44 +1,38 @@\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\n-    List args \u003d new LinkedList();\n-    Iterator argIter \u003d arguments.iterator();\n-    String eachArg \u003d null;\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+    options \u003d opts;\n+    cmd \u003d new CommandLine();\n+    requiredOptions \u003d options.getRequiredOptions();\n+    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n+    String token \u003d null;\n     boolean eatTheRest \u003d false;\n-    while (argIter.hasNext()) {\n-        eachArg \u003d (String) argIter.next();\n-        if (eachArg.equals(\"--\")) {\n-            args.add(eachArg);\n+    while (iter.hasNext()) {\n+        token \u003d (String) iter.next();\n+        if (token.equals(\"--\")) {\n             eatTheRest \u003d true;\n-        } else if (eachArg.startsWith(\"--\")) {\n-            args.add(eachArg);\n-        } else if (eachArg.startsWith(\"-\")) {\n-            if (eachArg.length() \u003d\u003d 1) {\n+        } else if (token.startsWith(\"--\")) {\n+            processOption(token, iter);\n+        } else if (token.startsWith(\"-\")) {\n+            if (token.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    args.add(eachArg);\n+                    cmd.addArg(token);\n                 }\n-            } else if (eachArg.length() \u003d\u003d 2) {\n-                args.add(eachArg);\n             } else {\n-                String charOpt \u003d eachArg.substring(1, 2);\n-                if (options.getOption(charOpt) !\u003d null \u0026\u0026 options.getOption(eachArg) \u003d\u003d null) {\n-                    args.add(\"-\" + charOpt);\n-                    args.add(eachArg.substring(2, eachArg.length()));\n-                } else {\n-                    args.add(eachArg);\n-                }\n+                processOption(token, iter);\n             }\n         } else {\n-            args.add(eachArg);\n+            cmd.addArg(token);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (argIter.hasNext()) {\n-                args.add(argIter.next());\n+            while (iter.hasNext()) {\n+                cmd.addArg((String) iter.next());\n             }\n         }\n     }\n-    return args;\n+    checkRequiredOptions();\n+    return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/19/02, 2:25 PM",
          "commitNameOld": "ead3757ef361f85cfb92754e808dafd74eb15702",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 15.05,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n    options \u003d opts;\n    cmd \u003d new CommandLine();\n    requiredOptions \u003d options.getRequiredOptions();\n    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n    String token \u003d null;\n    boolean eatTheRest \u003d false;\n    while (iter.hasNext()) {\n        token \u003d (String) iter.next();\n        if (token.equals(\"--\")) {\n            eatTheRest \u003d true;\n        } else if (token.startsWith(\"--\")) {\n            processOption(token, iter);\n        } else if (token.startsWith(\"-\")) {\n            if (token.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    cmd.addArg(token);\n                }\n            } else {\n                processOption(token, iter);\n            }\n        } else {\n            cmd.addArg(token);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (iter.hasNext()) {\n                cmd.addArg((String) iter.next());\n            }\n        }\n    }\n    checkRequiredOptions();\n    return cmd;\n}",
          "path": "src/java/org/apache/commons/cli/GnuParser.java",
          "functionStartLine": 112,
          "functionName": "parse",
          "functionAnnotation": "",
          "functionDoc": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
          "diff": "@@ -1,44 +1,38 @@\n-public List parse(Options options, List arguments, boolean stopAtNonOption) {\n-    List args \u003d new LinkedList();\n-    Iterator argIter \u003d arguments.iterator();\n-    String eachArg \u003d null;\n+public CommandLine parse(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException {\n+    options \u003d opts;\n+    cmd \u003d new CommandLine();\n+    requiredOptions \u003d options.getRequiredOptions();\n+    ListIterator iter \u003d Arrays.asList(arguments).listIterator();\n+    String token \u003d null;\n     boolean eatTheRest \u003d false;\n-    while (argIter.hasNext()) {\n-        eachArg \u003d (String) argIter.next();\n-        if (eachArg.equals(\"--\")) {\n-            args.add(eachArg);\n+    while (iter.hasNext()) {\n+        token \u003d (String) iter.next();\n+        if (token.equals(\"--\")) {\n             eatTheRest \u003d true;\n-        } else if (eachArg.startsWith(\"--\")) {\n-            args.add(eachArg);\n-        } else if (eachArg.startsWith(\"-\")) {\n-            if (eachArg.length() \u003d\u003d 1) {\n+        } else if (token.startsWith(\"--\")) {\n+            processOption(token, iter);\n+        } else if (token.startsWith(\"-\")) {\n+            if (token.length() \u003d\u003d 1) {\n                 if (stopAtNonOption) {\n                     eatTheRest \u003d true;\n                 } else {\n-                    args.add(eachArg);\n+                    cmd.addArg(token);\n                 }\n-            } else if (eachArg.length() \u003d\u003d 2) {\n-                args.add(eachArg);\n             } else {\n-                String charOpt \u003d eachArg.substring(1, 2);\n-                if (options.getOption(charOpt) !\u003d null \u0026\u0026 options.getOption(eachArg) \u003d\u003d null) {\n-                    args.add(\"-\" + charOpt);\n-                    args.add(eachArg.substring(2, eachArg.length()));\n-                } else {\n-                    args.add(eachArg);\n-                }\n+                processOption(token, iter);\n             }\n         } else {\n-            args.add(eachArg);\n+            cmd.addArg(token);\n             if (stopAtNonOption) {\n                 eatTheRest \u003d true;\n             }\n         }\n         if (eatTheRest) {\n-            while (argIter.hasNext()) {\n-                args.add(argIter.next());\n+            while (iter.hasNext()) {\n+                cmd.addArg((String) iter.next());\n             }\n         }\n     }\n-    return args;\n+    checkRequiredOptions();\n+    return cmd;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parse the arguments according to the specified options.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the list of atomic option and value tokens\n",
            "newValue": "Parse the arguments according to the specified options.\n\n@param opts the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the CommandLine\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n"
          }
        }
      ]
    },
    "ead3757ef361f85cfb92754e808dafd74eb15702": {
      "type": "Yintroduced",
      "commitMessage": "GNU parser, one unit test for Ant\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/19/02, 2:25 PM",
      "commitName": "ead3757ef361f85cfb92754e808dafd74eb15702",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,44 @@\n+public List parse(Options options, List arguments, boolean stopAtNonOption) {\n+    List args \u003d new LinkedList();\n+    Iterator argIter \u003d arguments.iterator();\n+    String eachArg \u003d null;\n+    boolean eatTheRest \u003d false;\n+    while (argIter.hasNext()) {\n+        eachArg \u003d (String) argIter.next();\n+        if (eachArg.equals(\"--\")) {\n+            args.add(eachArg);\n+            eatTheRest \u003d true;\n+        } else if (eachArg.startsWith(\"--\")) {\n+            args.add(eachArg);\n+        } else if (eachArg.startsWith(\"-\")) {\n+            if (eachArg.length() \u003d\u003d 1) {\n+                if (stopAtNonOption) {\n+                    eatTheRest \u003d true;\n+                } else {\n+                    args.add(eachArg);\n+                }\n+            } else if (eachArg.length() \u003d\u003d 2) {\n+                args.add(eachArg);\n+            } else {\n+                String charOpt \u003d eachArg.substring(1, 2);\n+                if (options.getOption(charOpt) !\u003d null \u0026\u0026 options.getOption(eachArg) \u003d\u003d null) {\n+                    args.add(\"-\" + charOpt);\n+                    args.add(eachArg.substring(2, eachArg.length()));\n+                } else {\n+                    args.add(eachArg);\n+                }\n+            }\n+        } else {\n+            args.add(eachArg);\n+            if (stopAtNonOption) {\n+                eatTheRest \u003d true;\n+            }\n+        }\n+        if (eatTheRest) {\n+            while (argIter.hasNext()) {\n+                args.add(argIter.next());\n+            }\n+        }\n+    }\n+    return args;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public List parse(Options options, List arguments, boolean stopAtNonOption) {\n    List args \u003d new LinkedList();\n    Iterator argIter \u003d arguments.iterator();\n    String eachArg \u003d null;\n    boolean eatTheRest \u003d false;\n    while (argIter.hasNext()) {\n        eachArg \u003d (String) argIter.next();\n        if (eachArg.equals(\"--\")) {\n            args.add(eachArg);\n            eatTheRest \u003d true;\n        } else if (eachArg.startsWith(\"--\")) {\n            args.add(eachArg);\n        } else if (eachArg.startsWith(\"-\")) {\n            if (eachArg.length() \u003d\u003d 1) {\n                if (stopAtNonOption) {\n                    eatTheRest \u003d true;\n                } else {\n                    args.add(eachArg);\n                }\n            } else if (eachArg.length() \u003d\u003d 2) {\n                args.add(eachArg);\n            } else {\n                String charOpt \u003d eachArg.substring(1, 2);\n                if (options.getOption(charOpt) !\u003d null \u0026\u0026 options.getOption(eachArg) \u003d\u003d null) {\n                    args.add(\"-\" + charOpt);\n                    args.add(eachArg.substring(2, eachArg.length()));\n                } else {\n                    args.add(eachArg);\n                }\n            }\n        } else {\n            args.add(eachArg);\n            if (stopAtNonOption) {\n                eatTheRest \u003d true;\n            }\n        }\n        if (eatTheRest) {\n            while (argIter.hasNext()) {\n                args.add(argIter.next());\n            }\n        }\n    }\n    return args;\n}",
      "path": "src/java/org/apache/commons/cli/GnuParser.java",
      "functionStartLine": 94,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param stopAtNonOption specifies whether to continue parsing the\narguments if a non option is encountered.\n@return the list of atomic option and value tokens\n"
    }
  }
}