{
  "origin": "codeshovel",
  "repositoryName": "JacksonXml-5b",
  "repositoryPath": "/tmp/JacksonXml-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XmlSerializerProvider.java",
  "functionName": "serializeValue",
  "functionId": "serializeValue___gen-JsonGenerator__value-Object",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
  "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
  "functionDoc": "",
  "functionStartLine": 79,
  "functionEndLine": 114,
  "numCommitsSeen": 46,
  "timeTaken": 912,
  "changeHistory": [
    "993e0c6a6585a538a33cb854f18b99bcaf06f2ad",
    "f4c7bb0fa6525e6143d7de21028690addd75e170",
    "5cb108da85d545201a37f758b896351d504ba4a4",
    "1252cc61fb7bbae4b384e9b674198cabad8988b0",
    "a6df5db642b1e7ed16cffa50f10b1ae6987b3ae3",
    "479522112267a0448223d38870bf5d63e77a5c33",
    "e9faaec591c288917951ce77f12a1d9dfb4fbcd1",
    "948d377c7aafb0ed91a244415df07f3f6c106be2",
    "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
    "478883dc04ab768edc2230f49871993b41899a93",
    "ac97422c72402f2970e5d9eab7a727a308399d56"
  ],
  "changeHistoryShort": {
    "993e0c6a6585a538a33cb854f18b99bcaf06f2ad": "Ybodychange",
    "f4c7bb0fa6525e6143d7de21028690addd75e170": "Ymultichange(Yparameterchange,Ybodychange)",
    "5cb108da85d545201a37f758b896351d504ba4a4": "Yexceptionschange",
    "1252cc61fb7bbae4b384e9b674198cabad8988b0": "Ybodychange",
    "a6df5db642b1e7ed16cffa50f10b1ae6987b3ae3": "Ymultichange(Ybodychange,Yannotationchange)",
    "479522112267a0448223d38870bf5d63e77a5c33": "Ybodychange",
    "e9faaec591c288917951ce77f12a1d9dfb4fbcd1": "Ybodychange",
    "948d377c7aafb0ed91a244415df07f3f6c106be2": "Yfilerename",
    "4eb1efdf62fa5efab2422803d0f821932dda5c5a": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "478883dc04ab768edc2230f49871993b41899a93": "Yfilerename",
    "ac97422c72402f2970e5d9eab7a727a308399d56": "Yintroduced"
  },
  "changeHistoryDetails": {
    "993e0c6a6585a538a33cb854f18b99bcaf06f2ad": {
      "type": "Ybodychange",
      "commitMessage": "fix 2.9 compatiblity\n",
      "commitDate": "10/28/16, 9:41 PM",
      "commitName": "993e0c6a6585a538a33cb854f18b99bcaf06f2ad",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/28/16, 3:07 PM",
      "commitNameOld": "ca1c671c419e88a18357d497ec3671c73c37452e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 153.27,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"resource\")\n@Override\npublic void serializeValue(JsonGenerator gen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeXmlNull(gen);\n        return;\n    }\n    final Class\u003c?\u003e cls \u003d value.getClass();\n    final boolean asArray;\n    final ToXmlGenerator xgen \u003d _asXmlGenerator(gen);\n    if (xgen \u003d\u003d null) {\n        asArray \u003d false;\n    } else {\n        QName rootName \u003d _rootNameFromConfig();\n        if (rootName \u003d\u003d null) {\n            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n        }\n        _initWithRootName(xgen, rootName);\n        asArray \u003d TypeUtil.isIndexedType(cls);\n        if (asArray) {\n            _startRootArray(xgen, rootName);\n        }\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, gen, this);\n    } catch (Exception e) {\n        throw _wrapAsIOE(gen, e);\n    }\n    if (asArray) {\n        gen.writeEndObject();\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "functionStartLine": 66,
      "functionName": "serializeValue",
      "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,33 @@\n @SuppressWarnings(\"resource\")\n @Override\n public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n         _serializeXmlNull(gen);\n         return;\n     }\n     final Class\u003c?\u003e cls \u003d value.getClass();\n     final boolean asArray;\n     final ToXmlGenerator xgen \u003d _asXmlGenerator(gen);\n     if (xgen \u003d\u003d null) {\n         asArray \u003d false;\n     } else {\n         QName rootName \u003d _rootNameFromConfig();\n         if (rootName \u003d\u003d null) {\n             rootName \u003d _rootNameLookup.findRootName(cls, _config);\n         }\n         _initWithRootName(xgen, rootName);\n         asArray \u003d TypeUtil.isIndexedType(cls);\n         if (asArray) {\n             _startRootArray(xgen, rootName);\n         }\n     }\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     try {\n         ser.serialize(value, gen, this);\n-    } catch (IOException ioe) {\n-        throw ioe;\n     } catch (Exception e) {\n-        String msg \u003d e.getMessage();\n-        if (msg \u003d\u003d null) {\n-            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n-        }\n-        throw JsonMappingException.from(gen, msg, e);\n+        throw _wrapAsIOE(gen, e);\n     }\n     if (asArray) {\n         gen.writeEndObject();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f4c7bb0fa6525e6143d7de21028690addd75e170": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Implemented #156\n",
      "commitDate": "10/1/15, 8:16 PM",
      "commitName": "f4c7bb0fa6525e6143d7de21028690addd75e170",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented #156\n",
          "commitDate": "10/1/15, 8:16 PM",
          "commitName": "f4c7bb0fa6525e6143d7de21028690addd75e170",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "7/11/15, 9:45 PM",
          "commitNameOld": "99abd4b9445137d7fb73e551138c8926226fc91e",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 81.94,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"resource\")\n@Override\npublic void serializeValue(JsonGenerator gen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeXmlNull(gen);\n        return;\n    }\n    final Class\u003c?\u003e cls \u003d value.getClass();\n    final boolean asArray;\n    final ToXmlGenerator xgen \u003d _asXmlGenerator(gen);\n    if (xgen \u003d\u003d null) {\n        asArray \u003d false;\n    } else {\n        QName rootName \u003d _rootNameFromConfig();\n        if (rootName \u003d\u003d null) {\n            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n        }\n        _initWithRootName(xgen, rootName);\n        asArray \u003d TypeUtil.isIndexedType(cls);\n        if (asArray) {\n            _startRootArray(xgen, rootName);\n        }\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, gen, this);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw JsonMappingException.from(gen, msg, e);\n    }\n    if (asArray) {\n        gen.writeEndObject();\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
          "functionStartLine": 66,
          "functionName": "serializeValue",
          "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,39 +1,39 @@\n @SuppressWarnings(\"resource\")\n @Override\n-public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n+public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n-        _serializeXmlNull(jgen);\n+        _serializeXmlNull(gen);\n         return;\n     }\n     final Class\u003c?\u003e cls \u003d value.getClass();\n     final boolean asArray;\n-    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n+    final ToXmlGenerator xgen \u003d _asXmlGenerator(gen);\n     if (xgen \u003d\u003d null) {\n         asArray \u003d false;\n     } else {\n         QName rootName \u003d _rootNameFromConfig();\n         if (rootName \u003d\u003d null) {\n             rootName \u003d _rootNameLookup.findRootName(cls, _config);\n         }\n         _initWithRootName(xgen, rootName);\n         asArray \u003d TypeUtil.isIndexedType(cls);\n         if (asArray) {\n             _startRootArray(xgen, rootName);\n         }\n     }\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     try {\n-        ser.serialize(value, jgen, this);\n+        ser.serialize(value, gen, this);\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n-        throw new JsonMappingException(msg, e);\n+        throw JsonMappingException.from(gen, msg, e);\n     }\n     if (asArray) {\n-        jgen.writeEndObject();\n+        gen.writeEndObject();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[jgen-JsonGenerator, value-Object]",
            "newValue": "[gen-JsonGenerator, value-Object]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented #156\n",
          "commitDate": "10/1/15, 8:16 PM",
          "commitName": "f4c7bb0fa6525e6143d7de21028690addd75e170",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "7/11/15, 9:45 PM",
          "commitNameOld": "99abd4b9445137d7fb73e551138c8926226fc91e",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 81.94,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"resource\")\n@Override\npublic void serializeValue(JsonGenerator gen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeXmlNull(gen);\n        return;\n    }\n    final Class\u003c?\u003e cls \u003d value.getClass();\n    final boolean asArray;\n    final ToXmlGenerator xgen \u003d _asXmlGenerator(gen);\n    if (xgen \u003d\u003d null) {\n        asArray \u003d false;\n    } else {\n        QName rootName \u003d _rootNameFromConfig();\n        if (rootName \u003d\u003d null) {\n            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n        }\n        _initWithRootName(xgen, rootName);\n        asArray \u003d TypeUtil.isIndexedType(cls);\n        if (asArray) {\n            _startRootArray(xgen, rootName);\n        }\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, gen, this);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw JsonMappingException.from(gen, msg, e);\n    }\n    if (asArray) {\n        gen.writeEndObject();\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
          "functionStartLine": 66,
          "functionName": "serializeValue",
          "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,39 +1,39 @@\n @SuppressWarnings(\"resource\")\n @Override\n-public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n+public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n-        _serializeXmlNull(jgen);\n+        _serializeXmlNull(gen);\n         return;\n     }\n     final Class\u003c?\u003e cls \u003d value.getClass();\n     final boolean asArray;\n-    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n+    final ToXmlGenerator xgen \u003d _asXmlGenerator(gen);\n     if (xgen \u003d\u003d null) {\n         asArray \u003d false;\n     } else {\n         QName rootName \u003d _rootNameFromConfig();\n         if (rootName \u003d\u003d null) {\n             rootName \u003d _rootNameLookup.findRootName(cls, _config);\n         }\n         _initWithRootName(xgen, rootName);\n         asArray \u003d TypeUtil.isIndexedType(cls);\n         if (asArray) {\n             _startRootArray(xgen, rootName);\n         }\n     }\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     try {\n-        ser.serialize(value, jgen, this);\n+        ser.serialize(value, gen, this);\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n-        throw new JsonMappingException(msg, e);\n+        throw JsonMappingException.from(gen, msg, e);\n     }\n     if (asArray) {\n-        jgen.writeEndObject();\n+        gen.writeEndObject();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5cb108da85d545201a37f758b896351d504ba4a4": {
      "type": "Yexceptionschange",
      "commitMessage": "...\n",
      "commitDate": "10/6/14, 9:23 PM",
      "commitName": "5cb108da85d545201a37f758b896351d504ba4a4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/19/13, 10:08 PM",
      "commitNameOld": "1252cc61fb7bbae4b384e9b674198cabad8988b0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 412.97,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"resource\")\n@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeXmlNull(jgen);\n        return;\n    }\n    final Class\u003c?\u003e cls \u003d value.getClass();\n    final boolean asArray;\n    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n    if (xgen \u003d\u003d null) {\n        asArray \u003d false;\n    } else {\n        QName rootName \u003d _rootNameFromConfig();\n        if (rootName \u003d\u003d null) {\n            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n        }\n        _initWithRootName(xgen, rootName);\n        asArray \u003d TypeUtil.isIndexedType(cls);\n        if (asArray) {\n            _startRootArray(xgen, rootName);\n        }\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, jgen, this);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n    if (asArray) {\n        jgen.writeEndObject();\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "functionStartLine": 65,
      "functionName": "serializeValue",
      "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,39 @@\n @SuppressWarnings(\"resource\")\n @Override\n-public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n         _serializeXmlNull(jgen);\n         return;\n     }\n     final Class\u003c?\u003e cls \u003d value.getClass();\n     final boolean asArray;\n     final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n     if (xgen \u003d\u003d null) {\n         asArray \u003d false;\n     } else {\n         QName rootName \u003d _rootNameFromConfig();\n         if (rootName \u003d\u003d null) {\n             rootName \u003d _rootNameLookup.findRootName(cls, _config);\n         }\n         _initWithRootName(xgen, rootName);\n         asArray \u003d TypeUtil.isIndexedType(cls);\n         if (asArray) {\n             _startRootArray(xgen, rootName);\n         }\n     }\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     try {\n         ser.serialize(value, jgen, this);\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n     if (asArray) {\n         jgen.writeEndObject();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[IOException, JsonProcessingException]",
        "newValue": "[IOException]"
      }
    },
    "1252cc61fb7bbae4b384e9b674198cabad8988b0": {
      "type": "Ybodychange",
      "commitMessage": "Further work on handling convertValue() properly.\n",
      "commitDate": "8/19/13, 10:08 PM",
      "commitName": "1252cc61fb7bbae4b384e9b674198cabad8988b0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/17/13, 7:06 PM",
      "commitNameOld": "f9a4767f3330442c26ca66bcf23b3ec4fa34c956",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"resource\")\n@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    if (value \u003d\u003d null) {\n        _serializeXmlNull(jgen);\n        return;\n    }\n    final Class\u003c?\u003e cls \u003d value.getClass();\n    final boolean asArray;\n    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n    if (xgen \u003d\u003d null) {\n        asArray \u003d false;\n    } else {\n        QName rootName \u003d _rootNameFromConfig();\n        if (rootName \u003d\u003d null) {\n            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n        }\n        _initWithRootName(xgen, rootName);\n        asArray \u003d TypeUtil.isIndexedType(cls);\n        if (asArray) {\n            _startRootArray(xgen, rootName);\n        }\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, jgen, this);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n    if (asArray) {\n        jgen.writeEndObject();\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "functionStartLine": 65,
      "functionName": "serializeValue",
      "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
      "functionDoc": "",
      "diff": "@@ -1,39 +1,39 @@\n @SuppressWarnings(\"resource\")\n @Override\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n-    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n     if (value \u003d\u003d null) {\n-        _serializeXmlNull(xgen);\n+        _serializeXmlNull(jgen);\n         return;\n     }\n     final Class\u003c?\u003e cls \u003d value.getClass();\n     final boolean asArray;\n+    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n     if (xgen \u003d\u003d null) {\n         asArray \u003d false;\n     } else {\n         QName rootName \u003d _rootNameFromConfig();\n         if (rootName \u003d\u003d null) {\n             rootName \u003d _rootNameLookup.findRootName(cls, _config);\n         }\n         _initWithRootName(xgen, rootName);\n         asArray \u003d TypeUtil.isIndexedType(cls);\n         if (asArray) {\n-            _startRootArray(jgen, rootName);\n+            _startRootArray(xgen, rootName);\n         }\n     }\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     try {\n         ser.serialize(value, jgen, this);\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n     if (asArray) {\n         jgen.writeEndObject();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6df5db642b1e7ed16cffa50f10b1ae6987b3ae3": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Fix #71, problems with XmlMapper.convertValue()\n",
      "commitDate": "8/15/13, 11:28 AM",
      "commitName": "a6df5db642b1e7ed16cffa50f10b1ae6987b3ae3",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fix #71, problems with XmlMapper.convertValue()\n",
          "commitDate": "8/15/13, 11:28 AM",
          "commitName": "a6df5db642b1e7ed16cffa50f10b1ae6987b3ae3",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/14/13, 10:31 PM",
          "commitNameOld": "479522112267a0448223d38870bf5d63e77a5c33",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"resource\")\n@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n    if (value \u003d\u003d null) {\n        _serializeXmlNull(xgen);\n        return;\n    }\n    final Class\u003c?\u003e cls \u003d value.getClass();\n    final boolean asArray;\n    if (xgen \u003d\u003d null) {\n        asArray \u003d false;\n    } else {\n        QName rootName \u003d _rootNameFromConfig();\n        if (rootName \u003d\u003d null) {\n            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n        }\n        _initWithRootName(xgen, rootName);\n        asArray \u003d TypeUtil.isIndexedType(cls);\n        if (asArray) {\n            _startRootArray(jgen, rootName);\n        }\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, jgen, this);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n    if (asArray) {\n        jgen.writeEndObject();\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
          "functionStartLine": 67,
          "functionName": "serializeValue",
          "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,39 @@\n+@SuppressWarnings(\"resource\")\n @Override\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n+    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n     if (value \u003d\u003d null) {\n-        _serializeNull(jgen);\n+        _serializeXmlNull(xgen);\n         return;\n     }\n-    Class\u003c?\u003e cls \u003d value.getClass();\n-    QName rootName \u003d _rootNameFromConfig();\n-    if (rootName \u003d\u003d null) {\n-        rootName \u003d _rootNameLookup.findRootName(cls, _config);\n-    }\n-    _initWithRootName(jgen, rootName);\n-    final boolean asArray \u003d Collection.class.isAssignableFrom(cls) || (cls.isArray() \u0026\u0026 cls !\u003d byte[].class);\n-    if (asArray) {\n-        _startRootArray(jgen, rootName);\n+    final Class\u003c?\u003e cls \u003d value.getClass();\n+    final boolean asArray;\n+    if (xgen \u003d\u003d null) {\n+        asArray \u003d false;\n+    } else {\n+        QName rootName \u003d _rootNameFromConfig();\n+        if (rootName \u003d\u003d null) {\n+            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n+        }\n+        _initWithRootName(xgen, rootName);\n+        asArray \u003d TypeUtil.isIndexedType(cls);\n+        if (asArray) {\n+            _startRootArray(jgen, rootName);\n+        }\n     }\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     try {\n         ser.serialize(value, jgen, this);\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n     if (asArray) {\n         jgen.writeEndObject();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Fix #71, problems with XmlMapper.convertValue()\n",
          "commitDate": "8/15/13, 11:28 AM",
          "commitName": "a6df5db642b1e7ed16cffa50f10b1ae6987b3ae3",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/14/13, 10:31 PM",
          "commitNameOld": "479522112267a0448223d38870bf5d63e77a5c33",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.54,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"resource\")\n@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n    if (value \u003d\u003d null) {\n        _serializeXmlNull(xgen);\n        return;\n    }\n    final Class\u003c?\u003e cls \u003d value.getClass();\n    final boolean asArray;\n    if (xgen \u003d\u003d null) {\n        asArray \u003d false;\n    } else {\n        QName rootName \u003d _rootNameFromConfig();\n        if (rootName \u003d\u003d null) {\n            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n        }\n        _initWithRootName(xgen, rootName);\n        asArray \u003d TypeUtil.isIndexedType(cls);\n        if (asArray) {\n            _startRootArray(jgen, rootName);\n        }\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, jgen, this);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n    if (asArray) {\n        jgen.writeEndObject();\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
          "functionStartLine": 67,
          "functionName": "serializeValue",
          "functionAnnotation": "@SuppressWarnings(\"resource\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,32 +1,39 @@\n+@SuppressWarnings(\"resource\")\n @Override\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n+    final ToXmlGenerator xgen \u003d _asXmlGenerator(jgen);\n     if (value \u003d\u003d null) {\n-        _serializeNull(jgen);\n+        _serializeXmlNull(xgen);\n         return;\n     }\n-    Class\u003c?\u003e cls \u003d value.getClass();\n-    QName rootName \u003d _rootNameFromConfig();\n-    if (rootName \u003d\u003d null) {\n-        rootName \u003d _rootNameLookup.findRootName(cls, _config);\n-    }\n-    _initWithRootName(jgen, rootName);\n-    final boolean asArray \u003d Collection.class.isAssignableFrom(cls) || (cls.isArray() \u0026\u0026 cls !\u003d byte[].class);\n-    if (asArray) {\n-        _startRootArray(jgen, rootName);\n+    final Class\u003c?\u003e cls \u003d value.getClass();\n+    final boolean asArray;\n+    if (xgen \u003d\u003d null) {\n+        asArray \u003d false;\n+    } else {\n+        QName rootName \u003d _rootNameFromConfig();\n+        if (rootName \u003d\u003d null) {\n+            rootName \u003d _rootNameLookup.findRootName(cls, _config);\n+        }\n+        _initWithRootName(xgen, rootName);\n+        asArray \u003d TypeUtil.isIndexedType(cls);\n+        if (asArray) {\n+            _startRootArray(jgen, rootName);\n+        }\n     }\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     try {\n         ser.serialize(value, jgen, this);\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n     if (asArray) {\n         jgen.writeEndObject();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": "@SuppressWarnings(\"resource\"),@Override"
          }
        }
      ]
    },
    "479522112267a0448223d38870bf5d63e77a5c33": {
      "type": "Ybodychange",
      "commitMessage": "Implement #38\n",
      "commitDate": "8/14/13, 10:31 PM",
      "commitName": "479522112267a0448223d38870bf5d63e77a5c33",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/28/12, 9:04 PM",
      "commitNameOld": "e11f6cb52d5fec07a6cd2e148026bca7e37421dc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 259.02,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    if (value \u003d\u003d null) {\n        _serializeNull(jgen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    QName rootName \u003d _rootNameFromConfig();\n    if (rootName \u003d\u003d null) {\n        rootName \u003d _rootNameLookup.findRootName(cls, _config);\n    }\n    _initWithRootName(jgen, rootName);\n    final boolean asArray \u003d Collection.class.isAssignableFrom(cls) || (cls.isArray() \u0026\u0026 cls !\u003d byte[].class);\n    if (asArray) {\n        _startRootArray(jgen, rootName);\n    }\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    try {\n        ser.serialize(value, jgen, this);\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n    if (asArray) {\n        jgen.writeEndObject();\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "functionStartLine": 65,
      "functionName": "serializeValue",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,6 +1,32 @@\n @Override\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n-    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n+    if (value \u003d\u003d null) {\n+        _serializeNull(jgen);\n+        return;\n+    }\n+    Class\u003c?\u003e cls \u003d value.getClass();\n+    QName rootName \u003d _rootNameFromConfig();\n+    if (rootName \u003d\u003d null) {\n+        rootName \u003d _rootNameLookup.findRootName(cls, _config);\n+    }\n     _initWithRootName(jgen, rootName);\n-    super.serializeValue(jgen, value);\n+    final boolean asArray \u003d Collection.class.isAssignableFrom(cls) || (cls.isArray() \u0026\u0026 cls !\u003d byte[].class);\n+    if (asArray) {\n+        _startRootArray(jgen, rootName);\n+    }\n+    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n+    try {\n+        ser.serialize(value, jgen, this);\n+    } catch (IOException ioe) {\n+        throw ioe;\n+    } catch (Exception e) {\n+        String msg \u003d e.getMessage();\n+        if (msg \u003d\u003d null) {\n+            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n+        }\n+        throw new JsonMappingException(msg, e);\n+    }\n+    if (asArray) {\n+        jgen.writeEndObject();\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e9faaec591c288917951ce77f12a1d9dfb4fbcd1": {
      "type": "Ybodychange",
      "commitMessage": "Fix [Issue-26]; root element should use \u0027default namespace\u0027, not explicit prefix\n",
      "commitDate": "5/23/12, 10:45 PM",
      "commitName": "e9faaec591c288917951ce77f12a1d9dfb4fbcd1",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/14/12, 8:06 PM",
      "commitNameOld": "3f14cab73c8c2bcdaaaab7799173f8009cf9b681",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 70.11,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n    _initWithRootName(jgen, rootName);\n    super.serializeValue(jgen, value);\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "functionStartLine": 58,
      "functionName": "serializeValue",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,8 +1,6 @@\n @Override\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n     QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n-    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n-    xgen.setNextName(rootName);\n-    xgen.initGenerator();\n+    _initWithRootName(jgen, rootName);\n     super.serializeValue(jgen, value);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "948d377c7aafb0ed91a244415df07f3f6c106be2": {
      "type": "Yfilerename",
      "commitMessage": "refactoring\n",
      "commitDate": "2/19/12, 9:55 PM",
      "commitName": "948d377c7aafb0ed91a244415df07f3f6c106be2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/12, 9:53 PM",
      "commitNameOld": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n    xgen.setNextName(rootName);\n    xgen.initGenerator();\n    super.serializeValue(jgen, value);\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
      "functionStartLine": 55,
      "functionName": "serializeValue",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java",
        "newPath": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java"
      }
    },
    "4eb1efdf62fa5efab2422803d0f821932dda5c5a": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "Fix compilation problems\n",
      "commitDate": "2/19/12, 9:53 PM",
      "commitName": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Fix compilation problems\n",
          "commitDate": "2/19/12, 9:53 PM",
          "commitName": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/19/12, 3:05 PM",
          "commitNameOld": "865f5f3336146b5f3e22844a192b3d1c9537b24d",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n    xgen.setNextName(rootName);\n    xgen.initGenerator();\n    super.serializeValue(jgen, value);\n}",
          "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java",
          "functionStartLine": 55,
          "functionName": "serializeValue",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n @Override\n-protected void _serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n     QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n     ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n     xgen.setNextName(rootName);\n     xgen.initGenerator();\n-    super._serializeValue(jgen, value);\n+    super.serializeValue(jgen, value);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "_serializeValue",
            "newValue": "serializeValue"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Fix compilation problems\n",
          "commitDate": "2/19/12, 9:53 PM",
          "commitName": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/19/12, 3:05 PM",
          "commitNameOld": "865f5f3336146b5f3e22844a192b3d1c9537b24d",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n    xgen.setNextName(rootName);\n    xgen.initGenerator();\n    super.serializeValue(jgen, value);\n}",
          "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java",
          "functionStartLine": 55,
          "functionName": "serializeValue",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n @Override\n-protected void _serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n     QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n     ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n     xgen.setNextName(rootName);\n     xgen.initGenerator();\n-    super._serializeValue(jgen, value);\n+    super.serializeValue(jgen, value);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix compilation problems\n",
          "commitDate": "2/19/12, 9:53 PM",
          "commitName": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/19/12, 3:05 PM",
          "commitNameOld": "865f5f3336146b5f3e22844a192b3d1c9537b24d",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n    xgen.setNextName(rootName);\n    xgen.initGenerator();\n    super.serializeValue(jgen, value);\n}",
          "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java",
          "functionStartLine": 55,
          "functionName": "serializeValue",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,8 +1,8 @@\n @Override\n-protected void _serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n     QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n     ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n     xgen.setNextName(rootName);\n     xgen.initGenerator();\n-    super._serializeValue(jgen, value);\n+    super.serializeValue(jgen, value);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "478883dc04ab768edc2230f49871993b41899a93": {
      "type": "Yfilerename",
      "commitMessage": "Adding XmlAnnotationIntrospector.Pair\n",
      "commitDate": "1/1/11, 7:24 PM",
      "commitName": "478883dc04ab768edc2230f49871993b41899a93",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/1/11, 6:40 PM",
      "commitNameOld": "09eec8108d8ca9757034443410253d2d72176fd5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void _serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n    xgen.setNextName(rootName);\n    xgen.initGenerator();\n    super._serializeValue(jgen, value);\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java",
      "functionStartLine": 57,
      "functionName": "_serializeValue",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/xml/XmlSerializerProvider.java",
        "newPath": "src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java"
      }
    },
    "ac97422c72402f2970e5d9eab7a727a308399d56": {
      "type": "Yintroduced",
      "commitMessage": "Added main codebase as well\n",
      "commitDate": "12/30/10, 10:22 PM",
      "commitName": "ac97422c72402f2970e5d9eab7a727a308399d56",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,8 @@\n+@Override\n+protected void _serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n+    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n+    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n+    xgen.setNextName(rootName);\n+    xgen.initGenerator();\n+    super._serializeValue(jgen, value);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nprotected void _serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException {\n    QName rootName \u003d (value \u003d\u003d null) ? ROOT_NAME_FOR_NULL : _rootNameLookup.findRootName(value.getClass(), _config);\n    ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen;\n    xgen.setNextName(rootName);\n    xgen.initGenerator();\n    super._serializeValue(jgen, value);\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/XmlSerializerProvider.java",
      "functionStartLine": 57,
      "functionName": "_serializeValue",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}