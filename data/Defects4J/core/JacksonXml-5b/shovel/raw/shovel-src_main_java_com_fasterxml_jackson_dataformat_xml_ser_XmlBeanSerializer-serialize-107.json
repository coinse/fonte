{
  "origin": "codeshovel",
  "repositoryName": "JacksonXml-5b",
  "repositoryPath": "/tmp/JacksonXml-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XmlBeanSerializer.java",
  "functionName": "serialize",
  "functionId": "serialize___bean-Object__g-JsonGenerator__provider-SerializerProvider",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
  "functionStartLine": 107,
  "functionEndLine": 120,
  "numCommitsSeen": 74,
  "timeTaken": 1131,
  "changeHistory": [
    "57e37475b41031863f530545c113b9d2b7fb4bd2",
    "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa",
    "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
    "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb",
    "b1955591ff2600530856361066b9b60e18ff1714",
    "1252cc61fb7bbae4b384e9b674198cabad8988b0",
    "479522112267a0448223d38870bf5d63e77a5c33",
    "2b21a9efe673eca4fa4f443dcd3289e91db80bc9",
    "9fef513497b84f20176814de474a9f408f860e0f",
    "3bb8b8a8c9105d984c71898d3a0002ce1e048454",
    "1f5e1c2f7b36ebf39fca0f544297868529509c4d",
    "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca",
    "948d377c7aafb0ed91a244415df07f3f6c106be2",
    "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe",
    "f6deb26e00c59e51c1b4b66583abb629be770a37",
    "478883dc04ab768edc2230f49871993b41899a93",
    "ac97422c72402f2970e5d9eab7a727a308399d56"
  ],
  "changeHistoryShort": {
    "57e37475b41031863f530545c113b9d2b7fb4bd2": "Ymultichange(Yparameterchange,Ybodychange)",
    "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa": "Ymultichange(Ymodifierchange,Yexceptionschange)",
    "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb": "Ybodychange",
    "b1955591ff2600530856361066b9b60e18ff1714": "Ybodychange",
    "1252cc61fb7bbae4b384e9b674198cabad8988b0": "Ybodychange",
    "479522112267a0448223d38870bf5d63e77a5c33": "Ymultichange(Ybodychange,Yannotationchange)",
    "2b21a9efe673eca4fa4f443dcd3289e91db80bc9": "Yformatchange",
    "9fef513497b84f20176814de474a9f408f860e0f": "Ymultichange(Ybodychange,Yannotationchange)",
    "3bb8b8a8c9105d984c71898d3a0002ce1e048454": "Yformatchange",
    "1f5e1c2f7b36ebf39fca0f544297868529509c4d": "Yformatchange",
    "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca": "Ybodychange",
    "948d377c7aafb0ed91a244415df07f3f6c106be2": "Yfilerename",
    "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe": "Ybodychange",
    "f6deb26e00c59e51c1b4b66583abb629be770a37": "Yformatchange",
    "478883dc04ab768edc2230f49871993b41899a93": "Yfilerename",
    "ac97422c72402f2970e5d9eab7a727a308399d56": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57e37475b41031863f530545c113b9d2b7fb4bd2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "minor cleanup\n",
      "commitDate": "7/17/17, 5:08 PM",
      "commitName": "57e37475b41031863f530545c113b9d2b7fb4bd2",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "minor cleanup\n",
          "commitDate": "7/17/17, 5:08 PM",
          "commitName": "57e37475b41031863f530545c113b9d2b7fb4bd2",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "5/9/16, 10:13 PM",
          "commitNameOld": "3a8fd77b983653b123cafee949608fa22507d609",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 433.79,
          "commitsBetweenForRepo": 110,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, g, provider, true);\n        return;\n    }\n    g.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, g, provider);\n    } else {\n        serializeFields(bean, g, provider);\n    }\n    g.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 107,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,14 +1,14 @@\n @Override\n-public void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+public void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException {\n     if (_objectIdWriter !\u003d null) {\n-        _serializeWithObjectId(bean, jgen, provider, true);\n+        _serializeWithObjectId(bean, g, provider, true);\n         return;\n     }\n-    jgen.writeStartObject();\n+    g.writeStartObject();\n     if (_propertyFilterId !\u003d null) {\n-        serializeFieldsFiltered(bean, jgen, provider);\n+        serializeFieldsFiltered(bean, g, provider);\n     } else {\n-        serializeFields(bean, jgen, provider);\n+        serializeFields(bean, g, provider);\n     }\n-    jgen.writeEndObject();\n+    g.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[bean-Object, jgen-JsonGenerator, provider-SerializerProvider]",
            "newValue": "[bean-Object, g-JsonGenerator, provider-SerializerProvider]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "minor cleanup\n",
          "commitDate": "7/17/17, 5:08 PM",
          "commitName": "57e37475b41031863f530545c113b9d2b7fb4bd2",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "5/9/16, 10:13 PM",
          "commitNameOld": "3a8fd77b983653b123cafee949608fa22507d609",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 433.79,
          "commitsBetweenForRepo": 110,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, g, provider, true);\n        return;\n    }\n    g.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, g, provider);\n    } else {\n        serializeFields(bean, g, provider);\n    }\n    g.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 107,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,14 +1,14 @@\n @Override\n-public void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+public void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException {\n     if (_objectIdWriter !\u003d null) {\n-        _serializeWithObjectId(bean, jgen, provider, true);\n+        _serializeWithObjectId(bean, g, provider, true);\n         return;\n     }\n-    jgen.writeStartObject();\n+    g.writeStartObject();\n     if (_propertyFilterId !\u003d null) {\n-        serializeFieldsFiltered(bean, jgen, provider);\n+        serializeFieldsFiltered(bean, g, provider);\n     } else {\n-        serializeFields(bean, jgen, provider);\n+        serializeFields(bean, g, provider);\n     }\n-    jgen.writeEndObject();\n+    g.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa": {
      "type": "Ymultichange(Ymodifierchange,Yexceptionschange)",
      "commitMessage": "clean up\n",
      "commitDate": "4/15/14, 9:36 PM",
      "commitName": "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "clean up\n",
          "commitDate": "4/15/14, 9:36 PM",
          "commitName": "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/14, 12:28 PM",
          "commitNameOld": "f64d69d92f4d65574aa44335ad844541ec24a9bd",
          "commitAuthorOld": "Pascal GÃ©linas",
          "daysBetweenCommits": 75.34,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, jgen, provider, true);\n        return;\n    }\n    jgen.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n    jgen.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 107,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,14 +1,14 @@\n @Override\n-public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+public void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n     if (_objectIdWriter !\u003d null) {\n         _serializeWithObjectId(bean, jgen, provider, true);\n         return;\n     }\n     jgen.writeStartObject();\n     if (_propertyFilterId !\u003d null) {\n         serializeFieldsFiltered(bean, jgen, provider);\n     } else {\n         serializeFields(bean, jgen, provider);\n     }\n     jgen.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "clean up\n",
          "commitDate": "4/15/14, 9:36 PM",
          "commitName": "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/30/14, 12:28 PM",
          "commitNameOld": "f64d69d92f4d65574aa44335ad844541ec24a9bd",
          "commitAuthorOld": "Pascal GÃ©linas",
          "daysBetweenCommits": 75.34,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, jgen, provider, true);\n        return;\n    }\n    jgen.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n    jgen.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 107,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,14 +1,14 @@\n @Override\n-public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+public void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n     if (_objectIdWriter !\u003d null) {\n         _serializeWithObjectId(bean, jgen, provider, true);\n         return;\n     }\n     jgen.writeStartObject();\n     if (_propertyFilterId !\u003d null) {\n         serializeFieldsFiltered(bean, jgen, provider);\n     } else {\n         serializeFields(bean, jgen, provider);\n     }\n     jgen.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[IOException, JsonGenerationException]",
            "newValue": "[IOException]"
          }
        }
      ]
    },
    "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Refactored xml serializer to have a base class for further serialization feature support.\n",
      "commitDate": "1/30/14, 12:13 PM",
      "commitName": "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
      "commitAuthor": "Pascal GÃ©linas",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Refactored xml serializer to have a base class for further serialization feature support.\n",
          "commitDate": "1/30/14, 12:13 PM",
          "commitName": "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
          "commitAuthor": "Pascal GÃ©linas",
          "commitDateOld": "1/28/14, 3:29 PM",
          "commitNameOld": "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.86,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, jgen, provider, true);\n        return;\n    }\n    jgen.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n    jgen.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 114,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,50 +1,14 @@\n @Override\n-protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n-    if (!(jgen0 instanceof ToXmlGenerator)) {\n-        super.serializeFields(bean, jgen0, provider);\n+public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    if (_objectIdWriter !\u003d null) {\n+        _serializeWithObjectId(bean, jgen, provider, true);\n         return;\n     }\n-    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n-    final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n-        props \u003d _filteredProps;\n+    jgen.writeStartObject();\n+    if (_propertyFilterId !\u003d null) {\n+        serializeFieldsFiltered(bean, jgen, provider);\n     } else {\n-        props \u003d _props;\n+        serializeFields(bean, jgen, provider);\n     }\n-    final int attrCount \u003d _attributeCount;\n-    if (attrCount \u003e 0) {\n-        xgen.setNextIsAttribute(true);\n-    }\n-    final int textIndex \u003d _textPropertyIndex;\n-    final QName[] xmlNames \u003d _xmlNames;\n-    int i \u003d 0;\n-    try {\n-        for (final int len \u003d props.length; i \u003c len; ++i) {\n-            if (i \u003d\u003d attrCount) {\n-                xgen.setNextIsAttribute(false);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(true);\n-            }\n-            xgen.setNextName(xmlNames[i]);\n-            BeanPropertyWriter prop \u003d props[i];\n-            if (prop !\u003d null) {\n-                prop.serializeAsField(bean, xgen, provider);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(false);\n-            }\n-        }\n-        if (_anyGetterWriter !\u003d null) {\n-            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n-        }\n-    } catch (Exception e) {\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        wrapAndThrow(provider, e, bean, name);\n-    } catch (StackOverflowError e) {\n-        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n-        throw mapE;\n-    }\n+    jgen.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "serializeFields",
            "newValue": "serialize"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactored xml serializer to have a base class for further serialization feature support.\n",
          "commitDate": "1/30/14, 12:13 PM",
          "commitName": "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
          "commitAuthor": "Pascal GÃ©linas",
          "commitDateOld": "1/28/14, 3:29 PM",
          "commitNameOld": "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.86,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, jgen, provider, true);\n        return;\n    }\n    jgen.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n    jgen.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 114,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,50 +1,14 @@\n @Override\n-protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n-    if (!(jgen0 instanceof ToXmlGenerator)) {\n-        super.serializeFields(bean, jgen0, provider);\n+public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    if (_objectIdWriter !\u003d null) {\n+        _serializeWithObjectId(bean, jgen, provider, true);\n         return;\n     }\n-    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n-    final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n-        props \u003d _filteredProps;\n+    jgen.writeStartObject();\n+    if (_propertyFilterId !\u003d null) {\n+        serializeFieldsFiltered(bean, jgen, provider);\n     } else {\n-        props \u003d _props;\n+        serializeFields(bean, jgen, provider);\n     }\n-    final int attrCount \u003d _attributeCount;\n-    if (attrCount \u003e 0) {\n-        xgen.setNextIsAttribute(true);\n-    }\n-    final int textIndex \u003d _textPropertyIndex;\n-    final QName[] xmlNames \u003d _xmlNames;\n-    int i \u003d 0;\n-    try {\n-        for (final int len \u003d props.length; i \u003c len; ++i) {\n-            if (i \u003d\u003d attrCount) {\n-                xgen.setNextIsAttribute(false);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(true);\n-            }\n-            xgen.setNextName(xmlNames[i]);\n-            BeanPropertyWriter prop \u003d props[i];\n-            if (prop !\u003d null) {\n-                prop.serializeAsField(bean, xgen, provider);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(false);\n-            }\n-        }\n-        if (_anyGetterWriter !\u003d null) {\n-            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n-        }\n-    } catch (Exception e) {\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        wrapAndThrow(provider, e, bean, name);\n-    } catch (StackOverflowError e) {\n-        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n-        throw mapE;\n-    }\n+    jgen.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[bean-Object, jgen0-JsonGenerator, provider-SerializerProvider]",
            "newValue": "[bean-Object, jgen-JsonGenerator, provider-SerializerProvider]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactored xml serializer to have a base class for further serialization feature support.\n",
          "commitDate": "1/30/14, 12:13 PM",
          "commitName": "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
          "commitAuthor": "Pascal GÃ©linas",
          "commitDateOld": "1/28/14, 3:29 PM",
          "commitNameOld": "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.86,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, jgen, provider, true);\n        return;\n    }\n    jgen.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n    jgen.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 114,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,50 +1,14 @@\n @Override\n-protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n-    if (!(jgen0 instanceof ToXmlGenerator)) {\n-        super.serializeFields(bean, jgen0, provider);\n+public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    if (_objectIdWriter !\u003d null) {\n+        _serializeWithObjectId(bean, jgen, provider, true);\n         return;\n     }\n-    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n-    final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n-        props \u003d _filteredProps;\n+    jgen.writeStartObject();\n+    if (_propertyFilterId !\u003d null) {\n+        serializeFieldsFiltered(bean, jgen, provider);\n     } else {\n-        props \u003d _props;\n+        serializeFields(bean, jgen, provider);\n     }\n-    final int attrCount \u003d _attributeCount;\n-    if (attrCount \u003e 0) {\n-        xgen.setNextIsAttribute(true);\n-    }\n-    final int textIndex \u003d _textPropertyIndex;\n-    final QName[] xmlNames \u003d _xmlNames;\n-    int i \u003d 0;\n-    try {\n-        for (final int len \u003d props.length; i \u003c len; ++i) {\n-            if (i \u003d\u003d attrCount) {\n-                xgen.setNextIsAttribute(false);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(true);\n-            }\n-            xgen.setNextName(xmlNames[i]);\n-            BeanPropertyWriter prop \u003d props[i];\n-            if (prop !\u003d null) {\n-                prop.serializeAsField(bean, xgen, provider);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(false);\n-            }\n-        }\n-        if (_anyGetterWriter !\u003d null) {\n-            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n-        }\n-    } catch (Exception e) {\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        wrapAndThrow(provider, e, bean, name);\n-    } catch (StackOverflowError e) {\n-        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n-        throw mapE;\n-    }\n+    jgen.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public, final]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactored xml serializer to have a base class for further serialization feature support.\n",
          "commitDate": "1/30/14, 12:13 PM",
          "commitName": "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
          "commitAuthor": "Pascal GÃ©linas",
          "commitDateOld": "1/28/14, 3:29 PM",
          "commitNameOld": "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.86,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, jgen, provider, true);\n        return;\n    }\n    jgen.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n    jgen.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 114,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,50 +1,14 @@\n @Override\n-protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n-    if (!(jgen0 instanceof ToXmlGenerator)) {\n-        super.serializeFields(bean, jgen0, provider);\n+public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    if (_objectIdWriter !\u003d null) {\n+        _serializeWithObjectId(bean, jgen, provider, true);\n         return;\n     }\n-    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n-    final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n-        props \u003d _filteredProps;\n+    jgen.writeStartObject();\n+    if (_propertyFilterId !\u003d null) {\n+        serializeFieldsFiltered(bean, jgen, provider);\n     } else {\n-        props \u003d _props;\n+        serializeFields(bean, jgen, provider);\n     }\n-    final int attrCount \u003d _attributeCount;\n-    if (attrCount \u003e 0) {\n-        xgen.setNextIsAttribute(true);\n-    }\n-    final int textIndex \u003d _textPropertyIndex;\n-    final QName[] xmlNames \u003d _xmlNames;\n-    int i \u003d 0;\n-    try {\n-        for (final int len \u003d props.length; i \u003c len; ++i) {\n-            if (i \u003d\u003d attrCount) {\n-                xgen.setNextIsAttribute(false);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(true);\n-            }\n-            xgen.setNextName(xmlNames[i]);\n-            BeanPropertyWriter prop \u003d props[i];\n-            if (prop !\u003d null) {\n-                prop.serializeAsField(bean, xgen, provider);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(false);\n-            }\n-        }\n-        if (_anyGetterWriter !\u003d null) {\n-            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n-        }\n-    } catch (Exception e) {\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        wrapAndThrow(provider, e, bean, name);\n-    } catch (StackOverflowError e) {\n-        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n-        throw mapE;\n-    }\n+    jgen.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Refactored xml serializer to have a base class for further serialization feature support.\n",
          "commitDate": "1/30/14, 12:13 PM",
          "commitName": "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
          "commitAuthor": "Pascal GÃ©linas",
          "commitDateOld": "1/28/14, 3:29 PM",
          "commitNameOld": "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.86,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (_objectIdWriter !\u003d null) {\n        _serializeWithObjectId(bean, jgen, provider, true);\n        return;\n    }\n    jgen.writeStartObject();\n    if (_propertyFilterId !\u003d null) {\n        serializeFieldsFiltered(bean, jgen, provider);\n    } else {\n        serializeFields(bean, jgen, provider);\n    }\n    jgen.writeEndObject();\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 114,
          "functionName": "serialize",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n",
          "diff": "@@ -1,50 +1,14 @@\n @Override\n-protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n-    if (!(jgen0 instanceof ToXmlGenerator)) {\n-        super.serializeFields(bean, jgen0, provider);\n+public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    if (_objectIdWriter !\u003d null) {\n+        _serializeWithObjectId(bean, jgen, provider, true);\n         return;\n     }\n-    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n-    final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n-        props \u003d _filteredProps;\n+    jgen.writeStartObject();\n+    if (_propertyFilterId !\u003d null) {\n+        serializeFieldsFiltered(bean, jgen, provider);\n     } else {\n-        props \u003d _props;\n+        serializeFields(bean, jgen, provider);\n     }\n-    final int attrCount \u003d _attributeCount;\n-    if (attrCount \u003e 0) {\n-        xgen.setNextIsAttribute(true);\n-    }\n-    final int textIndex \u003d _textPropertyIndex;\n-    final QName[] xmlNames \u003d _xmlNames;\n-    int i \u003d 0;\n-    try {\n-        for (final int len \u003d props.length; i \u003c len; ++i) {\n-            if (i \u003d\u003d attrCount) {\n-                xgen.setNextIsAttribute(false);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(true);\n-            }\n-            xgen.setNextName(xmlNames[i]);\n-            BeanPropertyWriter prop \u003d props[i];\n-            if (prop !\u003d null) {\n-                prop.serializeAsField(bean, xgen, provider);\n-            }\n-            if (i \u003d\u003d textIndex) {\n-                xgen.setNextIsUnwrapped(false);\n-            }\n-        }\n-        if (_anyGetterWriter !\u003d null) {\n-            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n-        }\n-    } catch (Exception e) {\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        wrapAndThrow(provider, e, bean, name);\n-    } catch (StackOverflowError e) {\n-        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n-        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n-        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n-        throw mapE;\n-    }\n+    jgen.writeEndObject();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
            "newValue": "Main serialization method that will delegate actual output to configured\n{@link BeanPropertyWriter} instances.\n"
          }
        }
      ]
    },
    "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb": {
      "type": "Ybodychange",
      "commitMessage": "Fixed #91\n",
      "commitDate": "1/28/14, 3:29 PM",
      "commitName": "35dbcf0a914c9aff8b0faf76f8d14ebc79af32eb",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/28/14, 7:51 AM",
      "commitNameOld": "62b87e1bdca8cb1e5e97c8777bfaec33a80c6278",
      "commitAuthorOld": "Pascal GÃ©linas",
      "daysBetweenCommits": 0.32,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (!(jgen0 instanceof ToXmlGenerator)) {\n        super.serializeFields(bean, jgen0, provider);\n        return;\n    }\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(false);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 124,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "b1955591ff2600530856361066b9b60e18ff1714": {
      "type": "Ybodychange",
      "commitMessage": "Fix issue #84.\n",
      "commitDate": "12/10/13, 8:57 AM",
      "commitName": "b1955591ff2600530856361066b9b60e18ff1714",
      "commitAuthor": "Pascal GÃ©linas",
      "commitDateOld": "10/28/13, 2:55 PM",
      "commitNameOld": "ebbfa7277306312d6357c18bc97839489a1e7a24",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 42.79,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (!(jgen0 instanceof ToXmlGenerator)) {\n        super.serializeFields(bean, jgen0, provider);\n        return;\n    }\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(false);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 123,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "@@ -1,47 +1,50 @@\n @Override\n protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n     if (!(jgen0 instanceof ToXmlGenerator)) {\n         super.serializeFields(bean, jgen0, provider);\n         return;\n     }\n     final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n     final BeanPropertyWriter[] props;\n     if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     final int attrCount \u003d _attributeCount;\n     if (attrCount \u003e 0) {\n         xgen.setNextIsAttribute(true);\n     }\n     final int textIndex \u003d _textPropertyIndex;\n     final QName[] xmlNames \u003d _xmlNames;\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             if (i \u003d\u003d attrCount) {\n                 xgen.setNextIsAttribute(false);\n             }\n             if (i \u003d\u003d textIndex) {\n                 xgen.setNextIsUnwrapped(true);\n             }\n             xgen.setNextName(xmlNames[i]);\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, xgen, provider);\n             }\n+            if (i \u003d\u003d textIndex) {\n+                xgen.setNextIsUnwrapped(false);\n+            }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1252cc61fb7bbae4b384e9b674198cabad8988b0": {
      "type": "Ybodychange",
      "commitMessage": "Further work on handling convertValue() properly.\n",
      "commitDate": "8/19/13, 10:08 PM",
      "commitName": "1252cc61fb7bbae4b384e9b674198cabad8988b0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/14/13, 10:31 PM",
      "commitNameOld": "479522112267a0448223d38870bf5d63e77a5c33",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.98,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    if (!(jgen0 instanceof ToXmlGenerator)) {\n        super.serializeFields(bean, jgen0, provider);\n        return;\n    }\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 125,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "@@ -1,43 +1,47 @@\n @Override\n protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    if (!(jgen0 instanceof ToXmlGenerator)) {\n+        super.serializeFields(bean, jgen0, provider);\n+        return;\n+    }\n     final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n     final BeanPropertyWriter[] props;\n     if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     final int attrCount \u003d _attributeCount;\n     if (attrCount \u003e 0) {\n         xgen.setNextIsAttribute(true);\n     }\n     final int textIndex \u003d _textPropertyIndex;\n     final QName[] xmlNames \u003d _xmlNames;\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             if (i \u003d\u003d attrCount) {\n                 xgen.setNextIsAttribute(false);\n             }\n             if (i \u003d\u003d textIndex) {\n                 xgen.setNextIsUnwrapped(true);\n             }\n             xgen.setNextName(xmlNames[i]);\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, xgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "479522112267a0448223d38870bf5d63e77a5c33": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Implement #38\n",
      "commitDate": "8/14/13, 10:31 PM",
      "commitName": "479522112267a0448223d38870bf5d63e77a5c33",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Implement #38\n",
          "commitDate": "8/14/13, 10:31 PM",
          "commitName": "479522112267a0448223d38870bf5d63e77a5c33",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/11/13, 8:19 PM",
          "commitNameOld": "2b21a9efe673eca4fa4f443dcd3289e91db80bc9",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 156.09,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 125,
          "functionName": "serializeFields",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
          "diff": "@@ -1,44 +1,43 @@\n-@SuppressWarnings(\"deprecation\")\n @Override\n protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n     final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n+    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     final int attrCount \u003d _attributeCount;\n     if (attrCount \u003e 0) {\n         xgen.setNextIsAttribute(true);\n     }\n     final int textIndex \u003d _textPropertyIndex;\n     final QName[] xmlNames \u003d _xmlNames;\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             if (i \u003d\u003d attrCount) {\n                 xgen.setNextIsAttribute(false);\n             }\n             if (i \u003d\u003d textIndex) {\n                 xgen.setNextIsUnwrapped(true);\n             }\n             xgen.setNextName(xmlNames[i]);\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, xgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Implement #38\n",
          "commitDate": "8/14/13, 10:31 PM",
          "commitName": "479522112267a0448223d38870bf5d63e77a5c33",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/11/13, 8:19 PM",
          "commitNameOld": "2b21a9efe673eca4fa4f443dcd3289e91db80bc9",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 156.09,
          "commitsBetweenForRepo": 45,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 125,
          "functionName": "serializeFields",
          "functionAnnotation": "@Override",
          "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
          "diff": "@@ -1,44 +1,43 @@\n-@SuppressWarnings(\"deprecation\")\n @Override\n protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n     final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n+    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     final int attrCount \u003d _attributeCount;\n     if (attrCount \u003e 0) {\n         xgen.setNextIsAttribute(true);\n     }\n     final int textIndex \u003d _textPropertyIndex;\n     final QName[] xmlNames \u003d _xmlNames;\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             if (i \u003d\u003d attrCount) {\n                 xgen.setNextIsAttribute(false);\n             }\n             if (i \u003d\u003d textIndex) {\n                 xgen.setNextIsUnwrapped(true);\n             }\n             xgen.setNextName(xmlNames[i]);\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, xgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"deprecation\"),@Override",
            "newValue": "@Override"
          }
        }
      ]
    },
    "2b21a9efe673eca4fa4f443dcd3289e91db80bc9": {
      "type": "Yformatchange",
      "commitMessage": "Fixed issue #56\n",
      "commitDate": "3/11/13, 8:19 PM",
      "commitName": "2b21a9efe673eca4fa4f443dcd3289e91db80bc9",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/9/13, 8:08 PM",
      "commitNameOld": "9fef513497b84f20176814de474a9f408f860e0f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.97,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"deprecation\")\n@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 126,
      "functionName": "serializeFields",
      "functionAnnotation": "@SuppressWarnings(\"deprecation\"),@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "9fef513497b84f20176814de474a9f408f860e0f": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Change version detection\n",
      "commitDate": "3/9/13, 8:08 PM",
      "commitName": "9fef513497b84f20176814de474a9f408f860e0f",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Change version detection\n",
          "commitDate": "3/9/13, 8:08 PM",
          "commitName": "9fef513497b84f20176814de474a9f408f860e0f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "11/21/12, 5:41 PM",
          "commitNameOld": "b062b0ed00df00a3f01e53866edfaecf487065ef",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 108.1,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"deprecation\")\n@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 126,
          "functionName": "serializeFields",
          "functionAnnotation": "@SuppressWarnings(\"deprecation\"),@Override",
          "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
          "diff": "@@ -1,43 +1,44 @@\n+@SuppressWarnings(\"deprecation\")\n @Override\n protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n     final BeanPropertyWriter[] props;\n     if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     final int attrCount \u003d _attributeCount;\n     if (attrCount \u003e 0) {\n         xgen.setNextIsAttribute(true);\n     }\n     final int textIndex \u003d _textPropertyIndex;\n     final QName[] xmlNames \u003d _xmlNames;\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             if (i \u003d\u003d attrCount) {\n                 xgen.setNextIsAttribute(false);\n             }\n             if (i \u003d\u003d textIndex) {\n                 xgen.setNextIsUnwrapped(true);\n             }\n             xgen.setNextName(xmlNames[i]);\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, xgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Change version detection\n",
          "commitDate": "3/9/13, 8:08 PM",
          "commitName": "9fef513497b84f20176814de474a9f408f860e0f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "11/21/12, 5:41 PM",
          "commitNameOld": "b062b0ed00df00a3f01e53866edfaecf487065ef",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 108.1,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"deprecation\")\n@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
          "functionStartLine": 126,
          "functionName": "serializeFields",
          "functionAnnotation": "@SuppressWarnings(\"deprecation\"),@Override",
          "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
          "diff": "@@ -1,43 +1,44 @@\n+@SuppressWarnings(\"deprecation\")\n @Override\n protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n     final BeanPropertyWriter[] props;\n     if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     final int attrCount \u003d _attributeCount;\n     if (attrCount \u003e 0) {\n         xgen.setNextIsAttribute(true);\n     }\n     final int textIndex \u003d _textPropertyIndex;\n     final QName[] xmlNames \u003d _xmlNames;\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             if (i \u003d\u003d attrCount) {\n                 xgen.setNextIsAttribute(false);\n             }\n             if (i \u003d\u003d textIndex) {\n                 xgen.setNextIsUnwrapped(true);\n             }\n             xgen.setNextName(xmlNames[i]);\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, xgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": "@SuppressWarnings(\"deprecation\"),@Override"
          }
        }
      ]
    },
    "3bb8b8a8c9105d984c71898d3a0002ce1e048454": {
      "type": "Yformatchange",
      "commitMessage": "Implemented [Issue#36], ability to change virtual name used for XML Text segments (default \"\")\n",
      "commitDate": "9/28/12, 10:01 PM",
      "commitName": "3bb8b8a8c9105d984c71898d3a0002ce1e048454",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/23/12, 11:08 AM",
      "commitNameOld": "1f5e1c2f7b36ebf39fca0f544297868529509c4d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 36.45,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 125,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "1f5e1c2f7b36ebf39fca0f544297868529509c4d": {
      "type": "Yformatchange",
      "commitMessage": "Clear up new eclipse warnings, add a test to ensure file-backed generation methods work\n",
      "commitDate": "8/23/12, 11:08 AM",
      "commitName": "1f5e1c2f7b36ebf39fca0f544297868529509c4d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/27/12, 5:08 PM",
      "commitNameOld": "6ba43c99fe57d1cf38b02faa6dc9dc6aaf202310",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 26.75,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 125,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca": {
      "type": "Ybodychange",
      "commitMessage": "First part of [Issue-23] implemented: @JacksonXmlText now added, works for serialization\n",
      "commitDate": "4/4/12, 5:02 PM",
      "commitName": "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/21/12, 6:02 PM",
      "commitNameOld": "4e43d66d0359077203061e2bfad8f5b2d637ae78",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 13.96,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        xgen.setNextIsAttribute(true);\n    }\n    final int textIndex \u003d _textPropertyIndex;\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                xgen.setNextIsAttribute(false);\n            }\n            if (i \u003d\u003d textIndex) {\n                xgen.setNextIsUnwrapped(true);\n            }\n            xgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, xgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 125,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "@@ -1,39 +1,43 @@\n @Override\n protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n-    final ToXmlGenerator jgen \u003d (ToXmlGenerator) jgen0;\n+    final ToXmlGenerator xgen \u003d (ToXmlGenerator) jgen0;\n     final BeanPropertyWriter[] props;\n     if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     final int attrCount \u003d _attributeCount;\n     if (attrCount \u003e 0) {\n-        jgen.setNextIsAttribute(true);\n+        xgen.setNextIsAttribute(true);\n     }\n+    final int textIndex \u003d _textPropertyIndex;\n     final QName[] xmlNames \u003d _xmlNames;\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             if (i \u003d\u003d attrCount) {\n-                jgen.setNextIsAttribute(false);\n+                xgen.setNextIsAttribute(false);\n             }\n-            jgen.setNextName(xmlNames[i]);\n+            if (i \u003d\u003d textIndex) {\n+                xgen.setNextIsUnwrapped(true);\n+            }\n+            xgen.setNextName(xmlNames[i]);\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n-                prop.serializeAsField(bean, jgen, provider);\n+                prop.serializeAsField(bean, xgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n-            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n+            _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "948d377c7aafb0ed91a244415df07f3f6c106be2": {
      "type": "Yfilerename",
      "commitMessage": "refactoring\n",
      "commitDate": "2/19/12, 9:55 PM",
      "commitName": "948d377c7aafb0ed91a244415df07f3f6c106be2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/12, 9:53 PM",
      "commitNameOld": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator jgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        jgen.setNextIsAttribute(true);\n    }\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                jgen.setNextIsAttribute(false);\n            }\n            jgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 122,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java",
        "newPath": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java"
      }
    },
    "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe": {
      "type": "Ybodychange",
      "commitMessage": "Completed rewrite that now uses module interface for 90% of functionality (yay!) and once again works.\n",
      "commitDate": "1/7/11, 11:37 PM",
      "commitName": "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/7/11, 11:21 AM",
      "commitNameOld": "5907dacbb86e2adb48fc3b8000bd11c1fefe88ae",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator jgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        jgen.setNextIsAttribute(true);\n    }\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                jgen.setNextIsAttribute(false);\n            }\n            jgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 94,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "f6deb26e00c59e51c1b4b66583abb629be770a37": {
      "type": "Yformatchange",
      "commitMessage": "...\n",
      "commitDate": "1/1/11, 9:06 PM",
      "commitName": "f6deb26e00c59e51c1b4b66583abb629be770a37",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/1/11, 7:24 PM",
      "commitNameOld": "478883dc04ab768edc2230f49871993b41899a93",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator jgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        jgen.setNextIsAttribute(true);\n    }\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                jgen.setNextIsAttribute(false);\n            }\n            jgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 65,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "478883dc04ab768edc2230f49871993b41899a93": {
      "type": "Yfilerename",
      "commitMessage": "Adding XmlAnnotationIntrospector.Pair\n",
      "commitDate": "1/1/11, 7:24 PM",
      "commitName": "478883dc04ab768edc2230f49871993b41899a93",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/1/11, 6:40 PM",
      "commitNameOld": "09eec8108d8ca9757034443410253d2d72176fd5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator jgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        jgen.setNextIsAttribute(true);\n    }\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                jgen.setNextIsAttribute(false);\n            }\n            jgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java",
      "functionStartLine": 65,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/xml/XmlBeanSerializer.java",
        "newPath": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java"
      }
    },
    "ac97422c72402f2970e5d9eab7a727a308399d56": {
      "type": "Yintroduced",
      "commitMessage": "Added main codebase as well\n",
      "commitDate": "12/30/10, 10:22 PM",
      "commitName": "ac97422c72402f2970e5d9eab7a727a308399d56",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,39 @@\n+@Override\n+protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    final ToXmlGenerator jgen \u003d (ToXmlGenerator) jgen0;\n+    final BeanPropertyWriter[] props;\n+    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n+        props \u003d _filteredProps;\n+    } else {\n+        props \u003d _props;\n+    }\n+    final int attrCount \u003d _attributeCount;\n+    if (attrCount \u003e 0) {\n+        jgen.setNextIsAttribute(true);\n+    }\n+    final QName[] xmlNames \u003d _xmlNames;\n+    int i \u003d 0;\n+    try {\n+        for (final int len \u003d props.length; i \u003c len; ++i) {\n+            if (i \u003d\u003d attrCount) {\n+                jgen.setNextIsAttribute(false);\n+            }\n+            jgen.setNextName(xmlNames[i]);\n+            BeanPropertyWriter prop \u003d props[i];\n+            if (prop !\u003d null) {\n+                prop.serializeAsField(bean, jgen, provider);\n+            }\n+        }\n+        if (_anyGetterWriter !\u003d null) {\n+            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n+        }\n+    } catch (Exception e) {\n+        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n+        wrapAndThrow(provider, e, bean, name);\n+    } catch (StackOverflowError e) {\n+        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n+        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n+        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n+        throw mapE;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nprotected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final ToXmlGenerator jgen \u003d (ToXmlGenerator) jgen0;\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    final int attrCount \u003d _attributeCount;\n    if (attrCount \u003e 0) {\n        jgen.setNextIsAttribute(true);\n    }\n    final QName[] xmlNames \u003d _xmlNames;\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            if (i \u003d\u003d attrCount) {\n                jgen.setNextIsAttribute(false);\n            }\n            jgen.setNextName(xmlNames[i]);\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/XmlBeanSerializer.java",
      "functionStartLine": 64,
      "functionName": "serializeFields",
      "functionAnnotation": "@Override",
      "functionDoc": "Main serialization method needs to be overridden to allow XML-specific\nextra handling, such as indication of whether to write attributes or\nelements.\n"
    }
  }
}