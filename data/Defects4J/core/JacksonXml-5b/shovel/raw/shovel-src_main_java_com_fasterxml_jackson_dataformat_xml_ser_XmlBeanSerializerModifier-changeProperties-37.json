{
  "origin": "codeshovel",
  "repositoryName": "JacksonXml-5b",
  "repositoryPath": "/tmp/JacksonXml-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XmlBeanSerializerModifier.java",
  "functionName": "changeProperties",
  "functionId": "changeProperties___config-SerializationConfig__beanDesc-BeanDescription__beanProperties-List__BeanPropertyWriter__",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
  "functionAnnotation": "@Override",
  "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
  "functionStartLine": 37,
  "functionEndLine": 72,
  "numCommitsSeen": 20,
  "timeTaken": 669,
  "changeHistory": [
    "edf7a8b5f24edbf5c97b19fbb457758b3fb558a4",
    "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
    "d54aade4b167dfa1085beb8eff8551145dd46830",
    "4b5c9b7c5c4d70e0cf6f8944837e54be862a27cc",
    "41628fa07748c93f043eb3657ba34a085745bfee",
    "c95e6bf1c44e59eb56a1c938a157cb9c9f278762",
    "b43f0c52ad5d3dc161efd24e5df13788971a9950",
    "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca",
    "e88829ad7ec380b1d84ed2d769310ccc568f015c",
    "948d377c7aafb0ed91a244415df07f3f6c106be2",
    "76f1154551a685fd3606d4263d1ce96ccab1bfb4",
    "3800d1aa0c887491d0fed0ed4baee3bb676cb65f",
    "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe"
  ],
  "changeHistoryShort": {
    "edf7a8b5f24edbf5c97b19fbb457758b3fb558a4": "Ybodychange",
    "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e": "Ybodychange",
    "d54aade4b167dfa1085beb8eff8551145dd46830": "Ybodychange",
    "4b5c9b7c5c4d70e0cf6f8944837e54be862a27cc": "Ybodychange",
    "41628fa07748c93f043eb3657ba34a085745bfee": "Ybodychange",
    "c95e6bf1c44e59eb56a1c938a157cb9c9f278762": "Ybodychange",
    "b43f0c52ad5d3dc161efd24e5df13788971a9950": "Ybodychange",
    "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca": "Ybodychange",
    "e88829ad7ec380b1d84ed2d769310ccc568f015c": "Ybodychange",
    "948d377c7aafb0ed91a244415df07f3f6c106be2": "Yfilerename",
    "76f1154551a685fd3606d4263d1ce96ccab1bfb4": "Yparameterchange",
    "3800d1aa0c887491d0fed0ed4baee3bb676cb65f": "Ymultichange(Ymovefromfile,Ybodychange,Yannotationchange)",
    "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "edf7a8b5f24edbf5c97b19fbb457758b3fb558a4": {
      "type": "Ybodychange",
      "commitMessage": "Add support for specifying properties should be serialized using CData tags.\n",
      "commitDate": "11/11/14, 10:07 PM",
      "commitName": "edf7a8b5f24edbf5c97b19fbb457758b3fb558a4",
      "commitAuthor": "Dan Jasek",
      "commitDateOld": "4/15/14, 9:36 PM",
      "commitNameOld": "36c9bb8649fb8f5689b8ba2b00beff151aa80aaa",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 210.06,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        Boolean isCData \u003d AnnotationUtil.findIsCDataAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText, isCData));\n        if (!TypeUtil.isIndexedType(bpw.getType())) {\n            continue;\n        }\n        PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n        PropertyName wrapperName \u003d bpw.getWrapperName();\n        if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n            continue;\n        }\n        String localName \u003d wrapperName.getSimpleName();\n        if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n            wrapperName \u003d wrappedName;\n        }\n        beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 37,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,26 +1,27 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n-        bpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n+        Boolean isCData \u003d AnnotationUtil.findIsCDataAnnotation(intr, member);\n+        bpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText, isCData));\n         if (!TypeUtil.isIndexedType(bpw.getType())) {\n             continue;\n         }\n         PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n         PropertyName wrapperName \u003d bpw.getWrapperName();\n         if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n             continue;\n         }\n         String localName \u003d wrapperName.getSimpleName();\n         if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n             wrapperName \u003d wrappedName;\n         }\n         beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e": {
      "type": "Ybodychange",
      "commitMessage": "Refactored xml serializer to have a base class for further serialization feature support.\n",
      "commitDate": "1/30/14, 12:13 PM",
      "commitName": "ab84ac9f6fcbd2c88c548bcdfe05a7fd7b11aa6e",
      "commitAuthor": "Pascal GÃ©linas",
      "commitDateOld": "3/13/13, 4:01 PM",
      "commitNameOld": "d54aade4b167dfa1085beb8eff8551145dd46830",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 322.88,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n        if (!TypeUtil.isIndexedType(bpw.getType())) {\n            continue;\n        }\n        PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n        PropertyName wrapperName \u003d bpw.getWrapperName();\n        if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n            continue;\n        }\n        String localName \u003d wrapperName.getSimpleName();\n        if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n            wrapperName \u003d wrappedName;\n        }\n        beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 37,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,26 +1,26 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n-        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n+        bpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n         if (!TypeUtil.isIndexedType(bpw.getType())) {\n             continue;\n         }\n         PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n         PropertyName wrapperName \u003d bpw.getWrapperName();\n         if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n             continue;\n         }\n         String localName \u003d wrapperName.getSimpleName();\n         if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n             wrapperName \u003d wrappedName;\n         }\n         beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d54aade4b167dfa1085beb8eff8551145dd46830": {
      "type": "Ybodychange",
      "commitMessage": "More refactoring, clean up, to make use of cleaner way of obtaining property wrapper name\n",
      "commitDate": "3/13/13, 4:01 PM",
      "commitName": "d54aade4b167dfa1085beb8eff8551145dd46830",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/6/12, 1:42 PM",
      "commitNameOld": "621128d7d51e5a7dd1d6ec80ba9728817aa48414",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 158.1,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n        if (!TypeUtil.isIndexedType(bpw.getType())) {\n            continue;\n        }\n        PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n        PropertyName wrapperName \u003d bpw.getWrapperName();\n        if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n            continue;\n        }\n        String localName \u003d wrapperName.getSimpleName();\n        if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n            wrapperName \u003d wrappedName;\n        }\n        beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 37,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,26 +1,26 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n         if (!TypeUtil.isIndexedType(bpw.getType())) {\n             continue;\n         }\n         PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n-        PropertyName wrapperName \u003d intr.findWrapperName(member);\n+        PropertyName wrapperName \u003d bpw.getWrapperName();\n         if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n             continue;\n         }\n         String localName \u003d wrapperName.getSimpleName();\n         if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n             wrapperName \u003d wrappedName;\n         }\n         beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4b5c9b7c5c4d70e0cf6f8944837e54be862a27cc": {
      "type": "Ybodychange",
      "commitMessage": "Starting to resolve unit test failures\n",
      "commitDate": "9/9/12, 8:15 PM",
      "commitName": "4b5c9b7c5c4d70e0cf6f8944837e54be862a27cc",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/9/12, 10:40 AM",
      "commitNameOld": "41628fa07748c93f043eb3657ba34a085745bfee",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n        if (!TypeUtil.isIndexedType(bpw.getType())) {\n            continue;\n        }\n        PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n        PropertyName wrapperName \u003d intr.findWrapperName(member);\n        if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n            continue;\n        }\n        String localName \u003d wrapperName.getSimpleName();\n        if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n            wrapperName \u003d wrappedName;\n        }\n        beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 31,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,30 +1,26 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n-        if (TypeUtil.isIndexedType(bpw.getType())) {\n-            String localName \u003d null, wrapperNs \u003d null;\n-            PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n-            PropertyName wrapperName \u003d intr.findWrapperName(member);\n-            if (wrapperName !\u003d null) {\n-                localName \u003d wrapperName.getSimpleName();\n-                wrapperNs \u003d wrapperName.getNamespace();\n-            }\n-            if (localName \u003d\u003d null) {\n-                wrapperName \u003d wrappedName;\n-            } else if (localName.length() \u003d\u003d 0) {\n-                continue;\n-            } else {\n-                wrapperName \u003d PropertyName.construct(localName, (wrapperNs \u003d\u003d null) ? \"\" : wrapperNs);\n-            }\n-            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n+        if (!TypeUtil.isIndexedType(bpw.getType())) {\n+            continue;\n         }\n+        PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n+        PropertyName wrapperName \u003d intr.findWrapperName(member);\n+        if (wrapperName \u003d\u003d null || wrapperName \u003d\u003d PropertyName.NO_NAME) {\n+            continue;\n+        }\n+        String localName \u003d wrapperName.getSimpleName();\n+        if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n+            wrapperName \u003d wrappedName;\n+        }\n+        beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "41628fa07748c93f043eb3657ba34a085745bfee": {
      "type": "Ybodychange",
      "commitMessage": "Added support for deserializing unwrapped Lists; introduces 2 new failures, need to fix.\n",
      "commitDate": "9/9/12, 10:40 AM",
      "commitName": "41628fa07748c93f043eb3657ba34a085745bfee",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/5/12, 8:02 PM",
      "commitNameOld": "c95e6bf1c44e59eb56a1c938a157cb9c9f278762",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.61,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n        if (TypeUtil.isIndexedType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n            PropertyName wrapperName \u003d intr.findWrapperName(member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getSimpleName();\n                wrapperNs \u003d wrapperName.getNamespace();\n            }\n            if (localName \u003d\u003d null) {\n                wrapperName \u003d wrappedName;\n            } else if (localName.length() \u003d\u003d 0) {\n                continue;\n            } else {\n                wrapperName \u003d PropertyName.construct(localName, (wrapperNs \u003d\u003d null) ? \"\" : wrapperNs);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 31,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n-        if (_isContainerType(bpw.getType())) {\n+        if (TypeUtil.isIndexedType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n             PropertyName wrapperName \u003d intr.findWrapperName(member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getSimpleName();\n                 wrapperNs \u003d wrapperName.getNamespace();\n             }\n             if (localName \u003d\u003d null) {\n                 wrapperName \u003d wrappedName;\n             } else if (localName.length() \u003d\u003d 0) {\n                 continue;\n             } else {\n                 wrapperName \u003d PropertyName.construct(localName, (wrapperNs \u003d\u003d null) ? \"\" : wrapperNs);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c95e6bf1c44e59eb56a1c938a157cb9c9f278762": {
      "type": "Ybodychange",
      "commitMessage": "Changed code to use the new \u0027findWrapperName()\u0027, to simplify handling\n",
      "commitDate": "9/5/12, 8:02 PM",
      "commitName": "c95e6bf1c44e59eb56a1c938a157cb9c9f278762",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/21/12, 8:47 PM",
      "commitNameOld": "b43f0c52ad5d3dc161efd24e5df13788971a9950",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 14.97,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n            PropertyName wrapperName \u003d intr.findWrapperName(member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getSimpleName();\n                wrapperNs \u003d wrapperName.getNamespace();\n            }\n            if (localName \u003d\u003d null) {\n                wrapperName \u003d wrappedName;\n            } else if (localName.length() \u003d\u003d 0) {\n                continue;\n            } else {\n                wrapperName \u003d PropertyName.construct(localName, (wrapperNs \u003d\u003d null) ? \"\" : wrapperNs);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 31,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n-            QName wrappedName \u003d new QName(ns, bpw.getName());\n-            QName wrapperName \u003d AnnotationUtil.findWrapperName(intr, member);\n+            PropertyName wrappedName \u003d PropertyName.construct(bpw.getName(), ns);\n+            PropertyName wrapperName \u003d intr.findWrapperName(member);\n             if (wrapperName !\u003d null) {\n-                localName \u003d wrapperName.getLocalPart();\n-                wrapperNs \u003d wrapperName.getNamespaceURI();\n+                localName \u003d wrapperName.getSimpleName();\n+                wrapperNs \u003d wrapperName.getNamespace();\n             }\n             if (localName \u003d\u003d null) {\n                 wrapperName \u003d wrappedName;\n             } else if (localName.length() \u003d\u003d 0) {\n                 continue;\n             } else {\n-                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n+                wrapperName \u003d PropertyName.construct(localName, (wrapperNs \u003d\u003d null) ? \"\" : wrapperNs);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b43f0c52ad5d3dc161efd24e5df13788971a9950": {
      "type": "Ybodychange",
      "commitMessage": "Start implementing support for unwrapped Lists, serialization works\n",
      "commitDate": "8/21/12, 8:47 PM",
      "commitName": "b43f0c52ad5d3dc161efd24e5df13788971a9950",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/4/12, 5:02 PM",
      "commitNameOld": "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 139.16,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d AnnotationUtil.findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null) {\n                wrapperName \u003d wrappedName;\n            } else if (localName.length() \u003d\u003d 0) {\n                continue;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 34,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,28 +1,30 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             QName wrappedName \u003d new QName(ns, bpw.getName());\n             QName wrapperName \u003d AnnotationUtil.findWrapperName(intr, member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getLocalPart();\n                 wrapperNs \u003d wrapperName.getNamespaceURI();\n             }\n-            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n+            if (localName \u003d\u003d null) {\n                 wrapperName \u003d wrappedName;\n+            } else if (localName.length() \u003d\u003d 0) {\n+                continue;\n             } else {\n                 wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca": {
      "type": "Ybodychange",
      "commitMessage": "First part of [Issue-23] implemented: @JacksonXmlText now added, works for serialization\n",
      "commitDate": "4/4/12, 5:02 PM",
      "commitName": "1dff4683a6e66f1bc12fe3171ecb31c7cac5a6ca",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/14/12, 7:57 PM",
      "commitNameOld": "e88829ad7ec380b1d84ed2d769310ccc568f015c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 20.88,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d AnnotationUtil.findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 34,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,27 +1,28 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n-        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n+        Boolean isText \u003d AnnotationUtil.findIsTextAnnotation(intr, member);\n+        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             QName wrappedName \u003d new QName(ns, bpw.getName());\n             QName wrapperName \u003d AnnotationUtil.findWrapperName(intr, member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getLocalPart();\n                 wrapperNs \u003d wrapperName.getNamespaceURI();\n             }\n             if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                 wrapperName \u003d wrappedName;\n             } else {\n                 wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e88829ad7ec380b1d84ed2d769310ccc568f015c": {
      "type": "Ybodychange",
      "commitMessage": "Further work on issue #17\n",
      "commitDate": "3/14/12, 7:57 PM",
      "commitName": "e88829ad7ec380b1d84ed2d769310ccc568f015c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/20/12, 6:42 PM",
      "commitNameOld": "39822a45b523bb196db154af7acf194e07d75543",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 23.01,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d AnnotationUtil.findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 34,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    final AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n-        String ns \u003d findNamespaceAnnotation(intr, member);\n-        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n+        String ns \u003d AnnotationUtil.findNamespaceAnnotation(intr, member);\n+        Boolean isAttribute \u003d AnnotationUtil.findIsAttributeAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             QName wrappedName \u003d new QName(ns, bpw.getName());\n-            QName wrapperName \u003d findWrapperName(intr, member);\n+            QName wrapperName \u003d AnnotationUtil.findWrapperName(intr, member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getLocalPart();\n                 wrapperNs \u003d wrapperName.getNamespaceURI();\n             }\n             if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                 wrapperName \u003d wrappedName;\n             } else {\n                 wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "948d377c7aafb0ed91a244415df07f3f6c106be2": {
      "type": "Yfilerename",
      "commitMessage": "refactoring\n",
      "commitDate": "2/19/12, 9:55 PM",
      "commitName": "948d377c7aafb0ed91a244415df07f3f6c106be2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/12, 9:53 PM",
      "commitNameOld": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 33,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java",
        "newPath": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java"
      }
    },
    "76f1154551a685fd3606d4263d1ce96ccab1bfb4": {
      "type": "Yparameterchange",
      "commitMessage": "Start conversion to 2.0.0\n",
      "commitDate": "2/1/12, 2:22 PM",
      "commitName": "76f1154551a685fd3606d4263d1ce96ccab1bfb4",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/4/11, 7:50 PM",
      "commitNameOld": "86296bfe73d854601ad68f1c72efca5d8a5eee64",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 361.77,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java",
      "functionStartLine": 33,
      "functionName": "changeProperties",
      "functionAnnotation": "@Override",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n-public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n+public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             QName wrappedName \u003d new QName(ns, bpw.getName());\n             QName wrapperName \u003d findWrapperName(intr, member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getLocalPart();\n                 wrapperNs \u003d wrapperName.getNamespaceURI();\n             }\n             if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                 wrapperName \u003d wrappedName;\n             } else {\n                 wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-SerializationConfig, beanDesc-BasicBeanDescription, beanProperties-List\u003cBeanPropertyWriter\u003e]",
        "newValue": "[config-SerializationConfig, beanDesc-BeanDescription, beanProperties-List\u003cBeanPropertyWriter\u003e]"
      }
    },
    "3800d1aa0c887491d0fed0ed4baee3bb676cb65f": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yannotationchange)",
      "commitMessage": "Improve serialization a bit by making type id an attribute\n",
      "commitDate": "1/13/11, 8:50 PM",
      "commitName": "3800d1aa0c887491d0fed0ed4baee3bb676cb65f",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Improve serialization a bit by making type id an attribute\n",
          "commitDate": "1/13/11, 8:50 PM",
          "commitName": "3800d1aa0c887491d0fed0ed4baee3bb676cb65f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/9/11, 5:43 PM",
          "commitNameOld": "64529ddf7835c497e24169e2788dc42bba9fb640",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 4.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
          "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java",
          "functionStartLine": 38,
          "functionName": "changeProperties",
          "functionAnnotation": "@Override",
          "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
          "diff": "@@ -1,26 +1,27 @@\n+@Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             QName wrappedName \u003d new QName(ns, bpw.getName());\n             QName wrapperName \u003d findWrapperName(intr, member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getLocalPart();\n                 wrapperNs \u003d wrapperName.getNamespaceURI();\n             }\n             if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                 wrapperName \u003d wrappedName;\n             } else {\n                 wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/xml/JacksonXmlModule.java",
            "newPath": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java",
            "oldMethodName": "changeProperties",
            "newMethodName": "changeProperties"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Improve serialization a bit by making type id an attribute\n",
          "commitDate": "1/13/11, 8:50 PM",
          "commitName": "3800d1aa0c887491d0fed0ed4baee3bb676cb65f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/9/11, 5:43 PM",
          "commitNameOld": "64529ddf7835c497e24169e2788dc42bba9fb640",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 4.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
          "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java",
          "functionStartLine": 38,
          "functionName": "changeProperties",
          "functionAnnotation": "@Override",
          "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
          "diff": "@@ -1,26 +1,27 @@\n+@Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             QName wrappedName \u003d new QName(ns, bpw.getName());\n             QName wrapperName \u003d findWrapperName(intr, member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getLocalPart();\n                 wrapperNs \u003d wrapperName.getNamespaceURI();\n             }\n             if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                 wrapperName \u003d wrappedName;\n             } else {\n                 wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Improve serialization a bit by making type id an attribute\n",
          "commitDate": "1/13/11, 8:50 PM",
          "commitName": "3800d1aa0c887491d0fed0ed4baee3bb676cb65f",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/9/11, 5:43 PM",
          "commitNameOld": "64529ddf7835c497e24169e2788dc42bba9fb640",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 4.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
          "path": "src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java",
          "functionStartLine": 38,
          "functionName": "changeProperties",
          "functionAnnotation": "@Override",
          "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n",
          "diff": "@@ -1,26 +1,27 @@\n+@Override\n public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n         BeanPropertyWriter bpw \u003d beanProperties.get(i);\n         final AnnotatedMember member \u003d bpw.getMember();\n         String ns \u003d findNamespaceAnnotation(intr, member);\n         Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n         bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n         if (_isContainerType(bpw.getType())) {\n             String localName \u003d null, wrapperNs \u003d null;\n             QName wrappedName \u003d new QName(ns, bpw.getName());\n             QName wrapperName \u003d findWrapperName(intr, member);\n             if (wrapperName !\u003d null) {\n                 localName \u003d wrapperName.getLocalPart();\n                 wrapperNs \u003d wrapperName.getNamespaceURI();\n             }\n             if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                 wrapperName \u003d wrappedName;\n             } else {\n                 wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n             }\n             beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n         }\n     }\n     return beanProperties;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        }
      ]
    },
    "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe": {
      "type": "Yintroduced",
      "commitMessage": "Completed rewrite that now uses module interface for 90% of functionality (yay!) and once again works.\n",
      "commitDate": "1/7/11, 11:37 PM",
      "commitName": "6e8939a2a8b5ed8ac5a40a130d2e79fff9d38abe",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,26 @@\n+public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n+    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n+        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n+        final AnnotatedMember member \u003d bpw.getMember();\n+        String ns \u003d findNamespaceAnnotation(intr, member);\n+        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n+        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n+        if (_isContainerType(bpw.getType())) {\n+            String localName \u003d null, wrapperNs \u003d null;\n+            QName wrappedName \u003d new QName(ns, bpw.getName());\n+            QName wrapperName \u003d findWrapperName(intr, member);\n+            if (wrapperName !\u003d null) {\n+                localName \u003d wrapperName.getLocalPart();\n+                wrapperNs \u003d wrapperName.getNamespaceURI();\n+            }\n+            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n+                wrapperName \u003d wrappedName;\n+            } else {\n+                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n+            }\n+            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n+        }\n+    }\n+    return beanProperties;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public List\u003cBeanPropertyWriter\u003e changeProperties(SerializationConfig config, BasicBeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e beanProperties) {\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    for (int i \u003d 0, len \u003d beanProperties.size(); i \u003c len; ++i) {\n        BeanPropertyWriter bpw \u003d beanProperties.get(i);\n        final AnnotatedMember member \u003d bpw.getMember();\n        String ns \u003d findNamespaceAnnotation(intr, member);\n        Boolean isAttribute \u003d findIsAttributeAnnotation(intr, member);\n        bpw.setInternalSetting(XmlBeanSerializer.KEY_XML_INFO, new XmlInfo(isAttribute, ns));\n        if (_isContainerType(bpw.getType())) {\n            String localName \u003d null, wrapperNs \u003d null;\n            QName wrappedName \u003d new QName(ns, bpw.getName());\n            QName wrapperName \u003d findWrapperName(intr, member);\n            if (wrapperName !\u003d null) {\n                localName \u003d wrapperName.getLocalPart();\n                wrapperNs \u003d wrapperName.getNamespaceURI();\n            }\n            if (localName \u003d\u003d null || localName.length() \u003d\u003d 0) {\n                wrapperName \u003d wrappedName;\n            } else {\n                wrapperName \u003d new QName((wrapperNs \u003d\u003d null) ? \"\" : wrapperNs, localName);\n            }\n            beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n        }\n    }\n    return beanProperties;\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/JacksonXmlModule.java",
      "functionStartLine": 123,
      "functionName": "changeProperties",
      "functionAnnotation": "",
      "functionDoc": "First thing to do is to find annotations regarding XML serialization,\nand wrap collection serializers.\n"
    }
  }
}