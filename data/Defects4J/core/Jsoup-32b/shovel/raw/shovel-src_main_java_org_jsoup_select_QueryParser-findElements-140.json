{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-32b",
  "repositoryPath": "/tmp/Jsoup-32b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueryParser.java",
  "functionName": "findElements",
  "functionId": "findElements",
  "sourceFilePath": "src/main/java/org/jsoup/select/QueryParser.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 140,
  "functionEndLine": 172,
  "numCommitsSeen": 9,
  "timeTaken": 955,
  "changeHistory": [
    "bbca7db20b9a45fb3d8efb29447349ed8593649c",
    "9008cbf66ca4a89d02ba26630fb818524e790974"
  ],
  "changeHistoryShort": {
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": "Ymultichange(Ymovefromfile,Ybodychange)",
    "9008cbf66ca4a89d02ba26630fb818524e790974": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void findElements() {\n    if (tq.matchChomp(\"#\"))\n        byId();\n    else if (tq.matchChomp(\".\"))\n        byClass();\n    else if (tq.matchesWord())\n        byTag();\n    else if (tq.matches(\"[\"))\n        byAttribute();\n    else if (tq.matchChomp(\"*\"))\n        allElements();\n    else if (tq.matchChomp(\":lt(\"))\n        indexLessThan();\n    else if (tq.matchChomp(\":gt(\"))\n        indexGreaterThan();\n    else if (tq.matchChomp(\":eq(\"))\n        indexEquals();\n    else if (tq.matches(\":has(\"))\n        has();\n    else if (tq.matches(\":contains(\"))\n        contains(false);\n    else if (tq.matches(\":containsOwn(\"))\n        contains(true);\n    else if (tq.matches(\":matches(\"))\n        matches(false);\n    else if (tq.matches(\":matchesOwn(\"))\n        matches(true);\n    else if (tq.matches(\":not(\"))\n        not();\n    else\n        throw new Selector.SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 121,
          "functionName": "findElements",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,33 +1,32 @@\n private void findElements() {\n-    if (tq.matchChomp(\"#\")) {\n+    if (tq.matchChomp(\"#\"))\n         byId();\n-    } else if (tq.matchChomp(\".\")) {\n+    else if (tq.matchChomp(\".\"))\n         byClass();\n-    } else if (tq.matchesWord()) {\n+    else if (tq.matchesWord())\n         byTag();\n-    } else if (tq.matches(\"[\")) {\n+    else if (tq.matches(\"[\"))\n         byAttribute();\n-    } else if (tq.matchChomp(\"*\")) {\n+    else if (tq.matchChomp(\"*\"))\n         allElements();\n-    } else if (tq.matchChomp(\":lt(\")) {\n+    else if (tq.matchChomp(\":lt(\"))\n         indexLessThan();\n-    } else if (tq.matchChomp(\":gt(\")) {\n+    else if (tq.matchChomp(\":gt(\"))\n         indexGreaterThan();\n-    } else if (tq.matchChomp(\":eq(\")) {\n+    else if (tq.matchChomp(\":eq(\"))\n         indexEquals();\n-    } else if (tq.matches(\":has(\")) {\n+    else if (tq.matches(\":has(\"))\n         has();\n-    } else if (tq.matches(\":contains(\")) {\n+    else if (tq.matches(\":contains(\"))\n         contains(false);\n-    } else if (tq.matches(\":containsOwn(\")) {\n+    else if (tq.matches(\":containsOwn(\"))\n         contains(true);\n-    } else if (tq.matches(\":matches(\")) {\n+    else if (tq.matches(\":matches(\"))\n         matches(false);\n-    } else if (tq.matches(\":matchesOwn(\")) {\n+    else if (tq.matches(\":matchesOwn(\"))\n         matches(true);\n-    } else if (tq.matches(\":not(\")) {\n+    else if (tq.matches(\":not(\"))\n         not();\n-    } else {\n-        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n-    }\n+    else\n+        throw new Selector.SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
            "newPath": "src/main/java/org/jsoup/select/QueryParser.java",
            "oldMethodName": "findElements",
            "newMethodName": "findElements"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void findElements() {\n    if (tq.matchChomp(\"#\"))\n        byId();\n    else if (tq.matchChomp(\".\"))\n        byClass();\n    else if (tq.matchesWord())\n        byTag();\n    else if (tq.matches(\"[\"))\n        byAttribute();\n    else if (tq.matchChomp(\"*\"))\n        allElements();\n    else if (tq.matchChomp(\":lt(\"))\n        indexLessThan();\n    else if (tq.matchChomp(\":gt(\"))\n        indexGreaterThan();\n    else if (tq.matchChomp(\":eq(\"))\n        indexEquals();\n    else if (tq.matches(\":has(\"))\n        has();\n    else if (tq.matches(\":contains(\"))\n        contains(false);\n    else if (tq.matches(\":containsOwn(\"))\n        contains(true);\n    else if (tq.matches(\":matches(\"))\n        matches(false);\n    else if (tq.matches(\":matchesOwn(\"))\n        matches(true);\n    else if (tq.matches(\":not(\"))\n        not();\n    else\n        throw new Selector.SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 121,
          "functionName": "findElements",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,33 +1,32 @@\n private void findElements() {\n-    if (tq.matchChomp(\"#\")) {\n+    if (tq.matchChomp(\"#\"))\n         byId();\n-    } else if (tq.matchChomp(\".\")) {\n+    else if (tq.matchChomp(\".\"))\n         byClass();\n-    } else if (tq.matchesWord()) {\n+    else if (tq.matchesWord())\n         byTag();\n-    } else if (tq.matches(\"[\")) {\n+    else if (tq.matches(\"[\"))\n         byAttribute();\n-    } else if (tq.matchChomp(\"*\")) {\n+    else if (tq.matchChomp(\"*\"))\n         allElements();\n-    } else if (tq.matchChomp(\":lt(\")) {\n+    else if (tq.matchChomp(\":lt(\"))\n         indexLessThan();\n-    } else if (tq.matchChomp(\":gt(\")) {\n+    else if (tq.matchChomp(\":gt(\"))\n         indexGreaterThan();\n-    } else if (tq.matchChomp(\":eq(\")) {\n+    else if (tq.matchChomp(\":eq(\"))\n         indexEquals();\n-    } else if (tq.matches(\":has(\")) {\n+    else if (tq.matches(\":has(\"))\n         has();\n-    } else if (tq.matches(\":contains(\")) {\n+    else if (tq.matches(\":contains(\"))\n         contains(false);\n-    } else if (tq.matches(\":containsOwn(\")) {\n+    else if (tq.matches(\":containsOwn(\"))\n         contains(true);\n-    } else if (tq.matches(\":matches(\")) {\n+    else if (tq.matches(\":matches(\"))\n         matches(false);\n-    } else if (tq.matches(\":matchesOwn(\")) {\n+    else if (tq.matches(\":matchesOwn(\"))\n         matches(true);\n-    } else if (tq.matches(\":not(\")) {\n+    else if (tq.matches(\":not(\"))\n         not();\n-    } else {\n-        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n-    }\n+    else\n+        throw new Selector.SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9008cbf66ca4a89d02ba26630fb818524e790974": {
      "type": "Yintroduced",
      "commitMessage": "Adding Selector parser\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "9008cbf66ca4a89d02ba26630fb818524e790974",
      "commitAuthor": "Anton Kazennikov",
      "diff": "@@ -0,0 +1,33 @@\n+private void findElements() {\n+    if (tq.matchChomp(\"#\")) {\n+        byId();\n+    } else if (tq.matchChomp(\".\")) {\n+        byClass();\n+    } else if (tq.matchesWord()) {\n+        byTag();\n+    } else if (tq.matches(\"[\")) {\n+        byAttribute();\n+    } else if (tq.matchChomp(\"*\")) {\n+        allElements();\n+    } else if (tq.matchChomp(\":lt(\")) {\n+        indexLessThan();\n+    } else if (tq.matchChomp(\":gt(\")) {\n+        indexGreaterThan();\n+    } else if (tq.matchChomp(\":eq(\")) {\n+        indexEquals();\n+    } else if (tq.matches(\":has(\")) {\n+        has();\n+    } else if (tq.matches(\":contains(\")) {\n+        contains(false);\n+    } else if (tq.matches(\":containsOwn(\")) {\n+        contains(true);\n+    } else if (tq.matches(\":matches(\")) {\n+        matches(false);\n+    } else if (tq.matches(\":matchesOwn(\")) {\n+        matches(true);\n+    } else if (tq.matches(\":not(\")) {\n+        not();\n+    } else {\n+        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void findElements() {\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord()) {\n        byTag();\n    } else if (tq.matches(\"[\")) {\n        byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        allElements();\n    } else if (tq.matchChomp(\":lt(\")) {\n        indexLessThan();\n    } else if (tq.matchChomp(\":gt(\")) {\n        indexGreaterThan();\n    } else if (tq.matchChomp(\":eq(\")) {\n        indexEquals();\n    } else if (tq.matches(\":has(\")) {\n        has();\n    } else if (tq.matches(\":contains(\")) {\n        contains(false);\n    } else if (tq.matches(\":containsOwn(\")) {\n        contains(true);\n    } else if (tq.matches(\":matches(\")) {\n        matches(false);\n    } else if (tq.matches(\":matchesOwn(\")) {\n        matches(true);\n    } else if (tq.matches(\":not(\")) {\n        not();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \u0027%s\u0027: unexpected token at \u0027%s\u0027\", query, tq.remainder());\n    }\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 105,
      "functionName": "findElements",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}