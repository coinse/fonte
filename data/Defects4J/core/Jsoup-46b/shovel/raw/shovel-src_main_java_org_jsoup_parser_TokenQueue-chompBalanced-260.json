{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-46b",
  "repositoryPath": "/tmp/Jsoup-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TokenQueue.java",
  "functionName": "chompBalanced",
  "functionId": "chompBalanced___open-char__close-char",
  "sourceFilePath": "src/main/java/org/jsoup/parser/TokenQueue.java",
  "functionAnnotation": "",
  "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
  "functionStartLine": 260,
  "functionEndLine": 284,
  "numCommitsSeen": 62,
  "timeTaken": 951,
  "changeHistory": [
    "2c8b9ad145d3b808be19ce03a99797215e0c3ca3",
    "f11c3b4f92660b44dae8f6541c9b6908e6196b3a",
    "027c41520e029ae88e578cc9b28491a74d8bb25a",
    "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
    "cf3676c534e92052acf870c71e2fa8fb9c060fe6"
  ],
  "changeHistoryShort": {
    "2c8b9ad145d3b808be19ce03a99797215e0c3ca3": "Ybodychange",
    "f11c3b4f92660b44dae8f6541c9b6908e6196b3a": "Ymultichange(Yparameterchange,Ybodychange)",
    "027c41520e029ae88e578cc9b28491a74d8bb25a": "Ybodychange",
    "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23": "Ymultichange(Ybodychange,Ydocchange)",
    "cf3676c534e92052acf870c71e2fa8fb9c060fe6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2c8b9ad145d3b808be19ce03a99797215e0c3ca3": {
      "type": "Ybodychange",
      "commitMessage": "Performance: CPU and memory improvements for Selectors\n\nReduced CPU load and GC load for common selector use\n",
      "commitDate": "11/10/13, 2:59 PM",
      "commitName": "2c8b9ad145d3b808be19ce03a99797215e0c3ca3",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "3/14/12, 11:19 PM",
      "commitNameOld": "dd4b68223f30d8142f26a13582d0b996dece6588",
      "commitAuthorOld": "TzeKei Lee",
      "daysBetweenCommits": 605.69,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "actualSource": "public String chompBalanced(char open, char close) {\n    int start \u003d -1;\n    int end \u003d -1;\n    int depth \u003d 0;\n    char last \u003d 0;\n    do {\n        if (isEmpty())\n            break;\n        Character c \u003d consume();\n        if (last \u003d\u003d 0 || last !\u003d ESC) {\n            if (c.equals(open)) {\n                depth++;\n                if (start \u003d\u003d -1)\n                    start \u003d pos;\n            } else if (c.equals(close))\n                depth--;\n        }\n        if (depth \u003e 0 \u0026\u0026 last !\u003d 0)\n            end \u003d pos;\n        last \u003d c;\n    } while (depth \u003e 0);\n    return (end \u003e\u003d 0) ? queue.substring(start, end) : \"\";\n}",
      "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
      "functionStartLine": 262,
      "functionName": "chompBalanced",
      "functionAnnotation": "",
      "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
      "diff": "@@ -1,20 +1,23 @@\n public String chompBalanced(char open, char close) {\n-    StringBuilder accum \u003d new StringBuilder();\n+    int start \u003d -1;\n+    int end \u003d -1;\n     int depth \u003d 0;\n     char last \u003d 0;\n     do {\n         if (isEmpty())\n             break;\n         Character c \u003d consume();\n         if (last \u003d\u003d 0 || last !\u003d ESC) {\n-            if (c.equals(open))\n+            if (c.equals(open)) {\n                 depth++;\n-            else if (c.equals(close))\n+                if (start \u003d\u003d -1)\n+                    start \u003d pos;\n+            } else if (c.equals(close))\n                 depth--;\n         }\n         if (depth \u003e 0 \u0026\u0026 last !\u003d 0)\n-            accum.append(c);\n+            end \u003d pos;\n         last \u003d c;\n     } while (depth \u003e 0);\n-    return accum.toString();\n+    return (end \u003e\u003d 0) ? queue.substring(start, end) : \"\";\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f11c3b4f92660b44dae8f6541c9b6908e6196b3a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "small optimizations\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "f11c3b4f92660b44dae8f6541c9b6908e6196b3a",
      "commitAuthor": "Anton Kazennikov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "small optimizations\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "f11c3b4f92660b44dae8f6541c9b6908e6196b3a",
          "commitAuthor": "Anton Kazennikov",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "920ffd8ddd2645c560d905c2a53340cdafe4f96e",
          "commitAuthorOld": "Anton Kazennikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public String chompBalanced(char open, char close) {\n    StringBuilder accum \u003d new StringBuilder();\n    int depth \u003d 0;\n    char last \u003d 0;\n    do {\n        if (isEmpty())\n            break;\n        Character c \u003d consume();\n        if (last \u003d\u003d 0 || last !\u003d ESC) {\n            if (c.equals(open))\n                depth++;\n            else if (c.equals(close))\n                depth--;\n        }\n        if (depth \u003e 0 \u0026\u0026 last !\u003d 0)\n            accum.append(c);\n        last \u003d c;\n    } while (depth \u003e 0);\n    return accum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 268,
          "functionName": "chompBalanced",
          "functionAnnotation": "",
          "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
          "diff": "@@ -1,20 +1,20 @@\n-public String chompBalanced(Character open, Character close) {\n+public String chompBalanced(char open, char close) {\n     StringBuilder accum \u003d new StringBuilder();\n     int depth \u003d 0;\n-    Character last \u003d null;\n+    char last \u003d 0;\n     do {\n         if (isEmpty())\n             break;\n         Character c \u003d consume();\n-        if (last \u003d\u003d null || !last.equals(ESC)) {\n+        if (last \u003d\u003d 0 || last !\u003d ESC) {\n             if (c.equals(open))\n                 depth++;\n             else if (c.equals(close))\n                 depth--;\n         }\n-        if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n+        if (depth \u003e 0 \u0026\u0026 last !\u003d 0)\n             accum.append(c);\n         last \u003d c;\n     } while (depth \u003e 0);\n     return accum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[open-Character, close-Character]",
            "newValue": "[open-char, close-char]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "small optimizations\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "f11c3b4f92660b44dae8f6541c9b6908e6196b3a",
          "commitAuthor": "Anton Kazennikov",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "920ffd8ddd2645c560d905c2a53340cdafe4f96e",
          "commitAuthorOld": "Anton Kazennikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "public String chompBalanced(char open, char close) {\n    StringBuilder accum \u003d new StringBuilder();\n    int depth \u003d 0;\n    char last \u003d 0;\n    do {\n        if (isEmpty())\n            break;\n        Character c \u003d consume();\n        if (last \u003d\u003d 0 || last !\u003d ESC) {\n            if (c.equals(open))\n                depth++;\n            else if (c.equals(close))\n                depth--;\n        }\n        if (depth \u003e 0 \u0026\u0026 last !\u003d 0)\n            accum.append(c);\n        last \u003d c;\n    } while (depth \u003e 0);\n    return accum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 268,
          "functionName": "chompBalanced",
          "functionAnnotation": "",
          "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
          "diff": "@@ -1,20 +1,20 @@\n-public String chompBalanced(Character open, Character close) {\n+public String chompBalanced(char open, char close) {\n     StringBuilder accum \u003d new StringBuilder();\n     int depth \u003d 0;\n-    Character last \u003d null;\n+    char last \u003d 0;\n     do {\n         if (isEmpty())\n             break;\n         Character c \u003d consume();\n-        if (last \u003d\u003d null || !last.equals(ESC)) {\n+        if (last \u003d\u003d 0 || last !\u003d ESC) {\n             if (c.equals(open))\n                 depth++;\n             else if (c.equals(close))\n                 depth--;\n         }\n-        if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n+        if (depth \u003e 0 \u0026\u0026 last !\u003d 0)\n             accum.append(c);\n         last \u003d c;\n     } while (depth \u003e 0);\n     return accum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "027c41520e029ae88e578cc9b28491a74d8bb25a": {
      "type": "Ybodychange",
      "commitMessage": "Parsing optimisation.\n\nModified TokenQueue to use a StringBuilder + offset to back the queue,\ninstead of a linked list. Reduces memory and CPU use.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "027c41520e029ae88e578cc9b28491a74d8bb25a",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public String chompBalanced(Character open, Character close) {\n    StringBuilder accum \u003d new StringBuilder();\n    int depth \u003d 0;\n    Character last \u003d null;\n    do {\n        if (isEmpty())\n            break;\n        Character c \u003d consume();\n        if (last \u003d\u003d null || !last.equals(ESC)) {\n            if (c.equals(open))\n                depth++;\n            else if (c.equals(close))\n                depth--;\n        }\n        if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n            accum.append(c);\n        last \u003d c;\n    } while (depth \u003e 0);\n    return accum.toString();\n}",
      "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
      "functionStartLine": 193,
      "functionName": "chompBalanced",
      "functionAnnotation": "",
      "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
      "diff": "@@ -1,20 +1,20 @@\n public String chompBalanced(Character open, Character close) {\n     StringBuilder accum \u003d new StringBuilder();\n     int depth \u003d 0;\n     Character last \u003d null;\n     do {\n-        if (queue.isEmpty())\n+        if (isEmpty())\n             break;\n         Character c \u003d consume();\n         if (last \u003d\u003d null || !last.equals(ESC)) {\n             if (c.equals(open))\n                 depth++;\n             else if (c.equals(close))\n                 depth--;\n         }\n         if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n             accum.append(c);\n         last \u003d c;\n     } while (depth \u003e 0);\n     return accum.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Updated TokenQueue so :contains(text) can be escaped, if looking\nfor ( or ) within text\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Updated TokenQueue so :contains(text) can be escaped, if looking\nfor ( or ) within text\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "cf3676c534e92052acf870c71e2fa8fb9c060fe6",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String chompBalanced(Character open, Character close) {\n    StringBuilder accum \u003d new StringBuilder();\n    int depth \u003d 0;\n    Character last \u003d null;\n    do {\n        if (queue.isEmpty())\n            break;\n        Character c \u003d consume();\n        if (last \u003d\u003d null || !last.equals(ESC)) {\n            if (c.equals(open))\n                depth++;\n            else if (c.equals(close))\n                depth--;\n        }\n        if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n            accum.append(c);\n        last \u003d c;\n    } while (depth \u003e 0);\n    return accum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 201,
          "functionName": "chompBalanced",
          "functionAnnotation": "",
          "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
          "diff": "@@ -1,18 +1,20 @@\n public String chompBalanced(Character open, Character close) {\n     StringBuilder accum \u003d new StringBuilder();\n     int depth \u003d 0;\n-    int i \u003d 0;\n+    Character last \u003d null;\n     do {\n         if (queue.isEmpty())\n             break;\n         Character c \u003d consume();\n-        if (c.equals(open))\n-            depth++;\n-        else if (c.equals(close))\n-            depth--;\n-        if (depth \u003e 0 \u0026\u0026 i \u003e 0)\n+        if (last \u003d\u003d null || !last.equals(ESC)) {\n+            if (c.equals(open))\n+                depth++;\n+            else if (c.equals(close))\n+                depth--;\n+        }\n+        if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n             accum.append(c);\n-        i++;\n+        last \u003d c;\n     } while (depth \u003e 0);\n     return accum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated TokenQueue so :contains(text) can be escaped, if looking\nfor ( or ) within text\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "e6cc4ceff4e1d119f1779d1370ff99aaa2911f23",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "cf3676c534e92052acf870c71e2fa8fb9c060fe6",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String chompBalanced(Character open, Character close) {\n    StringBuilder accum \u003d new StringBuilder();\n    int depth \u003d 0;\n    Character last \u003d null;\n    do {\n        if (queue.isEmpty())\n            break;\n        Character c \u003d consume();\n        if (last \u003d\u003d null || !last.equals(ESC)) {\n            if (c.equals(open))\n                depth++;\n            else if (c.equals(close))\n                depth--;\n        }\n        if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n            accum.append(c);\n        last \u003d c;\n    } while (depth \u003e 0);\n    return accum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 201,
          "functionName": "chompBalanced",
          "functionAnnotation": "",
          "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
          "diff": "@@ -1,18 +1,20 @@\n public String chompBalanced(Character open, Character close) {\n     StringBuilder accum \u003d new StringBuilder();\n     int depth \u003d 0;\n-    int i \u003d 0;\n+    Character last \u003d null;\n     do {\n         if (queue.isEmpty())\n             break;\n         Character c \u003d consume();\n-        if (c.equals(open))\n-            depth++;\n-        else if (c.equals(close))\n-            depth--;\n-        if (depth \u003e 0 \u0026\u0026 i \u003e 0)\n+        if (last \u003d\u003d null || !last.equals(ESC)) {\n+            if (c.equals(open))\n+                depth++;\n+            else if (c.equals(close))\n+                depth--;\n+        }\n+        if (depth \u003e 0 \u0026\u0026 last !\u003d null)\n             accum.append(c);\n-        i++;\n+        last \u003d c;\n     } while (depth \u003e 0);\n     return accum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue\n\n@param open opener\n@param close closer\n@return data matched from the queue\n",
            "newValue": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue. Unbalanced openers and closers can be escaped (with \\). Those escapes will be left\nin the returned string, which is suitable for regexes (where we need to preserve the escape), but unsuitable for\ncontains text strings; use unescape for that.\n\n@param open opener\n@param close closer\n@return data matched from the queue\n"
          }
        }
      ]
    },
    "cf3676c534e92052acf870c71e2fa8fb9c060fe6": {
      "type": "Yintroduced",
      "commitMessage": "Upgraded the selector query parser to allow nested selectors like \u0027div:has(p:has(span))\u0027\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "cf3676c534e92052acf870c71e2fa8fb9c060fe6",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,18 @@\n+public String chompBalanced(Character open, Character close) {\n+    StringBuilder accum \u003d new StringBuilder();\n+    int depth \u003d 0;\n+    int i \u003d 0;\n+    do {\n+        if (queue.isEmpty())\n+            break;\n+        Character c \u003d consume();\n+        if (c.equals(open))\n+            depth++;\n+        else if (c.equals(close))\n+            depth--;\n+        if (depth \u003e 0 \u0026\u0026 i \u003e 0)\n+            accum.append(c);\n+        i++;\n+    } while (depth \u003e 0);\n+    return accum.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String chompBalanced(Character open, Character close) {\n    StringBuilder accum \u003d new StringBuilder();\n    int depth \u003d 0;\n    int i \u003d 0;\n    do {\n        if (queue.isEmpty())\n            break;\n        Character c \u003d consume();\n        if (c.equals(open))\n            depth++;\n        else if (c.equals(close))\n            depth--;\n        if (depth \u003e 0 \u0026\u0026 i \u003e 0)\n            accum.append(c);\n        i++;\n    } while (depth \u003e 0);\n    return accum.toString();\n}",
      "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
      "functionStartLine": 198,
      "functionName": "chompBalanced",
      "functionAnnotation": "",
      "functionDoc": "Pulls a balanced string off the queue. E.g. if queue is \"(one (two) three) four\", (,) will return \"one (two) three\",\nand leave \" four\" on the queue\n\n@param open opener\n@param close closer\n@return data matched from the queue\n"
    }
  }
}