{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-46b",
  "repositoryPath": "/tmp/Jsoup-46b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueryParser.java",
  "functionName": "combinator",
  "functionId": "combinator___combinator-char",
  "sourceFilePath": "src/main/java/org/jsoup/select/QueryParser.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 75,
  "functionEndLine": 125,
  "numCommitsSeen": 12,
  "timeTaken": 1186,
  "changeHistory": [
    "5d56ace149ae3264d2502d49dd85302fc613a27c",
    "249e5a8aae9324cc6c8caf5303a607056b15a9da",
    "64ec9cfb151f26e85c0c206ce6aba063695e47cd",
    "bbca7db20b9a45fb3d8efb29447349ed8593649c",
    "43a39b308abfbe39ea06729277d0630786b9956d",
    "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca",
    "e9909538549c96800dad1e94284b99575d1be628",
    "9008cbf66ca4a89d02ba26630fb818524e790974"
  ],
  "changeHistoryShort": {
    "5d56ace149ae3264d2502d49dd85302fc613a27c": "Ybodychange",
    "249e5a8aae9324cc6c8caf5303a607056b15a9da": "Ybodychange",
    "64ec9cfb151f26e85c0c206ce6aba063695e47cd": "Ybodychange",
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": "Ymultichange(Ymovefromfile,Ybodychange)",
    "43a39b308abfbe39ea06729277d0630786b9956d": "Ybodychange",
    "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca": "Ybodychange",
    "e9909538549c96800dad1e94284b99575d1be628": "Ymultichange(Yparameterchange,Ybodychange)",
    "9008cbf66ca4a89d02ba26630fb818524e790974": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5d56ace149ae3264d2502d49dd85302fc613a27c": {
      "type": "Ybodychange",
      "commitMessage": "Fixed precedence parsing of group OR (,) in CSS selectors.\n\nAdded tests, and repaired cheekily / hastily / incorrectly modified test.\n",
      "commitDate": "4/5/12, 9:25 PM",
      "commitName": "5d56ace149ae3264d2502d49dd85302fc613a27c",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "4/2/12, 7:40 PM",
      "commitNameOld": "249e5a8aae9324cc6c8caf5303a607056b15a9da",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 3.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d consumeSubQuery();\n    Evaluator rootEval;\n    Evaluator currentEval;\n    Evaluator newEval \u003d parse(subQuery);\n    boolean replaceRightMost \u003d false;\n    if (evals.size() \u003d\u003d 1) {\n        rootEval \u003d currentEval \u003d evals.get(0);\n        if (rootEval instanceof CombiningEvaluator.Or \u0026\u0026 combinator !\u003d \u0027,\u0027) {\n            currentEval \u003d ((CombiningEvaluator.Or) currentEval).rightMostEvaluator();\n            replaceRightMost \u003d true;\n        }\n    } else {\n        rootEval \u003d currentEval \u003d new CombiningEvaluator.And(evals);\n    }\n    evals.clear();\n    if (combinator \u003d\u003d \u0027\u003e\u0027)\n        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));\n    else if (combinator \u003d\u003d \u0027 \u0027)\n        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));\n    else if (combinator \u003d\u003d \u0027+\u0027)\n        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval));\n    else if (combinator \u003d\u003d \u0027~\u0027)\n        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval));\n    else if (combinator \u003d\u003d \u0027,\u0027) {\n        CombiningEvaluator.Or or;\n        if (currentEval instanceof CombiningEvaluator.Or) {\n            or \u003d (CombiningEvaluator.Or) currentEval;\n            or.add(newEval);\n        } else {\n            or \u003d new CombiningEvaluator.Or();\n            or.add(currentEval);\n            or.add(newEval);\n        }\n        currentEval \u003d or;\n    } else\n        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n    if (replaceRightMost)\n        ((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);\n    else\n        rootEval \u003d currentEval;\n    evals.add(rootEval);\n}",
      "path": "src/main/java/org/jsoup/select/QueryParser.java",
      "functionStartLine": 73,
      "functionName": "combinator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,44 @@\n private void combinator(char combinator) {\n     tq.consumeWhitespace();\n     String subQuery \u003d consumeSubQuery();\n-    Evaluator e;\n-    if (evals.size() \u003d\u003d 1)\n-        e \u003d evals.get(0);\n-    else\n-        e \u003d new CombiningEvaluator.And(evals);\n+    Evaluator rootEval;\n+    Evaluator currentEval;\n+    Evaluator newEval \u003d parse(subQuery);\n+    boolean replaceRightMost \u003d false;\n+    if (evals.size() \u003d\u003d 1) {\n+        rootEval \u003d currentEval \u003d evals.get(0);\n+        if (rootEval instanceof CombiningEvaluator.Or \u0026\u0026 combinator !\u003d \u0027,\u0027) {\n+            currentEval \u003d ((CombiningEvaluator.Or) currentEval).rightMostEvaluator();\n+            replaceRightMost \u003d true;\n+        }\n+    } else {\n+        rootEval \u003d currentEval \u003d new CombiningEvaluator.And(evals);\n+    }\n     evals.clear();\n-    Evaluator f \u003d parse(subQuery);\n     if (combinator \u003d\u003d \u0027\u003e\u0027)\n-        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));\n+        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));\n     else if (combinator \u003d\u003d \u0027 \u0027)\n-        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.Parent(e)));\n+        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));\n     else if (combinator \u003d\u003d \u0027+\u0027)\n-        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n+        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval));\n     else if (combinator \u003d\u003d \u0027~\u0027)\n-        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));\n+        currentEval \u003d new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval));\n     else if (combinator \u003d\u003d \u0027,\u0027) {\n         CombiningEvaluator.Or or;\n-        if (e instanceof CombiningEvaluator.Or) {\n-            or \u003d (CombiningEvaluator.Or) e;\n-            or.add(f);\n+        if (currentEval instanceof CombiningEvaluator.Or) {\n+            or \u003d (CombiningEvaluator.Or) currentEval;\n+            or.add(newEval);\n         } else {\n             or \u003d new CombiningEvaluator.Or();\n-            or.add(e);\n-            or.add(f);\n+            or.add(currentEval);\n+            or.add(newEval);\n         }\n-        evals.add(or);\n+        currentEval \u003d or;\n     } else\n         throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n+    if (replaceRightMost)\n+        ((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);\n+    else\n+        rootEval \u003d currentEval;\n+    evals.add(rootEval);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "249e5a8aae9324cc6c8caf5303a607056b15a9da": {
      "type": "Ybodychange",
      "commitMessage": "Fixed parsing of group-or commas in CSS selectors.\n\nFixes #179\n",
      "commitDate": "4/2/12, 7:40 PM",
      "commitName": "249e5a8aae9324cc6c8caf5303a607056b15a9da",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "64ec9cfb151f26e85c0c206ce6aba063695e47cd",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 275.65,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d consumeSubQuery();\n    Evaluator e;\n    if (evals.size() \u003d\u003d 1)\n        e \u003d evals.get(0);\n    else\n        e \u003d new CombiningEvaluator.And(evals);\n    evals.clear();\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));\n    else if (combinator \u003d\u003d \u0027 \u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.Parent(e)));\n    else if (combinator \u003d\u003d \u0027+\u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n    else if (combinator \u003d\u003d \u0027~\u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));\n    else if (combinator \u003d\u003d \u0027,\u0027) {\n        CombiningEvaluator.Or or;\n        if (e instanceof CombiningEvaluator.Or) {\n            or \u003d (CombiningEvaluator.Or) e;\n            or.add(f);\n        } else {\n            or \u003d new CombiningEvaluator.Or();\n            or.add(e);\n            or.add(f);\n        }\n        evals.add(or);\n    } else\n        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n}",
      "path": "src/main/java/org/jsoup/select/QueryParser.java",
      "functionStartLine": 73,
      "functionName": "combinator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,32 @@\n private void combinator(char combinator) {\n     tq.consumeWhitespace();\n     String subQuery \u003d consumeSubQuery();\n     Evaluator e;\n     if (evals.size() \u003d\u003d 1)\n         e \u003d evals.get(0);\n     else\n         e \u003d new CombiningEvaluator.And(evals);\n     evals.clear();\n     Evaluator f \u003d parse(subQuery);\n     if (combinator \u003d\u003d \u0027\u003e\u0027)\n         evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));\n     else if (combinator \u003d\u003d \u0027 \u0027)\n         evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.Parent(e)));\n     else if (combinator \u003d\u003d \u0027+\u0027)\n         evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n     else if (combinator \u003d\u003d \u0027~\u0027)\n         evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));\n-    else\n+    else if (combinator \u003d\u003d \u0027,\u0027) {\n+        CombiningEvaluator.Or or;\n+        if (e instanceof CombiningEvaluator.Or) {\n+            or \u003d (CombiningEvaluator.Or) e;\n+            or.add(f);\n+        } else {\n+            or \u003d new CombiningEvaluator.Or();\n+            or.add(e);\n+            or.add(f);\n+        }\n+        evals.add(or);\n+    } else\n         throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "64ec9cfb151f26e85c0c206ce6aba063695e47cd": {
      "type": "Ybodychange",
      "commitMessage": "Cleanup of selector class files\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "64ec9cfb151f26e85c0c206ce6aba063695e47cd",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d consumeSubQuery();\n    Evaluator e;\n    if (evals.size() \u003d\u003d 1)\n        e \u003d evals.get(0);\n    else\n        e \u003d new CombiningEvaluator.And(evals);\n    evals.clear();\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));\n    else if (combinator \u003d\u003d \u0027 \u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.Parent(e)));\n    else if (combinator \u003d\u003d \u0027+\u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n    else if (combinator \u003d\u003d \u0027~\u0027)\n        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));\n    else\n        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n}",
      "path": "src/main/java/org/jsoup/select/QueryParser.java",
      "functionStartLine": 81,
      "functionName": "combinator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n private void combinator(char combinator) {\n     tq.consumeWhitespace();\n     String subQuery \u003d consumeSubQuery();\n     Evaluator e;\n     if (evals.size() \u003d\u003d 1)\n         e \u003d evals.get(0);\n     else\n-        e \u003d new AndSelector(evals);\n+        e \u003d new CombiningEvaluator.And(evals);\n     evals.clear();\n     Evaluator f \u003d parse(subQuery);\n     if (combinator \u003d\u003d \u0027\u003e\u0027)\n-        evals.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n+        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediateParent(e)));\n     else if (combinator \u003d\u003d \u0027 \u0027)\n-        evals.add(BasicSelector.and(f, new ParentSelector(e)));\n+        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.Parent(e)));\n     else if (combinator \u003d\u003d \u0027+\u0027)\n-        evals.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n+        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n     else if (combinator \u003d\u003d \u0027~\u0027)\n-        evals.add(BasicSelector.and(f, new PreviousSiblingSelector(e)));\n+        evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));\n     else\n         throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d consumeSubQuery();\n    Evaluator e;\n    if (evals.size() \u003d\u003d 1)\n        e \u003d evals.get(0);\n    else\n        e \u003d new AndSelector(evals);\n    evals.clear();\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027)\n        evals.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n    else if (combinator \u003d\u003d \u0027 \u0027)\n        evals.add(BasicSelector.and(f, new ParentSelector(e)));\n    else if (combinator \u003d\u003d \u0027+\u0027)\n        evals.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n    else if (combinator \u003d\u003d \u0027~\u0027)\n        evals.add(BasicSelector.and(f, new PreviousSiblingSelector(e)));\n    else\n        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 82,
          "functionName": "combinator",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,22 +1,21 @@\n private void combinator(char combinator) {\n     tq.consumeWhitespace();\n-    String subQuery \u003d tq.consumeToAny(combinators);\n-    Evaluator e \u003d null;\n-    if (s.size() \u003d\u003d 1)\n-        e \u003d s.get(0);\n-    else {\n-        e \u003d new AndSelector(s);\n-    }\n-    s.clear();\n+    String subQuery \u003d consumeSubQuery();\n+    Evaluator e;\n+    if (evals.size() \u003d\u003d 1)\n+        e \u003d evals.get(0);\n+    else\n+        e \u003d new AndSelector(evals);\n+    evals.clear();\n     Evaluator f \u003d parse(subQuery);\n-    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n-        s.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n-    } else if (combinator \u003d\u003d \u0027 \u0027) {\n-        s.add(BasicSelector.and(f, new ParentSelector(e)));\n-    } else if (combinator \u003d\u003d \u0027+\u0027) {\n-        s.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n-    } else if (combinator \u003d\u003d \u0027~\u0027) {\n-        s.add(BasicSelector.and(f, new PrevioustSiblingSelector(e)));\n-    } else\n-        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n+    if (combinator \u003d\u003d \u0027\u003e\u0027)\n+        evals.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n+    else if (combinator \u003d\u003d \u0027 \u0027)\n+        evals.add(BasicSelector.and(f, new ParentSelector(e)));\n+    else if (combinator \u003d\u003d \u0027+\u0027)\n+        evals.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n+    else if (combinator \u003d\u003d \u0027~\u0027)\n+        evals.add(BasicSelector.and(f, new PreviousSiblingSelector(e)));\n+    else\n+        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
            "newPath": "src/main/java/org/jsoup/select/QueryParser.java",
            "oldMethodName": "combinator",
            "newMethodName": "combinator"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "08e2a7fc2f487328f1b514e07cc9f4c9ff3d3814",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d consumeSubQuery();\n    Evaluator e;\n    if (evals.size() \u003d\u003d 1)\n        e \u003d evals.get(0);\n    else\n        e \u003d new AndSelector(evals);\n    evals.clear();\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027)\n        evals.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n    else if (combinator \u003d\u003d \u0027 \u0027)\n        evals.add(BasicSelector.and(f, new ParentSelector(e)));\n    else if (combinator \u003d\u003d \u0027+\u0027)\n        evals.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n    else if (combinator \u003d\u003d \u0027~\u0027)\n        evals.add(BasicSelector.and(f, new PreviousSiblingSelector(e)));\n    else\n        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n}",
          "path": "src/main/java/org/jsoup/select/QueryParser.java",
          "functionStartLine": 82,
          "functionName": "combinator",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,22 +1,21 @@\n private void combinator(char combinator) {\n     tq.consumeWhitespace();\n-    String subQuery \u003d tq.consumeToAny(combinators);\n-    Evaluator e \u003d null;\n-    if (s.size() \u003d\u003d 1)\n-        e \u003d s.get(0);\n-    else {\n-        e \u003d new AndSelector(s);\n-    }\n-    s.clear();\n+    String subQuery \u003d consumeSubQuery();\n+    Evaluator e;\n+    if (evals.size() \u003d\u003d 1)\n+        e \u003d evals.get(0);\n+    else\n+        e \u003d new AndSelector(evals);\n+    evals.clear();\n     Evaluator f \u003d parse(subQuery);\n-    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n-        s.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n-    } else if (combinator \u003d\u003d \u0027 \u0027) {\n-        s.add(BasicSelector.and(f, new ParentSelector(e)));\n-    } else if (combinator \u003d\u003d \u0027+\u0027) {\n-        s.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n-    } else if (combinator \u003d\u003d \u0027~\u0027) {\n-        s.add(BasicSelector.and(f, new PrevioustSiblingSelector(e)));\n-    } else\n-        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n+    if (combinator \u003d\u003d \u0027\u003e\u0027)\n+        evals.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n+    else if (combinator \u003d\u003d \u0027 \u0027)\n+        evals.add(BasicSelector.and(f, new ParentSelector(e)));\n+    else if (combinator \u003d\u003d \u0027+\u0027)\n+        evals.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n+    else if (combinator \u003d\u003d \u0027~\u0027)\n+        evals.add(BasicSelector.and(f, new PreviousSiblingSelector(e)));\n+    else\n+        throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "43a39b308abfbe39ea06729277d0630786b9956d": {
      "type": "Ybodychange",
      "commitMessage": "Added javadocs for Evaluators.\nUpdated tests.\nUpdated parser\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "43a39b308abfbe39ea06729277d0630786b9956d",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "b800dd756bf956aa210165073824bfcf159780fd",
      "commitAuthorOld": "Anton Kazennikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d tq.consumeToAny(combinators);\n    Evaluator e \u003d null;\n    if (s.size() \u003d\u003d 1)\n        e \u003d s.get(0);\n    else {\n        e \u003d new AndSelector(s);\n    }\n    s.clear();\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n        s.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027 \u0027) {\n        s.add(BasicSelector.and(f, new ParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027+\u0027) {\n        s.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n    } else if (combinator \u003d\u003d \u0027~\u0027) {\n        s.add(BasicSelector.and(f, new PrevioustSiblingSelector(e)));\n    } else\n        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 83,
      "functionName": "combinator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n private void combinator(char combinator) {\n     tq.consumeWhitespace();\n     String subQuery \u003d tq.consumeToAny(combinators);\n     Evaluator e \u003d null;\n     if (s.size() \u003d\u003d 1)\n         e \u003d s.get(0);\n     else {\n         e \u003d new AndSelector(s);\n     }\n     s.clear();\n     Evaluator f \u003d parse(subQuery);\n     if (combinator \u003d\u003d \u0027\u003e\u0027) {\n         s.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n     } else if (combinator \u003d\u003d \u0027 \u0027) {\n         s.add(BasicSelector.and(f, new ParentSelector(e)));\n     } else if (combinator \u003d\u003d \u0027+\u0027) {\n-        s.add(BasicSelector.and(f, new PrevSiblingSelector(e)));\n+        s.add(BasicSelector.and(f, new ImmediatePreviousSiblingSelector(e)));\n     } else if (combinator \u003d\u003d \u0027~\u0027) {\n-        s.add(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n+        s.add(BasicSelector.and(f, new PrevioustSiblingSelector(e)));\n     } else\n         throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca": {
      "type": "Ybodychange",
      "commitMessage": "parser update: normal order of selectors\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "12a4abda3aeb213ed05e0aa500e2e6b70dbb9cca",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "e9909538549c96800dad1e94284b99575d1be628",
      "commitAuthorOld": "Anton Kazennikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d tq.consumeToAny(combinators);\n    Evaluator e \u003d null;\n    if (s.size() \u003d\u003d 1)\n        e \u003d s.get(0);\n    else {\n        e \u003d new AndSelector(s);\n    }\n    s.clear();\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n        s.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027 \u0027) {\n        s.add(BasicSelector.and(f, new ParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027+\u0027) {\n        s.add(BasicSelector.and(f, new PrevSiblingSelector(e)));\n    } else if (combinator \u003d\u003d \u0027~\u0027) {\n        s.add(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n    } else\n        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 85,
      "functionName": "combinator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n private void combinator(char combinator) {\n     tq.consumeWhitespace();\n     String subQuery \u003d tq.consumeToAny(combinators);\n     Evaluator e \u003d null;\n     if (s.size() \u003d\u003d 1)\n-        e \u003d s.pop();\n+        e \u003d s.get(0);\n     else {\n         e \u003d new AndSelector(s);\n-        s.clear();\n     }\n+    s.clear();\n     Evaluator f \u003d parse(subQuery);\n     if (combinator \u003d\u003d \u0027\u003e\u0027) {\n-        s.push(BasicSelector.and(f, new ImmediateParentSelector(e)));\n+        s.add(BasicSelector.and(f, new ImmediateParentSelector(e)));\n     } else if (combinator \u003d\u003d \u0027 \u0027) {\n-        s.push(BasicSelector.and(f, new ParentSelector(e)));\n+        s.add(BasicSelector.and(f, new ParentSelector(e)));\n     } else if (combinator \u003d\u003d \u0027+\u0027) {\n-        s.push(BasicSelector.and(f, new PrevSiblingSelector(e)));\n+        s.add(BasicSelector.and(f, new PrevSiblingSelector(e)));\n     } else if (combinator \u003d\u003d \u0027~\u0027) {\n-        s.push(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n+        s.add(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n     } else\n         throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e9909538549c96800dad1e94284b99575d1be628": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Working parser except the root node selector.\nAdded basic tests\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "e9909538549c96800dad1e94284b99575d1be628",
      "commitAuthor": "Anton Kazennikov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Working parser except the root node selector.\nAdded basic tests\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "e9909538549c96800dad1e94284b99575d1be628",
          "commitAuthor": "Anton Kazennikov",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "9008cbf66ca4a89d02ba26630fb818524e790974",
          "commitAuthorOld": "Anton Kazennikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d tq.consumeToAny(combinators);\n    Evaluator e \u003d null;\n    if (s.size() \u003d\u003d 1)\n        e \u003d s.pop();\n    else {\n        e \u003d new AndSelector(s);\n        s.clear();\n    }\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n        s.push(BasicSelector.and(f, new ImmediateParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027 \u0027) {\n        s.push(BasicSelector.and(f, new ParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027+\u0027) {\n        s.push(BasicSelector.and(f, new PrevSiblingSelector(e)));\n    } else if (combinator \u003d\u003d \u0027~\u0027) {\n        s.push(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n    } else\n        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n}",
          "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
          "functionStartLine": 86,
          "functionName": "combinator",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,22 @@\n-private void combinator(String combinator) {\n+private void combinator(char combinator) {\n     tq.consumeWhitespace();\n     String subQuery \u003d tq.consumeToAny(combinators);\n-    if (combinator.equals(\"\u003e\")) {\n-    } else if (combinator.equals(\" \")) {\n-        AndSelector a \u003d new AndSelector();\n-        a.add(select(subQuery));\n-        a.add(new ParentSelector(new AndSelector(s)));\n+    Evaluator e \u003d null;\n+    if (s.size() \u003d\u003d 1)\n+        e \u003d s.pop();\n+    else {\n+        e \u003d new AndSelector(s);\n         s.clear();\n-        s.push(a);\n-    } else if (combinator.equals(\"+\")) {\n-    } else if (combinator.equals(\"~\")) {\n+    }\n+    Evaluator f \u003d parse(subQuery);\n+    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n+        s.push(BasicSelector.and(f, new ImmediateParentSelector(e)));\n+    } else if (combinator \u003d\u003d \u0027 \u0027) {\n+        s.push(BasicSelector.and(f, new ParentSelector(e)));\n+    } else if (combinator \u003d\u003d \u0027+\u0027) {\n+        s.push(BasicSelector.and(f, new PrevSiblingSelector(e)));\n+    } else if (combinator \u003d\u003d \u0027~\u0027) {\n+        s.push(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n     } else\n         throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[combinator-String]",
            "newValue": "[combinator-char]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Working parser except the root node selector.\nAdded basic tests\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "e9909538549c96800dad1e94284b99575d1be628",
          "commitAuthor": "Anton Kazennikov",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "9008cbf66ca4a89d02ba26630fb818524e790974",
          "commitAuthorOld": "Anton Kazennikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private void combinator(char combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d tq.consumeToAny(combinators);\n    Evaluator e \u003d null;\n    if (s.size() \u003d\u003d 1)\n        e \u003d s.pop();\n    else {\n        e \u003d new AndSelector(s);\n        s.clear();\n    }\n    Evaluator f \u003d parse(subQuery);\n    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n        s.push(BasicSelector.and(f, new ImmediateParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027 \u0027) {\n        s.push(BasicSelector.and(f, new ParentSelector(e)));\n    } else if (combinator \u003d\u003d \u0027+\u0027) {\n        s.push(BasicSelector.and(f, new PrevSiblingSelector(e)));\n    } else if (combinator \u003d\u003d \u0027~\u0027) {\n        s.push(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n    } else\n        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n}",
          "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
          "functionStartLine": 86,
          "functionName": "combinator",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,22 @@\n-private void combinator(String combinator) {\n+private void combinator(char combinator) {\n     tq.consumeWhitespace();\n     String subQuery \u003d tq.consumeToAny(combinators);\n-    if (combinator.equals(\"\u003e\")) {\n-    } else if (combinator.equals(\" \")) {\n-        AndSelector a \u003d new AndSelector();\n-        a.add(select(subQuery));\n-        a.add(new ParentSelector(new AndSelector(s)));\n+    Evaluator e \u003d null;\n+    if (s.size() \u003d\u003d 1)\n+        e \u003d s.pop();\n+    else {\n+        e \u003d new AndSelector(s);\n         s.clear();\n-        s.push(a);\n-    } else if (combinator.equals(\"+\")) {\n-    } else if (combinator.equals(\"~\")) {\n+    }\n+    Evaluator f \u003d parse(subQuery);\n+    if (combinator \u003d\u003d \u0027\u003e\u0027) {\n+        s.push(BasicSelector.and(f, new ImmediateParentSelector(e)));\n+    } else if (combinator \u003d\u003d \u0027 \u0027) {\n+        s.push(BasicSelector.and(f, new ParentSelector(e)));\n+    } else if (combinator \u003d\u003d \u0027+\u0027) {\n+        s.push(BasicSelector.and(f, new PrevSiblingSelector(e)));\n+    } else if (combinator \u003d\u003d \u0027~\u0027) {\n+        s.push(BasicSelector.and(f, new PreviousSequentSiblingSelector(e)));\n     } else\n         throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9008cbf66ca4a89d02ba26630fb818524e790974": {
      "type": "Yintroduced",
      "commitMessage": "Adding Selector parser\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "9008cbf66ca4a89d02ba26630fb818524e790974",
      "commitAuthor": "Anton Kazennikov",
      "diff": "@@ -0,0 +1,15 @@\n+private void combinator(String combinator) {\n+    tq.consumeWhitespace();\n+    String subQuery \u003d tq.consumeToAny(combinators);\n+    if (combinator.equals(\"\u003e\")) {\n+    } else if (combinator.equals(\" \")) {\n+        AndSelector a \u003d new AndSelector();\n+        a.add(select(subQuery));\n+        a.add(new ParentSelector(new AndSelector(s)));\n+        s.clear();\n+        s.push(a);\n+    } else if (combinator.equals(\"+\")) {\n+    } else if (combinator.equals(\"~\")) {\n+    } else\n+        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void combinator(String combinator) {\n    tq.consumeWhitespace();\n    String subQuery \u003d tq.consumeToAny(combinators);\n    if (combinator.equals(\"\u003e\")) {\n    } else if (combinator.equals(\" \")) {\n        AndSelector a \u003d new AndSelector();\n        a.add(select(subQuery));\n        a.add(new ParentSelector(new AndSelector(s)));\n        s.clear();\n        s.push(a);\n    } else if (combinator.equals(\"+\")) {\n    } else if (combinator.equals(\"~\")) {\n    } else\n        throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n}",
      "path": "src/main/java/org/jsoup/select/ng/parser/Parser.java",
      "functionStartLine": 78,
      "functionName": "combinator",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}