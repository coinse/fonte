{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-62b",
  "repositoryPath": "/tmp/Jsoup-62b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HtmlTreeBuilderState.java",
  "functionName": "anyOtherEndTag",
  "functionId": "$anyOtherEndTag___t-Token__tb-HtmlTreeBuilder",
  "sourceFilePath": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 763,
  "functionEndLine": 782,
  "numCommitsSeen": 27,
  "timeTaken": 4675,
  "changeHistory": [
    "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
    "01a62698797658b0f51d323fdfb5e9744d843773",
    "5000be31966a575f54d80ef85ee49ca1f5cb6ea8",
    "e30ed5d35cbcb92584d7fee8ae862f3929e443d8",
    "8749726a79c22451b1f01b14fb2137f734e926b4"
  ],
  "changeHistoryShort": {
    "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d": "Ybodychange",
    "01a62698797658b0f51d323fdfb5e9744d843773": "Ybodychange",
    "5000be31966a575f54d80ef85ee49ca1f5cb6ea8": "Ymultichange(Yfilerename,Yparameterchange)",
    "e30ed5d35cbcb92584d7fee8ae862f3929e443d8": "Ybodychange",
    "8749726a79c22451b1f01b14fb2137f734e926b4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d": {
      "type": "Ybodychange",
      "commitMessage": "Introduced ParseSettings for tag and attribute name case options.\n",
      "commitDate": "8/5/16, 3:05 PM",
      "commitName": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "8/1/15, 5:32 PM",
      "commitNameOld": "8c43a813f98dcd5362c33aff2378ef1cb12252b3",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 369.9,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n    String name \u003d t.asEndTag().normalName();\n    ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n    for (int pos \u003d stack.size() - 1; pos \u003e\u003d 0; pos--) {\n        Element node \u003d stack.get(pos);\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
      "functionStartLine": 763,
      "functionName": "anyOtherEndTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,20 @@\n boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n-    String name \u003d t.asEndTag().name();\n+    String name \u003d t.asEndTag().normalName();\n     ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n     for (int pos \u003d stack.size() - 1; pos \u003e\u003d 0; pos--) {\n         Element node \u003d stack.get(pos);\n         if (node.nodeName().equals(name)) {\n             tb.generateImpliedEndTags(name);\n             if (!name.equals(tb.currentElement().nodeName()))\n                 tb.error(this);\n             tb.popStackToClose(name);\n             break;\n         } else {\n             if (tb.isSpecial(node)) {\n                 tb.error(this);\n                 return false;\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "01a62698797658b0f51d323fdfb5e9744d843773": {
      "type": "Ybodychange",
      "commitMessage": "Use ArrayList instead of LinkedList\n\nMuch less GC - less iterators, lest next items, etc.\n",
      "commitDate": "10/26/14, 5:40 PM",
      "commitName": "01a62698797658b0f51d323fdfb5e9744d843773",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "10/17/14, 1:11 PM",
      "commitNameOld": "e613360fa4f0cd3bdfdece02d2bc1b58be640cac",
      "commitAuthorOld": "offa",
      "daysBetweenCommits": 9.19,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n    String name \u003d t.asEndTag().name();\n    ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n    for (int pos \u003d stack.size() - 1; pos \u003e\u003d 0; pos--) {\n        Element node \u003d stack.get(pos);\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
      "functionStartLine": 756,
      "functionName": "anyOtherEndTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,20 @@\n boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n     String name \u003d t.asEndTag().name();\n-    DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n-    Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n-    while (it.hasNext()) {\n-        Element node \u003d it.next();\n+    ArrayList\u003cElement\u003e stack \u003d tb.getStack();\n+    for (int pos \u003d stack.size() - 1; pos \u003e\u003d 0; pos--) {\n+        Element node \u003d stack.get(pos);\n         if (node.nodeName().equals(name)) {\n             tb.generateImpliedEndTags(name);\n             if (!name.equals(tb.currentElement().nodeName()))\n                 tb.error(this);\n             tb.popStackToClose(name);\n             break;\n         } else {\n             if (tb.isSpecial(node)) {\n                 tb.error(this);\n                 return false;\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5000be31966a575f54d80ef85ee49ca1f5cb6ea8": {
      "type": "Ymultichange(Yfilerename,Yparameterchange)",
      "commitMessage": "First draft of a simple XML treebuilder / parser.\n\nThis provides an alternative to the HTML5 parser which enforces HTML\nsemantics on the parsed input. The simple XML parser has no understanding\nof HTML, and will parse the input as-is into a DOM.\n",
      "commitDate": "2/26/12, 5:23 PM",
      "commitName": "5000be31966a575f54d80ef85ee49ca1f5cb6ea8",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "First draft of a simple XML treebuilder / parser.\n\nThis provides an alternative to the HTML5 parser which enforces HTML\nsemantics on the parsed input. The simple XML parser has no understanding\nof HTML, and will parse the input as-is into a DOM.\n",
          "commitDate": "2/26/12, 5:23 PM",
          "commitName": "5000be31966a575f54d80ef85ee49ca1f5cb6ea8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "9/30/11, 6:13 PM",
          "commitNameOld": "1e84edbe208aab0c9330eadc50f9773d81d70cd6",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 149.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n    String name \u003d t.asEndTag().name();\n    DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n    Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n    while (it.hasNext()) {\n        Element node \u003d it.next();\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
          "functionStartLine": 763,
          "functionName": "anyOtherEndTag",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,21 @@\n-boolean anyOtherEndTag(Token t, TreeBuilder tb) {\n+boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n     String name \u003d t.asEndTag().name();\n     DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n     Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n     while (it.hasNext()) {\n         Element node \u003d it.next();\n         if (node.nodeName().equals(name)) {\n             tb.generateImpliedEndTags(name);\n             if (!name.equals(tb.currentElement().nodeName()))\n                 tb.error(this);\n             tb.popStackToClose(name);\n             break;\n         } else {\n             if (tb.isSpecial(node)) {\n                 tb.error(this);\n                 return false;\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/jsoup/parser/TreeBuilderState.java",
            "newPath": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "First draft of a simple XML treebuilder / parser.\n\nThis provides an alternative to the HTML5 parser which enforces HTML\nsemantics on the parsed input. The simple XML parser has no understanding\nof HTML, and will parse the input as-is into a DOM.\n",
          "commitDate": "2/26/12, 5:23 PM",
          "commitName": "5000be31966a575f54d80ef85ee49ca1f5cb6ea8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "9/30/11, 6:13 PM",
          "commitNameOld": "1e84edbe208aab0c9330eadc50f9773d81d70cd6",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 149.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n    String name \u003d t.asEndTag().name();\n    DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n    Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n    while (it.hasNext()) {\n        Element node \u003d it.next();\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
          "path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
          "functionStartLine": 763,
          "functionName": "anyOtherEndTag",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,21 +1,21 @@\n-boolean anyOtherEndTag(Token t, TreeBuilder tb) {\n+boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {\n     String name \u003d t.asEndTag().name();\n     DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n     Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n     while (it.hasNext()) {\n         Element node \u003d it.next();\n         if (node.nodeName().equals(name)) {\n             tb.generateImpliedEndTags(name);\n             if (!name.equals(tb.currentElement().nodeName()))\n                 tb.error(this);\n             tb.popStackToClose(name);\n             break;\n         } else {\n             if (tb.isSpecial(node)) {\n                 tb.error(this);\n                 return false;\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-Token, tb-TreeBuilder]",
            "newValue": "[t-Token, tb-HtmlTreeBuilder]"
          }
        }
      ]
    },
    "e30ed5d35cbcb92584d7fee8ae862f3929e443d8": {
      "type": "Ybodychange",
      "commitMessage": "Fix Java 1.5 compatibility\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "e30ed5d35cbcb92584d7fee8ae862f3929e443d8",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "13672ea6b50a631bbdc50a6b2bfb266089fe426f",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "boolean anyOtherEndTag(Token t, TreeBuilder tb) {\n    String name \u003d t.asEndTag().name();\n    DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n    Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n    while (it.hasNext()) {\n        Element node \u003d it.next();\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/jsoup/parser/TreeBuilderState.java",
      "functionStartLine": 763,
      "functionName": "anyOtherEndTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,21 @@\n boolean anyOtherEndTag(Token t, TreeBuilder tb) {\n     String name \u003d t.asEndTag().name();\n-    LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n+    DescendableLinkedList\u003cElement\u003e stack \u003d tb.getStack();\n     Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n     while (it.hasNext()) {\n         Element node \u003d it.next();\n         if (node.nodeName().equals(name)) {\n             tb.generateImpliedEndTags(name);\n             if (!name.equals(tb.currentElement().nodeName()))\n                 tb.error(this);\n             tb.popStackToClose(name);\n             break;\n         } else {\n             if (tb.isSpecial(node)) {\n                 tb.error(this);\n                 return false;\n             }\n         }\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8749726a79c22451b1f01b14fb2137f734e926b4": {
      "type": "Yintroduced",
      "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,21 @@\n+boolean anyOtherEndTag(Token t, TreeBuilder tb) {\n+    String name \u003d t.asEndTag().name();\n+    LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n+    Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n+    while (it.hasNext()) {\n+        Element node \u003d it.next();\n+        if (node.nodeName().equals(name)) {\n+            tb.generateImpliedEndTags(name);\n+            if (!name.equals(tb.currentElement().nodeName()))\n+                tb.error(this);\n+            tb.popStackToClose(name);\n+            break;\n+        } else {\n+            if (tb.isSpecial(node)) {\n+                tb.error(this);\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "boolean anyOtherEndTag(Token t, TreeBuilder tb) {\n    String name \u003d t.asEndTag().name();\n    LinkedList\u003cElement\u003e stack \u003d tb.getStack();\n    Iterator\u003cElement\u003e it \u003d stack.descendingIterator();\n    while (it.hasNext()) {\n        Element node \u003d it.next();\n        if (node.nodeName().equals(name)) {\n            tb.generateImpliedEndTags(name);\n            if (!name.equals(tb.currentElement().nodeName()))\n                tb.error(this);\n            tb.popStackToClose(name);\n            break;\n        } else {\n            if (tb.isSpecial(node)) {\n                tb.error(this);\n                return false;\n            }\n        }\n    }\n    return true;\n}",
      "path": "src/main/java/org/jsoup/parser/TreeBuilderState.java",
      "functionStartLine": 763,
      "functionName": "anyOtherEndTag",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}