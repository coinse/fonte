{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-62b",
  "repositoryPath": "/tmp/Jsoup-62b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataUtil.java",
  "functionName": "readToByteBuffer",
  "functionId": "readToByteBuffer___inStream-InputStream__maxSize-int",
  "sourceFilePath": "src/main/java/org/jsoup/helper/DataUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Read the input stream into a byte buffer. To deal with slow input streams, you may interrupt the thread this\nmethod is executing on. The data read until being interrupted will be available.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
  "functionStartLine": 154,
  "functionEndLine": 176,
  "numCommitsSeen": 50,
  "timeTaken": 984,
  "changeHistory": [
    "032c97320f4ca7256a60e7319b6354c62971702c",
    "cd45173d0787948003ffc41bba0ffbd34c915900",
    "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
    "63b778a5b41e75cb46a817fbdcc8e65db740a46c",
    "f9f37e19876202a1db257a9e59452b0f10035fbf",
    "a8da2e7da25921dffd9fe6bbd53668bed08dd148",
    "ce843ec83988e3e3318fa7db38133b06be741a1f"
  ],
  "changeHistoryShort": {
    "032c97320f4ca7256a60e7319b6354c62971702c": "Ymultichange(Ybodychange,Ydocchange)",
    "cd45173d0787948003ffc41bba0ffbd34c915900": "Ybodychange",
    "6dc38f26dd31f1a367961f27c56b143cd0462e5a": "Ymultichange(Ymodifierchange,Ybodychange)",
    "63b778a5b41e75cb46a817fbdcc8e65db740a46c": "Ybodychange",
    "f9f37e19876202a1db257a9e59452b0f10035fbf": "Ymultichange(Ybodychange,Ydocchange)",
    "a8da2e7da25921dffd9fe6bbd53668bed08dd148": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "ce843ec83988e3e3318fa7db38133b06be741a1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "032c97320f4ca7256a60e7319b6354c62971702c": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Tidied up interrupt check, added test case to make sure it works.\n",
      "commitDate": "10/29/16, 10:41 PM",
      "commitName": "032c97320f4ca7256a60e7319b6354c62971702c",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Tidied up interrupt check, added test case to make sure it works.\n",
          "commitDate": "10/29/16, 10:41 PM",
          "commitName": "032c97320f4ca7256a60e7319b6354c62971702c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "10/29/16, 10:41 PM",
          "commitNameOld": "cd45173d0787948003ffc41bba0ffbd34c915900",
          "commitAuthorOld": "Alon Cohen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (!Thread.interrupted()) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    return ByteBuffer.wrap(outStream.toByteArray());\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 149,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer. To deal with slow input streams, you may interrupt the thread this\nmethod is executing on. The data read until being interrupted will be available.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,26 +1,22 @@\n public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     final boolean capped \u003d maxSize \u003e 0;\n     byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n     int read;\n     int remaining \u003d maxSize;\n-    while (!Thread.currentThread().isInterrupted()) {\n+    while (!Thread.interrupted()) {\n         read \u003d inStream.read(buffer);\n         if (read \u003d\u003d -1)\n             break;\n         if (capped) {\n             if (read \u003e remaining) {\n                 outStream.write(buffer, 0, remaining);\n                 break;\n             }\n             remaining -\u003d read;\n         }\n         outStream.write(buffer, 0, read);\n     }\n-    if (Thread.currentThread().isInterrupted()) {\n-        Thread.interrupted();\n-        throw new IOException(\"JSoup thread has been interrupted\");\n-    }\n     return ByteBuffer.wrap(outStream.toByteArray());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Tidied up interrupt check, added test case to make sure it works.\n",
          "commitDate": "10/29/16, 10:41 PM",
          "commitName": "032c97320f4ca7256a60e7319b6354c62971702c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "10/29/16, 10:41 PM",
          "commitNameOld": "cd45173d0787948003ffc41bba0ffbd34c915900",
          "commitAuthorOld": "Alon Cohen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (!Thread.interrupted()) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    return ByteBuffer.wrap(outStream.toByteArray());\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 149,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer. To deal with slow input streams, you may interrupt the thread this\nmethod is executing on. The data read until being interrupted will be available.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,26 +1,22 @@\n public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     final boolean capped \u003d maxSize \u003e 0;\n     byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n     int read;\n     int remaining \u003d maxSize;\n-    while (!Thread.currentThread().isInterrupted()) {\n+    while (!Thread.interrupted()) {\n         read \u003d inStream.read(buffer);\n         if (read \u003d\u003d -1)\n             break;\n         if (capped) {\n             if (read \u003e remaining) {\n                 outStream.write(buffer, 0, remaining);\n                 break;\n             }\n             remaining -\u003d read;\n         }\n         outStream.write(buffer, 0, read);\n     }\n-    if (Thread.currentThread().isInterrupted()) {\n-        Thread.interrupted();\n-        throw new IOException(\"JSoup thread has been interrupted\");\n-    }\n     return ByteBuffer.wrap(outStream.toByteArray());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
            "newValue": "Read the input stream into a byte buffer. To deal with slow input streams, you may interrupt the thread this\nmethod is executing on. The data read until being interrupted will be available.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n"
          }
        }
      ]
    },
    "cd45173d0787948003ffc41bba0ffbd34c915900": {
      "type": "Ybodychange",
      "commitMessage": "Suggesting an implementation to issue #711\n",
      "commitDate": "10/29/16, 10:41 PM",
      "commitName": "cd45173d0787948003ffc41bba0ffbd34c915900",
      "commitAuthor": "Alon Cohen",
      "commitDateOld": "10/23/16, 5:59 PM",
      "commitNameOld": "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 6.2,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (!Thread.currentThread().isInterrupted()) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    if (Thread.currentThread().isInterrupted()) {\n        Thread.interrupted();\n        throw new IOException(\"JSoup thread has been interrupted\");\n    }\n    return ByteBuffer.wrap(outStream.toByteArray());\n}",
      "path": "src/main/java/org/jsoup/helper/DataUtil.java",
      "functionStartLine": 148,
      "functionName": "readToByteBuffer",
      "functionAnnotation": "",
      "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
      "diff": "@@ -1,22 +1,26 @@\n public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     final boolean capped \u003d maxSize \u003e 0;\n     byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n     int read;\n     int remaining \u003d maxSize;\n-    while (true) {\n+    while (!Thread.currentThread().isInterrupted()) {\n         read \u003d inStream.read(buffer);\n         if (read \u003d\u003d -1)\n             break;\n         if (capped) {\n             if (read \u003e remaining) {\n                 outStream.write(buffer, 0, remaining);\n                 break;\n             }\n             remaining -\u003d read;\n         }\n         outStream.write(buffer, 0, read);\n     }\n+    if (Thread.currentThread().isInterrupted()) {\n+        Thread.interrupted();\n+        throw new IOException(\"JSoup thread has been interrupted\");\n+    }\n     return ByteBuffer.wrap(outStream.toByteArray());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6dc38f26dd31f1a367961f27c56b143cd0462e5a": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Use jsoup\u0027s CharacterReader instead of regexes to parse Entities\n\nFaster, less memory.\n",
      "commitDate": "10/23/16, 5:59 PM",
      "commitName": "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Use jsoup\u0027s CharacterReader instead of regexes to parse Entities\n\nFaster, less memory.\n",
          "commitDate": "10/23/16, 5:59 PM",
          "commitName": "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "8/11/16, 12:57 PM",
          "commitNameOld": "ec48e0cc39d86f95f7b9184aeb1891d721109e55",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 73.21,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    return ByteBuffer.wrap(outStream.toByteArray());\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 148,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,22 +1,22 @@\n-static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n+public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     final boolean capped \u003d maxSize \u003e 0;\n-    byte[] buffer \u003d new byte[bufferSize];\n-    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n+    byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n+    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n     int read;\n     int remaining \u003d maxSize;\n     while (true) {\n         read \u003d inStream.read(buffer);\n         if (read \u003d\u003d -1)\n             break;\n         if (capped) {\n             if (read \u003e remaining) {\n                 outStream.write(buffer, 0, remaining);\n                 break;\n             }\n             remaining -\u003d read;\n         }\n         outStream.write(buffer, 0, read);\n     }\n     return ByteBuffer.wrap(outStream.toByteArray());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use jsoup\u0027s CharacterReader instead of regexes to parse Entities\n\nFaster, less memory.\n",
          "commitDate": "10/23/16, 5:59 PM",
          "commitName": "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "8/11/16, 12:57 PM",
          "commitNameOld": "ec48e0cc39d86f95f7b9184aeb1891d721109e55",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 73.21,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    return ByteBuffer.wrap(outStream.toByteArray());\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 148,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,22 +1,22 @@\n-static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n+public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     final boolean capped \u003d maxSize \u003e 0;\n-    byte[] buffer \u003d new byte[bufferSize];\n-    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n+    byte[] buffer \u003d new byte[capped \u0026\u0026 maxSize \u003c bufferSize ? maxSize : bufferSize];\n+    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(capped ? maxSize : bufferSize);\n     int read;\n     int remaining \u003d maxSize;\n     while (true) {\n         read \u003d inStream.read(buffer);\n         if (read \u003d\u003d -1)\n             break;\n         if (capped) {\n             if (read \u003e remaining) {\n                 outStream.write(buffer, 0, remaining);\n                 break;\n             }\n             remaining -\u003d read;\n         }\n         outStream.write(buffer, 0, read);\n     }\n     return ByteBuffer.wrap(outStream.toByteArray());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "63b778a5b41e75cb46a817fbdcc8e65db740a46c": {
      "type": "Ybodychange",
      "commitMessage": "Code cleanup\n",
      "commitDate": "4/17/15, 2:50 PM",
      "commitName": "63b778a5b41e75cb46a817fbdcc8e65db740a46c",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "3/29/15, 5:02 PM",
      "commitNameOld": "b8c259cfaf668e4237de09a0327b82080cfd37ba",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 18.91,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    return ByteBuffer.wrap(outStream.toByteArray());\n}",
      "path": "src/main/java/org/jsoup/helper/DataUtil.java",
      "functionStartLine": 145,
      "functionName": "readToByteBuffer",
      "functionAnnotation": "",
      "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
      "diff": "@@ -1,23 +1,22 @@\n static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     final boolean capped \u003d maxSize \u003e 0;\n     byte[] buffer \u003d new byte[bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n     int read;\n     int remaining \u003d maxSize;\n     while (true) {\n         read \u003d inStream.read(buffer);\n         if (read \u003d\u003d -1)\n             break;\n         if (capped) {\n             if (read \u003e remaining) {\n                 outStream.write(buffer, 0, remaining);\n                 break;\n             }\n             remaining -\u003d read;\n         }\n         outStream.write(buffer, 0, read);\n     }\n-    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n-    return byteData;\n+    return ByteBuffer.wrap(outStream.toByteArray());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f9f37e19876202a1db257a9e59452b0f10035fbf": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Modified maxBodySize to truncate at precise max.\n\nRather than previous implementation which was up to the internal buffer\nsize (130K) larger.\n",
      "commitDate": "12/11/12, 2:51 AM",
      "commitName": "f9f37e19876202a1db257a9e59452b0f10035fbf",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Modified maxBodySize to truncate at precise max.\n\nRather than previous implementation which was up to the internal buffer\nsize (130K) larger.\n",
          "commitDate": "12/11/12, 2:51 AM",
          "commitName": "f9f37e19876202a1db257a9e59452b0f10035fbf",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "12/10/12, 11:19 PM",
          "commitNameOld": "a8da2e7da25921dffd9fe6bbd53668bed08dd148",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n    return byteData;\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 115,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,17 +1,23 @@\n static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n+    final boolean capped \u003d maxSize \u003e 0;\n     byte[] buffer \u003d new byte[bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n-    int read, totalRead \u003d 0;\n+    int read;\n+    int remaining \u003d maxSize;\n     while (true) {\n         read \u003d inStream.read(buffer);\n-        totalRead +\u003d read;\n         if (read \u003d\u003d -1)\n             break;\n+        if (capped) {\n+            if (read \u003e remaining) {\n+                outStream.write(buffer, 0, remaining);\n+                break;\n+            }\n+            remaining -\u003d read;\n+        }\n         outStream.write(buffer, 0, read);\n-        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n-            break;\n     }\n     ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n     return byteData;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Modified maxBodySize to truncate at precise max.\n\nRather than previous implementation which was up to the internal buffer\nsize (130K) larger.\n",
          "commitDate": "12/11/12, 2:51 AM",
          "commitName": "f9f37e19876202a1db257a9e59452b0f10035fbf",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "12/10/12, 11:19 PM",
          "commitNameOld": "a8da2e7da25921dffd9fe6bbd53668bed08dd148",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    final boolean capped \u003d maxSize \u003e 0;\n    byte[] buffer \u003d new byte[bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n    int read;\n    int remaining \u003d maxSize;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        if (capped) {\n            if (read \u003e remaining) {\n                outStream.write(buffer, 0, remaining);\n                break;\n            }\n            remaining -\u003d read;\n        }\n        outStream.write(buffer, 0, read);\n    }\n    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n    return byteData;\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 115,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,17 +1,23 @@\n static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n     Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n+    final boolean capped \u003d maxSize \u003e 0;\n     byte[] buffer \u003d new byte[bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n-    int read, totalRead \u003d 0;\n+    int read;\n+    int remaining \u003d maxSize;\n     while (true) {\n         read \u003d inStream.read(buffer);\n-        totalRead +\u003d read;\n         if (read \u003d\u003d -1)\n             break;\n+        if (capped) {\n+            if (read \u003e remaining) {\n+                outStream.write(buffer, 0, remaining);\n+                break;\n+            }\n+            remaining -\u003d read;\n+        }\n         outStream.write(buffer, 0, read);\n-        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n-            break;\n     }\n     ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n     return byteData;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited. Note that this size\nis treated as a imprecise hint, and the actual amount read may be greater by up to the size of the internal\nread buffer.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
            "newValue": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n"
          }
        }
      ]
    },
    "a8da2e7da25921dffd9fe6bbd53668bed08dd148": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Added a maximum body response size to Jsoup.Connection\n",
      "commitDate": "12/10/12, 11:19 PM",
      "commitName": "a8da2e7da25921dffd9fe6bbd53668bed08dd148",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Added a maximum body response size to Jsoup.Connection\n",
          "commitDate": "12/10/12, 11:19 PM",
          "commitName": "a8da2e7da25921dffd9fe6bbd53668bed08dd148",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "9/21/12, 8:11 PM",
          "commitNameOld": "398f9cf93414253c216585efdfca3b9f73f90d74",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 80.17,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    byte[] buffer \u003d new byte[bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n    int read, totalRead \u003d 0;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        totalRead +\u003d read;\n        if (read \u003d\u003d -1)\n            break;\n        outStream.write(buffer, 0, read);\n        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n            break;\n    }\n    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n    return byteData;\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 117,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited. Note that this size\nis treated as a imprecise hint, and the actual amount read may be greater by up to the size of the internal\nread buffer.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,13 +1,17 @@\n-static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n+static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n+    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     byte[] buffer \u003d new byte[bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n-    int read;\n+    int read, totalRead \u003d 0;\n     while (true) {\n         read \u003d inStream.read(buffer);\n+        totalRead +\u003d read;\n         if (read \u003d\u003d -1)\n             break;\n         outStream.write(buffer, 0, read);\n+        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n+            break;\n     }\n     ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n     return byteData;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[inStream-InputStream]",
            "newValue": "[inStream-InputStream, maxSize-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added a maximum body response size to Jsoup.Connection\n",
          "commitDate": "12/10/12, 11:19 PM",
          "commitName": "a8da2e7da25921dffd9fe6bbd53668bed08dd148",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "9/21/12, 8:11 PM",
          "commitNameOld": "398f9cf93414253c216585efdfca3b9f73f90d74",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 80.17,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    byte[] buffer \u003d new byte[bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n    int read, totalRead \u003d 0;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        totalRead +\u003d read;\n        if (read \u003d\u003d -1)\n            break;\n        outStream.write(buffer, 0, read);\n        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n            break;\n    }\n    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n    return byteData;\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 117,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited. Note that this size\nis treated as a imprecise hint, and the actual amount read may be greater by up to the size of the internal\nread buffer.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,13 +1,17 @@\n-static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n+static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n+    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     byte[] buffer \u003d new byte[bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n-    int read;\n+    int read, totalRead \u003d 0;\n     while (true) {\n         read \u003d inStream.read(buffer);\n+        totalRead +\u003d read;\n         if (read \u003d\u003d -1)\n             break;\n         outStream.write(buffer, 0, read);\n+        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n+            break;\n     }\n     ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n     return byteData;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Added a maximum body response size to Jsoup.Connection\n",
          "commitDate": "12/10/12, 11:19 PM",
          "commitName": "a8da2e7da25921dffd9fe6bbd53668bed08dd148",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "9/21/12, 8:11 PM",
          "commitNameOld": "398f9cf93414253c216585efdfca3b9f73f90d74",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 80.17,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n    byte[] buffer \u003d new byte[bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n    int read, totalRead \u003d 0;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        totalRead +\u003d read;\n        if (read \u003d\u003d -1)\n            break;\n        outStream.write(buffer, 0, read);\n        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n            break;\n    }\n    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n    return byteData;\n}",
          "path": "src/main/java/org/jsoup/helper/DataUtil.java",
          "functionStartLine": 117,
          "functionName": "readToByteBuffer",
          "functionAnnotation": "",
          "functionDoc": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited. Note that this size\nis treated as a imprecise hint, and the actual amount read may be greater by up to the size of the internal\nread buffer.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n",
          "diff": "@@ -1,13 +1,17 @@\n-static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n+static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n+    Validate.isTrue(maxSize \u003e\u003d 0, \"maxSize must be 0 (unlimited) or larger\");\n     byte[] buffer \u003d new byte[bufferSize];\n     ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n-    int read;\n+    int read, totalRead \u003d 0;\n     while (true) {\n         read \u003d inStream.read(buffer);\n+        totalRead +\u003d read;\n         if (read \u003d\u003d -1)\n             break;\n         outStream.write(buffer, 0, read);\n+        if (maxSize \u003e 0 \u0026\u0026 totalRead \u003e\u003d maxSize)\n+            break;\n     }\n     ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n     return byteData;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Read the input stream into a byte buffer.\n\n@param inStream the input stream to read from\n@param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited. Note that this size\nis treated as a imprecise hint, and the actual amount read may be greater by up to the size of the internal\nread buffer.\n@return the filled byte buffer\n@throws IOException if an exception occurs whilst reading from the input stream.\n"
          }
        }
      ]
    },
    "ce843ec83988e3e3318fa7db38133b06be741a1f": {
      "type": "Yintroduced",
      "commitMessage": "Initial implementation of Connection\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "ce843ec83988e3e3318fa7db38133b06be741a1f",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,13 @@\n+static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n+    byte[] buffer \u003d new byte[bufferSize];\n+    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n+    int read;\n+    while (true) {\n+        read \u003d inStream.read(buffer);\n+        if (read \u003d\u003d -1)\n+            break;\n+        outStream.write(buffer, 0, read);\n+    }\n+    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n+    return byteData;\n+}\n\\ No newline at end of file\n",
      "actualSource": "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n    byte[] buffer \u003d new byte[bufferSize];\n    ByteArrayOutputStream outStream \u003d new ByteArrayOutputStream(bufferSize);\n    int read;\n    while (true) {\n        read \u003d inStream.read(buffer);\n        if (read \u003d\u003d -1)\n            break;\n        outStream.write(buffer, 0, read);\n    }\n    ByteBuffer byteData \u003d ByteBuffer.wrap(outStream.toByteArray());\n    return byteData;\n}",
      "path": "src/main/java/org/jsoup/helper/DataUtil.java",
      "functionStartLine": 66,
      "functionName": "readToByteBuffer",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}