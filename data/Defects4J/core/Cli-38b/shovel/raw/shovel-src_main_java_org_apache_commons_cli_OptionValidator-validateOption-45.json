{
  "origin": "codeshovel",
  "repositoryName": "Cli-38b",
  "repositoryPath": "/tmp/Cli-38b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OptionValidator.java",
  "functionName": "validateOption",
  "functionId": "validateOption___opt-String",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/OptionValidator.java",
  "functionAnnotation": "",
  "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIn case {@code opt} is {@code null} no further validation is performed.\n\n@param opt The option string to validate, may be null\n@throws IllegalArgumentException if the Option is not valid.\n",
  "functionStartLine": 45,
  "functionEndLine": 76,
  "numCommitsSeen": 33,
  "timeTaken": 1123,
  "changeHistory": [
    "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
    "f481ae3e7a6ec5462800da6349c50e9eaae35eaf",
    "29fefd2767b887e62cf17ca4412179b43f6ee4f6",
    "a1b5d44432c057cf675f051bb20379937565f4ef",
    "d36b987c3257c01b42353cf7d2eb69ca325860aa",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "8f8639f6a2606f45c130d7d9b65248248fc431c1",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "347bbeb8f98a49744501ac50850457ba8751d545",
    "04490af06faa8fd1be15da88172beb32218dd336",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
    "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac"
  ],
  "changeHistoryShort": {
    "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0": "Ymultichange(Ybodychange,Ydocchange)",
    "f481ae3e7a6ec5462800da6349c50e9eaae35eaf": "Ydocchange",
    "29fefd2767b887e62cf17ca4412179b43f6ee4f6": "Ybodychange",
    "a1b5d44432c057cf675f051bb20379937565f4ef": "Ybodychange",
    "d36b987c3257c01b42353cf7d2eb69ca325860aa": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ydocchange",
    "8f8639f6a2606f45c130d7d9b65248248fc431c1": "Yformatchange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Yformatchange",
    "347bbeb8f98a49744501ac50850457ba8751d545": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "04490af06faa8fd1be15da88172beb32218dd336": "Ymultichange(Ybodychange,Ydocchange)",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": "Ybodychange",
    "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "[CLI-241] Clarified javadoc of OptionValidator. Thanks to Beluga Behr.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1544819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/23/13, 7:34 AM",
      "commitName": "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
      "commitAuthor": "Thomas Neidhart",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "[CLI-241] Clarified javadoc of OptionValidator. Thanks to Beluga Behr.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1544819 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/23/13, 7:34 AM",
          "commitName": "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
          "commitAuthor": "Thomas Neidhart",
          "commitDateOld": "2/6/13, 10:12 AM",
          "commitNameOld": "08a1eb7875d24830e37a969e9963ccc365586ca1",
          "commitAuthorOld": "Thomas Neidhart",
          "daysBetweenCommits": 289.89,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    }\n    if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        for (char ch : opt.toCharArray()) {\n            if (!isValidChar(ch)) {\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\n            }\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 45,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIn case {@code opt} is {@code null} no further validation is performed.\n\n@param opt The option string to validate, may be null\n@throws IllegalArgumentException if the Option is not valid.\n",
          "diff": "",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "[CLI-241] Clarified javadoc of OptionValidator. Thanks to Beluga Behr.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1544819 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/23/13, 7:34 AM",
          "commitName": "b1ffe271a5f8a6ff7b6bf714a9b2631e7dc6bbb0",
          "commitAuthor": "Thomas Neidhart",
          "commitDateOld": "2/6/13, 10:12 AM",
          "commitNameOld": "08a1eb7875d24830e37a969e9963ccc365586ca1",
          "commitAuthorOld": "Thomas Neidhart",
          "daysBetweenCommits": 289.89,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    }\n    if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        for (char ch : opt.toCharArray()) {\n            if (!isValidChar(ch)) {\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\n            }\n        }\n    }\n}",
          "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 45,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIn case {@code opt} is {@code null} no further validation is performed.\n\n@param opt The option string to validate, may be null\n@throws IllegalArgumentException if the Option is not valid.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
            "newValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIn case {@code opt} is {@code null} no further validation is performed.\n\n@param opt The option string to validate, may be null\n@throws IllegalArgumentException if the Option is not valid.\n"
          }
        }
      ]
    },
    "f481ae3e7a6ec5462800da6349c50e9eaae35eaf": {
      "type": "Ydocchange",
      "commitMessage": "Fix javadoc typos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1439408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/28/13, 6:02 AM",
      "commitName": "f481ae3e7a6ec5462800da6349c50e9eaae35eaf",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "1/27/13, 2:00 PM",
      "commitNameOld": "29fefd2767b887e62cf17ca4412179b43f6ee4f6",
      "commitAuthorOld": "Thomas Neidhart",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    }\n    if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        for (char ch : opt.toCharArray()) {\n            if (!isValidChar(ch)) {\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 52,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
        "newValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissible Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n"
      }
    },
    "29fefd2767b887e62cf17ca4412179b43f6ee4f6": {
      "type": "Ybodychange",
      "commitMessage": "Fix checkstyle warnings, minor formatting, typos, complete javadoc for not yet implemented methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1439197 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/27/13, 2:00 PM",
      "commitName": "29fefd2767b887e62cf17ca4412179b43f6ee4f6",
      "commitAuthor": "Thomas Neidhart",
      "commitDateOld": "4/12/11, 11:57 AM",
      "commitNameOld": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 656.13,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    }\n    if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        for (char ch : opt.toCharArray()) {\n            if (!isValidChar(ch)) {\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 52,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "@@ -1,17 +1,17 @@\n static void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n         return;\n     }\n     if (opt.length() \u003d\u003d 1) {\n         char ch \u003d opt.charAt(0);\n         if (!isValidOpt(ch)) {\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n         }\n     } else {\n         for (char ch : opt.toCharArray()) {\n             if (!isValidChar(ch)) {\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + ch + \"\u0027\");\n+                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal \" + \"character : \u0027\" + ch + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a1b5d44432c057cf675f051bb20379937565f4ef": {
      "type": "Ybodychange",
      "commitMessage": "Moving to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11, 11:57 AM",
      "commitName": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10, 8:48 AM",
      "commitNameOld": "d36b987c3257c01b42353cf7d2eb69ca325860aa",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 300.13,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    }\n    if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        for (char ch : opt.toCharArray()) {\n            if (!isValidChar(ch)) {\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + ch + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "@@ -1,18 +1,17 @@\n static void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n         return;\n     }\n     if (opt.length() \u003d\u003d 1) {\n         char ch \u003d opt.charAt(0);\n         if (!isValidOpt(ch)) {\n             throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n         }\n     } else {\n-        char[] chars \u003d opt.toCharArray();\n-        for (int i \u003d 0; i \u003c chars.length; i++) {\n-            if (!isValidChar(chars[i])) {\n-                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + chars[i] + \"\u0027\");\n+        for (char ch : opt.toCharArray()) {\n+            if (!isValidChar(ch)) {\n+                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + ch + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d36b987c3257c01b42353cf7d2eb69ca325860aa": {
      "type": "Ybodychange",
      "commitMessage": "A space character is no longer accepted as a valid short option\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955277 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 8:48 AM",
      "commitName": "d36b987c3257c01b42353cf7d2eb69ca325860aa",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10, 2:45 AM",
      "commitNameOld": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    }\n    if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "@@ -1,17 +1,18 @@\n static void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n         return;\n-    } else if (opt.length() \u003d\u003d 1) {\n+    }\n+    if (opt.length() \u003d\u003d 1) {\n         char ch \u003d opt.charAt(0);\n         if (!isValidOpt(ch)) {\n-            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n+            throw new IllegalArgumentException(\"Illegal option name \u0027\" + ch + \"\u0027\");\n         }\n     } else {\n         char[] chars \u003d opt.toCharArray();\n         for (int i \u003d 0; i \u003c chars.length; i++) {\n             if (!isValidChar(chars[i])) {\n-                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n+                throw new IllegalArgumentException(\"The option \u0027\" + opt + \"\u0027 contains an illegal character : \u0027\" + chars[i] + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 2:45 AM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10, 2:42 AM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/OptionValidator.java",
        "newPath": "src/main/java/org/apache/commons/cli/OptionValidator.java"
      }
    },
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ydocchange",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08, 1:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08, 1:41 AM",
      "commitNameOld": "8f8639f6a2606f45c130d7d9b65248248fc431c1",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 6.98,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 45,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
        "newValue": "Validates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\n\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n"
      }
    },
    "8f8639f6a2606f45c130d7d9b65248248fc431c1": {
      "type": "Yformatchange",
      "commitMessage": "Changed the visibility of OptionValidator to package private since all its methods are either private or package private\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@678678 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/22/08, 1:41 AM",
      "commitName": "8f8639f6a2606f45c130d7d9b65248248fc431c1",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08, 12:55 AM",
      "commitNameOld": "8ee0ed532e4ddbf2746d802f9926b9e3d0116cc5",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 43,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Yformatchange",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "commitDateOld": "11/18/02, 12:41 AM",
      "commitNameOld": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/OptionValidator.java",
      "functionStartLine": 85,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "347bbeb8f98a49744501ac50850457ba8751d545": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/02, 12:41 AM",
      "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02, 12:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/15/02, 2:25 PM",
          "commitNameOld": "3b8e3de5b7599a6165d48103f94f3a830361188d",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 85,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
          "diff": "@@ -1,18 +1,17 @@\n-private void validateOption(String opt) throws IllegalArgumentException {\n+static void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"opt is null\");\n+        return;\n     } else if (opt.length() \u003d\u003d 1) {\n         char ch \u003d opt.charAt(0);\n         if (!isValidOpt(ch)) {\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n         }\n-        id \u003d ch;\n     } else {\n         char[] chars \u003d opt.toCharArray();\n         for (int i \u003d 0; i \u003c chars.length; i++) {\n             if (!isValidChar(chars[i])) {\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/Option.java",
            "newPath": "src/java/org/apache/commons/cli/OptionValidator.java",
            "oldMethodName": "validateOption",
            "newMethodName": "validateOption"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02, 12:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/15/02, 2:25 PM",
          "commitNameOld": "3b8e3de5b7599a6165d48103f94f3a830361188d",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 85,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
          "diff": "@@ -1,18 +1,17 @@\n-private void validateOption(String opt) throws IllegalArgumentException {\n+static void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"opt is null\");\n+        return;\n     } else if (opt.length() \u003d\u003d 1) {\n         char ch \u003d opt.charAt(0);\n         if (!isValidOpt(ch)) {\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n         }\n-        id \u003d ch;\n     } else {\n         char[] chars \u003d opt.toCharArray();\n         for (int i \u003d 0; i \u003c chars.length; i++) {\n             if (!isValidChar(chars[i])) {\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/18/02, 12:41 AM",
          "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/15/02, 2:25 PM",
          "commitNameOld": "3b8e3de5b7599a6165d48103f94f3a830361188d",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.43,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "static void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        return;\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/OptionValidator.java",
          "functionStartLine": 85,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
          "diff": "@@ -1,18 +1,17 @@\n-private void validateOption(String opt) throws IllegalArgumentException {\n+static void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n-        throw new IllegalArgumentException(\"opt is null\");\n+        return;\n     } else if (opt.length() \u003d\u003d 1) {\n         char ch \u003d opt.charAt(0);\n         if (!isValidOpt(ch)) {\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n         }\n-        id \u003d ch;\n     } else {\n         char[] chars \u003d opt.toCharArray();\n         for (int i \u003d 0; i \u003c chars.length; i++) {\n             if (!isValidChar(chars[i])) {\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "04490af06faa8fd1be15da88172beb32218dd336": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "bug #11457: implemented fix, javadoc added to Option\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129803 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/18/02, 12:07 PM",
      "commitName": "04490af06faa8fd1be15da88172beb32218dd336",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "bug #11457: implemented fix, javadoc added to Option\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129803 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/18/02, 12:07 PM",
          "commitName": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/15/02, 3:05 PM",
          "commitNameOld": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.88,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        throw new IllegalArgumentException(\"opt is null\");\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n        id \u003d ch;\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Option.java",
          "functionStartLine": 151,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
          "diff": "@@ -1,17 +1,18 @@\n private void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n         throw new IllegalArgumentException(\"opt is null\");\n     } else if (opt.length() \u003d\u003d 1) {\n-        if (!isValidOpt(opt.charAt(0))) {\n-            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\n+        char ch \u003d opt.charAt(0);\n+        if (!isValidOpt(ch)) {\n+            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n         }\n-        id \u003d opt.charAt(0);\n+        id \u003d ch;\n     } else {\n         char[] chars \u003d opt.toCharArray();\n         for (int i \u003d 0; i \u003c chars.length; i++) {\n             if (!isValidChar(chars[i])) {\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "bug #11457: implemented fix, javadoc added to Option\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129803 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/18/02, 12:07 PM",
          "commitName": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/15/02, 3:05 PM",
          "commitNameOld": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 2.88,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        throw new IllegalArgumentException(\"opt is null\");\n    } else if (opt.length() \u003d\u003d 1) {\n        char ch \u003d opt.charAt(0);\n        if (!isValidOpt(ch)) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n        }\n        id \u003d ch;\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Option.java",
          "functionStartLine": 151,
          "functionName": "validateOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n",
          "diff": "@@ -1,17 +1,18 @@\n private void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n         throw new IllegalArgumentException(\"opt is null\");\n     } else if (opt.length() \u003d\u003d 1) {\n-        if (!isValidOpt(opt.charAt(0))) {\n-            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\n+        char ch \u003d opt.charAt(0);\n+        if (!isValidOpt(ch)) {\n+            throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n         }\n-        id \u003d opt.charAt(0);\n+        id \u003d ch;\n     } else {\n         char[] chars \u003d opt.toCharArray();\n         for (int i \u003d 0; i \u003c chars.length; i++) {\n             if (!isValidChar(chars[i])) {\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option\nshortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e\nis valid are:\u003c/p\u003e\n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e\n \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either\n \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e\n \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains\n letters.\u003c/li\u003e\n\u003c/ul\u003e\n\n@param opt The option string to validate\n@throws IllegalArgumentException if the Option is not valid.\n"
          }
        }
      ]
    },
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": {
      "type": "Ybodychange",
      "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/3/02, 4:45 PM",
      "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/31/02, 3:24 PM",
      "commitNameOld": "5aa47b707d299503caf33e9ee1b44903b3a13eee",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        throw new IllegalArgumentException(\"opt is null\");\n    } else if (opt.length() \u003d\u003d 1) {\n        if (!isValidOpt(opt.charAt(0))) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\n        }\n        id \u003d opt.charAt(0);\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Option.java",
      "functionStartLine": 128,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,16 +1,17 @@\n private void validateOption(String opt) throws IllegalArgumentException {\n     if (opt \u003d\u003d null) {\n         throw new IllegalArgumentException(\"opt is null\");\n     } else if (opt.length() \u003d\u003d 1) {\n         if (!isValidOpt(opt.charAt(0))) {\n             throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\n         }\n+        id \u003d opt.charAt(0);\n     } else {\n         char[] chars \u003d opt.toCharArray();\n         for (int i \u003d 0; i \u003c chars.length; i++) {\n             if (!isValidChar(chars[i])) {\n                 throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac": {
      "type": "Yintroduced",
      "commitMessage": "OptionBuilder first cut\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/02, 3:12 PM",
      "commitName": "7f90b98c1f77a0c1af9c774a12e8e257d7a0d1ac",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,16 @@\n+private void validateOption(String opt) throws IllegalArgumentException {\n+    if (opt \u003d\u003d null) {\n+        throw new IllegalArgumentException(\"opt is null\");\n+    } else if (opt.length() \u003d\u003d 1) {\n+        if (!isValidOpt(opt.charAt(0))) {\n+            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\n+        }\n+    } else {\n+        char[] chars \u003d opt.toCharArray();\n+        for (int i \u003d 0; i \u003c chars.length; i++) {\n+            if (!isValidChar(chars[i])) {\n+                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void validateOption(String opt) throws IllegalArgumentException {\n    if (opt \u003d\u003d null) {\n        throw new IllegalArgumentException(\"opt is null\");\n    } else if (opt.length() \u003d\u003d 1) {\n        if (!isValidOpt(opt.charAt(0))) {\n            throw new IllegalArgumentException(\"illegal option value \u0027\" + opt.charAt(0) + \"\u0027\");\n        }\n    } else {\n        char[] chars \u003d opt.toCharArray();\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (!isValidChar(chars[i])) {\n                throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Option.java",
      "functionStartLine": 119,
      "functionName": "validateOption",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}