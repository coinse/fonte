{
  "origin": "codeshovel",
  "repositoryName": "Cli-37b",
  "repositoryPath": "/tmp/Cli-37b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultParser.java",
  "functionName": "handleShortAndLongOption",
  "functionId": "handleShortAndLongOption___token-String",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/DefaultParser.java",
  "functionAnnotation": "",
  "functionDoc": "Handles the following tokens:\n\n-S\n-SV\n-S V\n-S\u003dV\n-S1S2\n-S1S2 V\n-SV1\u003dV2\n\n-L\n-LV\n-L V\n-L\u003dV\n-l\n\n@param token the command line token to handle\n",
  "functionStartLine": 469,
  "functionEndLine": 559,
  "numCommitsSeen": 15,
  "timeTaken": 1019,
  "changeHistory": [
    "5b098dec44567a760c220c1e0cd6bee29262c2c4",
    "a1b5d44432c057cf675f051bb20379937565f4ef",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "f43698527ef2b5ba15fe85d46d2d505418f68243"
  ],
  "changeHistoryShort": {
    "5b098dec44567a760c220c1e0cd6bee29262c2c4": "Yformatchange",
    "a1b5d44432c057cf675f051bb20379937565f4ef": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "f43698527ef2b5ba15fe85d46d2d505418f68243": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5b098dec44567a760c220c1e0cd6bee29262c2c4": {
      "type": "Yformatchange",
      "commitMessage": "trailing spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1095657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/11, 4:13 AM",
      "commitName": "5b098dec44567a760c220c1e0cd6bee29262c2c4",
      "commitAuthor": "Simone Tripodi",
      "commitDateOld": "4/12/11, 11:57 AM",
      "commitNameOld": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 8.68,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleShortAndLongOption(String token) throws ParseException {\n    String t \u003d Util.stripLeadingHyphens(token);\n    int pos \u003d t.indexOf(\u0027\u003d\u0027);\n    if (t.length() \u003d\u003d 1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else {\n            handleUnknownToken(token);\n        }\n    } else if (pos \u003d\u003d -1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else if (!options.getMatchingOptions(t).isEmpty()) {\n            handleLongOptionWithoutEqual(token);\n        } else {\n            String opt \u003d getLongPrefix(t);\n            if (opt !\u003d null \u0026\u0026 options.getOption(opt).acceptsArg()) {\n                handleOption(options.getOption(opt));\n                currentOption.addValueForProcessing(t.substring(opt.length()));\n                currentOption \u003d null;\n            } else if (isJavaProperty(t)) {\n                handleOption(options.getOption(t.substring(0, 1)));\n                currentOption.addValueForProcessing(t.substring(1));\n                currentOption \u003d null;\n            } else {\n                handleConcatenatedOptions(token);\n            }\n        }\n    } else {\n        String opt \u003d t.substring(0, pos);\n        String value \u003d t.substring(pos + 1);\n        if (opt.length() \u003d\u003d 1) {\n            Option option \u003d options.getOption(opt);\n            if (option !\u003d null \u0026\u0026 option.acceptsArg()) {\n                handleOption(option);\n                currentOption.addValueForProcessing(value);\n                currentOption \u003d null;\n            } else {\n                handleUnknownToken(token);\n            }\n        } else if (isJavaProperty(opt)) {\n            handleOption(options.getOption(opt.substring(0, 1)));\n            currentOption.addValueForProcessing(opt.substring(1));\n            currentOption.addValueForProcessing(value);\n            currentOption \u003d null;\n        } else {\n            handleLongOptionWithEqual(token);\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 466,
      "functionName": "handleShortAndLongOption",
      "functionAnnotation": "",
      "functionDoc": "Handles the following tokens:\n\n-S\n-SV\n-S V\n-S\u003dV\n-S1S2\n-S1S2 V\n-SV1\u003dV2\n\n-L\n-LV\n-L V\n-L\u003dV\n-l\n\n@param token the command line token to handle\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a1b5d44432c057cf675f051bb20379937565f4ef": {
      "type": "Ybodychange",
      "commitMessage": "Moving to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11, 11:57 AM",
      "commitName": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/17/10, 12:57 AM",
      "commitNameOld": "324b7f901b91614927926a5bab1d9e0e2325f018",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 299.46,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleShortAndLongOption(String token) throws ParseException {\n    String t \u003d Util.stripLeadingHyphens(token);\n    int pos \u003d t.indexOf(\u0027\u003d\u0027);\n    if (t.length() \u003d\u003d 1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else {\n            handleUnknownToken(token);\n        }\n    } else if (pos \u003d\u003d -1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else if (!options.getMatchingOptions(t).isEmpty()) {\n            handleLongOptionWithoutEqual(token);\n        } else {\n            String opt \u003d getLongPrefix(t);\n            if (opt !\u003d null \u0026\u0026 options.getOption(opt).acceptsArg()) {\n                handleOption(options.getOption(opt));\n                currentOption.addValueForProcessing(t.substring(opt.length()));\n                currentOption \u003d null;\n            } else if (isJavaProperty(t)) {\n                handleOption(options.getOption(t.substring(0, 1)));\n                currentOption.addValueForProcessing(t.substring(1));\n                currentOption \u003d null;\n            } else {\n                handleConcatenatedOptions(token);\n            }\n        }\n    } else {\n        String opt \u003d t.substring(0, pos);\n        String value \u003d t.substring(pos + 1);\n        if (opt.length() \u003d\u003d 1) {\n            Option option \u003d options.getOption(opt);\n            if (option !\u003d null \u0026\u0026 option.acceptsArg()) {\n                handleOption(option);\n                currentOption.addValueForProcessing(value);\n                currentOption \u003d null;\n            } else {\n                handleUnknownToken(token);\n            }\n        } else if (isJavaProperty(opt)) {\n            handleOption(options.getOption(opt.substring(0, 1)));\n            currentOption.addValueForProcessing(opt.substring(1));\n            currentOption.addValueForProcessing(value);\n            currentOption \u003d null;\n        } else {\n            handleLongOptionWithEqual(token);\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 466,
      "functionName": "handleShortAndLongOption",
      "functionAnnotation": "",
      "functionDoc": "Handles the following tokens:\n\n-S\n-SV\n-S V\n-S\u003dV\n-S1S2\n-S1S2 V\n-SV1\u003dV2\n\n-L\n-LV\n-L V\n-L\u003dV\n-l\n\n@param token the command line token to handle\n",
      "diff": "",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 2:45 AM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10, 2:42 AM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleShortAndLongOption(String token) throws ParseException {\n    String t \u003d Util.stripLeadingHyphens(token);\n    int pos \u003d t.indexOf(\u0027\u003d\u0027);\n    if (t.length() \u003d\u003d 1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else {\n            handleUnknownToken(token);\n        }\n    } else if (pos \u003d\u003d -1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else if (!options.getMatchingOptions(t).isEmpty()) {\n            handleLongOptionWithoutEqual(token);\n        } else {\n            String opt \u003d getLongPrefix(t);\n            if (opt !\u003d null \u0026\u0026 options.getOption(opt).acceptsArg()) {\n                handleOption(options.getOption(opt));\n                currentOption.addValueForProcessing(t.substring(opt.length()));\n                currentOption \u003d null;\n            } else if (isJavaProperty(t)) {\n                handleOption(options.getOption(t.substring(0, 1)));\n                currentOption.addValueForProcessing(t.substring(1));\n                currentOption \u003d null;\n            } else {\n                handleConcatenatedOptions(token);\n            }\n        }\n    } else {\n        String opt \u003d t.substring(0, pos);\n        String value \u003d t.substring(pos + 1);\n        if (opt.length() \u003d\u003d 1) {\n            Option option \u003d options.getOption(opt);\n            if (option !\u003d null \u0026\u0026 option.acceptsArg()) {\n                handleOption(option);\n                currentOption.addValueForProcessing(value);\n                currentOption \u003d null;\n            } else {\n                handleUnknownToken(token);\n            }\n        } else if (isJavaProperty(opt)) {\n            handleOption(options.getOption(opt.substring(0, 1)));\n            currentOption.addValueForProcessing(opt.substring(1));\n            currentOption.addValueForProcessing(value);\n            currentOption \u003d null;\n        } else {\n            handleLongOptionWithEqual(token);\n        }\n    }\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 459,
      "functionName": "handleShortAndLongOption",
      "functionAnnotation": "",
      "functionDoc": "Handles the following tokens:\n\n-S\n-SV\n-S V\n-S\u003dV\n-S1S2\n-S1S2 V\n-SV1\u003dV2\n\n-L\n-LV\n-L V\n-L\u003dV\n-l\n\n@param token the command line token to handle\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/DefaultParser.java",
        "newPath": "src/main/java/org/apache/commons/cli/DefaultParser.java"
      }
    },
    "f43698527ef2b5ba15fe85d46d2d505418f68243": {
      "type": "Yintroduced",
      "commitMessage": "New unified parser (CLI-181, also fixes CLI-160, CLI-161, CLI-167, CLI-184)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@780264 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/30/09, 6:43 AM",
      "commitName": "f43698527ef2b5ba15fe85d46d2d505418f68243",
      "commitAuthor": "Emmanuel Bourg",
      "diff": "@@ -0,0 +1,50 @@\n+private void handleShortAndLongOption(String token) throws ParseException {\n+    String t \u003d Util.stripLeadingHyphens(token);\n+    int pos \u003d t.indexOf(\u0027\u003d\u0027);\n+    if (t.length() \u003d\u003d 1) {\n+        if (options.hasShortOption(t)) {\n+            handleOption(options.getOption(t));\n+        } else {\n+            handleUnknownToken(token);\n+        }\n+    } else if (pos \u003d\u003d -1) {\n+        if (options.hasShortOption(t)) {\n+            handleOption(options.getOption(t));\n+        } else if (!options.getMatchingOptions(t).isEmpty()) {\n+            handleLongOptionWithoutEqual(token);\n+        } else {\n+            String opt \u003d getLongPrefix(t);\n+            if (opt !\u003d null \u0026\u0026 options.getOption(opt).acceptsArg()) {\n+                handleOption(options.getOption(opt));\n+                currentOption.addValueForProcessing(t.substring(opt.length()));\n+                currentOption \u003d null;\n+            } else if (isJavaProperty(t)) {\n+                handleOption(options.getOption(t.substring(0, 1)));\n+                currentOption.addValueForProcessing(t.substring(1));\n+                currentOption \u003d null;\n+            } else {\n+                handleConcatenatedOptions(token);\n+            }\n+        }\n+    } else {\n+        String opt \u003d t.substring(0, pos);\n+        String value \u003d t.substring(pos + 1);\n+        if (opt.length() \u003d\u003d 1) {\n+            Option option \u003d options.getOption(opt);\n+            if (option !\u003d null \u0026\u0026 option.acceptsArg()) {\n+                handleOption(option);\n+                currentOption.addValueForProcessing(value);\n+                currentOption \u003d null;\n+            } else {\n+                handleUnknownToken(token);\n+            }\n+        } else if (isJavaProperty(opt)) {\n+            handleOption(options.getOption(opt.substring(0, 1)));\n+            currentOption.addValueForProcessing(opt.substring(1));\n+            currentOption.addValueForProcessing(value);\n+            currentOption \u003d null;\n+        } else {\n+            handleLongOptionWithEqual(token);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void handleShortAndLongOption(String token) throws ParseException {\n    String t \u003d Util.stripLeadingHyphens(token);\n    int pos \u003d t.indexOf(\u0027\u003d\u0027);\n    if (t.length() \u003d\u003d 1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else {\n            handleUnknownToken(token);\n        }\n    } else if (pos \u003d\u003d -1) {\n        if (options.hasShortOption(t)) {\n            handleOption(options.getOption(t));\n        } else if (!options.getMatchingOptions(t).isEmpty()) {\n            handleLongOptionWithoutEqual(token);\n        } else {\n            String opt \u003d getLongPrefix(t);\n            if (opt !\u003d null \u0026\u0026 options.getOption(opt).acceptsArg()) {\n                handleOption(options.getOption(opt));\n                currentOption.addValueForProcessing(t.substring(opt.length()));\n                currentOption \u003d null;\n            } else if (isJavaProperty(t)) {\n                handleOption(options.getOption(t.substring(0, 1)));\n                currentOption.addValueForProcessing(t.substring(1));\n                currentOption \u003d null;\n            } else {\n                handleConcatenatedOptions(token);\n            }\n        }\n    } else {\n        String opt \u003d t.substring(0, pos);\n        String value \u003d t.substring(pos + 1);\n        if (opt.length() \u003d\u003d 1) {\n            Option option \u003d options.getOption(opt);\n            if (option !\u003d null \u0026\u0026 option.acceptsArg()) {\n                handleOption(option);\n                currentOption.addValueForProcessing(value);\n                currentOption \u003d null;\n            } else {\n                handleUnknownToken(token);\n            }\n        } else if (isJavaProperty(opt)) {\n            handleOption(options.getOption(opt.substring(0, 1)));\n            currentOption.addValueForProcessing(opt.substring(1));\n            currentOption.addValueForProcessing(value);\n            currentOption \u003d null;\n        } else {\n            handleLongOptionWithEqual(token);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 369,
      "functionName": "handleShortAndLongOption",
      "functionAnnotation": "",
      "functionDoc": "Handles the following tokens:\n\n-S\n-SV\n-S V\n-S\u003dV\n-S1S2\n-S1S2 V\n-SV1\u003dV2\n\n-L\n-LV\n-L V\n-L\u003dV\n-l\n\n@param token the command line token to handle\n"
    }
  }
}