{
  "origin": "codeshovel",
  "repositoryName": "JxPath-5b",
  "repositoryPath": "/tmp/JxPath-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DOMNodePointer.java",
  "functionName": "asPath",
  "functionId": "asPath",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 436,
  "functionEndLine": 498,
  "numCommitsSeen": 44,
  "timeTaken": 2117,
  "changeHistory": [
    "d36e894cb61100284b81027d6765e66181f982b5",
    "413edb7f5000c8f53914bcaf73058d763adfd525",
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
    "e199848bb242b4eff258f41ea06bb1e4a1cea9b2",
    "632e72228ad994efa19c0a9ae84923718f259cdf",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
    "207c6dd98407506ff367d072be25b56f37989215",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "d36e894cb61100284b81027d6765e66181f982b5": "Ybodychange",
    "413edb7f5000c8f53914bcaf73058d763adfd525": "Ybodychange",
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": "Yformatchange",
    "e199848bb242b4eff258f41ea06bb1e4a1cea9b2": "Ybodychange",
    "632e72228ad994efa19c0a9ae84923718f259cdf": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Yfilerename",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": "Ybodychange",
    "207c6dd98407506ff367d072be25b56f37989215": "Ymultichange(Ymovefromfile,Ybodychange)",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d36e894cb61100284b81027d6765e66181f982b5": {
      "type": "Ybodychange",
      "commitMessage": "revert changes for JXPATH-61\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@540278 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/21/07, 1:38 PM",
      "commitName": "d36e894cb61100284b81027d6765e66181f982b5",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "5/16/07, 12:47 PM",
      "commitNameOld": "9f912437a14392f8d4c98aa811e9134fbf7b5a52",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 5.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    if (id !\u003d null) {\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n    }\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                    buffer.append(\u0027/\u0027);\n                }\n                String ln \u003d DOMNodePointer.getLocalName(node);\n                String nsURI \u003d getNamespaceURI();\n                if (nsURI \u003d\u003d null) {\n                    buffer.append(ln);\n                    buffer.append(\u0027[\u0027);\n                    buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n                } else {\n                    String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix !\u003d null) {\n                        buffer.append(prefix);\n                        buffer.append(\u0027:\u0027);\n                        buffer.append(ln);\n                        buffer.append(\u0027[\u0027);\n                        buffer.append(getRelativePositionByName());\n                        buffer.append(\u0027]\u0027);\n                    } else {\n                        buffer.append(\"node()\");\n                        buffer.append(\u0027[\u0027);\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(\u0027]\u0027);\n                    }\n                }\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\");\n            buffer.append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 436,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,55 +1,55 @@\n public String asPath() {\n     if (id !\u003d null) {\n         return \"id(\u0027\" + escape(id) + \"\u0027)\";\n     }\n     StringBuffer buffer \u003d new StringBuffer();\n     if (parent !\u003d null) {\n         buffer.append(parent.asPath());\n     }\n     switch(node.getNodeType()) {\n         case Node.ELEMENT_NODE:\n             if (parent instanceof DOMNodePointer) {\n                 if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                     buffer.append(\u0027/\u0027);\n                 }\n                 String ln \u003d DOMNodePointer.getLocalName(node);\n                 String nsURI \u003d getNamespaceURI();\n-                if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n+                if (nsURI \u003d\u003d null) {\n                     buffer.append(ln);\n                     buffer.append(\u0027[\u0027);\n                     buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n                 } else {\n                     String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\n                     if (prefix !\u003d null) {\n                         buffer.append(prefix);\n                         buffer.append(\u0027:\u0027);\n                         buffer.append(ln);\n                         buffer.append(\u0027[\u0027);\n                         buffer.append(getRelativePositionByName());\n                         buffer.append(\u0027]\u0027);\n                     } else {\n                         buffer.append(\"node()\");\n                         buffer.append(\u0027[\u0027);\n                         buffer.append(getRelativePositionOfElement());\n                         buffer.append(\u0027]\u0027);\n                     }\n                 }\n             }\n             break;\n         case Node.TEXT_NODE:\n         case Node.CDATA_SECTION_NODE:\n             buffer.append(\"/text()\");\n             buffer.append(\u0027[\u0027);\n             buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n             break;\n         case Node.PROCESSING_INSTRUCTION_NODE:\n             String target \u003d ((ProcessingInstruction) node).getTarget();\n             buffer.append(\"/processing-instruction(\\\u0027\");\n             buffer.append(target).append(\"\u0027)\");\n             buffer.append(\u0027[\u0027);\n             buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n             break;\n         case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "413edb7f5000c8f53914bcaf73058d763adfd525": {
      "type": "Ybodychange",
      "commitMessage": "Another attempt at closing bug 32360. \nSee http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d32360\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329964 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/31/05, 7:25 PM",
      "commitName": "413edb7f5000c8f53914bcaf73058d763adfd525",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/29/05, 2:07 PM",
      "commitNameOld": "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 2.26,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    if (id !\u003d null) {\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n    }\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                    buffer.append(\u0027/\u0027);\n                }\n                String ln \u003d DOMNodePointer.getLocalName(node);\n                String nsURI \u003d getNamespaceURI();\n                if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                    buffer.append(ln);\n                    buffer.append(\u0027[\u0027);\n                    buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n                } else {\n                    String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix !\u003d null) {\n                        buffer.append(prefix);\n                        buffer.append(\u0027:\u0027);\n                        buffer.append(ln);\n                        buffer.append(\u0027[\u0027);\n                        buffer.append(getRelativePositionByName());\n                        buffer.append(\u0027]\u0027);\n                    } else {\n                        buffer.append(\"node()\");\n                        buffer.append(\u0027[\u0027);\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(\u0027]\u0027);\n                    }\n                }\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\");\n            buffer.append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 440,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,55 +1,55 @@\n public String asPath() {\n     if (id !\u003d null) {\n         return \"id(\u0027\" + escape(id) + \"\u0027)\";\n     }\n     StringBuffer buffer \u003d new StringBuffer();\n     if (parent !\u003d null) {\n         buffer.append(parent.asPath());\n     }\n     switch(node.getNodeType()) {\n         case Node.ELEMENT_NODE:\n             if (parent instanceof DOMNodePointer) {\n                 if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                     buffer.append(\u0027/\u0027);\n                 }\n-                String nsURI \u003d getNamespaceURI();\n                 String ln \u003d DOMNodePointer.getLocalName(node);\n-                if (nsURI \u003d\u003d null) {\n+                String nsURI \u003d getNamespaceURI();\n+                if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                     buffer.append(ln);\n                     buffer.append(\u0027[\u0027);\n                     buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n                 } else {\n                     String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\n                     if (prefix !\u003d null) {\n                         buffer.append(prefix);\n                         buffer.append(\u0027:\u0027);\n                         buffer.append(ln);\n                         buffer.append(\u0027[\u0027);\n                         buffer.append(getRelativePositionByName());\n                         buffer.append(\u0027]\u0027);\n                     } else {\n                         buffer.append(\"node()\");\n                         buffer.append(\u0027[\u0027);\n                         buffer.append(getRelativePositionOfElement());\n                         buffer.append(\u0027]\u0027);\n                     }\n                 }\n             }\n             break;\n         case Node.TEXT_NODE:\n         case Node.CDATA_SECTION_NODE:\n             buffer.append(\"/text()\");\n             buffer.append(\u0027[\u0027);\n             buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n             break;\n         case Node.PROCESSING_INSTRUCTION_NODE:\n             String target \u003d ((ProcessingInstruction) node).getTarget();\n             buffer.append(\"/processing-instruction(\\\u0027\");\n             buffer.append(target).append(\"\u0027)\");\n             buffer.append(\u0027[\u0027);\n             buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n             break;\n         case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a": {
      "type": "Ybodychange",
      "commitMessage": "Introduced prefix registration with JXPathContext\nFixed a number or problems with namespace matching\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/31/04, 6:55 PM",
      "commitName": "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/24/04, 9:41 PM",
      "commitNameOld": "d52ff3460273690514d70e716be1ff3201dca8c8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    if (id !\u003d null) {\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n    }\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                    buffer.append(\u0027/\u0027);\n                }\n                String nsURI \u003d getNamespaceURI();\n                String ln \u003d DOMNodePointer.getLocalName(node);\n                if (nsURI \u003d\u003d null) {\n                    buffer.append(ln);\n                    buffer.append(\u0027[\u0027);\n                    buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n                } else {\n                    String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix !\u003d null) {\n                        buffer.append(prefix);\n                        buffer.append(\u0027:\u0027);\n                        buffer.append(ln);\n                        buffer.append(\u0027[\u0027);\n                        buffer.append(getRelativePositionByName());\n                        buffer.append(\u0027]\u0027);\n                    } else {\n                        buffer.append(\"node()\");\n                        buffer.append(\u0027[\u0027);\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(\u0027]\u0027);\n                    }\n                }\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\");\n            buffer.append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 446,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,55 @@\n public String asPath() {\n     if (id !\u003d null) {\n         return \"id(\u0027\" + escape(id) + \"\u0027)\";\n     }\n     StringBuffer buffer \u003d new StringBuffer();\n     if (parent !\u003d null) {\n         buffer.append(parent.asPath());\n     }\n     switch(node.getNodeType()) {\n         case Node.ELEMENT_NODE:\n             if (parent instanceof DOMNodePointer) {\n                 if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                     buffer.append(\u0027/\u0027);\n                 }\n-                buffer.append(getName());\n-                buffer.append(\u0027[\u0027);\n-                buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n+                String nsURI \u003d getNamespaceURI();\n+                String ln \u003d DOMNodePointer.getLocalName(node);\n+                if (nsURI \u003d\u003d null) {\n+                    buffer.append(ln);\n+                    buffer.append(\u0027[\u0027);\n+                    buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n+                } else {\n+                    String prefix \u003d getNamespaceResolver().getPrefix(nsURI);\n+                    if (prefix !\u003d null) {\n+                        buffer.append(prefix);\n+                        buffer.append(\u0027:\u0027);\n+                        buffer.append(ln);\n+                        buffer.append(\u0027[\u0027);\n+                        buffer.append(getRelativePositionByName());\n+                        buffer.append(\u0027]\u0027);\n+                    } else {\n+                        buffer.append(\"node()\");\n+                        buffer.append(\u0027[\u0027);\n+                        buffer.append(getRelativePositionOfElement());\n+                        buffer.append(\u0027]\u0027);\n+                    }\n+                }\n             }\n             break;\n         case Node.TEXT_NODE:\n         case Node.CDATA_SECTION_NODE:\n             buffer.append(\"/text()\");\n             buffer.append(\u0027[\u0027);\n             buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n             break;\n         case Node.PROCESSING_INSTRUCTION_NODE:\n             String target \u003d ((ProcessingInstruction) node).getTarget();\n             buffer.append(\"/processing-instruction(\\\u0027\");\n             buffer.append(target).append(\"\u0027)\");\n             buffer.append(\u0027[\u0027);\n             buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n             break;\n         case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/28/02, 10:44 PM",
      "commitNameOld": "a723ec0c1ab4b6d29b1b00868fe281a227b09551",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 42.96,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    if (id !\u003d null) {\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n    }\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                    buffer.append(\u0027/\u0027);\n                }\n                buffer.append(getName());\n                buffer.append(\u0027[\u0027);\n                buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\");\n            buffer.append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 487,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": {
      "type": "Yformatchange",
      "commitMessage": "Replaced tabs with spaces\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:33 PM",
      "commitName": "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:20 PM",
      "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    if (id !\u003d null) {\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n    }\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                    buffer.append(\u0027/\u0027);\n                }\n                buffer.append(getName());\n                buffer.append(\u0027[\u0027);\n                buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\");\n            buffer.append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 463,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e199848bb242b4eff258f41ea06bb1e4a1cea9b2": {
      "type": "Ybodychange",
      "commitMessage": "Updated the setValue method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/19/02, 8:44 PM",
      "commitName": "e199848bb242b4eff258f41ea06bb1e4a1cea9b2",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 7:59 PM",
      "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    if (id !\u003d null) {\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n    }\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n                    buffer.append(\u0027/\u0027);\n                }\n                buffer.append(getName());\n                buffer.append(\u0027[\u0027);\n                buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\");\n            buffer.append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027);\n            buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 463,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,36 @@\n public String asPath() {\n     if (id !\u003d null) {\n         return \"id(\u0027\" + escape(id) + \"\u0027)\";\n     }\n     StringBuffer buffer \u003d new StringBuffer();\n     if (parent !\u003d null) {\n         buffer.append(parent.asPath());\n     }\n     switch(node.getNodeType()) {\n         case Node.ELEMENT_NODE:\n             if (parent instanceof DOMNodePointer) {\n-                buffer.append(\u0027/\u0027);\n+                if (buffer.length() \u003d\u003d 0 || buffer.charAt(buffer.length() - 1) !\u003d \u0027/\u0027) {\n+                    buffer.append(\u0027/\u0027);\n+                }\n                 buffer.append(getName());\n-                buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n+                buffer.append(\u0027[\u0027);\n+                buffer.append(getRelativePositionByName()).append(\u0027]\u0027);\n             }\n             break;\n         case Node.TEXT_NODE:\n         case Node.CDATA_SECTION_NODE:\n             buffer.append(\"/text()\");\n-            buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n+            buffer.append(\u0027[\u0027);\n+            buffer.append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n             break;\n         case Node.PROCESSING_INSTRUCTION_NODE:\n             String target \u003d ((ProcessingInstruction) node).getTarget();\n-            buffer.append(\"/processing-instruction(\\\u0027\").append(target).append(\"\u0027)\");\n-            buffer.append(\u0027[\u0027).append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n+            buffer.append(\"/processing-instruction(\\\u0027\");\n+            buffer.append(target).append(\"\u0027)\");\n+            buffer.append(\u0027[\u0027);\n+            buffer.append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n             break;\n         case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "632e72228ad994efa19c0a9ae84923718f259cdf": {
      "type": "Ybodychange",
      "commitMessage": "Added support for id() and key()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/8/02, 3:47 PM",
      "commitName": "632e72228ad994efa19c0a9ae84923718f259cdf",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/28/02, 5:40 PM",
      "commitNameOld": "d3698cab8589ced4c494bf35d459ea3212b961d1",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 10.92,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    if (id !\u003d null) {\n        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n    }\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                buffer.append(\u0027/\u0027);\n                buffer.append(getName());\n                buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\").append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027).append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 411,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,30 @@\n public String asPath() {\n+    if (id !\u003d null) {\n+        return \"id(\u0027\" + escape(id) + \"\u0027)\";\n+    }\n     StringBuffer buffer \u003d new StringBuffer();\n     if (parent !\u003d null) {\n         buffer.append(parent.asPath());\n     }\n     switch(node.getNodeType()) {\n         case Node.ELEMENT_NODE:\n             if (parent instanceof DOMNodePointer) {\n                 buffer.append(\u0027/\u0027);\n                 buffer.append(getName());\n                 buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n             }\n             break;\n         case Node.TEXT_NODE:\n         case Node.CDATA_SECTION_NODE:\n             buffer.append(\"/text()\");\n             buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n             break;\n         case Node.PROCESSING_INSTRUCTION_NODE:\n             String target \u003d ((ProcessingInstruction) node).getTarget();\n             buffer.append(\"/processing-instruction(\\\u0027\").append(target).append(\"\u0027)\");\n             buffer.append(\u0027[\u0027).append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n             break;\n         case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Yfilerename",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/11/02, 7:28 PM",
      "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                buffer.append(\u0027/\u0027);\n                buffer.append(getName());\n                buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\").append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027).append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 380,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java",
        "newPath": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java"
      }
    },
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": {
      "type": "Ybodychange",
      "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/21/01, 4:22 PM",
      "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "9/2/01, 6:22 PM",
      "commitNameOld": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 18.92,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public String asPath() {\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            if (parent instanceof DOMNodePointer) {\n                buffer.append(\u0027/\u0027);\n                buffer.append(getName());\n                buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n            }\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/text()\");\n            buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/processing-instruction(\\\u0027\").append(target).append(\"\u0027)\");\n            buffer.append(\u0027[\u0027).append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java",
      "functionStartLine": 293,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,27 @@\n public String asPath() {\n     StringBuffer buffer \u003d new StringBuffer();\n     if (parent !\u003d null) {\n         buffer.append(parent.asPath());\n     }\n     switch(node.getNodeType()) {\n         case Node.ELEMENT_NODE:\n-            buffer.append(\u0027/\u0027);\n-            buffer.append(getName().asString());\n-            buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n+            if (parent instanceof DOMNodePointer) {\n+                buffer.append(\u0027/\u0027);\n+                buffer.append(getName());\n+                buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n+            }\n             break;\n         case Node.TEXT_NODE:\n         case Node.CDATA_SECTION_NODE:\n-            buffer.append(\"/self::text()\");\n+            buffer.append(\"/text()\");\n+            buffer.append(\u0027[\u0027).append(getRelativePositionOfTextNode()).append(\u0027]\u0027);\n             break;\n         case Node.PROCESSING_INSTRUCTION_NODE:\n             String target \u003d ((ProcessingInstruction) node).getTarget();\n-            buffer.append(\"/self::processing-instruction(\").append(target).append(\u0027)\u0027);\n+            buffer.append(\"/processing-instruction(\\\u0027\").append(target).append(\"\u0027)\");\n+            buffer.append(\u0027[\u0027).append(getRelativePositionOfPI(target)).append(\u0027]\u0027);\n             break;\n         case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "207c6dd98407506ff367d072be25b56f37989215": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/01, 6:22 PM",
      "commitName": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 8:38 PM",
          "commitNameOld": "ec798e97745ee2c294d374b873308065948dded4",
          "commitAuthorOld": "Craig R. McClanahan",
          "daysBetweenCommits": 10.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String asPath() {\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            buffer.append(\u0027/\u0027);\n            buffer.append(getName().asString());\n            buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/self::text()\");\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/self::processing-instruction(\").append(target).append(\u0027)\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java",
          "functionStartLine": 145,
          "functionName": "asPath",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,23 @@\n public String asPath() {\n     StringBuffer buffer \u003d new StringBuffer();\n-    if (getParent() !\u003d null) {\n-        buffer.append(getParent().asPath());\n-        buffer.append(\u0027/\u0027);\n+    if (parent !\u003d null) {\n+        buffer.append(parent.asPath());\n     }\n-    buffer.append(getPropertyName());\n-    if (index !\u003d WHOLE_COLLECTION \u0026\u0026 isCollection()) {\n-        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\n+    switch(node.getNodeType()) {\n+        case Node.ELEMENT_NODE:\n+            buffer.append(\u0027/\u0027);\n+            buffer.append(getName().asString());\n+            buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n+            break;\n+        case Node.TEXT_NODE:\n+        case Node.CDATA_SECTION_NODE:\n+            buffer.append(\"/self::text()\");\n+            break;\n+        case Node.PROCESSING_INSTRUCTION_NODE:\n+            String target \u003d ((ProcessingInstruction) node).getTarget();\n+            buffer.append(\"/self::processing-instruction(\").append(target).append(\u0027)\u0027);\n+            break;\n+        case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyPointer.java",
            "newPath": "src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java",
            "oldMethodName": "asPath",
            "newMethodName": "asPath"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 8:38 PM",
          "commitNameOld": "ec798e97745ee2c294d374b873308065948dded4",
          "commitAuthorOld": "Craig R. McClanahan",
          "daysBetweenCommits": 10.91,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String asPath() {\n    StringBuffer buffer \u003d new StringBuffer();\n    if (parent !\u003d null) {\n        buffer.append(parent.asPath());\n    }\n    switch(node.getNodeType()) {\n        case Node.ELEMENT_NODE:\n            buffer.append(\u0027/\u0027);\n            buffer.append(getName().asString());\n            buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n            break;\n        case Node.TEXT_NODE:\n        case Node.CDATA_SECTION_NODE:\n            buffer.append(\"/self::text()\");\n            break;\n        case Node.PROCESSING_INSTRUCTION_NODE:\n            String target \u003d ((ProcessingInstruction) node).getTarget();\n            buffer.append(\"/self::processing-instruction(\").append(target).append(\u0027)\u0027);\n            break;\n        case Node.DOCUMENT_NODE:\n    }\n    return buffer.toString();\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java",
          "functionStartLine": 145,
          "functionName": "asPath",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,23 @@\n public String asPath() {\n     StringBuffer buffer \u003d new StringBuffer();\n-    if (getParent() !\u003d null) {\n-        buffer.append(getParent().asPath());\n-        buffer.append(\u0027/\u0027);\n+    if (parent !\u003d null) {\n+        buffer.append(parent.asPath());\n     }\n-    buffer.append(getPropertyName());\n-    if (index !\u003d WHOLE_COLLECTION \u0026\u0026 isCollection()) {\n-        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\n+    switch(node.getNodeType()) {\n+        case Node.ELEMENT_NODE:\n+            buffer.append(\u0027/\u0027);\n+            buffer.append(getName().asString());\n+            buffer.append(\u0027[\u0027).append(getRelativePositionByName()).append(\u0027]\u0027);\n+            break;\n+        case Node.TEXT_NODE:\n+        case Node.CDATA_SECTION_NODE:\n+            buffer.append(\"/self::text()\");\n+            break;\n+        case Node.PROCESSING_INSTRUCTION_NODE:\n+            String target \u003d ((ProcessingInstruction) node).getTarget();\n+            buffer.append(\"/self::processing-instruction(\").append(target).append(\u0027)\u0027);\n+            break;\n+        case Node.DOCUMENT_NODE:\n     }\n     return buffer.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,12 @@\n+public String asPath() {\n+    StringBuffer buffer \u003d new StringBuffer();\n+    if (getParent() !\u003d null) {\n+        buffer.append(getParent().asPath());\n+        buffer.append(\u0027/\u0027);\n+    }\n+    buffer.append(getPropertyName());\n+    if (index !\u003d WHOLE_COLLECTION \u0026\u0026 isCollection()) {\n+        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\n+    }\n+    return buffer.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String asPath() {\n    StringBuffer buffer \u003d new StringBuffer();\n    if (getParent() !\u003d null) {\n        buffer.append(getParent().asPath());\n        buffer.append(\u0027/\u0027);\n    }\n    buffer.append(getPropertyName());\n    if (index !\u003d WHOLE_COLLECTION \u0026\u0026 isCollection()) {\n        buffer.append(\u0027[\u0027).append(index + 1).append(\u0027]\u0027);\n    }\n    return buffer.toString();\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/pointers/PropertyPointer.java",
      "functionStartLine": 155,
      "functionName": "asPath",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}