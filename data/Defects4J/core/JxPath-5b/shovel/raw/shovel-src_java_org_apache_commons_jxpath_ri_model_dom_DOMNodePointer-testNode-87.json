{
  "origin": "codeshovel",
  "repositoryName": "JxPath-5b",
  "repositoryPath": "/tmp/JxPath-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DOMNodePointer.java",
  "functionName": "testNode",
  "functionId": "testNode___node-Node__test-NodeTest",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 87,
  "functionEndLine": 137,
  "numCommitsSeen": 65,
  "timeTaken": 3178,
  "changeHistory": [
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "fab38abb27f2f92b9340cfc232eb5517434bf138",
    "413edb7f5000c8f53914bcaf73058d763adfd525",
    "39b19d33418245cf67dd1ce97d472b65b14e8d3d",
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
    "d52ff3460273690514d70e716be1ff3201dca8c8",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "a723ec0c1ab4b6d29b1b00868fe281a227b09551",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
    "e199848bb242b4eff258f41ea06bb1e4a1cea9b2",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9"
  ],
  "changeHistoryShort": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "fab38abb27f2f92b9340cfc232eb5517434bf138": "Ybodychange",
    "413edb7f5000c8f53914bcaf73058d763adfd525": "Ybodychange",
    "39b19d33418245cf67dd1ce97d472b65b14e8d3d": "Ybodychange",
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a": "Ymultichange(Yparameterchange,Ybodychange)",
    "d52ff3460273690514d70e716be1ff3201dca8c8": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Ybodychange",
    "a723ec0c1ab4b6d29b1b00868fe281a227b09551": "Ybodychange",
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": "Yformatchange",
    "e199848bb242b4eff258f41ea06bb1e4a1cea9b2": "Yformatchange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Yfilerename",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "1/10/07, 10:27 AM",
      "commitNameOld": "fab38abb27f2f92b9340cfc232eb5517434bf138",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 40.21,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    }\n    if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n        QName testName \u003d nodeNameTest.getNodeName();\n        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n        boolean wildcard \u003d nodeNameTest.isWildcard();\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n            return equalStrings(namespaceURI, nodeNS);\n        }\n        return false;\n    }\n    if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE || nodeType \u003d\u003d Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    }\n    if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 87,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,45 @@\n public static boolean testNode(Node node, NodeTest test) {\n     if (test \u003d\u003d null) {\n         return true;\n-    } else if (test instanceof NodeNameTest) {\n+    }\n+    if (test instanceof NodeNameTest) {\n         if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n             return false;\n         }\n         NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n         QName testName \u003d nodeNameTest.getNodeName();\n         String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n         boolean wildcard \u003d nodeNameTest.isWildcard();\n         String testPrefix \u003d testName.getPrefix();\n         if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n             return true;\n         }\n         if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n             String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n             return equalStrings(namespaceURI, nodeNS);\n         }\n-    } else if (test instanceof NodeTypeTest) {\n+        return false;\n+    }\n+    if (test instanceof NodeTypeTest) {\n         int nodeType \u003d node.getNodeType();\n         switch(((NodeTypeTest) test).getNodeType()) {\n             case Compiler.NODE_TYPE_NODE:\n                 return nodeType \u003d\u003d Node.ELEMENT_NODE || nodeType \u003d\u003d Node.DOCUMENT_NODE;\n             case Compiler.NODE_TYPE_TEXT:\n                 return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n             case Compiler.NODE_TYPE_COMMENT:\n                 return nodeType \u003d\u003d Node.COMMENT_NODE;\n             case Compiler.NODE_TYPE_PI:\n                 return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n         }\n         return false;\n-    } else if (test instanceof ProcessingInstructionTest) {\n+    }\n+    if (test instanceof ProcessingInstructionTest) {\n         if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n             String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n             String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n             return testPI.equals(nodePI);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fab38abb27f2f92b9340cfc232eb5517434bf138": {
      "type": "Ybodychange",
      "commitMessage": "[JXPATH-12] Descendant or self axis does not work correctly at root node.\nContributed by Marcin Sarniak.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@494917 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/07, 10:27 AM",
      "commitName": "fab38abb27f2f92b9340cfc232eb5517434bf138",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 42.53,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n        QName testName \u003d nodeNameTest.getNodeName();\n        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n        boolean wildcard \u003d nodeNameTest.isWildcard();\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n            return equalStrings(namespaceURI, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE || nodeType \u003d\u003d Node.DOCUMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 87,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,41 @@\n public static boolean testNode(Node node, NodeTest test) {\n     if (test \u003d\u003d null) {\n         return true;\n     } else if (test instanceof NodeNameTest) {\n         if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n             return false;\n         }\n         NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n         QName testName \u003d nodeNameTest.getNodeName();\n         String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n         boolean wildcard \u003d nodeNameTest.isWildcard();\n         String testPrefix \u003d testName.getPrefix();\n         if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n             return true;\n         }\n         if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n             String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n             return equalStrings(namespaceURI, nodeNS);\n         }\n     } else if (test instanceof NodeTypeTest) {\n         int nodeType \u003d node.getNodeType();\n         switch(((NodeTypeTest) test).getNodeType()) {\n             case Compiler.NODE_TYPE_NODE:\n-                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n+                return nodeType \u003d\u003d Node.ELEMENT_NODE || nodeType \u003d\u003d Node.DOCUMENT_NODE;\n             case Compiler.NODE_TYPE_TEXT:\n                 return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n             case Compiler.NODE_TYPE_COMMENT:\n                 return nodeType \u003d\u003d Node.COMMENT_NODE;\n             case Compiler.NODE_TYPE_PI:\n                 return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n         }\n         return false;\n     } else if (test instanceof ProcessingInstructionTest) {\n         if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n             String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n             String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n             return testPI.equals(nodePI);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "413edb7f5000c8f53914bcaf73058d763adfd525": {
      "type": "Ybodychange",
      "commitMessage": "Another attempt at closing bug 32360. \nSee http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d32360\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329964 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/31/05, 7:25 PM",
      "commitName": "413edb7f5000c8f53914bcaf73058d763adfd525",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/29/05, 2:07 PM",
      "commitNameOld": "c5808a90cd91bc01d78c7f3da8718b6dcf429fa0",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 2.26,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n        QName testName \u003d nodeNameTest.getNodeName();\n        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n        boolean wildcard \u003d nodeNameTest.isWildcard();\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n            return equalStrings(namespaceURI, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 86,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,3 +1,41 @@\n public static boolean testNode(Node node, NodeTest test) {\n-    return testNode(node, test, false);\n+    if (test \u003d\u003d null) {\n+        return true;\n+    } else if (test instanceof NodeNameTest) {\n+        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n+            return false;\n+        }\n+        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n+        QName testName \u003d nodeNameTest.getNodeName();\n+        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n+        boolean wildcard \u003d nodeNameTest.isWildcard();\n+        String testPrefix \u003d testName.getPrefix();\n+        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n+            return true;\n+        }\n+        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n+            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n+            return equalStrings(namespaceURI, nodeNS);\n+        }\n+    } else if (test instanceof NodeTypeTest) {\n+        int nodeType \u003d node.getNodeType();\n+        switch(((NodeTypeTest) test).getNodeType()) {\n+            case Compiler.NODE_TYPE_NODE:\n+                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n+            case Compiler.NODE_TYPE_TEXT:\n+                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n+            case Compiler.NODE_TYPE_COMMENT:\n+                return nodeType \u003d\u003d Node.COMMENT_NODE;\n+            case Compiler.NODE_TYPE_PI:\n+                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n+        }\n+        return false;\n+    } else if (test instanceof ProcessingInstructionTest) {\n+        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n+            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n+            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n+            return testPI.equals(nodePI);\n+        }\n+    }\n+    return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39b19d33418245cf67dd1ce97d472b65b14e8d3d": {
      "type": "Ybodychange",
      "commitMessage": "Fixes for bug 32360. Please follow discussions at:\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id\u003d32360\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/29/05, 12:02 PM",
      "commitName": "39b19d33418245cf67dd1ce97d472b65b14e8d3d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/26/05, 5:07 AM",
      "commitNameOld": "ecb571fc93e4a7bed9545a295c177d1ab4b1f4bf",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 245.25,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(Node node, NodeTest test) {\n    return testNode(node, test, false);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 86,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,3 @@\n public static boolean testNode(Node node, NodeTest test) {\n-    if (test \u003d\u003d null) {\n-        return true;\n-    } else if (test instanceof NodeNameTest) {\n-        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n-            return false;\n-        }\n-        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n-        QName testName \u003d nodeNameTest.getNodeName();\n-        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n-        boolean wildcard \u003d nodeNameTest.isWildcard();\n-        String testPrefix \u003d testName.getPrefix();\n-        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n-            return true;\n-        }\n-        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n-            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n-            return equalStrings(namespaceURI, nodeNS);\n-        }\n-    } else if (test instanceof NodeTypeTest) {\n-        int nodeType \u003d node.getNodeType();\n-        switch(((NodeTypeTest) test).getNodeType()) {\n-            case Compiler.NODE_TYPE_NODE:\n-                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n-            case Compiler.NODE_TYPE_TEXT:\n-                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n-            case Compiler.NODE_TYPE_COMMENT:\n-                return nodeType \u003d\u003d Node.COMMENT_NODE;\n-            case Compiler.NODE_TYPE_PI:\n-                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n-        }\n-        return false;\n-    } else if (test instanceof ProcessingInstructionTest) {\n-        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n-            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n-            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n-            return testPI.equals(nodePI);\n-        }\n-    }\n-    return false;\n+    return testNode(node, test, false);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Introduced prefix registration with JXPathContext\nFixed a number or problems with namespace matching\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/31/04, 6:55 PM",
      "commitName": "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Introduced prefix registration with JXPathContext\nFixed a number or problems with namespace matching\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136904 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/31/04, 6:55 PM",
          "commitName": "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "3/24/04, 9:41 PM",
          "commitNameOld": "d52ff3460273690514d70e716be1ff3201dca8c8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 6.88,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean testNode(Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n        QName testName \u003d nodeNameTest.getNodeName();\n        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n        boolean wildcard \u003d nodeNameTest.isWildcard();\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n            return equalStrings(namespaceURI, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
          "functionStartLine": 82,
          "functionName": "testNode",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,41 @@\n-public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n+public static boolean testNode(Node node, NodeTest test) {\n     if (test \u003d\u003d null) {\n         return true;\n     } else if (test instanceof NodeNameTest) {\n         if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n             return false;\n         }\n         NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n         QName testName \u003d nodeNameTest.getNodeName();\n+        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n         boolean wildcard \u003d nodeNameTest.isWildcard();\n         String testPrefix \u003d testName.getPrefix();\n         if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n             return true;\n         }\n         if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n-            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n-            if (equalStrings(testPrefix, nodePrefix)) {\n-                return true;\n-            }\n-            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n-            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n-            return equalStrings(testNS, nodeNS);\n+            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n+            return equalStrings(namespaceURI, nodeNS);\n         }\n     } else if (test instanceof NodeTypeTest) {\n         int nodeType \u003d node.getNodeType();\n         switch(((NodeTypeTest) test).getNodeType()) {\n             case Compiler.NODE_TYPE_NODE:\n                 return nodeType \u003d\u003d Node.ELEMENT_NODE;\n             case Compiler.NODE_TYPE_TEXT:\n                 return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n             case Compiler.NODE_TYPE_COMMENT:\n                 return nodeType \u003d\u003d Node.COMMENT_NODE;\n             case Compiler.NODE_TYPE_PI:\n                 return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n         }\n         return false;\n     } else if (test instanceof ProcessingInstructionTest) {\n         if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n             String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n             String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n             return testPI.equals(nodePI);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pointer-NodePointer, node-Node, test-NodeTest]",
            "newValue": "[node-Node, test-NodeTest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Introduced prefix registration with JXPathContext\nFixed a number or problems with namespace matching\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136904 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/31/04, 6:55 PM",
          "commitName": "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "3/24/04, 9:41 PM",
          "commitNameOld": "d52ff3460273690514d70e716be1ff3201dca8c8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 6.88,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public static boolean testNode(Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n        QName testName \u003d nodeNameTest.getNodeName();\n        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n        boolean wildcard \u003d nodeNameTest.isWildcard();\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n            return equalStrings(namespaceURI, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
          "functionStartLine": 82,
          "functionName": "testNode",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,45 +1,41 @@\n-public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n+public static boolean testNode(Node node, NodeTest test) {\n     if (test \u003d\u003d null) {\n         return true;\n     } else if (test instanceof NodeNameTest) {\n         if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n             return false;\n         }\n         NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n         QName testName \u003d nodeNameTest.getNodeName();\n+        String namespaceURI \u003d nodeNameTest.getNamespaceURI();\n         boolean wildcard \u003d nodeNameTest.isWildcard();\n         String testPrefix \u003d testName.getPrefix();\n         if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n             return true;\n         }\n         if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n-            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n-            if (equalStrings(testPrefix, nodePrefix)) {\n-                return true;\n-            }\n-            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n-            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n-            return equalStrings(testNS, nodeNS);\n+            String nodeNS \u003d DOMNodePointer.getNamespaceURI(node);\n+            return equalStrings(namespaceURI, nodeNS);\n         }\n     } else if (test instanceof NodeTypeTest) {\n         int nodeType \u003d node.getNodeType();\n         switch(((NodeTypeTest) test).getNodeType()) {\n             case Compiler.NODE_TYPE_NODE:\n                 return nodeType \u003d\u003d Node.ELEMENT_NODE;\n             case Compiler.NODE_TYPE_TEXT:\n                 return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n             case Compiler.NODE_TYPE_COMMENT:\n                 return nodeType \u003d\u003d Node.COMMENT_NODE;\n             case Compiler.NODE_TYPE_PI:\n                 return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n         }\n         return false;\n     } else if (test instanceof ProcessingInstructionTest) {\n         if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n             String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n             String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n             return testPI.equals(nodePI);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d52ff3460273690514d70e716be1ff3201dca8c8": {
      "type": "Ybodychange",
      "commitMessage": "Introduced NodeNameTest.isWildcard()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136901 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/24/04, 9:41 PM",
      "commitName": "d52ff3460273690514d70e716be1ff3201dca8c8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/29/04, 6:17 AM",
      "commitNameOld": "4fc265a938e1e9d13c407d4668ec8c864e85d799",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 24.64,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n        QName testName \u003d nodeNameTest.getNodeName();\n        boolean wildcard \u003d nodeNameTest.isWildcard();\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n            if (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n            return equalStrings(testNS, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 82,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,45 @@\n public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n     if (test \u003d\u003d null) {\n         return true;\n     } else if (test instanceof NodeNameTest) {\n         if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n             return false;\n         }\n-        QName testName \u003d ((NodeNameTest) test).getNodeName();\n-        String testLocalName \u003d testName.getName();\n-        boolean wildcard \u003d testLocalName.equals(\"*\");\n+        NodeNameTest nodeNameTest \u003d (NodeNameTest) test;\n+        QName testName \u003d nodeNameTest.getNodeName();\n+        boolean wildcard \u003d nodeNameTest.isWildcard();\n         String testPrefix \u003d testName.getPrefix();\n         if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n             return true;\n         }\n-        if (wildcard || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n+        if (wildcard || testName.getName().equals(DOMNodePointer.getLocalName(node))) {\n             String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n             if (equalStrings(testPrefix, nodePrefix)) {\n                 return true;\n             }\n             String testNS \u003d pointer.getNamespaceURI(testPrefix);\n             String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n             return equalStrings(testNS, nodeNS);\n         }\n     } else if (test instanceof NodeTypeTest) {\n         int nodeType \u003d node.getNodeType();\n         switch(((NodeTypeTest) test).getNodeType()) {\n             case Compiler.NODE_TYPE_NODE:\n                 return nodeType \u003d\u003d Node.ELEMENT_NODE;\n             case Compiler.NODE_TYPE_TEXT:\n                 return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n             case Compiler.NODE_TYPE_COMMENT:\n                 return nodeType \u003d\u003d Node.COMMENT_NODE;\n             case Compiler.NODE_TYPE_PI:\n                 return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n         }\n         return false;\n     } else if (test instanceof ProcessingInstructionTest) {\n         if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n             String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n             String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n             return testPI.equals(nodePI);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Ybodychange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/28/02, 10:44 PM",
      "commitNameOld": "a723ec0c1ab4b6d29b1b00868fe281a227b09551",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 42.96,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        QName testName \u003d ((NodeNameTest) test).getNodeName();\n        String testLocalName \u003d testName.getName();\n        boolean wildcard \u003d testLocalName.equals(\"*\");\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n            if (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n            return equalStrings(testNS, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 128,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "a723ec0c1ab4b6d29b1b00868fe281a227b09551": {
      "type": "Ybodychange",
      "commitMessage": "Fixed the implementation of the \"*\" name test\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136830 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/28/02, 10:44 PM",
      "commitName": "a723ec0c1ab4b6d29b1b00868fe281a227b09551",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:33 PM",
      "commitNameOld": "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        QName testName \u003d ((NodeNameTest) test).getNodeName();\n        String testLocalName \u003d testName.getName();\n        boolean wildcard \u003d testLocalName.equals(\"*\");\n        String testPrefix \u003d testName.getPrefix();\n        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n            return true;\n        }\n        if (wildcard || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n            if (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n            return equalStrings(testNS, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 128,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,45 @@\n public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n     if (test \u003d\u003d null) {\n         return true;\n     } else if (test instanceof NodeNameTest) {\n         if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n             return false;\n         }\n         QName testName \u003d ((NodeNameTest) test).getNodeName();\n         String testLocalName \u003d testName.getName();\n-        if (testLocalName.equals(\"*\") || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n-            String testPrefix \u003d testName.getPrefix();\n+        boolean wildcard \u003d testLocalName.equals(\"*\");\n+        String testPrefix \u003d testName.getPrefix();\n+        if (wildcard \u0026\u0026 testPrefix \u003d\u003d null) {\n+            return true;\n+        }\n+        if (wildcard || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n             String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n             if (equalStrings(testPrefix, nodePrefix)) {\n                 return true;\n             }\n             String testNS \u003d pointer.getNamespaceURI(testPrefix);\n             String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n             return equalStrings(testNS, nodeNS);\n         }\n     } else if (test instanceof NodeTypeTest) {\n         int nodeType \u003d node.getNodeType();\n         switch(((NodeTypeTest) test).getNodeType()) {\n             case Compiler.NODE_TYPE_NODE:\n                 return nodeType \u003d\u003d Node.ELEMENT_NODE;\n             case Compiler.NODE_TYPE_TEXT:\n                 return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n             case Compiler.NODE_TYPE_COMMENT:\n                 return nodeType \u003d\u003d Node.COMMENT_NODE;\n             case Compiler.NODE_TYPE_PI:\n                 return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n         }\n         return false;\n     } else if (test instanceof ProcessingInstructionTest) {\n         if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n             String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n             String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n             return testPI.equals(nodePI);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "594ff3b180fd1ac7addb40e2c32a15e4567eed3c": {
      "type": "Yformatchange",
      "commitMessage": "Replaced tabs with spaces\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:33 PM",
      "commitName": "594ff3b180fd1ac7addb40e2c32a15e4567eed3c",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/25/02, 5:20 PM",
      "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        QName testName \u003d ((NodeNameTest) test).getNodeName();\n        String testLocalName \u003d testName.getName();\n        if (testLocalName.equals(\"*\") || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n            String testPrefix \u003d testName.getPrefix();\n            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n            if (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n            return equalStrings(testNS, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 128,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e199848bb242b4eff258f41ea06bb1e4a1cea9b2": {
      "type": "Yformatchange",
      "commitMessage": "Updated the setValue method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/19/02, 8:44 PM",
      "commitName": "e199848bb242b4eff258f41ea06bb1e4a1cea9b2",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 7:59 PM",
      "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        QName testName \u003d ((NodeNameTest) test).getNodeName();\n        String testLocalName \u003d testName.getName();\n        if (testLocalName.equals(\"*\") || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n            String testPrefix \u003d testName.getPrefix();\n            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n            if (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n            return equalStrings(testNS, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 128,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Yfilerename",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/11/02, 7:28 PM",
      "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        QName testName \u003d ((NodeNameTest) test).getNodeName();\n        String testLocalName \u003d testName.getName();\n        if (testLocalName.equals(\"*\") || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n            String testPrefix \u003d testName.getPrefix();\n            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n            if (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n            return equalStrings(testNS, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
      "functionStartLine": 105,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java",
        "newPath": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java"
      }
    },
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": {
      "type": "Yintroduced",
      "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/21/01, 4:22 PM",
      "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,41 @@\n+public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n+    if (test \u003d\u003d null) {\n+        return true;\n+    } else if (test instanceof NodeNameTest) {\n+        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n+            return false;\n+        }\n+        QName testName \u003d ((NodeNameTest) test).getNodeName();\n+        String testLocalName \u003d testName.getName();\n+        if (testLocalName.equals(\"*\") || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n+            String testPrefix \u003d testName.getPrefix();\n+            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n+            if (equalStrings(testPrefix, nodePrefix)) {\n+                return true;\n+            }\n+            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n+            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n+            return equalStrings(testNS, nodeNS);\n+        }\n+    } else if (test instanceof NodeTypeTest) {\n+        int nodeType \u003d node.getNodeType();\n+        switch(((NodeTypeTest) test).getNodeType()) {\n+            case Compiler.NODE_TYPE_NODE:\n+                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n+            case Compiler.NODE_TYPE_TEXT:\n+                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n+            case Compiler.NODE_TYPE_COMMENT:\n+                return nodeType \u003d\u003d Node.COMMENT_NODE;\n+            case Compiler.NODE_TYPE_PI:\n+                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n+        }\n+        return false;\n+    } else if (test instanceof ProcessingInstructionTest) {\n+        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n+            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n+            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n+            return testPI.equals(nodePI);\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static boolean testNode(NodePointer pointer, Node node, NodeTest test) {\n    if (test \u003d\u003d null) {\n        return true;\n    } else if (test instanceof NodeNameTest) {\n        if (node.getNodeType() !\u003d Node.ELEMENT_NODE) {\n            return false;\n        }\n        QName testName \u003d ((NodeNameTest) test).getNodeName();\n        String testLocalName \u003d testName.getName();\n        if (testLocalName.equals(\"*\") || testLocalName.equals(DOMNodePointer.getLocalName(node))) {\n            String testPrefix \u003d testName.getPrefix();\n            String nodePrefix \u003d DOMNodePointer.getPrefix(node);\n            if (equalStrings(testPrefix, nodePrefix)) {\n                return true;\n            }\n            String testNS \u003d pointer.getNamespaceURI(testPrefix);\n            String nodeNS \u003d pointer.getNamespaceURI(nodePrefix);\n            return equalStrings(testNS, nodeNS);\n        }\n    } else if (test instanceof NodeTypeTest) {\n        int nodeType \u003d node.getNodeType();\n        switch(((NodeTypeTest) test).getNodeType()) {\n            case Compiler.NODE_TYPE_NODE:\n                return nodeType \u003d\u003d Node.ELEMENT_NODE;\n            case Compiler.NODE_TYPE_TEXT:\n                return nodeType \u003d\u003d Node.CDATA_SECTION_NODE || nodeType \u003d\u003d Node.TEXT_NODE;\n            case Compiler.NODE_TYPE_COMMENT:\n                return nodeType \u003d\u003d Node.COMMENT_NODE;\n            case Compiler.NODE_TYPE_PI:\n                return nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE;\n        }\n        return false;\n    } else if (test instanceof ProcessingInstructionTest) {\n        if (node.getNodeType() \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String testPI \u003d ((ProcessingInstructionTest) test).getTarget();\n            String nodePI \u003d ((ProcessingInstruction) node).getTarget();\n            return testPI.equals(nodePI);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/pointers/DOMNodePointer.java",
      "functionStartLine": 101,
      "functionName": "testNode",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}