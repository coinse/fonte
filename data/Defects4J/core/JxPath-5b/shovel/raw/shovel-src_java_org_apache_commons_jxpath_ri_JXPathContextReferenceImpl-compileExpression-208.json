{
  "origin": "codeshovel",
  "repositoryName": "JxPath-5b",
  "repositoryPath": "/tmp/JxPath-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JXPathContextReferenceImpl.java",
  "functionName": "compileExpression",
  "functionId": "compileExpression___xpath-String",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 208,
  "functionEndLine": 250,
  "numCommitsSeen": 67,
  "timeTaken": 1574,
  "changeHistory": [
    "885fb67a4ecf7c64696d679762b8a28489ead61f",
    "77af585d9f0e629db4ecf8d468ef7b71c9d98e39",
    "7d07031398b3e9e0062d597d0ace291a58b59bfe",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "323e8b214459b3977973c01a048a979dc778f100",
    "aa27fa0ec5fab4247136a2233b6c4b0be0087962",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "885fb67a4ecf7c64696d679762b8a28489ead61f": "Ybodychange",
    "77af585d9f0e629db4ecf8d468ef7b71c9d98e39": "Ybodychange",
    "7d07031398b3e9e0062d597d0ace291a58b59bfe": "Ymultichange(Ymodifierchange,Ybodychange)",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Ybodychange",
    "323e8b214459b3977973c01a048a979dc778f100": "Ybodychange",
    "aa27fa0ec5fab4247136a2233b6c4b0be0087962": "Ymultichange(Yrename,Ybodychange)",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "885fb67a4ecf7c64696d679762b8a28489ead61f": {
      "type": "Ybodychange",
      "commitMessage": "Addressed cache synchronization issue\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136873 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/23/03, 6:52 PM",
      "commitName": "885fb67a4ecf7c64696d679762b8a28489ead61f",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/4/03, 4:51 PM",
      "commitNameOld": "9d0a382341c4adc5d207b0d795d27367a4098ad3",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 111.08,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private Expression compileExpression(String xpath) {\n    Expression expr;\n    synchronized (compiled) {\n        if (USE_SOFT_CACHE) {\n            expr \u003d null;\n            SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n            if (ref !\u003d null) {\n                expr \u003d (Expression) ref.get();\n            }\n        } else {\n            expr \u003d (Expression) compiled.get(xpath);\n        }\n    }\n    if (expr !\u003d null) {\n        return expr;\n    }\n    expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n    synchronized (compiled) {\n        if (USE_SOFT_CACHE) {\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                Iterator it \u003d compiled.entrySet().iterator();\n                while (it.hasNext()) {\n                    Entry me \u003d (Entry) it.next();\n                    if (((SoftReference) me.getValue()).get() \u003d\u003d null) {\n                        it.remove();\n                    }\n                }\n                cleanupCount \u003d 0;\n            }\n            compiled.put(xpath, new SoftReference(expr));\n        } else {\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
      "functionStartLine": 240,
      "functionName": "compileExpression",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,36 @@\n private Expression compileExpression(String xpath) {\n     Expression expr;\n-    if (USE_SOFT_CACHE) {\n-        expr \u003d null;\n-        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n-        if (ref !\u003d null) {\n-            expr \u003d (Expression) ref.get();\n-        }\n-        if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n-            synchronized (compiled) {\n-                compiled.put(xpath, new SoftReference(expr));\n+    synchronized (compiled) {\n+        if (USE_SOFT_CACHE) {\n+            expr \u003d null;\n+            SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n+            if (ref !\u003d null) {\n+                expr \u003d (Expression) ref.get();\n             }\n+        } else {\n+            expr \u003d (Expression) compiled.get(xpath);\n+        }\n+    }\n+    if (expr !\u003d null) {\n+        return expr;\n+    }\n+    expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n+    synchronized (compiled) {\n+        if (USE_SOFT_CACHE) {\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n-                cleanupCache();\n+                Iterator it \u003d compiled.entrySet().iterator();\n+                while (it.hasNext()) {\n+                    Entry me \u003d (Entry) it.next();\n+                    if (((SoftReference) me.getValue()).get() \u003d\u003d null) {\n+                        it.remove();\n+                    }\n+                }\n+                cleanupCount \u003d 0;\n             }\n-        }\n-    } else {\n-        expr \u003d (Expression) compiled.get(xpath);\n-        if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n+            compiled.put(xpath, new SoftReference(expr));\n+        } else {\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "77af585d9f0e629db4ecf8d468ef7b71c9d98e39": {
      "type": "Ybodychange",
      "commitMessage": "Fixed collection as return value of extension function\nReduced the amount of cloning\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/24/03, 6:41 PM",
      "commitName": "77af585d9f0e629db4ecf8d468ef7b71c9d98e39",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/10/03, 4:59 PM",
      "commitNameOld": "bdf423f27a76d2006ffe1058d6530eebf619c877",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 14.07,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Expression compileExpression(String xpath) {\n    Expression expr;\n    if (USE_SOFT_CACHE) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n            synchronized (compiled) {\n                compiled.put(xpath, new SoftReference(expr));\n            }\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
      "functionStartLine": 239,
      "functionName": "compileExpression",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,26 @@\n private Expression compileExpression(String xpath) {\n     Expression expr;\n     if (USE_SOFT_CACHE) {\n         expr \u003d null;\n         SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n         if (ref !\u003d null) {\n             expr \u003d (Expression) ref.get();\n         }\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n-            compiled.put(xpath, new SoftReference(expr));\n+            synchronized (compiled) {\n+                compiled.put(xpath, new SoftReference(expr));\n+            }\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                 cleanupCache();\n             }\n         }\n     } else {\n         expr \u003d (Expression) compiled.get(xpath);\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7d07031398b3e9e0062d597d0ace291a58b59bfe": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Added support for relative contexts\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/18/03, 4:59 PM",
      "commitName": "7d07031398b3e9e0062d597d0ace291a58b59bfe",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Added support for relative contexts\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136852 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/18/03, 4:59 PM",
          "commitName": "7d07031398b3e9e0062d597d0ace291a58b59bfe",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "2/18/03, 10:11 AM",
          "commitNameOld": "71886475c020639aa58be577ab5dc019333ae408",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Expression compileExpression(String xpath) {\n    Expression expr;\n    if (USE_SOFT_CACHE) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n            compiled.put(xpath, new SoftReference(expr));\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
          "functionStartLine": 239,
          "functionName": "compileExpression",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,24 +1,24 @@\n-private static Expression compileExpression(String xpath) {\n+private Expression compileExpression(String xpath) {\n     Expression expr;\n     if (USE_SOFT_CACHE) {\n         expr \u003d null;\n         SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n         if (ref !\u003d null) {\n             expr \u003d (Expression) ref.get();\n         }\n         if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n+            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n             compiled.put(xpath, new SoftReference(expr));\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                 cleanupCache();\n             }\n         }\n     } else {\n         expr \u003d (Expression) compiled.get(xpath);\n         if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n+            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added support for relative contexts\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136852 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/18/03, 4:59 PM",
          "commitName": "7d07031398b3e9e0062d597d0ace291a58b59bfe",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "2/18/03, 10:11 AM",
          "commitNameOld": "71886475c020639aa58be577ab5dc019333ae408",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Expression compileExpression(String xpath) {\n    Expression expr;\n    if (USE_SOFT_CACHE) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n            compiled.put(xpath, new SoftReference(expr));\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
          "functionStartLine": 239,
          "functionName": "compileExpression",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,24 +1,24 @@\n-private static Expression compileExpression(String xpath) {\n+private Expression compileExpression(String xpath) {\n     Expression expr;\n     if (USE_SOFT_CACHE) {\n         expr \u003d null;\n         SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n         if (ref !\u003d null) {\n             expr \u003d (Expression) ref.get();\n         }\n         if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n+            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n             compiled.put(xpath, new SoftReference(expr));\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                 cleanupCache();\n             }\n         }\n     } else {\n         expr \u003d (Expression) compiled.get(xpath);\n         if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n+            expr \u003d (Expression) Parser.parseExpression(xpath, getCompiler());\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Ybodychange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/27/02, 5:02 PM",
      "commitNameOld": "3f4b9289b916bb1e9e4653021473cefdc9ab0aa2",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 44.19,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Expression compileExpression(String xpath) {\n    Expression expr;\n    if (USE_SOFT_CACHE) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n            compiled.put(xpath, new SoftReference(expr));\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
      "functionStartLine": 194,
      "functionName": "compileExpression",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,24 +1,24 @@\n private static Expression compileExpression(String xpath) {\n     Expression expr;\n-    if (useSoftCache) {\n+    if (USE_SOFT_CACHE) {\n         expr \u003d null;\n         SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n         if (ref !\u003d null) {\n             expr \u003d (Expression) ref.get();\n         }\n         if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n+            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n             compiled.put(xpath, new SoftReference(expr));\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                 cleanupCache();\n             }\n         }\n     } else {\n         expr \u003d (Expression) compiled.get(xpath);\n         if (expr \u003d\u003d null) {\n-            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n+            expr \u003d (Expression) Parser.parseExpression(xpath, COMPILER);\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/27/02, 9:37 PM",
      "commitNameOld": "aa27fa0ec5fab4247136a2233b6c4b0be0087962",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.84,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Expression compileExpression(String xpath) {\n    Expression expr;\n    if (useSoftCache) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            compiled.put(xpath, new SoftReference(expr));\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
      "functionStartLine": 154,
      "functionName": "compileExpression",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,24 @@\n private static Expression compileExpression(String xpath) {\n     Expression expr;\n     if (useSoftCache) {\n         expr \u003d null;\n         SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n         if (ref !\u003d null) {\n             expr \u003d (Expression) ref.get();\n         }\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n-            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n             compiled.put(xpath, new SoftReference(expr));\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                 cleanupCache();\n             }\n         }\n     } else {\n         expr \u003d (Expression) compiled.get(xpath);\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n-            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aa27fa0ec5fab4247136a2233b6c4b0be0087962": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Added CompiledExpressions\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/27/02, 9:37 PM",
      "commitName": "aa27fa0ec5fab4247136a2233b6c4b0be0087962",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Added CompiledExpressions\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136735 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:37 PM",
          "commitName": "aa27fa0ec5fab4247136a2233b6c4b0be0087962",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 8:28 PM",
          "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Expression compileExpression(String xpath) {\n    Expression expr;\n    if (useSoftCache) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n            compiled.put(xpath, new SoftReference(expr));\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
          "functionStartLine": 154,
          "functionName": "compileExpression",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,26 +1,26 @@\n-private static Expression compile(String xpath) {\n+private static Expression compileExpression(String xpath) {\n     Expression expr;\n     if (useSoftCache) {\n         expr \u003d null;\n         SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n         if (ref !\u003d null) {\n             expr \u003d (Expression) ref.get();\n         }\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n             expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n             compiled.put(xpath, new SoftReference(expr));\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                 cleanupCache();\n             }\n         }\n     } else {\n         expr \u003d (Expression) compiled.get(xpath);\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n             expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "compile",
            "newValue": "compileExpression"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added CompiledExpressions\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136735 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:37 PM",
          "commitName": "aa27fa0ec5fab4247136a2233b6c4b0be0087962",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 8:28 PM",
          "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Expression compileExpression(String xpath) {\n    Expression expr;\n    if (useSoftCache) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n            compiled.put(xpath, new SoftReference(expr));\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
          "functionStartLine": 154,
          "functionName": "compileExpression",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,26 +1,26 @@\n-private static Expression compile(String xpath) {\n+private static Expression compileExpression(String xpath) {\n     Expression expr;\n     if (useSoftCache) {\n         expr \u003d null;\n         SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n         if (ref !\u003d null) {\n             expr \u003d (Expression) ref.get();\n         }\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n             expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n             compiled.put(xpath, new SoftReference(expr));\n             if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                 cleanupCache();\n             }\n         }\n     } else {\n         expr \u003d (Expression) compiled.get(xpath);\n         if (expr \u003d\u003d null) {\n             expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n             expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n             compiled.put(xpath, expr);\n         }\n     }\n     return expr;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,26 @@\n+private static Expression compile(String xpath) {\n+    Expression expr;\n+    if (useSoftCache) {\n+        expr \u003d null;\n+        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n+        if (ref !\u003d null) {\n+            expr \u003d (Expression) ref.get();\n+        }\n+        if (expr \u003d\u003d null) {\n+            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n+            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n+            compiled.put(xpath, new SoftReference(expr));\n+            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n+                cleanupCache();\n+            }\n+        }\n+    } else {\n+        expr \u003d (Expression) compiled.get(xpath);\n+        if (expr \u003d\u003d null) {\n+            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n+            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n+            compiled.put(xpath, expr);\n+        }\n+    }\n+    return expr;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static Expression compile(String xpath) {\n    Expression expr;\n    if (useSoftCache) {\n        expr \u003d null;\n        SoftReference ref \u003d (SoftReference) compiled.get(xpath);\n        if (ref !\u003d null) {\n            expr \u003d (Expression) ref.get();\n        }\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n            compiled.put(xpath, new SoftReference(expr));\n            if (cleanupCount++ \u003e\u003d CLEANUP_THRESHOLD) {\n                cleanupCache();\n            }\n        }\n    } else {\n        expr \u003d (Expression) compiled.get(xpath);\n        if (expr \u003d\u003d null) {\n            expr \u003d (Expression) Parser.parseExpression(xpath, compiler);\n            expr.setEvaluationMode(Expression.EVALUATION_MODE_ONCE);\n            compiled.put(xpath, expr);\n        }\n    }\n    return expr;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/JXPathContextReferenceImpl.java",
      "functionStartLine": 99,
      "functionName": "compile",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}