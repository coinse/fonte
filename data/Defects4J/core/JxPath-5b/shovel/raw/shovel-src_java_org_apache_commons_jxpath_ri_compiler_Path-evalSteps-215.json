{
  "origin": "codeshovel",
  "repositoryName": "JxPath-5b",
  "repositoryPath": "/tmp/JxPath-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Path.java",
  "functionName": "evalSteps",
  "functionId": "evalSteps___context-EvalContext",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
  "functionAnnotation": "",
  "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
  "functionStartLine": 215,
  "functionEndLine": 217,
  "numCommitsSeen": 51,
  "timeTaken": 2273,
  "changeHistory": [
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "323e8b214459b3977973c01a048a979dc778f100",
    "112774edae824e6e07ed9d64f637b4b7c19cea3b",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
    "989fbe2e44ad4e994dc810fa54290636a7339712",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "34b7a47ae949c763178a457582a5df2cb564f53d",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "323e8b214459b3977973c01a048a979dc778f100": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "112774edae824e6e07ed9d64f637b4b7c19cea3b": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": "Ybodychange",
    "989fbe2e44ad4e994dc810fa54290636a7339712": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Ybodychange",
    "34b7a47ae949c763178a457582a5df2cb564f53d": "Ymultichange(Yparameterchange,Ybodychange)",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": "Ybodychange",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": {
      "type": "Ybodychange",
      "commitMessage": "Fixed an issue with searches in graphs containing DynamicPropertyHandlers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136888 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/04, 5:10 PM",
      "commitName": "26ed002f4905b94a6a4275f9ad263cb8a2cadf00",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/9/03, 2:31 PM",
      "commitNameOld": "ecf573e1f80cd86060a2fcd23181cde3f67c9fdd",
      "commitAuthorOld": "Robert Burrell Donkin",
      "daysBetweenCommits": 105.15,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext evalSteps(EvalContext context) {\n    return buildContextChain(context, steps.length, false);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 263,
      "functionName": "evalSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
      "diff": "@@ -1,15 +1,3 @@\n protected EvalContext evalSteps(EvalContext context) {\n-    if (steps.length \u003d\u003d 0) {\n-        return context;\n-    }\n-    for (int i \u003d 0; i \u003c steps.length; i++) {\n-        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n-        Expression[] predicates \u003d steps[i].getPredicates();\n-        if (predicates !\u003d null) {\n-            for (int j \u003d 0; j \u003c predicates.length; j++) {\n-                context \u003d new PredicateContext(context, predicates[j]);\n-            }\n-        }\n-    }\n-    return context;\n+    return buildContextChain(context, steps.length, false);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 7:59 PM",
      "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 90.11,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext evalSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 219,
      "functionName": "evalSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected EvalContext evalSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 183,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,16 +1,15 @@\n-private EvalContext evalSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected EvalContext evalSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
            "newPath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
            "oldMethodName": "evalSteps",
            "newMethodName": "evalSteps"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected EvalContext evalSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 183,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,16 +1,15 @@\n-private EvalContext evalSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected EvalContext evalSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected EvalContext evalSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 183,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,16 +1,15 @@\n-private EvalContext evalSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected EvalContext evalSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected EvalContext evalSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 183,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,16 +1,15 @@\n-private EvalContext evalSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected EvalContext evalSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, path-Path]",
            "newValue": "[context-EvalContext]"
          }
        }
      ]
    },
    "112774edae824e6e07ed9d64f637b4b7c19cea3b": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange,Ydocchange)",
      "commitMessage": "Now implements Iterator\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/27/02, 9:36 PM",
      "commitName": "112774edae824e6e07ed9d64f637b4b7c19cea3b",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Now implements Iterator\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136734 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:36 PM",
          "commitName": "112774edae824e6e07ed9d64f637b4b7c19cea3b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 8:28 PM",
          "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private EvalContext evalSteps(EvalContext context, Path path) {\n    Step[] steps \u003d path.getSteps();\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 936,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,25 +1,16 @@\n-private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n+private EvalContext evalSteps(EvalContext context, Path path) {\n     Step[] steps \u003d path.getSteps();\n-    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n-        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n-        if (basic) {\n-            NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-            return SimplePathInterpreter.interpretPath(this, ptr, steps);\n-        }\n+    if (steps.length \u003d\u003d 0) {\n+        return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n-    if (firstMatch) {\n-        Pointer ptr \u003d context.getSingleNodePointer();\n-        return ptr;\n-    } else {\n-        return context;\n-    }\n+    return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, path-Path, firstMatch-boolean]",
            "newValue": "[context-EvalContext, path-Path]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Now implements Iterator\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136734 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:36 PM",
          "commitName": "112774edae824e6e07ed9d64f637b4b7c19cea3b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 8:28 PM",
          "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private EvalContext evalSteps(EvalContext context, Path path) {\n    Step[] steps \u003d path.getSteps();\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 936,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,25 +1,16 @@\n-private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n+private EvalContext evalSteps(EvalContext context, Path path) {\n     Step[] steps \u003d path.getSteps();\n-    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n-        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n-        if (basic) {\n-            NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-            return SimplePathInterpreter.interpretPath(this, ptr, steps);\n-        }\n+    if (steps.length \u003d\u003d 0) {\n+        return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n-    if (firstMatch) {\n-        Pointer ptr \u003d context.getSingleNodePointer();\n-        return ptr;\n-    } else {\n-        return context;\n-    }\n+    return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Object",
            "newValue": "EvalContext"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Now implements Iterator\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136734 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:36 PM",
          "commitName": "112774edae824e6e07ed9d64f637b4b7c19cea3b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 8:28 PM",
          "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private EvalContext evalSteps(EvalContext context, Path path) {\n    Step[] steps \u003d path.getSteps();\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 936,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,25 +1,16 @@\n-private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n+private EvalContext evalSteps(EvalContext context, Path path) {\n     Step[] steps \u003d path.getSteps();\n-    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n-        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n-        if (basic) {\n-            NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-            return SimplePathInterpreter.interpretPath(this, ptr, steps);\n-        }\n+    if (steps.length \u003d\u003d 0) {\n+        return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n-    if (firstMatch) {\n-        Pointer ptr \u003d context.getSingleNodePointer();\n-        return ptr;\n-    } else {\n-        return context;\n-    }\n+    return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Now implements Iterator\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136734 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/27/02, 9:36 PM",
          "commitName": "112774edae824e6e07ed9d64f637b4b7c19cea3b",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "4/25/02, 8:28 PM",
          "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private EvalContext evalSteps(EvalContext context, Path path) {\n    Step[] steps \u003d path.getSteps();\n    if (steps.length \u003d\u003d 0) {\n        return context;\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    return context;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 936,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n",
          "diff": "@@ -1,25 +1,16 @@\n-private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n+private EvalContext evalSteps(EvalContext context, Path path) {\n     Step[] steps \u003d path.getSteps();\n-    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n-        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n-        if (basic) {\n-            NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-            return SimplePathInterpreter.interpretPath(this, ptr, steps);\n-        }\n+    if (steps.length \u003d\u003d 0) {\n+        return context;\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n-    if (firstMatch) {\n-        Pointer ptr \u003d context.getSingleNodePointer();\n-        return ptr;\n-    } else {\n-        return context;\n-    }\n+    return context;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Given a root context, walks a path therefrom\n",
            "newValue": "Given a root context, walks a path therefrom and builds a context\nthat contains all nodes matching the path.\n"
          }
        }
      ]
    },
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": {
      "type": "Ybodychange",
      "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 6:00 PM",
      "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/23/02, 9:06 PM",
      "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n    Step[] steps \u003d path.getSteps();\n    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n        if (basic) {\n            NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n            return SimplePathInterpreter.interpretPath(this, ptr, steps);\n        }\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    if (firstMatch) {\n        Pointer ptr \u003d context.getSingleNodePointer();\n        return ptr;\n    } else {\n        return context;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 814,
      "functionName": "evalSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom\n",
      "diff": "@@ -1,25 +1,25 @@\n private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n     Step[] steps \u003d path.getSteps();\n     if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n         boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n         if (basic) {\n             NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-            return interpretBasicPath(ptr, steps);\n+            return SimplePathInterpreter.interpretPath(this, ptr, steps);\n         }\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     if (firstMatch) {\n         Pointer ptr \u003d context.getSingleNodePointer();\n         return ptr;\n     } else {\n         return context;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "989fbe2e44ad4e994dc810fa54290636a7339712": {
      "type": "Ybodychange",
      "commitMessage": "Simplified ExpressionContext implementation\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/02, 8:32 PM",
      "commitName": "989fbe2e44ad4e994dc810fa54290636a7339712",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/21/02, 2:52 PM",
      "commitNameOld": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n    Step[] steps \u003d path.getSteps();\n    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n        if (basic) {\n            NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n            return interpretBasicPath(ptr, steps);\n        }\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    if (firstMatch) {\n        Pointer ptr \u003d context.getSingleNodePointer();\n        return ptr;\n    } else {\n        return context;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 982,
      "functionName": "evalSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom\n",
      "diff": "@@ -1,25 +1,25 @@\n private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n     Step[] steps \u003d path.getSteps();\n     if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n         boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n         if (basic) {\n-            NodePointer ptr \u003d (NodePointer) context.getContextNodePointer();\n+            NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n             return interpretBasicPath(ptr, steps);\n         }\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     if (firstMatch) {\n-        Pointer ptr \u003d context.getContextNodePointer();\n+        Pointer ptr \u003d context.getSingleNodePointer();\n         return ptr;\n     } else {\n         return context;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Ybodychange",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/11/02, 7:28 PM",
      "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n    Step[] steps \u003d path.getSteps();\n    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n        if (basic) {\n            NodePointer ptr \u003d (NodePointer) context.getContextNodePointer();\n            return interpretBasicPath(ptr, steps);\n        }\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    if (firstMatch) {\n        Pointer ptr \u003d context.getContextNodePointer();\n        return ptr;\n    } else {\n        return context;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 1009,
      "functionName": "evalSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom\n",
      "diff": "@@ -1,29 +1,25 @@\n private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n     Step[] steps \u003d path.getSteps();\n     if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n         boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n         if (basic) {\n-            EvalContext ctx \u003d new InitialContext(context);\n-            NodePointer ptr \u003d (NodePointer) ctx.getContextNodePointer();\n-            Object result \u003d tryBasicPath(ptr, steps);\n-            if (result !\u003d FAILURE) {\n-                return result;\n-            }\n+            NodePointer ptr \u003d (NodePointer) context.getContextNodePointer();\n+            return interpretBasicPath(ptr, steps);\n         }\n     }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     if (firstMatch) {\n         Pointer ptr \u003d context.getContextNodePointer();\n         return ptr;\n     } else {\n         return context;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34b7a47ae949c763178a457582a5df2cb564f53d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Multiple changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/9/02, 8:40 PM",
      "commitName": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Multiple changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136712 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/9/02, 8:40 PM",
          "commitName": "34b7a47ae949c763178a457582a5df2cb564f53d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "9/26/01, 4:37 PM",
          "commitNameOld": "d0a64d141367867db5b745734f5c7330644b71ca",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 195.17,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n    Step[] steps \u003d path.getSteps();\n    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n        if (basic) {\n            EvalContext ctx \u003d new InitialContext(context);\n            NodePointer ptr \u003d (NodePointer) ctx.getContextNodePointer();\n            Object result \u003d tryBasicPath(ptr, steps);\n            if (result !\u003d FAILURE) {\n                return result;\n            }\n        }\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    if (firstMatch) {\n        Pointer ptr \u003d context.getContextNodePointer();\n        return ptr;\n    } else {\n        return context;\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 947,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom\n",
          "diff": "@@ -1,17 +1,29 @@\n-private Object evalSteps(EvalContext context, Step[] steps, boolean firstMatch) {\n+private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n+    Step[] steps \u003d path.getSteps();\n+    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n+        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n+        if (basic) {\n+            EvalContext ctx \u003d new InitialContext(context);\n+            NodePointer ptr \u003d (NodePointer) ctx.getContextNodePointer();\n+            Object result \u003d tryBasicPath(ptr, steps);\n+            if (result !\u003d FAILURE) {\n+                return result;\n+            }\n+        }\n+    }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     if (firstMatch) {\n         Pointer ptr \u003d context.getContextNodePointer();\n         return ptr;\n     } else {\n         return context;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, steps-Step[], firstMatch-boolean]",
            "newValue": "[context-EvalContext, path-Path, firstMatch-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Multiple changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136712 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "4/9/02, 8:40 PM",
          "commitName": "34b7a47ae949c763178a457582a5df2cb564f53d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "9/26/01, 4:37 PM",
          "commitNameOld": "d0a64d141367867db5b745734f5c7330644b71ca",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 195.17,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n    Step[] steps \u003d path.getSteps();\n    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n        if (basic) {\n            EvalContext ctx \u003d new InitialContext(context);\n            NodePointer ptr \u003d (NodePointer) ctx.getContextNodePointer();\n            Object result \u003d tryBasicPath(ptr, steps);\n            if (result !\u003d FAILURE) {\n                return result;\n            }\n        }\n    }\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    if (firstMatch) {\n        Pointer ptr \u003d context.getContextNodePointer();\n        return ptr;\n    } else {\n        return context;\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 947,
          "functionName": "evalSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom\n",
          "diff": "@@ -1,17 +1,29 @@\n-private Object evalSteps(EvalContext context, Step[] steps, boolean firstMatch) {\n+private Object evalSteps(EvalContext context, Path path, boolean firstMatch) {\n+    Step[] steps \u003d path.getSteps();\n+    if (firstMatch \u0026\u0026 steps.length !\u003d 0) {\n+        boolean basic \u003d path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE);\n+        if (basic) {\n+            EvalContext ctx \u003d new InitialContext(context);\n+            NodePointer ptr \u003d (NodePointer) ctx.getContextNodePointer();\n+            Object result \u003d tryBasicPath(ptr, steps);\n+            if (result !\u003d FAILURE) {\n+                return result;\n+            }\n+        }\n+    }\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n         context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     if (firstMatch) {\n         Pointer ptr \u003d context.getContextNodePointer();\n         return ptr;\n     } else {\n         return context;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": {
      "type": "Ybodychange",
      "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/21/01, 4:22 PM",
      "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "9/2/01, 6:22 PM",
      "commitNameOld": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 18.92,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Object evalSteps(EvalContext context, Step[] steps, boolean firstMatch) {\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    if (firstMatch) {\n        Pointer ptr \u003d context.getContextNodePointer();\n        return ptr;\n    } else {\n        return context;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 839,
      "functionName": "evalSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom\n",
      "diff": "@@ -1,16 +1,17 @@\n private Object evalSteps(EvalContext context, Step[] steps, boolean firstMatch) {\n     for (int i \u003d 0; i \u003c steps.length; i++) {\n-        context \u003d createContextForStep(context, steps[i]);\n+        context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n         Expression[] predicates \u003d steps[i].getPredicates();\n         if (predicates !\u003d null) {\n             for (int j \u003d 0; j \u003c predicates.length; j++) {\n                 context \u003d new PredicateContext(context, predicates[j]);\n             }\n         }\n     }\n     if (firstMatch) {\n-        return context.getContextNodePointer();\n+        Pointer ptr \u003d context.getContextNodePointer();\n+        return ptr;\n     } else {\n         return context;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,16 @@\n+private Object evalSteps(EvalContext context, Step[] steps, boolean firstMatch) {\n+    for (int i \u003d 0; i \u003c steps.length; i++) {\n+        context \u003d createContextForStep(context, steps[i]);\n+        Expression[] predicates \u003d steps[i].getPredicates();\n+        if (predicates !\u003d null) {\n+            for (int j \u003d 0; j \u003c predicates.length; j++) {\n+                context \u003d new PredicateContext(context, predicates[j]);\n+            }\n+        }\n+    }\n+    if (firstMatch) {\n+        return context.getContextNodePointer();\n+    } else {\n+        return context;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Object evalSteps(EvalContext context, Step[] steps, boolean firstMatch) {\n    for (int i \u003d 0; i \u003c steps.length; i++) {\n        context \u003d createContextForStep(context, steps[i]);\n        Expression[] predicates \u003d steps[i].getPredicates();\n        if (predicates !\u003d null) {\n            for (int j \u003d 0; j \u003c predicates.length; j++) {\n                context \u003d new PredicateContext(context, predicates[j]);\n            }\n        }\n    }\n    if (firstMatch) {\n        return context.getContextNodePointer();\n    } else {\n        return context;\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 768,
      "functionName": "evalSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom\n"
    }
  }
}