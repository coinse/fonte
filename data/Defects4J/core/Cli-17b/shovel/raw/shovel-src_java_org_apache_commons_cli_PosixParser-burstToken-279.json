{
  "origin": "codeshovel",
  "repositoryName": "Cli-17b",
  "repositoryPath": "/tmp/Cli-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PosixParser.java",
  "functionName": "burstToken",
  "functionId": "burstToken___token-String__stopAtNonOption-boolean",
  "sourceFilePath": "src/java/org/apache/commons/cli/PosixParser.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\n@param stopAtNonOption Specifies whether to stop processing\nat the first non-Option encountered.\n",
  "functionStartLine": 279,
  "functionEndLine": 310,
  "numCommitsSeen": 28,
  "timeTaken": 591,
  "changeHistory": [
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "745d1a535c9cf45d24455afc150b808981c8e0df",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78"
  ],
  "changeHistoryShort": {
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "745d1a535c9cf45d24455afc150b808981c8e0df": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf": {
      "type": "Ybodychange",
      "commitMessage": "Applying test and fix patch from CLI-51. Thanks to Brian Egge. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@540661 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/22/07, 10:47 AM",
      "commitName": "2ff9573ffb08dd52ec3a55a49f2d77a1e94efbdf",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2/26/05, 4:53 AM",
      "commitNameOld": "e543edc2a488729baea94cc554631cec3fb62b74",
      "commitAuthorOld": "Dirk Verbeeck",
      "daysBetweenCommits": 815.2,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            process(token.substring(i));\n        } else {\n            tokens.add(token);\n            break;\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 278,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\n@param stopAtNonOption Specifies whether to stop processing\nat the first non-Option encountered.\n",
      "diff": "@@ -1,19 +1,20 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\n     int tokenLength \u003d token.length();\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\n         String ch \u003d String.valueOf(token.charAt(i));\n         boolean hasOption \u003d options.hasOption(ch);\n         if (hasOption) {\n             tokens.add(\"-\" + ch);\n             currentOption \u003d options.getOption(ch);\n             if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\n                 tokens.add(token.substring(i + 1));\n                 break;\n             }\n         } else if (stopAtNonOption) {\n             process(token.substring(i));\n         } else {\n-            tokens.add(\"-\" + ch);\n+            tokens.add(token);\n+            break;\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/19/02, 3:59 PM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            process(token.substring(i));\n        } else {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 321,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\n@param stopAtNonOption Specifies whether to stop processing\nat the first non-Option encountered.\n",
          "diff": "@@ -1,19 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\n     int tokenLength \u003d token.length();\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\n         String ch \u003d String.valueOf(token.charAt(i));\n         boolean hasOption \u003d options.hasOption(ch);\n         if (hasOption) {\n             tokens.add(\"-\" + ch);\n             currentOption \u003d options.getOption(ch);\n-            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n+            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\n                 tokens.add(token.substring(i + 1));\n                 break;\n             }\n         } else if (stopAtNonOption) {\n             process(token.substring(i));\n         } else {\n             tokens.add(\"-\" + ch);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "9/19/02, 3:59 PM",
          "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 81.03,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            process(token.substring(i));\n        } else {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 321,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\n@param stopAtNonOption Specifies whether to stop processing\nat the first non-Option encountered.\n",
          "diff": "@@ -1,19 +1,19 @@\n protected void burstToken(String token, boolean stopAtNonOption) {\n     int tokenLength \u003d token.length();\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\n         String ch \u003d String.valueOf(token.charAt(i));\n         boolean hasOption \u003d options.hasOption(ch);\n         if (hasOption) {\n             tokens.add(\"-\" + ch);\n             currentOption \u003d options.getOption(ch);\n-            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n+            if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\n                 tokens.add(token.substring(i + 1));\n                 break;\n             }\n         } else if (stopAtNonOption) {\n             process(token.substring(i));\n         } else {\n             tokens.add(\"-\" + ch);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n",
            "newValue": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n@param token The current token to be \u003cb\u003eburst\u003c/b\u003e\n@param stopAtNonOption Specifies whether to stop processing\nat the first non-Option encountered.\n"
          }
        }
      ]
    },
    "745d1a535c9cf45d24455afc150b808981c8e0df": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/26/02, 1:15 PM",
      "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02, 1:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/24/02, 3:15 PM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            process(token.substring(i));\n        } else {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\n+protected void burstToken(String token, boolean stopAtNonOption) {\n     int tokenLength \u003d token.length();\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\n         String ch \u003d String.valueOf(token.charAt(i));\n         boolean hasOption \u003d options.hasOption(ch);\n         if (hasOption) {\n             tokens.add(\"-\" + ch);\n             currentOption \u003d options.getOption(ch);\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                 tokens.add(token.substring(i + 1));\n                 break;\n             }\n-        } else if (stop) {\n+        } else if (stopAtNonOption) {\n             process(token.substring(i));\n         } else {\n             tokens.add(\"-\" + ch);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[token-String, stop-boolean]",
            "newValue": "[token-String, stopAtNonOption-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02, 1:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/24/02, 3:15 PM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            process(token.substring(i));\n        } else {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\n+protected void burstToken(String token, boolean stopAtNonOption) {\n     int tokenLength \u003d token.length();\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\n         String ch \u003d String.valueOf(token.charAt(i));\n         boolean hasOption \u003d options.hasOption(ch);\n         if (hasOption) {\n             tokens.add(\"-\" + ch);\n             currentOption \u003d options.getOption(ch);\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                 tokens.add(token.substring(i + 1));\n                 break;\n             }\n-        } else if (stop) {\n+        } else if (stopAtNonOption) {\n             process(token.substring(i));\n         } else {\n             tokens.add(\"-\" + ch);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02, 1:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/24/02, 3:15 PM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            process(token.substring(i));\n        } else {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\n+protected void burstToken(String token, boolean stopAtNonOption) {\n     int tokenLength \u003d token.length();\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\n         String ch \u003d String.valueOf(token.charAt(i));\n         boolean hasOption \u003d options.hasOption(ch);\n         if (hasOption) {\n             tokens.add(\"-\" + ch);\n             currentOption \u003d options.getOption(ch);\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                 tokens.add(token.substring(i + 1));\n                 break;\n             }\n-        } else if (stop) {\n+        } else if (stopAtNonOption) {\n             process(token.substring(i));\n         } else {\n             tokens.add(\"-\" + ch);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "javadoc updates\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129805 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/26/02, 1:15 PM",
          "commitName": "745d1a535c9cf45d24455afc150b808981c8e0df",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/24/02, 3:15 PM",
          "commitNameOld": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 1.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void burstToken(String token, boolean stopAtNonOption) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stopAtNonOption) {\n            process(token.substring(i));\n        } else {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 284,
          "functionName": "burstToken",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n",
          "diff": "@@ -1,19 +1,19 @@\n-private void burstToken(String token, boolean stop) {\n+protected void burstToken(String token, boolean stopAtNonOption) {\n     int tokenLength \u003d token.length();\n     for (int i \u003d 1; i \u003c tokenLength; i++) {\n         String ch \u003d String.valueOf(token.charAt(i));\n         boolean hasOption \u003d options.hasOption(ch);\n         if (hasOption) {\n             tokens.add(\"-\" + ch);\n             currentOption \u003d options.getOption(ch);\n             if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                 tokens.add(token.substring(i + 1));\n                 break;\n             }\n-        } else if (stop) {\n+        } else if (stopAtNonOption) {\n             process(token.substring(i));\n         } else {\n             tokens.add(\"-\" + ch);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts\nusing the following algorithm.\n\u003cul\u003e\n \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\" )\u003c/li\u003e\n \u003cli\u003eforeach remaining character check if an {@link Option}\n exists with that id.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does exist then add that character\n prepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif the {@link Option} can have an argument value and there \n are remaining characters in the token then add the remaining \n characters as a token to the list of processed tokens.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token\n \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also \n the remaining tokens directly to the processed tokens list.\u003c/li\u003e\n \u003cli\u003eif an {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\n \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that\n character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n"
          }
        }
      ]
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Yintroduced",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/24/02, 3:15 PM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,19 @@\n+private void burstToken(String token, boolean stop) {\n+    int tokenLength \u003d token.length();\n+    for (int i \u003d 1; i \u003c tokenLength; i++) {\n+        String ch \u003d String.valueOf(token.charAt(i));\n+        boolean hasOption \u003d options.hasOption(ch);\n+        if (hasOption) {\n+            tokens.add(\"-\" + ch);\n+            currentOption \u003d options.getOption(ch);\n+            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n+                tokens.add(token.substring(i + 1));\n+                break;\n+            }\n+        } else if (stop) {\n+            process(token.substring(i));\n+        } else {\n+            tokens.add(\"-\" + ch);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void burstToken(String token, boolean stop) {\n    int tokenLength \u003d token.length();\n    for (int i \u003d 1; i \u003c tokenLength; i++) {\n        String ch \u003d String.valueOf(token.charAt(i));\n        boolean hasOption \u003d options.hasOption(ch);\n        if (hasOption) {\n            tokens.add(\"-\" + ch);\n            currentOption \u003d options.getOption(ch);\n            if (currentOption.hasArg() \u0026\u0026 token.length() !\u003d i + 1) {\n                tokens.add(token.substring(i + 1));\n                break;\n            }\n        } else if (stop) {\n            process(token.substring(i));\n        } else {\n            tokens.add(\"-\" + ch);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 114,
      "functionName": "burstToken",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}