{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeUtils.java",
  "functionName": "canConvert",
  "functionId": "canConvert___object-Object__toType-Class",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/util/TypeUtils.java",
  "functionAnnotation": "",
  "functionDoc": "Returns true if the global converter can convert the supplied\nobject to the specified type.\n",
  "functionStartLine": 60,
  "functionEndLine": 62,
  "numCommitsSeen": 18,
  "timeTaken": 842,
  "changeHistory": [
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
    "73f1fffe48c5f26e2c29280385bf0e8f2b9627ac",
    "c6d36b46057b4d441556e6275bcd7d13d242fa02",
    "0f6e852a0bce6f051383f3003f41f99bcd816b31",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "34b7a47ae949c763178a457582a5df2cb564f53d",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268": "Ydocchange",
    "73f1fffe48c5f26e2c29280385bf0e8f2b9627ac": "Ybodychange",
    "c6d36b46057b4d441556e6275bcd7d13d242fa02": "Ybodychange",
    "0f6e852a0bce6f051383f3003f41f99bcd816b31": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Yfilerename",
    "34b7a47ae949c763178a457582a5df2cb564f53d": "Ybodychange",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab914f400352a3a525ba0a5d189eb2e4e1ade268": {
      "type": "Ydocchange",
      "commitMessage": "Documentation clean-up and removal of deprecated methods\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/15/02, 8:22 PM",
      "commitName": "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "6/12/02, 2:02 PM",
      "commitNameOld": "73f1fffe48c5f26e2c29280385bf0e8f2b9627ac",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 3.26,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean canConvert(Object object, Class toType) {\n    return typeConverter.canConvert(object, toType);\n}",
      "path": "src/java/org/apache/commons/jxpath/util/TypeUtils.java",
      "functionStartLine": 98,
      "functionName": "canConvert",
      "functionAnnotation": "",
      "functionDoc": "Returns true if the global converter can convert the supplied\nobject to the specified type.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "Returns true if the global converter can convert the supplied\nobject to the specified type.\n"
      }
    },
    "73f1fffe48c5f26e2c29280385bf0e8f2b9627ac": {
      "type": "Ybodychange",
      "commitMessage": "Made type converter configurable\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136766 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/12/02, 2:02 PM",
      "commitName": "73f1fffe48c5f26e2c29280385bf0e8f2b9627ac",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/8/02, 4:03 PM",
      "commitNameOld": "8a8545ddd784bca69bd9d1277663915b957e0232",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 34.92,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean canConvert(Object object, Class toType) {\n    return typeConverter.canConvert(object, toType);\n}",
      "path": "src/java/org/apache/commons/jxpath/util/TypeUtils.java",
      "functionStartLine": 115,
      "functionName": "canConvert",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,88 +1,3 @@\n public static boolean canConvert(Object object, Class toType) {\n-    if (object \u003d\u003d null) {\n-        return true;\n-    }\n-    if (toType \u003d\u003d Object.class) {\n-        return true;\n-    }\n-    Class fromType \u003d object.getClass();\n-    if (fromType.equals(toType)) {\n-        return true;\n-    }\n-    if (toType.isAssignableFrom(fromType)) {\n-        return true;\n-    }\n-    if (toType \u003d\u003d String.class) {\n-        return true;\n-    }\n-    if (object instanceof Boolean) {\n-        if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n-            return true;\n-        }\n-    } else if (object instanceof Number) {\n-        if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n-            return true;\n-        }\n-    } else if (object instanceof Character) {\n-        if (toType \u003d\u003d char.class) {\n-            return true;\n-        }\n-    } else if (object instanceof String) {\n-        if (toType.isPrimitive()) {\n-            return true;\n-        }\n-        if (toType \u003d\u003d Boolean.class || toType \u003d\u003d Character.class || toType \u003d\u003d Byte.class || toType \u003d\u003d Short.class || toType \u003d\u003d Integer.class || toType \u003d\u003d Long.class || toType \u003d\u003d Float.class || toType \u003d\u003d Double.class) {\n-            return true;\n-        }\n-    } else if (object instanceof ExpressionContext) {\n-        if (Collection.class.isAssignableFrom(toType)) {\n-            return true;\n-        }\n-        Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n-        if (pointer !\u003d null) {\n-            Object value \u003d pointer.getValue();\n-            return canConvert(value, toType);\n-        }\n-    } else if (fromType.isArray()) {\n-        if (toType.isArray()) {\n-            Class cType \u003d toType.getComponentType();\n-            int length \u003d Array.getLength(object);\n-            for (int i \u003d 0; i \u003c length; i++) {\n-                Object value \u003d Array.get(object, i);\n-                if (!canConvert(value, cType)) {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        } else if (Collection.class.isAssignableFrom(toType)) {\n-            return canCreateCollection(toType);\n-        } else if (Array.getLength(object) \u003d\u003d 1) {\n-            Object value \u003d Array.get(object, 0);\n-            return canConvert(value, toType);\n-        }\n-    } else if (object instanceof Collection) {\n-        if (toType.isArray()) {\n-            Class cType \u003d toType.getComponentType();\n-            Iterator it \u003d ((Collection) object).iterator();\n-            while (it.hasNext()) {\n-                Object value \u003d it.next();\n-                if (!canConvert(value, cType)) {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        } else if (Collection.class.isAssignableFrom(toType)) {\n-            return canCreateCollection(toType);\n-        } else if (((Collection) object).size() \u003d\u003d 1) {\n-            Object value;\n-            if (object instanceof List) {\n-                value \u003d ((List) object).get(0);\n-            } else {\n-                Iterator it \u003d ((Collection) object).iterator();\n-                value \u003d it.next();\n-            }\n-            return canConvert(value, toType);\n-        }\n-    }\n-    return false;\n+    return typeConverter.canConvert(object, toType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c6d36b46057b4d441556e6275bcd7d13d242fa02": {
      "type": "Ybodychange",
      "commitMessage": "New conversion: arrays, collections\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136742 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:39 PM",
      "commitName": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/25/02, 8:28 PM",
      "commitNameOld": "34d1c6cad33a94c24e55d456b550302db4914130",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 11.88,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean canConvert(Object object, Class toType) {\n    if (object \u003d\u003d null) {\n        return true;\n    }\n    if (toType \u003d\u003d Object.class) {\n        return true;\n    }\n    Class fromType \u003d object.getClass();\n    if (fromType.equals(toType)) {\n        return true;\n    }\n    if (toType.isAssignableFrom(fromType)) {\n        return true;\n    }\n    if (toType \u003d\u003d String.class) {\n        return true;\n    }\n    if (object instanceof Boolean) {\n        if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Number) {\n        if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Character) {\n        if (toType \u003d\u003d char.class) {\n            return true;\n        }\n    } else if (object instanceof String) {\n        if (toType.isPrimitive()) {\n            return true;\n        }\n        if (toType \u003d\u003d Boolean.class || toType \u003d\u003d Character.class || toType \u003d\u003d Byte.class || toType \u003d\u003d Short.class || toType \u003d\u003d Integer.class || toType \u003d\u003d Long.class || toType \u003d\u003d Float.class || toType \u003d\u003d Double.class) {\n            return true;\n        }\n    } else if (object instanceof ExpressionContext) {\n        if (Collection.class.isAssignableFrom(toType)) {\n            return true;\n        }\n        Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n        if (pointer !\u003d null) {\n            Object value \u003d pointer.getValue();\n            return canConvert(value, toType);\n        }\n    } else if (fromType.isArray()) {\n        if (toType.isArray()) {\n            Class cType \u003d toType.getComponentType();\n            int length \u003d Array.getLength(object);\n            for (int i \u003d 0; i \u003c length; i++) {\n                Object value \u003d Array.get(object, i);\n                if (!canConvert(value, cType)) {\n                    return false;\n                }\n            }\n            return true;\n        } else if (Collection.class.isAssignableFrom(toType)) {\n            return canCreateCollection(toType);\n        } else if (Array.getLength(object) \u003d\u003d 1) {\n            Object value \u003d Array.get(object, 0);\n            return canConvert(value, toType);\n        }\n    } else if (object instanceof Collection) {\n        if (toType.isArray()) {\n            Class cType \u003d toType.getComponentType();\n            Iterator it \u003d ((Collection) object).iterator();\n            while (it.hasNext()) {\n                Object value \u003d it.next();\n                if (!canConvert(value, cType)) {\n                    return false;\n                }\n            }\n            return true;\n        } else if (Collection.class.isAssignableFrom(toType)) {\n            return canCreateCollection(toType);\n        } else if (((Collection) object).size() \u003d\u003d 1) {\n            Object value;\n            if (object instanceof List) {\n                value \u003d ((List) object).get(0);\n            } else {\n                Iterator it \u003d ((Collection) object).iterator();\n                value \u003d it.next();\n            }\n            return canConvert(value, toType);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/TypeUtils.java",
      "functionStartLine": 301,
      "functionName": "canConvert",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,64 +1,88 @@\n public static boolean canConvert(Object object, Class toType) {\n     if (object \u003d\u003d null) {\n         return true;\n     }\n     if (toType \u003d\u003d Object.class) {\n         return true;\n     }\n     Class fromType \u003d object.getClass();\n     if (fromType.equals(toType)) {\n         return true;\n     }\n     if (toType.isAssignableFrom(fromType)) {\n         return true;\n     }\n     if (toType \u003d\u003d String.class) {\n         return true;\n     }\n     if (object instanceof Boolean) {\n         if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n             return true;\n         }\n     } else if (object instanceof Number) {\n         if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n             return true;\n         }\n     } else if (object instanceof Character) {\n         if (toType \u003d\u003d char.class) {\n             return true;\n         }\n     } else if (object instanceof String) {\n         if (toType.isPrimitive()) {\n             return true;\n         }\n         if (toType \u003d\u003d Boolean.class || toType \u003d\u003d Character.class || toType \u003d\u003d Byte.class || toType \u003d\u003d Short.class || toType \u003d\u003d Integer.class || toType \u003d\u003d Long.class || toType \u003d\u003d Float.class || toType \u003d\u003d Double.class) {\n             return true;\n         }\n     } else if (object instanceof ExpressionContext) {\n         if (Collection.class.isAssignableFrom(toType)) {\n             return true;\n         }\n         Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n         if (pointer !\u003d null) {\n             Object value \u003d pointer.getValue();\n             return canConvert(value, toType);\n         }\n     } else if (fromType.isArray()) {\n-        if (Array.getLength(object) \u003d\u003d 1) {\n+        if (toType.isArray()) {\n+            Class cType \u003d toType.getComponentType();\n+            int length \u003d Array.getLength(object);\n+            for (int i \u003d 0; i \u003c length; i++) {\n+                Object value \u003d Array.get(object, i);\n+                if (!canConvert(value, cType)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        } else if (Collection.class.isAssignableFrom(toType)) {\n+            return canCreateCollection(toType);\n+        } else if (Array.getLength(object) \u003d\u003d 1) {\n             Object value \u003d Array.get(object, 0);\n             return canConvert(value, toType);\n         }\n-    } else if (object instanceof List) {\n-        if (((List) object).size() \u003d\u003d 1) {\n-            Object value \u003d ((List) object).get(0);\n-            return canConvert(value, toType);\n-        }\n     } else if (object instanceof Collection) {\n-        if (!((Collection) object).isEmpty()) {\n+        if (toType.isArray()) {\n+            Class cType \u003d toType.getComponentType();\n             Iterator it \u003d ((Collection) object).iterator();\n-            Object value \u003d it.next();\n+            while (it.hasNext()) {\n+                Object value \u003d it.next();\n+                if (!canConvert(value, cType)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        } else if (Collection.class.isAssignableFrom(toType)) {\n+            return canCreateCollection(toType);\n+        } else if (((Collection) object).size() \u003d\u003d 1) {\n+            Object value;\n+            if (object instanceof List) {\n+                value \u003d ((List) object).get(0);\n+            } else {\n+                Iterator it \u003d ((Collection) object).iterator();\n+                value \u003d it.next();\n+            }\n             return canConvert(value, toType);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0f6e852a0bce6f051383f3003f41f99bcd816b31": {
      "type": "Ybodychange",
      "commitMessage": "Fixed String-\u003ePrimary conversion\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 5:57 PM",
      "commitName": "0f6e852a0bce6f051383f3003f41f99bcd816b31",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/23/02, 9:06 PM",
      "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean canConvert(Object object, Class toType) {\n    if (object \u003d\u003d null) {\n        return true;\n    }\n    if (toType \u003d\u003d Object.class) {\n        return true;\n    }\n    Class fromType \u003d object.getClass();\n    if (fromType.equals(toType)) {\n        return true;\n    }\n    if (toType.isAssignableFrom(fromType)) {\n        return true;\n    }\n    if (toType \u003d\u003d String.class) {\n        return true;\n    }\n    if (object instanceof Boolean) {\n        if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Number) {\n        if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Character) {\n        if (toType \u003d\u003d char.class) {\n            return true;\n        }\n    } else if (object instanceof String) {\n        if (toType.isPrimitive()) {\n            return true;\n        }\n        if (toType \u003d\u003d Boolean.class || toType \u003d\u003d Character.class || toType \u003d\u003d Byte.class || toType \u003d\u003d Short.class || toType \u003d\u003d Integer.class || toType \u003d\u003d Long.class || toType \u003d\u003d Float.class || toType \u003d\u003d Double.class) {\n            return true;\n        }\n    } else if (object instanceof ExpressionContext) {\n        if (Collection.class.isAssignableFrom(toType)) {\n            return true;\n        }\n        Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n        if (pointer !\u003d null) {\n            Object value \u003d pointer.getValue();\n            return canConvert(value, toType);\n        }\n    } else if (fromType.isArray()) {\n        if (Array.getLength(object) \u003d\u003d 1) {\n            Object value \u003d Array.get(object, 0);\n            return canConvert(value, toType);\n        }\n    } else if (object instanceof List) {\n        if (((List) object).size() \u003d\u003d 1) {\n            Object value \u003d ((List) object).get(0);\n            return canConvert(value, toType);\n        }\n    } else if (object instanceof Collection) {\n        if (!((Collection) object).isEmpty()) {\n            Iterator it \u003d ((Collection) object).iterator();\n            Object value \u003d it.next();\n            return canConvert(value, toType);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/TypeUtils.java",
      "functionStartLine": 300,
      "functionName": "canConvert",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,61 +1,64 @@\n public static boolean canConvert(Object object, Class toType) {\n     if (object \u003d\u003d null) {\n         return true;\n     }\n     if (toType \u003d\u003d Object.class) {\n         return true;\n     }\n     Class fromType \u003d object.getClass();\n     if (fromType.equals(toType)) {\n         return true;\n     }\n     if (toType.isAssignableFrom(fromType)) {\n         return true;\n     }\n     if (toType \u003d\u003d String.class) {\n         return true;\n     }\n     if (object instanceof Boolean) {\n         if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n             return true;\n         }\n     } else if (object instanceof Number) {\n         if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n             return true;\n         }\n     } else if (object instanceof Character) {\n         if (toType \u003d\u003d char.class) {\n             return true;\n         }\n     } else if (object instanceof String) {\n         if (toType.isPrimitive()) {\n             return true;\n         }\n+        if (toType \u003d\u003d Boolean.class || toType \u003d\u003d Character.class || toType \u003d\u003d Byte.class || toType \u003d\u003d Short.class || toType \u003d\u003d Integer.class || toType \u003d\u003d Long.class || toType \u003d\u003d Float.class || toType \u003d\u003d Double.class) {\n+            return true;\n+        }\n     } else if (object instanceof ExpressionContext) {\n         if (Collection.class.isAssignableFrom(toType)) {\n             return true;\n         }\n         Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n         if (pointer !\u003d null) {\n             Object value \u003d pointer.getValue();\n             return canConvert(value, toType);\n         }\n     } else if (fromType.isArray()) {\n         if (Array.getLength(object) \u003d\u003d 1) {\n             Object value \u003d Array.get(object, 0);\n             return canConvert(value, toType);\n         }\n     } else if (object instanceof List) {\n         if (((List) object).size() \u003d\u003d 1) {\n             Object value \u003d ((List) object).get(0);\n             return canConvert(value, toType);\n         }\n     } else if (object instanceof Collection) {\n         if (!((Collection) object).isEmpty()) {\n             Iterator it \u003d ((Collection) object).iterator();\n             Object value \u003d it.next();\n             return canConvert(value, toType);\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Yfilerename",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/11/02, 7:28 PM",
      "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean canConvert(Object object, Class toType) {\n    if (object \u003d\u003d null) {\n        return true;\n    }\n    if (toType \u003d\u003d Object.class) {\n        return true;\n    }\n    Class fromType \u003d object.getClass();\n    if (fromType.equals(toType)) {\n        return true;\n    }\n    if (toType.isAssignableFrom(fromType)) {\n        return true;\n    }\n    if (toType \u003d\u003d String.class) {\n        return true;\n    }\n    if (object instanceof Boolean) {\n        if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Number) {\n        if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Character) {\n        if (toType \u003d\u003d char.class) {\n            return true;\n        }\n    } else if (object instanceof String) {\n        if (toType.isPrimitive()) {\n            return true;\n        }\n    } else if (object instanceof ExpressionContext) {\n        if (Collection.class.isAssignableFrom(toType)) {\n            return true;\n        }\n        Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n        if (pointer !\u003d null) {\n            Object value \u003d pointer.getValue();\n            return canConvert(value, toType);\n        }\n    } else if (fromType.isArray()) {\n        if (Array.getLength(object) \u003d\u003d 1) {\n            Object value \u003d Array.get(object, 0);\n            return canConvert(value, toType);\n        }\n    } else if (object instanceof List) {\n        if (((List) object).size() \u003d\u003d 1) {\n            Object value \u003d ((List) object).get(0);\n            return canConvert(value, toType);\n        }\n    } else if (object instanceof Collection) {\n        if (!((Collection) object).isEmpty()) {\n            Iterator it \u003d ((Collection) object).iterator();\n            Object value \u003d it.next();\n            return canConvert(value, toType);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/util/TypeUtils.java",
      "functionStartLine": 298,
      "functionName": "canConvert",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/jxpath/functions/Types.java",
        "newPath": "src/java/org/apache/commons/jxpath/util/TypeUtils.java"
      }
    },
    "34b7a47ae949c763178a457582a5df2cb564f53d": {
      "type": "Ybodychange",
      "commitMessage": "Multiple changes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/9/02, 8:40 PM",
      "commitName": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/22/01, 5:47 PM",
      "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 230.12,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public static boolean canConvert(Object object, Class toType) {\n    if (object \u003d\u003d null) {\n        return true;\n    }\n    if (toType \u003d\u003d Object.class) {\n        return true;\n    }\n    Class fromType \u003d object.getClass();\n    if (fromType.equals(toType)) {\n        return true;\n    }\n    if (toType.isAssignableFrom(fromType)) {\n        return true;\n    }\n    if (toType \u003d\u003d String.class) {\n        return true;\n    }\n    if (object instanceof Boolean) {\n        if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Number) {\n        if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Character) {\n        if (toType \u003d\u003d char.class) {\n            return true;\n        }\n    } else if (object instanceof String) {\n        if (toType.isPrimitive()) {\n            return true;\n        }\n    } else if (object instanceof ExpressionContext) {\n        if (Collection.class.isAssignableFrom(toType)) {\n            return true;\n        }\n        Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n        if (pointer !\u003d null) {\n            Object value \u003d pointer.getValue();\n            return canConvert(value, toType);\n        }\n    } else if (fromType.isArray()) {\n        if (Array.getLength(object) \u003d\u003d 1) {\n            Object value \u003d Array.get(object, 0);\n            return canConvert(value, toType);\n        }\n    } else if (object instanceof List) {\n        if (((List) object).size() \u003d\u003d 1) {\n            Object value \u003d ((List) object).get(0);\n            return canConvert(value, toType);\n        }\n    } else if (object instanceof Collection) {\n        if (!((Collection) object).isEmpty()) {\n            Iterator it \u003d ((Collection) object).iterator();\n            Object value \u003d it.next();\n            return canConvert(value, toType);\n        }\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/functions/Types.java",
      "functionStartLine": 298,
      "functionName": "canConvert",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,61 @@\n public static boolean canConvert(Object object, Class toType) {\n+    if (object \u003d\u003d null) {\n+        return true;\n+    }\n+    if (toType \u003d\u003d Object.class) {\n+        return true;\n+    }\n     Class fromType \u003d object.getClass();\n     if (fromType.equals(toType)) {\n         return true;\n     }\n     if (toType.isAssignableFrom(fromType)) {\n         return true;\n     }\n     if (toType \u003d\u003d String.class) {\n         return true;\n     }\n     if (object instanceof Boolean) {\n         if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n             return true;\n         }\n     } else if (object instanceof Number) {\n         if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n             return true;\n         }\n     } else if (object instanceof Character) {\n         if (toType \u003d\u003d char.class) {\n             return true;\n         }\n     } else if (object instanceof String) {\n         if (toType.isPrimitive()) {\n             return true;\n         }\n     } else if (object instanceof ExpressionContext) {\n         if (Collection.class.isAssignableFrom(toType)) {\n             return true;\n         }\n-        Object value \u003d ((ExpressionContext) object).getContextNodePointer().getValue();\n-        return canConvert(value, toType);\n+        Pointer pointer \u003d ((ExpressionContext) object).getContextNodePointer();\n+        if (pointer !\u003d null) {\n+            Object value \u003d pointer.getValue();\n+            return canConvert(value, toType);\n+        }\n+    } else if (fromType.isArray()) {\n+        if (Array.getLength(object) \u003d\u003d 1) {\n+            Object value \u003d Array.get(object, 0);\n+            return canConvert(value, toType);\n+        }\n+    } else if (object instanceof List) {\n+        if (((List) object).size() \u003d\u003d 1) {\n+            Object value \u003d ((List) object).get(0);\n+            return canConvert(value, toType);\n+        }\n+    } else if (object instanceof Collection) {\n+        if (!((Collection) object).isEmpty()) {\n+            Iterator it \u003d ((Collection) object).iterator();\n+            Object value \u003d it.next();\n+            return canConvert(value, toType);\n+        }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,36 @@\n+public static boolean canConvert(Object object, Class toType) {\n+    Class fromType \u003d object.getClass();\n+    if (fromType.equals(toType)) {\n+        return true;\n+    }\n+    if (toType.isAssignableFrom(fromType)) {\n+        return true;\n+    }\n+    if (toType \u003d\u003d String.class) {\n+        return true;\n+    }\n+    if (object instanceof Boolean) {\n+        if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n+            return true;\n+        }\n+    } else if (object instanceof Number) {\n+        if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n+            return true;\n+        }\n+    } else if (object instanceof Character) {\n+        if (toType \u003d\u003d char.class) {\n+            return true;\n+        }\n+    } else if (object instanceof String) {\n+        if (toType.isPrimitive()) {\n+            return true;\n+        }\n+    } else if (object instanceof ExpressionContext) {\n+        if (Collection.class.isAssignableFrom(toType)) {\n+            return true;\n+        }\n+        Object value \u003d ((ExpressionContext) object).getContextNodePointer().getValue();\n+        return canConvert(value, toType);\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static boolean canConvert(Object object, Class toType) {\n    Class fromType \u003d object.getClass();\n    if (fromType.equals(toType)) {\n        return true;\n    }\n    if (toType.isAssignableFrom(fromType)) {\n        return true;\n    }\n    if (toType \u003d\u003d String.class) {\n        return true;\n    }\n    if (object instanceof Boolean) {\n        if (toType \u003d\u003d boolean.class || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Number) {\n        if (toType.isPrimitive() || Number.class.isAssignableFrom(toType)) {\n            return true;\n        }\n    } else if (object instanceof Character) {\n        if (toType \u003d\u003d char.class) {\n            return true;\n        }\n    } else if (object instanceof String) {\n        if (toType.isPrimitive()) {\n            return true;\n        }\n    } else if (object instanceof ExpressionContext) {\n        if (Collection.class.isAssignableFrom(toType)) {\n            return true;\n        }\n        Object value \u003d ((ExpressionContext) object).getContextNodePointer().getValue();\n        return canConvert(value, toType);\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/functions/Types.java",
      "functionStartLine": 293,
      "functionName": "canConvert",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}