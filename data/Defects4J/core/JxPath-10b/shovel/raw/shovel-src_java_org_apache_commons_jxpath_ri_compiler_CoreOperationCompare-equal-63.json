{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CoreOperationCompare.java",
  "functionName": "equal",
  "functionId": "equal___context-EvalContext__left-Expression__right-Expression",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
  "functionAnnotation": "",
  "functionDoc": "Compares two values\n",
  "functionStartLine": 63,
  "functionEndLine": 105,
  "numCommitsSeen": 9,
  "timeTaken": 643,
  "changeHistory": [
    "109121561fc17aca026824ffbb14a69ae590c8be",
    "9b6406bf37af48e843b02fa8fd53dc673f3cbd1e",
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "f3eb1977debfe1fd0704d78285e99243e6b7aa07"
  ],
  "changeHistoryShort": {
    "109121561fc17aca026824ffbb14a69ae590c8be": "Ybodychange",
    "9b6406bf37af48e843b02fa8fd53dc673f3cbd1e": "Ybodychange",
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "f3eb1977debfe1fd0704d78285e99243e6b7aa07": "Yintroduced"
  },
  "changeHistoryDetails": {
    "109121561fc17aca026824ffbb14a69ae590c8be": {
      "type": "Ybodychange",
      "commitMessage": "small refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@555098 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/10/07, 3:16 PM",
      "commitName": "109121561fc17aca026824ffbb14a69ae590c8be",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "7/10/07, 12:29 PM",
      "commitNameOld": "9b6406bf37af48e843b02fa8fd53dc673f3cbd1e",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean equal(EvalContext context, Expression left, Expression right) {\n    Object l \u003d left.compute(context);\n    Object r \u003d right.compute(context);\n    if (l instanceof InitialContext) {\n        ((EvalContext) l).reset();\n    }\n    if (l instanceof SelfContext) {\n        l \u003d ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext) {\n        ((EvalContext) r).reset();\n    }\n    if (r instanceof SelfContext) {\n        r \u003d ((EvalContext) r).getSingleNodePointer();\n    }\n    if (l instanceof Collection) {\n        l \u003d ((Collection) l).iterator();\n    }\n    if (r instanceof Collection) {\n        r \u003d ((Collection) r).iterator();\n    }\n    if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    if (l instanceof Iterator) {\n        return contains((Iterator) l, r);\n    }\n    if (r instanceof Iterator) {\n        return contains((Iterator) r, l);\n    }\n    return equal(l, r);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
      "functionStartLine": 45,
      "functionName": "equal",
      "functionAnnotation": "",
      "functionDoc": "Compares two values\n",
      "diff": "@@ -1,32 +1,32 @@\n protected boolean equal(EvalContext context, Expression left, Expression right) {\n     Object l \u003d left.compute(context);\n     Object r \u003d right.compute(context);\n     if (l instanceof InitialContext) {\n         ((EvalContext) l).reset();\n     }\n     if (l instanceof SelfContext) {\n         l \u003d ((EvalContext) l).getSingleNodePointer();\n     }\n     if (r instanceof InitialContext) {\n         ((EvalContext) r).reset();\n     }\n     if (r instanceof SelfContext) {\n         r \u003d ((EvalContext) r).getSingleNodePointer();\n     }\n     if (l instanceof Collection) {\n         l \u003d ((Collection) l).iterator();\n     }\n     if (r instanceof Collection) {\n         r \u003d ((Collection) r).iterator();\n     }\n-    if ((l instanceof Iterator) \u0026\u0026 !(r instanceof Iterator)) {\n-        return contains((Iterator) l, r);\n-    }\n-    if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n-        return contains((Iterator) r, l);\n-    }\n     if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n         return findMatch((Iterator) l, (Iterator) r);\n     }\n+    if (l instanceof Iterator) {\n+        return contains((Iterator) l, r);\n+    }\n+    if (r instanceof Iterator) {\n+        return contains((Iterator) r, l);\n+    }\n     return equal(l, r);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b6406bf37af48e843b02fa8fd53dc673f3cbd1e": {
      "type": "Ybodychange",
      "commitMessage": "[JXPATH-94] equality test for multi-valued variables does not conform to spec\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@555050 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/10/07, 12:29 PM",
      "commitName": "9b6406bf37af48e843b02fa8fd53dc673f3cbd1e",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/19/07, 3:24 PM",
      "commitNameOld": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 140.84,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean equal(EvalContext context, Expression left, Expression right) {\n    Object l \u003d left.compute(context);\n    Object r \u003d right.compute(context);\n    if (l instanceof InitialContext) {\n        ((EvalContext) l).reset();\n    }\n    if (l instanceof SelfContext) {\n        l \u003d ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext) {\n        ((EvalContext) r).reset();\n    }\n    if (r instanceof SelfContext) {\n        r \u003d ((EvalContext) r).getSingleNodePointer();\n    }\n    if (l instanceof Collection) {\n        l \u003d ((Collection) l).iterator();\n    }\n    if (r instanceof Collection) {\n        r \u003d ((Collection) r).iterator();\n    }\n    if ((l instanceof Iterator) \u0026\u0026 !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    return equal(l, r);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
      "functionStartLine": 45,
      "functionName": "equal",
      "functionAnnotation": "",
      "functionDoc": "Compares two values\n",
      "diff": "@@ -1,26 +1,32 @@\n protected boolean equal(EvalContext context, Expression left, Expression right) {\n     Object l \u003d left.compute(context);\n     Object r \u003d right.compute(context);\n-    if (l instanceof InitialContext || l instanceof SelfContext) {\n+    if (l instanceof InitialContext) {\n+        ((EvalContext) l).reset();\n+    }\n+    if (l instanceof SelfContext) {\n         l \u003d ((EvalContext) l).getSingleNodePointer();\n     }\n-    if (r instanceof InitialContext || r instanceof SelfContext) {\n+    if (r instanceof InitialContext) {\n+        ((EvalContext) r).reset();\n+    }\n+    if (r instanceof SelfContext) {\n         r \u003d ((EvalContext) r).getSingleNodePointer();\n     }\n     if (l instanceof Collection) {\n         l \u003d ((Collection) l).iterator();\n     }\n     if (r instanceof Collection) {\n         r \u003d ((Collection) r).iterator();\n     }\n     if ((l instanceof Iterator) \u0026\u0026 !(r instanceof Iterator)) {\n         return contains((Iterator) l, r);\n     }\n     if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n         return contains((Iterator) r, l);\n     }\n     if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n         return findMatch((Iterator) l, (Iterator) r);\n     }\n     return equal(l, r);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean equal(EvalContext context, Expression left, Expression right) {\n    Object l \u003d left.compute(context);\n    Object r \u003d right.compute(context);\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l \u003d ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r \u003d ((EvalContext) r).getSingleNodePointer();\n    }\n    if (l instanceof Collection) {\n        l \u003d ((Collection) l).iterator();\n    }\n    if (r instanceof Collection) {\n        r \u003d ((Collection) r).iterator();\n    }\n    if ((l instanceof Iterator) \u0026\u0026 !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    }\n    if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    }\n    if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    return equal(l, r);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
      "functionStartLine": 45,
      "functionName": "equal",
      "functionAnnotation": "",
      "functionDoc": "Compares two values\n",
      "diff": "@@ -1,24 +1,26 @@\n protected boolean equal(EvalContext context, Expression left, Expression right) {\n     Object l \u003d left.compute(context);\n     Object r \u003d right.compute(context);\n     if (l instanceof InitialContext || l instanceof SelfContext) {\n         l \u003d ((EvalContext) l).getSingleNodePointer();\n     }\n     if (r instanceof InitialContext || r instanceof SelfContext) {\n         r \u003d ((EvalContext) r).getSingleNodePointer();\n     }\n     if (l instanceof Collection) {\n         l \u003d ((Collection) l).iterator();\n     }\n     if (r instanceof Collection) {\n         r \u003d ((Collection) r).iterator();\n     }\n     if ((l instanceof Iterator) \u0026\u0026 !(r instanceof Iterator)) {\n         return contains((Iterator) l, r);\n-    } else if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n+    }\n+    if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n         return contains((Iterator) r, l);\n-    } else if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n+    }\n+    if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n         return findMatch((Iterator) l, (Iterator) r);\n     }\n     return equal(l, r);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f3eb1977debfe1fd0704d78285e99243e6b7aa07": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring of CoreOperation and expression.toString()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136840 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/19/03, 3:59 PM",
      "commitName": "f3eb1977debfe1fd0704d78285e99243e6b7aa07",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,24 @@\n+protected boolean equal(EvalContext context, Expression left, Expression right) {\n+    Object l \u003d left.compute(context);\n+    Object r \u003d right.compute(context);\n+    if (l instanceof InitialContext || l instanceof SelfContext) {\n+        l \u003d ((EvalContext) l).getSingleNodePointer();\n+    }\n+    if (r instanceof InitialContext || r instanceof SelfContext) {\n+        r \u003d ((EvalContext) r).getSingleNodePointer();\n+    }\n+    if (l instanceof Collection) {\n+        l \u003d ((Collection) l).iterator();\n+    }\n+    if (r instanceof Collection) {\n+        r \u003d ((Collection) r).iterator();\n+    }\n+    if ((l instanceof Iterator) \u0026\u0026 !(r instanceof Iterator)) {\n+        return contains((Iterator) l, r);\n+    } else if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n+        return contains((Iterator) r, l);\n+    } else if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n+        return findMatch((Iterator) l, (Iterator) r);\n+    }\n+    return equal(l, r);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected boolean equal(EvalContext context, Expression left, Expression right) {\n    Object l \u003d left.compute(context);\n    Object r \u003d right.compute(context);\n    if (l instanceof InitialContext || l instanceof SelfContext) {\n        l \u003d ((EvalContext) l).getSingleNodePointer();\n    }\n    if (r instanceof InitialContext || r instanceof SelfContext) {\n        r \u003d ((EvalContext) r).getSingleNodePointer();\n    }\n    if (l instanceof Collection) {\n        l \u003d ((Collection) l).iterator();\n    }\n    if (r instanceof Collection) {\n        r \u003d ((Collection) r).iterator();\n    }\n    if ((l instanceof Iterator) \u0026\u0026 !(r instanceof Iterator)) {\n        return contains((Iterator) l, r);\n    } else if (!(l instanceof Iterator) \u0026\u0026 (r instanceof Iterator)) {\n        return contains((Iterator) r, l);\n    } else if (l instanceof Iterator \u0026\u0026 r instanceof Iterator) {\n        return findMatch((Iterator) l, (Iterator) r);\n    }\n    return equal(l, r);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
      "functionStartLine": 82,
      "functionName": "equal",
      "functionAnnotation": "",
      "functionDoc": "Compares two values\n"
    }
  }
}