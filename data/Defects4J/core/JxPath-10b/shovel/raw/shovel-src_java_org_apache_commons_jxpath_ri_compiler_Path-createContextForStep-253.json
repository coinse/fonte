{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Path.java",
  "functionName": "createContextForStep",
  "functionId": "createContextForStep___context-EvalContext__axis-int__nodeTest-NodeTest",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
  "functionAnnotation": "",
  "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
  "functionStartLine": 253,
  "functionEndLine": 297,
  "numCommitsSeen": 36,
  "timeTaken": 2317,
  "changeHistory": [
    "d36e894cb61100284b81027d6765e66181f982b5",
    "413edb7f5000c8f53914bcaf73058d763adfd525",
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "323e8b214459b3977973c01a048a979dc778f100",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
    "207c6dd98407506ff367d072be25b56f37989215",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "d36e894cb61100284b81027d6765e66181f982b5": "Ybodychange",
    "413edb7f5000c8f53914bcaf73058d763adfd525": "Ybodychange",
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a": "Ybodychange",
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": "Yformatchange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "323e8b214459b3977973c01a048a979dc778f100": "Ymovefromfile",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": "Ymultichange(Yparameterchange,Ybodychange)",
    "207c6dd98407506ff367d072be25b56f37989215": "Ybodychange",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d36e894cb61100284b81027d6765e66181f982b5": {
      "type": "Ybodychange",
      "commitMessage": "revert changes for JXPATH-61\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@540278 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/21/07, 1:38 PM",
      "commitName": "d36e894cb61100284b81027d6765e66181f982b5",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "2/19/07, 3:24 PM",
      "commitNameOld": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 90.88,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    if (nodeTest instanceof NodeNameTest) {\n        QName qname \u003d ((NodeNameTest) nodeTest).getNodeName();\n        String prefix \u003d qname.getPrefix();\n        if (prefix !\u003d null) {\n            String namespaceURI \u003d context.getJXPathContext().getNamespaceURI(prefix);\n            nodeTest \u003d new NodeNameTest(qname, namespaceURI);\n        }\n    }\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 253,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
      "diff": "@@ -1,39 +1,39 @@\n protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n     if (nodeTest instanceof NodeNameTest) {\n         QName qname \u003d ((NodeNameTest) nodeTest).getNodeName();\n         String prefix \u003d qname.getPrefix();\n-        String namespaceURI \u003d prefix !\u003d null ? context.getJXPathContext().getNamespaceURI(prefix) : context.getJXPathContext().getDefaultNamespaceURI();\n-        if (namespaceURI !\u003d null) {\n+        if (prefix !\u003d null) {\n+            String namespaceURI \u003d context.getJXPathContext().getNamespaceURI(prefix);\n             nodeTest \u003d new NodeNameTest(qname, namespaceURI);\n         }\n     }\n     switch(axis) {\n         case Compiler.AXIS_ANCESTOR:\n             return new AncestorContext(context, false, nodeTest);\n         case Compiler.AXIS_ANCESTOR_OR_SELF:\n             return new AncestorContext(context, true, nodeTest);\n         case Compiler.AXIS_ATTRIBUTE:\n             return new AttributeContext(context, nodeTest);\n         case Compiler.AXIS_CHILD:\n             return new ChildContext(context, nodeTest, false, false);\n         case Compiler.AXIS_DESCENDANT:\n             return new DescendantContext(context, false, nodeTest);\n         case Compiler.AXIS_DESCENDANT_OR_SELF:\n             return new DescendantContext(context, true, nodeTest);\n         case Compiler.AXIS_FOLLOWING:\n             return new PrecedingOrFollowingContext(context, nodeTest, false);\n         case Compiler.AXIS_FOLLOWING_SIBLING:\n             return new ChildContext(context, nodeTest, true, false);\n         case Compiler.AXIS_NAMESPACE:\n             return new NamespaceContext(context, nodeTest);\n         case Compiler.AXIS_PARENT:\n             return new ParentContext(context, nodeTest);\n         case Compiler.AXIS_PRECEDING:\n             return new PrecedingOrFollowingContext(context, nodeTest, true);\n         case Compiler.AXIS_PRECEDING_SIBLING:\n             return new ChildContext(context, nodeTest, true, true);\n         case Compiler.AXIS_SELF:\n             return new SelfContext(context, nodeTest);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "413edb7f5000c8f53914bcaf73058d763adfd525": {
      "type": "Ybodychange",
      "commitMessage": "Another attempt at closing bug 32360. \nSee http://issues.apache.org/bugzilla/show_bug.cgi?id\u003d32360\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@329964 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/31/05, 7:25 PM",
      "commitName": "413edb7f5000c8f53914bcaf73058d763adfd525",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/29/05, 8:07 PM",
      "commitNameOld": "301243c9ea777977c3c37172b746d3a65b8ad949",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    if (nodeTest instanceof NodeNameTest) {\n        QName qname \u003d ((NodeNameTest) nodeTest).getNodeName();\n        String prefix \u003d qname.getPrefix();\n        String namespaceURI \u003d prefix !\u003d null ? context.getJXPathContext().getNamespaceURI(prefix) : context.getJXPathContext().getDefaultNamespaceURI();\n        if (namespaceURI !\u003d null) {\n            nodeTest \u003d new NodeNameTest(qname, namespaceURI);\n        }\n    }\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 256,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
      "diff": "@@ -1,39 +1,39 @@\n protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n     if (nodeTest instanceof NodeNameTest) {\n         QName qname \u003d ((NodeNameTest) nodeTest).getNodeName();\n         String prefix \u003d qname.getPrefix();\n-        if (prefix !\u003d null) {\n-            String namespaceURI \u003d context.getJXPathContext().getNamespaceURI(prefix);\n+        String namespaceURI \u003d prefix !\u003d null ? context.getJXPathContext().getNamespaceURI(prefix) : context.getJXPathContext().getDefaultNamespaceURI();\n+        if (namespaceURI !\u003d null) {\n             nodeTest \u003d new NodeNameTest(qname, namespaceURI);\n         }\n     }\n     switch(axis) {\n         case Compiler.AXIS_ANCESTOR:\n             return new AncestorContext(context, false, nodeTest);\n         case Compiler.AXIS_ANCESTOR_OR_SELF:\n             return new AncestorContext(context, true, nodeTest);\n         case Compiler.AXIS_ATTRIBUTE:\n             return new AttributeContext(context, nodeTest);\n         case Compiler.AXIS_CHILD:\n             return new ChildContext(context, nodeTest, false, false);\n         case Compiler.AXIS_DESCENDANT:\n             return new DescendantContext(context, false, nodeTest);\n         case Compiler.AXIS_DESCENDANT_OR_SELF:\n             return new DescendantContext(context, true, nodeTest);\n         case Compiler.AXIS_FOLLOWING:\n             return new PrecedingOrFollowingContext(context, nodeTest, false);\n         case Compiler.AXIS_FOLLOWING_SIBLING:\n             return new ChildContext(context, nodeTest, true, false);\n         case Compiler.AXIS_NAMESPACE:\n             return new NamespaceContext(context, nodeTest);\n         case Compiler.AXIS_PARENT:\n             return new ParentContext(context, nodeTest);\n         case Compiler.AXIS_PRECEDING:\n             return new PrecedingOrFollowingContext(context, nodeTest, true);\n         case Compiler.AXIS_PRECEDING_SIBLING:\n             return new ChildContext(context, nodeTest, true, true);\n         case Compiler.AXIS_SELF:\n             return new SelfContext(context, nodeTest);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a": {
      "type": "Ybodychange",
      "commitMessage": "Introduced prefix registration with JXPathContext\nFixed a number or problems with namespace matching\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/31/04, 6:55 PM",
      "commitName": "b1e1383fd8c33fc246ee253e6a9f7a047d3da38a",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "3/24/04, 9:41 PM",
      "commitNameOld": "d52ff3460273690514d70e716be1ff3201dca8c8",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    if (nodeTest instanceof NodeNameTest) {\n        QName qname \u003d ((NodeNameTest) nodeTest).getNodeName();\n        String prefix \u003d qname.getPrefix();\n        if (prefix !\u003d null) {\n            String namespaceURI \u003d context.getJXPathContext().getNamespaceURI(prefix);\n            nodeTest \u003d new NodeNameTest(qname, namespaceURI);\n        }\n    }\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 252,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
      "diff": "@@ -1,31 +1,39 @@\n protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n+    if (nodeTest instanceof NodeNameTest) {\n+        QName qname \u003d ((NodeNameTest) nodeTest).getNodeName();\n+        String prefix \u003d qname.getPrefix();\n+        if (prefix !\u003d null) {\n+            String namespaceURI \u003d context.getJXPathContext().getNamespaceURI(prefix);\n+            nodeTest \u003d new NodeNameTest(qname, namespaceURI);\n+        }\n+    }\n     switch(axis) {\n         case Compiler.AXIS_ANCESTOR:\n             return new AncestorContext(context, false, nodeTest);\n         case Compiler.AXIS_ANCESTOR_OR_SELF:\n             return new AncestorContext(context, true, nodeTest);\n         case Compiler.AXIS_ATTRIBUTE:\n             return new AttributeContext(context, nodeTest);\n         case Compiler.AXIS_CHILD:\n             return new ChildContext(context, nodeTest, false, false);\n         case Compiler.AXIS_DESCENDANT:\n             return new DescendantContext(context, false, nodeTest);\n         case Compiler.AXIS_DESCENDANT_OR_SELF:\n             return new DescendantContext(context, true, nodeTest);\n         case Compiler.AXIS_FOLLOWING:\n             return new PrecedingOrFollowingContext(context, nodeTest, false);\n         case Compiler.AXIS_FOLLOWING_SIBLING:\n             return new ChildContext(context, nodeTest, true, false);\n         case Compiler.AXIS_NAMESPACE:\n             return new NamespaceContext(context, nodeTest);\n         case Compiler.AXIS_PARENT:\n             return new ParentContext(context, nodeTest);\n         case Compiler.AXIS_PRECEDING:\n             return new PrecedingOrFollowingContext(context, nodeTest, true);\n         case Compiler.AXIS_PRECEDING_SIBLING:\n             return new ChildContext(context, nodeTest, true, true);\n         case Compiler.AXIS_SELF:\n             return new SelfContext(context, nodeTest);\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": {
      "type": "Yformatchange",
      "commitMessage": "Fixed an issue with searches in graphs containing DynamicPropertyHandlers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136888 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/04, 5:10 PM",
      "commitName": "26ed002f4905b94a6a4275f9ad263cb8a2cadf00",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/9/03, 2:31 PM",
      "commitNameOld": "ecf573e1f80cd86060a2fcd23181cde3f67c9fdd",
      "commitAuthorOld": "Robert Burrell Donkin",
      "daysBetweenCommits": 105.15,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 298,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 7:59 PM",
      "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 90.11,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 245,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ymovefromfile",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/7/02, 5:39 PM",
      "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 205,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
        "newPath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
        "oldMethodName": "createContextForStep",
        "newMethodName": "createContextForStep"
      }
    },
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/21/01, 4:22 PM",
      "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/21/01, 4:22 PM",
          "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "9/2/01, 6:22 PM",
          "commitNameOld": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 18.92,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 864,
          "functionName": "createContextForStep",
          "functionAnnotation": "",
          "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
          "diff": "@@ -1,63 +1,31 @@\n-protected EvalContext createContextForStep(EvalContext context, Step step) {\n-    if (step instanceof NodeNameTest) {\n-        QName name \u003d ((NodeNameTest) step).getNodeName();\n-        switch(step.getAxis()) {\n-            case Compiler.AXIS_ANCESTOR:\n-                return new AncestorContext(context, false, name);\n-            case Compiler.AXIS_ANCESTOR_OR_SELF:\n-                return new AncestorContext(context, true, name);\n-            case Compiler.AXIS_ATTRIBUTE:\n-                return new AttributeContext(context, name);\n-            case Compiler.AXIS_CHILD:\n-                return new ChildContext(context, name, false, false);\n-            case Compiler.AXIS_DESCENDANT:\n-                return new DescendantContext(context, false, name);\n-            case Compiler.AXIS_DESCENDANT_OR_SELF:\n-                return new DescendantContext(context, true, name);\n-            case Compiler.AXIS_FOLLOWING:\n-                return new PrecedingOrFollowingContext(context, name, false);\n-            case Compiler.AXIS_FOLLOWING_SIBLING:\n-                return new ChildContext(context, name, true, false);\n-            case Compiler.AXIS_NAMESPACE:\n-                break;\n-            case Compiler.AXIS_PARENT:\n-                return new ParentContext(context, name);\n-            case Compiler.AXIS_PRECEDING:\n-                return new PrecedingOrFollowingContext(context, name, true);\n-            case Compiler.AXIS_PRECEDING_SIBLING:\n-                return new ChildContext(context, name, true, true);\n-            case Compiler.AXIS_SELF:\n-                return new SelfContext(context, name);\n-        }\n-    } else if (step instanceof NodeTypeTest) {\n-        switch(step.getAxis()) {\n-            case Compiler.AXIS_ANCESTOR:\n-                return new AncestorContext(context, false, null);\n-            case Compiler.AXIS_ANCESTOR_OR_SELF:\n-                return new AncestorContext(context, true, null);\n-            case Compiler.AXIS_ATTRIBUTE:\n-                return new AttributeContext(context, null);\n-            case Compiler.AXIS_CHILD:\n-                return new ChildContext(context, null, false, false);\n-            case Compiler.AXIS_DESCENDANT:\n-                return new DescendantContext(context, false, null);\n-            case Compiler.AXIS_DESCENDANT_OR_SELF:\n-                return new DescendantContext(context, true, null);\n-            case Compiler.AXIS_FOLLOWING:\n-                return new PrecedingOrFollowingContext(context, null, false);\n-            case Compiler.AXIS_FOLLOWING_SIBLING:\n-                return new ChildContext(context, null, true, false);\n-            case Compiler.AXIS_NAMESPACE:\n-                break;\n-            case Compiler.AXIS_PARENT:\n-                return new ParentContext(context, null);\n-            case Compiler.AXIS_PRECEDING:\n-                return new PrecedingOrFollowingContext(context, null, true);\n-            case Compiler.AXIS_PRECEDING_SIBLING:\n-                return new ChildContext(context, null, true, true);\n-            case Compiler.AXIS_SELF:\n-                return context;\n-        }\n+protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n+    switch(axis) {\n+        case Compiler.AXIS_ANCESTOR:\n+            return new AncestorContext(context, false, nodeTest);\n+        case Compiler.AXIS_ANCESTOR_OR_SELF:\n+            return new AncestorContext(context, true, nodeTest);\n+        case Compiler.AXIS_ATTRIBUTE:\n+            return new AttributeContext(context, nodeTest);\n+        case Compiler.AXIS_CHILD:\n+            return new ChildContext(context, nodeTest, false, false);\n+        case Compiler.AXIS_DESCENDANT:\n+            return new DescendantContext(context, false, nodeTest);\n+        case Compiler.AXIS_DESCENDANT_OR_SELF:\n+            return new DescendantContext(context, true, nodeTest);\n+        case Compiler.AXIS_FOLLOWING:\n+            return new PrecedingOrFollowingContext(context, nodeTest, false);\n+        case Compiler.AXIS_FOLLOWING_SIBLING:\n+            return new ChildContext(context, nodeTest, true, false);\n+        case Compiler.AXIS_NAMESPACE:\n+            return new NamespaceContext(context, nodeTest);\n+        case Compiler.AXIS_PARENT:\n+            return new ParentContext(context, nodeTest);\n+        case Compiler.AXIS_PRECEDING:\n+            return new PrecedingOrFollowingContext(context, nodeTest, true);\n+        case Compiler.AXIS_PRECEDING_SIBLING:\n+            return new ChildContext(context, nodeTest, true, true);\n+        case Compiler.AXIS_SELF:\n+            return new SelfContext(context, nodeTest);\n     }\n-    throw new RuntimeException(\"Cannot create context for step: \" + step);\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, step-Step]",
            "newValue": "[context-EvalContext, axis-int, nodeTest-NodeTest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/21/01, 4:22 PM",
          "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "9/2/01, 6:22 PM",
          "commitNameOld": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 18.92,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "actualSource": "protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n    switch(axis) {\n        case Compiler.AXIS_ANCESTOR:\n            return new AncestorContext(context, false, nodeTest);\n        case Compiler.AXIS_ANCESTOR_OR_SELF:\n            return new AncestorContext(context, true, nodeTest);\n        case Compiler.AXIS_ATTRIBUTE:\n            return new AttributeContext(context, nodeTest);\n        case Compiler.AXIS_CHILD:\n            return new ChildContext(context, nodeTest, false, false);\n        case Compiler.AXIS_DESCENDANT:\n            return new DescendantContext(context, false, nodeTest);\n        case Compiler.AXIS_DESCENDANT_OR_SELF:\n            return new DescendantContext(context, true, nodeTest);\n        case Compiler.AXIS_FOLLOWING:\n            return new PrecedingOrFollowingContext(context, nodeTest, false);\n        case Compiler.AXIS_FOLLOWING_SIBLING:\n            return new ChildContext(context, nodeTest, true, false);\n        case Compiler.AXIS_NAMESPACE:\n            return new NamespaceContext(context, nodeTest);\n        case Compiler.AXIS_PARENT:\n            return new ParentContext(context, nodeTest);\n        case Compiler.AXIS_PRECEDING:\n            return new PrecedingOrFollowingContext(context, nodeTest, true);\n        case Compiler.AXIS_PRECEDING_SIBLING:\n            return new ChildContext(context, nodeTest, true, true);\n        case Compiler.AXIS_SELF:\n            return new SelfContext(context, nodeTest);\n    }\n    return null;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 864,
          "functionName": "createContextForStep",
          "functionAnnotation": "",
          "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
          "diff": "@@ -1,63 +1,31 @@\n-protected EvalContext createContextForStep(EvalContext context, Step step) {\n-    if (step instanceof NodeNameTest) {\n-        QName name \u003d ((NodeNameTest) step).getNodeName();\n-        switch(step.getAxis()) {\n-            case Compiler.AXIS_ANCESTOR:\n-                return new AncestorContext(context, false, name);\n-            case Compiler.AXIS_ANCESTOR_OR_SELF:\n-                return new AncestorContext(context, true, name);\n-            case Compiler.AXIS_ATTRIBUTE:\n-                return new AttributeContext(context, name);\n-            case Compiler.AXIS_CHILD:\n-                return new ChildContext(context, name, false, false);\n-            case Compiler.AXIS_DESCENDANT:\n-                return new DescendantContext(context, false, name);\n-            case Compiler.AXIS_DESCENDANT_OR_SELF:\n-                return new DescendantContext(context, true, name);\n-            case Compiler.AXIS_FOLLOWING:\n-                return new PrecedingOrFollowingContext(context, name, false);\n-            case Compiler.AXIS_FOLLOWING_SIBLING:\n-                return new ChildContext(context, name, true, false);\n-            case Compiler.AXIS_NAMESPACE:\n-                break;\n-            case Compiler.AXIS_PARENT:\n-                return new ParentContext(context, name);\n-            case Compiler.AXIS_PRECEDING:\n-                return new PrecedingOrFollowingContext(context, name, true);\n-            case Compiler.AXIS_PRECEDING_SIBLING:\n-                return new ChildContext(context, name, true, true);\n-            case Compiler.AXIS_SELF:\n-                return new SelfContext(context, name);\n-        }\n-    } else if (step instanceof NodeTypeTest) {\n-        switch(step.getAxis()) {\n-            case Compiler.AXIS_ANCESTOR:\n-                return new AncestorContext(context, false, null);\n-            case Compiler.AXIS_ANCESTOR_OR_SELF:\n-                return new AncestorContext(context, true, null);\n-            case Compiler.AXIS_ATTRIBUTE:\n-                return new AttributeContext(context, null);\n-            case Compiler.AXIS_CHILD:\n-                return new ChildContext(context, null, false, false);\n-            case Compiler.AXIS_DESCENDANT:\n-                return new DescendantContext(context, false, null);\n-            case Compiler.AXIS_DESCENDANT_OR_SELF:\n-                return new DescendantContext(context, true, null);\n-            case Compiler.AXIS_FOLLOWING:\n-                return new PrecedingOrFollowingContext(context, null, false);\n-            case Compiler.AXIS_FOLLOWING_SIBLING:\n-                return new ChildContext(context, null, true, false);\n-            case Compiler.AXIS_NAMESPACE:\n-                break;\n-            case Compiler.AXIS_PARENT:\n-                return new ParentContext(context, null);\n-            case Compiler.AXIS_PRECEDING:\n-                return new PrecedingOrFollowingContext(context, null, true);\n-            case Compiler.AXIS_PRECEDING_SIBLING:\n-                return new ChildContext(context, null, true, true);\n-            case Compiler.AXIS_SELF:\n-                return context;\n-        }\n+protected EvalContext createContextForStep(EvalContext context, int axis, NodeTest nodeTest) {\n+    switch(axis) {\n+        case Compiler.AXIS_ANCESTOR:\n+            return new AncestorContext(context, false, nodeTest);\n+        case Compiler.AXIS_ANCESTOR_OR_SELF:\n+            return new AncestorContext(context, true, nodeTest);\n+        case Compiler.AXIS_ATTRIBUTE:\n+            return new AttributeContext(context, nodeTest);\n+        case Compiler.AXIS_CHILD:\n+            return new ChildContext(context, nodeTest, false, false);\n+        case Compiler.AXIS_DESCENDANT:\n+            return new DescendantContext(context, false, nodeTest);\n+        case Compiler.AXIS_DESCENDANT_OR_SELF:\n+            return new DescendantContext(context, true, nodeTest);\n+        case Compiler.AXIS_FOLLOWING:\n+            return new PrecedingOrFollowingContext(context, nodeTest, false);\n+        case Compiler.AXIS_FOLLOWING_SIBLING:\n+            return new ChildContext(context, nodeTest, true, false);\n+        case Compiler.AXIS_NAMESPACE:\n+            return new NamespaceContext(context, nodeTest);\n+        case Compiler.AXIS_PARENT:\n+            return new ParentContext(context, nodeTest);\n+        case Compiler.AXIS_PRECEDING:\n+            return new PrecedingOrFollowingContext(context, nodeTest, true);\n+        case Compiler.AXIS_PRECEDING_SIBLING:\n+            return new ChildContext(context, nodeTest, true, true);\n+        case Compiler.AXIS_SELF:\n+            return new SelfContext(context, nodeTest);\n     }\n-    throw new RuntimeException(\"Cannot create context for step: \" + step);\n+    return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "207c6dd98407506ff367d072be25b56f37989215": {
      "type": "Ybodychange",
      "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/01, 6:22 PM",
      "commitName": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/22/01, 5:47 PM",
      "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 11.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, Step step) {\n    if (step instanceof NodeNameTest) {\n        QName name \u003d ((NodeNameTest) step).getNodeName();\n        switch(step.getAxis()) {\n            case Compiler.AXIS_ANCESTOR:\n                return new AncestorContext(context, false, name);\n            case Compiler.AXIS_ANCESTOR_OR_SELF:\n                return new AncestorContext(context, true, name);\n            case Compiler.AXIS_ATTRIBUTE:\n                return new AttributeContext(context, name);\n            case Compiler.AXIS_CHILD:\n                return new ChildContext(context, name, false, false);\n            case Compiler.AXIS_DESCENDANT:\n                return new DescendantContext(context, false, name);\n            case Compiler.AXIS_DESCENDANT_OR_SELF:\n                return new DescendantContext(context, true, name);\n            case Compiler.AXIS_FOLLOWING:\n                return new PrecedingOrFollowingContext(context, name, false);\n            case Compiler.AXIS_FOLLOWING_SIBLING:\n                return new ChildContext(context, name, true, false);\n            case Compiler.AXIS_NAMESPACE:\n                break;\n            case Compiler.AXIS_PARENT:\n                return new ParentContext(context, name);\n            case Compiler.AXIS_PRECEDING:\n                return new PrecedingOrFollowingContext(context, name, true);\n            case Compiler.AXIS_PRECEDING_SIBLING:\n                return new ChildContext(context, name, true, true);\n            case Compiler.AXIS_SELF:\n                return new SelfContext(context, name);\n        }\n    } else if (step instanceof NodeTypeTest) {\n        switch(step.getAxis()) {\n            case Compiler.AXIS_ANCESTOR:\n                return new AncestorContext(context, false, null);\n            case Compiler.AXIS_ANCESTOR_OR_SELF:\n                return new AncestorContext(context, true, null);\n            case Compiler.AXIS_ATTRIBUTE:\n                return new AttributeContext(context, null);\n            case Compiler.AXIS_CHILD:\n                return new ChildContext(context, null, false, false);\n            case Compiler.AXIS_DESCENDANT:\n                return new DescendantContext(context, false, null);\n            case Compiler.AXIS_DESCENDANT_OR_SELF:\n                return new DescendantContext(context, true, null);\n            case Compiler.AXIS_FOLLOWING:\n                return new PrecedingOrFollowingContext(context, null, false);\n            case Compiler.AXIS_FOLLOWING_SIBLING:\n                return new ChildContext(context, null, true, false);\n            case Compiler.AXIS_NAMESPACE:\n                break;\n            case Compiler.AXIS_PARENT:\n                return new ParentContext(context, null);\n            case Compiler.AXIS_PRECEDING:\n                return new PrecedingOrFollowingContext(context, null, true);\n            case Compiler.AXIS_PRECEDING_SIBLING:\n                return new ChildContext(context, null, true, true);\n            case Compiler.AXIS_SELF:\n                return context;\n        }\n    }\n    throw new RuntimeException(\"Cannot create context for step: \" + step);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 825,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n",
      "diff": "@@ -1,63 +1,63 @@\n protected EvalContext createContextForStep(EvalContext context, Step step) {\n     if (step instanceof NodeNameTest) {\n         QName name \u003d ((NodeNameTest) step).getNodeName();\n         switch(step.getAxis()) {\n             case Compiler.AXIS_ANCESTOR:\n                 return new AncestorContext(context, false, name);\n             case Compiler.AXIS_ANCESTOR_OR_SELF:\n                 return new AncestorContext(context, true, name);\n             case Compiler.AXIS_ATTRIBUTE:\n-                break;\n+                return new AttributeContext(context, name);\n             case Compiler.AXIS_CHILD:\n                 return new ChildContext(context, name, false, false);\n             case Compiler.AXIS_DESCENDANT:\n                 return new DescendantContext(context, false, name);\n             case Compiler.AXIS_DESCENDANT_OR_SELF:\n                 return new DescendantContext(context, true, name);\n             case Compiler.AXIS_FOLLOWING:\n                 return new PrecedingOrFollowingContext(context, name, false);\n             case Compiler.AXIS_FOLLOWING_SIBLING:\n                 return new ChildContext(context, name, true, false);\n             case Compiler.AXIS_NAMESPACE:\n                 break;\n             case Compiler.AXIS_PARENT:\n                 return new ParentContext(context, name);\n             case Compiler.AXIS_PRECEDING:\n                 return new PrecedingOrFollowingContext(context, name, true);\n             case Compiler.AXIS_PRECEDING_SIBLING:\n                 return new ChildContext(context, name, true, true);\n             case Compiler.AXIS_SELF:\n                 return new SelfContext(context, name);\n         }\n     } else if (step instanceof NodeTypeTest) {\n         switch(step.getAxis()) {\n             case Compiler.AXIS_ANCESTOR:\n                 return new AncestorContext(context, false, null);\n             case Compiler.AXIS_ANCESTOR_OR_SELF:\n                 return new AncestorContext(context, true, null);\n             case Compiler.AXIS_ATTRIBUTE:\n-                break;\n+                return new AttributeContext(context, null);\n             case Compiler.AXIS_CHILD:\n                 return new ChildContext(context, null, false, false);\n             case Compiler.AXIS_DESCENDANT:\n                 return new DescendantContext(context, false, null);\n             case Compiler.AXIS_DESCENDANT_OR_SELF:\n                 return new DescendantContext(context, true, null);\n             case Compiler.AXIS_FOLLOWING:\n                 return new PrecedingOrFollowingContext(context, null, false);\n             case Compiler.AXIS_FOLLOWING_SIBLING:\n                 return new ChildContext(context, null, true, false);\n             case Compiler.AXIS_NAMESPACE:\n                 break;\n             case Compiler.AXIS_PARENT:\n                 return new ParentContext(context, null);\n             case Compiler.AXIS_PRECEDING:\n                 return new PrecedingOrFollowingContext(context, null, true);\n             case Compiler.AXIS_PRECEDING_SIBLING:\n                 return new ChildContext(context, null, true, true);\n             case Compiler.AXIS_SELF:\n                 return context;\n         }\n     }\n     throw new RuntimeException(\"Cannot create context for step: \" + step);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,63 @@\n+protected EvalContext createContextForStep(EvalContext context, Step step) {\n+    if (step instanceof NodeNameTest) {\n+        QName name \u003d ((NodeNameTest) step).getNodeName();\n+        switch(step.getAxis()) {\n+            case Compiler.AXIS_ANCESTOR:\n+                return new AncestorContext(context, false, name);\n+            case Compiler.AXIS_ANCESTOR_OR_SELF:\n+                return new AncestorContext(context, true, name);\n+            case Compiler.AXIS_ATTRIBUTE:\n+                break;\n+            case Compiler.AXIS_CHILD:\n+                return new ChildContext(context, name, false, false);\n+            case Compiler.AXIS_DESCENDANT:\n+                return new DescendantContext(context, false, name);\n+            case Compiler.AXIS_DESCENDANT_OR_SELF:\n+                return new DescendantContext(context, true, name);\n+            case Compiler.AXIS_FOLLOWING:\n+                return new PrecedingOrFollowingContext(context, name, false);\n+            case Compiler.AXIS_FOLLOWING_SIBLING:\n+                return new ChildContext(context, name, true, false);\n+            case Compiler.AXIS_NAMESPACE:\n+                break;\n+            case Compiler.AXIS_PARENT:\n+                return new ParentContext(context, name);\n+            case Compiler.AXIS_PRECEDING:\n+                return new PrecedingOrFollowingContext(context, name, true);\n+            case Compiler.AXIS_PRECEDING_SIBLING:\n+                return new ChildContext(context, name, true, true);\n+            case Compiler.AXIS_SELF:\n+                return new SelfContext(context, name);\n+        }\n+    } else if (step instanceof NodeTypeTest) {\n+        switch(step.getAxis()) {\n+            case Compiler.AXIS_ANCESTOR:\n+                return new AncestorContext(context, false, null);\n+            case Compiler.AXIS_ANCESTOR_OR_SELF:\n+                return new AncestorContext(context, true, null);\n+            case Compiler.AXIS_ATTRIBUTE:\n+                break;\n+            case Compiler.AXIS_CHILD:\n+                return new ChildContext(context, null, false, false);\n+            case Compiler.AXIS_DESCENDANT:\n+                return new DescendantContext(context, false, null);\n+            case Compiler.AXIS_DESCENDANT_OR_SELF:\n+                return new DescendantContext(context, true, null);\n+            case Compiler.AXIS_FOLLOWING:\n+                return new PrecedingOrFollowingContext(context, null, false);\n+            case Compiler.AXIS_FOLLOWING_SIBLING:\n+                return new ChildContext(context, null, true, false);\n+            case Compiler.AXIS_NAMESPACE:\n+                break;\n+            case Compiler.AXIS_PARENT:\n+                return new ParentContext(context, null);\n+            case Compiler.AXIS_PRECEDING:\n+                return new PrecedingOrFollowingContext(context, null, true);\n+            case Compiler.AXIS_PRECEDING_SIBLING:\n+                return new ChildContext(context, null, true, true);\n+            case Compiler.AXIS_SELF:\n+                return context;\n+        }\n+    }\n+    throw new RuntimeException(\"Cannot create context for step: \" + step);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected EvalContext createContextForStep(EvalContext context, Step step) {\n    if (step instanceof NodeNameTest) {\n        QName name \u003d ((NodeNameTest) step).getNodeName();\n        switch(step.getAxis()) {\n            case Compiler.AXIS_ANCESTOR:\n                return new AncestorContext(context, false, name);\n            case Compiler.AXIS_ANCESTOR_OR_SELF:\n                return new AncestorContext(context, true, name);\n            case Compiler.AXIS_ATTRIBUTE:\n                break;\n            case Compiler.AXIS_CHILD:\n                return new ChildContext(context, name, false, false);\n            case Compiler.AXIS_DESCENDANT:\n                return new DescendantContext(context, false, name);\n            case Compiler.AXIS_DESCENDANT_OR_SELF:\n                return new DescendantContext(context, true, name);\n            case Compiler.AXIS_FOLLOWING:\n                return new PrecedingOrFollowingContext(context, name, false);\n            case Compiler.AXIS_FOLLOWING_SIBLING:\n                return new ChildContext(context, name, true, false);\n            case Compiler.AXIS_NAMESPACE:\n                break;\n            case Compiler.AXIS_PARENT:\n                return new ParentContext(context, name);\n            case Compiler.AXIS_PRECEDING:\n                return new PrecedingOrFollowingContext(context, name, true);\n            case Compiler.AXIS_PRECEDING_SIBLING:\n                return new ChildContext(context, name, true, true);\n            case Compiler.AXIS_SELF:\n                return new SelfContext(context, name);\n        }\n    } else if (step instanceof NodeTypeTest) {\n        switch(step.getAxis()) {\n            case Compiler.AXIS_ANCESTOR:\n                return new AncestorContext(context, false, null);\n            case Compiler.AXIS_ANCESTOR_OR_SELF:\n                return new AncestorContext(context, true, null);\n            case Compiler.AXIS_ATTRIBUTE:\n                break;\n            case Compiler.AXIS_CHILD:\n                return new ChildContext(context, null, false, false);\n            case Compiler.AXIS_DESCENDANT:\n                return new DescendantContext(context, false, null);\n            case Compiler.AXIS_DESCENDANT_OR_SELF:\n                return new DescendantContext(context, true, null);\n            case Compiler.AXIS_FOLLOWING:\n                return new PrecedingOrFollowingContext(context, null, false);\n            case Compiler.AXIS_FOLLOWING_SIBLING:\n                return new ChildContext(context, null, true, false);\n            case Compiler.AXIS_NAMESPACE:\n                break;\n            case Compiler.AXIS_PARENT:\n                return new ParentContext(context, null);\n            case Compiler.AXIS_PRECEDING:\n                return new PrecedingOrFollowingContext(context, null, true);\n            case Compiler.AXIS_PRECEDING_SIBLING:\n                return new ChildContext(context, null, true, true);\n            case Compiler.AXIS_SELF:\n                return context;\n        }\n    }\n    throw new RuntimeException(\"Cannot create context for step: \" + step);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 791,
      "functionName": "createContextForStep",
      "functionAnnotation": "",
      "functionDoc": "Different axes are serviced by different contexts. This method\nallocates the right context for the supplied step.\n"
    }
  }
}