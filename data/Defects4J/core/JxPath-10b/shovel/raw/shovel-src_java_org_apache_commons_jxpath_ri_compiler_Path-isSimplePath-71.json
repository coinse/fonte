{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Path.java",
  "functionName": "isSimplePath",
  "functionId": "isSimplePath",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
  "functionAnnotation": "",
  "functionDoc": "Recognized  paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\n\u003c/code\u003e.  The evaluation of such \"simple\" paths is optimized and\nstreamlined.\n",
  "functionStartLine": 71,
  "functionEndLine": 84,
  "numCommitsSeen": 21,
  "timeTaken": 1271,
  "changeHistory": [
    "2130b277556eeb1ee97fbd4adc1c4e41c8994275",
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "d5a51635e77e49efbf18c5b51834f533e7972953",
    "a3e590e95b0200e58068cab4b1ea91c5313d46ee",
    "323e8b214459b3977973c01a048a979dc778f100"
  ],
  "changeHistoryShort": {
    "2130b277556eeb1ee97fbd4adc1c4e41c8994275": "Ymodifierchange",
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Ymultichange(Ydocchange,Yformatchange)",
    "d5a51635e77e49efbf18c5b51834f533e7972953": "Ybodychange",
    "a3e590e95b0200e58068cab4b1ea91c5313d46ee": "Ybodychange",
    "323e8b214459b3977973c01a048a979dc778f100": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2130b277556eeb1ee97fbd4adc1c4e41c8994275": {
      "type": "Ymodifierchange",
      "commitMessage": "synchronize lazy checks; JXPATH-76\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@501878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/31/07, 8:24 AM",
      "commitName": "2130b277556eeb1ee97fbd4adc1c4e41c8994275",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 63.45,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public synchronized boolean isSimplePath() {\n    if (!basicKnown) {\n        basicKnown \u003d true;\n        basic \u003d true;\n        Step[] steps \u003d getSteps();\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            if (!isSimpleStep(steps[i])) {\n                basic \u003d false;\n                break;\n            }\n        }\n    }\n    return basic;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 72,
      "functionName": "isSimplePath",
      "functionAnnotation": "",
      "functionDoc": "Recognized  paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\n\u003c/code\u003e.  The evaluation of such \"simple\" paths is optimized and\nstreamlined.\n",
      "diff": "@@ -1,14 +1,14 @@\n-public boolean isSimplePath() {\n+public synchronized boolean isSimplePath() {\n     if (!basicKnown) {\n         basicKnown \u003d true;\n         basic \u003d true;\n         Step[] steps \u003d getSteps();\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n             if (!isSimpleStep(steps[i])) {\n                 basic \u003d false;\n                 break;\n             }\n         }\n     }\n     return basic;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": {
      "type": "Ybodychange",
      "commitMessage": "Fixed an issue with searches in graphs containing DynamicPropertyHandlers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136888 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/04, 5:10 PM",
      "commitName": "26ed002f4905b94a6a4275f9ad263cb8a2cadf00",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/9/03, 2:31 PM",
      "commitNameOld": "ecf573e1f80cd86060a2fcd23181cde3f67c9fdd",
      "commitAuthorOld": "Robert Burrell Donkin",
      "daysBetweenCommits": 105.15,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isSimplePath() {\n    if (!basicKnown) {\n        basicKnown \u003d true;\n        basic \u003d true;\n        Step[] steps \u003d getSteps();\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            if (!isSimpleStep(steps[i])) {\n                basic \u003d false;\n                break;\n            }\n        }\n    }\n    return basic;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 115,
      "functionName": "isSimplePath",
      "functionAnnotation": "",
      "functionDoc": "Recognized  paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\n\u003c/code\u003e.  The evaluation of such \"simple\" paths is optimized and\nstreamlined.\n",
      "diff": "@@ -1,23 +1,14 @@\n public boolean isSimplePath() {\n     if (!basicKnown) {\n         basicKnown \u003d true;\n         basic \u003d true;\n         Step[] steps \u003d getSteps();\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n-            boolean accepted \u003d false;\n-            if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 (steps[i].getNodeTest() instanceof NodeTypeTest) \u0026\u0026 ((NodeTypeTest) steps[i].getNodeTest()).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\n-                accepted \u003d true;\n-            } else if ((steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD || steps[i].getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n-                accepted \u003d true;\n-            }\n-            if (accepted) {\n-                accepted \u003d areBasicPredicates(steps[i].getPredicates());\n-            }\n-            if (!accepted) {\n+            if (!isSimpleStep(steps[i])) {\n                 basic \u003d false;\n                 break;\n             }\n         }\n     }\n     return basic;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/12/02, 7:59 PM",
          "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 90.11,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isSimplePath() {\n    if (!basicKnown) {\n        basicKnown \u003d true;\n        basic \u003d true;\n        Step[] steps \u003d getSteps();\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            boolean accepted \u003d false;\n            if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 (steps[i].getNodeTest() instanceof NodeTypeTest) \u0026\u0026 ((NodeTypeTest) steps[i].getNodeTest()).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\n                accepted \u003d true;\n            } else if ((steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD || steps[i].getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n                accepted \u003d true;\n            }\n            if (accepted) {\n                accepted \u003d areBasicPredicates(steps[i].getPredicates());\n            }\n            if (!accepted) {\n                basic \u003d false;\n                break;\n            }\n        }\n    }\n    return basic;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 115,
          "functionName": "isSimplePath",
          "functionAnnotation": "",
          "functionDoc": "Recognized  paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\n\u003c/code\u003e.  The evaluation of such \"simple\" paths is optimized and\nstreamlined.\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Recognized paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\u003c/code\u003e.  The\nevaluation of such \"simple\" paths is optimized and streamlined.\n",
            "newValue": "Recognized  paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\n\u003c/code\u003e.  The evaluation of such \"simple\" paths is optimized and\nstreamlined.\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "10/12/02, 7:59 PM",
          "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 90.11,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean isSimplePath() {\n    if (!basicKnown) {\n        basicKnown \u003d true;\n        basic \u003d true;\n        Step[] steps \u003d getSteps();\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            boolean accepted \u003d false;\n            if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 (steps[i].getNodeTest() instanceof NodeTypeTest) \u0026\u0026 ((NodeTypeTest) steps[i].getNodeTest()).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\n                accepted \u003d true;\n            } else if ((steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD || steps[i].getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n                accepted \u003d true;\n            }\n            if (accepted) {\n                accepted \u003d areBasicPredicates(steps[i].getPredicates());\n            }\n            if (!accepted) {\n                basic \u003d false;\n                break;\n            }\n        }\n    }\n    return basic;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 115,
          "functionName": "isSimplePath",
          "functionAnnotation": "",
          "functionDoc": "Recognized  paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\n\u003c/code\u003e.  The evaluation of such \"simple\" paths is optimized and\nstreamlined.\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d5a51635e77e49efbf18c5b51834f533e7972953": {
      "type": "Ybodychange",
      "commitMessage": "1. Now bean\u0027s properties can be accessed either with the child:: or the attribute:: axis.\n2. Missing attributes can be created with an AbstractFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/02, 7:59 PM",
      "commitName": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "8/9/02, 6:39 PM",
      "commitNameOld": "a3e590e95b0200e58068cab4b1ea91c5313d46ee",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 64.06,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isSimplePath() {\n    if (!basicKnown) {\n        basicKnown \u003d true;\n        basic \u003d true;\n        Step[] steps \u003d getSteps();\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            boolean accepted \u003d false;\n            if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 (steps[i].getNodeTest() instanceof NodeTypeTest) \u0026\u0026 ((NodeTypeTest) steps[i].getNodeTest()).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\n                accepted \u003d true;\n            } else if ((steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD || steps[i].getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n                accepted \u003d true;\n            }\n            if (accepted) {\n                accepted \u003d areBasicPredicates(steps[i].getPredicates());\n            }\n            if (!accepted) {\n                basic \u003d false;\n                break;\n            }\n        }\n    }\n    return basic;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 105,
      "functionName": "isSimplePath",
      "functionAnnotation": "",
      "functionDoc": "Recognized paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\u003c/code\u003e.  The\nevaluation of such \"simple\" paths is optimized and streamlined.\n",
      "diff": "@@ -1,23 +1,23 @@\n public boolean isSimplePath() {\n     if (!basicKnown) {\n         basicKnown \u003d true;\n         basic \u003d true;\n         Step[] steps \u003d getSteps();\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n             boolean accepted \u003d false;\n             if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 (steps[i].getNodeTest() instanceof NodeTypeTest) \u0026\u0026 ((NodeTypeTest) steps[i].getNodeTest()).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\n                 accepted \u003d true;\n-            } else if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n+            } else if ((steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD || steps[i].getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n                 accepted \u003d true;\n             }\n             if (accepted) {\n                 accepted \u003d areBasicPredicates(steps[i].getPredicates());\n             }\n             if (!accepted) {\n                 basic \u003d false;\n                 break;\n             }\n         }\n     }\n     return basic;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a3e590e95b0200e58068cab4b1ea91c5313d46ee": {
      "type": "Ybodychange",
      "commitMessage": "Changed to new SimplePathInterpreter APIs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:39 PM",
      "commitName": "a3e590e95b0200e58068cab4b1ea91c5313d46ee",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/7/02, 5:40 PM",
      "commitNameOld": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 94.04,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean isSimplePath() {\n    if (!basicKnown) {\n        basicKnown \u003d true;\n        basic \u003d true;\n        Step[] steps \u003d getSteps();\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            boolean accepted \u003d false;\n            if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 (steps[i].getNodeTest() instanceof NodeTypeTest) \u0026\u0026 ((NodeTypeTest) steps[i].getNodeTest()).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\n                accepted \u003d true;\n            } else if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n                accepted \u003d true;\n            }\n            if (accepted) {\n                accepted \u003d areBasicPredicates(steps[i].getPredicates());\n            }\n            if (!accepted) {\n                basic \u003d false;\n                break;\n            }\n        }\n    }\n    return basic;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 105,
      "functionName": "isSimplePath",
      "functionAnnotation": "",
      "functionDoc": "Recognized paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\u003c/code\u003e.  The\nevaluation of such \"simple\" paths is optimized and streamlined.\n",
      "diff": "@@ -1,17 +1,23 @@\n public boolean isSimplePath() {\n     if (!basicKnown) {\n         basicKnown \u003d true;\n         basic \u003d true;\n         Step[] steps \u003d getSteps();\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n-            if (steps[i].getAxis() !\u003d Compiler.AXIS_CHILD || !(steps[i].getNodeTest() instanceof NodeNameTest) || ((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n+            boolean accepted \u003d false;\n+            if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_SELF \u0026\u0026 (steps[i].getNodeTest() instanceof NodeTypeTest) \u0026\u0026 ((NodeTypeTest) steps[i].getNodeTest()).getNodeType() \u003d\u003d Compiler.NODE_TYPE_NODE) {\n+                accepted \u003d true;\n+            } else if (steps[i].getAxis() \u003d\u003d Compiler.AXIS_CHILD \u0026\u0026 (steps[i].getNodeTest() instanceof NodeNameTest) \u0026\u0026 !((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n+                accepted \u003d true;\n+            }\n+            if (accepted) {\n+                accepted \u003d areBasicPredicates(steps[i].getPredicates());\n+            }\n+            if (!accepted) {\n                 basic \u003d false;\n                 break;\n             }\n-            if (basic) {\n-                basic \u003d areBasicPredicates(steps[i].getPredicates());\n-            }\n         }\n     }\n     return basic;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,17 @@\n+public boolean isSimplePath() {\n+    if (!basicKnown) {\n+        basicKnown \u003d true;\n+        basic \u003d true;\n+        Step[] steps \u003d getSteps();\n+        for (int i \u003d 0; i \u003c steps.length; i++) {\n+            if (steps[i].getAxis() !\u003d Compiler.AXIS_CHILD || !(steps[i].getNodeTest() instanceof NodeNameTest) || ((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n+                basic \u003d false;\n+                break;\n+            }\n+            if (basic) {\n+                basic \u003d areBasicPredicates(steps[i].getPredicates());\n+            }\n+        }\n+    }\n+    return basic;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean isSimplePath() {\n    if (!basicKnown) {\n        basicKnown \u003d true;\n        basic \u003d true;\n        Step[] steps \u003d getSteps();\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            if (steps[i].getAxis() !\u003d Compiler.AXIS_CHILD || !(steps[i].getNodeTest() instanceof NodeNameTest) || ((NodeNameTest) steps[i].getNodeTest()).getNodeName().getName().equals(\"*\")) {\n                basic \u003d false;\n                break;\n            }\n            if (basic) {\n                basic \u003d areBasicPredicates(steps[i].getPredicates());\n            }\n        }\n    }\n    return basic;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 106,
      "functionName": "isSimplePath",
      "functionAnnotation": "",
      "functionDoc": "Recognized paths formatted as \u003ccode\u003efoo/bar[3]/baz[@name \u003d \u0027biz\u0027]\u003c/code\u003e.  The\nevaluation of such \"simple\" paths is optimized and streamlined.\n"
    }
  }
}