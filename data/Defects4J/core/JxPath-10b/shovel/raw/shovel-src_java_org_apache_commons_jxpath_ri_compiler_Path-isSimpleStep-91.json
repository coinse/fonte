{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Path.java",
  "functionName": "isSimpleStep",
  "functionId": "isSimpleStep___step-Step",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
  "functionAnnotation": "",
  "functionDoc": "A Step is \"simple\" if it takes one of these forms: \".\", \"/foo\",\n\"@bar\", \"/foo[3]\". If there are predicates, they should be \ncontext independent for the step to still be considered simple.\n",
  "functionStartLine": 91,
  "functionEndLine": 115,
  "numCommitsSeen": 21,
  "timeTaken": 716,
  "changeHistory": [
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "d52ff3460273690514d70e716be1ff3201dca8c8",
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00"
  ],
  "changeHistoryShort": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "d52ff3460273690514d70e716be1ff3201dca8c8": "Ybodychange",
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "1/31/07, 8:24 AM",
      "commitNameOld": "2130b277556eeb1ee97fbd4adc1c4e41c8994275",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 19.29,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean isSimpleStep(Step step) {\n    if (step.getAxis() \u003d\u003d Compiler.AXIS_SELF) {\n        NodeTest nodeTest \u003d step.getNodeTest();\n        if (!(nodeTest instanceof NodeTypeTest)) {\n            return false;\n        }\n        int nodeType \u003d ((NodeTypeTest) nodeTest).getNodeType();\n        if (nodeType !\u003d Compiler.NODE_TYPE_NODE) {\n            return false;\n        }\n        return areBasicPredicates(step.getPredicates());\n    }\n    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD || step.getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\n        NodeTest nodeTest \u003d step.getNodeTest();\n        if (!(nodeTest instanceof NodeNameTest)) {\n            return false;\n        }\n        if (((NodeNameTest) nodeTest).isWildcard()) {\n            return false;\n        }\n        return areBasicPredicates(step.getPredicates());\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 91,
      "functionName": "isSimpleStep",
      "functionAnnotation": "",
      "functionDoc": "A Step is \"simple\" if it takes one of these forms: \".\", \"/foo\",\n\"@bar\", \"/foo[3]\". If there are predicates, they should be \ncontext independent for the step to still be considered simple.\n",
      "diff": "@@ -1,23 +1,24 @@\n protected boolean isSimpleStep(Step step) {\n     if (step.getAxis() \u003d\u003d Compiler.AXIS_SELF) {\n         NodeTest nodeTest \u003d step.getNodeTest();\n         if (!(nodeTest instanceof NodeTypeTest)) {\n             return false;\n         }\n         int nodeType \u003d ((NodeTypeTest) nodeTest).getNodeType();\n         if (nodeType !\u003d Compiler.NODE_TYPE_NODE) {\n             return false;\n         }\n         return areBasicPredicates(step.getPredicates());\n-    } else if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD || step.getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\n+    }\n+    if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD || step.getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\n         NodeTest nodeTest \u003d step.getNodeTest();\n         if (!(nodeTest instanceof NodeNameTest)) {\n             return false;\n         }\n         if (((NodeNameTest) nodeTest).isWildcard()) {\n             return false;\n         }\n         return areBasicPredicates(step.getPredicates());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d52ff3460273690514d70e716be1ff3201dca8c8": {
      "type": "Ybodychange",
      "commitMessage": "Introduced NodeNameTest.isWildcard()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136901 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/24/04, 9:41 PM",
      "commitName": "d52ff3460273690514d70e716be1ff3201dca8c8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/29/04, 6:17 AM",
      "commitNameOld": "4fc265a938e1e9d13c407d4668ec8c864e85d799",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 24.64,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "protected boolean isSimpleStep(Step step) {\n    if (step.getAxis() \u003d\u003d Compiler.AXIS_SELF) {\n        NodeTest nodeTest \u003d step.getNodeTest();\n        if (!(nodeTest instanceof NodeTypeTest)) {\n            return false;\n        }\n        int nodeType \u003d ((NodeTypeTest) nodeTest).getNodeType();\n        if (nodeType !\u003d Compiler.NODE_TYPE_NODE) {\n            return false;\n        }\n        return areBasicPredicates(step.getPredicates());\n    } else if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD || step.getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\n        NodeTest nodeTest \u003d step.getNodeTest();\n        if (!(nodeTest instanceof NodeNameTest)) {\n            return false;\n        }\n        if (((NodeNameTest) nodeTest).isWildcard()) {\n            return false;\n        }\n        return areBasicPredicates(step.getPredicates());\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 89,
      "functionName": "isSimpleStep",
      "functionAnnotation": "",
      "functionDoc": "A Step is \"simple\" if it takes one of these forms: \".\", \"/foo\",\n\"@bar\", \"/foo[3]\". If there are predicates, they should be \ncontext independent for the step to still be considered simple.\n",
      "diff": "@@ -1,24 +1,23 @@\n protected boolean isSimpleStep(Step step) {\n     if (step.getAxis() \u003d\u003d Compiler.AXIS_SELF) {\n         NodeTest nodeTest \u003d step.getNodeTest();\n         if (!(nodeTest instanceof NodeTypeTest)) {\n             return false;\n         }\n         int nodeType \u003d ((NodeTypeTest) nodeTest).getNodeType();\n         if (nodeType !\u003d Compiler.NODE_TYPE_NODE) {\n             return false;\n         }\n         return areBasicPredicates(step.getPredicates());\n     } else if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD || step.getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\n         NodeTest nodeTest \u003d step.getNodeTest();\n         if (!(nodeTest instanceof NodeNameTest)) {\n             return false;\n         }\n-        String name \u003d ((NodeNameTest) nodeTest).getNodeName().getName();\n-        if (name.equals(\"*\")) {\n+        if (((NodeNameTest) nodeTest).isWildcard()) {\n             return false;\n         }\n         return areBasicPredicates(step.getPredicates());\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26ed002f4905b94a6a4275f9ad263cb8a2cadf00": {
      "type": "Yintroduced",
      "commitMessage": "Fixed an issue with searches in graphs containing DynamicPropertyHandlers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136888 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/22/04, 5:10 PM",
      "commitName": "26ed002f4905b94a6a4275f9ad263cb8a2cadf00",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,24 @@\n+protected boolean isSimpleStep(Step step) {\n+    if (step.getAxis() \u003d\u003d Compiler.AXIS_SELF) {\n+        NodeTest nodeTest \u003d step.getNodeTest();\n+        if (!(nodeTest instanceof NodeTypeTest)) {\n+            return false;\n+        }\n+        int nodeType \u003d ((NodeTypeTest) nodeTest).getNodeType();\n+        if (nodeType !\u003d Compiler.NODE_TYPE_NODE) {\n+            return false;\n+        }\n+        return areBasicPredicates(step.getPredicates());\n+    } else if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD || step.getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\n+        NodeTest nodeTest \u003d step.getNodeTest();\n+        if (!(nodeTest instanceof NodeNameTest)) {\n+            return false;\n+        }\n+        String name \u003d ((NodeNameTest) nodeTest).getNodeName().getName();\n+        if (name.equals(\"*\")) {\n+            return false;\n+        }\n+        return areBasicPredicates(step.getPredicates());\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected boolean isSimpleStep(Step step) {\n    if (step.getAxis() \u003d\u003d Compiler.AXIS_SELF) {\n        NodeTest nodeTest \u003d step.getNodeTest();\n        if (!(nodeTest instanceof NodeTypeTest)) {\n            return false;\n        }\n        int nodeType \u003d ((NodeTypeTest) nodeTest).getNodeType();\n        if (nodeType !\u003d Compiler.NODE_TYPE_NODE) {\n            return false;\n        }\n        return areBasicPredicates(step.getPredicates());\n    } else if (step.getAxis() \u003d\u003d Compiler.AXIS_CHILD || step.getAxis() \u003d\u003d Compiler.AXIS_ATTRIBUTE) {\n        NodeTest nodeTest \u003d step.getNodeTest();\n        if (!(nodeTest instanceof NodeNameTest)) {\n            return false;\n        }\n        String name \u003d ((NodeNameTest) nodeTest).getNodeName().getName();\n        if (name.equals(\"*\")) {\n            return false;\n        }\n        return areBasicPredicates(step.getPredicates());\n    }\n    return false;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 135,
      "functionName": "isSimpleStep",
      "functionAnnotation": "",
      "functionDoc": "A Step is \"simple\" if it takes one of these forms: \".\", \"/foo\",\n\"@bar\", \"/foo[3]\". If there are predicates, they should be \ncontext independent for the step to still be considered simple.\n"
    }
  }
}