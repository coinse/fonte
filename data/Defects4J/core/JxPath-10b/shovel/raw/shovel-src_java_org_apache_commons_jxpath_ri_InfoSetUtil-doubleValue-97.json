{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InfoSetUtil.java",
  "functionName": "doubleValue",
  "functionId": "doubleValue___object-Object",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Converts the supplied object to double\n",
  "functionStartLine": 97,
  "functionEndLine": 124,
  "numCommitsSeen": 27,
  "timeTaken": 2034,
  "changeHistory": [
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "57063255566c2a3a4006d29fb41534e6f63ad9d2",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "e6dfb7560bb8eb1952dbc50197d1d301940690c1",
    "323e8b214459b3977973c01a048a979dc778f100",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "65bf4da7590edc460ec68e18f35d201ec685bf86",
    "207c6dd98407506ff367d072be25b56f37989215",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "57063255566c2a3a4006d29fb41534e6f63ad9d2": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "e6dfb7560bb8eb1952dbc50197d1d301940690c1": "Ybodychange",
    "323e8b214459b3977973c01a048a979dc778f100": "Ymovefromfile",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Ybodychange",
    "65bf4da7590edc460ec68e18f35d201ec685bf86": "Ybodychange",
    "207c6dd98407506ff367d072be25b56f37989215": "Ymultichange(Ymodifierchange,Ybodychange)",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    }\n    if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    }\n    if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        try {\n            return Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            return Double.NaN;\n        }\n    }\n    if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    }\n    if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        return ptr \u003d\u003d null ? Double.NaN : doubleValue(ptr);\n    }\n    return doubleValue(stringValue(object));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 97,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "@@ -1,28 +1,27 @@\n public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n-    } else if (object instanceof Boolean) {\n+    }\n+    if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n-    } else if (object instanceof String) {\n+    }\n+    if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n-        double value;\n         try {\n-            value \u003d Double.parseDouble((String) object);\n+            return Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n-            value \u003d Double.NaN;\n+            return Double.NaN;\n         }\n-        return value;\n-    } else if (object instanceof NodePointer) {\n+    }\n+    if (object instanceof NodePointer) {\n         return doubleValue(((NodePointer) object).getValue());\n-    } else if (object instanceof EvalContext) {\n+    }\n+    if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getSingleNodePointer();\n-        if (ptr !\u003d null) {\n-            return doubleValue(ptr);\n-        }\n-        return Double.NaN;\n+        return ptr \u003d\u003d null ? Double.NaN : doubleValue(ptr);\n     }\n     return doubleValue(stringValue(object));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57063255566c2a3a4006d29fb41534e6f63ad9d2": {
      "type": "Ybodychange",
      "commitMessage": "Fixed Bug #28753: conversion of Boolean to Number\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136911 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/8/04, 1:07 PM",
      "commitName": "57063255566c2a3a4006d29fb41534e6f63ad9d2",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "2/29/04, 6:17 AM",
      "commitNameOld": "4fc265a938e1e9d13c407d4668ec8c864e85d799",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 69.24,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        if (ptr !\u003d null) {\n            return doubleValue(ptr);\n        }\n        return Double.NaN;\n    }\n    return doubleValue(stringValue(object));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 106,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "@@ -1,23 +1,28 @@\n public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n     } else if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n         double value;\n         try {\n             value \u003d Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n             value \u003d Double.NaN;\n         }\n         return value;\n     } else if (object instanceof NodePointer) {\n         return doubleValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n-        return doubleValue(stringValue(object));\n+        EvalContext ctx \u003d (EvalContext) object;\n+        Pointer ptr \u003d ctx.getSingleNodePointer();\n+        if (ptr !\u003d null) {\n+            return doubleValue(ptr);\n+        }\n+        return Double.NaN;\n     }\n     return doubleValue(stringValue(object));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/28/02, 11:22 PM",
      "commitNameOld": "fdfd50689b311e21a99b11380ea941df3d153802",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 42.93,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return doubleValue(stringValue(object));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 147,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "",
      "extendedDetails": {}
    },
    "e6dfb7560bb8eb1952dbc50197d1d301940690c1": {
      "type": "Ybodychange",
      "commitMessage": "Added conversion of objects to numbers via a string\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136777 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/3/02, 2:13 PM",
      "commitName": "e6dfb7560bb8eb1952dbc50197d1d301940690c1",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "6/15/02, 8:22 PM",
      "commitNameOld": "ab914f400352a3a525ba0a5d189eb2e4e1ade268",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 17.74,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return doubleValue(stringValue(object));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 147,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "@@ -1,23 +1,23 @@\n public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n     } else if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n         double value;\n         try {\n             value \u003d Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n             value \u003d Double.NaN;\n         }\n         return value;\n     } else if (object instanceof NodePointer) {\n         return doubleValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         return doubleValue(stringValue(object));\n     }\n-    return 0;\n+    return doubleValue(stringValue(object));\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ymovefromfile",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/7/02, 5:39 PM",
      "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return 0;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 140,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
        "newPath": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
        "oldMethodName": "doubleValue",
        "newMethodName": "doubleValue"
      }
    },
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": {
      "type": "Ybodychange",
      "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 6:00 PM",
      "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/23/02, 9:06 PM",
      "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return 0;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 695,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "@@ -1,23 +1,23 @@\n public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n     } else if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n         double value;\n         try {\n             value \u003d Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n             value \u003d Double.NaN;\n         }\n         return value;\n     } else if (object instanceof NodePointer) {\n-        return doubleValue(((NodePointer) object).getCanonicalValue());\n+        return doubleValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         return doubleValue(stringValue(object));\n     }\n     return 0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Ybodychange",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/11/02, 7:28 PM",
      "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getCanonicalValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return 0;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 677,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "@@ -1,23 +1,23 @@\n public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n     } else if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n         double value;\n         try {\n             value \u003d Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n             value \u003d Double.NaN;\n         }\n         return value;\n     } else if (object instanceof NodePointer) {\n-        return doubleValue(((NodePointer) object).getPrimitiveValue());\n+        return doubleValue(((NodePointer) object).getCanonicalValue());\n     } else if (object instanceof EvalContext) {\n         return doubleValue(stringValue(object));\n     }\n     return 0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65bf4da7590edc460ec68e18f35d201ec685bf86": {
      "type": "Ybodychange",
      "commitMessage": "Removed dependency on DOM from everywhere except where needed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/11/02, 7:28 PM",
      "commitName": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/9/02, 8:40 PM",
      "commitNameOld": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getPrimitiveValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return 0;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 677,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n",
      "diff": "@@ -1,25 +1,23 @@\n public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n     } else if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n         double value;\n         try {\n             value \u003d Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n             value \u003d Double.NaN;\n         }\n         return value;\n-    } else if (object instanceof Node) {\n-        return doubleValue(stringValue(object));\n     } else if (object instanceof NodePointer) {\n-        return doubleValue(((NodePointer) object).getValue());\n+        return doubleValue(((NodePointer) object).getPrimitiveValue());\n     } else if (object instanceof EvalContext) {\n         return doubleValue(stringValue(object));\n     }\n     return 0;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "207c6dd98407506ff367d072be25b56f37989215": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/01, 6:22 PM",
      "commitName": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 5:47 PM",
          "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 11.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof Node) {\n        return doubleValue(stringValue(object));\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return 0;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 623,
          "functionName": "doubleValue",
          "functionAnnotation": "",
          "functionDoc": "Converts the supplied object to double\n",
          "diff": "@@ -1,23 +1,25 @@\n-protected double doubleValue(Object object) {\n+public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n     } else if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n         double value;\n         try {\n             value \u003d Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n             value \u003d Double.NaN;\n         }\n         return value;\n+    } else if (object instanceof Node) {\n+        return doubleValue(stringValue(object));\n     } else if (object instanceof NodePointer) {\n         return doubleValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         return doubleValue(stringValue(object));\n     }\n     return 0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 5:47 PM",
          "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 11.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof Node) {\n        return doubleValue(stringValue(object));\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return 0;\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 623,
          "functionName": "doubleValue",
          "functionAnnotation": "",
          "functionDoc": "Converts the supplied object to double\n",
          "diff": "@@ -1,23 +1,25 @@\n-protected double doubleValue(Object object) {\n+public static double doubleValue(Object object) {\n     if (object instanceof Number) {\n         return ((Number) object).doubleValue();\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n     } else if (object instanceof String) {\n         if (object.equals(\"\")) {\n             return 0.0;\n         }\n         double value;\n         try {\n             value \u003d Double.parseDouble((String) object);\n         } catch (NumberFormatException ex) {\n             value \u003d Double.NaN;\n         }\n         return value;\n+    } else if (object instanceof Node) {\n+        return doubleValue(stringValue(object));\n     } else if (object instanceof NodePointer) {\n         return doubleValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         return doubleValue(stringValue(object));\n     }\n     return 0;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,23 @@\n+protected double doubleValue(Object object) {\n+    if (object instanceof Number) {\n+        return ((Number) object).doubleValue();\n+    } else if (object instanceof Boolean) {\n+        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n+    } else if (object instanceof String) {\n+        if (object.equals(\"\")) {\n+            return 0.0;\n+        }\n+        double value;\n+        try {\n+            value \u003d Double.parseDouble((String) object);\n+        } catch (NumberFormatException ex) {\n+            value \u003d Double.NaN;\n+        }\n+        return value;\n+    } else if (object instanceof NodePointer) {\n+        return doubleValue(((NodePointer) object).getValue());\n+    } else if (object instanceof EvalContext) {\n+        return doubleValue(stringValue(object));\n+    }\n+    return 0;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected double doubleValue(Object object) {\n    if (object instanceof Number) {\n        return ((Number) object).doubleValue();\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? 0.0 : 1.0;\n    } else if (object instanceof String) {\n        if (object.equals(\"\")) {\n            return 0.0;\n        }\n        double value;\n        try {\n            value \u003d Double.parseDouble((String) object);\n        } catch (NumberFormatException ex) {\n            value \u003d Double.NaN;\n        }\n        return value;\n    } else if (object instanceof NodePointer) {\n        return doubleValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        return doubleValue(stringValue(object));\n    }\n    return 0;\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 605,
      "functionName": "doubleValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to double\n"
    }
  }
}