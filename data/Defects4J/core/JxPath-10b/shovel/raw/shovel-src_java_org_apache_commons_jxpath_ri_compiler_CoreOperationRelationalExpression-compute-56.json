{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CoreOperationRelationalExpression.java",
  "functionName": "compute",
  "functionId": "compute___left-Object__right-Object",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 56,
  "functionEndLine": 84,
  "numCommitsSeen": 3,
  "timeTaken": 215,
  "changeHistory": [
    "1befe1b93eec887971e729b89dd4d900319a06b0",
    "58fac658aba985ba77f8bd0156c6d01bec8d991b"
  ],
  "changeHistoryShort": {
    "1befe1b93eec887971e729b89dd4d900319a06b0": "Ybodychange",
    "58fac658aba985ba77f8bd0156c6d01bec8d991b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1befe1b93eec887971e729b89dd4d900319a06b0": {
      "type": "Ybodychange",
      "commitMessage": "[JXPATH-95] fix NaN comparisons\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@555334 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/11/07, 9:44 AM",
      "commitName": "1befe1b93eec887971e729b89dd4d900319a06b0",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "7/10/07, 3:30 PM",
      "commitNameOld": "bb12c5b5ec5ce80c8148749ffef72956c01571a0",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean compute(Object left, Object right) {\n    left \u003d reduce(left);\n    right \u003d reduce(right);\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator \u0026\u0026 right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    double ld \u003d InfoSetUtil.doubleValue(left);\n    if (Double.isNaN(ld)) {\n        return false;\n    }\n    double rd \u003d InfoSetUtil.doubleValue(right);\n    if (Double.isNaN(rd)) {\n        return false;\n    }\n    return evaluateCompare(ld \u003d\u003d rd ? 0 : ld \u003c rd ? -1 : 1);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
      "functionStartLine": 56,
      "functionName": "compute",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,28 @@\n private boolean compute(Object left, Object right) {\n     left \u003d reduce(left);\n     right \u003d reduce(right);\n     if (left instanceof InitialContext) {\n         ((InitialContext) left).reset();\n     }\n     if (right instanceof InitialContext) {\n         ((InitialContext) right).reset();\n     }\n     if (left instanceof Iterator \u0026\u0026 right instanceof Iterator) {\n         return findMatch((Iterator) left, (Iterator) right);\n     }\n     if (left instanceof Iterator) {\n         return containsMatch((Iterator) left, right);\n     }\n     if (right instanceof Iterator) {\n         return containsMatch((Iterator) right, left);\n     }\n-    return evaluateCompare(compare(left, right));\n+    double ld \u003d InfoSetUtil.doubleValue(left);\n+    if (Double.isNaN(ld)) {\n+        return false;\n+    }\n+    double rd \u003d InfoSetUtil.doubleValue(right);\n+    if (Double.isNaN(rd)) {\n+        return false;\n+    }\n+    return evaluateCompare(ld \u003d\u003d rd ? 0 : ld \u003c rd ? -1 : 1);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58fac658aba985ba77f8bd0156c6d01bec8d991b": {
      "type": "Yintroduced",
      "commitMessage": "[JXPATH-93] relational operators did not conform to XPath spec\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@555094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/10/07, 2:59 PM",
      "commitName": "58fac658aba985ba77f8bd0156c6d01bec8d991b",
      "commitAuthor": "Matthew Jason Benson",
      "diff": "@@ -0,0 +1,20 @@\n+private boolean compute(Object left, Object right) {\n+    left \u003d reduce(left);\n+    right \u003d reduce(right);\n+    if (left instanceof InitialContext) {\n+        ((InitialContext) left).reset();\n+    }\n+    if (right instanceof InitialContext) {\n+        ((InitialContext) right).reset();\n+    }\n+    if (left instanceof Iterator \u0026\u0026 right instanceof Iterator) {\n+        return findMatch((Iterator) left, (Iterator) right);\n+    }\n+    if (left instanceof Iterator) {\n+        return containsMatch((Iterator) left, right);\n+    }\n+    if (right instanceof Iterator) {\n+        return containsMatch((Iterator) right, left);\n+    }\n+    return evaluateCompare(compare(left, right));\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean compute(Object left, Object right) {\n    left \u003d reduce(left);\n    right \u003d reduce(right);\n    if (left instanceof InitialContext) {\n        ((InitialContext) left).reset();\n    }\n    if (right instanceof InitialContext) {\n        ((InitialContext) right).reset();\n    }\n    if (left instanceof Iterator \u0026\u0026 right instanceof Iterator) {\n        return findMatch((Iterator) left, (Iterator) right);\n    }\n    if (left instanceof Iterator) {\n        return containsMatch((Iterator) left, right);\n    }\n    if (right instanceof Iterator) {\n        return containsMatch((Iterator) right, left);\n    }\n    return evaluateCompare(compare(left, right));\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
      "functionStartLine": 55,
      "functionName": "compute",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}