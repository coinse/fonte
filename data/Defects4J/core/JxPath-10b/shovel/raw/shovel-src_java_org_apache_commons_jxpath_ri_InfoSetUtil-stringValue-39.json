{
  "origin": "codeshovel",
  "repositoryName": "JxPath-10b",
  "repositoryPath": "/tmp/JxPath-10b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InfoSetUtil.java",
  "functionName": "stringValue",
  "functionId": "stringValue___object-Object",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Converts the supplied object to String\n",
  "functionStartLine": 39,
  "functionEndLine": 63,
  "numCommitsSeen": 27,
  "timeTaken": 2127,
  "changeHistory": [
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "aadb43be4cd1369c2911892387cbb31f3a5855d8",
    "323e8b214459b3977973c01a048a979dc778f100",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
    "989fbe2e44ad4e994dc810fa54290636a7339712",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
    "65bf4da7590edc460ec68e18f35d201ec685bf86",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
    "207c6dd98407506ff367d072be25b56f37989215",
    "bc53a66311b9b22e471dd74860c7df75eebe9837"
  ],
  "changeHistoryShort": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "aadb43be4cd1369c2911892387cbb31f3a5855d8": "Ybodychange",
    "323e8b214459b3977973c01a048a979dc778f100": "Ymovefromfile",
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": "Ybodychange",
    "989fbe2e44ad4e994dc810fa54290636a7339712": "Ybodychange",
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": "Ybodychange",
    "65bf4da7590edc460ec68e18f35d201ec685bf86": "Ybodychange",
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": "Ybodychange",
    "207c6dd98407506ff367d072be25b56f37989215": "Ymultichange(Ymodifierchange,Ybodychange)",
    "bc53a66311b9b22e471dd74860c7df75eebe9837": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    }\n    if (object instanceof Number) {\n        double d \u003d ((Number) object).doubleValue();\n        long l \u003d ((Number) object).longValue();\n        return d \u003d\u003d l ? String.valueOf(l) : String.valueOf(d);\n    }\n    if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    }\n    if (object \u003d\u003d null) {\n        return \"\";\n    }\n    if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    }\n    if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        return ptr \u003d\u003d null ? \"\" : stringValue(ptr);\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 39,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "@@ -1,26 +1,25 @@\n public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n-    } else if (object instanceof Number) {\n+    }\n+    if (object instanceof Number) {\n         double d \u003d ((Number) object).doubleValue();\n         long l \u003d ((Number) object).longValue();\n-        if (d \u003d\u003d l) {\n-            return String.valueOf(l);\n-        }\n-        return String.valueOf(d);\n-    } else if (object instanceof Boolean) {\n+        return d \u003d\u003d l ? String.valueOf(l) : String.valueOf(d);\n+    }\n+    if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n-    } else if (object \u003d\u003d null) {\n+    }\n+    if (object \u003d\u003d null) {\n         return \"\";\n-    } else if (object instanceof NodePointer) {\n+    }\n+    if (object instanceof NodePointer) {\n         return stringValue(((NodePointer) object).getValue());\n-    } else if (object instanceof EvalContext) {\n+    }\n+    if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getSingleNodePointer();\n-        if (ptr !\u003d null) {\n-            return stringValue(ptr);\n-        }\n-        return \"\";\n+        return ptr \u003d\u003d null ? \"\" : stringValue(ptr);\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "11/28/02, 11:22 PM",
      "commitNameOld": "fdfd50689b311e21a99b11380ea941df3d153802",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 42.93,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        double d \u003d ((Number) object).doubleValue();\n        long l \u003d ((Number) object).longValue();\n        if (d \u003d\u003d l) {\n            return String.valueOf(l);\n        }\n        return String.valueOf(d);\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 83,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "",
      "extendedDetails": {}
    },
    "aadb43be4cd1369c2911892387cbb31f3a5855d8": {
      "type": "Ybodychange",
      "commitMessage": "Fixed number-\u003estring conversion\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136759 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/8/02, 3:43 PM",
      "commitName": "aadb43be4cd1369c2911892387cbb31f3a5855d8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/7/02, 5:40 PM",
      "commitNameOld": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 31.92,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        double d \u003d ((Number) object).doubleValue();\n        long l \u003d ((Number) object).longValue();\n        if (d \u003d\u003d l) {\n            return String.valueOf(l);\n        }\n        return String.valueOf(d);\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 81,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "@@ -1,21 +1,26 @@\n public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n-        return String.valueOf(((Number) object).doubleValue());\n+        double d \u003d ((Number) object).doubleValue();\n+        long l \u003d ((Number) object).longValue();\n+        if (d \u003d\u003d l) {\n+            return String.valueOf(l);\n+        }\n+        return String.valueOf(d);\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n     } else if (object instanceof NodePointer) {\n         return stringValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getSingleNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ymovefromfile",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/7/02, 5:39 PM",
      "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
      "functionStartLine": 81,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
        "newPath": "src/java/org/apache/commons/jxpath/ri/InfoSetUtil.java",
        "oldMethodName": "stringValue",
        "newMethodName": "stringValue"
      }
    },
    "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0": {
      "type": "Ybodychange",
      "commitMessage": "Added pointer comparison to ensure document order\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/25/02, 6:00 PM",
      "commitName": "b8780b1aa2eff978c3612fa43b58efb5b9ca50a0",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/23/02, 9:06 PM",
      "commitNameOld": "3b6b30adb846a9f2f0fa070f9c8c848f04d8b37f",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 632,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "@@ -1,21 +1,21 @@\n public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n         return String.valueOf(((Number) object).doubleValue());\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n     } else if (object instanceof NodePointer) {\n-        return stringValue(((NodePointer) object).getCanonicalValue());\n+        return stringValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getSingleNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "989fbe2e44ad4e994dc810fa54290636a7339712": {
      "type": "Ybodychange",
      "commitMessage": "Simplified ExpressionContext implementation\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136727 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/23/02, 8:32 PM",
      "commitName": "989fbe2e44ad4e994dc810fa54290636a7339712",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/21/02, 2:52 PM",
      "commitNameOld": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getCanonicalValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getSingleNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 587,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "@@ -1,21 +1,21 @@\n public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n         return String.valueOf(((Number) object).doubleValue());\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n     } else if (object instanceof NodePointer) {\n         return stringValue(((NodePointer) object).getCanonicalValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n-        Pointer ptr \u003d ctx.getContextNodePointer();\n+        Pointer ptr \u003d ctx.getSingleNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6e246c774fb91eefeadf28c46a10e768ac8cc7b": {
      "type": "Ybodychange",
      "commitMessage": "Major refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/02, 2:52 PM",
      "commitName": "a6e246c774fb91eefeadf28c46a10e768ac8cc7b",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/11/02, 7:28 PM",
      "commitNameOld": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 9.81,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getCanonicalValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getContextNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 614,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "@@ -1,21 +1,21 @@\n public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n         return String.valueOf(((Number) object).doubleValue());\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n     } else if (object instanceof NodePointer) {\n-        return stringValue(((NodePointer) object).getPrimitiveValue());\n+        return stringValue(((NodePointer) object).getCanonicalValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getContextNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65bf4da7590edc460ec68e18f35d201ec685bf86": {
      "type": "Ybodychange",
      "commitMessage": "Removed dependency on DOM from everywhere except where needed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/11/02, 7:28 PM",
      "commitName": "65bf4da7590edc460ec68e18f35d201ec685bf86",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "4/9/02, 8:40 PM",
      "commitNameOld": "34b7a47ae949c763178a457582a5df2cb564f53d",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getPrimitiveValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getContextNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 614,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "@@ -1,46 +1,21 @@\n public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n         return String.valueOf(((Number) object).doubleValue());\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n-    } else if (object instanceof Node) {\n-        Node node \u003d (Node) object;\n-        int nodeType \u003d node.getNodeType();\n-        if (nodeType \u003d\u003d Node.COMMENT_NODE) {\n-            String text \u003d ((Comment) node).getData();\n-            return text \u003d\u003d null ? \"\" : text.trim();\n-        } else if (nodeType \u003d\u003d Node.TEXT_NODE || nodeType \u003d\u003d Node.CDATA_SECTION_NODE) {\n-            String text \u003d node.getNodeValue();\n-            return text \u003d\u003d null ? \"\" : text.trim();\n-        } else if (nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n-            String text \u003d ((ProcessingInstruction) node).getData();\n-            return text \u003d\u003d null ? \"\" : text.trim();\n-        } else {\n-            NodeList list \u003d node.getChildNodes();\n-            StringBuffer buf \u003d new StringBuffer(16);\n-            for (int i \u003d 0; i \u003c list.getLength(); i++) {\n-                Node child \u003d list.item(i);\n-                if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n-                    buf.append(child.getNodeValue());\n-                } else {\n-                    buf.append(stringValue(child));\n-                }\n-            }\n-            return buf.toString().trim();\n-        }\n     } else if (object instanceof NodePointer) {\n-        return stringValue(((NodePointer) object).getValue());\n+        return stringValue(((NodePointer) object).getPrimitiveValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getContextNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7048cacf72013ed3dcac2b60755aad10cb8bb2b9": {
      "type": "Ybodychange",
      "commitMessage": "Support for namespaces, implementation clean-up\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/21/01, 4:22 PM",
      "commitName": "7048cacf72013ed3dcac2b60755aad10cb8bb2b9",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "9/2/01, 6:22 PM",
      "commitNameOld": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 18.92,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof Node) {\n        Node node \u003d (Node) object;\n        int nodeType \u003d node.getNodeType();\n        if (nodeType \u003d\u003d Node.COMMENT_NODE) {\n            String text \u003d ((Comment) node).getData();\n            return text \u003d\u003d null ? \"\" : text.trim();\n        } else if (nodeType \u003d\u003d Node.TEXT_NODE || nodeType \u003d\u003d Node.CDATA_SECTION_NODE) {\n            String text \u003d node.getNodeValue();\n            return text \u003d\u003d null ? \"\" : text.trim();\n        } else if (nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n            String text \u003d ((ProcessingInstruction) node).getData();\n            return text \u003d\u003d null ? \"\" : text.trim();\n        } else {\n            NodeList list \u003d node.getChildNodes();\n            StringBuffer buf \u003d new StringBuffer(16);\n            for (int i \u003d 0; i \u003c list.getLength(); i++) {\n                Node child \u003d list.item(i);\n                if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n                    buf.append(child.getNodeValue());\n                } else {\n                    buf.append(stringValue(child));\n                }\n            }\n            return buf.toString().trim();\n        }\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getContextNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 567,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n",
      "diff": "@@ -1,33 +1,46 @@\n public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n         return String.valueOf(((Number) object).doubleValue());\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n     } else if (object instanceof Node) {\n-        NodeList list \u003d ((Node) object).getChildNodes();\n-        StringBuffer buf \u003d new StringBuffer(16);\n-        for (int i \u003d 0; i \u003c list.getLength(); i++) {\n-            Node child \u003d list.item(i);\n-            if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n-                buf.append(child.getNodeValue());\n-            } else {\n-                buf.append(stringValue(child));\n+        Node node \u003d (Node) object;\n+        int nodeType \u003d node.getNodeType();\n+        if (nodeType \u003d\u003d Node.COMMENT_NODE) {\n+            String text \u003d ((Comment) node).getData();\n+            return text \u003d\u003d null ? \"\" : text.trim();\n+        } else if (nodeType \u003d\u003d Node.TEXT_NODE || nodeType \u003d\u003d Node.CDATA_SECTION_NODE) {\n+            String text \u003d node.getNodeValue();\n+            return text \u003d\u003d null ? \"\" : text.trim();\n+        } else if (nodeType \u003d\u003d Node.PROCESSING_INSTRUCTION_NODE) {\n+            String text \u003d ((ProcessingInstruction) node).getData();\n+            return text \u003d\u003d null ? \"\" : text.trim();\n+        } else {\n+            NodeList list \u003d node.getChildNodes();\n+            StringBuffer buf \u003d new StringBuffer(16);\n+            for (int i \u003d 0; i \u003c list.getLength(); i++) {\n+                Node child \u003d list.item(i);\n+                if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n+                    buf.append(child.getNodeValue());\n+                } else {\n+                    buf.append(stringValue(child));\n+                }\n             }\n+            return buf.toString().trim();\n         }\n-        return buf.toString().trim();\n     } else if (object instanceof NodePointer) {\n         return stringValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getContextNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "207c6dd98407506ff367d072be25b56f37989215": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/01, 6:22 PM",
      "commitName": "207c6dd98407506ff367d072be25b56f37989215",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 5:47 PM",
          "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 11.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof Node) {\n        NodeList list \u003d ((Node) object).getChildNodes();\n        StringBuffer buf \u003d new StringBuffer(16);\n        for (int i \u003d 0; i \u003c list.getLength(); i++) {\n            Node child \u003d list.item(i);\n            if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n                buf.append(child.getNodeValue());\n            } else {\n                buf.append(stringValue(child));\n            }\n        }\n        return buf.toString().trim();\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getContextNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 547,
          "functionName": "stringValue",
          "functionAnnotation": "",
          "functionDoc": "Converts the supplied object to String\n",
          "diff": "@@ -1,21 +1,33 @@\n-protected String stringValue(Object object) {\n+public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n         return String.valueOf(((Number) object).doubleValue());\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n+    } else if (object instanceof Node) {\n+        NodeList list \u003d ((Node) object).getChildNodes();\n+        StringBuffer buf \u003d new StringBuffer(16);\n+        for (int i \u003d 0; i \u003c list.getLength(); i++) {\n+            Node child \u003d list.item(i);\n+            if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n+                buf.append(child.getNodeValue());\n+            } else {\n+                buf.append(stringValue(child));\n+            }\n+        }\n+        return buf.toString().trim();\n     } else if (object instanceof NodePointer) {\n         return stringValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getContextNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Moved PropertyIterator to ...pointers,\nadded support for DOM objects,\nadded support for Containers,\nfixed some bugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136700 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "9/2/01, 6:22 PM",
          "commitName": "207c6dd98407506ff367d072be25b56f37989215",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "8/22/01, 5:47 PM",
          "commitNameOld": "bc53a66311b9b22e471dd74860c7df75eebe9837",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 11.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public static String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof Node) {\n        NodeList list \u003d ((Node) object).getChildNodes();\n        StringBuffer buf \u003d new StringBuffer(16);\n        for (int i \u003d 0; i \u003c list.getLength(); i++) {\n            Node child \u003d list.item(i);\n            if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n                buf.append(child.getNodeValue());\n            } else {\n                buf.append(stringValue(child));\n            }\n        }\n        return buf.toString().trim();\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getContextNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
          "functionStartLine": 547,
          "functionName": "stringValue",
          "functionAnnotation": "",
          "functionDoc": "Converts the supplied object to String\n",
          "diff": "@@ -1,21 +1,33 @@\n-protected String stringValue(Object object) {\n+public static String stringValue(Object object) {\n     if (object instanceof String) {\n         return (String) object;\n     } else if (object instanceof Number) {\n         return String.valueOf(((Number) object).doubleValue());\n     } else if (object instanceof Boolean) {\n         return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n     } else if (object \u003d\u003d null) {\n         return \"\";\n+    } else if (object instanceof Node) {\n+        NodeList list \u003d ((Node) object).getChildNodes();\n+        StringBuffer buf \u003d new StringBuffer(16);\n+        for (int i \u003d 0; i \u003c list.getLength(); i++) {\n+            Node child \u003d list.item(i);\n+            if (child.getNodeType() \u003d\u003d Node.TEXT_NODE) {\n+                buf.append(child.getNodeValue());\n+            } else {\n+                buf.append(stringValue(child));\n+            }\n+        }\n+        return buf.toString().trim();\n     } else if (object instanceof NodePointer) {\n         return stringValue(((NodePointer) object).getValue());\n     } else if (object instanceof EvalContext) {\n         EvalContext ctx \u003d (EvalContext) object;\n         Pointer ptr \u003d ctx.getContextNodePointer();\n         if (ptr !\u003d null) {\n             return stringValue(ptr);\n         }\n         return \"\";\n     }\n     return String.valueOf(object);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bc53a66311b9b22e471dd74860c7df75eebe9837": {
      "type": "Yintroduced",
      "commitMessage": "Initial submission\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136698 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/22/01, 5:47 PM",
      "commitName": "bc53a66311b9b22e471dd74860c7df75eebe9837",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,21 @@\n+protected String stringValue(Object object) {\n+    if (object instanceof String) {\n+        return (String) object;\n+    } else if (object instanceof Number) {\n+        return String.valueOf(((Number) object).doubleValue());\n+    } else if (object instanceof Boolean) {\n+        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n+    } else if (object \u003d\u003d null) {\n+        return \"\";\n+    } else if (object instanceof NodePointer) {\n+        return stringValue(((NodePointer) object).getValue());\n+    } else if (object instanceof EvalContext) {\n+        EvalContext ctx \u003d (EvalContext) object;\n+        Pointer ptr \u003d ctx.getContextNodePointer();\n+        if (ptr !\u003d null) {\n+            return stringValue(ptr);\n+        }\n+        return \"\";\n+    }\n+    return String.valueOf(object);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected String stringValue(Object object) {\n    if (object instanceof String) {\n        return (String) object;\n    } else if (object instanceof Number) {\n        return String.valueOf(((Number) object).doubleValue());\n    } else if (object instanceof Boolean) {\n        return ((Boolean) object).booleanValue() ? \"true\" : \"false\";\n    } else if (object \u003d\u003d null) {\n        return \"\";\n    } else if (object instanceof NodePointer) {\n        return stringValue(((NodePointer) object).getValue());\n    } else if (object instanceof EvalContext) {\n        EvalContext ctx \u003d (EvalContext) object;\n        Pointer ptr \u003d ctx.getContextNodePointer();\n        if (ptr !\u003d null) {\n            return stringValue(ptr);\n        }\n        return \"\";\n    }\n    return String.valueOf(object);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 546,
      "functionName": "stringValue",
      "functionAnnotation": "",
      "functionDoc": "Converts the supplied object to String\n"
    }
  }
}