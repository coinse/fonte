{
  "origin": "codeshovel",
  "repositoryName": "JxPath-12b",
  "repositoryPath": "/tmp/JxPath-12b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Path.java",
  "functionName": "getSingleNodePointerForSteps",
  "functionId": "getSingleNodePointerForSteps___context-EvalContext",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
  "functionAnnotation": "",
  "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
  "functionStartLine": 146,
  "functionEndLine": 159,
  "numCommitsSeen": 34,
  "timeTaken": 1758,
  "changeHistory": [
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "a3e590e95b0200e58068cab4b1ea91c5313d46ee",
    "323e8b214459b3977973c01a048a979dc778f100",
    "112774edae824e6e07ed9d64f637b4b7c19cea3b"
  ],
  "changeHistoryShort": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Yformatchange",
    "a3e590e95b0200e58068cab4b1ea91c5313d46ee": "Ybodychange",
    "323e8b214459b3977973c01a048a979dc778f100": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
    "112774edae824e6e07ed9d64f637b4b7c19cea3b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "1/31/07, 8:24 AM",
      "commitNameOld": "2130b277556eeb1ee97fbd4adc1c4e41c8994275",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 19.29,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretSimpleLocationPath(context, ptr, steps);\n    }\n    return searchForPath(context);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 146,
      "functionName": "getSingleNodePointerForSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
      "diff": "@@ -1,11 +1,10 @@\n protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context.getSingleNodePointer();\n     }\n     if (isSimplePath()) {\n         NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n         return SimplePathInterpreter.interpretSimpleLocationPath(context, ptr, steps);\n-    } else {\n-        return searchForPath(context);\n     }\n+    return searchForPath(context);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Yformatchange",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 7:59 PM",
      "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 90.11,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretSimpleLocationPath(context, ptr, steps);\n    } else {\n        return searchForPath(context);\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 180,
      "functionName": "getSingleNodePointerForSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a3e590e95b0200e58068cab4b1ea91c5313d46ee": {
      "type": "Ybodychange",
      "commitMessage": "Changed to new SimplePathInterpreter APIs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136792 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:39 PM",
      "commitName": "a3e590e95b0200e58068cab4b1ea91c5313d46ee",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "5/7/02, 5:40 PM",
      "commitNameOld": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 94.04,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretSimpleLocationPath(context, ptr, steps);\n    } else {\n        return searchForPath(context);\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
      "functionStartLine": 164,
      "functionName": "getSingleNodePointerForSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
      "diff": "@@ -1,20 +1,11 @@\n protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context.getSingleNodePointer();\n     }\n     if (isSimplePath()) {\n         NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n+        return SimplePathInterpreter.interpretSimpleLocationPath(context, ptr, steps);\n     } else {\n-        for (int i \u003d 0; i \u003c steps.length; i++) {\n-            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n-            Expression[] predicates \u003d steps[i].getPredicates();\n-            if (predicates !\u003d null) {\n-                for (int j \u003d 0; j \u003c predicates.length; j++) {\n-                    context \u003d new PredicateContext(context, predicates[j]);\n-                }\n-            }\n-        }\n-        return context.getSingleNodePointer();\n+        return searchForPath(context);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "323e8b214459b3977973c01a048a979dc778f100": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/02, 5:40 PM",
      "commitName": "323e8b214459b3977973c01a048a979dc778f100",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n    } else {\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n            Expression[] predicates \u003d steps[i].getPredicates();\n            if (predicates !\u003d null) {\n                for (int j \u003d 0; j \u003c predicates.length; j++) {\n                    context \u003d new PredicateContext(context, predicates[j]);\n                }\n            }\n        }\n        return context.getSingleNodePointer();\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 155,
          "functionName": "getSingleNodePointerForSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
          "diff": "@@ -1,21 +1,20 @@\n-private Pointer getSingleNodePointerForSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context.getSingleNodePointer();\n     }\n-    if (path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE)) {\n+    if (isSimplePath()) {\n         NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-        return SimplePathInterpreter.interpretPath(this, ptr, steps);\n+        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n     } else {\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n             context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n             Expression[] predicates \u003d steps[i].getPredicates();\n             if (predicates !\u003d null) {\n                 for (int j \u003d 0; j \u003c predicates.length; j++) {\n                     context \u003d new PredicateContext(context, predicates[j]);\n                 }\n             }\n         }\n         return context.getSingleNodePointer();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
            "newPath": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
            "oldMethodName": "getSingleNodePointerForSteps",
            "newMethodName": "getSingleNodePointerForSteps"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n    } else {\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n            Expression[] predicates \u003d steps[i].getPredicates();\n            if (predicates !\u003d null) {\n                for (int j \u003d 0; j \u003c predicates.length; j++) {\n                    context \u003d new PredicateContext(context, predicates[j]);\n                }\n            }\n        }\n        return context.getSingleNodePointer();\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 155,
          "functionName": "getSingleNodePointerForSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
          "diff": "@@ -1,21 +1,20 @@\n-private Pointer getSingleNodePointerForSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context.getSingleNodePointer();\n     }\n-    if (path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE)) {\n+    if (isSimplePath()) {\n         NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-        return SimplePathInterpreter.interpretPath(this, ptr, steps);\n+        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n     } else {\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n             context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n             Expression[] predicates \u003d steps[i].getPredicates();\n             if (predicates !\u003d null) {\n                 for (int j \u003d 0; j \u003c predicates.length; j++) {\n                     context \u003d new PredicateContext(context, predicates[j]);\n                 }\n             }\n         }\n         return context.getSingleNodePointer();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n    } else {\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n            Expression[] predicates \u003d steps[i].getPredicates();\n            if (predicates !\u003d null) {\n                for (int j \u003d 0; j \u003c predicates.length; j++) {\n                    context \u003d new PredicateContext(context, predicates[j]);\n                }\n            }\n        }\n        return context.getSingleNodePointer();\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 155,
          "functionName": "getSingleNodePointerForSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
          "diff": "@@ -1,21 +1,20 @@\n-private Pointer getSingleNodePointerForSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context.getSingleNodePointer();\n     }\n-    if (path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE)) {\n+    if (isSimplePath()) {\n         NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-        return SimplePathInterpreter.interpretPath(this, ptr, steps);\n+        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n     } else {\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n             context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n             Expression[] predicates \u003d steps[i].getPredicates();\n             if (predicates !\u003d null) {\n                 for (int j \u003d 0; j \u003c predicates.length; j++) {\n                     context \u003d new PredicateContext(context, predicates[j]);\n                 }\n             }\n         }\n         return context.getSingleNodePointer();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n    } else {\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n            Expression[] predicates \u003d steps[i].getPredicates();\n            if (predicates !\u003d null) {\n                for (int j \u003d 0; j \u003c predicates.length; j++) {\n                    context \u003d new PredicateContext(context, predicates[j]);\n                }\n            }\n        }\n        return context.getSingleNodePointer();\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 155,
          "functionName": "getSingleNodePointerForSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
          "diff": "@@ -1,21 +1,20 @@\n-private Pointer getSingleNodePointerForSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context.getSingleNodePointer();\n     }\n-    if (path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE)) {\n+    if (isSimplePath()) {\n         NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-        return SimplePathInterpreter.interpretPath(this, ptr, steps);\n+        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n     } else {\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n             context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n             Expression[] predicates \u003d steps[i].getPredicates();\n             if (predicates !\u003d null) {\n                 for (int j \u003d 0; j \u003c predicates.length; j++) {\n                     context \u003d new PredicateContext(context, predicates[j]);\n                 }\n             }\n         }\n         return context.getSingleNodePointer();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Given a root context, walks a path therefrom and finds the \npointer to the first element matching the path.\n",
            "newValue": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136743 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/02, 5:40 PM",
          "commitName": "323e8b214459b3977973c01a048a979dc778f100",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "5/7/02, 5:39 PM",
          "commitNameOld": "c6d36b46057b4d441556e6275bcd7d13d242fa02",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (isSimplePath()) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n    } else {\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n            Expression[] predicates \u003d steps[i].getPredicates();\n            if (predicates !\u003d null) {\n                for (int j \u003d 0; j \u003c predicates.length; j++) {\n                    context \u003d new PredicateContext(context, predicates[j]);\n                }\n            }\n        }\n        return context.getSingleNodePointer();\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/compiler/Path.java",
          "functionStartLine": 155,
          "functionName": "getSingleNodePointerForSteps",
          "functionAnnotation": "",
          "functionDoc": "Given a root context, walks a path therefrom and finds the\npointer to the first element matching the path.\n",
          "diff": "@@ -1,21 +1,20 @@\n-private Pointer getSingleNodePointerForSteps(EvalContext context, Path path) {\n-    Step[] steps \u003d path.getSteps();\n+protected Pointer getSingleNodePointerForSteps(EvalContext context) {\n     if (steps.length \u003d\u003d 0) {\n         return context.getSingleNodePointer();\n     }\n-    if (path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE)) {\n+    if (isSimplePath()) {\n         NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n-        return SimplePathInterpreter.interpretPath(this, ptr, steps);\n+        return SimplePathInterpreter.interpretPath(context, ptr, steps);\n     } else {\n         for (int i \u003d 0; i \u003c steps.length; i++) {\n             context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n             Expression[] predicates \u003d steps[i].getPredicates();\n             if (predicates !\u003d null) {\n                 for (int j \u003d 0; j \u003c predicates.length; j++) {\n                     context \u003d new PredicateContext(context, predicates[j]);\n                 }\n             }\n         }\n         return context.getSingleNodePointer();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, path-Path]",
            "newValue": "[context-EvalContext]"
          }
        }
      ]
    },
    "112774edae824e6e07ed9d64f637b4b7c19cea3b": {
      "type": "Yintroduced",
      "commitMessage": "Now implements Iterator\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/27/02, 9:36 PM",
      "commitName": "112774edae824e6e07ed9d64f637b4b7c19cea3b",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,21 @@\n+private Pointer getSingleNodePointerForSteps(EvalContext context, Path path) {\n+    Step[] steps \u003d path.getSteps();\n+    if (steps.length \u003d\u003d 0) {\n+        return context.getSingleNodePointer();\n+    }\n+    if (path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE)) {\n+        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n+        return SimplePathInterpreter.interpretPath(this, ptr, steps);\n+    } else {\n+        for (int i \u003d 0; i \u003c steps.length; i++) {\n+            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n+            Expression[] predicates \u003d steps[i].getPredicates();\n+            if (predicates !\u003d null) {\n+                for (int j \u003d 0; j \u003c predicates.length; j++) {\n+                    context \u003d new PredicateContext(context, predicates[j]);\n+                }\n+            }\n+        }\n+        return context.getSingleNodePointer();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Pointer getSingleNodePointerForSteps(EvalContext context, Path path) {\n    Step[] steps \u003d path.getSteps();\n    if (steps.length \u003d\u003d 0) {\n        return context.getSingleNodePointer();\n    }\n    if (path.getEvaluationHint(Path.BASIC_PATH_HINT).equals(Boolean.TRUE)) {\n        NodePointer ptr \u003d (NodePointer) context.getSingleNodePointer();\n        return SimplePathInterpreter.interpretPath(this, ptr, steps);\n    } else {\n        for (int i \u003d 0; i \u003c steps.length; i++) {\n            context \u003d createContextForStep(context, steps[i].getAxis(), steps[i].getNodeTest());\n            Expression[] predicates \u003d steps[i].getPredicates();\n            if (predicates !\u003d null) {\n                for (int j \u003d 0; j \u003c predicates.length; j++) {\n                    context \u003d new PredicateContext(context, predicates[j]);\n                }\n            }\n        }\n        return context.getSingleNodePointer();\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/EvalContext.java",
      "functionStartLine": 907,
      "functionName": "getSingleNodePointerForSteps",
      "functionAnnotation": "",
      "functionDoc": "Given a root context, walks a path therefrom and finds the \npointer to the first element matching the path.\n"
    }
  }
}