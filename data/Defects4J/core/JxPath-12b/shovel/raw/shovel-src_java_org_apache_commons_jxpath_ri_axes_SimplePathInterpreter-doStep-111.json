{
  "origin": "codeshovel",
  "repositoryName": "JxPath-12b",
  "repositoryPath": "/tmp/JxPath-12b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimplePathInterpreter.java",
  "functionName": "doStep",
  "functionId": "doStep___context-EvalContext__parent-NodePointer__steps-Step[]__currentStep-int",
  "sourceFilePath": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
  "functionAnnotation": "",
  "functionDoc": "Recursive evaluation of a path. The general plan is:\nLook at the current step,\nfind nodes that match it,\niterate over those nodes and\nfor each of them call doStep again for subsequent steps.\n",
  "functionStartLine": 111,
  "functionEndLine": 167,
  "numCommitsSeen": 30,
  "timeTaken": 1395,
  "changeHistory": [
    "30e4fdde61866403ce8912dfb8afe328502c4d20",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
    "e6b562c6eca79b82a57a4532768d775d76f48694"
  ],
  "changeHistoryShort": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": "Ybodychange",
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": "Ymultichange(Yparameterchange,Ybodychange)",
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": "Ybodychange",
    "e6b562c6eca79b82a57a4532768d775d76f48694": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30e4fdde61866403ce8912dfb8afe328502c4d20": {
      "type": "Ybodychange",
      "commitMessage": "bulled through JXPath codebase to get a little better familiarity; tiny refactorings and removals of unnecessary elses, etc. along the way\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@509378 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/19/07, 3:24 PM",
      "commitName": "30e4fdde61866403ce8912dfb8afe328502c4d20",
      "commitAuthor": "Matthew Jason Benson",
      "commitDateOld": "11/28/06, 9:37 PM",
      "commitNameOld": "a78dc45a3795e3b9666daed8c13ccc7f4ff48806",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 82.74,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int currentStep) {\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (currentStep \u003d\u003d steps.length) {\n        return parent;\n    }\n    parent \u003d valuePointer(parent);\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    if (parent instanceof PropertyOwnerPointer) {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStepNoPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n        }\n        return doStepPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n    }\n    if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n        return doStepNoPredicatesStandard(context, parent, steps, currentStep);\n    }\n    return doStepPredicatesStandard(context, parent, steps, currentStep);\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 111,
      "functionName": "doStep",
      "functionAnnotation": "",
      "functionDoc": "Recursive evaluation of a path. The general plan is:\nLook at the current step,\nfind nodes that match it,\niterate over those nodes and\nfor each of them call doStep again for subsequent steps.\n",
      "diff": "@@ -1,24 +1,21 @@\n private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int currentStep) {\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (currentStep \u003d\u003d steps.length) {\n         return parent;\n     }\n     parent \u003d valuePointer(parent);\n     Step step \u003d steps[currentStep];\n     Expression[] predicates \u003d step.getPredicates();\n     if (parent instanceof PropertyOwnerPointer) {\n         if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n             return doStepNoPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n-        } else {\n-            return doStepPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n         }\n-    } else {\n-        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n-            return doStepNoPredicatesStandard(context, parent, steps, currentStep);\n-        } else {\n-            return doStepPredicatesStandard(context, parent, steps, currentStep);\n-        }\n+        return doStepPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n     }\n+    if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n+        return doStepNoPredicatesStandard(context, parent, steps, currentStep);\n+    }\n+    return doStepPredicatesStandard(context, parent, steps, currentStep);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2327c42440cd4927ac5fc91ed93756cb0c87c96d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/10/03, 9:41 PM",
      "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
      "commitAuthor": "Dmitri Plotnikov",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int currentStep) {\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (currentStep \u003d\u003d steps.length) {\n        return parent;\n    }\n    parent \u003d valuePointer(parent);\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    if (parent instanceof PropertyOwnerPointer) {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStepNoPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n        } else {\n            return doStepPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n        }\n    } else {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStepNoPredicatesStandard(context, parent, steps, currentStep);\n        } else {\n            return doStepPredicatesStandard(context, parent, steps, currentStep);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 155,
          "functionName": "doStep",
          "functionAnnotation": "",
          "functionDoc": "Recursive evaluation of a path. The general plan is:\nLook at the current step,\nfind nodes that match it,\niterate over those nodes and\nfor each of them call doStep again for subsequent steps.\n",
          "diff": "@@ -1,24 +1,24 @@\n-private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int current_step) {\n+private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int currentStep) {\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n-    if (current_step \u003d\u003d steps.length) {\n+    if (currentStep \u003d\u003d steps.length) {\n         return parent;\n     }\n     parent \u003d valuePointer(parent);\n-    Step step \u003d steps[current_step];\n+    Step step \u003d steps[currentStep];\n     Expression[] predicates \u003d step.getPredicates();\n     if (parent instanceof PropertyOwnerPointer) {\n         if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n-            return doStep_noPredicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n+            return doStepNoPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n         } else {\n-            return doStep_predicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n+            return doStepPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n         }\n     } else {\n         if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n-            return doStep_noPredicates_standard(context, parent, steps, current_step);\n+            return doStepNoPredicatesStandard(context, parent, steps, currentStep);\n         } else {\n-            return doStep_predicates_standard(context, parent, steps, current_step);\n+            return doStepPredicatesStandard(context, parent, steps, currentStep);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[context-EvalContext, parent-NodePointer, steps-Step[], current_step-int]",
            "newValue": "[context-EvalContext, parent-NodePointer, steps-Step[], currentStep-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Checkstyle, be happy!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "1/10/03, 9:41 PM",
          "commitName": "2327c42440cd4927ac5fc91ed93756cb0c87c96d",
          "commitAuthor": "Dmitri Plotnikov",
          "commitDateOld": "11/25/02, 5:20 PM",
          "commitNameOld": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
          "commitAuthorOld": "Dmitri Plotnikov",
          "daysBetweenCommits": 46.18,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int currentStep) {\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (currentStep \u003d\u003d steps.length) {\n        return parent;\n    }\n    parent \u003d valuePointer(parent);\n    Step step \u003d steps[currentStep];\n    Expression[] predicates \u003d step.getPredicates();\n    if (parent instanceof PropertyOwnerPointer) {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStepNoPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n        } else {\n            return doStepPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n        }\n    } else {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStepNoPredicatesStandard(context, parent, steps, currentStep);\n        } else {\n            return doStepPredicatesStandard(context, parent, steps, currentStep);\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
          "functionStartLine": 155,
          "functionName": "doStep",
          "functionAnnotation": "",
          "functionDoc": "Recursive evaluation of a path. The general plan is:\nLook at the current step,\nfind nodes that match it,\niterate over those nodes and\nfor each of them call doStep again for subsequent steps.\n",
          "diff": "@@ -1,24 +1,24 @@\n-private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int current_step) {\n+private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int currentStep) {\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n-    if (current_step \u003d\u003d steps.length) {\n+    if (currentStep \u003d\u003d steps.length) {\n         return parent;\n     }\n     parent \u003d valuePointer(parent);\n-    Step step \u003d steps[current_step];\n+    Step step \u003d steps[currentStep];\n     Expression[] predicates \u003d step.getPredicates();\n     if (parent instanceof PropertyOwnerPointer) {\n         if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n-            return doStep_noPredicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n+            return doStepNoPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n         } else {\n-            return doStep_predicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n+            return doStepPredicatesPropertyOwner(context, (PropertyOwnerPointer) parent, steps, currentStep);\n         }\n     } else {\n         if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n-            return doStep_noPredicates_standard(context, parent, steps, current_step);\n+            return doStepNoPredicatesStandard(context, parent, steps, currentStep);\n         } else {\n-            return doStep_predicates_standard(context, parent, steps, current_step);\n+            return doStepPredicatesStandard(context, parent, steps, currentStep);\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "430fdd01e75a5e681274aa65adeb2d9826ee45a8": {
      "type": "Ybodychange",
      "commitMessage": "Organized imports, formatted code\nFixed problems with getValue() and getNode()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136826 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 5:20 PM",
      "commitName": "430fdd01e75a5e681274aa65adeb2d9826ee45a8",
      "commitAuthor": "Dmitri Plotnikov",
      "commitDateOld": "10/12/02, 7:59 PM",
      "commitNameOld": "d5a51635e77e49efbf18c5b51834f533e7972953",
      "commitAuthorOld": "Dmitri Plotnikov",
      "daysBetweenCommits": 43.93,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int current_step) {\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (current_step \u003d\u003d steps.length) {\n        return parent;\n    }\n    parent \u003d valuePointer(parent);\n    Step step \u003d steps[current_step];\n    Expression[] predicates \u003d step.getPredicates();\n    if (parent instanceof PropertyOwnerPointer) {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStep_noPredicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n        } else {\n            return doStep_predicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n        }\n    } else {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStep_noPredicates_standard(context, parent, steps, current_step);\n        } else {\n            return doStep_predicates_standard(context, parent, steps, current_step);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 145,
      "functionName": "doStep",
      "functionAnnotation": "",
      "functionDoc": "Recursive evaluation of a path. The general plan is:\nLook at the current step,\nfind nodes that match it,\niterate over those nodes and\nfor each of them call doStep again for subsequent steps.\n",
      "diff": "@@ -1,24 +1,24 @@\n private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int current_step) {\n-    parent \u003d valuePointer(parent);\n     if (parent \u003d\u003d null) {\n         return null;\n     }\n     if (current_step \u003d\u003d steps.length) {\n         return parent;\n     }\n+    parent \u003d valuePointer(parent);\n     Step step \u003d steps[current_step];\n     Expression[] predicates \u003d step.getPredicates();\n     if (parent instanceof PropertyOwnerPointer) {\n         if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n             return doStep_noPredicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n         } else {\n             return doStep_predicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n         }\n     } else {\n         if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n             return doStep_noPredicates_standard(context, parent, steps, current_step);\n         } else {\n             return doStep_predicates_standard(context, parent, steps, current_step);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e6b562c6eca79b82a57a4532768d775d76f48694": {
      "type": "Yintroduced",
      "commitMessage": "A complete re-write to address multiple additional use cases\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/9/02, 6:35 PM",
      "commitName": "e6b562c6eca79b82a57a4532768d775d76f48694",
      "commitAuthor": "Dmitri Plotnikov",
      "diff": "@@ -0,0 +1,24 @@\n+private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int current_step) {\n+    parent \u003d valuePointer(parent);\n+    if (parent \u003d\u003d null) {\n+        return null;\n+    }\n+    if (current_step \u003d\u003d steps.length) {\n+        return parent;\n+    }\n+    Step step \u003d steps[current_step];\n+    Expression[] predicates \u003d step.getPredicates();\n+    if (parent instanceof PropertyOwnerPointer) {\n+        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n+            return doStep_noPredicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n+        } else {\n+            return doStep_predicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n+        }\n+    } else {\n+        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n+            return doStep_noPredicates_standard(context, parent, steps, current_step);\n+        } else {\n+            return doStep_predicates_standard(context, parent, steps, current_step);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static NodePointer doStep(EvalContext context, NodePointer parent, Step[] steps, int current_step) {\n    parent \u003d valuePointer(parent);\n    if (parent \u003d\u003d null) {\n        return null;\n    }\n    if (current_step \u003d\u003d steps.length) {\n        return parent;\n    }\n    Step step \u003d steps[current_step];\n    Expression[] predicates \u003d step.getPredicates();\n    if (parent instanceof PropertyOwnerPointer) {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStep_noPredicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n        } else {\n            return doStep_predicates_propertyOwner(context, (PropertyOwnerPointer) parent, steps, current_step);\n        }\n    } else {\n        if (predicates \u003d\u003d null || predicates.length \u003d\u003d 0) {\n            return doStep_noPredicates_standard(context, parent, steps, current_step);\n        } else {\n            return doStep_predicates_standard(context, parent, steps, current_step);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java",
      "functionStartLine": 142,
      "functionName": "doStep",
      "functionAnnotation": "",
      "functionDoc": "Recursive evaluation of a path. The general plan is:\nLook at the current step,\nfind nodes that match it,\niterate over those nodes and\nfor each of them call doStep again for subsequent steps.\n"
    }
  }
}