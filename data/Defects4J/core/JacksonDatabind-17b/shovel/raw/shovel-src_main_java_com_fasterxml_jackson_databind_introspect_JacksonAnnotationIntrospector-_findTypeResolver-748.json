{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JacksonAnnotationIntrospector.java",
  "functionName": "_findTypeResolver",
  "functionId": "_findTypeResolver___config-MapperConfig__?____ann-Annotated__baseType-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method called to construct and initialize instance of {@link TypeResolverBuilder}\nif given annotated element indicates one is needed.\n",
  "functionStartLine": 748,
  "functionEndLine": 799,
  "numCommitsSeen": 60,
  "timeTaken": 2309,
  "changeHistory": [
    "8958048f38c5914bda894174f2d17b96828996b4",
    "ae1c98e50180e010ba3469634d215b48f6d81b75",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "8958048f38c5914bda894174f2d17b96828996b4": "Ybodychange",
    "ae1c98e50180e010ba3469634d215b48f6d81b75": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8958048f38c5914bda894174f2d17b96828996b4": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-437]; allow type id to be passed to POJO (via @JsonTypeInfo.visible\u003dtrue)\n",
      "commitDate": "1/20/12, 10:08 PM",
      "commitName": "8958048f38c5914bda894174f2d17b96828996b4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 2:36 PM",
      "commitNameOld": "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config, Annotated ann, JavaType baseType) {\n    TypeResolverBuilder\u003c?\u003e b;\n    JsonTypeInfo info \u003d ann.getAnnotation(JsonTypeInfo.class);\n    JsonTypeResolver resAnn \u003d ann.getAnnotation(JsonTypeResolver.class);\n    if (resAnn !\u003d null) {\n        if (info \u003d\u003d null) {\n            return null;\n        }\n        b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\n    } else {\n        if (info \u003d\u003d null) {\n            return null;\n        }\n        if (info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n            return _constructNoTypeResolverBuilder();\n        }\n        b \u003d _constructStdTypeResolverBuilder();\n    }\n    JsonTypeIdResolver idResInfo \u003d ann.getAnnotation(JsonTypeIdResolver.class);\n    TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n    if (idRes !\u003d null) {\n        idRes.init(baseType);\n    }\n    b \u003d b.init(info.use(), idRes);\n    JsonTypeInfo.As inclusion \u003d info.include();\n    if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n        inclusion \u003d JsonTypeInfo.As.PROPERTY;\n    }\n    b \u003d b.inclusion(inclusion);\n    b \u003d b.typeProperty(info.property());\n    Class\u003c?\u003e defaultImpl \u003d info.defaultImpl();\n    if (defaultImpl !\u003d JsonTypeInfo.None.class) {\n        b \u003d b.defaultImpl(defaultImpl);\n    }\n    b \u003d b.typeIdVisibility(info.visible());\n    return b;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
      "functionStartLine": 690,
      "functionName": "_findTypeResolver",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to construct and initialize instance of {@link TypeResolverBuilder}\nif given annotated element indicates one is needed.\n",
      "diff": "@@ -1,36 +1,37 @@\n protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config, Annotated ann, JavaType baseType) {\n     TypeResolverBuilder\u003c?\u003e b;\n     JsonTypeInfo info \u003d ann.getAnnotation(JsonTypeInfo.class);\n     JsonTypeResolver resAnn \u003d ann.getAnnotation(JsonTypeResolver.class);\n     if (resAnn !\u003d null) {\n         if (info \u003d\u003d null) {\n             return null;\n         }\n         b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\n     } else {\n         if (info \u003d\u003d null) {\n             return null;\n         }\n         if (info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n             return _constructNoTypeResolverBuilder();\n         }\n         b \u003d _constructStdTypeResolverBuilder();\n     }\n     JsonTypeIdResolver idResInfo \u003d ann.getAnnotation(JsonTypeIdResolver.class);\n     TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n     if (idRes !\u003d null) {\n         idRes.init(baseType);\n     }\n     b \u003d b.init(info.use(), idRes);\n     JsonTypeInfo.As inclusion \u003d info.include();\n     if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n         inclusion \u003d JsonTypeInfo.As.PROPERTY;\n     }\n     b \u003d b.inclusion(inclusion);\n     b \u003d b.typeProperty(info.property());\n     Class\u003c?\u003e defaultImpl \u003d info.defaultImpl();\n     if (defaultImpl !\u003d JsonTypeInfo.None.class) {\n         b \u003d b.defaultImpl(defaultImpl);\n     }\n+    b \u003d b.typeIdVisibility(info.visible());\n     return b;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ae1c98e50180e010ba3469634d215b48f6d81b75": {
      "type": "Ybodychange",
      "commitMessage": "Fix [JACKSON-746] for 2.0\n",
      "commitDate": "1/12/12, 2:57 PM",
      "commitName": "ae1c98e50180e010ba3469634d215b48f6d81b75",
      "commitAuthor": "Tatu",
      "commitDateOld": "12/29/11, 3:12 PM",
      "commitNameOld": "0344ce08eb33d9d3aeb6478ce0391368596eac04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 13.99,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config, Annotated ann, JavaType baseType) {\n    TypeResolverBuilder\u003c?\u003e b;\n    JsonTypeInfo info \u003d ann.getAnnotation(JsonTypeInfo.class);\n    JsonTypeResolver resAnn \u003d ann.getAnnotation(JsonTypeResolver.class);\n    if (resAnn !\u003d null) {\n        if (info \u003d\u003d null) {\n            return null;\n        }\n        b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\n    } else {\n        if (info \u003d\u003d null) {\n            return null;\n        }\n        if (info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n            return _constructNoTypeResolverBuilder();\n        }\n        b \u003d _constructStdTypeResolverBuilder();\n    }\n    JsonTypeIdResolver idResInfo \u003d ann.getAnnotation(JsonTypeIdResolver.class);\n    TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n    if (idRes !\u003d null) {\n        idRes.init(baseType);\n    }\n    b \u003d b.init(info.use(), idRes);\n    JsonTypeInfo.As inclusion \u003d info.include();\n    if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n        inclusion \u003d JsonTypeInfo.As.PROPERTY;\n    }\n    b \u003d b.inclusion(inclusion);\n    b \u003d b.typeProperty(info.property());\n    Class\u003c?\u003e defaultImpl \u003d info.defaultImpl();\n    if (defaultImpl !\u003d JsonTypeInfo.None.class) {\n        b \u003d b.defaultImpl(defaultImpl);\n    }\n    return b;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
      "functionStartLine": 674,
      "functionName": "_findTypeResolver",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to construct and initialize instance of {@link TypeResolverBuilder}\nif given annotated element indicates one is needed.\n",
      "diff": "@@ -1,33 +1,36 @@\n protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config, Annotated ann, JavaType baseType) {\n     TypeResolverBuilder\u003c?\u003e b;\n     JsonTypeInfo info \u003d ann.getAnnotation(JsonTypeInfo.class);\n     JsonTypeResolver resAnn \u003d ann.getAnnotation(JsonTypeResolver.class);\n     if (resAnn !\u003d null) {\n         if (info \u003d\u003d null) {\n             return null;\n         }\n         b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\n     } else {\n-        if (info \u003d\u003d null || info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n+        if (info \u003d\u003d null) {\n             return null;\n         }\n+        if (info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n+            return _constructNoTypeResolverBuilder();\n+        }\n         b \u003d _constructStdTypeResolverBuilder();\n     }\n     JsonTypeIdResolver idResInfo \u003d ann.getAnnotation(JsonTypeIdResolver.class);\n     TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n     if (idRes !\u003d null) {\n         idRes.init(baseType);\n     }\n     b \u003d b.init(info.use(), idRes);\n     JsonTypeInfo.As inclusion \u003d info.include();\n     if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n         inclusion \u003d JsonTypeInfo.As.PROPERTY;\n     }\n     b \u003d b.inclusion(inclusion);\n     b \u003d b.typeProperty(info.property());\n     Class\u003c?\u003e defaultImpl \u003d info.defaultImpl();\n     if (defaultImpl !\u003d JsonTypeInfo.None.class) {\n         b \u003d b.defaultImpl(defaultImpl);\n     }\n     return b;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,33 @@\n+protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config, Annotated ann, JavaType baseType) {\n+    TypeResolverBuilder\u003c?\u003e b;\n+    JsonTypeInfo info \u003d ann.getAnnotation(JsonTypeInfo.class);\n+    JsonTypeResolver resAnn \u003d ann.getAnnotation(JsonTypeResolver.class);\n+    if (resAnn !\u003d null) {\n+        if (info \u003d\u003d null) {\n+            return null;\n+        }\n+        b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\n+    } else {\n+        if (info \u003d\u003d null || info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n+            return null;\n+        }\n+        b \u003d _constructStdTypeResolverBuilder();\n+    }\n+    JsonTypeIdResolver idResInfo \u003d ann.getAnnotation(JsonTypeIdResolver.class);\n+    TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n+    if (idRes !\u003d null) {\n+        idRes.init(baseType);\n+    }\n+    b \u003d b.init(info.use(), idRes);\n+    JsonTypeInfo.As inclusion \u003d info.include();\n+    if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n+        inclusion \u003d JsonTypeInfo.As.PROPERTY;\n+    }\n+    b \u003d b.inclusion(inclusion);\n+    b \u003d b.typeProperty(info.property());\n+    Class\u003c?\u003e defaultImpl \u003d info.defaultImpl();\n+    if (defaultImpl !\u003d JsonTypeInfo.None.class) {\n+        b \u003d b.defaultImpl(defaultImpl);\n+    }\n+    return b;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config, Annotated ann, JavaType baseType) {\n    TypeResolverBuilder\u003c?\u003e b;\n    JsonTypeInfo info \u003d ann.getAnnotation(JsonTypeInfo.class);\n    JsonTypeResolver resAnn \u003d ann.getAnnotation(JsonTypeResolver.class);\n    if (resAnn !\u003d null) {\n        if (info \u003d\u003d null) {\n            return null;\n        }\n        b \u003d config.typeResolverBuilderInstance(ann, resAnn.value());\n    } else {\n        if (info \u003d\u003d null || info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n            return null;\n        }\n        b \u003d _constructStdTypeResolverBuilder();\n    }\n    JsonTypeIdResolver idResInfo \u003d ann.getAnnotation(JsonTypeIdResolver.class);\n    TypeIdResolver idRes \u003d (idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n    if (idRes !\u003d null) {\n        idRes.init(baseType);\n    }\n    b \u003d b.init(info.use(), idRes);\n    JsonTypeInfo.As inclusion \u003d info.include();\n    if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n        inclusion \u003d JsonTypeInfo.As.PROPERTY;\n    }\n    b \u003d b.inclusion(inclusion);\n    b \u003d b.typeProperty(info.property());\n    Class\u003c?\u003e defaultImpl \u003d info.defaultImpl();\n    if (defaultImpl !\u003d JsonTypeInfo.None.class) {\n        b \u003d b.defaultImpl(defaultImpl);\n    }\n    return b;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
      "functionStartLine": 740,
      "functionName": "_findTypeResolver",
      "functionAnnotation": "",
      "functionDoc": "Helper method called to construct and initialize instance of {@link TypeResolverBuilder}\nif given annotated element indicates one is needed.\n"
    }
  }
}