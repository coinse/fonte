{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "POJOPropertiesCollector.java",
  "functionName": "_addFields",
  "functionId": "_addFields",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
  "functionAnnotation": "",
  "functionDoc": "Method for collecting basic information on all fields found\n",
  "functionStartLine": 375,
  "functionEndLine": 427,
  "numCommitsSeen": 49,
  "timeTaken": 2455,
  "changeHistory": [
    "328cc7e3cb4f3f423b4ba229c3fa358635352ba9",
    "916ee4d05fcfc7545556b862bc3079aa68bfb7ef",
    "054467f2dce77e1a1f1aa074772d6860fa52b5ca",
    "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333",
    "8f2ea6ccafe7c971fbc10063a33c1baec83f7ed4",
    "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd",
    "257da8e4ce33fe77a05f9867ce3e187e522a1b8e",
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "328cc7e3cb4f3f423b4ba229c3fa358635352ba9": "Ybodychange",
    "916ee4d05fcfc7545556b862bc3079aa68bfb7ef": "Ybodychange",
    "054467f2dce77e1a1f1aa074772d6860fa52b5ca": "Ybodychange",
    "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333": "Ybodychange",
    "8f2ea6ccafe7c971fbc10063a33c1baec83f7ed4": "Ybodychange",
    "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd": "Ybodychange",
    "257da8e4ce33fe77a05f9867ce3e187e522a1b8e": "Ybodychange",
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "328cc7e3cb4f3f423b4ba229c3fa358635352ba9": {
      "type": "Ybodychange",
      "commitMessage": "Connected `AnnotationIntrospector.findImplicitPropertyName()` from `POJOPropertiesCollector`; now some of `TestScalaLikeImplicitProperties` tests pass\n",
      "commitDate": "5/7/14, 11:25 PM",
      "commitName": "328cc7e3cb4f3f423b4ba229c3fa358635352ba9",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/7/14, 10:51 PM",
      "commitNameOld": "4e387c241b7c92f2e4d862f6217189e55472125e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(f);\n        if (implName \u003d\u003d null) {\n            implName \u003d f.getName();\n        }\n        PropertyName pn;\n        if (ai \u003d\u003d null) {\n            pn \u003d null;\n        } else if (_forSerialization) {\n            pn \u003d ai.findNameForSerialization(f);\n        } else {\n            pn \u003d ai.findNameForDeserialization(f);\n        }\n        boolean nameExplicit \u003d (pn !\u003d null);\n        if (nameExplicit \u0026\u0026 pn.isEmpty()) {\n            pn \u003d _propNameFromSimple(implName);\n            nameExplicit \u003d false;\n        }\n        boolean visible \u003d (pn !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        if (pruneFinalFields \u0026\u0026 (pn \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n            continue;\n        }\n        _property(implName).addField(f, pn, nameExplicit, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 371,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,29 +1,32 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n     for (AnnotatedField f : _classDef.fields()) {\n-        String implName \u003d f.getName();\n+        String implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(f);\n+        if (implName \u003d\u003d null) {\n+            implName \u003d f.getName();\n+        }\n         PropertyName pn;\n         if (ai \u003d\u003d null) {\n             pn \u003d null;\n         } else if (_forSerialization) {\n             pn \u003d ai.findNameForSerialization(f);\n         } else {\n             pn \u003d ai.findNameForDeserialization(f);\n         }\n         boolean nameExplicit \u003d (pn !\u003d null);\n         if (nameExplicit \u0026\u0026 pn.isEmpty()) {\n             pn \u003d _propNameFromSimple(implName);\n             nameExplicit \u003d false;\n         }\n         boolean visible \u003d (pn !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n         if (pruneFinalFields \u0026\u0026 (pn \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n             continue;\n         }\n         _property(implName).addField(f, pn, nameExplicit, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "916ee4d05fcfc7545556b862bc3079aa68bfb7ef": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "3/30/14, 8:56 PM",
      "commitName": "916ee4d05fcfc7545556b862bc3079aa68bfb7ef",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/30/14, 8:53 PM",
      "commitNameOld": "833b26b2d36c1edfe12510d1d8686987c54b1135",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        PropertyName pn;\n        if (ai \u003d\u003d null) {\n            pn \u003d null;\n        } else if (_forSerialization) {\n            pn \u003d ai.findNameForSerialization(f);\n        } else {\n            pn \u003d ai.findNameForDeserialization(f);\n        }\n        boolean nameExplicit \u003d (pn !\u003d null);\n        if (nameExplicit \u0026\u0026 pn.isEmpty()) {\n            pn \u003d _propNameFromSimple(implName);\n            nameExplicit \u003d false;\n        }\n        boolean visible \u003d (pn !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        if (pruneFinalFields \u0026\u0026 (pn \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n            continue;\n        }\n        _property(implName).addField(f, pn, nameExplicit, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 371,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,31 +1,29 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n     for (AnnotatedField f : _classDef.fields()) {\n         String implName \u003d f.getName();\n-        String explName;\n+        PropertyName pn;\n         if (ai \u003d\u003d null) {\n-            explName \u003d null;\n+            pn \u003d null;\n         } else if (_forSerialization) {\n-            PropertyName pn \u003d ai.findNameForSerialization(f);\n-            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n+            pn \u003d ai.findNameForSerialization(f);\n         } else {\n-            PropertyName pn \u003d ai.findNameForDeserialization(f);\n-            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n+            pn \u003d ai.findNameForDeserialization(f);\n         }\n-        boolean nameExplicit \u003d (explName !\u003d null);\n-        if (\"\".equals(explName)) {\n-            explName \u003d implName;\n+        boolean nameExplicit \u003d (pn !\u003d null);\n+        if (nameExplicit \u0026\u0026 pn.isEmpty()) {\n+            pn \u003d _propNameFromSimple(implName);\n             nameExplicit \u003d false;\n         }\n-        boolean visible \u003d (explName !\u003d null);\n+        boolean visible \u003d (pn !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n-        if (pruneFinalFields \u0026\u0026 (explName \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n+        if (pruneFinalFields \u0026\u0026 (pn \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n             continue;\n         }\n-        _property(implName).addField(f, explName, nameExplicit, visible, ignored);\n+        _property(implName).addField(f, pn, nameExplicit, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "054467f2dce77e1a1f1aa074772d6860fa52b5ca": {
      "type": "Ybodychange",
      "commitMessage": "Fix #428\n",
      "commitDate": "3/28/14, 4:09 PM",
      "commitName": "054467f2dce77e1a1f1aa074772d6860fa52b5ca",
      "commitAuthor": "Tatu",
      "commitDateOld": "3/28/14, 3:51 PM",
      "commitNameOld": "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        String explName;\n        if (ai \u003d\u003d null) {\n            explName \u003d null;\n        } else if (_forSerialization) {\n            PropertyName pn \u003d ai.findNameForSerialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        } else {\n            PropertyName pn \u003d ai.findNameForDeserialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        }\n        boolean nameExplicit \u003d (explName !\u003d null);\n        if (\"\".equals(explName)) {\n            explName \u003d implName;\n            nameExplicit \u003d false;\n        }\n        boolean visible \u003d (explName !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        if (pruneFinalFields \u0026\u0026 (explName \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n            continue;\n        }\n        _property(implName).addField(f, explName, nameExplicit, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 371,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,29 +1,31 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n     for (AnnotatedField f : _classDef.fields()) {\n         String implName \u003d f.getName();\n         String explName;\n         if (ai \u003d\u003d null) {\n             explName \u003d null;\n         } else if (_forSerialization) {\n             PropertyName pn \u003d ai.findNameForSerialization(f);\n             explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         } else {\n             PropertyName pn \u003d ai.findNameForDeserialization(f);\n             explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         }\n+        boolean nameExplicit \u003d (explName !\u003d null);\n         if (\"\".equals(explName)) {\n             explName \u003d implName;\n+            nameExplicit \u003d false;\n         }\n         boolean visible \u003d (explName !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n         if (pruneFinalFields \u0026\u0026 (explName \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n             continue;\n         }\n-        _property(implName).addField(f, explName, true, visible, ignored);\n+        _property(implName).addField(f, explName, nameExplicit, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333": {
      "type": "Ybodychange",
      "commitMessage": "Groundwork for addressing renaming of explicit names with PropertyNamingStrategy\n",
      "commitDate": "3/28/14, 3:51 PM",
      "commitName": "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333",
      "commitAuthor": "Tatu",
      "commitDateOld": "3/14/14, 10:00 PM",
      "commitNameOld": "9036ebc9fe0cad9cabc8506629f6ec2d5f3d225a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 13.74,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        String explName;\n        if (ai \u003d\u003d null) {\n            explName \u003d null;\n        } else if (_forSerialization) {\n            PropertyName pn \u003d ai.findNameForSerialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        } else {\n            PropertyName pn \u003d ai.findNameForDeserialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        }\n        if (\"\".equals(explName)) {\n            explName \u003d implName;\n        }\n        boolean visible \u003d (explName !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        if (pruneFinalFields \u0026\u0026 (explName \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n            continue;\n        }\n        _property(implName).addField(f, explName, true, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 371,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,29 +1,29 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n     for (AnnotatedField f : _classDef.fields()) {\n         String implName \u003d f.getName();\n         String explName;\n         if (ai \u003d\u003d null) {\n             explName \u003d null;\n         } else if (_forSerialization) {\n             PropertyName pn \u003d ai.findNameForSerialization(f);\n             explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         } else {\n             PropertyName pn \u003d ai.findNameForDeserialization(f);\n             explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         }\n         if (\"\".equals(explName)) {\n             explName \u003d implName;\n         }\n         boolean visible \u003d (explName !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n         if (pruneFinalFields \u0026\u0026 (explName \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n             continue;\n         }\n-        _property(implName).addField(f, explName, visible, ignored);\n+        _property(implName).addField(f, explName, true, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8f2ea6ccafe7c971fbc10063a33c1baec83f7ed4": {
      "type": "Ybodychange",
      "commitMessage": "Implemented #190\n",
      "commitDate": "3/28/13, 3:46 PM",
      "commitName": "8f2ea6ccafe7c971fbc10063a33c1baec83f7ed4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/28/13, 2:17 PM",
      "commitNameOld": "930187bf135ea5519d2d70f24079ec0e39d797a6",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        String explName;\n        if (ai \u003d\u003d null) {\n            explName \u003d null;\n        } else if (_forSerialization) {\n            PropertyName pn \u003d ai.findNameForSerialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        } else {\n            PropertyName pn \u003d ai.findNameForDeserialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        }\n        if (\"\".equals(explName)) {\n            explName \u003d implName;\n        }\n        boolean visible \u003d (explName !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        if (pruneFinalFields \u0026\u0026 (explName \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n            continue;\n        }\n        _property(implName).addField(f, explName, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 354,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,25 +1,29 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n+    final boolean pruneFinalFields \u003d !_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n     for (AnnotatedField f : _classDef.fields()) {\n         String implName \u003d f.getName();\n         String explName;\n         if (ai \u003d\u003d null) {\n             explName \u003d null;\n         } else if (_forSerialization) {\n             PropertyName pn \u003d ai.findNameForSerialization(f);\n             explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         } else {\n             PropertyName pn \u003d ai.findNameForDeserialization(f);\n             explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         }\n         if (\"\".equals(explName)) {\n             explName \u003d implName;\n         }\n         boolean visible \u003d (explName !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n+        if (pruneFinalFields \u0026\u0026 (explName \u003d\u003d null) \u0026\u0026 !ignored \u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n+            continue;\n+        }\n         _property(implName).addField(f, explName, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd": {
      "type": "Ybodychange",
      "commitMessage": "Complete [Issue#69] implementation\n",
      "commitDate": "9/4/12, 10:10 PM",
      "commitName": "ab374c7a5ce68b8248a0bcf81e96e083585aa4dd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/4/12, 9:46 PM",
      "commitNameOld": "257da8e4ce33fe77a05f9867ce3e187e522a1b8e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        String explName;\n        if (ai \u003d\u003d null) {\n            explName \u003d null;\n        } else if (_forSerialization) {\n            PropertyName pn \u003d ai.findNameForSerialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        } else {\n            PropertyName pn \u003d ai.findNameForDeserialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        }\n        if (\"\".equals(explName)) {\n            explName \u003d implName;\n        }\n        boolean visible \u003d (explName !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        _property(implName).addField(f, explName, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 346,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,24 +1,25 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     for (AnnotatedField f : _classDef.fields()) {\n         String implName \u003d f.getName();\n         String explName;\n         if (ai \u003d\u003d null) {\n             explName \u003d null;\n         } else if (_forSerialization) {\n             PropertyName pn \u003d ai.findNameForSerialization(f);\n             explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         } else {\n-            explName \u003d ai.findDeserializationName(f);\n+            PropertyName pn \u003d ai.findNameForDeserialization(f);\n+            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         }\n         if (\"\".equals(explName)) {\n             explName \u003d implName;\n         }\n         boolean visible \u003d (explName !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n         _property(implName).addField(f, explName, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "257da8e4ce33fe77a05f9867ce3e187e522a1b8e": {
      "type": "Ybodychange",
      "commitMessage": "Starting to implement [Issue#69], upgrade to using PropertyName (to make xml support easier)\n",
      "commitDate": "9/4/12, 9:46 PM",
      "commitName": "257da8e4ce33fe77a05f9867ce3e187e522a1b8e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/29/12, 6:03 PM",
      "commitNameOld": "75fe7ce4cae5ad6464da719fb13d7796ea404795",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.15,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        String explName;\n        if (ai \u003d\u003d null) {\n            explName \u003d null;\n        } else if (_forSerialization) {\n            PropertyName pn \u003d ai.findNameForSerialization(f);\n            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n        } else {\n            explName \u003d ai.findDeserializationName(f);\n        }\n        if (\"\".equals(explName)) {\n            explName \u003d implName;\n        }\n        boolean visible \u003d (explName !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        _property(implName).addField(f, explName, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 346,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,23 +1,24 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     for (AnnotatedField f : _classDef.fields()) {\n         String implName \u003d f.getName();\n         String explName;\n         if (ai \u003d\u003d null) {\n             explName \u003d null;\n         } else if (_forSerialization) {\n-            explName \u003d ai.findSerializationName(f);\n+            PropertyName pn \u003d ai.findNameForSerialization(f);\n+            explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n         } else {\n             explName \u003d ai.findDeserializationName(f);\n         }\n         if (\"\".equals(explName)) {\n             explName \u003d implName;\n         }\n         boolean visible \u003d (explName !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n         _property(implName).addField(f, explName, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5": {
      "type": "Ybodychange",
      "commitMessage": "Renaming of AnnotationIntrospector methods to be (more) consistent\n",
      "commitDate": "1/19/12, 2:36 PM",
      "commitName": "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/18/12, 8:25 PM",
      "commitNameOld": "c733a7f1e744121343da2851df27b581aab79e68",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        String explName;\n        if (ai \u003d\u003d null) {\n            explName \u003d null;\n        } else if (_forSerialization) {\n            explName \u003d ai.findSerializationName(f);\n        } else {\n            explName \u003d ai.findDeserializationName(f);\n        }\n        if (\"\".equals(explName)) {\n            explName \u003d implName;\n        }\n        boolean visible \u003d (explName !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        _property(implName).addField(f, explName, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 317,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,23 +1,23 @@\n protected void _addFields() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     for (AnnotatedField f : _classDef.fields()) {\n         String implName \u003d f.getName();\n         String explName;\n         if (ai \u003d\u003d null) {\n             explName \u003d null;\n         } else if (_forSerialization) {\n-            explName \u003d ai.findSerializablePropertyName(f);\n+            explName \u003d ai.findSerializationName(f);\n         } else {\n-            explName \u003d ai.findDeserializablePropertyName(f);\n+            explName \u003d ai.findDeserializationName(f);\n         }\n         if (\"\".equals(explName)) {\n             explName \u003d implName;\n         }\n         boolean visible \u003d (explName !\u003d null);\n         if (!visible) {\n             visible \u003d _visibilityChecker.isFieldVisible(f);\n         }\n         boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n         _property(implName).addField(f, explName, visible, ignored);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,23 @@\n+protected void _addFields() {\n+    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n+    for (AnnotatedField f : _classDef.fields()) {\n+        String implName \u003d f.getName();\n+        String explName;\n+        if (ai \u003d\u003d null) {\n+            explName \u003d null;\n+        } else if (_forSerialization) {\n+            explName \u003d ai.findSerializablePropertyName(f);\n+        } else {\n+            explName \u003d ai.findDeserializablePropertyName(f);\n+        }\n+        if (\"\".equals(explName)) {\n+            explName \u003d implName;\n+        }\n+        boolean visible \u003d (explName !\u003d null);\n+        if (!visible) {\n+            visible \u003d _visibilityChecker.isFieldVisible(f);\n+        }\n+        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n+        _property(implName).addField(f, explName, visible, ignored);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void _addFields() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedField f : _classDef.fields()) {\n        String implName \u003d f.getName();\n        String explName;\n        if (ai \u003d\u003d null) {\n            explName \u003d null;\n        } else if (_forSerialization) {\n            explName \u003d ai.findSerializablePropertyName(f);\n        } else {\n            explName \u003d ai.findDeserializablePropertyName(f);\n        }\n        if (\"\".equals(explName)) {\n            explName \u003d implName;\n        }\n        boolean visible \u003d (explName !\u003d null);\n        if (!visible) {\n            visible \u003d _visibilityChecker.isFieldVisible(f);\n        }\n        boolean ignored \u003d (ai !\u003d null) \u0026\u0026 ai.hasIgnoreMarker(f);\n        _property(implName).addField(f, explName, visible, ignored);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 317,
      "functionName": "_addFields",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n"
    }
  }
}