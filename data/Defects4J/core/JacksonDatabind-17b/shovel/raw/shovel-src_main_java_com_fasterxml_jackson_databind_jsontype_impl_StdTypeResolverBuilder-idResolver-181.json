{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StdTypeResolverBuilder.java",
  "functionName": "idResolver",
  "functionId": "idResolver___config-MapperConfig__?____baseType-JavaType__subtypes-Collection__NamedType____forSer-boolean__forDeser-boolean",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method that will either return configured custom\ntype id resolver, or construct a standard resolver\ngiven configuration.\n",
  "functionStartLine": 181,
  "functionEndLine": 199,
  "numCommitsSeen": 14,
  "timeTaken": 438,
  "changeHistory": [
    "0e1e87827326aa785da225aa980d7429a9d562f7",
    "ae1c98e50180e010ba3469634d215b48f6d81b75",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "0e1e87827326aa785da225aa980d7429a9d562f7": "Ybodychange",
    "ae1c98e50180e010ba3469634d215b48f6d81b75": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e1e87827326aa785da225aa980d7429a9d562f7": {
      "type": "Ybodychange",
      "commitMessage": "Fix #88\n",
      "commitDate": "1/11/14, 7:51 PM",
      "commitName": "0e1e87827326aa785da225aa980d7429a9d562f7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 1:13 PM",
      "commitNameOld": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 315.28,
      "commitsBetweenForRepo": 380,
      "commitsBetweenForFile": 1,
      "actualSource": "protected TypeIdResolver idResolver(MapperConfig\u003c?\u003e config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, boolean forSer, boolean forDeser) {\n    if (_customIdResolver !\u003d null) {\n        return _customIdResolver;\n    }\n    if (_idType \u003d\u003d null)\n        throw new IllegalStateException(\"Can not build, \u0027init()\u0027 not yet called\");\n    switch(_idType) {\n        case CLASS:\n            return new ClassNameIdResolver(baseType, config.getTypeFactory());\n        case MINIMAL_CLASS:\n            return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n        case NAME:\n            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n        case NONE:\n            return null;\n        case CUSTOM:\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 181,
      "functionName": "idResolver",
      "functionAnnotation": "",
      "functionDoc": "Helper method that will either return configured custom\ntype id resolver, or construct a standard resolver\ngiven configuration.\n",
      "diff": "@@ -1,20 +1,19 @@\n protected TypeIdResolver idResolver(MapperConfig\u003c?\u003e config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, boolean forSer, boolean forDeser) {\n     if (_customIdResolver !\u003d null) {\n         return _customIdResolver;\n     }\n-    if (_idType \u003d\u003d null) {\n+    if (_idType \u003d\u003d null)\n         throw new IllegalStateException(\"Can not build, \u0027init()\u0027 not yet called\");\n-    }\n     switch(_idType) {\n         case CLASS:\n             return new ClassNameIdResolver(baseType, config.getTypeFactory());\n         case MINIMAL_CLASS:\n             return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n         case NAME:\n             return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n         case NONE:\n             return null;\n         case CUSTOM:\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ae1c98e50180e010ba3469634d215b48f6d81b75": {
      "type": "Ybodychange",
      "commitMessage": "Fix [JACKSON-746] for 2.0\n",
      "commitDate": "1/12/12, 2:57 PM",
      "commitName": "ae1c98e50180e010ba3469634d215b48f6d81b75",
      "commitAuthor": "Tatu",
      "commitDateOld": "12/23/11, 8:05 PM",
      "commitNameOld": "df6302f807bb230ae985a35100cbcc30af523bd1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 19.79,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "protected TypeIdResolver idResolver(MapperConfig\u003c?\u003e config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, boolean forSer, boolean forDeser) {\n    if (_customIdResolver !\u003d null) {\n        return _customIdResolver;\n    }\n    if (_idType \u003d\u003d null) {\n        throw new IllegalStateException(\"Can not build, \u0027init()\u0027 not yet called\");\n    }\n    switch(_idType) {\n        case CLASS:\n            return new ClassNameIdResolver(baseType, config.getTypeFactory());\n        case MINIMAL_CLASS:\n            return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n        case NAME:\n            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n        case NONE:\n            return null;\n        case CUSTOM:\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 179,
      "functionName": "idResolver",
      "functionAnnotation": "",
      "functionDoc": "Helper method that will either return configured custom\ntype id resolver, or construct a standard resolver\ngiven configuration.\n",
      "diff": "@@ -1,19 +1,20 @@\n protected TypeIdResolver idResolver(MapperConfig\u003c?\u003e config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, boolean forSer, boolean forDeser) {\n     if (_customIdResolver !\u003d null) {\n         return _customIdResolver;\n     }\n     if (_idType \u003d\u003d null) {\n         throw new IllegalStateException(\"Can not build, \u0027init()\u0027 not yet called\");\n     }\n     switch(_idType) {\n         case CLASS:\n             return new ClassNameIdResolver(baseType, config.getTypeFactory());\n         case MINIMAL_CLASS:\n             return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n         case NAME:\n             return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n-        case CUSTOM:\n         case NONE:\n+            return null;\n+        case CUSTOM:\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,19 @@\n+protected TypeIdResolver idResolver(MapperConfig\u003c?\u003e config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, boolean forSer, boolean forDeser) {\n+    if (_customIdResolver !\u003d null) {\n+        return _customIdResolver;\n+    }\n+    if (_idType \u003d\u003d null) {\n+        throw new IllegalStateException(\"Can not build, \u0027init()\u0027 not yet called\");\n+    }\n+    switch(_idType) {\n+        case CLASS:\n+            return new ClassNameIdResolver(baseType, config.getTypeFactory());\n+        case MINIMAL_CLASS:\n+            return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n+        case NAME:\n+            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n+        case CUSTOM:\n+        case NONE:\n+    }\n+    throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected TypeIdResolver idResolver(MapperConfig\u003c?\u003e config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, boolean forSer, boolean forDeser) {\n    if (_customIdResolver !\u003d null) {\n        return _customIdResolver;\n    }\n    if (_idType \u003d\u003d null) {\n        throw new IllegalStateException(\"Can not build, \u0027init()\u0027 not yet called\");\n    }\n    switch(_idType) {\n        case CLASS:\n            return new ClassNameIdResolver(baseType, config.getTypeFactory());\n        case MINIMAL_CLASS:\n            return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n        case NAME:\n            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n        case CUSTOM:\n        case NONE:\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 167,
      "functionName": "idResolver",
      "functionAnnotation": "",
      "functionDoc": "Helper method that will either return configured custom\ntype id resolver, or construct a standard resolver\ngiven configuration.\n"
    }
  }
}