{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StdTypeResolverBuilder.java",
  "functionName": "buildTypeDeserializer",
  "functionId": "buildTypeDeserializer___config-DeserializationConfig__baseType-JavaType__subtypes-Collection__NamedType__",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
  "functionAnnotation": "@SuppressWarnings(\"incomplete-switch\"),@Override",
  "functionDoc": "",
  "functionStartLine": 93,
  "functionEndLine": 116,
  "numCommitsSeen": 21,
  "timeTaken": 677,
  "changeHistory": [
    "0e1e87827326aa785da225aa980d7429a9d562f7",
    "9439a310c169a00cd01a4e9b64fb9f5441297b96",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
    "49b712169c432100297164f6b5102f3578bd636c",
    "8958048f38c5914bda894174f2d17b96828996b4",
    "ae1c98e50180e010ba3469634d215b48f6d81b75",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "0e1e87827326aa785da225aa980d7429a9d562f7": "Ymultichange(Yannotationchange,Yformatchange)",
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": "Yannotationchange",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": "Yannotationchange",
    "49b712169c432100297164f6b5102f3578bd636c": "Ymultichange(Yparameterchange,Ybodychange)",
    "8958048f38c5914bda894174f2d17b96828996b4": "Ybodychange",
    "ae1c98e50180e010ba3469634d215b48f6d81b75": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e1e87827326aa785da225aa980d7429a9d562f7": {
      "type": "Ymultichange(Yannotationchange,Yformatchange)",
      "commitMessage": "Fix #88\n",
      "commitDate": "1/11/14, 7:51 PM",
      "commitName": "0e1e87827326aa785da225aa980d7429a9d562f7",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "Fix #88\n",
          "commitDate": "1/11/14, 7:51 PM",
          "commitName": "0e1e87827326aa785da225aa980d7429a9d562f7",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/2/13, 1:13 PM",
          "commitNameOld": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 315.28,
          "commitsBetweenForRepo": 380,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"incomplete-switch\")\n@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
          "functionStartLine": 93,
          "functionName": "buildTypeDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"incomplete-switch\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,19 @@\n+@SuppressWarnings(\"incomplete-switch\")\n @Override\n public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n     if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n         return null;\n     }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n             return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n             return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n             return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n             return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": "@SuppressWarnings(\"incomplete-switch\"),@Override"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "Fix #88\n",
          "commitDate": "1/11/14, 7:51 PM",
          "commitName": "0e1e87827326aa785da225aa980d7429a9d562f7",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/2/13, 1:13 PM",
          "commitNameOld": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 315.28,
          "commitsBetweenForRepo": 380,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"incomplete-switch\")\n@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
          "functionStartLine": 93,
          "functionName": "buildTypeDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"incomplete-switch\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,19 @@\n+@SuppressWarnings(\"incomplete-switch\")\n @Override\n public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n     if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n         return null;\n     }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n             return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n             return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n             return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n             return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": {
      "type": "Yannotationchange",
      "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
      "commitDate": "3/2/13, 1:13 PM",
      "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/17/12, 7:57 AM",
      "commitNameOld": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 319.26,
      "commitsBetweenForRepo": 414,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 95,
      "functionName": "buildTypeDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n+@Override\n public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n     if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n         return null;\n     }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n             return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n             return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n             return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n             return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": {
      "type": "Yannotationchange",
      "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
      "commitDate": "4/17/12, 7:57 AM",
      "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 73.38,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "actualSource": "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 95,
      "functionName": "buildTypeDeserializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,17 @@\n-@Override\n public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n     if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n         return null;\n     }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n             return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n             return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n             return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n             return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override",
        "newValue": ""
      }
    },
    "49b712169c432100297164f6b5102f3578bd636c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
      "commitDate": "1/30/12, 10:13 PM",
      "commitName": "49b712169c432100297164f6b5102f3578bd636c",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
          "commitDate": "1/30/12, 10:13 PM",
          "commitName": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/20/12, 10:08 PM",
          "commitNameOld": "8958048f38c5914bda894174f2d17b96828996b4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 10.0,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
          "functionStartLine": 95,
          "functionName": "buildTypeDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n @Override\n-public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n+public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n     if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n         return null;\n     }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n-            return new AsArrayTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n-            return new AsPropertyTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n-            return new AsWrapperTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n-            return new AsExternalTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, baseType-JavaType, subtypes-Collection\u003cNamedType\u003e, property-BeanProperty]",
            "newValue": "[config-DeserializationConfig, baseType-JavaType, subtypes-Collection\u003cNamedType\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
          "commitDate": "1/30/12, 10:13 PM",
          "commitName": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/20/12, 10:08 PM",
          "commitNameOld": "8958048f38c5914bda894174f2d17b96828996b4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 10.0,
          "commitsBetweenForRepo": 78,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
          "functionStartLine": 95,
          "functionName": "buildTypeDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,18 @@\n @Override\n-public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n+public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes) {\n     if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n         return null;\n     }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n-            return new AsArrayTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsArrayTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n-            return new AsPropertyTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsPropertyTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n-            return new AsWrapperTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsWrapperTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n-            return new AsExternalTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n+            return new AsExternalTypeDeserializer(baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "8958048f38c5914bda894174f2d17b96828996b4": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-437]; allow type id to be passed to POJO (via @JsonTypeInfo.visible\u003dtrue)\n",
      "commitDate": "1/20/12, 10:08 PM",
      "commitName": "8958048f38c5914bda894174f2d17b96828996b4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/18/12, 8:25 PM",
      "commitNameOld": "c733a7f1e744121343da2851df27b581aab79e68",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.07,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 95,
      "functionName": "buildTypeDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n @Override\n public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n     if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n         return null;\n     }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n-            return new AsArrayTypeDeserializer(baseType, idRes, property, _defaultImpl);\n+            return new AsArrayTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n         case PROPERTY:\n-            return new AsPropertyTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n+            return new AsPropertyTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n         case WRAPPER_OBJECT:\n-            return new AsWrapperTypeDeserializer(baseType, idRes, property, _defaultImpl);\n+            return new AsWrapperTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n-            return new AsExternalTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n+            return new AsExternalTypeDeserializer(baseType, idRes, property, _typeProperty, _typeIdVisible, _defaultImpl);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ae1c98e50180e010ba3469634d215b48f6d81b75": {
      "type": "Ybodychange",
      "commitMessage": "Fix [JACKSON-746] for 2.0\n",
      "commitDate": "1/12/12, 2:57 PM",
      "commitName": "ae1c98e50180e010ba3469634d215b48f6d81b75",
      "commitAuthor": "Tatu",
      "commitDateOld": "12/23/11, 8:05 PM",
      "commitNameOld": "df6302f807bb230ae985a35100cbcc30af523bd1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 19.79,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n        return null;\n    }\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, property, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, property, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 98,
      "functionName": "buildTypeDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,18 @@\n @Override\n public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n+    if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n+        return null;\n+    }\n     TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n     switch(_includeAs) {\n         case WRAPPER_ARRAY:\n             return new AsArrayTypeDeserializer(baseType, idRes, property, _defaultImpl);\n         case PROPERTY:\n             return new AsPropertyTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n         case WRAPPER_OBJECT:\n             return new AsWrapperTypeDeserializer(baseType, idRes, property, _defaultImpl);\n         case EXTERNAL_PROPERTY:\n             return new AsExternalTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n     }\n     throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,15 @@\n+@Override\n+public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n+    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n+    switch(_includeAs) {\n+        case WRAPPER_ARRAY:\n+            return new AsArrayTypeDeserializer(baseType, idRes, property, _defaultImpl);\n+        case PROPERTY:\n+            return new AsPropertyTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n+        case WRAPPER_OBJECT:\n+            return new AsWrapperTypeDeserializer(baseType, idRes, property, _defaultImpl);\n+        case EXTERNAL_PROPERTY:\n+            return new AsExternalTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n+    }\n+    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection\u003cNamedType\u003e subtypes, BeanProperty property) {\n    TypeIdResolver idRes \u003d idResolver(config, baseType, subtypes, false, true);\n    switch(_includeAs) {\n        case WRAPPER_ARRAY:\n            return new AsArrayTypeDeserializer(baseType, idRes, property, _defaultImpl);\n        case PROPERTY:\n            return new AsPropertyTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n        case WRAPPER_OBJECT:\n            return new AsWrapperTypeDeserializer(baseType, idRes, property, _defaultImpl);\n        case EXTERNAL_PROPERTY:\n            return new AsExternalTypeDeserializer(baseType, idRes, property, _defaultImpl, _typeProperty);\n    }\n    throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
      "functionStartLine": 90,
      "functionName": "buildTypeDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}