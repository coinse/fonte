{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "POJOPropertiesCollector.java",
  "functionName": "_addMethods",
  "functionId": "_addMethods",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
  "functionAnnotation": "",
  "functionDoc": "Method for collecting basic information on all fields found\n",
  "functionStartLine": 498,
  "functionEndLine": 522,
  "numCommitsSeen": 49,
  "timeTaken": 2194,
  "changeHistory": [
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40",
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ybodychange",
    "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40": "Ybodychange",
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ybodychange",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 8:48 PM",
      "commitNameOld": "72d0919e1d971a534110069008942fe01f41e0f7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 10.08,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addMethods() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedMethod m : _classDef.memberMethods()) {\n        int argCount \u003d m.getParameterCount();\n        if (argCount \u003d\u003d 0) {\n            _addGetterMethod(m, ai);\n        } else if (argCount \u003d\u003d 1) {\n            _addSetterMethod(m, ai);\n        } else if (argCount \u003d\u003d 2) {\n            if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n                if (_anySetters \u003d\u003d null) {\n                    _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                }\n                _anySetters.add(m);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 418,
      "functionName": "_addMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,78 +1,18 @@\n protected void _addMethods() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     for (AnnotatedMethod m : _classDef.memberMethods()) {\n-        String explName;\n-        String implName;\n         int argCount \u003d m.getParameterCount();\n-        boolean visible;\n         if (argCount \u003d\u003d 0) {\n-            if (ai !\u003d null) {\n-                if (ai.hasAnyGetterAnnotation(m)) {\n-                    if (_anyGetters \u003d\u003d null) {\n-                        _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n-                    }\n-                    _anyGetters.add(m);\n-                    continue;\n-                }\n-                if (ai.hasAsValueAnnotation(m)) {\n-                    if (_jsonValueGetters \u003d\u003d null) {\n-                        _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n-                    }\n-                    _jsonValueGetters.add(m);\n-                    continue;\n-                }\n-            }\n-            explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n-            if (explName \u003d\u003d null) {\n-                implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n-                if (implName \u003d\u003d null) {\n-                    implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n-                    if (implName \u003d\u003d null) {\n-                        continue;\n-                    }\n-                    visible \u003d _visibilityChecker.isIsGetterVisible(m);\n-                } else {\n-                    visible \u003d _visibilityChecker.isGetterVisible(m);\n-                }\n-            } else {\n-                implName \u003d BeanUtil.okNameForGetter(m);\n-                if (implName \u003d\u003d null) {\n-                    implName \u003d m.getName();\n-                }\n-                if (explName.length() \u003d\u003d 0) {\n-                    explName \u003d implName;\n-                }\n-                visible \u003d true;\n-            }\n-            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n-            _property(implName).addGetter(m, explName, visible, ignore);\n+            _addGetterMethod(m, ai);\n         } else if (argCount \u003d\u003d 1) {\n-            explName \u003d (ai \u003d\u003d null) ? null : ai.findDeserializationName(m);\n-            if (explName \u003d\u003d null) {\n-                implName \u003d BeanUtil.okNameForSetter(m);\n-                if (implName \u003d\u003d null) {\n-                    continue;\n-                }\n-                visible \u003d _visibilityChecker.isSetterVisible(m);\n-            } else {\n-                implName \u003d BeanUtil.okNameForSetter(m);\n-                if (implName \u003d\u003d null) {\n-                    implName \u003d m.getName();\n-                }\n-                if (explName.length() \u003d\u003d 0) {\n-                    explName \u003d implName;\n-                }\n-                visible \u003d true;\n-            }\n-            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n-            _property(implName).addSetter(m, explName, visible, ignore);\n+            _addSetterMethod(m, ai);\n         } else if (argCount \u003d\u003d 2) {\n             if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n                 if (_anySetters \u003d\u003d null) {\n                     _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                 }\n                 _anySetters.add(m);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "1/31/12, 8:42 PM",
      "commitName": "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/25/12, 5:36 PM",
      "commitNameOld": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.13,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addMethods() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedMethod m : _classDef.memberMethods()) {\n        String explName;\n        String implName;\n        int argCount \u003d m.getParameterCount();\n        boolean visible;\n        if (argCount \u003d\u003d 0) {\n            if (ai !\u003d null) {\n                if (ai.hasAnyGetterAnnotation(m)) {\n                    if (_anyGetters \u003d\u003d null) {\n                        _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n                    }\n                    _anyGetters.add(m);\n                    continue;\n                }\n                if (ai.hasAsValueAnnotation(m)) {\n                    if (_jsonValueGetters \u003d\u003d null) {\n                        _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                    }\n                    _jsonValueGetters.add(m);\n                    continue;\n                }\n            }\n            explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n            if (explName \u003d\u003d null) {\n                implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n                if (implName \u003d\u003d null) {\n                    implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n                    if (implName \u003d\u003d null) {\n                        continue;\n                    }\n                    visible \u003d _visibilityChecker.isIsGetterVisible(m);\n                } else {\n                    visible \u003d _visibilityChecker.isGetterVisible(m);\n                }\n            } else {\n                implName \u003d BeanUtil.okNameForGetter(m);\n                if (implName \u003d\u003d null) {\n                    implName \u003d m.getName();\n                }\n                if (explName.length() \u003d\u003d 0) {\n                    explName \u003d implName;\n                }\n                visible \u003d true;\n            }\n            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n            _property(implName).addGetter(m, explName, visible, ignore);\n        } else if (argCount \u003d\u003d 1) {\n            explName \u003d (ai \u003d\u003d null) ? null : ai.findDeserializationName(m);\n            if (explName \u003d\u003d null) {\n                implName \u003d BeanUtil.okNameForSetter(m);\n                if (implName \u003d\u003d null) {\n                    continue;\n                }\n                visible \u003d _visibilityChecker.isSetterVisible(m);\n            } else {\n                implName \u003d BeanUtil.okNameForSetter(m);\n                if (implName \u003d\u003d null) {\n                    implName \u003d m.getName();\n                }\n                if (explName.length() \u003d\u003d 0) {\n                    explName \u003d implName;\n                }\n                visible \u003d true;\n            }\n            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n            _property(implName).addSetter(m, explName, visible, ignore);\n        } else if (argCount \u003d\u003d 2) {\n            if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n                if (_anySetters \u003d\u003d null) {\n                    _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                }\n                _anySetters.add(m);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 396,
      "functionName": "_addMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,78 +1,78 @@\n protected void _addMethods() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     for (AnnotatedMethod m : _classDef.memberMethods()) {\n         String explName;\n         String implName;\n         int argCount \u003d m.getParameterCount();\n         boolean visible;\n         if (argCount \u003d\u003d 0) {\n             if (ai !\u003d null) {\n                 if (ai.hasAnyGetterAnnotation(m)) {\n                     if (_anyGetters \u003d\u003d null) {\n-                        _anyGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n+                        _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n                     }\n                     _anyGetters.add(m);\n                     continue;\n                 }\n                 if (ai.hasAsValueAnnotation(m)) {\n                     if (_jsonValueGetters \u003d\u003d null) {\n                         _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                     }\n                     _jsonValueGetters.add(m);\n                     continue;\n                 }\n             }\n             explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n             if (explName \u003d\u003d null) {\n                 implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n                 if (implName \u003d\u003d null) {\n                     implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n                     if (implName \u003d\u003d null) {\n                         continue;\n                     }\n                     visible \u003d _visibilityChecker.isIsGetterVisible(m);\n                 } else {\n                     visible \u003d _visibilityChecker.isGetterVisible(m);\n                 }\n             } else {\n                 implName \u003d BeanUtil.okNameForGetter(m);\n                 if (implName \u003d\u003d null) {\n                     implName \u003d m.getName();\n                 }\n                 if (explName.length() \u003d\u003d 0) {\n                     explName \u003d implName;\n                 }\n                 visible \u003d true;\n             }\n             boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n             _property(implName).addGetter(m, explName, visible, ignore);\n         } else if (argCount \u003d\u003d 1) {\n             explName \u003d (ai \u003d\u003d null) ? null : ai.findDeserializationName(m);\n             if (explName \u003d\u003d null) {\n                 implName \u003d BeanUtil.okNameForSetter(m);\n                 if (implName \u003d\u003d null) {\n                     continue;\n                 }\n                 visible \u003d _visibilityChecker.isSetterVisible(m);\n             } else {\n                 implName \u003d BeanUtil.okNameForSetter(m);\n                 if (implName \u003d\u003d null) {\n                     implName \u003d m.getName();\n                 }\n                 if (explName.length() \u003d\u003d 0) {\n                     explName \u003d implName;\n                 }\n                 visible \u003d true;\n             }\n             boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n             _property(implName).addSetter(m, explName, visible, ignore);\n         } else if (argCount \u003d\u003d 2) {\n             if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n                 if (_anySetters \u003d\u003d null) {\n                     _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                 }\n                 _anySetters.add(m);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5": {
      "type": "Ybodychange",
      "commitMessage": "Renaming of AnnotationIntrospector methods to be (more) consistent\n",
      "commitDate": "1/19/12, 2:36 PM",
      "commitName": "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/18/12, 8:25 PM",
      "commitNameOld": "c733a7f1e744121343da2851df27b581aab79e68",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addMethods() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedMethod m : _classDef.memberMethods()) {\n        String explName;\n        String implName;\n        int argCount \u003d m.getParameterCount();\n        boolean visible;\n        if (argCount \u003d\u003d 0) {\n            if (ai !\u003d null) {\n                if (ai.hasAnyGetterAnnotation(m)) {\n                    if (_anyGetters \u003d\u003d null) {\n                        _anyGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                    }\n                    _anyGetters.add(m);\n                    continue;\n                }\n                if (ai.hasAsValueAnnotation(m)) {\n                    if (_jsonValueGetters \u003d\u003d null) {\n                        _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                    }\n                    _jsonValueGetters.add(m);\n                    continue;\n                }\n            }\n            explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n            if (explName \u003d\u003d null) {\n                implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n                if (implName \u003d\u003d null) {\n                    implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n                    if (implName \u003d\u003d null) {\n                        continue;\n                    }\n                    visible \u003d _visibilityChecker.isIsGetterVisible(m);\n                } else {\n                    visible \u003d _visibilityChecker.isGetterVisible(m);\n                }\n            } else {\n                implName \u003d BeanUtil.okNameForGetter(m);\n                if (implName \u003d\u003d null) {\n                    implName \u003d m.getName();\n                }\n                if (explName.length() \u003d\u003d 0) {\n                    explName \u003d implName;\n                }\n                visible \u003d true;\n            }\n            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n            _property(implName).addGetter(m, explName, visible, ignore);\n        } else if (argCount \u003d\u003d 1) {\n            explName \u003d (ai \u003d\u003d null) ? null : ai.findDeserializationName(m);\n            if (explName \u003d\u003d null) {\n                implName \u003d BeanUtil.okNameForSetter(m);\n                if (implName \u003d\u003d null) {\n                    continue;\n                }\n                visible \u003d _visibilityChecker.isSetterVisible(m);\n            } else {\n                implName \u003d BeanUtil.okNameForSetter(m);\n                if (implName \u003d\u003d null) {\n                    implName \u003d m.getName();\n                }\n                if (explName.length() \u003d\u003d 0) {\n                    explName \u003d implName;\n                }\n                visible \u003d true;\n            }\n            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n            _property(implName).addSetter(m, explName, visible, ignore);\n        } else if (argCount \u003d\u003d 2) {\n            if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n                if (_anySetters \u003d\u003d null) {\n                    _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                }\n                _anySetters.add(m);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 398,
      "functionName": "_addMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n",
      "diff": "@@ -1,78 +1,78 @@\n protected void _addMethods() {\n     final AnnotationIntrospector ai \u003d _annotationIntrospector;\n     for (AnnotatedMethod m : _classDef.memberMethods()) {\n         String explName;\n         String implName;\n         int argCount \u003d m.getParameterCount();\n         boolean visible;\n         if (argCount \u003d\u003d 0) {\n             if (ai !\u003d null) {\n                 if (ai.hasAnyGetterAnnotation(m)) {\n                     if (_anyGetters \u003d\u003d null) {\n                         _anyGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                     }\n                     _anyGetters.add(m);\n                     continue;\n                 }\n                 if (ai.hasAsValueAnnotation(m)) {\n                     if (_jsonValueGetters \u003d\u003d null) {\n                         _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                     }\n                     _jsonValueGetters.add(m);\n                     continue;\n                 }\n             }\n-            explName \u003d (ai \u003d\u003d null) ? null : ai.findGettablePropertyName(m);\n+            explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n             if (explName \u003d\u003d null) {\n                 implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n                 if (implName \u003d\u003d null) {\n                     implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n                     if (implName \u003d\u003d null) {\n                         continue;\n                     }\n                     visible \u003d _visibilityChecker.isIsGetterVisible(m);\n                 } else {\n                     visible \u003d _visibilityChecker.isGetterVisible(m);\n                 }\n             } else {\n                 implName \u003d BeanUtil.okNameForGetter(m);\n                 if (implName \u003d\u003d null) {\n                     implName \u003d m.getName();\n                 }\n                 if (explName.length() \u003d\u003d 0) {\n                     explName \u003d implName;\n                 }\n                 visible \u003d true;\n             }\n             boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n             _property(implName).addGetter(m, explName, visible, ignore);\n         } else if (argCount \u003d\u003d 1) {\n-            explName \u003d (ai \u003d\u003d null) ? null : ai.findSettablePropertyName(m);\n+            explName \u003d (ai \u003d\u003d null) ? null : ai.findDeserializationName(m);\n             if (explName \u003d\u003d null) {\n                 implName \u003d BeanUtil.okNameForSetter(m);\n                 if (implName \u003d\u003d null) {\n                     continue;\n                 }\n                 visible \u003d _visibilityChecker.isSetterVisible(m);\n             } else {\n                 implName \u003d BeanUtil.okNameForSetter(m);\n                 if (implName \u003d\u003d null) {\n                     implName \u003d m.getName();\n                 }\n                 if (explName.length() \u003d\u003d 0) {\n                     explName \u003d implName;\n                 }\n                 visible \u003d true;\n             }\n             boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n             _property(implName).addSetter(m, explName, visible, ignore);\n         } else if (argCount \u003d\u003d 2) {\n             if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n                 if (_anySetters \u003d\u003d null) {\n                     _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                 }\n                 _anySetters.add(m);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,78 @@\n+protected void _addMethods() {\n+    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n+    for (AnnotatedMethod m : _classDef.memberMethods()) {\n+        String explName;\n+        String implName;\n+        int argCount \u003d m.getParameterCount();\n+        boolean visible;\n+        if (argCount \u003d\u003d 0) {\n+            if (ai !\u003d null) {\n+                if (ai.hasAnyGetterAnnotation(m)) {\n+                    if (_anyGetters \u003d\u003d null) {\n+                        _anyGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n+                    }\n+                    _anyGetters.add(m);\n+                    continue;\n+                }\n+                if (ai.hasAsValueAnnotation(m)) {\n+                    if (_jsonValueGetters \u003d\u003d null) {\n+                        _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n+                    }\n+                    _jsonValueGetters.add(m);\n+                    continue;\n+                }\n+            }\n+            explName \u003d (ai \u003d\u003d null) ? null : ai.findGettablePropertyName(m);\n+            if (explName \u003d\u003d null) {\n+                implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n+                if (implName \u003d\u003d null) {\n+                    implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n+                    if (implName \u003d\u003d null) {\n+                        continue;\n+                    }\n+                    visible \u003d _visibilityChecker.isIsGetterVisible(m);\n+                } else {\n+                    visible \u003d _visibilityChecker.isGetterVisible(m);\n+                }\n+            } else {\n+                implName \u003d BeanUtil.okNameForGetter(m);\n+                if (implName \u003d\u003d null) {\n+                    implName \u003d m.getName();\n+                }\n+                if (explName.length() \u003d\u003d 0) {\n+                    explName \u003d implName;\n+                }\n+                visible \u003d true;\n+            }\n+            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n+            _property(implName).addGetter(m, explName, visible, ignore);\n+        } else if (argCount \u003d\u003d 1) {\n+            explName \u003d (ai \u003d\u003d null) ? null : ai.findSettablePropertyName(m);\n+            if (explName \u003d\u003d null) {\n+                implName \u003d BeanUtil.okNameForSetter(m);\n+                if (implName \u003d\u003d null) {\n+                    continue;\n+                }\n+                visible \u003d _visibilityChecker.isSetterVisible(m);\n+            } else {\n+                implName \u003d BeanUtil.okNameForSetter(m);\n+                if (implName \u003d\u003d null) {\n+                    implName \u003d m.getName();\n+                }\n+                if (explName.length() \u003d\u003d 0) {\n+                    explName \u003d implName;\n+                }\n+                visible \u003d true;\n+            }\n+            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n+            _property(implName).addSetter(m, explName, visible, ignore);\n+        } else if (argCount \u003d\u003d 2) {\n+            if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n+                if (_anySetters \u003d\u003d null) {\n+                    _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n+                }\n+                _anySetters.add(m);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void _addMethods() {\n    final AnnotationIntrospector ai \u003d _annotationIntrospector;\n    for (AnnotatedMethod m : _classDef.memberMethods()) {\n        String explName;\n        String implName;\n        int argCount \u003d m.getParameterCount();\n        boolean visible;\n        if (argCount \u003d\u003d 0) {\n            if (ai !\u003d null) {\n                if (ai.hasAnyGetterAnnotation(m)) {\n                    if (_anyGetters \u003d\u003d null) {\n                        _anyGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                    }\n                    _anyGetters.add(m);\n                    continue;\n                }\n                if (ai.hasAsValueAnnotation(m)) {\n                    if (_jsonValueGetters \u003d\u003d null) {\n                        _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                    }\n                    _jsonValueGetters.add(m);\n                    continue;\n                }\n            }\n            explName \u003d (ai \u003d\u003d null) ? null : ai.findGettablePropertyName(m);\n            if (explName \u003d\u003d null) {\n                implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n                if (implName \u003d\u003d null) {\n                    implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n                    if (implName \u003d\u003d null) {\n                        continue;\n                    }\n                    visible \u003d _visibilityChecker.isIsGetterVisible(m);\n                } else {\n                    visible \u003d _visibilityChecker.isGetterVisible(m);\n                }\n            } else {\n                implName \u003d BeanUtil.okNameForGetter(m);\n                if (implName \u003d\u003d null) {\n                    implName \u003d m.getName();\n                }\n                if (explName.length() \u003d\u003d 0) {\n                    explName \u003d implName;\n                }\n                visible \u003d true;\n            }\n            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n            _property(implName).addGetter(m, explName, visible, ignore);\n        } else if (argCount \u003d\u003d 1) {\n            explName \u003d (ai \u003d\u003d null) ? null : ai.findSettablePropertyName(m);\n            if (explName \u003d\u003d null) {\n                implName \u003d BeanUtil.okNameForSetter(m);\n                if (implName \u003d\u003d null) {\n                    continue;\n                }\n                visible \u003d _visibilityChecker.isSetterVisible(m);\n            } else {\n                implName \u003d BeanUtil.okNameForSetter(m);\n                if (implName \u003d\u003d null) {\n                    implName \u003d m.getName();\n                }\n                if (explName.length() \u003d\u003d 0) {\n                    explName \u003d implName;\n                }\n                visible \u003d true;\n            }\n            boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n            _property(implName).addSetter(m, explName, visible, ignore);\n        } else if (argCount \u003d\u003d 2) {\n            if (ai !\u003d null \u0026\u0026 ai.hasAnySetterAnnotation(m)) {\n                if (_anySetters \u003d\u003d null) {\n                    _anySetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n                }\n                _anySetters.add(m);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 398,
      "functionName": "_addMethods",
      "functionAnnotation": "",
      "functionDoc": "Method for collecting basic information on all fields found\n"
    }
  }
}