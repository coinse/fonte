{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObjectMapper.java",
  "functionName": "_readMapAndClose",
  "functionId": "_readMapAndClose___jp-JsonParser__valueType-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 3046,
  "functionEndLine": 3078,
  "numCommitsSeen": 136,
  "timeTaken": 10448,
  "changeHistory": [
    "096e02bf4a1905b58f1692e74a7e6d7f7f1bc71e",
    "6997ce367c941c52774377324197fb0a1896c439",
    "c9e0c1712bb188783acb586a4eb4ece4217b2962",
    "e1961745ea5209c66990f76ba94bf8cd02b77387",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "096e02bf4a1905b58f1692e74a7e6d7f7f1bc71e": "Ybodychange",
    "6997ce367c941c52774377324197fb0a1896c439": "Ybodychange",
    "c9e0c1712bb188783acb586a4eb4ece4217b2962": "Ybodychange",
    "e1961745ea5209c66990f76ba94bf8cd02b77387": "Ybodychange",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "096e02bf4a1905b58f1692e74a7e6d7f7f1bc71e": {
      "type": "Ybodychange",
      "commitMessage": "Added check at end of processing to ensure all object ids are resolved.\n",
      "commitDate": "1/13/14, 7:07 AM",
      "commitName": "096e02bf4a1905b58f1692e74a7e6d7f7f1bc71e",
      "commitAuthor": "Pascal GÃ©linas",
      "commitDateOld": "1/11/14, 7:51 PM",
      "commitNameOld": "0e1e87827326aa785da225aa980d7429a9d562f7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.47,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n    try {\n        Object result;\n        JsonToken t \u003d _initForReading(jp);\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n            DeserializationContext ctxt \u003d createDeserializationContext(jp, getDeserializationConfig());\n            result \u003d _findRootDeserializer(ctxt, valueType).getNullValue();\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n            result \u003d null;\n        } else {\n            DeserializationConfig cfg \u003d getDeserializationConfig();\n            DeserializationContext ctxt \u003d createDeserializationContext(jp, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n            if (cfg.useRootWrapping()) {\n                result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n            } else {\n                result \u003d deser.deserialize(jp, ctxt);\n            }\n            ctxt.checkUnresolvedObjectId();\n        }\n        jp.clearCurrentToken();\n        return result;\n    } finally {\n        try {\n            jp.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2987,
      "functionName": "_readMapAndClose",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,29 @@\n protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n     try {\n         Object result;\n         JsonToken t \u003d _initForReading(jp);\n         if (t \u003d\u003d JsonToken.VALUE_NULL) {\n             DeserializationContext ctxt \u003d createDeserializationContext(jp, getDeserializationConfig());\n             result \u003d _findRootDeserializer(ctxt, valueType).getNullValue();\n         } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n             result \u003d null;\n         } else {\n             DeserializationConfig cfg \u003d getDeserializationConfig();\n             DeserializationContext ctxt \u003d createDeserializationContext(jp, cfg);\n             JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n             if (cfg.useRootWrapping()) {\n                 result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n             } else {\n                 result \u003d deser.deserialize(jp, ctxt);\n             }\n+            ctxt.checkUnresolvedObjectId();\n         }\n         jp.clearCurrentToken();\n         return result;\n     } finally {\n         try {\n             jp.close();\n         } catch (IOException ioe) {\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6997ce367c941c52774377324197fb0a1896c439": {
      "type": "Ybodychange",
      "commitMessage": "Fix the last problem wrt contextual deserialization; back to fully working again\n",
      "commitDate": "1/31/12, 3:50 PM",
      "commitName": "6997ce367c941c52774377324197fb0a1896c439",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/30/12, 10:13 PM",
      "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.73,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n    try {\n        Object result;\n        JsonToken t \u003d _initForReading(jp);\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n            DeserializationContext ctxt \u003d createDeserializationContext(jp, getDeserializationConfig());\n            result \u003d _findRootDeserializer(ctxt, valueType).getNullValue();\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n            result \u003d null;\n        } else {\n            DeserializationConfig cfg \u003d getDeserializationConfig();\n            DeserializationContext ctxt \u003d createDeserializationContext(jp, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n            if (cfg.useRootWrapping()) {\n                result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n            } else {\n                result \u003d deser.deserialize(jp, ctxt);\n            }\n        }\n        jp.clearCurrentToken();\n        return result;\n    } finally {\n        try {\n            jp.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2508,
      "functionName": "_readMapAndClose",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n     try {\n         Object result;\n         JsonToken t \u003d _initForReading(jp);\n         if (t \u003d\u003d JsonToken.VALUE_NULL) {\n-            DeserializationContext ctxt \u003d _createDeserializationContext(jp, getDeserializationConfig());\n+            DeserializationContext ctxt \u003d createDeserializationContext(jp, getDeserializationConfig());\n             result \u003d _findRootDeserializer(ctxt, valueType).getNullValue();\n         } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n             result \u003d null;\n         } else {\n             DeserializationConfig cfg \u003d getDeserializationConfig();\n-            DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n+            DeserializationContext ctxt \u003d createDeserializationContext(jp, cfg);\n             JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n             if (cfg.useRootWrapping()) {\n                 result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n             } else {\n                 result \u003d deser.deserialize(jp, ctxt);\n             }\n         }\n         jp.clearCurrentToken();\n         return result;\n     } finally {\n         try {\n             jp.close();\n         } catch (IOException ioe) {\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9e0c1712bb188783acb586a4eb4ece4217b2962": {
      "type": "Ybodychange",
      "commitMessage": "Prune some unneeded methods from ObjectMapper\n",
      "commitDate": "1/24/12, 11:08 AM",
      "commitName": "c9e0c1712bb188783acb586a4eb4ece4217b2962",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/23/12, 10:08 PM",
      "commitNameOld": "71043a71cdfc55708527f82e0ae2ec8414586ebb",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n    try {\n        Object result;\n        JsonToken t \u003d _initForReading(jp);\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n            DeserializationContext ctxt \u003d _createDeserializationContext(jp, getDeserializationConfig());\n            result \u003d _findRootDeserializer(ctxt, valueType).getNullValue();\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n            result \u003d null;\n        } else {\n            DeserializationConfig cfg \u003d getDeserializationConfig();\n            DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n            if (cfg.useRootWrapping()) {\n                result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n            } else {\n                result \u003d deser.deserialize(jp, ctxt);\n            }\n        }\n        jp.clearCurrentToken();\n        return result;\n    } finally {\n        try {\n            jp.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2490,
      "functionName": "_readMapAndClose",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,28 @@\n protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n     try {\n         Object result;\n         JsonToken t \u003d _initForReading(jp);\n         if (t \u003d\u003d JsonToken.VALUE_NULL) {\n-            result \u003d _findRootDeserializer(getDeserializationConfig(), valueType).getNullValue();\n+            DeserializationContext ctxt \u003d _createDeserializationContext(jp, getDeserializationConfig());\n+            result \u003d _findRootDeserializer(ctxt, valueType).getNullValue();\n         } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n             result \u003d null;\n         } else {\n             DeserializationConfig cfg \u003d getDeserializationConfig();\n             DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n-            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(cfg, valueType);\n+            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(ctxt, valueType);\n             if (cfg.useRootWrapping()) {\n                 result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n             } else {\n                 result \u003d deser.deserialize(jp, ctxt);\n             }\n         }\n         jp.clearCurrentToken();\n         return result;\n     } finally {\n         try {\n             jp.close();\n         } catch (IOException ioe) {\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e1961745ea5209c66990f76ba94bf8cd02b77387": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-764], programmatic way to set root name to use for root-wrapping\n",
      "commitDate": "1/22/12, 4:03 PM",
      "commitName": "e1961745ea5209c66990f76ba94bf8cd02b77387",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/20/12, 4:07 PM",
      "commitNameOld": "cbbfbd385f0fa08c8590b778956d52002e35f9a2",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n    try {\n        Object result;\n        JsonToken t \u003d _initForReading(jp);\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n            result \u003d _findRootDeserializer(getDeserializationConfig(), valueType).getNullValue();\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n            result \u003d null;\n        } else {\n            DeserializationConfig cfg \u003d getDeserializationConfig();\n            DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(cfg, valueType);\n            if (cfg.useRootWrapping()) {\n                result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n            } else {\n                result \u003d deser.deserialize(jp, ctxt);\n            }\n        }\n        jp.clearCurrentToken();\n        return result;\n    } finally {\n        try {\n            jp.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2645,
      "functionName": "_readMapAndClose",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n     try {\n         Object result;\n         JsonToken t \u003d _initForReading(jp);\n         if (t \u003d\u003d JsonToken.VALUE_NULL) {\n             result \u003d _findRootDeserializer(getDeserializationConfig(), valueType).getNullValue();\n         } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n             result \u003d null;\n         } else {\n             DeserializationConfig cfg \u003d getDeserializationConfig();\n             DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n             JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(cfg, valueType);\n-            if (cfg.isEnabled(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)) {\n-                result \u003d _unwrapAndDeserialize(jp, valueType, ctxt, deser);\n+            if (cfg.useRootWrapping()) {\n+                result \u003d _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser);\n             } else {\n                 result \u003d deser.deserialize(jp, ctxt);\n             }\n         }\n         jp.clearCurrentToken();\n         return result;\n     } finally {\n         try {\n             jp.close();\n         } catch (IOException ioe) {\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": {
      "type": "Ybodychange",
      "commitMessage": "Completed major rewrite of handling of on/off features for ObjectMapper/SerConfig/DeserConfig\n",
      "commitDate": "1/19/12, 12:31 PM",
      "commitName": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/18/12, 10:41 PM",
      "commitNameOld": "3108d85c7ca25507a10bd6d4b49b7a2fb807329b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n    try {\n        Object result;\n        JsonToken t \u003d _initForReading(jp);\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n            result \u003d _findRootDeserializer(getDeserializationConfig(), valueType).getNullValue();\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n            result \u003d null;\n        } else {\n            DeserializationConfig cfg \u003d getDeserializationConfig();\n            DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(cfg, valueType);\n            if (cfg.isEnabled(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)) {\n                result \u003d _unwrapAndDeserialize(jp, valueType, ctxt, deser);\n            } else {\n                result \u003d deser.deserialize(jp, ctxt);\n            }\n        }\n        jp.clearCurrentToken();\n        return result;\n    } finally {\n        try {\n            jp.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2562,
      "functionName": "_readMapAndClose",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n     try {\n         Object result;\n         JsonToken t \u003d _initForReading(jp);\n         if (t \u003d\u003d JsonToken.VALUE_NULL) {\n-            result \u003d _findRootDeserializer(this._deserializationConfig, valueType).getNullValue();\n+            result \u003d _findRootDeserializer(getDeserializationConfig(), valueType).getNullValue();\n         } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n             result \u003d null;\n         } else {\n-            DeserializationConfig cfg \u003d copyDeserializationConfig();\n+            DeserializationConfig cfg \u003d getDeserializationConfig();\n             DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n             JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(cfg, valueType);\n             if (cfg.isEnabled(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)) {\n                 result \u003d _unwrapAndDeserialize(jp, valueType, ctxt, deser);\n             } else {\n                 result \u003d deser.deserialize(jp, ctxt);\n             }\n         }\n         jp.clearCurrentToken();\n         return result;\n     } finally {\n         try {\n             jp.close();\n         } catch (IOException ioe) {\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,27 @@\n+protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n+    try {\n+        Object result;\n+        JsonToken t \u003d _initForReading(jp);\n+        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n+            result \u003d _findRootDeserializer(this._deserializationConfig, valueType).getNullValue();\n+        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n+            result \u003d null;\n+        } else {\n+            DeserializationConfig cfg \u003d copyDeserializationConfig();\n+            DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n+            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(cfg, valueType);\n+            if (cfg.isEnabled(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)) {\n+                result \u003d _unwrapAndDeserialize(jp, valueType, ctxt, deser);\n+            } else {\n+                result \u003d deser.deserialize(jp, ctxt);\n+            }\n+        }\n+        jp.clearCurrentToken();\n+        return result;\n+    } finally {\n+        try {\n+            jp.close();\n+        } catch (IOException ioe) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n    try {\n        Object result;\n        JsonToken t \u003d _initForReading(jp);\n        if (t \u003d\u003d JsonToken.VALUE_NULL) {\n            result \u003d _findRootDeserializer(this._deserializationConfig, valueType).getNullValue();\n        } else if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n            result \u003d null;\n        } else {\n            DeserializationConfig cfg \u003d copyDeserializationConfig();\n            DeserializationContext ctxt \u003d _createDeserializationContext(jp, cfg);\n            JsonDeserializer\u003cObject\u003e deser \u003d _findRootDeserializer(cfg, valueType);\n            if (cfg.isEnabled(DeserializationConfig.Feature.UNWRAP_ROOT_VALUE)) {\n                result \u003d _unwrapAndDeserialize(jp, valueType, ctxt, deser);\n            } else {\n                result \u003d deser.deserialize(jp, ctxt);\n            }\n        }\n        jp.clearCurrentToken();\n        return result;\n    } finally {\n        try {\n            jp.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 2714,
      "functionName": "_readMapAndClose",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}