{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AsArrayTypeDeserializer.java",
  "functionName": "_locateTypeId",
  "functionId": "_locateTypeId___jp-JsonParser__ctxt-DeserializationContext",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 114,
  "functionEndLine": 135,
  "numCommitsSeen": 15,
  "timeTaken": 440,
  "changeHistory": [
    "10af6d3a3e816f9717c112e97a912fef9a4eeadd",
    "231be531579336ce5528ebc6ead81c09e5c5138b",
    "ba0470fba09489f0fd97f2718e064b5105cafad7",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "10af6d3a3e816f9717c112e97a912fef9a4eeadd": "Yexceptionschange",
    "231be531579336ce5528ebc6ead81c09e5c5138b": "Ybodychange",
    "ba0470fba09489f0fd97f2718e064b5105cafad7": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "10af6d3a3e816f9717c112e97a912fef9a4eeadd": {
      "type": "Yexceptionschange",
      "commitMessage": "Yet more refactorign\n",
      "commitDate": "12/31/13, 10:27 PM",
      "commitName": "10af6d3a3e816f9717c112e97a912fef9a4eeadd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/4/13, 5:17 PM",
      "commitNameOld": "767ecb29a5a79f799113d13eb137389ff5a4c2c5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 149.26,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException {\n    if (!jp.isExpectedStartArrayToken()) {\n        if (_defaultImpl !\u003d null) {\n            return _idResolver.idFromBaseType();\n        }\n        throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n    }\n    JsonToken t \u003d jp.nextToken();\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String result \u003d jp.getText();\n        jp.nextToken();\n        return result;\n    }\n    if (_defaultImpl !\u003d null) {\n        return _idResolver.idFromBaseType();\n    }\n    throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
      "functionStartLine": 111,
      "functionName": "_locateTypeId",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n-protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException {\n     if (!jp.isExpectedStartArrayToken()) {\n         if (_defaultImpl !\u003d null) {\n             return _idResolver.idFromBaseType();\n         }\n         throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n     }\n     JsonToken t \u003d jp.nextToken();\n     if (t \u003d\u003d JsonToken.VALUE_STRING) {\n         String result \u003d jp.getText();\n         jp.nextToken();\n         return result;\n     }\n     if (_defaultImpl !\u003d null) {\n         return _idResolver.idFromBaseType();\n     }\n     throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[IOException, JsonProcessingException]",
        "newValue": "[IOException]"
      }
    },
    "231be531579336ce5528ebc6ead81c09e5c5138b": {
      "type": "Ybodychange",
      "commitMessage": "Fix issues #94 and #96\n",
      "commitDate": "10/26/12, 6:19 PM",
      "commitName": "231be531579336ce5528ebc6ead81c09e5c5138b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/5/12, 11:51 PM",
      "commitNameOld": "65d186e7f2561b6e3fedce1869546b2443036b50",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (!jp.isExpectedStartArrayToken()) {\n        if (_defaultImpl !\u003d null) {\n            return _idResolver.idFromBaseType();\n        }\n        throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n    }\n    JsonToken t \u003d jp.nextToken();\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n        String result \u003d jp.getText();\n        jp.nextToken();\n        return result;\n    }\n    if (_defaultImpl !\u003d null) {\n        return _idResolver.idFromBaseType();\n    }\n    throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
      "functionStartLine": 122,
      "functionName": "_locateTypeId",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (!jp.isExpectedStartArrayToken()) {\n         if (_defaultImpl !\u003d null) {\n             return _idResolver.idFromBaseType();\n         }\n         throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n     }\n-    if (jp.nextToken() !\u003d JsonToken.VALUE_STRING) {\n-        if (_defaultImpl !\u003d null) {\n-            return _idResolver.idFromBaseType();\n-        }\n-        throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n+    JsonToken t \u003d jp.nextToken();\n+    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n+        String result \u003d jp.getText();\n+        jp.nextToken();\n+        return result;\n     }\n-    String result \u003d jp.getText();\n-    jp.nextToken();\n-    return result;\n+    if (_defaultImpl !\u003d null) {\n+        return _idResolver.idFromBaseType();\n+    }\n+    throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ba0470fba09489f0fd97f2718e064b5105cafad7": {
      "type": "Ybodychange",
      "commitMessage": "Merged [JACKSON-712] fix in, with proper 2.0 changes\n",
      "commitDate": "12/29/11, 10:14 PM",
      "commitName": "ba0470fba09489f0fd97f2718e064b5105cafad7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/11, 6:23 PM",
      "commitNameOld": "d92c1ed454e8474103e7eb698b0a855e7850dbb5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (!jp.isExpectedStartArrayToken()) {\n        if (_defaultImpl !\u003d null) {\n            return _idResolver.idFromBaseType();\n        }\n        throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n    }\n    if (jp.nextToken() !\u003d JsonToken.VALUE_STRING) {\n        if (_defaultImpl !\u003d null) {\n            return _idResolver.idFromBaseType();\n        }\n        throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n    }\n    String result \u003d jp.getText();\n    jp.nextToken();\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
      "functionStartLine": 92,
      "functionName": "_locateTypeId",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,17 @@\n protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n     if (!jp.isExpectedStartArrayToken()) {\n+        if (_defaultImpl !\u003d null) {\n+            return _idResolver.idFromBaseType();\n+        }\n         throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n     }\n     if (jp.nextToken() !\u003d JsonToken.VALUE_STRING) {\n+        if (_defaultImpl !\u003d null) {\n+            return _idResolver.idFromBaseType();\n+        }\n         throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n     }\n     String result \u003d jp.getText();\n     jp.nextToken();\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,11 @@\n+protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+    if (!jp.isExpectedStartArrayToken()) {\n+        throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n+    }\n+    if (jp.nextToken() !\u003d JsonToken.VALUE_STRING) {\n+        throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n+    }\n+    String result \u003d jp.getText();\n+    jp.nextToken();\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected final String _locateTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n    if (!jp.isExpectedStartArrayToken()) {\n        throw ctxt.wrongTokenException(jp, JsonToken.START_ARRAY, \"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n    }\n    if (jp.nextToken() !\u003d JsonToken.VALUE_STRING) {\n        throw ctxt.wrongTokenException(jp, JsonToken.VALUE_STRING, \"need JSON String that contains type id (for subtype of \" + baseTypeName() + \")\");\n    }\n    String result \u003d jp.getText();\n    jp.nextToken();\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
      "functionStartLine": 97,
      "functionName": "_locateTypeId",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}