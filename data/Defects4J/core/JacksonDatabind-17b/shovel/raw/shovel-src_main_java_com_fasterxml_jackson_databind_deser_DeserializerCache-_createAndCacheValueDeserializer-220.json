{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeserializerCache.java",
  "functionName": "_createAndCacheValueDeserializer",
  "functionId": "_createAndCacheValueDeserializer___ctxt-DeserializationContext__factory-DeserializerFactory__type-JavaType",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
  "functionAnnotation": "",
  "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param ctxt Currently active deserialization context\n@param type Type of property to deserialize\n",
  "functionStartLine": 220,
  "functionEndLine": 252,
  "numCommitsSeen": 74,
  "timeTaken": 1883,
  "changeHistory": [
    "261f214d867f750ff3c7f68d1376fee3b62584c1",
    "1421af6eeaa8101c3ba8cef834f893943e244cf8",
    "82b474d51545919cb38a49485f56fd29d6ed199b",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
    "53fb8522b402a409139175cbf867afa924e549f5",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "261f214d867f750ff3c7f68d1376fee3b62584c1": "Ydocchange",
    "1421af6eeaa8101c3ba8cef834f893943e244cf8": "Ydocchange",
    "82b474d51545919cb38a49485f56fd29d6ed199b": "Yfilerename",
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": "Ymultichange(Yparameterchange,Ybodychange)",
    "53fb8522b402a409139175cbf867afa924e549f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Yfilerename",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "261f214d867f750ff3c7f68d1376fee3b62584c1": {
      "type": "Ydocchange",
      "commitMessage": "further fixes to javadocs, for release\n",
      "commitDate": "3/25/12, 12:07 PM",
      "commitName": "261f214d867f750ff3c7f68d1376fee3b62584c1",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/9/12, 9:46 PM",
      "commitNameOld": "1421af6eeaa8101c3ba8cef834f893943e244cf8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 15.56,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, factory, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 203,
      "functionName": "_createAndCacheValueDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param ctxt Currently active deserialization context\n@param type Type of property to deserialize\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
        "newValue": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param ctxt Currently active deserialization context\n@param type Type of property to deserialize\n"
      }
    },
    "1421af6eeaa8101c3ba8cef834f893943e244cf8": {
      "type": "Ydocchange",
      "commitMessage": "Implement [JACKSON-805], SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED\n",
      "commitDate": "3/9/12, 9:46 PM",
      "commitName": "1421af6eeaa8101c3ba8cef834f893943e244cf8",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/17/12, 10:40 PM",
      "commitNameOld": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 20.96,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, factory, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 203,
      "functionName": "_createAndCacheValueDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
        "newValue": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n"
      }
    },
    "82b474d51545919cb38a49485f56fd29d6ed199b": {
      "type": "Yfilerename",
      "commitMessage": "Fix 3 unit test failures\n",
      "commitDate": "2/2/12, 5:33 PM",
      "commitName": "82b474d51545919cb38a49485f56fd29d6ed199b",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 1:00 PM",
      "commitNameOld": "69afdff1fac0fc4a472a0b04d5bc01df49a427c5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, factory, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 205,
      "functionName": "_createAndCacheValueDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
      }
    },
    "060ce11a33baa8a1c951cb5b7a857d5d81db09ef": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
      "commitDate": "2/1/12, 10:18 PM",
      "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, factory, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 207,
          "functionName": "_createAndCacheValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     synchronized (_incompleteDeserializers) {\n         JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n         if (deser !\u003d null) {\n             return deser;\n         }\n         int count \u003d _incompleteDeserializers.size();\n         if (count \u003e 0) {\n             deser \u003d _incompleteDeserializers.get(type);\n             if (deser !\u003d null) {\n                 return deser;\n             }\n         }\n         try {\n-            return _createAndCache2(ctxt, type);\n+            return _createAndCache2(ctxt, factory, type);\n         } finally {\n             if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                 _incompleteDeserializers.clear();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, factory, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 207,
          "functionName": "_createAndCacheValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     synchronized (_incompleteDeserializers) {\n         JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n         if (deser !\u003d null) {\n             return deser;\n         }\n         int count \u003d _incompleteDeserializers.size();\n         if (count \u003e 0) {\n             deser \u003d _incompleteDeserializers.get(type);\n             if (deser !\u003d null) {\n                 return deser;\n             }\n         }\n         try {\n-            return _createAndCache2(ctxt, type);\n+            return _createAndCache2(ctxt, factory, type);\n         } finally {\n             if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                 _incompleteDeserializers.clear();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented [JACKSON-776], refactoring of DeserializationContext\n",
          "commitDate": "2/1/12, 10:18 PM",
          "commitName": "060ce11a33baa8a1c951cb5b7a857d5d81db09ef",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 8:01 PM",
          "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, factory, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerCache.java",
          "functionStartLine": 207,
          "functionName": "_createAndCacheValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {\n     synchronized (_incompleteDeserializers) {\n         JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n         if (deser !\u003d null) {\n             return deser;\n         }\n         int count \u003d _incompleteDeserializers.size();\n         if (count \u003e 0) {\n             deser \u003d _incompleteDeserializers.get(type);\n             if (deser !\u003d null) {\n                 return deser;\n             }\n         }\n         try {\n-            return _createAndCache2(ctxt, type);\n+            return _createAndCache2(ctxt, factory, type);\n         } finally {\n             if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                 _incompleteDeserializers.clear();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType]",
            "newValue": "[ctxt-DeserializationContext, factory-DeserializerFactory, type-JavaType]"
          }
        }
      ]
    },
    "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
      "commitDate": "1/31/12, 12:45 PM",
      "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 269,
          "functionName": "_createAndCacheValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n     synchronized (_incompleteDeserializers) {\n         JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n         if (deser !\u003d null) {\n             return deser;\n         }\n         int count \u003d _incompleteDeserializers.size();\n         if (count \u003e 0) {\n             deser \u003d _incompleteDeserializers.get(type);\n             if (deser !\u003d null) {\n                 return deser;\n             }\n         }\n         try {\n-            return _createAndCache2(ctxt, type, property);\n+            return _createAndCache2(ctxt, type);\n         } finally {\n             if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                 _incompleteDeserializers.clear();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[ctxt-DeserializationContext, type-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "More elimination of BeanProperty passing, getting close: one new (transient) unit test failure to fix\n",
          "commitDate": "1/31/12, 12:45 PM",
          "commitName": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/30/12, 10:13 PM",
          "commitNameOld": "49b712169c432100297164f6b5102f3578bd636c",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, type);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 269,
          "functionName": "_createAndCacheValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException {\n     synchronized (_incompleteDeserializers) {\n         JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n         if (deser !\u003d null) {\n             return deser;\n         }\n         int count \u003d _incompleteDeserializers.size();\n         if (count \u003e 0) {\n             deser \u003d _incompleteDeserializers.get(type);\n             if (deser !\u003d null) {\n                 return deser;\n             }\n         }\n         try {\n-            return _createAndCache2(ctxt, type, property);\n+            return _createAndCache2(ctxt, type);\n         } finally {\n             if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                 _incompleteDeserializers.clear();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "53fb8522b402a409139175cbf867afa924e549f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
      "commitDate": "1/24/12, 1:02 PM",
      "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, type, property);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 295,
          "functionName": "_createAndCacheValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     synchronized (_incompleteDeserializers) {\n         JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n         if (deser !\u003d null) {\n             return deser;\n         }\n         int count \u003d _incompleteDeserializers.size();\n         if (count \u003e 0) {\n             deser \u003d _incompleteDeserializers.get(type);\n             if (deser !\u003d null) {\n                 return deser;\n             }\n         }\n         try {\n-            return _createAndCache2(config, type, property);\n+            return _createAndCache2(ctxt, type, property);\n         } finally {\n             if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                 _incompleteDeserializers.clear();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-JavaType, property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
          "commitDate": "1/24/12, 1:02 PM",
          "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 11:23 AM",
          "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(ctxt, type, property);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
          "functionStartLine": 295,
          "functionName": "_createAndCacheValueDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
          "diff": "@@ -1,22 +1,22 @@\n-protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {\n     synchronized (_incompleteDeserializers) {\n         JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n         if (deser !\u003d null) {\n             return deser;\n         }\n         int count \u003d _incompleteDeserializers.size();\n         if (count \u003e 0) {\n             deser \u003d _incompleteDeserializers.get(type);\n             if (deser !\u003d null) {\n                 return deser;\n             }\n         }\n         try {\n-            return _createAndCache2(config, type, property);\n+            return _createAndCache2(ctxt, type, property);\n         } finally {\n             if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                 _incompleteDeserializers.clear();\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Yfilerename",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:08 AM",
      "commitNameOld": "c9e0c1712bb188783acb586a4eb4ece4217b2962",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(config, type, property);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
      "functionStartLine": 295,
      "functionName": "_createAndCacheValueDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java"
      }
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,22 @@\n+protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+    synchronized (_incompleteDeserializers) {\n+        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n+        if (deser !\u003d null) {\n+            return deser;\n+        }\n+        int count \u003d _incompleteDeserializers.size();\n+        if (count \u003e 0) {\n+            deser \u003d _incompleteDeserializers.get(type);\n+            if (deser !\u003d null) {\n+                return deser;\n+            }\n+        }\n+        try {\n+            return _createAndCache2(config, type, property);\n+        } finally {\n+            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n+                _incompleteDeserializers.clear();\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    synchronized (_incompleteDeserializers) {\n        JsonDeserializer\u003cObject\u003e deser \u003d _findCachedDeserializer(type);\n        if (deser !\u003d null) {\n            return deser;\n        }\n        int count \u003d _incompleteDeserializers.size();\n        if (count \u003e 0) {\n            deser \u003d _incompleteDeserializers.get(type);\n            if (deser !\u003d null) {\n                return deser;\n            }\n        }\n        try {\n            return _createAndCache2(config, type, property);\n        } finally {\n            if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n                _incompleteDeserializers.clear();\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java",
      "functionStartLine": 296,
      "functionName": "_createAndCacheValueDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method that will try to create a deserializer for given type,\nand resolve and cache it if necessary\n\n@param config Configuration\n@param type Type of property to deserializer\n@param property Property (field, setter, ctor arg) to use deserializer for\n"
    }
  }
}