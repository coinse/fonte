{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotatedClass.java",
  "functionName": "_addMemberMethods",
  "functionId": "_addMemberMethods___cls-Class__?____methods-AnnotatedMethodMap__mixInCls-Class__?____mixIns-AnnotatedMethodMap",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 589,
  "functionEndLine": 631,
  "numCommitsSeen": 29,
  "timeTaken": 1574,
  "changeHistory": [
    "7db1f44069bbcac9d884d829f8052a89b5ec271b",
    "3858853f649949c8eba9302d1c42d63d017b260f",
    "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c",
    "920bb4e447b7ff1419c926277ebac4c9406de0f5",
    "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "7db1f44069bbcac9d884d829f8052a89b5ec271b": "Ybodychange",
    "3858853f649949c8eba9302d1c42d63d017b260f": "Ybodychange",
    "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c": "Ybodychange",
    "920bb4e447b7ff1419c926277ebac4c9406de0f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99": "Yformatchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7db1f44069bbcac9d884d829f8052a89b5ec271b": {
      "type": "Ybodychange",
      "commitMessage": "Update release notes wrt #785, minor refactoring\n",
      "commitDate": "5/8/15, 3:20 PM",
      "commitName": "7db1f44069bbcac9d884d829f8052a89b5ec271b",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "5/7/15, 1:35 PM",
      "commitNameOld": "3858853f649949c8eba9302d1c42d63d017b260f",
      "commitAuthorOld": "Charles Allen",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n    if (mixInCls !\u003d null) {\n        _addMethodMixIns(cls, methods, mixInCls, mixIns);\n    }\n    if (cls \u003d\u003d null) {\n        return;\n    }\n    for (Method m : _findClassMethods(cls)) {\n        if (!_isIncludableMemberMethod(m)) {\n            continue;\n        }\n        AnnotatedMethod old \u003d methods.find(m);\n        if (old \u003d\u003d null) {\n            AnnotatedMethod newM \u003d _constructMethod(m);\n            methods.add(newM);\n            old \u003d mixIns.remove(m);\n            if (old !\u003d null) {\n                _addMixOvers(old.getAnnotated(), newM, false);\n            }\n        } else {\n            _addMixUnders(m, old);\n            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                methods.add(old.withMethod(m));\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 589,
      "functionName": "_addMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,43 +1,27 @@\n protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n     if (mixInCls !\u003d null) {\n         _addMethodMixIns(cls, methods, mixInCls, mixIns);\n     }\n     if (cls \u003d\u003d null) {\n         return;\n     }\n-    Method[] classMethods;\n-    try {\n-        classMethods \u003d cls.getDeclaredMethods();\n-    } catch (final NoClassDefFoundError ex) {\n-        final ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();\n-        if (loader \u003d\u003d null) {\n-            throw ex;\n-        }\n-        final Class\u003c?\u003e contextClass;\n-        try {\n-            contextClass \u003d loader.loadClass(cls.getName());\n-        } catch (ClassNotFoundException e) {\n-            throw ex;\n-        }\n-        classMethods \u003d contextClass.getDeclaredMethods();\n-    }\n-    for (Method m : classMethods) {\n+    for (Method m : _findClassMethods(cls)) {\n         if (!_isIncludableMemberMethod(m)) {\n             continue;\n         }\n         AnnotatedMethod old \u003d methods.find(m);\n         if (old \u003d\u003d null) {\n             AnnotatedMethod newM \u003d _constructMethod(m);\n             methods.add(newM);\n             old \u003d mixIns.remove(m);\n             if (old !\u003d null) {\n                 _addMixOvers(old.getAnnotated(), newM, false);\n             }\n         } else {\n             _addMixUnders(m, old);\n             if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                 methods.add(old.withMethod(m));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3858853f649949c8eba9302d1c42d63d017b260f": {
      "type": "Ybodychange",
      "commitMessage": "Add handlings for classes which are available in `Thread.currentThread().getContextClassLoader()`\n",
      "commitDate": "5/7/15, 1:35 PM",
      "commitName": "3858853f649949c8eba9302d1c42d63d017b260f",
      "commitAuthor": "Charles Allen",
      "commitDateOld": "8/13/14, 4:04 PM",
      "commitNameOld": "fd0f1fefdc19593a040b3dce857715d613cb6458",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 266.9,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n    if (mixInCls !\u003d null) {\n        _addMethodMixIns(cls, methods, mixInCls, mixIns);\n    }\n    if (cls \u003d\u003d null) {\n        return;\n    }\n    Method[] classMethods;\n    try {\n        classMethods \u003d cls.getDeclaredMethods();\n    } catch (final NoClassDefFoundError ex) {\n        final ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();\n        if (loader \u003d\u003d null) {\n            throw ex;\n        }\n        final Class\u003c?\u003e contextClass;\n        try {\n            contextClass \u003d loader.loadClass(cls.getName());\n        } catch (ClassNotFoundException e) {\n            throw ex;\n        }\n        classMethods \u003d contextClass.getDeclaredMethods();\n    }\n    for (Method m : classMethods) {\n        if (!_isIncludableMemberMethod(m)) {\n            continue;\n        }\n        AnnotatedMethod old \u003d methods.find(m);\n        if (old \u003d\u003d null) {\n            AnnotatedMethod newM \u003d _constructMethod(m);\n            methods.add(newM);\n            old \u003d mixIns.remove(m);\n            if (old !\u003d null) {\n                _addMixOvers(old.getAnnotated(), newM, false);\n            }\n        } else {\n            _addMixUnders(m, old);\n            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                methods.add(old.withMethod(m));\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 612,
      "functionName": "_addMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,43 @@\n protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n     if (mixInCls !\u003d null) {\n         _addMethodMixIns(cls, methods, mixInCls, mixIns);\n     }\n     if (cls \u003d\u003d null) {\n         return;\n     }\n-    for (Method m : cls.getDeclaredMethods()) {\n+    Method[] classMethods;\n+    try {\n+        classMethods \u003d cls.getDeclaredMethods();\n+    } catch (final NoClassDefFoundError ex) {\n+        final ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();\n+        if (loader \u003d\u003d null) {\n+            throw ex;\n+        }\n+        final Class\u003c?\u003e contextClass;\n+        try {\n+            contextClass \u003d loader.loadClass(cls.getName());\n+        } catch (ClassNotFoundException e) {\n+            throw ex;\n+        }\n+        classMethods \u003d contextClass.getDeclaredMethods();\n+    }\n+    for (Method m : classMethods) {\n         if (!_isIncludableMemberMethod(m)) {\n             continue;\n         }\n         AnnotatedMethod old \u003d methods.find(m);\n         if (old \u003d\u003d null) {\n             AnnotatedMethod newM \u003d _constructMethod(m);\n             methods.add(newM);\n             old \u003d mixIns.remove(m);\n             if (old !\u003d null) {\n                 _addMixOvers(old.getAnnotated(), newM, false);\n             }\n         } else {\n             _addMixUnders(m, old);\n             if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                 methods.add(old.withMethod(m));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c": {
      "type": "Ybodychange",
      "commitMessage": "Fixed [Issue-14]: parent types of mix-in annotations were not resolved for fields, methods\n",
      "commitDate": "4/28/12, 12:43 AM",
      "commitName": "1b30b1a9acc9e267a22ed0c8e0372d9d158b257c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/27/12, 7:56 PM",
      "commitNameOld": "201c8ffd7931aa552fe42f077e23917695faf29a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n    if (mixInCls !\u003d null) {\n        _addMethodMixIns(cls, methods, mixInCls, mixIns);\n    }\n    if (cls \u003d\u003d null) {\n        return;\n    }\n    for (Method m : cls.getDeclaredMethods()) {\n        if (!_isIncludableMemberMethod(m)) {\n            continue;\n        }\n        AnnotatedMethod old \u003d methods.find(m);\n        if (old \u003d\u003d null) {\n            AnnotatedMethod newM \u003d _constructMethod(m);\n            methods.add(newM);\n            old \u003d mixIns.remove(m);\n            if (old !\u003d null) {\n                _addMixOvers(old.getAnnotated(), newM, false);\n            }\n        } else {\n            _addMixUnders(m, old);\n            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                methods.add(old.withMethod(m));\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 584,
      "functionName": "_addMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n     if (mixInCls !\u003d null) {\n-        _addMethodMixIns(methods, mixInCls, mixIns);\n+        _addMethodMixIns(cls, methods, mixInCls, mixIns);\n     }\n     if (cls \u003d\u003d null) {\n         return;\n     }\n     for (Method m : cls.getDeclaredMethods()) {\n         if (!_isIncludableMemberMethod(m)) {\n             continue;\n         }\n         AnnotatedMethod old \u003d methods.find(m);\n         if (old \u003d\u003d null) {\n             AnnotatedMethod newM \u003d _constructMethod(m);\n             methods.add(newM);\n             old \u003d mixIns.remove(m);\n             if (old !\u003d null) {\n                 _addMixOvers(old.getAnnotated(), newM, false);\n             }\n         } else {\n             _addMixUnders(m, old);\n             if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                 methods.add(old.withMethod(m));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "920bb4e447b7ff1419c926277ebac4c9406de0f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Completed refactoring of AnnotatedClass, now fully lazily initialized\n",
      "commitDate": "1/22/12, 10:00 PM",
      "commitName": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Completed refactoring of AnnotatedClass, now fully lazily initialized\n",
          "commitDate": "1/22/12, 10:00 PM",
          "commitName": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 9:49 PM",
          "commitNameOld": "cad988161f95e549ba352037223574a90a5a255a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n    if (mixInCls !\u003d null) {\n        _addMethodMixIns(methods, mixInCls, mixIns);\n    }\n    if (cls \u003d\u003d null) {\n        return;\n    }\n    for (Method m : cls.getDeclaredMethods()) {\n        if (!_isIncludableMemberMethod(m)) {\n            continue;\n        }\n        AnnotatedMethod old \u003d methods.find(m);\n        if (old \u003d\u003d null) {\n            AnnotatedMethod newM \u003d _constructMethod(m);\n            methods.add(newM);\n            old \u003d mixIns.remove(m);\n            if (old !\u003d null) {\n                _addMixOvers(old.getAnnotated(), newM, false);\n            }\n        } else {\n            _addMixUnders(m, old);\n            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                methods.add(old.withMethod(m));\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 584,
          "functionName": "_addMemberMethods",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,27 @@\n-protected void _addMemberMethods(Class\u003c?\u003e cls, MethodFilter methodFilter, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n+protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n     if (mixInCls !\u003d null) {\n-        _addMethodMixIns(methodFilter, methods, mixInCls, mixIns);\n+        _addMethodMixIns(methods, mixInCls, mixIns);\n     }\n     if (cls \u003d\u003d null) {\n         return;\n     }\n     for (Method m : cls.getDeclaredMethods()) {\n-        if (!_isIncludableMethod(m, methodFilter)) {\n+        if (!_isIncludableMemberMethod(m)) {\n             continue;\n         }\n         AnnotatedMethod old \u003d methods.find(m);\n         if (old \u003d\u003d null) {\n             AnnotatedMethod newM \u003d _constructMethod(m);\n             methods.add(newM);\n             old \u003d mixIns.remove(m);\n             if (old !\u003d null) {\n                 _addMixOvers(old.getAnnotated(), newM, false);\n             }\n         } else {\n             _addMixUnders(m, old);\n             if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                 methods.add(old.withMethod(m));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[cls-Class\u003c?\u003e, methodFilter-MethodFilter, methods-AnnotatedMethodMap, mixInCls-Class\u003c?\u003e, mixIns-AnnotatedMethodMap]",
            "newValue": "[cls-Class\u003c?\u003e, methods-AnnotatedMethodMap, mixInCls-Class\u003c?\u003e, mixIns-AnnotatedMethodMap]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Completed refactoring of AnnotatedClass, now fully lazily initialized\n",
          "commitDate": "1/22/12, 10:00 PM",
          "commitName": "920bb4e447b7ff1419c926277ebac4c9406de0f5",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 9:49 PM",
          "commitNameOld": "cad988161f95e549ba352037223574a90a5a255a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n    if (mixInCls !\u003d null) {\n        _addMethodMixIns(methods, mixInCls, mixIns);\n    }\n    if (cls \u003d\u003d null) {\n        return;\n    }\n    for (Method m : cls.getDeclaredMethods()) {\n        if (!_isIncludableMemberMethod(m)) {\n            continue;\n        }\n        AnnotatedMethod old \u003d methods.find(m);\n        if (old \u003d\u003d null) {\n            AnnotatedMethod newM \u003d _constructMethod(m);\n            methods.add(newM);\n            old \u003d mixIns.remove(m);\n            if (old !\u003d null) {\n                _addMixOvers(old.getAnnotated(), newM, false);\n            }\n        } else {\n            _addMixUnders(m, old);\n            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                methods.add(old.withMethod(m));\n            }\n        }\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 584,
          "functionName": "_addMemberMethods",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,27 @@\n-protected void _addMemberMethods(Class\u003c?\u003e cls, MethodFilter methodFilter, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n+protected void _addMemberMethods(Class\u003c?\u003e cls, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n     if (mixInCls !\u003d null) {\n-        _addMethodMixIns(methodFilter, methods, mixInCls, mixIns);\n+        _addMethodMixIns(methods, mixInCls, mixIns);\n     }\n     if (cls \u003d\u003d null) {\n         return;\n     }\n     for (Method m : cls.getDeclaredMethods()) {\n-        if (!_isIncludableMethod(m, methodFilter)) {\n+        if (!_isIncludableMemberMethod(m)) {\n             continue;\n         }\n         AnnotatedMethod old \u003d methods.find(m);\n         if (old \u003d\u003d null) {\n             AnnotatedMethod newM \u003d _constructMethod(m);\n             methods.add(newM);\n             old \u003d mixIns.remove(m);\n             if (old !\u003d null) {\n                 _addMixOvers(old.getAnnotated(), newM, false);\n             }\n         } else {\n             _addMixUnders(m, old);\n             if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                 methods.add(old.withMethod(m));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99": {
      "type": "Yformatchange",
      "commitMessage": "Implemented [JACKSON-754]: Support for annotation bundles with @JacksonAnnotationsInside\n",
      "commitDate": "1/16/12, 6:26 PM",
      "commitName": "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/16/12, 5:24 PM",
      "commitNameOld": "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addMemberMethods(Class\u003c?\u003e cls, MethodFilter methodFilter, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n    if (mixInCls !\u003d null) {\n        _addMethodMixIns(methodFilter, methods, mixInCls, mixIns);\n    }\n    if (cls \u003d\u003d null) {\n        return;\n    }\n    for (Method m : cls.getDeclaredMethods()) {\n        if (!_isIncludableMethod(m, methodFilter)) {\n            continue;\n        }\n        AnnotatedMethod old \u003d methods.find(m);\n        if (old \u003d\u003d null) {\n            AnnotatedMethod newM \u003d _constructMethod(m);\n            methods.add(newM);\n            old \u003d mixIns.remove(m);\n            if (old !\u003d null) {\n                _addMixOvers(old.getAnnotated(), newM, false);\n            }\n        } else {\n            _addMixUnders(m, old);\n            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                methods.add(old.withMethod(m));\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 555,
      "functionName": "_addMemberMethods",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,27 @@\n+protected void _addMemberMethods(Class\u003c?\u003e cls, MethodFilter methodFilter, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n+    if (mixInCls !\u003d null) {\n+        _addMethodMixIns(methodFilter, methods, mixInCls, mixIns);\n+    }\n+    if (cls \u003d\u003d null) {\n+        return;\n+    }\n+    for (Method m : cls.getDeclaredMethods()) {\n+        if (!_isIncludableMethod(m, methodFilter)) {\n+            continue;\n+        }\n+        AnnotatedMethod old \u003d methods.find(m);\n+        if (old \u003d\u003d null) {\n+            AnnotatedMethod newM \u003d _constructMethod(m);\n+            methods.add(newM);\n+            old \u003d mixIns.remove(m);\n+            if (old !\u003d null) {\n+                _addMixOvers(old.getAnnotated(), newM, false);\n+            }\n+        } else {\n+            _addMixUnders(m, old);\n+            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n+                methods.add(old.withMethod(m));\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void _addMemberMethods(Class\u003c?\u003e cls, MethodFilter methodFilter, AnnotatedMethodMap methods, Class\u003c?\u003e mixInCls, AnnotatedMethodMap mixIns) {\n    if (mixInCls !\u003d null) {\n        _addMethodMixIns(methodFilter, methods, mixInCls, mixIns);\n    }\n    if (cls \u003d\u003d null) {\n        return;\n    }\n    for (Method m : cls.getDeclaredMethods()) {\n        if (!_isIncludableMethod(m, methodFilter)) {\n            continue;\n        }\n        AnnotatedMethod old \u003d methods.find(m);\n        if (old \u003d\u003d null) {\n            AnnotatedMethod newM \u003d _constructMethod(m);\n            methods.add(newM);\n            old \u003d mixIns.remove(m);\n            if (old !\u003d null) {\n                _addMixOvers(old.getAnnotated(), newM, false);\n            }\n        } else {\n            _addMixUnders(m, old);\n            if (old.getDeclaringClass().isInterface() \u0026\u0026 !m.getDeclaringClass().isInterface()) {\n                methods.add(old.withMethod(m));\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 607,
      "functionName": "_addMemberMethods",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}