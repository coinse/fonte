{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TypeFactory.java",
  "functionName": "_constructType",
  "functionId": "_constructType___type-Type__context-TypeBindings",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Factory method that can be used if type information is passed\nas Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods\n(usually for a return or argument type).\n",
  "functionStartLine": 380,
  "functionEndLine": 418,
  "numCommitsSeen": 23,
  "timeTaken": 1512,
  "changeHistory": [
    "aee4ed2f5150c32426a07f719d5f679abd9362e3",
    "d8b407137ca2d33e0950b734cf94b959a2ed7b79",
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
    "9312ad890b557806d84bde705f351e255e9fe050",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "aee4ed2f5150c32426a07f719d5f679abd9362e3": "Ymodifierchange",
    "d8b407137ca2d33e0950b734cf94b959a2ed7b79": "Ybodychange",
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455": "Ybodychange",
    "9312ad890b557806d84bde705f351e255e9fe050": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aee4ed2f5150c32426a07f719d5f679abd9362e3": {
      "type": "Ymodifierchange",
      "commitMessage": "update pom\n",
      "commitDate": "1/12/13, 7:56 PM",
      "commitName": "aee4ed2f5150c32426a07f719d5f679abd9362e3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/20/12, 7:01 PM",
      "commitNameOld": "d8b407137ca2d33e0950b734cf94b959a2ed7b79",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 53.04,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JavaType _constructType(Type type, TypeBindings context) {\n    JavaType resultType;\n    if (type instanceof Class\u003c?\u003e) {\n        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n        resultType \u003d _fromClass(cls, context);\n    } else if (type instanceof ParameterizedType) {\n        resultType \u003d _fromParamType((ParameterizedType) type, context);\n    } else if (type instanceof JavaType) {\n        return (JavaType) type;\n    } else if (type instanceof GenericArrayType) {\n        resultType \u003d _fromArrayType((GenericArrayType) type, context);\n    } else if (type instanceof TypeVariable\u003c?\u003e) {\n        resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n    } else if (type instanceof WildcardType) {\n        resultType \u003d _fromWildcard((WildcardType) type, context);\n    } else {\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + ((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n    }\n    if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n        for (TypeModifier mod : _modifiers) {\n            resultType \u003d mod.modifyType(resultType, type, context, this);\n        }\n    }\n    return resultType;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 360,
      "functionName": "_constructType",
      "functionAnnotation": "",
      "functionDoc": "Factory method that can be used if type information is passed\nas Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods\n(usually for a return or argument type).\n",
      "diff": "@@ -1,25 +1,25 @@\n-public JavaType _constructType(Type type, TypeBindings context) {\n+protected JavaType _constructType(Type type, TypeBindings context) {\n     JavaType resultType;\n     if (type instanceof Class\u003c?\u003e) {\n         Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n         resultType \u003d _fromClass(cls, context);\n     } else if (type instanceof ParameterizedType) {\n         resultType \u003d _fromParamType((ParameterizedType) type, context);\n     } else if (type instanceof JavaType) {\n         return (JavaType) type;\n     } else if (type instanceof GenericArrayType) {\n         resultType \u003d _fromArrayType((GenericArrayType) type, context);\n     } else if (type instanceof TypeVariable\u003c?\u003e) {\n         resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n     } else if (type instanceof WildcardType) {\n         resultType \u003d _fromWildcard((WildcardType) type, context);\n     } else {\n         throw new IllegalArgumentException(\"Unrecognized Type: \" + ((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n     }\n     if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n         for (TypeModifier mod : _modifiers) {\n             resultType \u003d mod.modifyType(resultType, type, context, this);\n         }\n     }\n     return resultType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[protected]"
      }
    },
    "d8b407137ca2d33e0950b734cf94b959a2ed7b79": {
      "type": "Ybodychange",
      "commitMessage": "Implement [Issue#116], make JavaType implement java.lang.reflect.Type\n",
      "commitDate": "11/20/12, 7:01 PM",
      "commitName": "d8b407137ca2d33e0950b734cf94b959a2ed7b79",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/19/12, 8:26 PM",
      "commitNameOld": "7a324d69d159c0e5f37b46b4f49017832df2315a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public JavaType _constructType(Type type, TypeBindings context) {\n    JavaType resultType;\n    if (type instanceof Class\u003c?\u003e) {\n        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n        resultType \u003d _fromClass(cls, context);\n    } else if (type instanceof ParameterizedType) {\n        resultType \u003d _fromParamType((ParameterizedType) type, context);\n    } else if (type instanceof JavaType) {\n        return (JavaType) type;\n    } else if (type instanceof GenericArrayType) {\n        resultType \u003d _fromArrayType((GenericArrayType) type, context);\n    } else if (type instanceof TypeVariable\u003c?\u003e) {\n        resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n    } else if (type instanceof WildcardType) {\n        resultType \u003d _fromWildcard((WildcardType) type, context);\n    } else {\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + ((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n    }\n    if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n        for (TypeModifier mod : _modifiers) {\n            resultType \u003d mod.modifyType(resultType, type, context, this);\n        }\n    }\n    return resultType;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 360,
      "functionName": "_constructType",
      "functionAnnotation": "",
      "functionDoc": "Factory method that can be used if type information is passed\nas Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods\n(usually for a return or argument type).\n",
      "diff": "@@ -1,23 +1,25 @@\n public JavaType _constructType(Type type, TypeBindings context) {\n     JavaType resultType;\n     if (type instanceof Class\u003c?\u003e) {\n         Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n         resultType \u003d _fromClass(cls, context);\n     } else if (type instanceof ParameterizedType) {\n         resultType \u003d _fromParamType((ParameterizedType) type, context);\n+    } else if (type instanceof JavaType) {\n+        return (JavaType) type;\n     } else if (type instanceof GenericArrayType) {\n         resultType \u003d _fromArrayType((GenericArrayType) type, context);\n     } else if (type instanceof TypeVariable\u003c?\u003e) {\n         resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n     } else if (type instanceof WildcardType) {\n         resultType \u003d _fromWildcard((WildcardType) type, context);\n     } else {\n         throw new IllegalArgumentException(\"Unrecognized Type: \" + ((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n     }\n     if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n         for (TypeModifier mod : _modifiers) {\n             resultType \u003d mod.modifyType(resultType, type, context, this);\n         }\n     }\n     return resultType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "1/26/12, 12:01 PM",
      "commitName": "5d8d3d2fb9b6f2fd86fdde71bf1c38e7d5bc2455",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/14/12, 7:08 PM",
      "commitNameOld": "52a924401ffedeb1170401e760443e184692cbb1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 11.7,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "actualSource": "public JavaType _constructType(Type type, TypeBindings context) {\n    JavaType resultType;\n    if (type instanceof Class\u003c?\u003e) {\n        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n        resultType \u003d _fromClass(cls, context);\n    } else if (type instanceof ParameterizedType) {\n        resultType \u003d _fromParamType((ParameterizedType) type, context);\n    } else if (type instanceof GenericArrayType) {\n        resultType \u003d _fromArrayType((GenericArrayType) type, context);\n    } else if (type instanceof TypeVariable\u003c?\u003e) {\n        resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n    } else if (type instanceof WildcardType) {\n        resultType \u003d _fromWildcard((WildcardType) type, context);\n    } else {\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + ((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n    }\n    if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n        for (TypeModifier mod : _modifiers) {\n            resultType \u003d mod.modifyType(resultType, type, context, this);\n        }\n    }\n    return resultType;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 326,
      "functionName": "_constructType",
      "functionAnnotation": "",
      "functionDoc": "Factory method that can be used if type information is passed\nas Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods\n(usually for a return or argument type).\n",
      "diff": "@@ -1,23 +1,23 @@\n public JavaType _constructType(Type type, TypeBindings context) {\n     JavaType resultType;\n     if (type instanceof Class\u003c?\u003e) {\n         Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n         resultType \u003d _fromClass(cls, context);\n     } else if (type instanceof ParameterizedType) {\n         resultType \u003d _fromParamType((ParameterizedType) type, context);\n     } else if (type instanceof GenericArrayType) {\n         resultType \u003d _fromArrayType((GenericArrayType) type, context);\n     } else if (type instanceof TypeVariable\u003c?\u003e) {\n         resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n     } else if (type instanceof WildcardType) {\n         resultType \u003d _fromWildcard((WildcardType) type, context);\n     } else {\n-        throw new IllegalArgumentException(\"Unrecognized Type: \" + type.toString());\n+        throw new IllegalArgumentException(\"Unrecognized Type: \" + ((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n     }\n     if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n         for (TypeModifier mod : _modifiers) {\n             resultType \u003d mod.modifyType(resultType, type, context, this);\n         }\n     }\n     return resultType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9312ad890b557806d84bde705f351e255e9fe050": {
      "type": "Ybodychange",
      "commitMessage": "Add little bif of caching for TypeFactory, to reduce cost of JavaType creation\n",
      "commitDate": "12/29/11, 5:06 PM",
      "commitName": "9312ad890b557806d84bde705f351e255e9fe050",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/29/11, 3:36 PM",
      "commitNameOld": "2abae1d236fd605c12709d5fa558cdf9270e0653",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public JavaType _constructType(Type type, TypeBindings context) {\n    JavaType resultType;\n    if (type instanceof Class\u003c?\u003e) {\n        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n        resultType \u003d _fromClass(cls, context);\n    } else if (type instanceof ParameterizedType) {\n        resultType \u003d _fromParamType((ParameterizedType) type, context);\n    } else if (type instanceof GenericArrayType) {\n        resultType \u003d _fromArrayType((GenericArrayType) type, context);\n    } else if (type instanceof TypeVariable\u003c?\u003e) {\n        resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n    } else if (type instanceof WildcardType) {\n        resultType \u003d _fromWildcard((WildcardType) type, context);\n    } else {\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + type.toString());\n    }\n    if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n        for (TypeModifier mod : _modifiers) {\n            resultType \u003d mod.modifyType(resultType, type, context, this);\n        }\n    }\n    return resultType;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 333,
      "functionName": "_constructType",
      "functionAnnotation": "",
      "functionDoc": "Factory method that can be used if type information is passed\nas Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods\n(usually for a return or argument type).\n",
      "diff": "@@ -1,26 +1,23 @@\n public JavaType _constructType(Type type, TypeBindings context) {\n     JavaType resultType;\n     if (type instanceof Class\u003c?\u003e) {\n         Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n-        if (context \u003d\u003d null) {\n-            context \u003d new TypeBindings(this, cls);\n-        }\n         resultType \u003d _fromClass(cls, context);\n     } else if (type instanceof ParameterizedType) {\n         resultType \u003d _fromParamType((ParameterizedType) type, context);\n     } else if (type instanceof GenericArrayType) {\n         resultType \u003d _fromArrayType((GenericArrayType) type, context);\n     } else if (type instanceof TypeVariable\u003c?\u003e) {\n         resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n     } else if (type instanceof WildcardType) {\n         resultType \u003d _fromWildcard((WildcardType) type, context);\n     } else {\n         throw new IllegalArgumentException(\"Unrecognized Type: \" + type.toString());\n     }\n     if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n         for (TypeModifier mod : _modifiers) {\n             resultType \u003d mod.modifyType(resultType, type, context, this);\n         }\n     }\n     return resultType;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,26 @@\n+public JavaType _constructType(Type type, TypeBindings context) {\n+    JavaType resultType;\n+    if (type instanceof Class\u003c?\u003e) {\n+        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n+        if (context \u003d\u003d null) {\n+            context \u003d new TypeBindings(this, cls);\n+        }\n+        resultType \u003d _fromClass(cls, context);\n+    } else if (type instanceof ParameterizedType) {\n+        resultType \u003d _fromParamType((ParameterizedType) type, context);\n+    } else if (type instanceof GenericArrayType) {\n+        resultType \u003d _fromArrayType((GenericArrayType) type, context);\n+    } else if (type instanceof TypeVariable\u003c?\u003e) {\n+        resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n+    } else if (type instanceof WildcardType) {\n+        resultType \u003d _fromWildcard((WildcardType) type, context);\n+    } else {\n+        throw new IllegalArgumentException(\"Unrecognized Type: \" + type.toString());\n+    }\n+    if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n+        for (TypeModifier mod : _modifiers) {\n+            resultType \u003d mod.modifyType(resultType, type, context, this);\n+        }\n+    }\n+    return resultType;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JavaType _constructType(Type type, TypeBindings context) {\n    JavaType resultType;\n    if (type instanceof Class\u003c?\u003e) {\n        Class\u003c?\u003e cls \u003d (Class\u003c?\u003e) type;\n        if (context \u003d\u003d null) {\n            context \u003d new TypeBindings(this, cls);\n        }\n        resultType \u003d _fromClass(cls, context);\n    } else if (type instanceof ParameterizedType) {\n        resultType \u003d _fromParamType((ParameterizedType) type, context);\n    } else if (type instanceof GenericArrayType) {\n        resultType \u003d _fromArrayType((GenericArrayType) type, context);\n    } else if (type instanceof TypeVariable\u003c?\u003e) {\n        resultType \u003d _fromVariable((TypeVariable\u003c?\u003e) type, context);\n    } else if (type instanceof WildcardType) {\n        resultType \u003d _fromWildcard((WildcardType) type, context);\n    } else {\n        throw new IllegalArgumentException(\"Unrecognized Type: \" + type.toString());\n    }\n    if (_modifiers !\u003d null \u0026\u0026 !resultType.isContainerType()) {\n        for (TypeModifier mod : _modifiers) {\n            resultType \u003d mod.modifyType(resultType, type, context, this);\n        }\n    }\n    return resultType;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/type/TypeFactory.java",
      "functionStartLine": 471,
      "functionName": "_constructType",
      "functionAnnotation": "",
      "functionDoc": "Factory method that can be used if type information is passed\nas Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods\n(usually for a return or argument type).\n"
    }
  }
}