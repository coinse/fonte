{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-17b",
  "repositoryPath": "/tmp/JacksonDatabind-17b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StdJdkSerializers.java",
  "functionName": "all",
  "functionId": "all",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
  "functionAnnotation": "",
  "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
  "functionStartLine": 26,
  "functionEndLine": 59,
  "numCommitsSeen": 44,
  "timeTaken": 989,
  "changeHistory": [
    "8a5ec37974ee58aabd68ed13fa15e052598d2136",
    "2a41afcbb877081476a441628b50ff59f08a2d0d",
    "fae643bec7dfd5ce6bce6d564e67bb4400836fd7",
    "44ac79f3447cf5816b370ee0ffe57b40af6c1e6f",
    "bba2bad031b33f5fa7b14680917590c7c4b6004c",
    "0251775c9a6dc8bec151e3461051ef46fd0378ff",
    "9439a310c169a00cd01a4e9b64fb9f5441297b96",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "8a5ec37974ee58aabd68ed13fa15e052598d2136": "Ybodychange",
    "2a41afcbb877081476a441628b50ff59f08a2d0d": "Ybodychange",
    "fae643bec7dfd5ce6bce6d564e67bb4400836fd7": "Ybodychange",
    "44ac79f3447cf5816b370ee0ffe57b40af6c1e6f": "Ybodychange",
    "bba2bad031b33f5fa7b14680917590c7c4b6004c": "Ymultichange(Yrename,Ymodifierchange)",
    "0251775c9a6dc8bec151e3461051ef46fd0378ff": "Yannotationchange",
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": "Ymultichange(Yannotationchange,Ydocchange)",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": "Ymultichange(Yannotationchange,Ydocchange)",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a5ec37974ee58aabd68ed13fa15e052598d2136": {
      "type": "Ybodychange",
      "commitMessage": "Minor optimization to avoid including non-value-returning methods as possible getters\n",
      "commitDate": "5/31/14, 8:28 PM",
      "commitName": "8a5ec37974ee58aabd68ed13fa15e052598d2136",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/30/14, 10:58 PM",
      "commitNameOld": "2a41afcbb877081476a441628b50ff59f08a2d0d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, new UUIDSerializer());\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.class, NullSerializer.instance);\n    sers.put(Void.TYPE, NullSerializer.instance);\n    return sers.entrySet();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
      "functionStartLine": 26,
      "functionName": "all",
      "functionAnnotation": "",
      "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
      "diff": "@@ -1,19 +1,20 @@\n public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, new UUIDSerializer());\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n+    sers.put(Void.class, NullSerializer.instance);\n     sers.put(Void.TYPE, NullSerializer.instance);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2a41afcbb877081476a441628b50ff59f08a2d0d": {
      "type": "Ybodychange",
      "commitMessage": "Starting to work on resolving more of non-conflicting getters\n",
      "commitDate": "5/30/14, 10:58 PM",
      "commitName": "2a41afcbb877081476a441628b50ff59f08a2d0d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/31/13, 10:10 PM",
      "commitNameOld": "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 149.99,
      "commitsBetweenForRepo": 268,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, new UUIDSerializer());\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.instance);\n    return sers.entrySet();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
      "functionStartLine": 26,
      "functionName": "all",
      "functionAnnotation": "",
      "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
      "diff": "@@ -1,19 +1,19 @@\n public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, new UUIDSerializer());\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n-    sers.put(Void.TYPE, NullSerializer.class);\n+    sers.put(Void.TYPE, NullSerializer.instance);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fae643bec7dfd5ce6bce6d564e67bb4400836fd7": {
      "type": "Ybodychange",
      "commitMessage": "Completed #308, serialization speeded up by 4x as well\n",
      "commitDate": "9/13/13, 11:34 PM",
      "commitName": "fae643bec7dfd5ce6bce6d564e67bb4400836fd7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/10/13, 8:36 PM",
      "commitNameOld": "44ac79f3447cf5816b370ee0ffe57b40af6c1e6f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 65.12,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, new UUIDSerializer());\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
      "functionStartLine": 26,
      "functionName": "all",
      "functionAnnotation": "",
      "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
      "diff": "@@ -1,19 +1,19 @@\n public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n-    sers.put(UUID.class, sls);\n+    sers.put(UUID.class, new UUIDSerializer());\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "44ac79f3447cf5816b370ee0ffe57b40af6c1e6f": {
      "type": "Ybodychange",
      "commitMessage": "Starting to implement #239: first part, serialization, now supported.\n",
      "commitDate": "7/10/13, 8:36 PM",
      "commitName": "44ac79f3447cf5816b370ee0ffe57b40af6c1e6f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/16/13, 5:47 PM",
      "commitNameOld": "bba2bad031b33f5fa7b14680917590c7c4b6004c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 85.12,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
      "functionStartLine": 26,
      "functionName": "all",
      "functionAnnotation": "",
      "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "bba2bad031b33f5fa7b14680917590c7c4b6004c": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "more cleanup\n",
      "commitDate": "4/16/13, 5:47 PM",
      "commitName": "bba2bad031b33f5fa7b14680917590c7c4b6004c",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "more cleanup\n",
          "commitDate": "4/16/13, 5:47 PM",
          "commitName": "bba2bad031b33f5fa7b14680917590c7c4b6004c",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "4/16/13, 5:34 PM",
          "commitNameOld": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
          "functionStartLine": 26,
          "functionName": "all",
          "functionAnnotation": "",
          "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
          "diff": "@@ -1,19 +1,19 @@\n-public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n+public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, sls);\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "provide",
            "newValue": "all"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "more cleanup\n",
          "commitDate": "4/16/13, 5:47 PM",
          "commitName": "bba2bad031b33f5fa7b14680917590c7c4b6004c",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "4/16/13, 5:34 PM",
          "commitNameOld": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
          "functionStartLine": 26,
          "functionName": "all",
          "functionAnnotation": "",
          "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
          "diff": "@@ -1,19 +1,19 @@\n-public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n+public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e all() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, sls);\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, static]"
          }
        }
      ]
    },
    "0251775c9a6dc8bec151e3461051ef46fd0378ff": {
      "type": "Yannotationchange",
      "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
      "commitDate": "4/16/13, 5:34 PM",
      "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/15/13, 8:36 PM",
      "commitNameOld": "afda778afc8016e16d364748eb7d0d4500bc0dca",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
      "functionStartLine": 26,
      "functionName": "provide",
      "functionAnnotation": "",
      "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
      "diff": "@@ -1,20 +1,19 @@\n-@Override\n public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, sls);\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override",
        "newValue": ""
      }
    },
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
      "commitDate": "3/2/13, 1:13 PM",
      "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
          "commitDate": "3/2/13, 1:13 PM",
          "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "11/23/12, 6:00 PM",
          "commitNameOld": "e4b7bf335d1c14b99dca66a5f1fd2e6790dc199a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 98.8,
          "commitsBetweenForRepo": 108,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
          "functionStartLine": 29,
          "functionName": "provide",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
          "diff": "@@ -1,19 +1,20 @@\n+@Override\n public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, sls);\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
          "commitDate": "3/2/13, 1:13 PM",
          "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "11/23/12, 6:00 PM",
          "commitNameOld": "e4b7bf335d1c14b99dca66a5f1fd2e6790dc199a",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 98.8,
          "commitsBetweenForRepo": 108,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
          "functionStartLine": 29,
          "functionName": "provide",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
          "diff": "@@ -1,19 +1,20 @@\n+@Override\n public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, sls);\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n"
          }
        }
      ]
    },
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
      "commitDate": "4/17/12, 7:57 AM",
      "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/21/12, 10:47 AM",
          "commitNameOld": "b8f2c0236e09a88ead4f11c568e06020d53f7102",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 86.84,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "actualSource": "public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
          "functionStartLine": 27,
          "functionName": "provide",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,20 +1,19 @@\n-@Override\n public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, sls);\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
          "commitDate": "4/17/12, 7:57 AM",
          "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/21/12, 10:47 AM",
          "commitNameOld": "b8f2c0236e09a88ead4f11c568e06020d53f7102",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 86.84,
          "commitsBetweenForRepo": 249,
          "commitsBetweenForFile": 1,
          "actualSource": "public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
          "functionStartLine": 27,
          "functionName": "provide",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,20 +1,19 @@\n-@Override\n public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n     HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n     final ToStringSerializer sls \u003d ToStringSerializer.instance;\n     sers.put(java.net.URL.class, sls);\n     sers.put(java.net.URI.class, sls);\n     sers.put(Currency.class, sls);\n     sers.put(UUID.class, sls);\n     sers.put(java.util.regex.Pattern.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(Locale.class, sls);\n     sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n     sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n     sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n     sers.put(AtomicLong.class, AtomicLongSerializer.class);\n     sers.put(File.class, FileSerializer.class);\n     sers.put(Class.class, ClassSerializer.class);\n     sers.put(Void.TYPE, NullSerializer.class);\n     return sers.entrySet();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n",
            "newValue": ""
          }
        }
      ]
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,20 @@\n+@Override\n+public Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n+    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n+    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n+    sers.put(java.net.URL.class, sls);\n+    sers.put(java.net.URI.class, sls);\n+    sers.put(Currency.class, sls);\n+    sers.put(UUID.class, sls);\n+    sers.put(java.util.regex.Pattern.class, sls);\n+    sers.put(Locale.class, sls);\n+    sers.put(Locale.class, sls);\n+    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n+    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n+    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n+    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n+    sers.put(File.class, FileSerializer.class);\n+    sers.put(Class.class, ClassSerializer.class);\n+    sers.put(Void.TYPE, NullSerializer.class);\n+    return sers.entrySet();\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic Collection\u003cMap.Entry\u003cClass\u003c?\u003e, Object\u003e\u003e provide() {\n    HashMap\u003cClass\u003c?\u003e, Object\u003e sers \u003d new HashMap\u003cClass\u003c?\u003e, Object\u003e();\n    final ToStringSerializer sls \u003d ToStringSerializer.instance;\n    sers.put(java.net.URL.class, sls);\n    sers.put(java.net.URI.class, sls);\n    sers.put(Currency.class, sls);\n    sers.put(UUID.class, sls);\n    sers.put(java.util.regex.Pattern.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(Locale.class, sls);\n    sers.put(AtomicReference.class, AtomicReferenceSerializer.class);\n    sers.put(AtomicBoolean.class, AtomicBooleanSerializer.class);\n    sers.put(AtomicInteger.class, AtomicIntegerSerializer.class);\n    sers.put(AtomicLong.class, AtomicLongSerializer.class);\n    sers.put(File.class, FileSerializer.class);\n    sers.put(Class.class, ClassSerializer.class);\n    sers.put(Void.TYPE, NullSerializer.class);\n    return sers.entrySet();\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
      "functionStartLine": 29,
      "functionName": "provide",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called by {@link BasicSerializerFactory} to access\nall serializers this class provides.\n"
    }
  }
}