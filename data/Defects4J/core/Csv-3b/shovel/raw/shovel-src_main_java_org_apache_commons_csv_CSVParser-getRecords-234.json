{
  "origin": "codeshovel",
  "repositoryName": "Csv-3b",
  "repositoryPath": "/tmp/Csv-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CSVParser.java",
  "functionName": "getRecords",
  "functionId": "getRecords",
  "sourceFilePath": "src/main/java/org/apache/commons/csv/CSVParser.java",
  "functionAnnotation": "",
  "functionDoc": "Parses the CSV input according to the given format and returns the content as an array of {@link CSVRecord}\nentries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException\n            on parse error or input read-failure\n",
  "functionStartLine": 234,
  "functionEndLine": 241,
  "numCommitsSeen": 107,
  "timeTaken": 2213,
  "changeHistory": [
    "0e8084ab27bdd1e183b243b6c4cef97d603d23ad",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
    "0833f45bffd40f44ba6f294d84e9bac8a9ba0a37",
    "43987a7d781598d1f7896a07c78755a62698efbd",
    "aee6c50e2830c007a572cc96a57bc105308acc49",
    "2ec4c994c0458ef893af9bd518849bec21b2dec4",
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
    "a7bd28c496457aa7c32db4ea529c4f3df7e78fe9",
    "cbcfb72912f41d1fac3f6d26ca27406cca94da9e",
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8",
    "cacb79dab96cc98209cf14bf1b1fc6eb6f357c88",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
    "d7e94581d784067fccddd34e19ae46aea526f9fa",
    "f047581f9526aad1c9c9e624710a4e860f88ecaa",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955"
  ],
  "changeHistoryShort": {
    "0e8084ab27bdd1e183b243b6c4cef97d603d23ad": "Ybodychange",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": "Ybodychange",
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5": "Ydocchange",
    "0833f45bffd40f44ba6f294d84e9bac8a9ba0a37": "Ymultichange(Ybodychange,Ydocchange)",
    "43987a7d781598d1f7896a07c78755a62698efbd": "Ybodychange",
    "aee6c50e2830c007a572cc96a57bc105308acc49": "Ymultichange(Yreturntypechange,Ybodychange)",
    "2ec4c994c0458ef893af9bd518849bec21b2dec4": "Ymultichange(Ybodychange,Ydocchange)",
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512": "Ydocchange",
    "a7bd28c496457aa7c32db4ea529c4f3df7e78fe9": "Yrename",
    "cbcfb72912f41d1fac3f6d26ca27406cca94da9e": "Ybodychange",
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8": "Ydocchange",
    "cacb79dab96cc98209cf14bf1b1fc6eb6f357c88": "Ybodychange",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": "Yfilerename",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": "Ymultichange(Ydocchange,Yformatchange)",
    "d7e94581d784067fccddd34e19ae46aea526f9fa": "Ybodychange",
    "f047581f9526aad1c9c9e624710a4e860f88ecaa": "Ydocchange",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": "Yfilerename",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e8084ab27bdd1e183b243b6c4cef97d603d23ad": {
      "type": "Ybodychange",
      "commitMessage": "Rename getRecord() to nextRecord()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397900 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 10:13 AM",
      "commitName": "0e8084ab27bdd1e183b243b6c4cef97d603d23ad",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 10:11 AM",
      "commitNameOld": "3b938ba40d050c319be41a415daf5832e6097d72",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    final List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord rec;\n    while ((rec \u003d nextRecord()) !\u003d null) {\n        records.add(rec);\n    }\n    return records;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 217,
      "functionName": "getRecords",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV input according to the given format and returns the content as an array of {@link CSVRecord}\nentries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException\n            on parse error or input read-failure\n",
      "diff": "@@ -1,8 +1,8 @@\n public List\u003cCSVRecord\u003e getRecords() throws IOException {\n     final List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n     CSVRecord rec;\n-    while ((rec \u003d getRecord()) !\u003d null) {\n+    while ((rec \u003d nextRecord()) !\u003d null) {\n         records.add(rec);\n     }\n     return records;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": {
      "type": "Ybodychange",
      "commitMessage": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/12, 8:47 AM",
      "commitName": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/11/12, 7:02 AM",
      "commitNameOld": "4bc562f47b46372a5ac11498fe5312846dedded4",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    final List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord rec;\n    while ((rec \u003d getRecord()) !\u003d null) {\n        records.add(rec);\n    }\n    return records;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 206,
      "functionName": "getRecords",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV input according to the given format and returns the content as an array of {@link CSVRecord}\nentries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException\n            on parse error or input read-failure\n",
      "diff": "@@ -1,8 +1,8 @@\n public List\u003cCSVRecord\u003e getRecords() throws IOException {\n-    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n+    final List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n     CSVRecord rec;\n     while ((rec \u003d getRecord()) !\u003d null) {\n         records.add(rec);\n     }\n     return records;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5": {
      "type": "Ydocchange",
      "commitMessage": "Fix Checkstyle: Format for 120 line length.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/11/12, 1:12 PM",
      "commitName": "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "9/11/12, 12:40 PM",
      "commitNameOld": "bf06bed9b8905ccf5409179263707074167ccfc4",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord rec;\n    while ((rec \u003d getRecord()) !\u003d null) {\n        records.add(rec);\n    }\n    return records;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 134,
      "functionName": "getRecords",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV input according to the given format and returns the content as an array of {@link CSVRecord}\nentries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException\n            on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the CSV input according to the given format and returns the content\nas an array of {@link CSVRecord} entries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException on parse error or input read-failure\n",
        "newValue": "Parses the CSV input according to the given format and returns the content as an array of {@link CSVRecord}\nentries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException\n            on parse error or input read-failure\n"
      }
    },
    "0833f45bffd40f44ba6f294d84e9bac8a9ba0a37": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "CSV-87 CSVParser.getRecords() returns null rather than empty List at EOF\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/26/12, 5:42 PM",
      "commitName": "0833f45bffd40f44ba6f294d84e9bac8a9ba0a37",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "CSV-87 CSVParser.getRecords() returns null rather than empty List at EOF\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305692 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/26/12, 5:42 PM",
          "commitName": "0833f45bffd40f44ba6f294d84e9bac8a9ba0a37",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/22/12, 3:16 PM",
          "commitNameOld": "43987a7d781598d1f7896a07c78755a62698efbd",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 4.1,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord rec;\n    while ((rec \u003d getRecord()) !\u003d null) {\n        records.add(rec);\n    }\n    return records;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 120,
          "functionName": "getRecords",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV input according to the given format and returns the content\nas an array of {@link CSVRecord} entries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,11 +1,8 @@\n public List\u003cCSVRecord\u003e getRecords() throws IOException {\n     List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n     CSVRecord rec;\n     while ((rec \u003d getRecord()) !\u003d null) {\n         records.add(rec);\n     }\n-    if (!records.isEmpty()) {\n-        return records;\n-    }\n-    return null;\n+    return records;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "CSV-87 CSVParser.getRecords() returns null rather than empty List at EOF\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305692 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/26/12, 5:42 PM",
          "commitName": "0833f45bffd40f44ba6f294d84e9bac8a9ba0a37",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "3/22/12, 3:16 PM",
          "commitNameOld": "43987a7d781598d1f7896a07c78755a62698efbd",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 4.1,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord rec;\n    while ((rec \u003d getRecord()) !\u003d null) {\n        records.add(rec);\n    }\n    return records;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 120,
          "functionName": "getRecords",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV input according to the given format and returns the content\nas an array of {@link CSVRecord} entries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,11 +1,8 @@\n public List\u003cCSVRecord\u003e getRecords() throws IOException {\n     List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n     CSVRecord rec;\n     while ((rec \u003d getRecord()) !\u003d null) {\n         records.add(rec);\n     }\n-    if (!records.isEmpty()) {\n-        return records;\n-    }\n-    return null;\n+    return records;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parses the CSV input according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
            "newValue": "Parses the CSV input according to the given format and returns the content\nas an array of {@link CSVRecord} entries.\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return list of {@link CSVRecord} entries, may be empty\n@throws IOException on parse error or input read-failure\n"
          }
        }
      ]
    },
    "43987a7d781598d1f7896a07c78755a62698efbd": {
      "type": "Ybodychange",
      "commitMessage": "Rename to avoid hiding class field\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1304097 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/22/12, 3:16 PM",
      "commitName": "43987a7d781598d1f7896a07c78755a62698efbd",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/21/12, 4:46 PM",
      "commitNameOld": "65ab9db952daebf62fc092c90f7f74cbb25b8c0f",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord rec;\n    while ((rec \u003d getRecord()) !\u003d null) {\n        records.add(rec);\n    }\n    if (!records.isEmpty()) {\n        return records;\n    }\n    return null;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 120,
      "functionName": "getRecords",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV input according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,12 +1,11 @@\n public List\u003cCSVRecord\u003e getRecords() throws IOException {\n     List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n-    CSVRecord record;\n-    while ((record \u003d getRecord()) !\u003d null) {\n-        records.add(record);\n+    CSVRecord rec;\n+    while ((rec \u003d getRecord()) !\u003d null) {\n+        records.add(rec);\n     }\n     if (!records.isEmpty()) {\n         return records;\n-    } else {\n-        return null;\n     }\n+    return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aee6c50e2830c007a572cc96a57bc105308acc49": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/16/12, 6:39 PM",
      "commitName": "aee6c50e2830c007a572cc96a57bc105308acc49",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/16/12, 6:39 PM",
          "commitName": "aee6c50e2830c007a572cc96a57bc105308acc49",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/15/12, 1:52 AM",
          "commitNameOld": "38670dbe9232dc9b56d6464c42293e745974cf60",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 1.7,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord record;\n    while ((record \u003d getRecord()) !\u003d null) {\n        records.add(record);\n    }\n    if (!records.isEmpty()) {\n        return records;\n    } else {\n        return null;\n    }\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 125,
          "functionName": "getRecords",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV input according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,12 +1,12 @@\n-public String[][] getRecords() throws IOException {\n-    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n-    String[] record;\n+public List\u003cCSVRecord\u003e getRecords() throws IOException {\n+    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n+    CSVRecord record;\n     while ((record \u003d getRecord()) !\u003d null) {\n         records.add(record);\n     }\n     if (!records.isEmpty()) {\n-        return records.toArray(new String[records.size()][]);\n+        return records;\n     } else {\n         return null;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "String[][]",
            "newValue": "List\u003cCSVRecord\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Header support (CSV-65)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1301852 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/16/12, 6:39 PM",
          "commitName": "aee6c50e2830c007a572cc96a57bc105308acc49",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/15/12, 1:52 AM",
          "commitNameOld": "38670dbe9232dc9b56d6464c42293e745974cf60",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 1.7,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "public List\u003cCSVRecord\u003e getRecords() throws IOException {\n    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n    CSVRecord record;\n    while ((record \u003d getRecord()) !\u003d null) {\n        records.add(record);\n    }\n    if (!records.isEmpty()) {\n        return records;\n    } else {\n        return null;\n    }\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 125,
          "functionName": "getRecords",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV input according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,12 +1,12 @@\n-public String[][] getRecords() throws IOException {\n-    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n-    String[] record;\n+public List\u003cCSVRecord\u003e getRecords() throws IOException {\n+    List\u003cCSVRecord\u003e records \u003d new ArrayList\u003cCSVRecord\u003e();\n+    CSVRecord record;\n     while ((record \u003d getRecord()) !\u003d null) {\n         records.add(record);\n     }\n     if (!records.isEmpty()) {\n-        return records.toArray(new String[records.size()][]);\n+        return records;\n     } else {\n         return null;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2ec4c994c0458ef893af9bd518849bec21b2dec4": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/8/12, 1:59 AM",
      "commitName": "2ec4c994c0458ef893af9bd518849bec21b2dec4",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/12, 1:59 AM",
          "commitName": "2ec4c994c0458ef893af9bd518849bec21b2dec4",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/7/12, 4:00 PM",
          "commitNameOld": "a65806a126d71477b3538b571c45f27de054ff84",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String[][] getRecords() throws IOException {\n    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n    String[] record;\n    while ((record \u003d getRecord()) !\u003d null) {\n        records.add(record);\n    }\n    if (!records.isEmpty()) {\n        return records.toArray(new String[records.size()][]);\n    } else {\n        return null;\n    }\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 123,
          "functionName": "getRecords",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV input according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,13 +1,12 @@\n public String[][] getRecords() throws IOException {\n     List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n-    String[] values;\n-    String[][] ret \u003d null;\n-    while ((values \u003d getLine()) !\u003d null) {\n-        records.add(values);\n+    String[] record;\n+    while ((record \u003d getRecord()) !\u003d null) {\n+        records.add(record);\n     }\n-    if (records.size() \u003e 0) {\n-        ret \u003d new String[records.size()][];\n-        records.toArray(ret);\n+    if (!records.isEmpty()) {\n+        return records.toArray(new String[records.size()][]);\n+    } else {\n+        return null;\n     }\n-    return ret;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Renamed CSVParser.getLine() into getRecord() to avoid confusions since a record can span several lines\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298333 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/8/12, 1:59 AM",
          "commitName": "2ec4c994c0458ef893af9bd518849bec21b2dec4",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "3/7/12, 4:00 PM",
          "commitNameOld": "a65806a126d71477b3538b571c45f27de054ff84",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.42,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String[][] getRecords() throws IOException {\n    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n    String[] record;\n    while ((record \u003d getRecord()) !\u003d null) {\n        records.add(record);\n    }\n    if (!records.isEmpty()) {\n        return records.toArray(new String[records.size()][]);\n    } else {\n        return null;\n    }\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 123,
          "functionName": "getRecords",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV input according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
          "diff": "@@ -1,13 +1,12 @@\n public String[][] getRecords() throws IOException {\n     List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n-    String[] values;\n-    String[][] ret \u003d null;\n-    while ((values \u003d getLine()) !\u003d null) {\n-        records.add(values);\n+    String[] record;\n+    while ((record \u003d getRecord()) !\u003d null) {\n+        records.add(record);\n     }\n-    if (records.size() \u003e 0) {\n-        ret \u003d new String[records.size()][];\n-        records.toArray(ret);\n+    if (!records.isEmpty()) {\n+        return records.toArray(new String[records.size()][]);\n+    } else {\n+        return null;\n     }\n-    return ret;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parses the CSV according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
            "newValue": "Parses the CSV input according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n"
          }
        }
      ]
    },
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512": {
      "type": "Ydocchange",
      "commitMessage": "Updated the Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/12, 5:08 AM",
      "commitName": "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 3:04 PM",
      "commitNameOld": "045dbbbe4ab84618cee8ba27d00b9283ce0a2715",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 116.59,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getRecords() throws IOException {\n    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 156,
      "functionName": "getRecords",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the CSV according to the given format\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
        "newValue": "Parses the CSV according to the given format and returns the content\nas an array of records (whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in the stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n"
      }
    },
    "a7bd28c496457aa7c32db4ea529c4f3df7e78fe9": {
      "type": "Yrename",
      "commitMessage": "Renamed CSVParser.getAllValues() to getRecords()\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199997 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 2:04 PM",
      "commitName": "a7bd28c496457aa7c32db4ea529c4f3df7e78fe9",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 9:11 AM",
      "commitNameOld": "16bfec07ffd785e5abbabdc4145eeac5cccc2c79",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getRecords() throws IOException {\n    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 153,
      "functionName": "getRecords",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given format\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,13 +1,13 @@\n-public String[][] getAllValues() throws IOException {\n+public String[][] getRecords() throws IOException {\n     List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n     String[] values;\n     String[][] ret \u003d null;\n     while ((values \u003d getLine()) !\u003d null) {\n         records.add(values);\n     }\n     if (records.size() \u003e 0) {\n         ret \u003d new String[records.size()][];\n         records.toArray(ret);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "getAllValues",
        "newValue": "getRecords"
      }
    },
    "cbcfb72912f41d1fac3f6d26ca27406cca94da9e": {
      "type": "Ybodychange",
      "commitMessage": "Upgrading to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 8:58 AM",
      "commitName": "cbcfb72912f41d1fac3f6d26ca27406cca94da9e",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 8:54 AM",
      "commitNameOld": "cb99634ab3d6143dffc90938fc68e15c7f9d25b8",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getAllValues() throws IOException {\n    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 154,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given format\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,13 +1,13 @@\n public String[][] getAllValues() throws IOException {\n-    List records \u003d new ArrayList();\n+    List\u003cString[]\u003e records \u003d new ArrayList\u003cString[]\u003e();\n     String[] values;\n     String[][] ret \u003d null;\n     while ((values \u003d getLine()) !\u003d null) {\n         records.add(values);\n     }\n     if (records.size() \u003e 0) {\n         ret \u003d new String[records.size()][];\n         records.toArray(ret);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8": {
      "type": "Ydocchange",
      "commitMessage": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 8:54 AM",
      "commitName": "cb99634ab3d6143dffc90938fc68e15c7f9d25b8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 8:21 AM",
      "commitNameOld": "42476f4b08fe4b075aa36f688f0801857f3635d9",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getAllValues() throws IOException {\n    List records \u003d new ArrayList();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 154,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given format\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
        "newValue": "Parses the CSV according to the given format\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n"
      }
    },
    "cacb79dab96cc98209cf14bf1b1fc6eb6f357c88": {
      "type": "Ybodychange",
      "commitMessage": "Changed the visibility of the Token types and the protected methods to package private\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199769 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 6:26 AM",
      "commitName": "cacb79dab96cc98209cf14bf1b1fc6eb6f357c88",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 3:17 AM",
      "commitNameOld": "165a5dcaf41b490cd80e90c65738453140c0ef61",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getAllValues() throws IOException {\n    List records \u003d new ArrayList();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 196,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,13 +1,13 @@\n public String[][] getAllValues() throws IOException {\n-    ArrayList records \u003d new ArrayList();\n+    List records \u003d new ArrayList();\n     String[] values;\n     String[][] ret \u003d null;\n     while ((values \u003d getLine()) !\u003d null) {\n         records.add(values);\n     }\n     if (records.size() \u003e 0) {\n         ret \u003d new String[records.size()][];\n         records.toArray(ret);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": {
      "type": "Yfilerename",
      "commitMessage": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 2:38 AM",
      "commitName": "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/20/11, 9:14 AM",
      "commitNameOld": "76cab04936e8b539d983510079419fabeeaecea0",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 111.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getAllValues() throws IOException {\n    ArrayList records \u003d new ArrayList();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 204,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/csv/CSVParser.java",
        "newPath": "src/main/java/org/apache/commons/csv/CSVParser.java"
      }
    },
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/1/11, 12:46 AM",
      "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
      "commitAuthor": "Jacopo Cappellato",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/11, 12:46 AM",
          "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
          "commitAuthor": "Jacopo Cappellato",
          "commitDateOld": "1/31/11, 2:47 AM",
          "commitNameOld": "c6bdecabd82eebc9efce450aa4057b668984479e",
          "commitAuthorOld": "Jacopo Cappellato",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public String[][] getAllValues() throws IOException {\n    ArrayList records \u003d new ArrayList();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
          "path": "src/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 204,
          "functionName": "getAllValues",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
            "newValue": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/11, 12:46 AM",
          "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
          "commitAuthor": "Jacopo Cappellato",
          "commitDateOld": "1/31/11, 2:47 AM",
          "commitNameOld": "c6bdecabd82eebc9efce450aa4057b668984479e",
          "commitAuthorOld": "Jacopo Cappellato",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public String[][] getAllValues() throws IOException {\n    ArrayList records \u003d new ArrayList();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
          "path": "src/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 204,
          "functionName": "getAllValues",
          "functionAnnotation": "",
          "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp/\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "d7e94581d784067fccddd34e19ae46aea526f9fa": {
      "type": "Ybodychange",
      "commitMessage": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Glück\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/10/06, 2:01 AM",
      "commitName": "d7e94581d784067fccddd34e19ae46aea526f9fa",
      "commitAuthor": "Ortwin Glueck",
      "commitDateOld": "7/31/06, 11:50 PM",
      "commitNameOld": "ce34196827e6ac834b4c566e1e6fbe863c8e8d1c",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 9.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getAllValues() throws IOException {\n    ArrayList records \u003d new ArrayList();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 174,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "@@ -1,13 +1,13 @@\n public String[][] getAllValues() throws IOException {\n-    Vector records \u003d new Vector();\n+    ArrayList records \u003d new ArrayList();\n     String[] values;\n     String[][] ret \u003d null;\n     while ((values \u003d getLine()) !\u003d null) {\n         records.add(values);\n     }\n     if (records.size() \u003e 0) {\n         ret \u003d new String[records.size()][];\n         records.toArray(ret);\n     }\n     return ret;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f047581f9526aad1c9c9e624710a4e860f88ecaa": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/06, 9:11 PM",
      "commitName": "f047581f9526aad1c9c9e624710a4e860f88ecaa",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:46 PM",
      "commitNameOld": "0e1f0adb716515aba5e98e5690779f2fb73ad716",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 78.98,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getAllValues() throws IOException {\n    Vector records \u003d new Vector();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 225,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n",
        "newValue": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n@throws IOException on parse error or input read-failure\n"
      }
    },
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": {
      "type": "Yfilerename",
      "commitMessage": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:42 PM",
      "commitName": "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:41 PM",
      "commitNameOld": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public String[][] getAllValues() throws IOException {\n    Vector records \u003d new Vector();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 199,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java",
        "newPath": "src/java/org/apache/commons/csv/CSVParser.java"
      }
    },
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": {
      "type": "Yintroduced",
      "commitMessage": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:41 PM",
      "commitName": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,13 @@\n+public String[][] getAllValues() throws IOException {\n+    Vector records \u003d new Vector();\n+    String[] values;\n+    String[][] ret \u003d null;\n+    while ((values \u003d getLine()) !\u003d null) {\n+        records.add(values);\n+    }\n+    if (records.size() \u003e 0) {\n+        ret \u003d new String[records.size()][];\n+        records.toArray(ret);\n+    }\n+    return ret;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String[][] getAllValues() throws IOException {\n    Vector records \u003d new Vector();\n    String[] values;\n    String[][] ret \u003d null;\n    while ((values \u003d getLine()) !\u003d null) {\n        records.add(values);\n    }\n    if (records.size() \u003e 0) {\n        ret \u003d new String[records.size()][];\n        records.toArray(ret);\n    }\n    return ret;\n}",
      "path": "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java",
      "functionStartLine": 199,
      "functionName": "getAllValues",
      "functionAnnotation": "",
      "functionDoc": "Parses the CSV according to the given strategy\nand returns the content as an array of records\n(whereas records are arrays of single values).\n\u003cp\u003e\nThe returned content starts at the current parse-position in\nthe stream.\n\n@return matrix of records x values (\u0027null\u0027 when end of file)\n"
    }
  }
}