{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-1b",
  "repositoryPath": "/tmp/Jsoup-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TokenQueue.java",
  "functionName": "matches",
  "functionId": "matches___seq-String",
  "sourceFilePath": "src/main/java/org/jsoup/parser/TokenQueue.java",
  "functionAnnotation": "",
  "functionDoc": "Tests if the next characters on the queue match the sequence. Case insensitive.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
  "functionStartLine": 70,
  "functionEndLine": 83,
  "numCommitsSeen": 18,
  "timeTaken": 603,
  "changeHistory": [
    "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
    "04025259e96d3676097e84126fb55124b92c50ed",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268"
  ],
  "changeHistoryShort": {
    "4bd743a3a5492d1d185bd21f421e49ce3a27af7c": "Ymultichange(Ybodychange,Ydocchange)",
    "04025259e96d3676097e84126fb55124b92c50ed": "Ymodifierchange",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": "Ymultichange(Ymovefromfile,Ymodifierchange,Ydocchange)",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bd743a3a5492d1d185bd21f421e49ce3a27af7c": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Support for data only tags (script, textarea etc)\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Support for data only tags (script, textarea etc)\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean matches(String seq) {\n    int len \u003d seq.length();\n    if (len \u003e queue.size())\n        return false;\n    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n    char[] seqChars \u003d seq.toCharArray();\n    for (int i \u003d 0; i \u003c len; i++) {\n        Character found \u003d Character.toLowerCase(chars.get(i));\n        Character check \u003d Character.toLowerCase(seqChars[i]);\n        if (!found.equals(check))\n            return false;\n    }\n    return true;\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 47,
          "functionName": "matches",
          "functionAnnotation": "",
          "functionDoc": "Tests if the next characters on the queue match the sequence. Case insensitive.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
          "diff": "@@ -1,12 +1,14 @@\n public boolean matches(String seq) {\n     int len \u003d seq.length();\n     if (len \u003e queue.size())\n         return false;\n     List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n     char[] seqChars \u003d seq.toCharArray();\n     for (int i \u003d 0; i \u003c len; i++) {\n-        if (!chars.get(i).equals(seqChars[i]))\n+        Character found \u003d Character.toLowerCase(chars.get(i));\n+        Character check \u003d Character.toLowerCase(seqChars[i]);\n+        if (!found.equals(check))\n             return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Support for data only tags (script, textarea etc)\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public boolean matches(String seq) {\n    int len \u003d seq.length();\n    if (len \u003e queue.size())\n        return false;\n    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n    char[] seqChars \u003d seq.toCharArray();\n    for (int i \u003d 0; i \u003c len; i++) {\n        Character found \u003d Character.toLowerCase(chars.get(i));\n        Character check \u003d Character.toLowerCase(seqChars[i]);\n        if (!found.equals(check))\n            return false;\n    }\n    return true;\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 47,
          "functionName": "matches",
          "functionAnnotation": "",
          "functionDoc": "Tests if the next characters on the queue match the sequence. Case insensitive.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
          "diff": "@@ -1,12 +1,14 @@\n public boolean matches(String seq) {\n     int len \u003d seq.length();\n     if (len \u003e queue.size())\n         return false;\n     List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n     char[] seqChars \u003d seq.toCharArray();\n     for (int i \u003d 0; i \u003c len; i++) {\n-        if (!chars.get(i).equals(seqChars[i]))\n+        Character found \u003d Character.toLowerCase(chars.get(i));\n+        Character check \u003d Character.toLowerCase(seqChars[i]);\n+        if (!found.equals(check))\n             return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Tests if the next characters on the queue match the sequence.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
            "newValue": "Tests if the next characters on the queue match the sequence. Case insensitive.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n"
          }
        }
      ]
    },
    "04025259e96d3676097e84126fb55124b92c50ed": {
      "type": "Ymodifierchange",
      "commitMessage": "Initial, partial implementation of Selector.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "04025259e96d3676097e84126fb55124b92c50ed",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean matches(String seq) {\n    int len \u003d seq.length();\n    if (len \u003e queue.size())\n        return false;\n    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n    char[] seqChars \u003d seq.toCharArray();\n    for (int i \u003d 0; i \u003c len; i++) {\n        if (!chars.get(i).equals(seqChars[i]))\n            return false;\n    }\n    return true;\n}",
      "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
      "functionStartLine": 47,
      "functionName": "matches",
      "functionAnnotation": "",
      "functionDoc": "Tests if the next characters on the queue match the sequence.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
      "diff": "@@ -1,12 +1,12 @@\n-boolean matches(String seq) {\n+public boolean matches(String seq) {\n     int len \u003d seq.length();\n     if (len \u003e queue.size())\n         return false;\n     List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n     char[] seqChars \u003d seq.toCharArray();\n     for (int i \u003d 0; i \u003c len; i++) {\n         if (!chars.get(i).equals(seqChars[i]))\n             return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[public]"
      }
    },
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ydocchange)",
      "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean matches(String seq) {\n    int len \u003d seq.length();\n    if (len \u003e queue.size())\n        return false;\n    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n    char[] seqChars \u003d seq.toCharArray();\n    for (int i \u003d 0; i \u003c len; i++) {\n        if (!chars.get(i).equals(seqChars[i]))\n            return false;\n    }\n    return true;\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 47,
          "functionName": "matches",
          "functionAnnotation": "",
          "functionDoc": "Tests if the next characters on the queue match the sequence.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
          "diff": "@@ -1,12 +1,12 @@\n-private boolean matches(String seq) {\n+boolean matches(String seq) {\n     int len \u003d seq.length();\n     if (len \u003e queue.size())\n         return false;\n     List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n     char[] seqChars \u003d seq.toCharArray();\n     for (int i \u003d 0; i \u003c len; i++) {\n         if (!chars.get(i).equals(seqChars[i]))\n             return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/jsoup/parser/Parser.java",
            "newPath": "src/main/java/org/jsoup/parser/TokenQueue.java",
            "oldMethodName": "matches",
            "newMethodName": "matches"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean matches(String seq) {\n    int len \u003d seq.length();\n    if (len \u003e queue.size())\n        return false;\n    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n    char[] seqChars \u003d seq.toCharArray();\n    for (int i \u003d 0; i \u003c len; i++) {\n        if (!chars.get(i).equals(seqChars[i]))\n            return false;\n    }\n    return true;\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 47,
          "functionName": "matches",
          "functionAnnotation": "",
          "functionDoc": "Tests if the next characters on the queue match the sequence.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
          "diff": "@@ -1,12 +1,12 @@\n-private boolean matches(String seq) {\n+boolean matches(String seq) {\n     int len \u003d seq.length();\n     if (len \u003e queue.size())\n         return false;\n     List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n     char[] seqChars \u003d seq.toCharArray();\n     for (int i \u003d 0; i \u003c len; i++) {\n         if (!chars.get(i).equals(seqChars[i]))\n             return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "boolean matches(String seq) {\n    int len \u003d seq.length();\n    if (len \u003e queue.size())\n        return false;\n    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n    char[] seqChars \u003d seq.toCharArray();\n    for (int i \u003d 0; i \u003c len; i++) {\n        if (!chars.get(i).equals(seqChars[i]))\n            return false;\n    }\n    return true;\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 47,
          "functionName": "matches",
          "functionAnnotation": "",
          "functionDoc": "Tests if the next characters on the queue match the sequence.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n",
          "diff": "@@ -1,12 +1,12 @@\n-private boolean matches(String seq) {\n+boolean matches(String seq) {\n     int len \u003d seq.length();\n     if (len \u003e queue.size())\n         return false;\n     List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n     char[] seqChars \u003d seq.toCharArray();\n     for (int i \u003d 0; i \u003c len; i++) {\n         if (!chars.get(i).equals(seqChars[i]))\n             return false;\n     }\n     return true;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Tests if the next characters on the queue match the sequence.\n\n@param seq String to check queue for.\n@return true if the next characters match.\n"
          }
        }
      ]
    },
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": {
      "type": "Yintroduced",
      "commitMessage": "Reimplemented parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,12 @@\n+private boolean matches(String seq) {\n+    int len \u003d seq.length();\n+    if (len \u003e queue.size())\n+        return false;\n+    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n+    char[] seqChars \u003d seq.toCharArray();\n+    for (int i \u003d 0; i \u003c len; i++) {\n+        if (!chars.get(i).equals(seqChars[i]))\n+            return false;\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean matches(String seq) {\n    int len \u003d seq.length();\n    if (len \u003e queue.size())\n        return false;\n    List\u003cCharacter\u003e chars \u003d queue.subList(0, len);\n    char[] seqChars \u003d seq.toCharArray();\n    for (int i \u003d 0; i \u003c len; i++) {\n        if (!chars.get(i).equals(seqChars[i]))\n            return false;\n    }\n    return true;\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 240,
      "functionName": "matches",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}