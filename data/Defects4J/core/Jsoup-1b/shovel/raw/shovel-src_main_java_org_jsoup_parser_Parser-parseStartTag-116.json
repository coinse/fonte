{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-1b",
  "repositoryPath": "/tmp/Jsoup-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "parseStartTag",
  "functionId": "parseStartTag",
  "sourceFilePath": "src/main/java/org/jsoup/parser/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 116,
  "functionEndLine": 166,
  "numCommitsSeen": 37,
  "timeTaken": 1128,
  "changeHistory": [
    "40a35750e655d5229744684086a9249b233058bf",
    "fcab98cdd311deb3dd4fd63fef2bc6c4c397f186",
    "c01af2290073af0ea42eb02dfe965b4cda58e112",
    "ed30e5c14b7ebdd2d9328150b65fadc09d833c71",
    "37d4c1f1d3297fd078dd8d1574b7f7c2357a99b4",
    "bd3e7c8ada7748dc5cf2428e68c828c0cf744469",
    "3205f0ef9409bb622f66315983830aa89d9313cf",
    "83d1848144abf29b501d59e0c3ec41e40c9cf020",
    "83b8d1a6c8db2d34fbb344ae3125781978910725",
    "7f653fab63ce7ae048a6fba1c2f529dc586369ed",
    "00734226f07e57a2d13f82a4b395b4bb7b9ee20b",
    "070396808fcb7cf41ff29ad52f7d1078aba99832",
    "d23db47db68a1b25b90e4ce255156e9758697ed2",
    "ce691239d40e469b75fa22b0bb6a065202c475a7",
    "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d",
    "e2f6a9d19c7025431278f0d77085dde4dc2da798",
    "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268"
  ],
  "changeHistoryShort": {
    "40a35750e655d5229744684086a9249b233058bf": "Ybodychange",
    "fcab98cdd311deb3dd4fd63fef2bc6c4c397f186": "Ybodychange",
    "c01af2290073af0ea42eb02dfe965b4cda58e112": "Ybodychange",
    "ed30e5c14b7ebdd2d9328150b65fadc09d833c71": "Ybodychange",
    "37d4c1f1d3297fd078dd8d1574b7f7c2357a99b4": "Ybodychange",
    "bd3e7c8ada7748dc5cf2428e68c828c0cf744469": "Ybodychange",
    "3205f0ef9409bb622f66315983830aa89d9313cf": "Ybodychange",
    "83d1848144abf29b501d59e0c3ec41e40c9cf020": "Ybodychange",
    "83b8d1a6c8db2d34fbb344ae3125781978910725": "Ybodychange",
    "7f653fab63ce7ae048a6fba1c2f529dc586369ed": "Ybodychange",
    "00734226f07e57a2d13f82a4b395b4bb7b9ee20b": "Yformatchange",
    "070396808fcb7cf41ff29ad52f7d1078aba99832": "Ybodychange",
    "d23db47db68a1b25b90e4ce255156e9758697ed2": "Ybodychange",
    "ce691239d40e469b75fa22b0bb6a065202c475a7": "Ybodychange",
    "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d": "Ybodychange",
    "e2f6a9d19c7025431278f0d77085dde4dc2da798": "Ybodychange",
    "4bd743a3a5492d1d185bd21f421e49ce3a27af7c": "Ybodychange",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": "Ybodychange",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40a35750e655d5229744684086a9249b233058bf": {
      "type": "Ybodychange",
      "commitMessage": "String.isEmpty() and LinkedList.peekFirst() is not part of the Java 5.0 API.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "40a35750e655d5229744684086a9249b233058bf",
      "commitAuthor": "Eivind Uggedal",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "fcab98cdd311deb3dd4fd63fef2bc6c4c397f186",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.length() \u003d\u003d 0) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    Element child \u003d new Element(tag, baseUri, attributes);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n        else\n            dataNode \u003d new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    if (child.tagName().equals(\"base\")) {\n        String href \u003d child.absUrl(\"href\");\n        if (href.length() !\u003d 0) {\n            baseUri \u003d href;\n            doc.setBaseUri(href);\n        }\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 116,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,41 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n-    if (tagName.isEmpty()) {\n+    if (tagName.length() \u003d\u003d 0) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     Element child \u003d new Element(tag, baseUri, attributes);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         Node dataNode;\n         if (tag.equals(titleTag) || tag.equals(textareaTag))\n             dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n         else\n             dataNode \u003d new DataNode(data, baseUri);\n         child.appendChild(dataNode);\n     }\n     if (child.tagName().equals(\"base\")) {\n         String href \u003d child.absUrl(\"href\");\n-        if (!href.isEmpty()) {\n+        if (href.length() !\u003d 0) {\n             baseUri \u003d href;\n             doc.setBaseUri(href);\n         }\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fcab98cdd311deb3dd4fd63fef2bc6c4c397f186": {
      "type": "Ybodychange",
      "commitMessage": "Added val() and val(string) to Element and Elements.\n\nTreat contents of textarea as text, not data.\n\nCloses #14\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "fcab98cdd311deb3dd4fd63fef2bc6c4c397f186",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "d24b485e252d9e86858207da7a57678d41d3f72c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    Element child \u003d new Element(tag, baseUri, attributes);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        Node dataNode;\n        if (tag.equals(titleTag) || tag.equals(textareaTag))\n            dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n        else\n            dataNode \u003d new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    if (child.tagName().equals(\"base\")) {\n        String href \u003d child.absUrl(\"href\");\n        if (!href.isEmpty()) {\n            baseUri \u003d href;\n            doc.setBaseUri(href);\n        }\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 116,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,41 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     Element child \u003d new Element(tag, baseUri, attributes);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         Node dataNode;\n-        if (tag.equals(titleTag))\n+        if (tag.equals(titleTag) || tag.equals(textareaTag))\n             dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n         else\n             dataNode \u003d new DataNode(data, baseUri);\n         child.appendChild(dataNode);\n     }\n     if (child.tagName().equals(\"base\")) {\n         String href \u003d child.absUrl(\"href\");\n         if (!href.isEmpty()) {\n             baseUri \u003d href;\n             doc.setBaseUri(href);\n         }\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c01af2290073af0ea42eb02dfe965b4cda58e112": {
      "type": "Ybodychange",
      "commitMessage": "Fix absolute URL resolution issue when a base tag has no href.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "c01af2290073af0ea42eb02dfe965b4cda58e112",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "3f67316f30614c43d14533ccc5246f7d964db70e",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    Element child \u003d new Element(tag, baseUri, attributes);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        Node dataNode;\n        if (tag.equals(titleTag))\n            dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n        else\n            dataNode \u003d new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    if (child.tagName().equals(\"base\")) {\n        String href \u003d child.absUrl(\"href\");\n        if (!href.isEmpty()) {\n            baseUri \u003d href;\n            doc.setBaseUri(href);\n        }\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 115,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,41 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     Element child \u003d new Element(tag, baseUri, attributes);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         Node dataNode;\n         if (tag.equals(titleTag))\n             dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n         else\n             dataNode \u003d new DataNode(data, baseUri);\n         child.appendChild(dataNode);\n     }\n     if (child.tagName().equals(\"base\")) {\n-        baseUri \u003d child.absUrl(\"href\");\n-        doc.setBaseUri(baseUri);\n+        String href \u003d child.absUrl(\"href\");\n+        if (!href.isEmpty()) {\n+            baseUri \u003d href;\n+            doc.setBaseUri(href);\n+        }\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ed30e5c14b7ebdd2d9328150b65fadc09d833c71": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t escape text in data nodes, to preserve \" chars\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "ed30e5c14b7ebdd2d9328150b65fadc09d833c71",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e2c62cdc3cc8f265af6ea100b60964ac6336d6e2",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    Element child \u003d new Element(tag, baseUri, attributes);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        Node dataNode;\n        if (tag.equals(titleTag))\n            dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n        else\n            dataNode \u003d new DataNode(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n        doc.setBaseUri(baseUri);\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 103,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,38 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     Element child \u003d new Element(tag, baseUri, attributes);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         Node dataNode;\n         if (tag.equals(titleTag))\n             dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n         else\n-            dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n+            dataNode \u003d new DataNode(data, baseUri);\n         child.appendChild(dataNode);\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n         doc.setBaseUri(baseUri);\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "37d4c1f1d3297fd078dd8d1574b7f7c2357a99b4": {
      "type": "Ybodychange",
      "commitMessage": "Linked Document title methods with HTML structure\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "37d4c1f1d3297fd078dd8d1574b7f7c2357a99b4",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "bd3e7c8ada7748dc5cf2428e68c828c0cf744469",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    Element child \u003d new Element(tag, baseUri, attributes);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        Node dataNode;\n        if (tag.equals(titleTag))\n            dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n        else\n            dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.appendChild(dataNode);\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n        doc.setBaseUri(baseUri);\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 103,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,38 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     Element child \u003d new Element(tag, baseUri, attributes);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n-        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n-        child.appendChild(dataNode);\n+        Node dataNode;\n         if (tag.equals(titleTag))\n-            doc.title(child.data());\n+            dataNode \u003d TextNode.createFromEncoded(data, baseUri);\n+        else\n+            dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n+        child.appendChild(dataNode);\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n         doc.setBaseUri(baseUri);\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bd3e7c8ada7748dc5cf2428e68c828c0cf744469": {
      "type": "Ybodychange",
      "commitMessage": "Simplified Document bean methods for consistency.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "bd3e7c8ada7748dc5cf2428e68c828c0cf744469",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "3205f0ef9409bb622f66315983830aa89d9313cf",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    Element child \u003d new Element(tag, baseUri, attributes);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.appendChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.title(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n        doc.setBaseUri(baseUri);\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 103,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,36 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     Element child \u003d new Element(tag, baseUri, attributes);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n         child.appendChild(dataNode);\n         if (tag.equals(titleTag))\n-            doc.setTitle(child.data());\n+            doc.title(child.data());\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n         doc.setBaseUri(baseUri);\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3205f0ef9409bb622f66315983830aa89d9313cf": {
      "type": "Ybodychange",
      "commitMessage": "Removed StartTag\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "3205f0ef9409bb622f66315983830aa89d9313cf",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "abdf22714e557304d9f6782d30da9b7254ce017c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    Element child \u003d new Element(tag, baseUri, attributes);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.appendChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n        doc.setBaseUri(baseUri);\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 103,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,37 +1,36 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n-    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n-    Element child \u003d new Element(startTag);\n+    Element child \u003d new Element(tag, baseUri, attributes);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n         child.appendChild(dataNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.data());\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n         doc.setBaseUri(baseUri);\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83d1848144abf29b501d59e0c3ec41e40c9cf020": {
      "type": "Ybodychange",
      "commitMessage": "Rename Element.addChild to appendChild.\n\nAlso implement Element.addElement(String tagName)\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "83d1848144abf29b501d59e0c3ec41e40c9cf020",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "4899674eccbb5b188a97915db8b858a3fd618098",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n    Element child \u003d new Element(startTag);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.appendChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n        doc.setBaseUri(baseUri);\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 103,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,37 +1,37 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n     Element child \u003d new Element(startTag);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n-        child.addChild(dataNode);\n+        child.appendChild(dataNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.data());\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n         doc.setBaseUri(baseUri);\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83b8d1a6c8db2d34fbb344ae3125781978910725": {
      "type": "Ybodychange",
      "commitMessage": "Initial Cleaner implementation.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "83b8d1a6c8db2d34fbb344ae3125781978910725",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "7f653fab63ce7ae048a6fba1c2f529dc586369ed",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n    Element child \u003d new Element(startTag);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.addChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n        doc.setBaseUri(baseUri);\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 93,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,36 +1,37 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n     Element child \u003d new Element(startTag);\n     boolean isEmptyElement \u003d tag.isEmpty();\n     if (tq.matchChomp(\"/\u003e\")) {\n         isEmptyElement \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n         child.addChild(dataNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.data());\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n+        doc.setBaseUri(baseUri);\n     }\n     addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7f653fab63ce7ae048a6fba1c2f529dc586369ed": {
      "type": "Ybodychange",
      "commitMessage": "Handle empty (self closing) blocks.\n\n\u003cdiv/\u003e\u003cdiv\u003e\u003c/div\u003e was parsing as \u003cdiv\u003e\u003cdiv\u003e\u003c/div\u003e\u003c/div\u003e. No longer.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "7f653fab63ce7ae048a6fba1c2f529dc586369ed",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "00734226f07e57a2d13f82a4b395b4bb7b9ee20b",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n    Element child \u003d new Element(startTag);\n    boolean isEmptyElement \u003d tag.isEmpty();\n    if (tq.matchChomp(\"/\u003e\")) {\n        isEmptyElement \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.addChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n    }\n    addChildToParent(child, isEmptyElement);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 93,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,36 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     String tagName \u003d tq.consumeWord();\n     if (tagName.isEmpty()) {\n         tq.addFirst(\"\u0026lt;\");\n         parseTextNode();\n         return;\n     }\n     Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n     Element child \u003d new Element(startTag);\n-    if (!tq.matchChomp(\"/\u003e\")) {\n+    boolean isEmptyElement \u003d tag.isEmpty();\n+    if (tq.matchChomp(\"/\u003e\")) {\n+        isEmptyElement \u003d true;\n+    } else {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n         child.addChild(dataNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.data());\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n     }\n-    addChildToParent(child);\n+    addChildToParent(child, isEmptyElement);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "00734226f07e57a2d13f82a4b395b4bb7b9ee20b": {
      "type": "Yformatchange",
      "commitMessage": "Output HTML correctly for \u003c! ... \u003e and \u003c? ... ?\u003e xml tags.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "00734226f07e57a2d13f82a4b395b4bb7b9ee20b",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "070396808fcb7cf41ff29ad52f7d1078aba99832",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n    Element child \u003d new Element(startTag);\n    if (!tq.matchChomp(\"/\u003e\")) {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.addChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n    }\n    addChildToParent(child);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 93,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "070396808fcb7cf41ff29ad52f7d1078aba99832": {
      "type": "Ybodychange",
      "commitMessage": "Parser updated to handle CDATA, and rogue \u003c in text nodes.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "070396808fcb7cf41ff29ad52f7d1078aba99832",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "7b1a8763534bb06d5f83b03ed8f6abb3e6d4db80",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    String tagName \u003d tq.consumeWord();\n    if (tagName.isEmpty()) {\n        tq.addFirst(\"\u0026lt;\");\n        parseTextNode();\n        return;\n    }\n    Attributes attributes \u003d new Attributes();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n    Element child \u003d new Element(startTag);\n    if (!tq.matchChomp(\"/\u003e\")) {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.addChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n    }\n    addChildToParent(child);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 91,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,33 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n-    Attributes attributes \u003d new Attributes();\n     String tagName \u003d tq.consumeWord();\n+    if (tagName.isEmpty()) {\n+        tq.addFirst(\"\u0026lt;\");\n+        parseTextNode();\n+        return;\n+    }\n+    Attributes attributes \u003d new Attributes();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n     Element child \u003d new Element(startTag);\n     if (!tq.matchChomp(\"/\u003e\")) {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n         child.addChild(dataNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.data());\n     }\n     if (child.tagName().equals(\"base\")) {\n         baseUri \u003d child.absUrl(\"href\");\n     }\n     addChildToParent(child);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d23db47db68a1b25b90e4ce255156e9758697ed2": {
      "type": "Ybodychange",
      "commitMessage": "Implement baseURIs for all Nodes, and absolute URL attribute getter.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "d23db47db68a1b25b90e4ce255156e9758697ed2",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "ce691239d40e469b75fa22b0bb6a065202c475a7",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    Attributes attributes \u003d new Attributes();\n    String tagName \u003d tq.consumeWord();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n    Element child \u003d new Element(startTag);\n    if (!tq.matchChomp(\"/\u003e\")) {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n        child.addChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    if (child.tagName().equals(\"base\")) {\n        baseUri \u003d child.absUrl(\"href\");\n    }\n    addChildToParent(child);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 90,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,28 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     Attributes attributes \u003d new Attributes();\n     String tagName \u003d tq.consumeWord();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n-    StartTag startTag \u003d new StartTag(tag, attributes);\n+    StartTag startTag \u003d new StartTag(tag, baseUri, attributes);\n     Element child \u003d new Element(startTag);\n     if (!tq.matchChomp(\"/\u003e\")) {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n-        DataNode dataNode \u003d DataNode.createFromEncoded(data);\n+        DataNode dataNode \u003d DataNode.createFromEncoded(data, baseUri);\n         child.addChild(dataNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.data());\n     }\n+    if (child.tagName().equals(\"base\")) {\n+        baseUri \u003d child.absUrl(\"href\");\n+    }\n     addChildToParent(child);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ce691239d40e469b75fa22b0bb6a065202c475a7": {
      "type": "Ybodychange",
      "commitMessage": "Introduced a DataNode, and SCRIPT, TEXTAREA, TITLE etc goes into DataNodes, so that Element.text() does not get clouded with script or style inners.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "ce691239d40e469b75fa22b0bb6a065202c475a7",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    Attributes attributes \u003d new Attributes();\n    String tagName \u003d tq.consumeWord();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, attributes);\n    Element child \u003d new Element(startTag);\n    if (!tq.matchChomp(\"/\u003e\")) {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        DataNode dataNode \u003d DataNode.createFromEncoded(data);\n        child.addChild(dataNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.data());\n    }\n    addChildToParent(child);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 87,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     Attributes attributes \u003d new Attributes();\n     String tagName \u003d tq.consumeWord();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, attributes);\n     Element child \u003d new Element(startTag);\n     if (!tq.matchChomp(\"/\u003e\")) {\n         tq.matchChomp(\"\u003e\");\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n-        TextNode textNode \u003d TextNode.createFromEncoded(data);\n-        child.addChild(textNode);\n+        DataNode dataNode \u003d DataNode.createFromEncoded(data);\n+        child.addChild(dataNode);\n         if (tag.equals(titleTag))\n-            doc.setTitle(child.text());\n+            doc.setTitle(child.data());\n     }\n     addChildToParent(child);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d": {
      "type": "Ybodychange",
      "commitMessage": "Implicit parent creation for elements, more general document structure creation.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e97f564d2450702d2b74ff35ecc5ad5c1e57fc0d",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e2f6a9d19c7025431278f0d77085dde4dc2da798",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    Attributes attributes \u003d new Attributes();\n    String tagName \u003d tq.consumeWord();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, attributes);\n    Element child \u003d new Element(startTag);\n    if (!tq.matchChomp(\"/\u003e\")) {\n        tq.matchChomp(\"\u003e\");\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        TextNode textNode \u003d TextNode.createFromEncoded(data);\n        child.addChild(textNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.text());\n    }\n    addChildToParent(child);\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 87,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,25 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     Attributes attributes \u003d new Attributes();\n     String tagName \u003d tq.consumeWord();\n     while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, attributes);\n     Element child \u003d new Element(startTag);\n-    boolean emptyTag;\n-    if (tq.matchChomp(\"/\u003e\")) {\n-        emptyTag \u003d true;\n-    } else {\n+    if (!tq.matchChomp(\"/\u003e\")) {\n         tq.matchChomp(\"\u003e\");\n-        emptyTag \u003d false;\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         TextNode textNode \u003d TextNode.createFromEncoded(data);\n         child.addChild(textNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.text());\n     }\n-    if (tag.equals(htmlTag)) {\n-        doc.getAttributes().mergeAttributes(attributes);\n-    } else if (tag.equals(headTag)) {\n-        doc.getHead().getAttributes().mergeAttributes(attributes);\n-    } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n-        stack.removeLast();\n-        stack.addLast(doc.getBody());\n-        last().addChild(child);\n-        if (!emptyTag)\n-            stack.addLast(child);\n-    } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n-        doc.getBody().getAttributes().mergeAttributes(attributes);\n-        stack.removeLast();\n-        stack.addLast(doc.getBody());\n-    } else {\n-        Element parent \u003d popStackToSuitableContainer(tag);\n-        parent.addChild(child);\n-        if (!emptyTag \u0026\u0026 !tag.isData())\n-            stack.addLast(child);\n-    }\n+    addChildToParent(child);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e2f6a9d19c7025431278f0d77085dde4dc2da798": {
      "type": "Ybodychange",
      "commitMessage": "Neatened Parser\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e2f6a9d19c7025431278f0d77085dde4dc2da798",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    Attributes attributes \u003d new Attributes();\n    String tagName \u003d tq.consumeWord();\n    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, attributes);\n    Element child \u003d new Element(startTag);\n    boolean emptyTag;\n    if (tq.matchChomp(\"/\u003e\")) {\n        emptyTag \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n        emptyTag \u003d false;\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        TextNode textNode \u003d TextNode.createFromEncoded(data);\n        child.addChild(textNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.text());\n    }\n    if (tag.equals(htmlTag)) {\n        doc.getAttributes().mergeAttributes(attributes);\n    } else if (tag.equals(headTag)) {\n        doc.getHead().getAttributes().mergeAttributes(attributes);\n    } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n        last().addChild(child);\n        if (!emptyTag)\n            stack.addLast(child);\n    } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n        doc.getBody().getAttributes().mergeAttributes(attributes);\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n    } else {\n        Element parent \u003d popStackToSuitableContainer(tag);\n        parent.addChild(child);\n        if (!emptyTag \u0026\u0026 !tag.isData())\n            stack.addLast(child);\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 90,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,48 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     Attributes attributes \u003d new Attributes();\n     String tagName \u003d tq.consumeWord();\n-    while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n+    while (!tq.matchesAny(\"\u003c\", \"/\u003e\", \"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, attributes);\n     Element child \u003d new Element(startTag);\n     boolean emptyTag;\n     if (tq.matchChomp(\"/\u003e\")) {\n         emptyTag \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n         emptyTag \u003d false;\n     }\n     if (tag.isData()) {\n         String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n         tq.chompTo(\"\u003e\");\n         TextNode textNode \u003d TextNode.createFromEncoded(data);\n         child.addChild(textNode);\n         if (tag.equals(titleTag))\n             doc.setTitle(child.text());\n     }\n     if (tag.equals(htmlTag)) {\n         doc.getAttributes().mergeAttributes(attributes);\n     } else if (tag.equals(headTag)) {\n         doc.getHead().getAttributes().mergeAttributes(attributes);\n     } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n         stack.removeLast();\n         stack.addLast(doc.getBody());\n         last().addChild(child);\n         if (!emptyTag)\n             stack.addLast(child);\n     } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n         doc.getBody().getAttributes().mergeAttributes(attributes);\n         stack.removeLast();\n         stack.addLast(doc.getBody());\n     } else {\n         Element parent \u003d popStackToSuitableContainer(tag);\n         parent.addChild(child);\n         if (!emptyTag \u0026\u0026 !tag.isData())\n             stack.addLast(child);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4bd743a3a5492d1d185bd21f421e49ce3a27af7c": {
      "type": "Ybodychange",
      "commitMessage": "Support for data only tags (script, textarea etc)\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "4bd743a3a5492d1d185bd21f421e49ce3a27af7c",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "04025259e96d3676097e84126fb55124b92c50ed",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    Attributes attributes \u003d new Attributes();\n    String tagName \u003d tq.consumeWord();\n    while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, attributes);\n    Element child \u003d new Element(startTag);\n    boolean emptyTag;\n    if (tq.matchChomp(\"/\u003e\")) {\n        emptyTag \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n        emptyTag \u003d false;\n    }\n    if (tag.isData()) {\n        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n        tq.chompTo(\"\u003e\");\n        TextNode textNode \u003d TextNode.createFromEncoded(data);\n        child.addChild(textNode);\n        if (tag.equals(titleTag))\n            doc.setTitle(child.text());\n    }\n    if (tag.equals(htmlTag)) {\n        doc.getAttributes().mergeAttributes(attributes);\n    } else if (tag.equals(headTag)) {\n        doc.getHead().getAttributes().mergeAttributes(attributes);\n    } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n        last().addChild(child);\n        if (!emptyTag)\n            stack.addLast(child);\n    } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n        doc.getBody().getAttributes().mergeAttributes(attributes);\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n    } else {\n        Element parent \u003d popStackToSuitableContainer(tag);\n        parent.addChild(child);\n        if (!emptyTag \u0026\u0026 !tag.isData())\n            stack.addLast(child);\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 90,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,40 +1,48 @@\n private void parseStartTag() {\n     tq.consume(\"\u003c\");\n     Attributes attributes \u003d new Attributes();\n     String tagName \u003d tq.consumeWord();\n     while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, attributes);\n     Element child \u003d new Element(startTag);\n     boolean emptyTag;\n     if (tq.matchChomp(\"/\u003e\")) {\n         emptyTag \u003d true;\n     } else {\n         tq.matchChomp(\"\u003e\");\n         emptyTag \u003d false;\n     }\n+    if (tag.isData()) {\n+        String data \u003d tq.chompTo(\"\u003c/\" + tagName);\n+        tq.chompTo(\"\u003e\");\n+        TextNode textNode \u003d TextNode.createFromEncoded(data);\n+        child.addChild(textNode);\n+        if (tag.equals(titleTag))\n+            doc.setTitle(child.text());\n+    }\n     if (tag.equals(htmlTag)) {\n         doc.getAttributes().mergeAttributes(attributes);\n     } else if (tag.equals(headTag)) {\n         doc.getHead().getAttributes().mergeAttributes(attributes);\n     } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n         stack.removeLast();\n         stack.addLast(doc.getBody());\n         last().addChild(child);\n         if (!emptyTag)\n             stack.addLast(child);\n     } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n         doc.getBody().getAttributes().mergeAttributes(attributes);\n         stack.removeLast();\n         stack.addLast(doc.getBody());\n     } else {\n         Element parent \u003d popStackToSuitableContainer(tag);\n         parent.addChild(child);\n-        if (!emptyTag)\n+        if (!emptyTag \u0026\u0026 !tag.isData())\n             stack.addLast(child);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": {
      "type": "Ybodychange",
      "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void parseStartTag() {\n    tq.consume(\"\u003c\");\n    Attributes attributes \u003d new Attributes();\n    String tagName \u003d tq.consumeWord();\n    while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, attributes);\n    Element child \u003d new Element(startTag);\n    boolean emptyTag;\n    if (tq.matchChomp(\"/\u003e\")) {\n        emptyTag \u003d true;\n    } else {\n        tq.matchChomp(\"\u003e\");\n        emptyTag \u003d false;\n    }\n    if (tag.equals(htmlTag)) {\n        doc.getAttributes().mergeAttributes(attributes);\n    } else if (tag.equals(headTag)) {\n        doc.getHead().getAttributes().mergeAttributes(attributes);\n    } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n        last().addChild(child);\n        if (!emptyTag)\n            stack.addLast(child);\n    } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n        doc.getBody().getAttributes().mergeAttributes(attributes);\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n    } else {\n        Element parent \u003d popStackToSuitableContainer(tag);\n        parent.addChild(child);\n        if (!emptyTag)\n            stack.addLast(child);\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 92,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,41 +1,40 @@\n private void parseStartTag() {\n-    consume(\"\u003c\");\n+    tq.consume(\"\u003c\");\n     Attributes attributes \u003d new Attributes();\n-    String tagName \u003d consumeWord();\n-    while (!matches(\"/\u003e\") \u0026\u0026 !matches(\"\u003e\")) {\n+    String tagName \u003d tq.consumeWord();\n+    while (!tq.matches(\"\u003c\") \u0026\u0026 !tq.matches(\"/\u003e\") \u0026\u0026 !tq.matches(\"\u003e\") \u0026\u0026 !tq.isEmpty()) {\n         Attribute attribute \u003d parseAttribute();\n         if (attribute !\u003d null)\n             attributes.put(attribute);\n     }\n     Tag tag \u003d Tag.valueOf(tagName);\n     StartTag startTag \u003d new StartTag(tag, attributes);\n     Element child \u003d new Element(startTag);\n     boolean emptyTag;\n-    if (matches(\"/\u003e\")) {\n-        consume(\"/\u003e\");\n+    if (tq.matchChomp(\"/\u003e\")) {\n         emptyTag \u003d true;\n     } else {\n-        consume(\"\u003e\");\n+        tq.matchChomp(\"\u003e\");\n         emptyTag \u003d false;\n     }\n     if (tag.equals(htmlTag)) {\n         doc.getAttributes().mergeAttributes(attributes);\n     } else if (tag.equals(headTag)) {\n         doc.getHead().getAttributes().mergeAttributes(attributes);\n     } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n         stack.removeLast();\n         stack.addLast(doc.getBody());\n         last().addChild(child);\n         if (!emptyTag)\n             stack.addLast(child);\n     } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n         doc.getBody().getAttributes().mergeAttributes(attributes);\n         stack.removeLast();\n         stack.addLast(doc.getBody());\n     } else {\n         Element parent \u003d popStackToSuitableContainer(tag);\n         parent.addChild(child);\n         if (!emptyTag)\n             stack.addLast(child);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": {
      "type": "Yintroduced",
      "commitMessage": "Reimplemented parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,41 @@\n+private void parseStartTag() {\n+    consume(\"\u003c\");\n+    Attributes attributes \u003d new Attributes();\n+    String tagName \u003d consumeWord();\n+    while (!matches(\"/\u003e\") \u0026\u0026 !matches(\"\u003e\")) {\n+        Attribute attribute \u003d parseAttribute();\n+        if (attribute !\u003d null)\n+            attributes.put(attribute);\n+    }\n+    Tag tag \u003d Tag.valueOf(tagName);\n+    StartTag startTag \u003d new StartTag(tag, attributes);\n+    Element child \u003d new Element(startTag);\n+    boolean emptyTag;\n+    if (matches(\"/\u003e\")) {\n+        consume(\"/\u003e\");\n+        emptyTag \u003d true;\n+    } else {\n+        consume(\"\u003e\");\n+        emptyTag \u003d false;\n+    }\n+    if (tag.equals(htmlTag)) {\n+        doc.getAttributes().mergeAttributes(attributes);\n+    } else if (tag.equals(headTag)) {\n+        doc.getHead().getAttributes().mergeAttributes(attributes);\n+    } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n+        stack.removeLast();\n+        stack.addLast(doc.getBody());\n+        last().addChild(child);\n+        if (!emptyTag)\n+            stack.addLast(child);\n+    } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n+        doc.getBody().getAttributes().mergeAttributes(attributes);\n+        stack.removeLast();\n+        stack.addLast(doc.getBody());\n+    } else {\n+        Element parent \u003d popStackToSuitableContainer(tag);\n+        parent.addChild(child);\n+        if (!emptyTag)\n+            stack.addLast(child);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void parseStartTag() {\n    consume(\"\u003c\");\n    Attributes attributes \u003d new Attributes();\n    String tagName \u003d consumeWord();\n    while (!matches(\"/\u003e\") \u0026\u0026 !matches(\"\u003e\")) {\n        Attribute attribute \u003d parseAttribute();\n        if (attribute !\u003d null)\n            attributes.put(attribute);\n    }\n    Tag tag \u003d Tag.valueOf(tagName);\n    StartTag startTag \u003d new StartTag(tag, attributes);\n    Element child \u003d new Element(startTag);\n    boolean emptyTag;\n    if (matches(\"/\u003e\")) {\n        consume(\"/\u003e\");\n        emptyTag \u003d true;\n    } else {\n        consume(\"\u003e\");\n        emptyTag \u003d false;\n    }\n    if (tag.equals(htmlTag)) {\n        doc.getAttributes().mergeAttributes(attributes);\n    } else if (tag.equals(headTag)) {\n        doc.getHead().getAttributes().mergeAttributes(attributes);\n    } else if (last().getTag().equals(headTag) \u0026\u0026 !headTag.canContain(tag)) {\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n        last().addChild(child);\n        if (!emptyTag)\n            stack.addLast(child);\n    } else if (tag.equals(bodyTag) \u0026\u0026 last().getTag().equals(htmlTag)) {\n        doc.getBody().getAttributes().mergeAttributes(attributes);\n        stack.removeLast();\n        stack.addLast(doc.getBody());\n    } else {\n        Element parent \u003d popStackToSuitableContainer(tag);\n        parent.addChild(child);\n        if (!emptyTag)\n            stack.addLast(child);\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 91,
      "functionName": "parseStartTag",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}