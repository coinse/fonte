{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-1b",
  "repositoryPath": "/tmp/Jsoup-1b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TokenQueue.java",
  "functionName": "consumeWord",
  "functionId": "consumeWord",
  "sourceFilePath": "src/main/java/org/jsoup/parser/TokenQueue.java",
  "functionAnnotation": "",
  "functionDoc": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n",
  "functionStartLine": 207,
  "functionEndLine": 213,
  "numCommitsSeen": 18,
  "timeTaken": 726,
  "changeHistory": [
    "40a35750e655d5229744684086a9249b233058bf",
    "04025259e96d3676097e84126fb55124b92c50ed",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268"
  ],
  "changeHistoryShort": {
    "40a35750e655d5229744684086a9249b233058bf": "Ybodychange",
    "04025259e96d3676097e84126fb55124b92c50ed": "Ymodifierchange",
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange)",
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40a35750e655d5229744684086a9249b233058bf": {
      "type": "Ybodychange",
      "commitMessage": "String.isEmpty() and LinkedList.peekFirst() is not part of the Java 5.0 API.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "40a35750e655d5229744684086a9249b233058bf",
      "commitAuthor": "Eivind Uggedal",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "ec69d09deb79468edde57456c0f79c19128e19e1",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public String consumeWord() {\n    StringBuilder wordAccum \u003d new StringBuilder();\n    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peek())) {\n        wordAccum.append(queue.removeFirst());\n    }\n    return wordAccum.toString();\n}",
      "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
      "functionStartLine": 207,
      "functionName": "consumeWord",
      "functionAnnotation": "",
      "functionDoc": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n",
      "diff": "@@ -1,7 +1,7 @@\n public String consumeWord() {\n     StringBuilder wordAccum \u003d new StringBuilder();\n-    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n+    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peek())) {\n         wordAccum.append(queue.removeFirst());\n     }\n     return wordAccum.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "04025259e96d3676097e84126fb55124b92c50ed": {
      "type": "Ymodifierchange",
      "commitMessage": "Initial, partial implementation of Selector.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "04025259e96d3676097e84126fb55124b92c50ed",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public String consumeWord() {\n    StringBuilder wordAccum \u003d new StringBuilder();\n    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n        wordAccum.append(queue.removeFirst());\n    }\n    return wordAccum.toString();\n}",
      "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
      "functionStartLine": 165,
      "functionName": "consumeWord",
      "functionAnnotation": "",
      "functionDoc": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n",
      "diff": "@@ -1,7 +1,7 @@\n-String consumeWord() {\n+public String consumeWord() {\n     StringBuilder wordAccum \u003d new StringBuilder();\n     while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n         wordAccum.append(queue.removeFirst());\n     }\n     return wordAccum.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[public]"
      }
    },
    "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String consumeWord() {\n    StringBuilder wordAccum \u003d new StringBuilder();\n    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n        wordAccum.append(queue.removeFirst());\n    }\n    return wordAccum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 140,
          "functionName": "consumeWord",
          "functionAnnotation": "",
          "functionDoc": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n",
          "diff": "@@ -1,7 +1,7 @@\n-private String consumeWord() {\n+String consumeWord() {\n     StringBuilder wordAccum \u003d new StringBuilder();\n-    while (Character.isLetterOrDigit(queue.peekFirst())) {\n+    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n         wordAccum.append(queue.removeFirst());\n     }\n     return wordAccum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/org/jsoup/parser/Parser.java",
            "newPath": "src/main/java/org/jsoup/parser/TokenQueue.java",
            "oldMethodName": "consumeWord",
            "newMethodName": "consumeWord"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String consumeWord() {\n    StringBuilder wordAccum \u003d new StringBuilder();\n    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n        wordAccum.append(queue.removeFirst());\n    }\n    return wordAccum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 140,
          "functionName": "consumeWord",
          "functionAnnotation": "",
          "functionDoc": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n",
          "diff": "@@ -1,7 +1,7 @@\n-private String consumeWord() {\n+String consumeWord() {\n     StringBuilder wordAccum \u003d new StringBuilder();\n-    while (Character.isLetterOrDigit(queue.peekFirst())) {\n+    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n         wordAccum.append(queue.removeFirst());\n     }\n     return wordAccum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String consumeWord() {\n    StringBuilder wordAccum \u003d new StringBuilder();\n    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n        wordAccum.append(queue.removeFirst());\n    }\n    return wordAccum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 140,
          "functionName": "consumeWord",
          "functionAnnotation": "",
          "functionDoc": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n",
          "diff": "@@ -1,7 +1,7 @@\n-private String consumeWord() {\n+String consumeWord() {\n     StringBuilder wordAccum \u003d new StringBuilder();\n-    while (Character.isLetterOrDigit(queue.peekFirst())) {\n+    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n         wordAccum.append(queue.removeFirst());\n     }\n     return wordAccum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Pulled string matching stuff out of Parser ad into TokenQueue, for reuse in selector parser. Added som texts and corrected behaviour of parser.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "03336ea9dd5d2aef2e31fe5e6402a04242f4d9f8",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String consumeWord() {\n    StringBuilder wordAccum \u003d new StringBuilder();\n    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n        wordAccum.append(queue.removeFirst());\n    }\n    return wordAccum.toString();\n}",
          "path": "src/main/java/org/jsoup/parser/TokenQueue.java",
          "functionStartLine": 140,
          "functionName": "consumeWord",
          "functionAnnotation": "",
          "functionDoc": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n",
          "diff": "@@ -1,7 +1,7 @@\n-private String consumeWord() {\n+String consumeWord() {\n     StringBuilder wordAccum \u003d new StringBuilder();\n-    while (Character.isLetterOrDigit(queue.peekFirst())) {\n+    while (!queue.isEmpty() \u0026\u0026 Character.isLetterOrDigit(queue.peekFirst())) {\n         wordAccum.append(queue.removeFirst());\n     }\n     return wordAccum.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Retrieves the next run of word type (letter or digit) off the queue.\n\n@return String of word characters from queue, or empty string if none.\n"
          }
        }
      ]
    },
    "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268": {
      "type": "Yintroduced",
      "commitMessage": "Reimplemented parser.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2f0a7bf507020d98b3bdbf0a93bb1c753dd90268",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,7 @@\n+private String consumeWord() {\n+    StringBuilder wordAccum \u003d new StringBuilder();\n+    while (Character.isLetterOrDigit(queue.peekFirst())) {\n+        wordAccum.append(queue.removeFirst());\n+    }\n+    return wordAccum.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "private String consumeWord() {\n    StringBuilder wordAccum \u003d new StringBuilder();\n    while (Character.isLetterOrDigit(queue.peekFirst())) {\n        wordAccum.append(queue.removeFirst());\n    }\n    return wordAccum.toString();\n}",
      "path": "src/main/java/org/jsoup/parser/Parser.java",
      "functionStartLine": 232,
      "functionName": "consumeWord",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}