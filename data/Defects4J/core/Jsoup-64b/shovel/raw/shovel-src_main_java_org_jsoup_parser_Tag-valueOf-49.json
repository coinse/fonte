{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-64b",
  "repositoryPath": "/tmp/Jsoup-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Tag.java",
  "functionName": "valueOf",
  "functionId": "valueOf___tagName-String__settings-ParseSettings",
  "sourceFilePath": "src/main/java/org/jsoup/parser/Tag.java",
  "functionAnnotation": "",
  "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@param settings used to control tag name sensitivity\n@return The tag, either defined or new generic.\n",
  "functionStartLine": 49,
  "functionEndLine": 65,
  "numCommitsSeen": 116,
  "timeTaken": 1558,
  "changeHistory": [
    "c221cc8ab03fe7a88982cdddb9e66cff546d29df",
    "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
    "842977c381b8d48bf12719e3f5cf6fd669379957",
    "c75e9cc85d596ff08ae858da3c61d55e717607d1",
    "9b85aea847f85982b6f2d9d910e9112f771ab5a5",
    "8749726a79c22451b1f01b14fb2137f734e926b4",
    "ba5d66010db39205e29289ae81122fc85299d145",
    "2cce405d1eed3536b222f830220ef32f5a2937d7",
    "c4bb2a4933994931900cde164e517ff0e3a61353",
    "40979c984d6ceebd50dab1ba516babb1570841a7",
    "548ce13435a00bb447fbffdbca8c5ce3be752ee4"
  ],
  "changeHistoryShort": {
    "c221cc8ab03fe7a88982cdddb9e66cff546d29df": "Ybodychange",
    "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "842977c381b8d48bf12719e3f5cf6fd669379957": "Ydocchange",
    "c75e9cc85d596ff08ae858da3c61d55e717607d1": "Ybodychange",
    "9b85aea847f85982b6f2d9d910e9112f771ab5a5": "Ybodychange",
    "8749726a79c22451b1f01b14fb2137f734e926b4": "Ymultichange(Ybodychange,Ydocchange)",
    "ba5d66010db39205e29289ae81122fc85299d145": "Ybodychange",
    "2cce405d1eed3536b222f830220ef32f5a2937d7": "Ybodychange",
    "c4bb2a4933994931900cde164e517ff0e3a61353": "Ybodychange",
    "40979c984d6ceebd50dab1ba516babb1570841a7": "Ymultichange(Ybodychange,Ydocchange)",
    "548ce13435a00bb447fbffdbca8c5ce3be752ee4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c221cc8ab03fe7a88982cdddb9e66cff546d29df": {
      "type": "Ybodychange",
      "commitMessage": "Bit of a Tag cleanup\n\nFixes #767\n\nThese fields are only advisory for other users now, and no longer used\nin tree construction (since the HTML5 builder rewrite).\n",
      "commitDate": "1/5/17, 3:36 PM",
      "commitName": "c221cc8ab03fe7a88982cdddb9e66cff546d29df",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "11/13/16, 7:26 PM",
      "commitNameOld": "188c3be9051e7b2a8012ea1f08ad2b46005f58d5",
      "commitAuthorOld": "Sebastian KÃ¼rten",
      "daysBetweenCommits": 52.84,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName, ParseSettings settings) {\n    Validate.notNull(tagName);\n    Tag tag \u003d tags.get(tagName);\n    if (tag \u003d\u003d null) {\n        tagName \u003d settings.normalizeTag(tagName);\n        Validate.notEmpty(tagName);\n        tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n        }\n    }\n    return tag;\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 49,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@param settings used to control tag name sensitivity\n@return The tag, either defined or new generic.\n",
      "diff": "@@ -1,15 +1,14 @@\n public static Tag valueOf(String tagName, ParseSettings settings) {\n     Validate.notNull(tagName);\n     Tag tag \u003d tags.get(tagName);\n     if (tag \u003d\u003d null) {\n         tagName \u003d settings.normalizeTag(tagName);\n         Validate.notEmpty(tagName);\n         tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.isBlock \u003d false;\n-            tag.canContainBlock \u003d true;\n         }\n     }\n     return tag;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Introduced ParseSettings for tag and attribute name case options.\n",
      "commitDate": "8/5/16, 3:05 PM",
      "commitName": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Introduced ParseSettings for tag and attribute name case options.\n",
          "commitDate": "8/5/16, 3:05 PM",
          "commitName": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "4/17/15, 2:44 PM",
          "commitNameOld": "616d3c40fe99402c4b1311a2af2819fe1ad52cfb",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 476.01,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName, ParseSettings settings) {\n    Validate.notNull(tagName);\n    Tag tag \u003d tags.get(tagName);\n    if (tag \u003d\u003d null) {\n        tagName \u003d settings.normalizeTag(tagName);\n        Validate.notEmpty(tagName);\n        tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n    }\n    return tag;\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 50,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@param settings used to control tag name sensitivity\n@return The tag, either defined or new generic.\n",
          "diff": "@@ -1,15 +1,15 @@\n-public static Tag valueOf(String tagName) {\n+public static Tag valueOf(String tagName, ParseSettings settings) {\n     Validate.notNull(tagName);\n     Tag tag \u003d tags.get(tagName);\n     if (tag \u003d\u003d null) {\n-        tagName \u003d tagName.trim().toLowerCase();\n+        tagName \u003d settings.normalizeTag(tagName);\n         Validate.notEmpty(tagName);\n         tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n     }\n     return tag;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[tagName-String]",
            "newValue": "[tagName-String, settings-ParseSettings]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Introduced ParseSettings for tag and attribute name case options.\n",
          "commitDate": "8/5/16, 3:05 PM",
          "commitName": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "4/17/15, 2:44 PM",
          "commitNameOld": "616d3c40fe99402c4b1311a2af2819fe1ad52cfb",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 476.01,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName, ParseSettings settings) {\n    Validate.notNull(tagName);\n    Tag tag \u003d tags.get(tagName);\n    if (tag \u003d\u003d null) {\n        tagName \u003d settings.normalizeTag(tagName);\n        Validate.notEmpty(tagName);\n        tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n    }\n    return tag;\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 50,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@param settings used to control tag name sensitivity\n@return The tag, either defined or new generic.\n",
          "diff": "@@ -1,15 +1,15 @@\n-public static Tag valueOf(String tagName) {\n+public static Tag valueOf(String tagName, ParseSettings settings) {\n     Validate.notNull(tagName);\n     Tag tag \u003d tags.get(tagName);\n     if (tag \u003d\u003d null) {\n-        tagName \u003d tagName.trim().toLowerCase();\n+        tagName \u003d settings.normalizeTag(tagName);\n         Validate.notEmpty(tagName);\n         tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n     }\n     return tag;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Introduced ParseSettings for tag and attribute name case options.\n",
          "commitDate": "8/5/16, 3:05 PM",
          "commitName": "6569bb7a3671cb7241c6fcb6e0f1eef7a39f7a1d",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "4/17/15, 2:44 PM",
          "commitNameOld": "616d3c40fe99402c4b1311a2af2819fe1ad52cfb",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 476.01,
          "commitsBetweenForRepo": 81,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName, ParseSettings settings) {\n    Validate.notNull(tagName);\n    Tag tag \u003d tags.get(tagName);\n    if (tag \u003d\u003d null) {\n        tagName \u003d settings.normalizeTag(tagName);\n        Validate.notEmpty(tagName);\n        tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n    }\n    return tag;\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 50,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@param settings used to control tag name sensitivity\n@return The tag, either defined or new generic.\n",
          "diff": "@@ -1,15 +1,15 @@\n-public static Tag valueOf(String tagName) {\n+public static Tag valueOf(String tagName, ParseSettings settings) {\n     Validate.notNull(tagName);\n     Tag tag \u003d tags.get(tagName);\n     if (tag \u003d\u003d null) {\n-        tagName \u003d tagName.trim().toLowerCase();\n+        tagName \u003d settings.normalizeTag(tagName);\n         Validate.notEmpty(tagName);\n         tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n     }\n     return tag;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
            "newValue": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@param settings used to control tag name sensitivity\n@return The tag, either defined or new generic.\n"
          }
        }
      ]
    },
    "842977c381b8d48bf12719e3f5cf6fd669379957": {
      "type": "Ydocchange",
      "commitMessage": "Fixed JavaDoc errors and warnings for JDK8 with stricter doc rules.\n",
      "commitDate": "1/3/15, 7:15 AM",
      "commitName": "842977c381b8d48bf12719e3f5cf6fd669379957",
      "commitAuthor": "offa",
      "commitDateOld": "10/17/14, 1:11 PM",
      "commitNameOld": "e613360fa4f0cd3bdfdece02d2bc1b58be640cac",
      "commitAuthorOld": "offa",
      "daysBetweenCommits": 77.79,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    Tag tag \u003d tags.get(tagName);\n    if (tag \u003d\u003d null) {\n        tagName \u003d tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n        tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n    }\n    return tag;\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 49,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
        "newValue": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\u003c/p\u003e\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n"
      }
    },
    "c75e9cc85d596ff08ae858da3c61d55e717607d1": {
      "type": "Ybodychange",
      "commitMessage": "Micro-optimised Tag.valueOf\n\nOnly lower-case and trim tag names if their original form is not found\nin the registered tags. Shaves parse time for the bulk of cases where\nthe tag is already in lowercase.\n",
      "commitDate": "9/21/12, 6:52 PM",
      "commitName": "c75e9cc85d596ff08ae858da3c61d55e717607d1",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "9/21/12, 6:45 PM",
      "commitNameOld": "9b85aea847f85982b6f2d9d910e9112f771ab5a5",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    Tag tag \u003d tags.get(tagName);\n    if (tag \u003d\u003d null) {\n        tagName \u003d tagName.trim().toLowerCase();\n        Validate.notEmpty(tagName);\n        tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n    }\n    return tag;\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 46,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
      "diff": "@@ -1,12 +1,15 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n-    tagName \u003d tagName.trim().toLowerCase();\n-    Validate.notEmpty(tagName);\n     Tag tag \u003d tags.get(tagName);\n     if (tag \u003d\u003d null) {\n-        tag \u003d new Tag(tagName);\n-        tag.isBlock \u003d false;\n-        tag.canContainBlock \u003d true;\n+        tagName \u003d tagName.trim().toLowerCase();\n+        Validate.notEmpty(tagName);\n+        tag \u003d tags.get(tagName);\n+        if (tag \u003d\u003d null) {\n+            tag \u003d new Tag(tagName);\n+            tag.isBlock \u003d false;\n+            tag.canContainBlock \u003d true;\n+        }\n     }\n     return tag;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b85aea847f85982b6f2d9d910e9112f771ab5a5": {
      "type": "Ybodychange",
      "commitMessage": "Remove unnecessary synchronisation in Tag.valueOf\n\nFixes #238\n",
      "commitDate": "9/21/12, 6:45 PM",
      "commitName": "9b85aea847f85982b6f2d9d910e9112f771ab5a5",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "5/28/12, 11:49 AM",
      "commitNameOld": "94002db5f90395b8927ae69c569e5a0726dd00c4",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 116.29,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    Tag tag \u003d tags.get(tagName);\n    if (tag \u003d\u003d null) {\n        tag \u003d new Tag(tagName);\n        tag.isBlock \u003d false;\n        tag.canContainBlock \u003d true;\n    }\n    return tag;\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 46,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
      "diff": "@@ -1,14 +1,12 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n-    synchronized (tags) {\n-        Tag tag \u003d tags.get(tagName);\n-        if (tag \u003d\u003d null) {\n-            tag \u003d new Tag(tagName);\n-            tag.isBlock \u003d false;\n-            tag.canContainBlock \u003d true;\n-        }\n-        return tag;\n+    Tag tag \u003d tags.get(tagName);\n+    if (tag \u003d\u003d null) {\n+        tag \u003d new Tag(tagName);\n+        tag.isBlock \u003d false;\n+        tag.canContainBlock \u003d true;\n     }\n+    return tag;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8749726a79c22451b1f01b14fb2137f734e926b4": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "e42cce476c0749899dcf7d50ba36aa1dbdaf7fbf",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 46,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
          "diff": "@@ -1,16 +1,14 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n-            tag.setAncestor(defaultAncestor.tagName);\n-            tag.setExcludes();\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "e42cce476c0749899dcf7d50ba36aa1dbdaf7fbf",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 46,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
          "diff": "@@ -1,16 +1,14 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n-            tag.setAncestor(defaultAncestor.tagName);\n-            tag.setExcludes();\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
            "newValue": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n"
          }
        }
      ]
    },
    "ba5d66010db39205e29289ae81122fc85299d145": {
      "type": "Ybodychange",
      "commitMessage": "Improved tag definitions to allow limited children and excluded children.\nImproved implicit table element creation, particularly around tbody tags.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "ba5d66010db39205e29289ae81122fc85299d145",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "7520dee7b688bdab536bfd76fca47a65316d2147",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.setAncestor(defaultAncestor.tagName);\n            tag.setExcludes();\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 47,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
      "diff": "@@ -1,15 +1,16 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.setAncestor(defaultAncestor.tagName);\n+            tag.setExcludes();\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2cce405d1eed3536b222f830220ef32f5a2937d7": {
      "type": "Ybodychange",
      "commitMessage": "Parse unknown tags as inline elements that can contain blocks.\n\nEnsures \u003cp\u003e\u003ccustom\u003eTest\u003c/custom\u003e\u003c/p\u003e parses like that, and not\n\u003cp\u003e\u003c/p\u003e\u003ccustom\u003eTest\u003c/custom\u003e.\n\nCloses #1\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2cce405d1eed3536b222f830220ef32f5a2937d7",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "45e787d054b2851e0f3607bab47e2c41496efe76",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.setAncestor(defaultAncestor.tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 44,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
      "diff": "@@ -1,13 +1,15 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.setAncestor(defaultAncestor.tagName);\n+            tag.isBlock \u003d false;\n+            tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c4bb2a4933994931900cde164e517ff0e3a61353": {
      "type": "Ybodychange",
      "commitMessage": "Simplifed Tag creator.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "c4bb2a4933994931900cde164e517ff0e3a61353",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "98e828a29423b72397d8783c4d02159e50bd50a4",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.setAncestor(defaultAncestor.tagName);\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 43,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
      "diff": "@@ -1,13 +1,13 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n-            tag \u003d new Tag(tagName, true, true, true, false, false);\n+            tag \u003d new Tag(tagName);\n             tag.setAncestor(defaultAncestor.tagName);\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40979c984d6ceebd50dab1ba516babb1570841a7": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Don\u0027t register unknown tags.\n\nUnknown tags created with Tags.valueOf(String) were being registered, so that further\n.valueOf()s would return an \u003d\u003d tag. But that\u0027s a potential memory leak, particularly with\nmalicious input HTML, and serves no real purpose (as .equals() still works), so that\nfunctionality has been removed.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "40979c984d6ceebd50dab1ba516babb1570841a7",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Don\u0027t register unknown tags.\n\nUnknown tags created with Tags.valueOf(String) were being registered, so that further\n.valueOf()s would return an \u003d\u003d tag. But that\u0027s a potential memory leak, particularly with\nmalicious input HTML, and serves no real purpose (as .equals() still works), so that\nfunctionality has been removed.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "40979c984d6ceebd50dab1ba516babb1570841a7",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "ef7488975ee41c8743e4615677555e5af2046567",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName, true, true, true, false, false);\n            tag.setAncestor(defaultAncestor.tagName);\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 48,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
          "diff": "@@ -1,13 +1,13 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName, true, true, true, false, false);\n-            register(tag);\n+            tag.setAncestor(defaultAncestor.tagName);\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Don\u0027t register unknown tags.\n\nUnknown tags created with Tags.valueOf(String) were being registered, so that further\n.valueOf()s would return an \u003d\u003d tag. But that\u0027s a potential memory leak, particularly with\nmalicious input HTML, and serves no real purpose (as .equals() still works), so that\nfunctionality has been removed.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "40979c984d6ceebd50dab1ba516babb1570841a7",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "ef7488975ee41c8743e4615677555e5af2046567",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName, true, true, true, false, false);\n            tag.setAncestor(defaultAncestor.tagName);\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 48,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
          "diff": "@@ -1,13 +1,13 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName, true, true, true, false, false);\n-            register(tag);\n+            tag.setAncestor(defaultAncestor.tagName);\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "     Get a Tag by name. If not previously defined (unknown), registers and returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Two unknown tags with the same name will compare \u003d\u003d.\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
            "newValue": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n"
          }
        }
      ]
    },
    "548ce13435a00bb447fbffdbca8c5ce3be752ee4": {
      "type": "Yintroduced",
      "commitMessage": "Initial implementation of Tag.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "548ce13435a00bb447fbffdbca8c5ce3be752ee4",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,13 @@\n+public static Tag valueOf(String tagName) {\n+    Validate.notNull(tagName);\n+    tagName \u003d tagName.trim().toLowerCase();\n+    Validate.notEmpty(tagName);\n+    synchronized (tags) {\n+        Tag tag \u003d tags.get(tagName);\n+        if (tag \u003d\u003d null) {\n+            tag \u003d new Tag(tagName, true, true, true, false, false);\n+            register(tag);\n+        }\n+        return tag;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName, true, true, true, false, false);\n            register(tag);\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 39,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), registers and returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Two unknown tags with the same name will compare \u003d\u003d.\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n"
    }
  }
}