{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-64b",
  "repositoryPath": "/tmp/Jsoup-64b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CharacterReader.java",
  "functionName": "consumeTagName",
  "functionId": "consumeTagName",
  "sourceFilePath": "src/main/java/org/jsoup/parser/CharacterReader.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 236,
  "functionEndLine": 251,
  "numCommitsSeen": 23,
  "timeTaken": 569,
  "changeHistory": [
    "654bc6f981587bd4b39b66702550bad33e1eacc9",
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510"
  ],
  "changeHistoryShort": {
    "654bc6f981587bd4b39b66702550bad33e1eacc9": "Ybodychange",
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510": "Yintroduced"
  },
  "changeHistoryDetails": {
    "654bc6f981587bd4b39b66702550bad33e1eacc9": {
      "type": "Ybodychange",
      "commitMessage": "Stream network loading (#905)\n\nImplements a stream based input reader.\r\n\r\nThis changes URL \u0026 file inputs from buffering the whole content into a\r\nstring before starting to parse, into a stream based read.\r\n\r\nMemory consumption when loading large pages from the network or a file is substantially reduced.",
      "commitDate": "6/24/17, 11:47 PM",
      "commitName": "654bc6f981587bd4b39b66702550bad33e1eacc9",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "10/23/16, 5:59 PM",
      "commitNameOld": "6dc38f26dd31f1a367961f27c56b143cd0462e5a",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 244.24,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "actualSource": "String consumeTagName() {\n    bufferUp();\n    final int start \u003d bufPos;\n    final int remaining \u003d bufLength;\n    final char[] val \u003d charBuf;\n    while (bufPos \u003c remaining) {\n        final char c \u003d val[bufPos];\n        if (c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027/\u0027 || c \u003d\u003d \u0027\u003e\u0027 || c \u003d\u003d TokeniserState.nullChar)\n            break;\n        bufPos++;\n    }\n    return bufPos \u003e start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n}",
      "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
      "functionStartLine": 236,
      "functionName": "consumeTagName",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,13 @@\n String consumeTagName() {\n-    final int start \u003d pos;\n-    final int remaining \u003d length;\n-    final char[] val \u003d input;\n-    while (pos \u003c remaining) {\n-        final char c \u003d val[pos];\n+    bufferUp();\n+    final int start \u003d bufPos;\n+    final int remaining \u003d bufLength;\n+    final char[] val \u003d charBuf;\n+    while (bufPos \u003c remaining) {\n+        final char c \u003d val[bufPos];\n         if (c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027/\u0027 || c \u003d\u003d \u0027\u003e\u0027 || c \u003d\u003d TokeniserState.nullChar)\n             break;\n-        pos++;\n+        bufPos++;\n     }\n-    return pos \u003e start ? cacheString(start, pos - start) : \"\";\n+    return bufPos \u003e start ? cacheString(charBuf, stringCache, start, bufPos - start) : \"\";\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510": {
      "type": "Yintroduced",
      "commitMessage": "Speed improvements\n\nAndroid focussed speed improvements.\nReduced GC load with a flywheel on short strings.\nOptimized core consumeTo methods.\n",
      "commitDate": "10/26/14, 3:50 PM",
      "commitName": "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,12 @@\n+String consumeTagName() {\n+    final int start \u003d pos;\n+    final int remaining \u003d length;\n+    final char[] val \u003d input;\n+    while (pos \u003c remaining) {\n+        final char c \u003d val[pos];\n+        if (c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027/\u0027 || c \u003d\u003d \u0027\u003e\u0027 || c \u003d\u003d TokeniserState.nullChar)\n+            break;\n+        pos++;\n+    }\n+    return pos \u003e start ? cacheString(start, pos - start) : \"\";\n+}\n\\ No newline at end of file\n",
      "actualSource": "String consumeTagName() {\n    final int start \u003d pos;\n    final int remaining \u003d length;\n    final char[] val \u003d input;\n    while (pos \u003c remaining) {\n        final char c \u003d val[pos];\n        if (c \u003d\u003d \u0027\\t\u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027/\u0027 || c \u003d\u003d \u0027\u003e\u0027 || c \u003d\u003d TokeniserState.nullChar)\n            break;\n        pos++;\n    }\n    return pos \u003e start ? cacheString(start, pos - start) : \"\";\n}",
      "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
      "functionStartLine": 170,
      "functionName": "consumeTagName",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}