{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-25b",
  "repositoryPath": "/tmp/Jsoup-25b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Tag.java",
  "functionName": "valueOf",
  "functionId": "valueOf___tagName-String",
  "sourceFilePath": "src/main/java/org/jsoup/parser/Tag.java",
  "functionAnnotation": "",
  "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
  "functionStartLine": 46,
  "functionEndLine": 61,
  "numCommitsSeen": 43,
  "timeTaken": 1011,
  "changeHistory": [
    "8749726a79c22451b1f01b14fb2137f734e926b4",
    "ba5d66010db39205e29289ae81122fc85299d145",
    "2cce405d1eed3536b222f830220ef32f5a2937d7",
    "c4bb2a4933994931900cde164e517ff0e3a61353",
    "40979c984d6ceebd50dab1ba516babb1570841a7",
    "548ce13435a00bb447fbffdbca8c5ce3be752ee4"
  ],
  "changeHistoryShort": {
    "8749726a79c22451b1f01b14fb2137f734e926b4": "Ymultichange(Ybodychange,Ydocchange)",
    "ba5d66010db39205e29289ae81122fc85299d145": "Ybodychange",
    "2cce405d1eed3536b222f830220ef32f5a2937d7": "Ybodychange",
    "c4bb2a4933994931900cde164e517ff0e3a61353": "Ybodychange",
    "40979c984d6ceebd50dab1ba516babb1570841a7": "Ymultichange(Ybodychange,Ydocchange)",
    "548ce13435a00bb447fbffdbca8c5ce3be752ee4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8749726a79c22451b1f01b14fb2137f734e926b4": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "e42cce476c0749899dcf7d50ba36aa1dbdaf7fbf",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 46,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
          "diff": "@@ -1,16 +1,14 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n-            tag.setAncestor(defaultAncestor.tagName);\n-            tag.setExcludes();\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
          "commitDate": "7/2/11, 4:12 AM",
          "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:12 AM",
          "commitNameOld": "e42cce476c0749899dcf7d50ba36aa1dbdaf7fbf",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 46,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n",
          "diff": "@@ -1,16 +1,14 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n-            tag.setAncestor(defaultAncestor.tagName);\n-            tag.setExcludes();\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
            "newValue": "Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n\u003cp/\u003e\nPre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@param tagName Name of tag, e.g. \"p\". Case insensitive.\n@return The tag, either defined or new generic.\n"
          }
        }
      ]
    },
    "ba5d66010db39205e29289ae81122fc85299d145": {
      "type": "Ybodychange",
      "commitMessage": "Improved tag definitions to allow limited children and excluded children.\nImproved implicit table element creation, particularly around tbody tags.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "ba5d66010db39205e29289ae81122fc85299d145",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "7520dee7b688bdab536bfd76fca47a65316d2147",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.setAncestor(defaultAncestor.tagName);\n            tag.setExcludes();\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 47,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
      "diff": "@@ -1,15 +1,16 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.setAncestor(defaultAncestor.tagName);\n+            tag.setExcludes();\n             tag.isBlock \u003d false;\n             tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2cce405d1eed3536b222f830220ef32f5a2937d7": {
      "type": "Ybodychange",
      "commitMessage": "Parse unknown tags as inline elements that can contain blocks.\n\nEnsures \u003cp\u003e\u003ccustom\u003eTest\u003c/custom\u003e\u003c/p\u003e parses like that, and not\n\u003cp\u003e\u003c/p\u003e\u003ccustom\u003eTest\u003c/custom\u003e.\n\nCloses #1\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2cce405d1eed3536b222f830220ef32f5a2937d7",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "45e787d054b2851e0f3607bab47e2c41496efe76",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.setAncestor(defaultAncestor.tagName);\n            tag.isBlock \u003d false;\n            tag.canContainBlock \u003d true;\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 44,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
      "diff": "@@ -1,13 +1,15 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName);\n             tag.setAncestor(defaultAncestor.tagName);\n+            tag.isBlock \u003d false;\n+            tag.canContainBlock \u003d true;\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c4bb2a4933994931900cde164e517ff0e3a61353": {
      "type": "Ybodychange",
      "commitMessage": "Simplifed Tag creator.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "c4bb2a4933994931900cde164e517ff0e3a61353",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "98e828a29423b72397d8783c4d02159e50bd50a4",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName);\n            tag.setAncestor(defaultAncestor.tagName);\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 43,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
      "diff": "@@ -1,13 +1,13 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n-            tag \u003d new Tag(tagName, true, true, true, false, false);\n+            tag \u003d new Tag(tagName);\n             tag.setAncestor(defaultAncestor.tagName);\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40979c984d6ceebd50dab1ba516babb1570841a7": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Don\u0027t register unknown tags.\n\nUnknown tags created with Tags.valueOf(String) were being registered, so that further\n.valueOf()s would return an \u003d\u003d tag. But that\u0027s a potential memory leak, particularly with\nmalicious input HTML, and serves no real purpose (as .equals() still works), so that\nfunctionality has been removed.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "40979c984d6ceebd50dab1ba516babb1570841a7",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Don\u0027t register unknown tags.\n\nUnknown tags created with Tags.valueOf(String) were being registered, so that further\n.valueOf()s would return an \u003d\u003d tag. But that\u0027s a potential memory leak, particularly with\nmalicious input HTML, and serves no real purpose (as .equals() still works), so that\nfunctionality has been removed.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "40979c984d6ceebd50dab1ba516babb1570841a7",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "ef7488975ee41c8743e4615677555e5af2046567",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName, true, true, true, false, false);\n            tag.setAncestor(defaultAncestor.tagName);\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 48,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
          "diff": "@@ -1,13 +1,13 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName, true, true, true, false, false);\n-            register(tag);\n+            tag.setAncestor(defaultAncestor.tagName);\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Don\u0027t register unknown tags.\n\nUnknown tags created with Tags.valueOf(String) were being registered, so that further\n.valueOf()s would return an \u003d\u003d tag. But that\u0027s a potential memory leak, particularly with\nmalicious input HTML, and serves no real purpose (as .equals() still works), so that\nfunctionality has been removed.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "40979c984d6ceebd50dab1ba516babb1570841a7",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "ef7488975ee41c8743e4615677555e5af2046567",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName, true, true, true, false, false);\n            tag.setAncestor(defaultAncestor.tagName);\n        }\n        return tag;\n    }\n}",
          "path": "src/main/java/org/jsoup/parser/Tag.java",
          "functionStartLine": 48,
          "functionName": "valueOf",
          "functionAnnotation": "",
          "functionDoc": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
          "diff": "@@ -1,13 +1,13 @@\n public static Tag valueOf(String tagName) {\n     Validate.notNull(tagName);\n     tagName \u003d tagName.trim().toLowerCase();\n     Validate.notEmpty(tagName);\n     synchronized (tags) {\n         Tag tag \u003d tags.get(tagName);\n         if (tag \u003d\u003d null) {\n             tag \u003d new Tag(tagName, true, true, true, false, false);\n-            register(tag);\n+            tag.setAncestor(defaultAncestor.tagName);\n         }\n         return tag;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "     Get a Tag by name. If not previously defined (unknown), registers and returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Two unknown tags with the same name will compare \u003d\u003d.\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n",
            "newValue": "     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Pre-defined tags (P, DIV etc) will be \u003d\u003d, but unknown tags are not registered and will only .equals().\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n"
          }
        }
      ]
    },
    "548ce13435a00bb447fbffdbca8c5ce3be752ee4": {
      "type": "Yintroduced",
      "commitMessage": "Initial implementation of Tag.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "548ce13435a00bb447fbffdbca8c5ce3be752ee4",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,13 @@\n+public static Tag valueOf(String tagName) {\n+    Validate.notNull(tagName);\n+    tagName \u003d tagName.trim().toLowerCase();\n+    Validate.notEmpty(tagName);\n+    synchronized (tags) {\n+        Tag tag \u003d tags.get(tagName);\n+        if (tag \u003d\u003d null) {\n+            tag \u003d new Tag(tagName, true, true, true, false, false);\n+            register(tag);\n+        }\n+        return tag;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static Tag valueOf(String tagName) {\n    Validate.notNull(tagName);\n    tagName \u003d tagName.trim().toLowerCase();\n    Validate.notEmpty(tagName);\n    synchronized (tags) {\n        Tag tag \u003d tags.get(tagName);\n        if (tag \u003d\u003d null) {\n            tag \u003d new Tag(tagName, true, true, true, false, false);\n            register(tag);\n        }\n        return tag;\n    }\n}",
      "path": "src/main/java/org/jsoup/parser/Tag.java",
      "functionStartLine": 39,
      "functionName": "valueOf",
      "functionAnnotation": "",
      "functionDoc": "     Get a Tag by name. If not previously defined (unknown), registers and returns a new generic tag, that can do anything.\n     \u003cp\u003e\n     Two unknown tags with the same name will compare \u003d\u003d.\n\n@ @param tagName Name of tag, e.g. \"p\". Case insensitive.\n     @return The tag, either defined or new generic.\n"
    }
  }
}