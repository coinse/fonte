{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-19b",
  "repositoryPath": "/tmp/Jsoup-19b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Node.java",
  "functionName": "absUrl",
  "functionId": "absUrl___attributeKey-String",
  "sourceFilePath": "src/main/java/org/jsoup/nodes/Node.java",
  "functionAnnotation": "",
  "functionDoc": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e).\n\u003cp/\u003e\nE.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\n\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n",
  "functionStartLine": 163,
  "functionEndLine": 188,
  "numCommitsSeen": 62,
  "timeTaken": 987,
  "changeHistory": [
    "adce18ec3d06b849886d203fe932205f312cc37f",
    "08a3d67273f31718acde383a4c5158bed9c506b2",
    "2f732574251122055092a4c6869123eb08058b14",
    "d23db47db68a1b25b90e4ce255156e9758697ed2"
  ],
  "changeHistoryShort": {
    "adce18ec3d06b849886d203fe932205f312cc37f": "Ybodychange",
    "08a3d67273f31718acde383a4c5158bed9c506b2": "Ydocchange",
    "2f732574251122055092a4c6869123eb08058b14": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "d23db47db68a1b25b90e4ce255156e9758697ed2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "adce18ec3d06b849886d203fe932205f312cc37f": {
      "type": "Ybodychange",
      "commitMessage": "Fixed absolute URL generation from relative URLs which are only query strings.\n\nFixes #49\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "adce18ec3d06b849886d203fe932205f312cc37f",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "5ca6b4041d0605025f1a1582a605d2aee377bc1c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl \u003d attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\";\n    } else {\n        URL base;\n        try {\n            try {\n                base \u003d new URL(baseUri);\n            } catch (MalformedURLException e) {\n                URL abs \u003d new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            if (relUrl.startsWith(\"?\"))\n                relUrl \u003d base.getPath() + relUrl;\n            URL abs \u003d new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
      "path": "src/main/java/org/jsoup/nodes/Node.java",
      "functionStartLine": 156,
      "functionName": "absUrl",
      "functionAnnotation": "",
      "functionDoc": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e).\n\u003cp/\u003e\nE.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\n\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n",
      "diff": "@@ -1,21 +1,23 @@\n public String absUrl(String attributeKey) {\n     Validate.notEmpty(attributeKey);\n     String relUrl \u003d attr(attributeKey);\n     if (!hasAttr(attributeKey)) {\n         return \"\";\n     } else {\n         URL base;\n         try {\n             try {\n                 base \u003d new URL(baseUri);\n             } catch (MalformedURLException e) {\n                 URL abs \u003d new URL(relUrl);\n                 return abs.toExternalForm();\n             }\n+            if (relUrl.startsWith(\"?\"))\n+                relUrl \u003d base.getPath() + relUrl;\n             URL abs \u003d new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n             return \"\";\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "08a3d67273f31718acde383a4c5158bed9c506b2": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc example on absUrl\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "08a3d67273f31718acde383a4c5158bed9c506b2",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e256bb7fc5979de256371bb324f1ca1330e38112",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "actualSource": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl \u003d attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\";\n    } else {\n        URL base;\n        try {\n            try {\n                base \u003d new URL(baseUri);\n            } catch (MalformedURLException e) {\n                URL abs \u003d new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            URL abs \u003d new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
      "path": "src/main/java/org/jsoup/nodes/Node.java",
      "functionStartLine": 156,
      "functionName": "absUrl",
      "functionAnnotation": "",
      "functionDoc": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e).\n\u003cp/\u003e\nE.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\n\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e.\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix.\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n",
        "newValue": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e).\n\u003cp/\u003e\nE.g.: \u003ccode\u003eString absUrl \u003d linkEl.absUrl(\"href\");\u003c/code\u003e\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix, e.g.:\n\u003ccode\u003eString absUrl \u003d linkEl.attr(\"abs:href\");\u003c/code\u003e\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n"
      }
    },
    "2f732574251122055092a4c6869123eb08058b14": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Modified Node#absURL to return only absolute URLs, or \"\".\n\nPreviously if there was no baseURI, it would return a relative URL from the\nattribute value, which is unreliable.\n\nAlso documented method.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "2f732574251122055092a4c6869123eb08058b14",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Modified Node#absURL to return only absolute URLs, or \"\".\n\nPreviously if there was no baseURI, it would return a relative URL from the\nattribute value, which is unreliable.\n\nAlso documented method.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "2f732574251122055092a4c6869123eb08058b14",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "e322266704817edd0a19e05207a15b791ca160b6",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl \u003d attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\";\n    } else {\n        URL base;\n        try {\n            try {\n                base \u003d new URL(baseUri);\n            } catch (MalformedURLException e) {\n                URL abs \u003d new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            URL abs \u003d new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
          "path": "src/main/java/org/jsoup/nodes/Node.java",
          "functionStartLine": 128,
          "functionName": "absUrl",
          "functionAnnotation": "",
          "functionDoc": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e.\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix.\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n",
          "diff": "@@ -1,21 +1,21 @@\n-public String absUrl(String attribute) {\n-    Validate.notEmpty(attribute);\n-    String relUrl \u003d attr(attribute);\n-    if (baseUri.isEmpty()) {\n-        return relUrl;\n+public String absUrl(String attributeKey) {\n+    Validate.notEmpty(attributeKey);\n+    String relUrl \u003d attr(attributeKey);\n+    if (!hasAttr(attributeKey)) {\n+        return \"\";\n     } else {\n         URL base;\n         try {\n             try {\n                 base \u003d new URL(baseUri);\n             } catch (MalformedURLException e) {\n                 URL abs \u003d new URL(relUrl);\n                 return abs.toExternalForm();\n             }\n             URL abs \u003d new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n             return \"\";\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[attribute-String]",
            "newValue": "[attributeKey-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Modified Node#absURL to return only absolute URLs, or \"\".\n\nPreviously if there was no baseURI, it would return a relative URL from the\nattribute value, which is unreliable.\n\nAlso documented method.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "2f732574251122055092a4c6869123eb08058b14",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "e322266704817edd0a19e05207a15b791ca160b6",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl \u003d attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\";\n    } else {\n        URL base;\n        try {\n            try {\n                base \u003d new URL(baseUri);\n            } catch (MalformedURLException e) {\n                URL abs \u003d new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            URL abs \u003d new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
          "path": "src/main/java/org/jsoup/nodes/Node.java",
          "functionStartLine": 128,
          "functionName": "absUrl",
          "functionAnnotation": "",
          "functionDoc": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e.\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix.\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n",
          "diff": "@@ -1,21 +1,21 @@\n-public String absUrl(String attribute) {\n-    Validate.notEmpty(attribute);\n-    String relUrl \u003d attr(attribute);\n-    if (baseUri.isEmpty()) {\n-        return relUrl;\n+public String absUrl(String attributeKey) {\n+    Validate.notEmpty(attributeKey);\n+    String relUrl \u003d attr(attributeKey);\n+    if (!hasAttr(attributeKey)) {\n+        return \"\";\n     } else {\n         URL base;\n         try {\n             try {\n                 base \u003d new URL(baseUri);\n             } catch (MalformedURLException e) {\n                 URL abs \u003d new URL(relUrl);\n                 return abs.toExternalForm();\n             }\n             URL abs \u003d new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n             return \"\";\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Modified Node#absURL to return only absolute URLs, or \"\".\n\nPreviously if there was no baseURI, it would return a relative URL from the\nattribute value, which is unreliable.\n\nAlso documented method.\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "2f732574251122055092a4c6869123eb08058b14",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "e322266704817edd0a19e05207a15b791ca160b6",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public String absUrl(String attributeKey) {\n    Validate.notEmpty(attributeKey);\n    String relUrl \u003d attr(attributeKey);\n    if (!hasAttr(attributeKey)) {\n        return \"\";\n    } else {\n        URL base;\n        try {\n            try {\n                base \u003d new URL(baseUri);\n            } catch (MalformedURLException e) {\n                URL abs \u003d new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            URL abs \u003d new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
          "path": "src/main/java/org/jsoup/nodes/Node.java",
          "functionStartLine": 128,
          "functionName": "absUrl",
          "functionAnnotation": "",
          "functionDoc": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e.\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix.\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n",
          "diff": "@@ -1,21 +1,21 @@\n-public String absUrl(String attribute) {\n-    Validate.notEmpty(attribute);\n-    String relUrl \u003d attr(attribute);\n-    if (baseUri.isEmpty()) {\n-        return relUrl;\n+public String absUrl(String attributeKey) {\n+    Validate.notEmpty(attributeKey);\n+    String relUrl \u003d attr(attributeKey);\n+    if (!hasAttr(attributeKey)) {\n+        return \"\";\n     } else {\n         URL base;\n         try {\n             try {\n                 base \u003d new URL(baseUri);\n             } catch (MalformedURLException e) {\n                 URL abs \u003d new URL(relUrl);\n                 return abs.toExternalForm();\n             }\n             URL abs \u003d new URL(base, relUrl);\n             return abs.toExternalForm();\n         } catch (MalformedURLException e) {\n             return \"\";\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Get an absolute URL from a URL attribute that may be relative (i.e. an \u003ccode\u003e\u0026lt;a href\u003e\u003c/code\u003e or\n\u003ccode\u003e\u0026lt;img src\u003e\u003c/code\u003e.\n\u003cp/\u003e\nIf the attribute value is already absolute (i.e. it starts with a protocol, like\n\u003ccode\u003ehttp://\u003c/code\u003e or \u003ccode\u003ehttps://\u003c/code\u003e etc), and it successfully parses as a URL, the attribute is\nreturned directly. Otherwise, it is treated as a URL relative to the element\u0027s {@link #baseUri}, and made\nabsolute using that.\n\u003cp/\u003e\nAs an alternate, you can use the {@link #attr} method with the \u003ccode\u003eabs:\u003c/code\u003e prefix.\n\n@param attributeKey The attribute key\n@return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\ncould not be made successfully into a URL.\n@see #attr\n@see java.net.URL#URL(java.net.URL, String)\n"
          }
        }
      ]
    },
    "d23db47db68a1b25b90e4ce255156e9758697ed2": {
      "type": "Yintroduced",
      "commitMessage": "Implement baseURIs for all Nodes, and absolute URL attribute getter.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "d23db47db68a1b25b90e4ce255156e9758697ed2",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,21 @@\n+public String absUrl(String attribute) {\n+    Validate.notEmpty(attribute);\n+    String relUrl \u003d attr(attribute);\n+    if (baseUri.isEmpty()) {\n+        return relUrl;\n+    } else {\n+        URL base;\n+        try {\n+            try {\n+                base \u003d new URL(baseUri);\n+            } catch (MalformedURLException e) {\n+                URL abs \u003d new URL(relUrl);\n+                return abs.toExternalForm();\n+            }\n+            URL abs \u003d new URL(base, relUrl);\n+            return abs.toExternalForm();\n+        } catch (MalformedURLException e) {\n+            return \"\";\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public String absUrl(String attribute) {\n    Validate.notEmpty(attribute);\n    String relUrl \u003d attr(attribute);\n    if (baseUri.isEmpty()) {\n        return relUrl;\n    } else {\n        URL base;\n        try {\n            try {\n                base \u003d new URL(baseUri);\n            } catch (MalformedURLException e) {\n                URL abs \u003d new URL(relUrl);\n                return abs.toExternalForm();\n            }\n            URL abs \u003d new URL(base, relUrl);\n            return abs.toExternalForm();\n        } catch (MalformedURLException e) {\n            return \"\";\n        }\n    }\n}",
      "path": "src/main/java/org/jsoup/nodes/Node.java",
      "functionStartLine": 59,
      "functionName": "absUrl",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}