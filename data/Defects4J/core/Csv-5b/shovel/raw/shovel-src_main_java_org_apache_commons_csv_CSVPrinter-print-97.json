{
  "origin": "codeshovel",
  "repositoryName": "Csv-5b",
  "repositoryPath": "/tmp/Csv-5b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CSVPrinter.java",
  "functionName": "print",
  "functionId": "print___value-Object(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
  "functionAnnotation": "",
  "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
  "functionStartLine": 97,
  "functionEndLine": 107,
  "numCommitsSeen": 178,
  "timeTaken": 1903,
  "changeHistory": [
    "5a0894f9e0ee9f4703b8db3f200ff4a507bf043b",
    "75b9a4ba4ed34eed0afe0a6c3b8a79979685a379",
    "70584f87f57ae7137e7b639f51728210f5e95365",
    "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
    "cdef24d9182acef747aa03b8cb6ff5865c843f14",
    "79eb6e039273f706828a63c1821ccc993bba3902",
    "3be1057064c83bbebb9e1394f754b6bc21cd3d3e",
    "1b4474c0a09d6d9a0015a1adbc7462b08941d393",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
    "02b21463e68e7b3d5f3d9980746d131a08a08eed",
    "637ef14ee4aa842fe689b166e36d2e88363d5c20",
    "f6f9fc1d480e85839c80d0890fa5ebed74971dc7",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955"
  ],
  "changeHistoryShort": {
    "5a0894f9e0ee9f4703b8db3f200ff4a507bf043b": "Ybodychange",
    "75b9a4ba4ed34eed0afe0a6c3b8a79979685a379": "Ybodychange",
    "70584f87f57ae7137e7b639f51728210f5e95365": "Ymultichange(Yparameterchange,Ybodychange)",
    "f51f43d18421d02fab7b39b55e6b55c32b5622d2": "Ymultichange(Yparameterchange,Ybodychange)",
    "cdef24d9182acef747aa03b8cb6ff5865c843f14": "Ydocchange",
    "79eb6e039273f706828a63c1821ccc993bba3902": "Ydocchange",
    "3be1057064c83bbebb9e1394f754b6bc21cd3d3e": "Ymultichange(Yparameterchange,Ydocchange)",
    "1b4474c0a09d6d9a0015a1adbc7462b08941d393": "Ydocchange",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": "Yparametermetachange",
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5": "Ydocchange",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": "Yfilerename",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": "Yformatchange",
    "02b21463e68e7b3d5f3d9980746d131a08a08eed": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
    "637ef14ee4aa842fe689b166e36d2e88363d5c20": "Ybodychange",
    "f6f9fc1d480e85839c80d0890fa5ebed74971dc7": "Ybodychange",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": "Yfilerename",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5a0894f9e0ee9f4703b8db3f200ff4a507bf043b": {
      "type": "Ybodychange",
      "commitMessage": "[CSV-93] Allow the handling of NULL values. Use a single property \u0027nullString\u0027 for both input and output processing. No substitutions occur if null. For reading, nullString is used to convert field values to null. For writing, nullString is used to output the given string instead of the empty string.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495911 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/23/13, 8:06 PM",
      "commitName": "5a0894f9e0ee9f4703b8db3f200ff4a507bf043b",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "5/23/13, 11:17 AM",
      "commitNameOld": "e5d7b214561e45d803dd70d88031172a4ed9f201",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 31.37,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(final Object value) throws IOException {\n    String strValue;\n    if (value \u003d\u003d null) {\n        final String nullString \u003d format.getNullString();\n        strValue \u003d nullString \u003d\u003d null ? Constants.EMPTY : nullString;\n    } else {\n        strValue \u003d value.toString();\n    }\n    this.print(value, strValue, 0, strValue.length());\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 338,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
      "diff": "@@ -1,4 +1,10 @@\n public void print(final Object value) throws IOException {\n-    final String strValue \u003d value \u003d\u003d null ? format.getNullToString() : value.toString();\n-    print(value, strValue, 0, strValue.length());\n+    String strValue;\n+    if (value \u003d\u003d null) {\n+        final String nullString \u003d format.getNullString();\n+        strValue \u003d nullString \u003d\u003d null ? Constants.EMPTY : nullString;\n+    } else {\n+        strValue \u003d value.toString();\n+    }\n+    this.print(value, strValue, 0, strValue.length());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "75b9a4ba4ed34eed0afe0a6c3b8a79979685a379": {
      "type": "Ybodychange",
      "commitMessage": "[CSV-97] Allow the String value for null to be customized for the CSV printer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1465768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/8/13, 1:34 PM",
      "commitName": "75b9a4ba4ed34eed0afe0a6c3b8a79979685a379",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "3/26/13, 10:48 AM",
      "commitNameOld": "d10442b68a673444a3d6716d2d7f1cf98618ce05",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 13.12,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(final Object value) throws IOException {\n    final String strValue \u003d value \u003d\u003d null ? format.getNullToString() : value.toString();\n    print(value, strValue, 0, strValue.length());\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 345,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
      "diff": "@@ -1,4 +1,4 @@\n public void print(final Object value) throws IOException {\n-    final String strValue \u003d value \u003d\u003d null ? EMPTY : value.toString();\n+    final String strValue \u003d value \u003d\u003d null ? format.getNullToString() : value.toString();\n     print(value, strValue, 0, strValue.length());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "70584f87f57ae7137e7b639f51728210f5e95365": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix Javadoc and better lvar name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398149 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/14/12, 4:23 PM",
      "commitName": "70584f87f57ae7137e7b639f51728210f5e95365",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix Javadoc and better lvar name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398149 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/14/12, 4:23 PM",
          "commitName": "70584f87f57ae7137e7b639f51728210f5e95365",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/14/12, 2:23 PM",
          "commitNameOld": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(final Object value) throws IOException {\n    final String strValue \u003d value \u003d\u003d null ? EMPTY : value.toString();\n    print(value, strValue, 0, strValue.length());\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 346,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
          "diff": "@@ -1,4 +1,4 @@\n-public void print(final Object object) throws IOException {\n-    final String value \u003d object \u003d\u003d null ? EMPTY : object.toString();\n-    print(object, value, 0, value.length());\n+public void print(final Object value) throws IOException {\n+    final String strValue \u003d value \u003d\u003d null ? EMPTY : value.toString();\n+    print(value, strValue, 0, strValue.length());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[object-Object(modifiers-final)]",
            "newValue": "[value-Object(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix Javadoc and better lvar name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398149 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/14/12, 4:23 PM",
          "commitName": "70584f87f57ae7137e7b639f51728210f5e95365",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/14/12, 2:23 PM",
          "commitNameOld": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(final Object value) throws IOException {\n    final String strValue \u003d value \u003d\u003d null ? EMPTY : value.toString();\n    print(value, strValue, 0, strValue.length());\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 346,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
          "diff": "@@ -1,4 +1,4 @@\n-public void print(final Object object) throws IOException {\n-    final String value \u003d object \u003d\u003d null ? EMPTY : object.toString();\n-    print(object, value, 0, value.length());\n+public void print(final Object value) throws IOException {\n+    final String strValue \u003d value \u003d\u003d null ? EMPTY : value.toString();\n+    print(value, strValue, 0, strValue.length());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f51f43d18421d02fab7b39b55e6b55c32b5622d2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a \u0027not implemented yet\u0027 exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398137 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/14/12, 2:23 PM",
      "commitName": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a \u0027not implemented yet\u0027 exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398137 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/14/12, 2:23 PM",
          "commitName": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/14/12, 2:01 PM",
          "commitNameOld": "2f2d9aa7807b22a7f21b025969eb533b118e0b54",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(final Object object) throws IOException {\n    final String value \u003d object \u003d\u003d null ? EMPTY : object.toString();\n    print(object, value, 0, value.length());\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 346,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
          "diff": "@@ -1,3 +1,4 @@\n-public void print(final Object value) throws IOException {\n-    print(value, true);\n+public void print(final Object object) throws IOException {\n+    final String value \u003d object \u003d\u003d null ? EMPTY : object.toString();\n+    print(object, value, 0, value.length());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[value-Object(modifiers-final)]",
            "newValue": "[object-Object(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement Quote.NON_NUMERIC and Quote.MINIMAL. NONE throws a \u0027not implemented yet\u0027 exception.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398137 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/14/12, 2:23 PM",
          "commitName": "f51f43d18421d02fab7b39b55e6b55c32b5622d2",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/14/12, 2:01 PM",
          "commitNameOld": "2f2d9aa7807b22a7f21b025969eb533b118e0b54",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(final Object object) throws IOException {\n    final String value \u003d object \u003d\u003d null ? EMPTY : object.toString();\n    print(object, value, 0, value.length());\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 346,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
          "diff": "@@ -1,3 +1,4 @@\n-public void print(final Object value) throws IOException {\n-    print(value, true);\n+public void print(final Object object) throws IOException {\n+    final String value \u003d object \u003d\u003d null ? EMPTY : object.toString();\n+    print(object, value, 0, value.length());\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "cdef24d9182acef747aa03b8cb6ff5865c843f14": {
      "type": "Ydocchange",
      "commitMessage": "Printer can now use a JDBC result set as input. Use H2 as lightweight in-memory JDBC database for easy test set up.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398108 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/14/12, 11:08 AM",
      "commitName": "cdef24d9182acef747aa03b8cb6ff5865c843f14",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 11:01 PM",
      "commitNameOld": "1046db8f90a4dfae375c359f86d9676cc85c23f8",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(final Object value) throws IOException {\n    print(value, true);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 324,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n         If an I/O error occurs\n",
        "newValue": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n            If an I/O error occurs\n"
      }
    },
    "79eb6e039273f706828a63c1821ccc993bba3902": {
      "type": "Ydocchange",
      "commitMessage": "Add APIs to print arrays of records and iterables of records.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398019 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 10:54 PM",
      "commitName": "79eb6e039273f706828a63c1821ccc993bba3902",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 10:10 PM",
      "commitNameOld": "7fd16f353a89e7360f060432bf7f9773284b1883",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(final Object value) throws IOException {\n    print(value, true);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 324,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n         If an I/O error occurs\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n",
        "newValue": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n@throws IOException\n         If an I/O error occurs\n"
      }
    },
    "3be1057064c83bbebb9e1394f754b6bc21cd3d3e": {
      "type": "Ymultichange(Yparameterchange,Ydocchange)",
      "commitMessage": "Change the type of printer API to accept Object instead of String.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398005 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 9:31 PM",
      "commitName": "3be1057064c83bbebb9e1394f754b6bc21cd3d3e",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Change the type of printer API to accept Object instead of String.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398005 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/13/12, 9:31 PM",
          "commitName": "3be1057064c83bbebb9e1394f754b6bc21cd3d3e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/13/12, 9:07 PM",
          "commitNameOld": "68322e03362d1be97acc4b0eda207d45396dcb2c",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(final Object value) throws IOException {\n    print(value, true);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 304,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public void print(final String value) throws IOException {\n+public void print(final Object value) throws IOException {\n     print(value, true);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[value-String(modifiers-final)]",
            "newValue": "[value-Object(modifiers-final)]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Change the type of printer API to accept Object instead of String.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1398005 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/13/12, 9:31 PM",
          "commitName": "3be1057064c83bbebb9e1394f754b6bc21cd3d3e",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "10/13/12, 9:07 PM",
          "commitNameOld": "68322e03362d1be97acc4b0eda207d45396dcb2c",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(final Object value) throws IOException {\n    print(value, true);\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 304,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n",
          "diff": "@@ -1,3 +1,3 @@\n-public void print(final String value) throws IOException {\n+public void print(final Object value) throws IOException {\n     print(value, true);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
            "newValue": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be output.\n"
          }
        }
      ]
    },
    "1b4474c0a09d6d9a0015a1adbc7462b08941d393": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: Use the active voice and change one verb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397999 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 8:43 PM",
      "commitName": "1b4474c0a09d6d9a0015a1adbc7462b08941d393",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/12/12, 5:35 AM",
      "commitNameOld": "56ca5858db4765112dca44e5deeda0ac181a6766",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 1.63,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(final String value) throws IOException {\n    print(value, true);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 307,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Print the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
        "newValue": "Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n"
      }
    },
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": {
      "type": "Yparametermetachange",
      "commitMessage": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/12, 8:47 AM",
      "commitName": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "9/11/12, 1:12 PM",
      "commitNameOld": "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 29.82,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(final String value) throws IOException {\n    print(value, true);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 301,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
      "diff": "@@ -1,3 +1,3 @@\n-public void print(String value) throws IOException {\n+public void print(final String value) throws IOException {\n     print(value, true);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[value-String]",
        "newValue": "[value-String(modifiers-final)]"
      }
    },
    "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5": {
      "type": "Ydocchange",
      "commitMessage": "Fix Checkstyle: Format for 120 line length.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/11/12, 1:12 PM",
      "commitName": "6c1b0fa1c49a3b4c51a0765c6ab3806ae4aa3ce5",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "9/11/12, 12:40 PM",
      "commitNameOld": "bf06bed9b8905ccf5409179263707074167ccfc4",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(String value) throws IOException {\n    print(value, true);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 301,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Print the string as the next value on the line. The value\nwill be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
        "newValue": "Print the string as the next value on the line. The value will be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n"
      }
    },
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": {
      "type": "Yfilerename",
      "commitMessage": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 2:38 AM",
      "commitName": "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/20/11, 9:14 AM",
      "commitNameOld": "76cab04936e8b539d983510079419fabeeaecea0",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 111.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(String value) throws IOException {\n    print(value, true);\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 311,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value\nwill be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/csv/CSVPrinter.java",
        "newPath": "src/main/java/org/apache/commons/csv/CSVPrinter.java"
      }
    },
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": {
      "type": "Yformatchange",
      "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/1/11, 12:46 AM",
      "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
      "commitAuthor": "Jacopo Cappellato",
      "commitDateOld": "7/20/10, 2:16 PM",
      "commitNameOld": "0d63758e095d2a671d0ba10fc8cae141add29a45",
      "commitAuthorOld": "Yonik Seeley",
      "daysBetweenCommits": 195.48,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(String value) throws IOException {\n    print(value, true);\n}",
      "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 311,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value\nwill be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "02b21463e68e7b3d5f3d9980746d131a08a08eed": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 9:12 AM",
      "commitName": "02b21463e68e7b3d5f3d9980746d131a08a08eed",
      "commitAuthor": "Yonik Seeley",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/16/10, 9:12 AM",
          "commitName": "02b21463e68e7b3d5f3d9980746d131a08a08eed",
          "commitAuthor": "Yonik Seeley",
          "commitDateOld": "7/23/07, 3:32 PM",
          "commitNameOld": "1d7ebab2118a4bb4ed542dd67380c3ab8abc485b",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 1058.74,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(String value) throws IOException {\n    print(value, true);\n}",
          "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 306,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Print the string as the next value on the line. The value\nwill be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
          "diff": "@@ -1,36 +1,3 @@\n-public void print(String value) {\n-    boolean quote \u003d false;\n-    if (value.length() \u003e 0) {\n-        char c \u003d value.charAt(0);\n-        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n-            quote \u003d true;\n-        }\n-        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n-            quote \u003d true;\n-        }\n-        for (int i \u003d 0; i \u003c value.length(); i++) {\n-            c \u003d value.charAt(i);\n-            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d this.strategy.getDelimiter() || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n-                quote \u003d true;\n-                c \u003d value.charAt(value.length() - 1);\n-                break;\n-            }\n-        }\n-        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n-            quote \u003d true;\n-        }\n-    } else if (newLine) {\n-        quote \u003d true;\n-    }\n-    if (newLine) {\n-        newLine \u003d false;\n-    } else {\n-        out.print(this.strategy.getDelimiter());\n-    }\n-    if (quote) {\n-        out.print(escapeAndQuote(value));\n-    } else {\n-        out.print(value);\n-    }\n-    out.flush();\n+public void print(String value) throws IOException {\n+    print(value, true);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/16/10, 9:12 AM",
          "commitName": "02b21463e68e7b3d5f3d9980746d131a08a08eed",
          "commitAuthor": "Yonik Seeley",
          "commitDateOld": "7/23/07, 3:32 PM",
          "commitNameOld": "1d7ebab2118a4bb4ed542dd67380c3ab8abc485b",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 1058.74,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(String value) throws IOException {\n    print(value, true);\n}",
          "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 306,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Print the string as the next value on the line. The value\nwill be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
          "diff": "@@ -1,36 +1,3 @@\n-public void print(String value) {\n-    boolean quote \u003d false;\n-    if (value.length() \u003e 0) {\n-        char c \u003d value.charAt(0);\n-        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n-            quote \u003d true;\n-        }\n-        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n-            quote \u003d true;\n-        }\n-        for (int i \u003d 0; i \u003c value.length(); i++) {\n-            c \u003d value.charAt(i);\n-            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d this.strategy.getDelimiter() || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n-                quote \u003d true;\n-                c \u003d value.charAt(value.length() - 1);\n-                break;\n-            }\n-        }\n-        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n-            quote \u003d true;\n-        }\n-    } else if (newLine) {\n-        quote \u003d true;\n-    }\n-    if (newLine) {\n-        newLine \u003d false;\n-    } else {\n-        out.print(this.strategy.getDelimiter());\n-    }\n-    if (quote) {\n-        out.print(escapeAndQuote(value));\n-    } else {\n-        out.print(value);\n-    }\n-    out.flush();\n+public void print(String value) throws IOException {\n+    print(value, true);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "SANDBOX-322: CSVPrinter overhaul\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@955284 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/16/10, 9:12 AM",
          "commitName": "02b21463e68e7b3d5f3d9980746d131a08a08eed",
          "commitAuthor": "Yonik Seeley",
          "commitDateOld": "7/23/07, 3:32 PM",
          "commitNameOld": "1d7ebab2118a4bb4ed542dd67380c3ab8abc485b",
          "commitAuthorOld": "Matthew Jason Benson",
          "daysBetweenCommits": 1058.74,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "actualSource": "public void print(String value) throws IOException {\n    print(value, true);\n}",
          "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
          "functionStartLine": 306,
          "functionName": "print",
          "functionAnnotation": "",
          "functionDoc": "Print the string as the next value on the line. The value\nwill be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n",
          "diff": "@@ -1,36 +1,3 @@\n-public void print(String value) {\n-    boolean quote \u003d false;\n-    if (value.length() \u003e 0) {\n-        char c \u003d value.charAt(0);\n-        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n-            quote \u003d true;\n-        }\n-        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n-            quote \u003d true;\n-        }\n-        for (int i \u003d 0; i \u003c value.length(); i++) {\n-            c \u003d value.charAt(i);\n-            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d this.strategy.getDelimiter() || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n-                quote \u003d true;\n-                c \u003d value.charAt(value.length() - 1);\n-                break;\n-            }\n-        }\n-        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n-            quote \u003d true;\n-        }\n-    } else if (newLine) {\n-        quote \u003d true;\n-    }\n-    if (newLine) {\n-        newLine \u003d false;\n-    } else {\n-        out.print(this.strategy.getDelimiter());\n-    }\n-    if (quote) {\n-        out.print(escapeAndQuote(value));\n-    } else {\n-        out.print(value);\n-    }\n-    out.flush();\n+public void print(String value) throws IOException {\n+    print(value, true);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Print the string as the next value on the line. The value\nwill be quoted if needed.\n\n@param value value to be outputted.\n",
            "newValue": "Print the string as the next value on the line. The value\nwill be escaped or encapsulated as needed.\n\n@param value value to be outputted.\n"
          }
        }
      ]
    },
    "637ef14ee4aa842fe689b166e36d2e88363d5c20": {
      "type": "Ybodychange",
      "commitMessage": "Adding a minor optimisation as detailed in #SANDBOX-160 by Daniel Gredler. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@427471 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/31/06, 11:57 PM",
      "commitName": "637ef14ee4aa842fe689b166e36d2e88363d5c20",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "7/4/06, 11:43 PM",
      "commitNameOld": "561adc6440cb832fe064554e3dc017e0ff5327a1",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 27.01,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(String value) {\n    boolean quote \u003d false;\n    if (value.length() \u003e 0) {\n        char c \u003d value.charAt(0);\n        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n        for (int i \u003d 0; i \u003c value.length(); i++) {\n            c \u003d value.charAt(i);\n            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d this.strategy.getDelimiter() || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n                quote \u003d true;\n                c \u003d value.charAt(value.length() - 1);\n                break;\n            }\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n    } else if (newLine) {\n        quote \u003d true;\n    }\n    if (newLine) {\n        newLine \u003d false;\n    } else {\n        out.print(this.strategy.getDelimiter());\n    }\n    if (quote) {\n        out.print(escapeAndQuote(value));\n    } else {\n        out.print(value);\n    }\n    out.flush();\n}",
      "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 199,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value\nwill be quoted if needed.\n\n@param value value to be outputted.\n",
      "diff": "@@ -1,34 +1,36 @@\n public void print(String value) {\n     boolean quote \u003d false;\n     if (value.length() \u003e 0) {\n         char c \u003d value.charAt(0);\n         if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         }\n         if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n             quote \u003d true;\n         }\n         for (int i \u003d 0; i \u003c value.length(); i++) {\n             c \u003d value.charAt(i);\n             if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d this.strategy.getDelimiter() || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n                 quote \u003d true;\n+                c \u003d value.charAt(value.length() - 1);\n+                break;\n             }\n         }\n         if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n             quote \u003d true;\n         }\n     } else if (newLine) {\n         quote \u003d true;\n     }\n     if (newLine) {\n         newLine \u003d false;\n     } else {\n         out.print(this.strategy.getDelimiter());\n     }\n     if (quote) {\n         out.print(escapeAndQuote(value));\n     } else {\n         out.print(value);\n     }\n     out.flush();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f6f9fc1d480e85839c80d0890fa5ebed74971dc7": {
      "type": "Ybodychange",
      "commitMessage": "Pulled some static methods into a CSVUtils class, switched CSVPrinter to use a CSVStrategy though it doesn\u0027t use it fully yet, added a COMMENTS_DISABLED constant instead of relying on (char) 0. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@415323 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/19/06, 6:01 AM",
      "commitName": "f6f9fc1d480e85839c80d0890fa5ebed74971dc7",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:46 PM",
      "commitNameOld": "0e1f0adb716515aba5e98e5690779f2fb73ad716",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 184.3,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(String value) {\n    boolean quote \u003d false;\n    if (value.length() \u003e 0) {\n        char c \u003d value.charAt(0);\n        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n        for (int i \u003d 0; i \u003c value.length(); i++) {\n            c \u003d value.charAt(i);\n            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d this.strategy.getDelimiter() || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n                quote \u003d true;\n            }\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n    } else if (newLine) {\n        quote \u003d true;\n    }\n    if (newLine) {\n        newLine \u003d false;\n    } else {\n        out.print(this.strategy.getDelimiter());\n    }\n    if (quote) {\n        out.print(escapeAndQuote(value));\n    } else {\n        out.print(value);\n    }\n    out.flush();\n}",
      "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 200,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value\nwill be quoted if needed.\n\n@param value value to be outputted.\n",
      "diff": "@@ -1,34 +1,34 @@\n public void print(String value) {\n     boolean quote \u003d false;\n     if (value.length() \u003e 0) {\n         char c \u003d value.charAt(0);\n         if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n             quote \u003d true;\n         }\n         if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n             quote \u003d true;\n         }\n         for (int i \u003d 0; i \u003c value.length(); i++) {\n             c \u003d value.charAt(i);\n-            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d separatorChar || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n+            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d this.strategy.getDelimiter() || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n                 quote \u003d true;\n             }\n         }\n         if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n             quote \u003d true;\n         }\n     } else if (newLine) {\n         quote \u003d true;\n     }\n     if (newLine) {\n         newLine \u003d false;\n     } else {\n-        out.print(separatorChar);\n+        out.print(this.strategy.getDelimiter());\n     }\n     if (quote) {\n         out.print(escapeAndQuote(value));\n     } else {\n         out.print(value);\n     }\n     out.flush();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": {
      "type": "Yfilerename",
      "commitMessage": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:42 PM",
      "commitName": "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:41 PM",
      "commitNameOld": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void print(String value) {\n    boolean quote \u003d false;\n    if (value.length() \u003e 0) {\n        char c \u003d value.charAt(0);\n        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n        for (int i \u003d 0; i \u003c value.length(); i++) {\n            c \u003d value.charAt(i);\n            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d separatorChar || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n                quote \u003d true;\n            }\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n    } else if (newLine) {\n        quote \u003d true;\n    }\n    if (newLine) {\n        newLine \u003d false;\n    } else {\n        out.print(separatorChar);\n    }\n    if (quote) {\n        out.print(escapeAndQuote(value));\n    } else {\n        out.print(value);\n    }\n    out.flush();\n}",
      "path": "src/java/org/apache/commons/csv/CSVPrinter.java",
      "functionStartLine": 233,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value\nwill be quoted if needed.\n\n@param value value to be outputted.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java",
        "newPath": "src/java/org/apache/commons/csv/CSVPrinter.java"
      }
    },
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": {
      "type": "Yintroduced",
      "commitMessage": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:41 PM",
      "commitName": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,34 @@\n+public void print(String value) {\n+    boolean quote \u003d false;\n+    if (value.length() \u003e 0) {\n+        char c \u003d value.charAt(0);\n+        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n+            quote \u003d true;\n+        }\n+        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n+            quote \u003d true;\n+        }\n+        for (int i \u003d 0; i \u003c value.length(); i++) {\n+            c \u003d value.charAt(i);\n+            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d separatorChar || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n+                quote \u003d true;\n+            }\n+        }\n+        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n+            quote \u003d true;\n+        }\n+    } else if (newLine) {\n+        quote \u003d true;\n+    }\n+    if (newLine) {\n+        newLine \u003d false;\n+    } else {\n+        out.print(separatorChar);\n+    }\n+    if (quote) {\n+        out.print(escapeAndQuote(value));\n+    } else {\n+        out.print(value);\n+    }\n+    out.flush();\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void print(String value) {\n    boolean quote \u003d false;\n    if (value.length() \u003e 0) {\n        char c \u003d value.charAt(0);\n        if (newLine \u0026\u0026 (c \u003c \u00270\u0027 || (c \u003e \u00279\u0027 \u0026\u0026 c \u003c \u0027A\u0027) || (c \u003e \u0027Z\u0027 \u0026\u0026 c \u003c \u0027a\u0027) || (c \u003e \u0027z\u0027))) {\n            quote \u003d true;\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n        for (int i \u003d 0; i \u003c value.length(); i++) {\n            c \u003d value.charAt(i);\n            if (c \u003d\u003d \u0027\"\u0027 || c \u003d\u003d separatorChar || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027) {\n                quote \u003d true;\n            }\n        }\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\f\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            quote \u003d true;\n        }\n    } else if (newLine) {\n        quote \u003d true;\n    }\n    if (newLine) {\n        newLine \u003d false;\n    } else {\n        out.print(separatorChar);\n    }\n    if (quote) {\n        out.print(escapeAndQuote(value));\n    } else {\n        out.print(value);\n    }\n    out.flush();\n}",
      "path": "src/java/ch/netcetera/wake/core/format/csv/CSVPrinter.java",
      "functionStartLine": 233,
      "functionName": "print",
      "functionAnnotation": "",
      "functionDoc": "Print the string as the next value on the line. The value\nwill be quoted if needed.\n\n@param value value to be outputted.\n"
    }
  }
}