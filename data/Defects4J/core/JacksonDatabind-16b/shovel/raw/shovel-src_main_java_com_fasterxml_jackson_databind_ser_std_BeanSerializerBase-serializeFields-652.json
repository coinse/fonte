{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerBase.java",
  "functionName": "serializeFields",
  "functionId": "serializeFields___bean-Object__jgen-JsonGenerator__provider-SerializerProvider",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 652,
  "functionEndLine": 685,
  "numCommitsSeen": 88,
  "timeTaken": 3209,
  "changeHistory": [
    "9439a310c169a00cd01a4e9b64fb9f5441297b96",
    "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": "Ybodychange",
    "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": {
      "type": "Ybodychange",
      "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
      "commitDate": "3/2/13, 1:13 PM",
      "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/18/13, 9:25 PM",
      "commitNameOld": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 11.66,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 567,
      "functionName": "serializeFields",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final BeanPropertyWriter[] props;\n-    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n+    if (_filteredProps !\u003d null \u0026\u0026 provider.getActiveView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, jgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n         JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-855], add StackOverflowError as root cause\n",
      "commitDate": "8/1/12, 8:27 AM",
      "commitName": "5fba9abafee7c4726ddbbcd2ecf382f3fe8a2c21",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/31/12, 10:24 PM",
      "commitNameOld": "6cada0a47ed675fffe15697968dfef68864b57e7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.42,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 529,
      "functionName": "serializeFields",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n     final BeanPropertyWriter[] props;\n     if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n         props \u003d _filteredProps;\n     } else {\n         props \u003d _props;\n     }\n     int i \u003d 0;\n     try {\n         for (final int len \u003d props.length; i \u003c len; ++i) {\n             BeanPropertyWriter prop \u003d props[i];\n             if (prop !\u003d null) {\n                 prop.serializeAsField(bean, jgen, provider);\n             }\n         }\n         if (_anyGetterWriter !\u003d null) {\n             _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n         }\n     } catch (Exception e) {\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         wrapAndThrow(provider, e, bean, name);\n     } catch (StackOverflowError e) {\n-        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n+        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n         String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n         mapE.prependPath(new JsonMappingException.Reference(bean, name));\n         throw mapE;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,28 @@\n+protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n+    final BeanPropertyWriter[] props;\n+    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n+        props \u003d _filteredProps;\n+    } else {\n+        props \u003d _props;\n+    }\n+    int i \u003d 0;\n+    try {\n+        for (final int len \u003d props.length; i \u003c len; ++i) {\n+            BeanPropertyWriter prop \u003d props[i];\n+            if (prop !\u003d null) {\n+                prop.serializeAsField(bean, jgen, provider);\n+            }\n+        }\n+        if (_anyGetterWriter !\u003d null) {\n+            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n+        }\n+    } catch (Exception e) {\n+        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n+        wrapAndThrow(provider, e, bean, name);\n+    } catch (StackOverflowError e) {\n+        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n+        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n+        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n+        throw mapE;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n    final BeanPropertyWriter[] props;\n    if (_filteredProps !\u003d null \u0026\u0026 provider.getSerializationView() !\u003d null) {\n        props \u003d _filteredProps;\n    } else {\n        props \u003d _props;\n    }\n    int i \u003d 0;\n    try {\n        for (final int len \u003d props.length; i \u003c len; ++i) {\n            BeanPropertyWriter prop \u003d props[i];\n            if (prop !\u003d null) {\n                prop.serializeAsField(bean, jgen, provider);\n            }\n        }\n        if (_anyGetterWriter !\u003d null) {\n            _anyGetterWriter.getAndSerialize(bean, jgen, provider);\n        }\n    } catch (Exception e) {\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        wrapAndThrow(provider, e, bean, name);\n    } catch (StackOverflowError e) {\n        JsonMappingException mapE \u003d new JsonMappingException(\"Infinite recursion (StackOverflowError)\");\n        String name \u003d (i \u003d\u003d props.length) ? \"[anySetter]\" : props[i].getName();\n        mapE.prependPath(new JsonMappingException.Reference(bean, name));\n        throw mapE;\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 137,
      "functionName": "serializeFields",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}