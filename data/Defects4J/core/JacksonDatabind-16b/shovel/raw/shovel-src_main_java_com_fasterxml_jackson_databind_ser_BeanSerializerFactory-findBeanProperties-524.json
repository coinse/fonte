{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerFactory.java",
  "functionName": "findBeanProperties",
  "functionId": "findBeanProperties___prov-SerializerProvider__beanDesc-BeanDescription__builder-BeanSerializerBuilder",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
  "functionStartLine": 524,
  "functionEndLine": 573,
  "numCommitsSeen": 127,
  "timeTaken": 3411,
  "changeHistory": [
    "bd3ded190c05c5f2f34a5677bbb4469d02599444",
    "a7ba5c4399c0ffc8e171f494543d44bc3f7261e4",
    "58077e9d135f0285a361a1d89b3767c5ece0095a",
    "d453182b63249c2c597a54229a4242e1ce1921d0",
    "c3617edebe4687842c70f84a3c16e8ab021fe630",
    "9550e09f842cd71e5c9a5c0fca2777beea5a01d6",
    "c24e1ba511132261d121d391838c2e3ce1e5f029",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
    "65c410c0c40724f763e0b4bce2db6d43bf078818",
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "bd3ded190c05c5f2f34a5677bbb4469d02599444": "Ybodychange",
    "a7ba5c4399c0ffc8e171f494543d44bc3f7261e4": "Ybodychange",
    "58077e9d135f0285a361a1d89b3767c5ece0095a": "Ybodychange",
    "d453182b63249c2c597a54229a4242e1ce1921d0": "Ybodychange",
    "c3617edebe4687842c70f84a3c16e8ab021fe630": "Ybodychange",
    "9550e09f842cd71e5c9a5c0fca2777beea5a01d6": "Ymultichange(Yparameterchange,Ybodychange)",
    "c24e1ba511132261d121d391838c2e3ce1e5f029": "Ybodychange",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": "Ybodychange",
    "65c410c0c40724f763e0b4bce2db6d43bf078818": "Ybodychange",
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd": "Ybodychange",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bd3ded190c05c5f2f34a5677bbb4469d02599444": {
      "type": "Ybodychange",
      "commitMessage": "More SerializerFactory clean up, getting read of BeanProperty arg\n",
      "commitDate": "9/30/12, 12:43 PM",
      "commitName": "bd3ded190c05c5f2f34a5677bbb4469d02599444",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/30/12, 12:04 PM",
      "commitNameOld": "65b73d92974414c018dec24a67c285ae484654c8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        final AnnotatedMember accessor \u003d property.getAccessor();\n        if (property.isTypeId()) {\n            if (accessor !\u003d null) {\n                if (config.canOverrideAccessModifiers()) {\n                    accessor.fixAccess();\n                }\n                builder.setTypeId(accessor);\n            }\n            continue;\n        }\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 524,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,37 +1,37 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n-    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n+    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         final AnnotatedMember accessor \u003d property.getAccessor();\n         if (property.isTypeId()) {\n             if (accessor !\u003d null) {\n                 if (config.canOverrideAccessModifiers()) {\n                     accessor.fixAccess();\n                 }\n                 builder.setTypeId(accessor);\n             }\n             continue;\n         }\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a7ba5c4399c0ffc8e171f494543d44bc3f7261e4": {
      "type": "Ybodychange",
      "commitMessage": "Fix a regression introduced by earlier commit (accidental deletion of type id handling)\n",
      "commitDate": "2/7/12, 8:58 PM",
      "commitName": "a7ba5c4399c0ffc8e171f494543d44bc3f7261e4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 7:47 PM",
      "commitNameOld": "58077e9d135f0285a361a1d89b3767c5ece0095a",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        final AnnotatedMember accessor \u003d property.getAccessor();\n        if (property.isTypeId()) {\n            if (accessor !\u003d null) {\n                if (config.canOverrideAccessModifiers()) {\n                    accessor.fixAccess();\n                }\n                builder.setTypeId(accessor);\n            }\n            continue;\n        }\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 434,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,28 +1,37 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         final AnnotatedMember accessor \u003d property.getAccessor();\n+        if (property.isTypeId()) {\n+            if (accessor !\u003d null) {\n+                if (config.canOverrideAccessModifiers()) {\n+                    accessor.fixAccess();\n+                }\n+                builder.setTypeId(accessor);\n+            }\n+            continue;\n+        }\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58077e9d135f0285a361a1d89b3767c5ece0095a": {
      "type": "Ybodychange",
      "commitMessage": "Ok, Object Id handling back to working as good as before refactoring, i.e. just for serialization...\n",
      "commitDate": "2/7/12, 7:47 PM",
      "commitName": "58077e9d135f0285a361a1d89b3767c5ece0095a",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/6/12, 10:44 PM",
      "commitNameOld": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        final AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 434,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,37 +1,28 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         final AnnotatedMember accessor \u003d property.getAccessor();\n-        if (property.isTypeId()) {\n-            if (accessor !\u003d null) {\n-                if (config.canOverrideAccessModifiers()) {\n-                    accessor.fixAccess();\n-                }\n-                builder.setTypeId(accessor);\n-            }\n-            continue;\n-        }\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d453182b63249c2c597a54229a4242e1ce1921d0": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring Object Id handling, after realizing first attempt is too limiting\n",
      "commitDate": "2/6/12, 10:44 PM",
      "commitName": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/4/12, 9:59 PM",
      "commitNameOld": "c3617edebe4687842c70f84a3c16e8ab021fe630",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        final AnnotatedMember accessor \u003d property.getAccessor();\n        if (property.isTypeId()) {\n            if (accessor !\u003d null) {\n                if (config.canOverrideAccessModifiers()) {\n                    accessor.fixAccess();\n                }\n                builder.setTypeId(accessor);\n            }\n            continue;\n        }\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 434,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,40 +1,37 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         final AnnotatedMember accessor \u003d property.getAccessor();\n-        if (property.isObjectId()) {\n-            builder.setObjectId(accessor);\n-        }\n         if (property.isTypeId()) {\n             if (accessor !\u003d null) {\n                 if (config.canOverrideAccessModifiers()) {\n                     accessor.fixAccess();\n                 }\n                 builder.setTypeId(accessor);\n             }\n             continue;\n         }\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c3617edebe4687842c70f84a3c16e8ab021fe630": {
      "type": "Ybodychange",
      "commitMessage": "More work on object id serialization\n",
      "commitDate": "2/4/12, 9:59 PM",
      "commitName": "c3617edebe4687842c70f84a3c16e8ab021fe630",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        final AnnotatedMember accessor \u003d property.getAccessor();\n        if (property.isObjectId()) {\n            builder.setObjectId(accessor);\n        }\n        if (property.isTypeId()) {\n            if (accessor !\u003d null) {\n                if (config.canOverrideAccessModifiers()) {\n                    accessor.fixAccess();\n                }\n                builder.setTypeId(accessor);\n            }\n            continue;\n        }\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 401,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,38 +1,40 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n+        final AnnotatedMember accessor \u003d property.getAccessor();\n+        if (property.isObjectId()) {\n+            builder.setObjectId(accessor);\n+        }\n         if (property.isTypeId()) {\n-            AnnotatedMember acc \u003d property.getAccessor();\n-            if (acc !\u003d null) {\n+            if (accessor !\u003d null) {\n                 if (config.canOverrideAccessModifiers()) {\n-                    acc.fixAccess();\n+                    accessor.fixAccess();\n                 }\n-                builder.setTypeId(acc);\n+                builder.setTypeId(accessor);\n             }\n             continue;\n         }\n-        AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9550e09f842cd71e5c9a5c0fca2777beea5a01d6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Implemented [JACKSON-762], almost done (one more unit test to make work...)\n",
      "commitDate": "2/3/12, 5:20 PM",
      "commitName": "9550e09f842cd71e5c9a5c0fca2777beea5a01d6",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implemented [JACKSON-762], almost done (one more unit test to make work...)\n",
          "commitDate": "2/3/12, 5:20 PM",
          "commitName": "9550e09f842cd71e5c9a5c0fca2777beea5a01d6",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/3/12, 1:28 PM",
          "commitNameOld": "0c1d95cee9e468b75dca6791332d44b19b93ed77",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        if (property.isTypeId()) {\n            AnnotatedMember acc \u003d property.getAccessor();\n            if (acc !\u003d null) {\n                if (config.canOverrideAccessModifiers()) {\n                    acc.fixAccess();\n                }\n                builder.setTypeId(acc);\n            }\n            continue;\n        }\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 402,
          "functionName": "findBeanProperties",
          "functionAnnotation": "",
          "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
          "diff": "@@ -1,28 +1,38 @@\n-protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n+        if (property.isTypeId()) {\n+            AnnotatedMember acc \u003d property.getAccessor();\n+            if (acc !\u003d null) {\n+                if (config.canOverrideAccessModifiers()) {\n+                    acc.fixAccess();\n+                }\n+                builder.setTypeId(acc);\n+            }\n+            continue;\n+        }\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prov-SerializerProvider, beanDesc-BeanDescription]",
            "newValue": "[prov-SerializerProvider, beanDesc-BeanDescription, builder-BeanSerializerBuilder]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implemented [JACKSON-762], almost done (one more unit test to make work...)\n",
          "commitDate": "2/3/12, 5:20 PM",
          "commitName": "9550e09f842cd71e5c9a5c0fca2777beea5a01d6",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/3/12, 1:28 PM",
          "commitNameOld": "0c1d95cee9e468b75dca6791332d44b19b93ed77",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.16,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        if (property.isTypeId()) {\n            AnnotatedMember acc \u003d property.getAccessor();\n            if (acc !\u003d null) {\n                if (config.canOverrideAccessModifiers()) {\n                    acc.fixAccess();\n                }\n                builder.setTypeId(acc);\n            }\n            continue;\n        }\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 402,
          "functionName": "findBeanProperties",
          "functionAnnotation": "",
          "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
          "diff": "@@ -1,28 +1,38 @@\n-protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n+        if (property.isTypeId()) {\n+            AnnotatedMember acc \u003d property.getAccessor();\n+            if (acc !\u003d null) {\n+                if (config.canOverrideAccessModifiers()) {\n+                    acc.fixAccess();\n+                }\n+                builder.setTypeId(acc);\n+            }\n+            continue;\n+        }\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c24e1ba511132261d121d391838c2e3ce1e5f029": {
      "type": "Ybodychange",
      "commitMessage": "Yay! Fixed all the transient unit tests -- back to only 3 longer-term failing ones\n",
      "commitDate": "2/2/12, 5:49 PM",
      "commitName": "c24e1ba511132261d121d391838c2e3ce1e5f029",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 5:33 PM",
      "commitNameOld": "82b474d51545919cb38a49485f56fd29d6ed199b",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 402,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,28 +1,28 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n-            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n+            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n-            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n+            result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-777] (renamed SerializationConfig.Feature, DeserializationConfig.Feature); various other restructure\n",
      "commitDate": "2/2/12, 11:30 AM",
      "commitName": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/1/12, 8:01 PM",
      "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.64,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 400,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,28 +1,28 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n-    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n+    if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n         if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65c410c0c40724f763e0b4bce2db6d43bf078818": {
      "type": "Ybodychange",
      "commitMessage": "refactoring\n",
      "commitDate": "1/27/12, 8:44 PM",
      "commitName": "65c410c0c40724f763e0b4bce2db6d43bf078818",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/25/12, 5:36 PM",
      "commitNameOld": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 502,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,29 +1,28 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n-    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n-        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n-        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n+        AnnotationIntrospector.ReferenceProperty refType \u003d property.findReferenceType();\n+        if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n             continue;\n         }\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd": {
      "type": "Ybodychange",
      "commitMessage": "Piping view definitions through\n",
      "commitDate": "1/25/12, 5:36 PM",
      "commitName": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/25/12, 4:45 PM",
      "commitNameOld": "766dc878e14644301483f3ecff8b5af8579e5b86",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n            continue;\n        }\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 502,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,30 +1,29 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n     final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n         if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n             continue;\n         }\n-        String name \u003d property.getName();\n         if (accessor instanceof AnnotatedMethod) {\n-            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n+            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedMethod) accessor));\n         } else {\n-            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n+            result.add(_constructWriter(property, prov, typeBind, pb, staticTyping, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
      "commitDate": "1/24/12, 6:51 PM",
      "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n            continue;\n        }\n        String name \u003d property.getName();\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 501,
          "functionName": "findBeanProperties",
          "functionAnnotation": "",
          "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
          "diff": "@@ -1,29 +1,30 @@\n-protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n+protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n+    final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n         if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n             continue;\n         }\n         String name \u003d property.getName();\n         if (accessor instanceof AnnotatedMethod) {\n-            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n+            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n         } else {\n-            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n+            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, beanDesc-BeanDescription]",
            "newValue": "[prov-SerializerProvider, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n    final SerializationConfig config \u003d prov.getConfig();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n            continue;\n        }\n        String name \u003d property.getName();\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 501,
          "functionName": "findBeanProperties",
          "functionAnnotation": "",
          "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
          "diff": "@@ -1,29 +1,30 @@\n-protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n+protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n-    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n+    final SerializationConfig config \u003d prov.getConfig();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n         if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n             continue;\n         }\n         String name \u003d property.getName();\n         if (accessor instanceof AnnotatedMethod) {\n-            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n+            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n         } else {\n-            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n+            result.add(_constructWriter(prov, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/20/12, 8:16 PM",
      "commitNameOld": "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n            continue;\n        }\n        String name \u003d property.getName();\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 497,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,29 +1,29 @@\n-protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n+protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     removeIgnorableTypes(config, beanDesc, properties);\n     if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n         if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n             continue;\n         }\n         String name \u003d property.getName();\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-SerializationConfig, beanDesc-BasicBeanDescription]",
        "newValue": "[config-SerializationConfig, beanDesc-BeanDescription]"
      }
    },
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": {
      "type": "Ybodychange",
      "commitMessage": "Completed major rewrite of handling of on/off features for ObjectMapper/SerConfig/DeserConfig\n",
      "commitDate": "1/19/12, 12:31 PM",
      "commitName": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/15/12, 4:12 PM",
      "commitNameOld": "91965175e2fd0932c48d69ca2f37887bba6a1170",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n            continue;\n        }\n        String name \u003d property.getName();\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 503,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n",
      "diff": "@@ -1,29 +1,29 @@\n protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n     List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n     AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n     removeIgnorableTypes(config, beanDesc, properties);\n-    if (config.isEnabled(SerializationConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n+    if (config.isEnabled(MapperConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n         removeSetterlessGetters(config, beanDesc, properties);\n     }\n     if (properties.isEmpty()) {\n         return null;\n     }\n     boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n     PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n     ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n     TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n     for (BeanPropertyDefinition property : properties) {\n         AnnotatedMember accessor \u003d property.getAccessor();\n         AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n         if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n             continue;\n         }\n         String name \u003d property.getName();\n         if (accessor instanceof AnnotatedMethod) {\n             result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n         } else {\n             result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n         }\n     }\n     return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,29 @@\n+protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n+    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n+    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n+    removeIgnorableTypes(config, beanDesc, properties);\n+    if (config.isEnabled(SerializationConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n+        removeSetterlessGetters(config, beanDesc, properties);\n+    }\n+    if (properties.isEmpty()) {\n+        return null;\n+    }\n+    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n+    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n+    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n+    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n+    for (BeanPropertyDefinition property : properties) {\n+        AnnotatedMember accessor \u003d property.getAccessor();\n+        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n+        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n+            continue;\n+        }\n+        String name \u003d property.getName();\n+        if (accessor instanceof AnnotatedMethod) {\n+            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n+        } else {\n+            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n+        }\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializationConfig config, BasicBeanDescription beanDesc) throws JsonMappingException {\n    List\u003cBeanPropertyDefinition\u003e properties \u003d beanDesc.findProperties();\n    AnnotationIntrospector intr \u003d config.getAnnotationIntrospector();\n    removeIgnorableTypes(config, beanDesc, properties);\n    if (config.isEnabled(SerializationConfig.Feature.REQUIRE_SETTERS_FOR_GETTERS)) {\n        removeSetterlessGetters(config, beanDesc, properties);\n    }\n    if (properties.isEmpty()) {\n        return null;\n    }\n    boolean staticTyping \u003d usesStaticTyping(config, beanDesc, null, null);\n    PropertyBuilder pb \u003d constructPropertyBuilder(config, beanDesc);\n    ArrayList\u003cBeanPropertyWriter\u003e result \u003d new ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n    TypeBindings typeBind \u003d beanDesc.bindingsForBeanType();\n    for (BeanPropertyDefinition property : properties) {\n        AnnotatedMember accessor \u003d property.getAccessor();\n        AnnotationIntrospector.ReferenceProperty prop \u003d intr.findReferenceType(accessor);\n        if (prop !\u003d null \u0026\u0026 prop.isBackReference()) {\n            continue;\n        }\n        String name \u003d property.getName();\n        if (accessor instanceof AnnotatedMethod) {\n            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedMethod) accessor));\n        } else {\n            result.add(_constructWriter(config, typeBind, pb, staticTyping, name, (AnnotatedField) accessor));\n        }\n    }\n    return result;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 552,
      "functionName": "findBeanProperties",
      "functionAnnotation": "",
      "functionDoc": "Method used to collect all actual serializable properties.\nCan be overridden to implement custom detection schemes.\n"
    }
  }
}