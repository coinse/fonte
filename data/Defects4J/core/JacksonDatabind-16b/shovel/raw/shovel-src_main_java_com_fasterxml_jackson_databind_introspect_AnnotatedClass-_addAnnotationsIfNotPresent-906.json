{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AnnotatedClass.java",
  "functionName": "_addAnnotationsIfNotPresent",
  "functionId": "_addAnnotationsIfNotPresent___result-AnnotationMap__anns-Annotation[]",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 906,
  "functionEndLine": 922,
  "numCommitsSeen": 23,
  "timeTaken": 1704,
  "changeHistory": [
    "6dcb13f70fb1c68b0c055bfb1dae2b296ae67b03",
    "3ec253707dcfba4055e99d6af97d0d3877d0999a",
    "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99",
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b"
  ],
  "changeHistoryShort": {
    "6dcb13f70fb1c68b0c055bfb1dae2b296ae67b03": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3ec253707dcfba4055e99d6af97d0d3877d0999a": "Ybodychange",
    "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99": "Ybodychange",
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6dcb13f70fb1c68b0c055bfb1dae2b296ae67b03": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Streamlining `AnnotatedClass` slightly, trying to figure out #771\n",
      "commitDate": "4/26/15, 10:24 PM",
      "commitName": "6dcb13f70fb1c68b0c055bfb1dae2b296ae67b03",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Streamlining `AnnotatedClass` slightly, trying to figure out #771\n",
          "commitDate": "4/26/15, 10:24 PM",
          "commitName": "6dcb13f70fb1c68b0c055bfb1dae2b296ae67b03",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/19/14, 3:41 PM",
          "commitNameOld": "c15e779d55627fe19e50390ff8cbef6c247338fc",
          "commitAuthorOld": "Cowtowncoder",
          "daysBetweenCommits": 128.24,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "actualSource": "private AnnotationMap _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n    if (anns !\u003d null) {\n        List\u003cAnnotation\u003e fromBundles \u003d null;\n        for (Annotation ann : anns) {\n            boolean wasNotPresent \u003d result.addIfNotPresent(ann);\n            if (wasNotPresent \u0026\u0026 _isAnnotationBundle(ann)) {\n                fromBundles \u003d _addFromBundle(ann, fromBundles);\n            }\n        }\n        if (fromBundles !\u003d null) {\n            _addAnnotationsIfNotPresent(result, fromBundles.toArray(new Annotation[fromBundles.size()]));\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 906,
          "functionName": "_addAnnotationsIfNotPresent",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,15 @@\n-private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n+private AnnotationMap _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n     if (anns !\u003d null) {\n-        List\u003cAnnotation[]\u003e bundles \u003d null;\n+        List\u003cAnnotation\u003e fromBundles \u003d null;\n         for (Annotation ann : anns) {\n             boolean wasNotPresent \u003d result.addIfNotPresent(ann);\n             if (wasNotPresent \u0026\u0026 _isAnnotationBundle(ann)) {\n-                if (bundles \u003d\u003d null) {\n-                    bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n-                }\n-                bundles.add(ann.annotationType().getDeclaredAnnotations());\n+                fromBundles \u003d _addFromBundle(ann, fromBundles);\n             }\n         }\n-        if (bundles !\u003d null) {\n-            for (Annotation[] annotations : bundles) {\n-                _addAnnotationsIfNotPresent(result, annotations);\n-            }\n+        if (fromBundles !\u003d null) {\n+            _addAnnotationsIfNotPresent(result, fromBundles.toArray(new Annotation[fromBundles.size()]));\n         }\n     }\n+    return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "AnnotationMap"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Streamlining `AnnotatedClass` slightly, trying to figure out #771\n",
          "commitDate": "4/26/15, 10:24 PM",
          "commitName": "6dcb13f70fb1c68b0c055bfb1dae2b296ae67b03",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/19/14, 3:41 PM",
          "commitNameOld": "c15e779d55627fe19e50390ff8cbef6c247338fc",
          "commitAuthorOld": "Cowtowncoder",
          "daysBetweenCommits": 128.24,
          "commitsBetweenForRepo": 112,
          "commitsBetweenForFile": 1,
          "actualSource": "private AnnotationMap _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n    if (anns !\u003d null) {\n        List\u003cAnnotation\u003e fromBundles \u003d null;\n        for (Annotation ann : anns) {\n            boolean wasNotPresent \u003d result.addIfNotPresent(ann);\n            if (wasNotPresent \u0026\u0026 _isAnnotationBundle(ann)) {\n                fromBundles \u003d _addFromBundle(ann, fromBundles);\n            }\n        }\n        if (fromBundles !\u003d null) {\n            _addAnnotationsIfNotPresent(result, fromBundles.toArray(new Annotation[fromBundles.size()]));\n        }\n    }\n    return result;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
          "functionStartLine": 906,
          "functionName": "_addAnnotationsIfNotPresent",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,15 @@\n-private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n+private AnnotationMap _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n     if (anns !\u003d null) {\n-        List\u003cAnnotation[]\u003e bundles \u003d null;\n+        List\u003cAnnotation\u003e fromBundles \u003d null;\n         for (Annotation ann : anns) {\n             boolean wasNotPresent \u003d result.addIfNotPresent(ann);\n             if (wasNotPresent \u0026\u0026 _isAnnotationBundle(ann)) {\n-                if (bundles \u003d\u003d null) {\n-                    bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n-                }\n-                bundles.add(ann.annotationType().getDeclaredAnnotations());\n+                fromBundles \u003d _addFromBundle(ann, fromBundles);\n             }\n         }\n-        if (bundles !\u003d null) {\n-            for (Annotation[] annotations : bundles) {\n-                _addAnnotationsIfNotPresent(result, annotations);\n-            }\n+        if (fromBundles !\u003d null) {\n+            _addAnnotationsIfNotPresent(result, fromBundles.toArray(new Annotation[fromBundles.size()]));\n         }\n     }\n+    return result;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3ec253707dcfba4055e99d6af97d0d3877d0999a": {
      "type": "Ybodychange",
      "commitMessage": "keep bundle annotations and prevent simple cycles\n\nI don\u0027t see any downsides and this makes it easier to manipulate\ncustom annotations, introspectors, serializers, and other parts\nthat interact with annotated objects. The cycle detection is a\nbonus.\n",
      "commitDate": "8/15/14, 4:28 PM",
      "commitName": "3ec253707dcfba4055e99d6af97d0d3877d0999a",
      "commitAuthor": "ian",
      "commitDateOld": "8/13/14, 4:04 PM",
      "commitNameOld": "fd0f1fefdc19593a040b3dce857715d613cb6458",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 2.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n    if (anns !\u003d null) {\n        List\u003cAnnotation[]\u003e bundles \u003d null;\n        for (Annotation ann : anns) {\n            boolean wasNotPresent \u003d result.addIfNotPresent(ann);\n            if (wasNotPresent \u0026\u0026 _isAnnotationBundle(ann)) {\n                if (bundles \u003d\u003d null) {\n                    bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n                }\n                bundles.add(ann.annotationType().getDeclaredAnnotations());\n            }\n        }\n        if (bundles !\u003d null) {\n            for (Annotation[] annotations : bundles) {\n                _addAnnotationsIfNotPresent(result, annotations);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 906,
      "functionName": "_addAnnotationsIfNotPresent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,20 +1,19 @@\n private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n     if (anns !\u003d null) {\n         List\u003cAnnotation[]\u003e bundles \u003d null;\n         for (Annotation ann : anns) {\n-            if (_isAnnotationBundle(ann)) {\n+            boolean wasNotPresent \u003d result.addIfNotPresent(ann);\n+            if (wasNotPresent \u0026\u0026 _isAnnotationBundle(ann)) {\n                 if (bundles \u003d\u003d null) {\n                     bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n                 }\n                 bundles.add(ann.annotationType().getDeclaredAnnotations());\n-            } else {\n-                result.addIfNotPresent(ann);\n             }\n         }\n         if (bundles !\u003d null) {\n             for (Annotation[] annotations : bundles) {\n                 _addAnnotationsIfNotPresent(result, annotations);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-754]: Support for annotation bundles with @JacksonAnnotationsInside\n",
      "commitDate": "1/16/12, 6:26 PM",
      "commitName": "f7c45bfe1e0de039a06d8e9b326a4bf523cfce99",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/16/12, 5:24 PM",
      "commitNameOld": "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n    if (anns !\u003d null) {\n        List\u003cAnnotation[]\u003e bundles \u003d null;\n        for (Annotation ann : anns) {\n            if (_isAnnotationBundle(ann)) {\n                if (bundles \u003d\u003d null) {\n                    bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n                }\n                bundles.add(ann.annotationType().getDeclaredAnnotations());\n            } else {\n                result.addIfNotPresent(ann);\n            }\n        }\n        if (bundles !\u003d null) {\n            for (Annotation[] annotations : bundles) {\n                _addAnnotationsIfNotPresent(result, annotations);\n            }\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 839,
      "functionName": "_addAnnotationsIfNotPresent",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,20 @@\n private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n     if (anns !\u003d null) {\n         List\u003cAnnotation[]\u003e bundles \u003d null;\n         for (Annotation ann : anns) {\n-            if (ann.annotationType().getAnnotation(JacksonAnnotationsInside.class) !\u003d null) {\n+            if (_isAnnotationBundle(ann)) {\n                 if (bundles \u003d\u003d null) {\n                     bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n                 }\n                 bundles.add(ann.annotationType().getDeclaredAnnotations());\n             } else {\n                 result.addIfNotPresent(ann);\n             }\n         }\n         if (bundles !\u003d null) {\n-            _addAnnotationsIfNotPresent(result, bundles.toArray(new Annotation[bundles.size()]));\n+            for (Annotation[] annotations : bundles) {\n+                _addAnnotationsIfNotPresent(result, annotations);\n+            }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b": {
      "type": "Yintroduced",
      "commitMessage": "Start work on [JACKSON-754], \"annotation bundles\"\n",
      "commitDate": "1/16/12, 5:24 PM",
      "commitName": "fd9690c47cc825ea8dbd3a01f8de99e91f35ee2b",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,18 @@\n+private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n+    if (anns !\u003d null) {\n+        List\u003cAnnotation[]\u003e bundles \u003d null;\n+        for (Annotation ann : anns) {\n+            if (ann.annotationType().getAnnotation(JacksonAnnotationsInside.class) !\u003d null) {\n+                if (bundles \u003d\u003d null) {\n+                    bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n+                }\n+                bundles.add(ann.annotationType().getDeclaredAnnotations());\n+            } else {\n+                result.addIfNotPresent(ann);\n+            }\n+        }\n+        if (bundles !\u003d null) {\n+            _addAnnotationsIfNotPresent(result, bundles.toArray(new Annotation[bundles.size()]));\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void _addAnnotationsIfNotPresent(AnnotationMap result, Annotation[] anns) {\n    if (anns !\u003d null) {\n        List\u003cAnnotation[]\u003e bundles \u003d null;\n        for (Annotation ann : anns) {\n            if (ann.annotationType().getAnnotation(JacksonAnnotationsInside.class) !\u003d null) {\n                if (bundles \u003d\u003d null) {\n                    bundles \u003d new LinkedList\u003cAnnotation[]\u003e();\n                }\n                bundles.add(ann.annotationType().getDeclaredAnnotations());\n            } else {\n                result.addIfNotPresent(ann);\n            }\n        }\n        if (bundles !\u003d null) {\n            _addAnnotationsIfNotPresent(result, bundles.toArray(new Annotation[bundles.size()]));\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
      "functionStartLine": 843,
      "functionName": "_addAnnotationsIfNotPresent",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}