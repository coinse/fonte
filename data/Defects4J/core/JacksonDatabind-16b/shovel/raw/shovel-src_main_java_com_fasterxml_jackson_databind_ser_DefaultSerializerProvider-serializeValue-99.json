{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultSerializerProvider.java",
  "functionName": "serializeValue",
  "functionId": "serializeValue___gen-JsonGenerator__value-Object",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
  "functionAnnotation": "",
  "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
  "functionStartLine": 99,
  "functionEndLine": 142,
  "numCommitsSeen": 117,
  "timeTaken": 2927,
  "changeHistory": [
    "333f5acca8f776699cccddf4e421c82110aa5916",
    "3c950dd1bd06e661780ffd414da6017ea7f89643",
    "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e",
    "23e6a93721ce57e55898f7a9d6cc2f6927f39cf4",
    "2e089cdea583170b0c4e0bdf7d9d7865de0d30ee",
    "b4851e506ed082552331a3a8bad31c0439377c5b",
    "d8b0810f94d35ba055f7397ece47aa96027bc6c5",
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
    "8e43355c20cfc8054582d21627fd73ff9b779986",
    "6679caeac9198802d271f8659017bb63eebd615f"
  ],
  "changeHistoryShort": {
    "333f5acca8f776699cccddf4e421c82110aa5916": "Ymultichange(Yparameterchange,Ybodychange)",
    "3c950dd1bd06e661780ffd414da6017ea7f89643": "Ybodychange",
    "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e": "Yexceptionschange",
    "23e6a93721ce57e55898f7a9d6cc2f6927f39cf4": "Ybodychange",
    "2e089cdea583170b0c4e0bdf7d9d7865de0d30ee": "Ybodychange",
    "b4851e506ed082552331a3a8bad31c0439377c5b": "Ybodychange",
    "d8b0810f94d35ba055f7397ece47aa96027bc6c5": "Ybodychange",
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664": "Ymovefromfile",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": "Ybodychange",
    "8e43355c20cfc8054582d21627fd73ff9b779986": "Ymultichange(Ymodifierchange,Ybodychange,Ydocchange)",
    "6679caeac9198802d271f8659017bb63eebd615f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "333f5acca8f776699cccddf4e421c82110aa5916": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Complete initial SequenceWriter implementation. To be tested.\n",
      "commitDate": "12/15/14, 10:16 PM",
      "commitName": "333f5acca8f776699cccddf4e421c82110aa5916",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Complete initial SequenceWriter implementation. To be tested.\n",
          "commitDate": "12/15/14, 10:16 PM",
          "commitName": "333f5acca8f776699cccddf4e421c82110aa5916",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/28/14, 10:39 PM",
          "commitNameOld": "3f674c2bbfb578f06c3d8f80e7fc3047d55baafe",
          "commitAuthorOld": "",
          "daysBetweenCommits": 48.03,
          "commitsBetweenForRepo": 118,
          "commitsBetweenForFile": 1,
          "actualSource": "public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeNull(gen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    final boolean wrap;\n    String rootName \u003d _config.getRootName();\n    if (rootName \u003d\u003d null) {\n        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n        if (wrap) {\n            PropertyName pname \u003d _rootNames.findRootName(value.getClass(), _config);\n            gen.writeStartObject();\n            gen.writeFieldName(pname.simpleAsEncoded(_config));\n        }\n    } else if (rootName.length() \u003d\u003d 0) {\n        wrap \u003d false;\n    } else {\n        wrap \u003d true;\n        gen.writeStartObject();\n        gen.writeFieldName(rootName);\n    }\n    try {\n        ser.serialize(value, gen, this);\n        if (wrap) {\n            gen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
          "functionStartLine": 98,
          "functionName": "serializeValue",
          "functionAnnotation": "",
          "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
          "diff": "@@ -1,38 +1,38 @@\n-public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n+public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n-        _serializeNull(jgen);\n+        _serializeNull(gen);\n         return;\n     }\n     Class\u003c?\u003e cls \u003d value.getClass();\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     final boolean wrap;\n     String rootName \u003d _config.getRootName();\n     if (rootName \u003d\u003d null) {\n         wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n         if (wrap) {\n             PropertyName pname \u003d _rootNames.findRootName(value.getClass(), _config);\n-            jgen.writeStartObject();\n-            jgen.writeFieldName(pname.simpleAsEncoded(_config));\n+            gen.writeStartObject();\n+            gen.writeFieldName(pname.simpleAsEncoded(_config));\n         }\n     } else if (rootName.length() \u003d\u003d 0) {\n         wrap \u003d false;\n     } else {\n         wrap \u003d true;\n-        jgen.writeStartObject();\n-        jgen.writeFieldName(rootName);\n+        gen.writeStartObject();\n+        gen.writeFieldName(rootName);\n     }\n     try {\n-        ser.serialize(value, jgen, this);\n+        ser.serialize(value, gen, this);\n         if (wrap) {\n-            jgen.writeEndObject();\n+            gen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[jgen-JsonGenerator, value-Object]",
            "newValue": "[gen-JsonGenerator, value-Object]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Complete initial SequenceWriter implementation. To be tested.\n",
          "commitDate": "12/15/14, 10:16 PM",
          "commitName": "333f5acca8f776699cccddf4e421c82110aa5916",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/28/14, 10:39 PM",
          "commitNameOld": "3f674c2bbfb578f06c3d8f80e7fc3047d55baafe",
          "commitAuthorOld": "",
          "daysBetweenCommits": 48.03,
          "commitsBetweenForRepo": 118,
          "commitsBetweenForFile": 1,
          "actualSource": "public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeNull(gen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    final boolean wrap;\n    String rootName \u003d _config.getRootName();\n    if (rootName \u003d\u003d null) {\n        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n        if (wrap) {\n            PropertyName pname \u003d _rootNames.findRootName(value.getClass(), _config);\n            gen.writeStartObject();\n            gen.writeFieldName(pname.simpleAsEncoded(_config));\n        }\n    } else if (rootName.length() \u003d\u003d 0) {\n        wrap \u003d false;\n    } else {\n        wrap \u003d true;\n        gen.writeStartObject();\n        gen.writeFieldName(rootName);\n    }\n    try {\n        ser.serialize(value, gen, this);\n        if (wrap) {\n            gen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
          "functionStartLine": 98,
          "functionName": "serializeValue",
          "functionAnnotation": "",
          "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
          "diff": "@@ -1,38 +1,38 @@\n-public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n+public void serializeValue(JsonGenerator gen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n-        _serializeNull(jgen);\n+        _serializeNull(gen);\n         return;\n     }\n     Class\u003c?\u003e cls \u003d value.getClass();\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     final boolean wrap;\n     String rootName \u003d _config.getRootName();\n     if (rootName \u003d\u003d null) {\n         wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n         if (wrap) {\n             PropertyName pname \u003d _rootNames.findRootName(value.getClass(), _config);\n-            jgen.writeStartObject();\n-            jgen.writeFieldName(pname.simpleAsEncoded(_config));\n+            gen.writeStartObject();\n+            gen.writeFieldName(pname.simpleAsEncoded(_config));\n         }\n     } else if (rootName.length() \u003d\u003d 0) {\n         wrap \u003d false;\n     } else {\n         wrap \u003d true;\n-        jgen.writeStartObject();\n-        jgen.writeFieldName(rootName);\n+        gen.writeStartObject();\n+        gen.writeFieldName(rootName);\n     }\n     try {\n-        ser.serialize(value, jgen, this);\n+        ser.serialize(value, gen, this);\n         if (wrap) {\n-            jgen.writeEndObject();\n+            gen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3c950dd1bd06e661780ffd414da6017ea7f89643": {
      "type": "Ybodychange",
      "commitMessage": "Minor refactoring of handling of root name, to cache PropertyName\n",
      "commitDate": "5/7/14, 10:19 PM",
      "commitName": "3c950dd1bd06e661780ffd414da6017ea7f89643",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/25/14, 11:07 PM",
      "commitNameOld": "cf2fcfe7d97e66ef1271a4dedca39a5ccb12cdb6",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 70.92,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeNull(jgen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    final boolean wrap;\n    String rootName \u003d _config.getRootName();\n    if (rootName \u003d\u003d null) {\n        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n        if (wrap) {\n            PropertyName pname \u003d _rootNames.findRootName(value.getClass(), _config);\n            jgen.writeStartObject();\n            jgen.writeFieldName(pname.simpleAsEncoded(_config));\n        }\n    } else if (rootName.length() \u003d\u003d 0) {\n        wrap \u003d false;\n    } else {\n        wrap \u003d true;\n        jgen.writeStartObject();\n        jgen.writeFieldName(rootName);\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "functionStartLine": 85,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "@@ -1,37 +1,38 @@\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n         _serializeNull(jgen);\n         return;\n     }\n     Class\u003c?\u003e cls \u003d value.getClass();\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     final boolean wrap;\n     String rootName \u003d _config.getRootName();\n     if (rootName \u003d\u003d null) {\n         wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n         if (wrap) {\n+            PropertyName pname \u003d _rootNames.findRootName(value.getClass(), _config);\n             jgen.writeStartObject();\n-            jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+            jgen.writeFieldName(pname.simpleAsEncoded(_config));\n         }\n     } else if (rootName.length() \u003d\u003d 0) {\n         wrap \u003d false;\n     } else {\n         wrap \u003d true;\n         jgen.writeStartObject();\n         jgen.writeFieldName(rootName);\n     }\n     try {\n         ser.serialize(value, jgen, this);\n         if (wrap) {\n             jgen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e": {
      "type": "Yexceptionschange",
      "commitMessage": "cleanup, removing unnecessary \u0027instance\u0027 members\n",
      "commitDate": "12/31/13, 10:10 PM",
      "commitName": "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/24/13, 4:18 PM",
      "commitNameOld": "af263c3decc975de00a78b81b38dbb4ab83c8c8e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 68.29,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n    if (value \u003d\u003d null) {\n        _serializeNull(jgen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    final boolean wrap;\n    String rootName \u003d _config.getRootName();\n    if (rootName \u003d\u003d null) {\n        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n        if (wrap) {\n            jgen.writeStartObject();\n            jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n        }\n    } else if (rootName.length() \u003d\u003d 0) {\n        wrap \u003d false;\n    } else {\n        wrap \u003d true;\n        jgen.writeStartObject();\n        jgen.writeFieldName(rootName);\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "functionStartLine": 85,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "@@ -1,37 +1,37 @@\n-public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException {\n     if (value \u003d\u003d null) {\n         _serializeNull(jgen);\n         return;\n     }\n     Class\u003c?\u003e cls \u003d value.getClass();\n     final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     final boolean wrap;\n     String rootName \u003d _config.getRootName();\n     if (rootName \u003d\u003d null) {\n         wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n         if (wrap) {\n             jgen.writeStartObject();\n             jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n         }\n     } else if (rootName.length() \u003d\u003d 0) {\n         wrap \u003d false;\n     } else {\n         wrap \u003d true;\n         jgen.writeStartObject();\n         jgen.writeFieldName(rootName);\n     }\n     try {\n         ser.serialize(value, jgen, this);\n         if (wrap) {\n             jgen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[IOException, JsonGenerationException]",
        "newValue": "[IOException]"
      }
    },
    "23e6a93721ce57e55898f7a9d6cc2f6927f39cf4": {
      "type": "Ybodychange",
      "commitMessage": "minor cleanup\n",
      "commitDate": "8/15/13, 11:09 AM",
      "commitName": "23e6a93721ce57e55898f7a9d6cc2f6927f39cf4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/14/13, 10:13 PM",
      "commitNameOld": "2e089cdea583170b0c4e0bdf7d9d7865de0d30ee",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    if (value \u003d\u003d null) {\n        _serializeNull(jgen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    final boolean wrap;\n    String rootName \u003d _config.getRootName();\n    if (rootName \u003d\u003d null) {\n        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n        if (wrap) {\n            jgen.writeStartObject();\n            jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n        }\n    } else if (rootName.length() \u003d\u003d 0) {\n        wrap \u003d false;\n    } else {\n        wrap \u003d true;\n        jgen.writeStartObject();\n        jgen.writeFieldName(rootName);\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "functionStartLine": 85,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "@@ -1,37 +1,37 @@\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n     if (value \u003d\u003d null) {\n         _serializeNull(jgen);\n         return;\n     }\n     Class\u003c?\u003e cls \u003d value.getClass();\n-    JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n+    final JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n     final boolean wrap;\n     String rootName \u003d _config.getRootName();\n     if (rootName \u003d\u003d null) {\n         wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n         if (wrap) {\n             jgen.writeStartObject();\n             jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n         }\n     } else if (rootName.length() \u003d\u003d 0) {\n         wrap \u003d false;\n     } else {\n         wrap \u003d true;\n         jgen.writeStartObject();\n         jgen.writeFieldName(rootName);\n     }\n     try {\n         ser.serialize(value, jgen, this);\n         if (wrap) {\n             jgen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2e089cdea583170b0c4e0bdf7d9d7865de0d30ee": {
      "type": "Ybodychange",
      "commitMessage": "Fix a potential issue with ignored root name\n",
      "commitDate": "8/14/13, 10:13 PM",
      "commitName": "2e089cdea583170b0c4e0bdf7d9d7865de0d30ee",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/14/13, 10:09 PM",
      "commitNameOld": "b4851e506ed082552331a3a8bad31c0439377c5b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    if (value \u003d\u003d null) {\n        _serializeNull(jgen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    final boolean wrap;\n    String rootName \u003d _config.getRootName();\n    if (rootName \u003d\u003d null) {\n        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n        if (wrap) {\n            jgen.writeStartObject();\n            jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n        }\n    } else if (rootName.length() \u003d\u003d 0) {\n        wrap \u003d false;\n    } else {\n        wrap \u003d true;\n        jgen.writeStartObject();\n        jgen.writeFieldName(rootName);\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "functionStartLine": 85,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "@@ -1,37 +1,37 @@\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n     if (value \u003d\u003d null) {\n         _serializeNull(jgen);\n         return;\n     }\n     Class\u003c?\u003e cls \u003d value.getClass();\n     JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n-    String rootName \u003d _config.getRootName();\n     final boolean wrap;\n+    String rootName \u003d _config.getRootName();\n     if (rootName \u003d\u003d null) {\n         wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n         if (wrap) {\n             jgen.writeStartObject();\n             jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n         }\n     } else if (rootName.length() \u003d\u003d 0) {\n         wrap \u003d false;\n     } else {\n         wrap \u003d true;\n         jgen.writeStartObject();\n         jgen.writeFieldName(rootName);\n     }\n     try {\n         ser.serialize(value, jgen, this);\n         if (wrap) {\n             jgen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b4851e506ed082552331a3a8bad31c0439377c5b": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring default SerializerProvider\u0027s handling of root null values\n",
      "commitDate": "8/14/13, 10:09 PM",
      "commitName": "b4851e506ed082552331a3a8bad31c0439377c5b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/6/13, 8:29 PM",
      "commitNameOld": "cded3a2f9fbeec552629d4d879bd7d50ffb19b97",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 8.07,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    if (value \u003d\u003d null) {\n        _serializeNull(jgen);\n        return;\n    }\n    Class\u003c?\u003e cls \u003d value.getClass();\n    JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n    String rootName \u003d _config.getRootName();\n    final boolean wrap;\n    if (rootName \u003d\u003d null) {\n        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n        if (wrap) {\n            jgen.writeStartObject();\n            jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n        }\n    } else if (rootName.length() \u003d\u003d 0) {\n        wrap \u003d false;\n    } else {\n        wrap \u003d true;\n        jgen.writeStartObject();\n        jgen.writeFieldName(rootName);\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "functionStartLine": 85,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "@@ -1,39 +1,37 @@\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n-    JsonSerializer\u003cObject\u003e ser;\n-    final boolean wrap;\n     if (value \u003d\u003d null) {\n-        ser \u003d getDefaultNullValueSerializer();\n+        _serializeNull(jgen);\n+        return;\n+    }\n+    Class\u003c?\u003e cls \u003d value.getClass();\n+    JsonSerializer\u003cObject\u003e ser \u003d findTypedValueSerializer(cls, true, null);\n+    String rootName \u003d _config.getRootName();\n+    final boolean wrap;\n+    if (rootName \u003d\u003d null) {\n+        wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n+        if (wrap) {\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+        }\n+    } else if (rootName.length() \u003d\u003d 0) {\n         wrap \u003d false;\n     } else {\n-        Class\u003c?\u003e cls \u003d value.getClass();\n-        ser \u003d findTypedValueSerializer(cls, true, null);\n-        String rootName \u003d _config.getRootName();\n-        if (rootName \u003d\u003d null) {\n-            wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n-            if (wrap) {\n-                jgen.writeStartObject();\n-                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n-            }\n-        } else if (rootName.length() \u003d\u003d 0) {\n-            wrap \u003d false;\n-        } else {\n-            wrap \u003d true;\n-            jgen.writeStartObject();\n-            jgen.writeFieldName(rootName);\n-        }\n+        wrap \u003d true;\n+        jgen.writeStartObject();\n+        jgen.writeFieldName(rootName);\n     }\n     try {\n         ser.serialize(value, jgen, this);\n         if (wrap) {\n             jgen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d8b0810f94d35ba055f7397ece47aa96027bc6c5": {
      "type": "Ybodychange",
      "commitMessage": "Add pre-fetching of serializers in ObjectWriter as well\n",
      "commitDate": "6/28/12, 4:08 PM",
      "commitName": "d8b0810f94d35ba055f7397ece47aa96027bc6c5",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/12, 10:02 PM",
      "commitNameOld": "02c0f2e7678cde628348241872a5a67d9d07f1bb",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 129.71,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    JsonSerializer\u003cObject\u003e ser;\n    final boolean wrap;\n    if (value \u003d\u003d null) {\n        ser \u003d getDefaultNullValueSerializer();\n        wrap \u003d false;\n    } else {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        ser \u003d findTypedValueSerializer(cls, true, null);\n        String rootName \u003d _config.getRootName();\n        if (rootName \u003d\u003d null) {\n            wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n            if (wrap) {\n                jgen.writeStartObject();\n                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n            }\n        } else if (rootName.length() \u003d\u003d 0) {\n            wrap \u003d false;\n        } else {\n            wrap \u003d true;\n            jgen.writeStartObject();\n            jgen.writeFieldName(rootName);\n        }\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "functionStartLine": 82,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "@@ -1,39 +1,39 @@\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n     JsonSerializer\u003cObject\u003e ser;\n-    boolean wrap;\n+    final boolean wrap;\n     if (value \u003d\u003d null) {\n         ser \u003d getDefaultNullValueSerializer();\n         wrap \u003d false;\n     } else {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         ser \u003d findTypedValueSerializer(cls, true, null);\n         String rootName \u003d _config.getRootName();\n         if (rootName \u003d\u003d null) {\n             wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n             if (wrap) {\n                 jgen.writeStartObject();\n                 jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n             }\n         } else if (rootName.length() \u003d\u003d 0) {\n             wrap \u003d false;\n         } else {\n             wrap \u003d true;\n             jgen.writeStartObject();\n             jgen.writeFieldName(rootName);\n         }\n     }\n     try {\n         ser.serialize(value, jgen, this);\n         if (wrap) {\n             jgen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664": {
      "type": "Ymovefromfile",
      "commitMessage": "Implement serialization part of [JACKSON-107]\n",
      "commitDate": "2/5/12, 6:10 PM",
      "commitName": "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/4/12, 9:59 PM",
      "commitNameOld": "c3617edebe4687842c70f84a3c16e8ab021fe630",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    JsonSerializer\u003cObject\u003e ser;\n    boolean wrap;\n    if (value \u003d\u003d null) {\n        ser \u003d getDefaultNullValueSerializer();\n        wrap \u003d false;\n    } else {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        ser \u003d findTypedValueSerializer(cls, true, null);\n        String rootName \u003d _config.getRootName();\n        if (rootName \u003d\u003d null) {\n            wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n            if (wrap) {\n                jgen.writeStartObject();\n                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n            }\n        } else if (rootName.length() \u003d\u003d 0) {\n            wrap \u003d false;\n        } else {\n            wrap \u003d true;\n            jgen.writeStartObject();\n            jgen.writeFieldName(rootName);\n        }\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
      "functionStartLine": 58,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
        "oldMethodName": "serializeValue",
        "newMethodName": "serializeValue"
      }
    },
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-777] (renamed SerializationConfig.Feature, DeserializationConfig.Feature); various other restructure\n",
      "commitDate": "2/2/12, 11:30 AM",
      "commitName": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/1/12, 6:54 PM",
      "commitNameOld": "2bc8dec500028981252ed47ecdbf1509bc589726",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    JsonSerializer\u003cObject\u003e ser;\n    boolean wrap;\n    if (value \u003d\u003d null) {\n        ser \u003d getDefaultNullValueSerializer();\n        wrap \u003d false;\n    } else {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        ser \u003d findTypedValueSerializer(cls, true, null);\n        String rootName \u003d _config.getRootName();\n        if (rootName \u003d\u003d null) {\n            wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n            if (wrap) {\n                jgen.writeStartObject();\n                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n            }\n        } else if (rootName.length() \u003d\u003d 0) {\n            wrap \u003d false;\n        } else {\n            wrap \u003d true;\n            jgen.writeStartObject();\n            jgen.writeFieldName(rootName);\n        }\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "functionStartLine": 280,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
      "diff": "@@ -1,39 +1,39 @@\n public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n     JsonSerializer\u003cObject\u003e ser;\n     boolean wrap;\n     if (value \u003d\u003d null) {\n         ser \u003d getDefaultNullValueSerializer();\n         wrap \u003d false;\n     } else {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         ser \u003d findTypedValueSerializer(cls, true, null);\n         String rootName \u003d _config.getRootName();\n         if (rootName \u003d\u003d null) {\n-            wrap \u003d _config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);\n+            wrap \u003d _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n             if (wrap) {\n                 jgen.writeStartObject();\n                 jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n             }\n         } else if (rootName.length() \u003d\u003d 0) {\n             wrap \u003d false;\n         } else {\n             wrap \u003d true;\n             jgen.writeStartObject();\n             jgen.writeFieldName(rootName);\n         }\n     }\n     try {\n         ser.serialize(value, jgen, this);\n         if (wrap) {\n             jgen.writeEndObject();\n         }\n     } catch (IOException ioe) {\n         throw ioe;\n     } catch (Exception e) {\n         String msg \u003d e.getMessage();\n         if (msg \u003d\u003d null) {\n             msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n         }\n         throw new JsonMappingException(msg, e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8e43355c20cfc8054582d21627fd73ff9b779986": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "refactoring\n",
      "commitDate": "2/1/12, 5:58 PM",
      "commitName": "8e43355c20cfc8054582d21627fd73ff9b779986",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "refactoring\n",
          "commitDate": "2/1/12, 5:58 PM",
          "commitName": "8e43355c20cfc8054582d21627fd73ff9b779986",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 5:32 PM",
          "commitNameOld": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    JsonSerializer\u003cObject\u003e ser;\n    boolean wrap;\n    if (value \u003d\u003d null) {\n        ser \u003d getDefaultNullValueSerializer();\n        wrap \u003d false;\n    } else {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        ser \u003d findTypedValueSerializer(cls, true, null);\n        String rootName \u003d _config.getRootName();\n        if (rootName \u003d\u003d null) {\n            wrap \u003d _config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);\n            if (wrap) {\n                jgen.writeStartObject();\n                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n            }\n        } else if (rootName.length() \u003d\u003d 0) {\n            wrap \u003d false;\n        } else {\n            wrap \u003d true;\n            jgen.writeStartObject();\n            jgen.writeFieldName(rootName);\n        }\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 279,
          "functionName": "serializeValue",
          "functionAnnotation": "",
          "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
          "diff": "@@ -1,3 +1,39 @@\n-public final void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n-    _serializeValue(jgen, value);\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n+    JsonSerializer\u003cObject\u003e ser;\n+    boolean wrap;\n+    if (value \u003d\u003d null) {\n+        ser \u003d getDefaultNullValueSerializer();\n+        wrap \u003d false;\n+    } else {\n+        Class\u003c?\u003e cls \u003d value.getClass();\n+        ser \u003d findTypedValueSerializer(cls, true, null);\n+        String rootName \u003d _config.getRootName();\n+        if (rootName \u003d\u003d null) {\n+            wrap \u003d _config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);\n+            if (wrap) {\n+                jgen.writeStartObject();\n+                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+            }\n+        } else if (rootName.length() \u003d\u003d 0) {\n+            wrap \u003d false;\n+        } else {\n+            wrap \u003d true;\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(rootName);\n+        }\n+    }\n+    try {\n+        ser.serialize(value, jgen, this);\n+        if (wrap) {\n+            jgen.writeEndObject();\n+        }\n+    } catch (IOException ioe) {\n+        throw ioe;\n+    } catch (Exception e) {\n+        String msg \u003d e.getMessage();\n+        if (msg \u003d\u003d null) {\n+            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n+        }\n+        throw new JsonMappingException(msg, e);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "refactoring\n",
          "commitDate": "2/1/12, 5:58 PM",
          "commitName": "8e43355c20cfc8054582d21627fd73ff9b779986",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 5:32 PM",
          "commitNameOld": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    JsonSerializer\u003cObject\u003e ser;\n    boolean wrap;\n    if (value \u003d\u003d null) {\n        ser \u003d getDefaultNullValueSerializer();\n        wrap \u003d false;\n    } else {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        ser \u003d findTypedValueSerializer(cls, true, null);\n        String rootName \u003d _config.getRootName();\n        if (rootName \u003d\u003d null) {\n            wrap \u003d _config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);\n            if (wrap) {\n                jgen.writeStartObject();\n                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n            }\n        } else if (rootName.length() \u003d\u003d 0) {\n            wrap \u003d false;\n        } else {\n            wrap \u003d true;\n            jgen.writeStartObject();\n            jgen.writeFieldName(rootName);\n        }\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 279,
          "functionName": "serializeValue",
          "functionAnnotation": "",
          "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
          "diff": "@@ -1,3 +1,39 @@\n-public final void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n-    _serializeValue(jgen, value);\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n+    JsonSerializer\u003cObject\u003e ser;\n+    boolean wrap;\n+    if (value \u003d\u003d null) {\n+        ser \u003d getDefaultNullValueSerializer();\n+        wrap \u003d false;\n+    } else {\n+        Class\u003c?\u003e cls \u003d value.getClass();\n+        ser \u003d findTypedValueSerializer(cls, true, null);\n+        String rootName \u003d _config.getRootName();\n+        if (rootName \u003d\u003d null) {\n+            wrap \u003d _config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);\n+            if (wrap) {\n+                jgen.writeStartObject();\n+                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+            }\n+        } else if (rootName.length() \u003d\u003d 0) {\n+            wrap \u003d false;\n+        } else {\n+            wrap \u003d true;\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(rootName);\n+        }\n+    }\n+    try {\n+        ser.serialize(value, jgen, this);\n+        if (wrap) {\n+            jgen.writeEndObject();\n+        }\n+    } catch (IOException ioe) {\n+        throw ioe;\n+    } catch (Exception e) {\n+        String msg \u003d e.getMessage();\n+        if (msg \u003d\u003d null) {\n+            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n+        }\n+        throw new JsonMappingException(msg, e);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "refactoring\n",
          "commitDate": "2/1/12, 5:58 PM",
          "commitName": "8e43355c20cfc8054582d21627fd73ff9b779986",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/1/12, 5:32 PM",
          "commitNameOld": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    JsonSerializer\u003cObject\u003e ser;\n    boolean wrap;\n    if (value \u003d\u003d null) {\n        ser \u003d getDefaultNullValueSerializer();\n        wrap \u003d false;\n    } else {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        ser \u003d findTypedValueSerializer(cls, true, null);\n        String rootName \u003d _config.getRootName();\n        if (rootName \u003d\u003d null) {\n            wrap \u003d _config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);\n            if (wrap) {\n                jgen.writeStartObject();\n                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n            }\n        } else if (rootName.length() \u003d\u003d 0) {\n            wrap \u003d false;\n        } else {\n            wrap \u003d true;\n            jgen.writeStartObject();\n            jgen.writeFieldName(rootName);\n        }\n    }\n    try {\n        ser.serialize(value, jgen, this);\n        if (wrap) {\n            jgen.writeEndObject();\n        }\n    } catch (IOException ioe) {\n        throw ioe;\n    } catch (Exception e) {\n        String msg \u003d e.getMessage();\n        if (msg \u003d\u003d null) {\n            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n        }\n        throw new JsonMappingException(msg, e);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 279,
          "functionName": "serializeValue",
          "functionAnnotation": "",
          "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n",
          "diff": "@@ -1,3 +1,39 @@\n-public final void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n-    _serializeValue(jgen, value);\n+public void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n+    JsonSerializer\u003cObject\u003e ser;\n+    boolean wrap;\n+    if (value \u003d\u003d null) {\n+        ser \u003d getDefaultNullValueSerializer();\n+        wrap \u003d false;\n+    } else {\n+        Class\u003c?\u003e cls \u003d value.getClass();\n+        ser \u003d findTypedValueSerializer(cls, true, null);\n+        String rootName \u003d _config.getRootName();\n+        if (rootName \u003d\u003d null) {\n+            wrap \u003d _config.isEnabled(SerializationConfig.Feature.WRAP_ROOT_VALUE);\n+            if (wrap) {\n+                jgen.writeStartObject();\n+                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+            }\n+        } else if (rootName.length() \u003d\u003d 0) {\n+            wrap \u003d false;\n+        } else {\n+            wrap \u003d true;\n+            jgen.writeStartObject();\n+            jgen.writeFieldName(rootName);\n+        }\n+    }\n+    try {\n+        ser.serialize(value, jgen, this);\n+        if (wrap) {\n+            jgen.writeEndObject();\n+        }\n+    } catch (IOException ioe) {\n+        throw ioe;\n+    } catch (Exception e) {\n+        String msg \u003d e.getMessage();\n+        if (msg \u003d\u003d null) {\n+            msg \u003d \"[no message for \" + e.getClass().getName() + \"]\";\n+        }\n+        throw new JsonMappingException(msg, e);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n\n@param jsf Underlying factory object used for creating serializers\n   as needed\n",
            "newValue": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n"
          }
        }
      ]
    },
    "6679caeac9198802d271f8659017bb63eebd615f": {
      "type": "Yintroduced",
      "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
      "commitDate": "2/1/12, 5:32 PM",
      "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
      "commitAuthor": "Tatu",
      "diff": "@@ -0,0 +1,3 @@\n+public final void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n+    _serializeValue(jgen, value);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final void serializeValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException {\n    _serializeValue(jgen, value);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "functionStartLine": 282,
      "functionName": "serializeValue",
      "functionAnnotation": "",
      "functionDoc": "The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\nfor serializing given value, using serializers that\nthis provider has access to (via caching and/or creating new serializers\nas need be).\n\n@param jsf Underlying factory object used for creating serializers\n   as needed\n"
    }
  }
}