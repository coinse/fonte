{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SerializerProvider.java",
  "functionName": "findValueSerializer",
  "functionId": "findValueSerializer___valueType-JavaType__property-BeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
  "functionStartLine": 499,
  "functionEndLine": 518,
  "numCommitsSeen": 71,
  "timeTaken": 2666,
  "changeHistory": [
    "7b5694b77e5e8c0ef2b57c4f97c4785462671dd6",
    "59fe29c7b3e4b8a02b36b3d4e4704a317cb4e813",
    "b530c4de4431cec046c91cd944f75e07542e1720",
    "ab511e5576579139951022c2085662904ad85b07",
    "6679caeac9198802d271f8659017bb63eebd615f",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "7b5694b77e5e8c0ef2b57c4f97c4785462671dd6": "Ybodychange",
    "59fe29c7b3e4b8a02b36b3d4e4704a317cb4e813": "Ybodychange",
    "b530c4de4431cec046c91cd944f75e07542e1720": "Ymultichange(Ybodychange,Yannotationchange)",
    "ab511e5576579139951022c2085662904ad85b07": "Ybodychange",
    "6679caeac9198802d271f8659017bb63eebd615f": "Ymultichange(Ymovefromfile,Yannotationchange,Ydocchange)",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b5694b77e5e8c0ef2b57c4f97c4785462671dd6": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring to try to (eventually) solve #357; still problematic wrt contextualization, infinite recursion\n",
      "commitDate": "10/19/14, 9:20 AM",
      "commitName": "7b5694b77e5e8c0ef2b57c4f97c4785462671dd6",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/18/14, 3:16 PM",
      "commitNameOld": "152aabb7399df1d3178418062c7fa580f3533d4e",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 30.75,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return (JsonSerializer\u003cObject\u003e) handleSecondaryContextualization(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "functionStartLine": 469,
      "functionName": "findValueSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "59fe29c7b3e4b8a02b36b3d4e4704a317cb4e813": {
      "type": "Ybodychange",
      "commitMessage": "Yet more work, trying to allow distinguishing of \u0027primary\u0027 and \u0027secondary\u0027 serializers, wrt property-context\n",
      "commitDate": "9/5/13, 10:37 PM",
      "commitName": "59fe29c7b3e4b8a02b36b3d4e4704a317cb4e813",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/5/13, 8:55 PM",
      "commitNameOld": "47ac6bd51e63b0cbfef2e431a94193433d15077a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return (JsonSerializer\u003cObject\u003e) handleSecondaryContextualization(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "functionStartLine": 449,
      "functionName": "findValueSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
      "diff": "@@ -1,18 +1,18 @@\n @SuppressWarnings(\"unchecked\")\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _createAndCacheUntypedSerializer(valueType);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n-    return (JsonSerializer\u003cObject\u003e) handleContextualization(ser, property);\n+    return (JsonSerializer\u003cObject\u003e) handleSecondaryContextualization(ser, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b530c4de4431cec046c91cd944f75e07542e1720": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Groundwork for #225, centralizing contextualization of JsonSerializer instances\n",
      "commitDate": "9/4/13, 10:20 PM",
      "commitName": "b530c4de4431cec046c91cd944f75e07542e1720",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Groundwork for #225, centralizing contextualization of JsonSerializer instances\n",
          "commitDate": "9/4/13, 10:20 PM",
          "commitName": "b530c4de4431cec046c91cd944f75e07542e1720",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/21/13, 6:08 PM",
          "commitNameOld": "0ac36ba6864a16af24e683e55227962a102f50e0",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 14.17,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return (JsonSerializer\u003cObject\u003e) handleContextualization(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 448,
          "functionName": "findValueSerializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,17 +1,18 @@\n+@SuppressWarnings(\"unchecked\")\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _createAndCacheUntypedSerializer(valueType);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n-    return _handleContextual(ser, property);\n+    return (JsonSerializer\u003cObject\u003e) handleContextualization(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Groundwork for #225, centralizing contextualization of JsonSerializer instances\n",
          "commitDate": "9/4/13, 10:20 PM",
          "commitName": "b530c4de4431cec046c91cd944f75e07542e1720",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/21/13, 6:08 PM",
          "commitNameOld": "0ac36ba6864a16af24e683e55227962a102f50e0",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 14.17,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return (JsonSerializer\u003cObject\u003e) handleContextualization(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 448,
          "functionName": "findValueSerializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,17 +1,18 @@\n+@SuppressWarnings(\"unchecked\")\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _createAndCacheUntypedSerializer(valueType);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n-    return _handleContextual(ser, property);\n+    return (JsonSerializer\u003cObject\u003e) handleContextualization(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@SuppressWarnings(\"unchecked\")"
          }
        }
      ]
    },
    "ab511e5576579139951022c2085662904ad85b07": {
      "type": "Ybodychange",
      "commitMessage": "Completed SerializerFactory clean up; factories now should not get or expect BeanProperty, as that is only applicable for contextualSerializers\n",
      "commitDate": "9/30/12, 12:56 PM",
      "commitName": "ab511e5576579139951022c2085662904ad85b07",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/28/12, 10:38 AM",
      "commitNameOld": "91c7b7450f396a0130e74e60f455d4fc1bacb7cd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 33.1,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
      "functionStartLine": 460,
      "functionName": "findValueSerializer",
      "functionAnnotation": "",
      "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
      "diff": "@@ -1,17 +1,17 @@\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n-            ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n+            ser \u003d _createAndCacheUntypedSerializer(valueType);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6679caeac9198802d271f8659017bb63eebd615f": {
      "type": "Ymultichange(Ymovefromfile,Yannotationchange,Ydocchange)",
      "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
      "commitDate": "2/1/12, 5:32 PM",
      "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 504,
          "functionName": "findValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,18 +1,17 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
            "oldMethodName": "findValueSerializer",
            "newMethodName": "findValueSerializer"
          }
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 504,
          "functionName": "findValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,18 +1,17 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 504,
          "functionName": "findValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,18 +1,17 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n     return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "This variant was added in 1.5, to allow for efficient access using full\nstructured types, not just classes. This is necessary for accurate\nhandling of external type information, to handle polymorphic types.\n",
            "newValue": "Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes\nfull generics-aware type instead of raw class.\nThis is necessary for accurate handling of external type information,\nto handle polymorphic types.\n\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n"
          }
        }
      ]
    },
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": {
      "type": "Ybodychange",
      "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
      "commitDate": "1/24/12, 6:51 PM",
      "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/24/12, 5:50 PM",
      "commitNameOld": "d6f54ffc91de340202a5058055c49100964ab6ad",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return _handleContextual(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
      "functionStartLine": 361,
      "functionName": "findValueSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "This variant was added in 1.5, to allow for efficient access using full\nstructured types, not just classes. This is necessary for accurate\nhandling of external type information, to handle polymorphic types.\n",
      "diff": "@@ -1,18 +1,18 @@\n @Override\n public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n     if (ser \u003d\u003d null) {\n         ser \u003d _serializerCache.untypedValueSerializer(valueType);\n         if (ser \u003d\u003d null) {\n             ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n             if (ser \u003d\u003d null) {\n                 ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                 if (CACHE_UNKNOWN_MAPPINGS) {\n                     _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                 }\n                 return ser;\n             }\n         }\n     }\n-    return _handleContextualResolvable(ser, property);\n+    return _handleContextual(ser, property);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,18 @@\n+@Override\n+public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n+    if (ser \u003d\u003d null) {\n+        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n+        if (ser \u003d\u003d null) {\n+            ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n+            if (ser \u003d\u003d null) {\n+                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n+                if (CACHE_UNKNOWN_MAPPINGS) {\n+                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n+                }\n+                return ser;\n+            }\n+        }\n+    }\n+    return _handleContextualResolvable(ser, property);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n        ser \u003d _serializerCache.untypedValueSerializer(valueType);\n        if (ser \u003d\u003d null) {\n            ser \u003d _createAndCacheUntypedSerializer(valueType, property);\n            if (ser \u003d\u003d null) {\n                ser \u003d getUnknownTypeSerializer(valueType.getRawClass());\n                if (CACHE_UNKNOWN_MAPPINGS) {\n                    _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);\n                }\n                return ser;\n            }\n        }\n    }\n    return _handleContextualResolvable(ser, property);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
      "functionStartLine": 371,
      "functionName": "findValueSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "This variant was added in 1.5, to allow for efficient access using full\nstructured types, not just classes. This is necessary for accurate\nhandling of external type information, to handle polymorphic types.\n"
    }
  }
}