{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerBase.java",
  "functionName": "findConvertingSerializer",
  "functionId": "findConvertingSerializer___provider-SerializerProvider__prop-BeanPropertyWriter",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method that can be used to see if specified property is annotated\nto indicate use of a converter for property value (in case of container types,\nit is container type itself, not key or content type).\n\n@since 2.2\n",
  "functionStartLine": 357,
  "functionEndLine": 377,
  "numCommitsSeen": 88,
  "timeTaken": 2558,
  "changeHistory": [
    "119ddc9701c94ac184362166742ceaa7437eec8f",
    "0ccedce4c82588546ac3a4a62d663f17b51cb509",
    "cc737528660b99e71865096e3cd0c4c4a2b3871e",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f"
  ],
  "changeHistoryShort": {
    "119ddc9701c94ac184362166742ceaa7437eec8f": "Ybodychange",
    "0ccedce4c82588546ac3a4a62d663f17b51cb509": "Ybodychange",
    "cc737528660b99e71865096e3cd0c4c4a2b3871e": "Ybodychange",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "119ddc9701c94ac184362166742ceaa7437eec8f": {
      "type": "Ybodychange",
      "commitMessage": "Fix #731\n",
      "commitDate": "4/2/15, 2:32 PM",
      "commitName": "119ddc9701c94ac184362166742ceaa7437eec8f",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "2/23/15, 4:53 PM",
      "commitNameOld": "466f706901d39ae95393c6c7b1d0b544247922f1",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 37.86,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    if (intr !\u003d null) {\n        AnnotatedMember m \u003d prop.getMember();\n        if (m !\u003d null) {\n            Object convDef \u003d intr.findSerializationConverter(m);\n            if (convDef !\u003d null) {\n                Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n                JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n                JsonSerializer\u003c?\u003e ser \u003d delegateType.isJavaLangObject() ? null : provider.findValueSerializer(delegateType, prop);\n                return new StdDelegatingSerializer(conv, delegateType, ser);\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 357,
      "functionName": "findConvertingSerializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property is annotated\nto indicate use of a converter for property value (in case of container types,\nit is container type itself, not key or content type).\n\n@since 2.2\n",
      "diff": "@@ -1,16 +1,16 @@\n protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     if (intr !\u003d null) {\n         AnnotatedMember m \u003d prop.getMember();\n         if (m !\u003d null) {\n             Object convDef \u003d intr.findSerializationConverter(m);\n             if (convDef !\u003d null) {\n                 Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n                 JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n-                JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n+                JsonSerializer\u003c?\u003e ser \u003d delegateType.isJavaLangObject() ? null : provider.findValueSerializer(delegateType, prop);\n                 return new StdDelegatingSerializer(conv, delegateType, ser);\n             }\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0ccedce4c82588546ac3a4a62d663f17b51cb509": {
      "type": "Ybodychange",
      "commitMessage": "First part of #638, adding support for including attribute-backed virtual properties\n",
      "commitDate": "12/3/14, 2:38 PM",
      "commitName": "0ccedce4c82588546ac3a4a62d663f17b51cb509",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "10/12/14, 3:24 PM",
      "commitNameOld": "2e9defec2dc83e9b1e436f5f9223d685c776da32",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 52.01,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    if (intr !\u003d null) {\n        AnnotatedMember m \u003d prop.getMember();\n        if (m !\u003d null) {\n            Object convDef \u003d intr.findSerializationConverter(m);\n            if (convDef !\u003d null) {\n                Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n                JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n                JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n                return new StdDelegatingSerializer(conv, delegateType, ser);\n            }\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 355,
      "functionName": "findConvertingSerializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property is annotated\nto indicate use of a converter for property value (in case of container types,\nit is container type itself, not key or content type).\n\n@since 2.2\n",
      "diff": "@@ -1,13 +1,16 @@\n protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     if (intr !\u003d null) {\n-        Object convDef \u003d intr.findSerializationConverter(prop.getMember());\n-        if (convDef !\u003d null) {\n-            Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n-            JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n-            JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n-            return new StdDelegatingSerializer(conv, delegateType, ser);\n+        AnnotatedMember m \u003d prop.getMember();\n+        if (m !\u003d null) {\n+            Object convDef \u003d intr.findSerializationConverter(m);\n+            if (convDef !\u003d null) {\n+                Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n+                JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n+                JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n+                return new StdDelegatingSerializer(conv, delegateType, ser);\n+            }\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc737528660b99e71865096e3cd0c4c4a2b3871e": {
      "type": "Ybodychange",
      "commitMessage": "Improvements to Converter, added StdConverter base class\n",
      "commitDate": "3/3/13, 1:11 PM",
      "commitName": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 6:04 PM",
      "commitNameOld": "9fb0c8df13778d37a0b6b2e1de2b513950c21224",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    if (intr !\u003d null) {\n        Object convDef \u003d intr.findSerializationConverter(prop.getMember());\n        if (convDef !\u003d null) {\n            Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n            JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n            JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n            return new StdDelegatingSerializer(conv, delegateType, ser);\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 337,
      "functionName": "findConvertingSerializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property is annotated\nto indicate use of a converter for property value (in case of container types,\nit is container type itself, not key or content type).\n\n@since 2.2\n",
      "diff": "@@ -1,19 +1,13 @@\n protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     if (intr !\u003d null) {\n         Object convDef \u003d intr.findSerializationConverter(prop.getMember());\n         if (convDef !\u003d null) {\n             Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n-            TypeFactory tf \u003d provider.getTypeFactory();\n-            JavaType converterType \u003d tf.constructType(conv.getClass());\n-            JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n-            if (params \u003d\u003d null || params.length !\u003d 2) {\n-                throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n-            }\n-            JavaType delegateType \u003d params[1];\n+            JavaType delegateType \u003d conv.getOutputType(provider.getTypeFactory());\n             JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n             return new StdDelegatingSerializer(conv, delegateType, ser);\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": {
      "type": "Yintroduced",
      "commitMessage": "Working on #124, serializer converters\n",
      "commitDate": "2/18/13, 9:25 PM",
      "commitName": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,19 @@\n+protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n+    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+    if (intr !\u003d null) {\n+        Object convDef \u003d intr.findSerializationConverter(prop.getMember());\n+        if (convDef !\u003d null) {\n+            Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n+            TypeFactory tf \u003d provider.getTypeFactory();\n+            JavaType converterType \u003d tf.constructType(conv.getClass());\n+            JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n+            if (params \u003d\u003d null || params.length !\u003d 2) {\n+                throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n+            }\n+            JavaType delegateType \u003d params[1];\n+            JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n+            return new StdDelegatingSerializer(conv, delegateType, ser);\n+        }\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected JsonSerializer\u003cObject\u003e findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    if (intr !\u003d null) {\n        Object convDef \u003d intr.findSerializationConverter(prop.getMember());\n        if (convDef !\u003d null) {\n            Converter\u003cObject, Object\u003e conv \u003d provider.converterInstance(prop.getMember(), convDef);\n            TypeFactory tf \u003d provider.getTypeFactory();\n            JavaType converterType \u003d tf.constructType(conv.getClass());\n            JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n            if (params \u003d\u003d null || params.length !\u003d 2) {\n                throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n            }\n            JavaType delegateType \u003d params[1];\n            JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(delegateType, prop);\n            return new StdDelegatingSerializer(conv, delegateType, ser);\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 338,
      "functionName": "findConvertingSerializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property is annotated\nto indicate use of a converter for property value (in case of container types,\nit is container type itself, not key or content type).\n\n@since 2.2\n"
    }
  }
}