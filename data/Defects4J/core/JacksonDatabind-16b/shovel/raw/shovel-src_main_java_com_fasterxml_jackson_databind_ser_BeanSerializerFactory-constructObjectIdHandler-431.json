{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerFactory.java",
  "functionName": "constructObjectIdHandler",
  "functionId": "constructObjectIdHandler___prov-SerializerProvider__beanDesc-BeanDescription__props-List__BeanPropertyWriter__",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 431,
  "functionEndLine": 478,
  "numCommitsSeen": 112,
  "timeTaken": 3165,
  "changeHistory": [
    "e05e352f53245160fe761b88665f11f67cef9d43",
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
    "6cada0a47ed675fffe15697968dfef68864b57e7",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "557bcd3d55fa779e40251506d159468bfe96fe04",
    "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
    "d453182b63249c2c597a54229a4242e1ce1921d0"
  ],
  "changeHistoryShort": {
    "e05e352f53245160fe761b88665f11f67cef9d43": "Ybodychange",
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2": "Ybodychange",
    "6cada0a47ed675fffe15697968dfef68864b57e7": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Ybodychange",
    "557bcd3d55fa779e40251506d159468bfe96fe04": "Ybodychange",
    "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4": "Ybodychange",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": "Ymultichange(Yparameterchange,Ybodychange)",
    "d453182b63249c2c597a54229a4242e1ce1921d0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e05e352f53245160fe761b88665f11f67cef9d43": {
      "type": "Ybodychange",
      "commitMessage": "Start making changes to support full PropertyName passing, not just String name\n",
      "commitDate": "7/25/13, 11:05 PM",
      "commitName": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/13/13, 3:56 PM",
      "commitNameOld": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 134.3,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n        BeanPropertyWriter idProp \u003d null;\n        for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n            if (i \u003d\u003d len) {\n                throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n            }\n            BeanPropertyWriter prop \u003d props.get(i);\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                if (i \u003e 0) {\n                    props.remove(i);\n                    props.add(0, idProp);\n                }\n                break;\n            }\n        }\n        JavaType idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n        return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n    }\n    JavaType type \u003d prov.constructType(implClass);\n    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 447,
      "functionName": "constructObjectIdHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n     ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n     if (objectIdInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        String propName \u003d objectIdInfo.getPropertyName();\n+        String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n         BeanPropertyWriter idProp \u003d null;\n         for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n             if (i \u003d\u003d len) {\n                 throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n             }\n             BeanPropertyWriter prop \u003d props.get(i);\n             if (propName.equals(prop.getName())) {\n                 idProp \u003d prop;\n                 if (i \u003e 0) {\n                     props.remove(i);\n                     props.add(0, idProp);\n                 }\n                 break;\n             }\n         }\n         JavaType idType \u003d idProp.getType();\n         gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-        return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n+        return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n     }\n     JavaType type \u003d prov.constructType(implClass);\n     JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n     gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2": {
      "type": "Ybodychange",
      "commitMessage": "Improved handling of \"always-as-id\" references; might now actually be useful\n",
      "commitDate": "8/24/12, 1:33 PM",
      "commitName": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/17/12, 2:59 PM",
      "commitNameOld": "bc6485776be5c45a52e4b07459caf3b9a78c80d3",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.94,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        BeanPropertyWriter idProp \u003d null;\n        for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n            if (i \u003d\u003d len) {\n                throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n            }\n            BeanPropertyWriter prop \u003d props.get(i);\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                if (i \u003e 0) {\n                    props.remove(i);\n                    props.add(0, idProp);\n                }\n                break;\n            }\n        }\n        JavaType idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n        return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n    }\n    JavaType type \u003d prov.constructType(implClass);\n    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 393,
      "functionName": "constructObjectIdHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n     ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n     if (objectIdInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         String propName \u003d objectIdInfo.getPropertyName();\n         BeanPropertyWriter idProp \u003d null;\n         for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n             if (i \u003d\u003d len) {\n                 throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n             }\n             BeanPropertyWriter prop \u003d props.get(i);\n             if (propName.equals(prop.getName())) {\n                 idProp \u003d prop;\n                 if (i \u003e 0) {\n                     props.remove(i);\n                     props.add(0, idProp);\n                 }\n                 break;\n             }\n         }\n         JavaType idType \u003d idProp.getType();\n         gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-        return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n+        return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n     }\n     JavaType type \u003d prov.constructType(implClass);\n     JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n     gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n-    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getFirstAsId());\n+    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6cada0a47ed675fffe15697968dfef68864b57e7": {
      "type": "Ybodychange",
      "commitMessage": "Add unit tests, support for jackson-annotations issue #4: add `@JsonIdentityInfo.firstAsId` to force serialization of the very first reference as id (as well as following ones)\n",
      "commitDate": "7/31/12, 10:24 PM",
      "commitName": "6cada0a47ed675fffe15697968dfef68864b57e7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/5/12, 9:37 PM",
      "commitNameOld": "8774a3fbf5ce4c7f51d513c30e9cebc949b311a4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 26.03,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        BeanPropertyWriter idProp \u003d null;\n        for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n            if (i \u003d\u003d len) {\n                throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n            }\n            BeanPropertyWriter prop \u003d props.get(i);\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                if (i \u003e 0) {\n                    props.remove(i);\n                    props.add(0, idProp);\n                }\n                break;\n            }\n        }\n        JavaType idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n        return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n    }\n    JavaType type \u003d prov.constructType(implClass);\n    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getFirstAsId());\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 384,
      "functionName": "constructObjectIdHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,33 @@\n protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n     ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n     if (objectIdInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         String propName \u003d objectIdInfo.getPropertyName();\n         BeanPropertyWriter idProp \u003d null;\n         for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n             if (i \u003d\u003d len) {\n                 throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n             }\n             BeanPropertyWriter prop \u003d props.get(i);\n             if (propName.equals(prop.getName())) {\n                 idProp \u003d prop;\n                 if (i \u003e 0) {\n                     props.remove(i);\n                     props.add(0, idProp);\n                 }\n                 break;\n             }\n         }\n         JavaType idType \u003d idProp.getType();\n         gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-        return ObjectIdWriter.construct(idType, null, gen);\n+        return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n     }\n     JavaType type \u003d prov.constructType(implClass);\n     JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n     gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n-    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n+    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getFirstAsId());\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Ybodychange",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/10/12, 9:44 AM",
      "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.54,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        BeanPropertyWriter idProp \u003d null;\n        for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n            if (i \u003d\u003d len) {\n                throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n            }\n            BeanPropertyWriter prop \u003d props.get(i);\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                if (i \u003e 0) {\n                    props.remove(i);\n                    props.add(0, idProp);\n                }\n                break;\n            }\n        }\n        JavaType idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n        return ObjectIdWriter.construct(idType, null, gen);\n    }\n    JavaType type \u003d prov.constructType(implClass);\n    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 360,
      "functionName": "constructObjectIdHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,33 @@\n protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n     ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n     if (objectIdInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n-    JavaType idType;\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         String propName \u003d objectIdInfo.getPropertyName();\n         BeanPropertyWriter idProp \u003d null;\n         for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n             if (i \u003d\u003d len) {\n                 throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n             }\n             BeanPropertyWriter prop \u003d props.get(i);\n             if (propName.equals(prop.getName())) {\n                 idProp \u003d prop;\n                 if (i \u003e 0) {\n                     props.remove(i);\n                     props.add(0, idProp);\n                 }\n                 break;\n             }\n         }\n-        idType \u003d idProp.getType();\n+        JavaType idType \u003d idProp.getType();\n         gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n         return ObjectIdWriter.construct(idType, null, gen);\n     }\n     JavaType type \u003d prov.constructType(implClass);\n-    idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n     gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n     return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "557bcd3d55fa779e40251506d159468bfe96fe04": {
      "type": "Ybodychange",
      "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
      "commitDate": "2/10/12, 9:44 AM",
      "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/9/12, 10:36 PM",
      "commitNameOld": "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n    if (objectIdInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n    JavaType idType;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d objectIdInfo.getPropertyName();\n        BeanPropertyWriter idProp \u003d null;\n        for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n            if (i \u003d\u003d len) {\n                throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n            }\n            BeanPropertyWriter prop \u003d props.get(i);\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                if (i \u003e 0) {\n                    props.remove(i);\n                    props.add(0, idProp);\n                }\n                break;\n            }\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n        return ObjectIdWriter.construct(idType, null, gen);\n    }\n    JavaType type \u003d prov.constructType(implClass);\n    idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 360,
      "functionName": "constructObjectIdHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n-    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n-    if (oidInfo \u003d\u003d null) {\n+    ObjectIdInfo objectIdInfo \u003d beanDesc.getObjectIdInfo();\n+    if (objectIdInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n-    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n+    Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n     JavaType idType;\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        String propName \u003d oidInfo.getPropertyName();\n+        String propName \u003d objectIdInfo.getPropertyName();\n         BeanPropertyWriter idProp \u003d null;\n         for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n             if (i \u003d\u003d len) {\n                 throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n             }\n             BeanPropertyWriter prop \u003d props.get(i);\n             if (propName.equals(prop.getName())) {\n                 idProp \u003d prop;\n                 if (i \u003e 0) {\n                     props.remove(i);\n                     props.add(0, idProp);\n                 }\n                 break;\n             }\n         }\n         idType \u003d idProp.getType();\n-        gen \u003d new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n+        gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n         return ObjectIdWriter.construct(idType, null, gen);\n     }\n     JavaType type \u003d prov.constructType(implClass);\n     idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n-    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n-    return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n+    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n+    return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4": {
      "type": "Ybodychange",
      "commitMessage": "Added serialization support for custom ids (property-based)\n",
      "commitDate": "2/9/12, 10:36 PM",
      "commitName": "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/9/12, 9:58 PM",
      "commitNameOld": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n    JavaType idType;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d oidInfo.getPropertyName();\n        BeanPropertyWriter idProp \u003d null;\n        for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n            if (i \u003d\u003d len) {\n                throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n            }\n            BeanPropertyWriter prop \u003d props.get(i);\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                if (i \u003e 0) {\n                    props.remove(i);\n                    props.add(0, idProp);\n                }\n                break;\n            }\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n        return ObjectIdWriter.construct(idType, null, gen);\n    }\n    JavaType type \u003d prov.constructType(implClass);\n    idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n    return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 360,
      "functionName": "constructObjectIdHandler",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,34 @@\n protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n     ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n     if (oidInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n     JavaType idType;\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n         String propName \u003d oidInfo.getPropertyName();\n         BeanPropertyWriter idProp \u003d null;\n-        for (BeanPropertyWriter prop : props) {\n+        for (int i \u003d 0, len \u003d props.size(); ; ++i) {\n+            if (i \u003d\u003d len) {\n+                throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+            }\n+            BeanPropertyWriter prop \u003d props.get(i);\n             if (propName.equals(prop.getName())) {\n                 idProp \u003d prop;\n+                if (i \u003e 0) {\n+                    props.remove(i);\n+                    props.add(0, idProp);\n+                }\n                 break;\n             }\n         }\n-        if (idProp \u003d\u003d null) {\n-            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n-        }\n         idType \u003d idProp.getType();\n         gen \u003d new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n-    } else {\n-        JavaType type \u003d prov.constructType(implClass);\n-        idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n-        gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n+        return ObjectIdWriter.construct(idType, null, gen);\n     }\n+    JavaType type \u003d prov.constructType(implClass);\n+    idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+    gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n     return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Starting work on supporting custom (property-based) object ids.\n",
      "commitDate": "2/9/12, 9:58 PM",
      "commitName": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Starting work on supporting custom (property-based) object ids.\n",
          "commitDate": "2/9/12, 9:58 PM",
          "commitName": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/7/12, 8:58 PM",
          "commitNameOld": "a7ba5c4399c0ffc8e171f494543d44bc3f7261e4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.04,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n    JavaType idType;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d oidInfo.getPropertyName();\n        BeanPropertyWriter idProp \u003d null;\n        for (BeanPropertyWriter prop : props) {\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                break;\n            }\n        }\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n    } else {\n        JavaType type \u003d prov.constructType(implClass);\n        idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n    }\n    return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 360,
          "functionName": "constructObjectIdHandler",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,29 @@\n-protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n     ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n     if (oidInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n-    JavaType type \u003d prov.constructType(implClass);\n-    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+    JavaType idType;\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        gen \u003d null;\n-        if (true)\n-            throw new IllegalStateException(\"Not yet implemented!\");\n+        String propName \u003d oidInfo.getPropertyName();\n+        BeanPropertyWriter idProp \u003d null;\n+        for (BeanPropertyWriter prop : props) {\n+            if (propName.equals(prop.getName())) {\n+                idProp \u003d prop;\n+                break;\n+            }\n+        }\n+        if (idProp \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+        }\n+        idType \u003d idProp.getType();\n+        gen \u003d new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n     } else {\n+        JavaType type \u003d prov.constructType(implClass);\n+        idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n         gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n     }\n-    return ObjectIdWriter.construct(idType, oidInfo.getProperty(), gen);\n+    return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prov-SerializerProvider, beanDesc-BeanDescription]",
            "newValue": "[prov-SerializerProvider, beanDesc-BeanDescription, props-List\u003cBeanPropertyWriter\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Starting work on supporting custom (property-based) object ids.\n",
          "commitDate": "2/9/12, 9:58 PM",
          "commitName": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/7/12, 8:58 PM",
          "commitNameOld": "a7ba5c4399c0ffc8e171f494543d44bc3f7261e4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.04,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n    JavaType idType;\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        String propName \u003d oidInfo.getPropertyName();\n        BeanPropertyWriter idProp \u003d null;\n        for (BeanPropertyWriter prop : props) {\n            if (propName.equals(prop.getName())) {\n                idProp \u003d prop;\n                break;\n            }\n        }\n        if (idProp \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n        }\n        idType \u003d idProp.getType();\n        gen \u003d new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n    } else {\n        JavaType type \u003d prov.constructType(implClass);\n        idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n        gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n    }\n    return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 360,
          "functionName": "constructObjectIdHandler",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,18 +1,29 @@\n-protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n     ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n     if (oidInfo \u003d\u003d null) {\n         return null;\n     }\n     ObjectIdGenerator\u003c?\u003e gen;\n     Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n-    JavaType type \u003d prov.constructType(implClass);\n-    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+    JavaType idType;\n     if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-        gen \u003d null;\n-        if (true)\n-            throw new IllegalStateException(\"Not yet implemented!\");\n+        String propName \u003d oidInfo.getPropertyName();\n+        BeanPropertyWriter idProp \u003d null;\n+        for (BeanPropertyWriter prop : props) {\n+            if (propName.equals(prop.getName())) {\n+                idProp \u003d prop;\n+                break;\n+            }\n+        }\n+        if (idProp \u003d\u003d null) {\n+            throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+        }\n+        idType \u003d idProp.getType();\n+        gen \u003d new PropertyBasedObjectIdGenerator(oidInfo, idProp);\n     } else {\n+        JavaType type \u003d prov.constructType(implClass);\n+        idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n         gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n     }\n-    return ObjectIdWriter.construct(idType, oidInfo.getProperty(), gen);\n+    return ObjectIdWriter.construct(idType, oidInfo.getPropertyName(), gen);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d453182b63249c2c597a54229a4242e1ce1921d0": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring Object Id handling, after realizing first attempt is too limiting\n",
      "commitDate": "2/6/12, 10:44 PM",
      "commitName": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,18 @@\n+protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n+    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n+    if (oidInfo \u003d\u003d null) {\n+        return null;\n+    }\n+    ObjectIdGenerator\u003c?\u003e gen;\n+    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n+    JavaType type \u003d prov.constructType(implClass);\n+    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n+        gen \u003d null;\n+        if (true)\n+            throw new IllegalStateException(\"Not yet implemented!\");\n+    } else {\n+        gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n+    }\n+    return ObjectIdWriter.construct(idType, oidInfo.getProperty(), gen);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    ObjectIdInfo oidInfo \u003d beanDesc.getObjectIdInfo();\n    if (oidInfo \u003d\u003d null) {\n        return null;\n    }\n    ObjectIdGenerator\u003c?\u003e gen;\n    Class\u003c?\u003e implClass \u003d oidInfo.getGenerator();\n    JavaType type \u003d prov.constructType(implClass);\n    JavaType idType \u003d prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n    if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        gen \u003d null;\n        if (true)\n            throw new IllegalStateException(\"Not yet implemented!\");\n    } else {\n        gen \u003d prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), implClass);\n    }\n    return ObjectIdWriter.construct(idType, oidInfo.getProperty(), gen);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 356,
      "functionName": "constructObjectIdHandler",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}