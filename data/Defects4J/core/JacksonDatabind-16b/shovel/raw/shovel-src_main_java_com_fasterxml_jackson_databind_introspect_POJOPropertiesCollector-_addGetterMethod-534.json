{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "POJOPropertiesCollector.java",
  "functionName": "_addGetterMethod",
  "functionId": "_addGetterMethod___m-AnnotatedMethod__ai-AnnotationIntrospector",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 534,
  "functionEndLine": 598,
  "numCommitsSeen": 53,
  "timeTaken": 3807,
  "changeHistory": [
    "42ef5bb69ba5945e6d588e0db8d6834b4febe771",
    "8a5ec37974ee58aabd68ed13fa15e052598d2136",
    "328cc7e3cb4f3f423b4ba229c3fa358635352ba9",
    "833b26b2d36c1edfe12510d1d8686987c54b1135",
    "054467f2dce77e1a1f1aa074772d6860fa52b5ca",
    "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333",
    "833680a543eeae627a0e93684355e881c789c80a",
    "257da8e4ce33fe77a05f9867ce3e187e522a1b8e",
    "2fd4ffd9963545ce735a58957a84afb90809561e"
  ],
  "changeHistoryShort": {
    "42ef5bb69ba5945e6d588e0db8d6834b4febe771": "Ybodychange",
    "8a5ec37974ee58aabd68ed13fa15e052598d2136": "Ybodychange",
    "328cc7e3cb4f3f423b4ba229c3fa358635352ba9": "Ybodychange",
    "833b26b2d36c1edfe12510d1d8686987c54b1135": "Ybodychange",
    "054467f2dce77e1a1f1aa074772d6860fa52b5ca": "Ybodychange",
    "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333": "Ybodychange",
    "833680a543eeae627a0e93684355e881c789c80a": "Yformatchange",
    "257da8e4ce33fe77a05f9867ce3e187e522a1b8e": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42ef5bb69ba5945e6d588e0db8d6834b4febe771": {
      "type": "Ybodychange",
      "commitMessage": "Fixed #653\n",
      "commitDate": "12/18/14, 8:45 PM",
      "commitName": "42ef5bb69ba5945e6d588e0db8d6834b4febe771",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/23/14, 10:11 PM",
      "commitNameOld": "09ad6820e892387852c46958e03eaa1d3f3b10f6",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 85.98,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (!m.hasReturnType()) {\n        return;\n    }\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    boolean nameExplicit \u003d (pn !\u003d null);\n    if (!nameExplicit) {\n        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName(), _stdBeanNaming);\n        }\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName(), _stdBeanNaming);\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForGetter(m, _stdBeanNaming);\n        }\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (pn.isEmpty()) {\n            pn \u003d _propNameFromSimple(implName);\n            nameExplicit \u003d false;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 534,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,55 +1,55 @@\n protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n     if (!m.hasReturnType()) {\n         return;\n     }\n     if (ai !\u003d null) {\n         if (ai.hasAnyGetterAnnotation(m)) {\n             if (_anyGetters \u003d\u003d null) {\n                 _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n             }\n             _anyGetters.add(m);\n             return;\n         }\n         if (ai.hasAsValueAnnotation(m)) {\n             if (_jsonValueGetters \u003d\u003d null) {\n                 _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n             }\n             _jsonValueGetters.add(m);\n             return;\n         }\n     }\n     String implName;\n     boolean visible;\n     PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n     boolean nameExplicit \u003d (pn !\u003d null);\n     if (!nameExplicit) {\n         implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n         if (implName \u003d\u003d null) {\n-            implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n+            implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName(), _stdBeanNaming);\n         }\n         if (implName \u003d\u003d null) {\n-            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n+            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName(), _stdBeanNaming);\n             if (implName \u003d\u003d null) {\n                 return;\n             }\n             visible \u003d _visibilityChecker.isIsGetterVisible(m);\n         } else {\n             visible \u003d _visibilityChecker.isGetterVisible(m);\n         }\n     } else {\n         implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n         if (implName \u003d\u003d null) {\n-            implName \u003d BeanUtil.okNameForGetter(m);\n+            implName \u003d BeanUtil.okNameForGetter(m, _stdBeanNaming);\n         }\n         if (implName \u003d\u003d null) {\n             implName \u003d m.getName();\n         }\n         if (pn.isEmpty()) {\n             pn \u003d _propNameFromSimple(implName);\n             nameExplicit \u003d false;\n         }\n         visible \u003d true;\n     }\n     boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n     _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8a5ec37974ee58aabd68ed13fa15e052598d2136": {
      "type": "Ybodychange",
      "commitMessage": "Minor optimization to avoid including non-value-returning methods as possible getters\n",
      "commitDate": "5/31/14, 8:28 PM",
      "commitName": "8a5ec37974ee58aabd68ed13fa15e052598d2136",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/21/14, 2:41 PM",
      "commitNameOld": "70034625ff57a103d828c4c967972caca1ae49ee",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 10.24,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (!m.hasReturnType()) {\n        return;\n    }\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    boolean nameExplicit \u003d (pn !\u003d null);\n    if (!nameExplicit) {\n        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        }\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForGetter(m);\n        }\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (pn.isEmpty()) {\n            pn \u003d _propNameFromSimple(implName);\n            nameExplicit \u003d false;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 524,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,55 @@\n protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n+    if (!m.hasReturnType()) {\n+        return;\n+    }\n     if (ai !\u003d null) {\n         if (ai.hasAnyGetterAnnotation(m)) {\n             if (_anyGetters \u003d\u003d null) {\n                 _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n             }\n             _anyGetters.add(m);\n             return;\n         }\n         if (ai.hasAsValueAnnotation(m)) {\n             if (_jsonValueGetters \u003d\u003d null) {\n                 _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n             }\n             _jsonValueGetters.add(m);\n             return;\n         }\n     }\n     String implName;\n     boolean visible;\n     PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n     boolean nameExplicit \u003d (pn !\u003d null);\n     if (!nameExplicit) {\n         implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n         }\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n             if (implName \u003d\u003d null) {\n                 return;\n             }\n             visible \u003d _visibilityChecker.isIsGetterVisible(m);\n         } else {\n             visible \u003d _visibilityChecker.isGetterVisible(m);\n         }\n     } else {\n         implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForGetter(m);\n         }\n         if (implName \u003d\u003d null) {\n             implName \u003d m.getName();\n         }\n         if (pn.isEmpty()) {\n             pn \u003d _propNameFromSimple(implName);\n             nameExplicit \u003d false;\n         }\n         visible \u003d true;\n     }\n     boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n     _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "328cc7e3cb4f3f423b4ba229c3fa358635352ba9": {
      "type": "Ybodychange",
      "commitMessage": "Connected `AnnotationIntrospector.findImplicitPropertyName()` from `POJOPropertiesCollector`; now some of `TestScalaLikeImplicitProperties` tests pass\n",
      "commitDate": "5/7/14, 11:25 PM",
      "commitName": "328cc7e3cb4f3f423b4ba229c3fa358635352ba9",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/7/14, 10:51 PM",
      "commitNameOld": "4e387c241b7c92f2e4d862f6217189e55472125e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    boolean nameExplicit \u003d (pn !\u003d null);\n    if (!nameExplicit) {\n        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        }\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForGetter(m);\n        }\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (pn.isEmpty()) {\n            pn \u003d _propNameFromSimple(implName);\n            nameExplicit \u003d false;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 520,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,46 +1,52 @@\n protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n     if (ai !\u003d null) {\n         if (ai.hasAnyGetterAnnotation(m)) {\n             if (_anyGetters \u003d\u003d null) {\n                 _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n             }\n             _anyGetters.add(m);\n             return;\n         }\n         if (ai.hasAsValueAnnotation(m)) {\n             if (_jsonValueGetters \u003d\u003d null) {\n                 _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n             }\n             _jsonValueGetters.add(m);\n             return;\n         }\n     }\n     String implName;\n     boolean visible;\n     PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n     boolean nameExplicit \u003d (pn !\u003d null);\n     if (!nameExplicit) {\n-        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n+        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n+        if (implName \u003d\u003d null) {\n+            implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n+        }\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n             if (implName \u003d\u003d null) {\n                 return;\n             }\n             visible \u003d _visibilityChecker.isIsGetterVisible(m);\n         } else {\n             visible \u003d _visibilityChecker.isGetterVisible(m);\n         }\n     } else {\n-        implName \u003d BeanUtil.okNameForGetter(m);\n+        implName \u003d (ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n+        if (implName \u003d\u003d null) {\n+            implName \u003d BeanUtil.okNameForGetter(m);\n+        }\n         if (implName \u003d\u003d null) {\n             implName \u003d m.getName();\n         }\n         if (pn.isEmpty()) {\n             pn \u003d _propNameFromSimple(implName);\n             nameExplicit \u003d false;\n         }\n         visible \u003d true;\n     }\n     boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n     _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "833b26b2d36c1edfe12510d1d8686987c54b1135": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "3/30/14, 8:53 PM",
      "commitName": "833b26b2d36c1edfe12510d1d8686987c54b1135",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/30/14, 8:52 PM",
      "commitNameOld": "9664b5f4694f03d83b775c732bd868e90049791e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    boolean nameExplicit \u003d (pn !\u003d null);\n    if (!nameExplicit) {\n        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d BeanUtil.okNameForGetter(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (pn.isEmpty()) {\n            pn \u003d _propNameFromSimple(implName);\n            nameExplicit \u003d false;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 501,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,46 @@\n protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n     if (ai !\u003d null) {\n         if (ai.hasAnyGetterAnnotation(m)) {\n             if (_anyGetters \u003d\u003d null) {\n                 _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n             }\n             _anyGetters.add(m);\n             return;\n         }\n         if (ai.hasAsValueAnnotation(m)) {\n             if (_jsonValueGetters \u003d\u003d null) {\n                 _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n             }\n             _jsonValueGetters.add(m);\n             return;\n         }\n     }\n     String implName;\n     boolean visible;\n     PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n-    String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n-    boolean nameExplicit \u003d (explName !\u003d null);\n+    boolean nameExplicit \u003d (pn !\u003d null);\n     if (!nameExplicit) {\n         implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n             if (implName \u003d\u003d null) {\n                 return;\n             }\n             visible \u003d _visibilityChecker.isIsGetterVisible(m);\n         } else {\n             visible \u003d _visibilityChecker.isGetterVisible(m);\n         }\n     } else {\n         implName \u003d BeanUtil.okNameForGetter(m);\n         if (implName \u003d\u003d null) {\n             implName \u003d m.getName();\n         }\n-        if (explName.length() \u003d\u003d 0) {\n+        if (pn.isEmpty()) {\n+            pn \u003d _propNameFromSimple(implName);\n             nameExplicit \u003d false;\n-            explName \u003d implName;\n         }\n         visible \u003d true;\n     }\n     boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n-    _property(implName).addGetter(m, explName, nameExplicit, visible, ignore);\n+    _property(implName).addGetter(m, pn, nameExplicit, visible, ignore);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "054467f2dce77e1a1f1aa074772d6860fa52b5ca": {
      "type": "Ybodychange",
      "commitMessage": "Fix #428\n",
      "commitDate": "3/28/14, 4:09 PM",
      "commitName": "054467f2dce77e1a1f1aa074772d6860fa52b5ca",
      "commitAuthor": "Tatu",
      "commitDateOld": "3/28/14, 3:51 PM",
      "commitNameOld": "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n    boolean nameExplicit \u003d (explName !\u003d null);\n    if (!nameExplicit) {\n        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d BeanUtil.okNameForGetter(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (explName.length() \u003d\u003d 0) {\n            nameExplicit \u003d false;\n            explName \u003d implName;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, explName, nameExplicit, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 500,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,47 @@\n protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n     if (ai !\u003d null) {\n         if (ai.hasAnyGetterAnnotation(m)) {\n             if (_anyGetters \u003d\u003d null) {\n                 _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n             }\n             _anyGetters.add(m);\n             return;\n         }\n         if (ai.hasAsValueAnnotation(m)) {\n             if (_jsonValueGetters \u003d\u003d null) {\n                 _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n             }\n             _jsonValueGetters.add(m);\n             return;\n         }\n     }\n     String implName;\n     boolean visible;\n     PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n     String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n-    if (explName \u003d\u003d null) {\n+    boolean nameExplicit \u003d (explName !\u003d null);\n+    if (!nameExplicit) {\n         implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n             if (implName \u003d\u003d null) {\n                 return;\n             }\n             visible \u003d _visibilityChecker.isIsGetterVisible(m);\n         } else {\n             visible \u003d _visibilityChecker.isGetterVisible(m);\n         }\n     } else {\n         implName \u003d BeanUtil.okNameForGetter(m);\n         if (implName \u003d\u003d null) {\n             implName \u003d m.getName();\n         }\n         if (explName.length() \u003d\u003d 0) {\n+            nameExplicit \u003d false;\n             explName \u003d implName;\n         }\n         visible \u003d true;\n     }\n     boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n-    _property(implName).addGetter(m, explName, true, visible, ignore);\n+    _property(implName).addGetter(m, explName, nameExplicit, visible, ignore);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333": {
      "type": "Ybodychange",
      "commitMessage": "Groundwork for addressing renaming of explicit names with PropertyNamingStrategy\n",
      "commitDate": "3/28/14, 3:51 PM",
      "commitName": "365c29bd6ef5d69fe7cd07bc01340c9bb2ba8333",
      "commitAuthor": "Tatu",
      "commitDateOld": "3/14/14, 10:00 PM",
      "commitNameOld": "9036ebc9fe0cad9cabc8506629f6ec2d5f3d225a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 13.74,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n    if (explName \u003d\u003d null) {\n        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d BeanUtil.okNameForGetter(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (explName.length() \u003d\u003d 0) {\n            explName \u003d implName;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, explName, true, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 497,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,45 +1,45 @@\n protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n     if (ai !\u003d null) {\n         if (ai.hasAnyGetterAnnotation(m)) {\n             if (_anyGetters \u003d\u003d null) {\n                 _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n             }\n             _anyGetters.add(m);\n             return;\n         }\n         if (ai.hasAsValueAnnotation(m)) {\n             if (_jsonValueGetters \u003d\u003d null) {\n                 _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n             }\n             _jsonValueGetters.add(m);\n             return;\n         }\n     }\n     String implName;\n     boolean visible;\n     PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n     String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n     if (explName \u003d\u003d null) {\n         implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n             if (implName \u003d\u003d null) {\n                 return;\n             }\n             visible \u003d _visibilityChecker.isIsGetterVisible(m);\n         } else {\n             visible \u003d _visibilityChecker.isGetterVisible(m);\n         }\n     } else {\n         implName \u003d BeanUtil.okNameForGetter(m);\n         if (implName \u003d\u003d null) {\n             implName \u003d m.getName();\n         }\n         if (explName.length() \u003d\u003d 0) {\n             explName \u003d implName;\n         }\n         visible \u003d true;\n     }\n     boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n-    _property(implName).addGetter(m, explName, visible, ignore);\n+    _property(implName).addGetter(m, explName, true, visible, ignore);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "833680a543eeae627a0e93684355e881c789c80a": {
      "type": "Yformatchange",
      "commitMessage": "Fix #238\n",
      "commitDate": "7/10/13, 7:37 PM",
      "commitName": "833680a543eeae627a0e93684355e881c789c80a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/28/13, 3:46 PM",
      "commitNameOld": "8f2ea6ccafe7c971fbc10063a33c1baec83f7ed4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 104.16,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n    if (explName \u003d\u003d null) {\n        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d BeanUtil.okNameForGetter(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (explName.length() \u003d\u003d 0) {\n            explName \u003d implName;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, explName, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 479,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "257da8e4ce33fe77a05f9867ce3e187e522a1b8e": {
      "type": "Ybodychange",
      "commitMessage": "Starting to implement [Issue#69], upgrade to using PropertyName (to make xml support easier)\n",
      "commitDate": "9/4/12, 9:46 PM",
      "commitName": "257da8e4ce33fe77a05f9867ce3e187e522a1b8e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/29/12, 6:03 PM",
      "commitNameOld": "75fe7ce4cae5ad6464da719fb13d7796ea404795",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.15,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n    String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n    if (explName \u003d\u003d null) {\n        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d BeanUtil.okNameForGetter(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (explName.length() \u003d\u003d 0) {\n            explName \u003d implName;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, explName, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 454,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,44 +1,45 @@\n protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n     if (ai !\u003d null) {\n         if (ai.hasAnyGetterAnnotation(m)) {\n             if (_anyGetters \u003d\u003d null) {\n                 _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n             }\n             _anyGetters.add(m);\n             return;\n         }\n         if (ai.hasAsValueAnnotation(m)) {\n             if (_jsonValueGetters \u003d\u003d null) {\n                 _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n             }\n             _jsonValueGetters.add(m);\n             return;\n         }\n     }\n     String implName;\n     boolean visible;\n-    String explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n+    PropertyName pn \u003d (ai \u003d\u003d null) ? null : ai.findNameForSerialization(m);\n+    String explName \u003d (pn \u003d\u003d null) ? null : pn.getSimpleName();\n     if (explName \u003d\u003d null) {\n         implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n         if (implName \u003d\u003d null) {\n             implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n             if (implName \u003d\u003d null) {\n                 return;\n             }\n             visible \u003d _visibilityChecker.isIsGetterVisible(m);\n         } else {\n             visible \u003d _visibilityChecker.isGetterVisible(m);\n         }\n     } else {\n         implName \u003d BeanUtil.okNameForGetter(m);\n         if (implName \u003d\u003d null) {\n             implName \u003d m.getName();\n         }\n         if (explName.length() \u003d\u003d 0) {\n             explName \u003d implName;\n         }\n         visible \u003d true;\n     }\n     boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n     _property(implName).addGetter(m, explName, visible, ignore);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Yintroduced",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,44 @@\n+protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n+    if (ai !\u003d null) {\n+        if (ai.hasAnyGetterAnnotation(m)) {\n+            if (_anyGetters \u003d\u003d null) {\n+                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n+            }\n+            _anyGetters.add(m);\n+            return;\n+        }\n+        if (ai.hasAsValueAnnotation(m)) {\n+            if (_jsonValueGetters \u003d\u003d null) {\n+                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n+            }\n+            _jsonValueGetters.add(m);\n+            return;\n+        }\n+    }\n+    String implName;\n+    boolean visible;\n+    String explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n+    if (explName \u003d\u003d null) {\n+        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n+        if (implName \u003d\u003d null) {\n+            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n+            if (implName \u003d\u003d null) {\n+                return;\n+            }\n+            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n+        } else {\n+            visible \u003d _visibilityChecker.isGetterVisible(m);\n+        }\n+    } else {\n+        implName \u003d BeanUtil.okNameForGetter(m);\n+        if (implName \u003d\u003d null) {\n+            implName \u003d m.getName();\n+        }\n+        if (explName.length() \u003d\u003d 0) {\n+            explName \u003d implName;\n+        }\n+        visible \u003d true;\n+    }\n+    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n+    _property(implName).addGetter(m, explName, visible, ignore);\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected void _addGetterMethod(AnnotatedMethod m, AnnotationIntrospector ai) {\n    if (ai !\u003d null) {\n        if (ai.hasAnyGetterAnnotation(m)) {\n            if (_anyGetters \u003d\u003d null) {\n                _anyGetters \u003d new LinkedList\u003cAnnotatedMember\u003e();\n            }\n            _anyGetters.add(m);\n            return;\n        }\n        if (ai.hasAsValueAnnotation(m)) {\n            if (_jsonValueGetters \u003d\u003d null) {\n                _jsonValueGetters \u003d new LinkedList\u003cAnnotatedMethod\u003e();\n            }\n            _jsonValueGetters.add(m);\n            return;\n        }\n    }\n    String implName;\n    boolean visible;\n    String explName \u003d (ai \u003d\u003d null) ? null : ai.findSerializationName(m);\n    if (explName \u003d\u003d null) {\n        implName \u003d BeanUtil.okNameForRegularGetter(m, m.getName());\n        if (implName \u003d\u003d null) {\n            implName \u003d BeanUtil.okNameForIsGetter(m, m.getName());\n            if (implName \u003d\u003d null) {\n                return;\n            }\n            visible \u003d _visibilityChecker.isIsGetterVisible(m);\n        } else {\n            visible \u003d _visibilityChecker.isGetterVisible(m);\n        }\n    } else {\n        implName \u003d BeanUtil.okNameForGetter(m);\n        if (implName \u003d\u003d null) {\n            implName \u003d m.getName();\n        }\n        if (explName.length() \u003d\u003d 0) {\n            explName \u003d implName;\n        }\n        visible \u003d true;\n    }\n    boolean ignore \u003d (ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n    _property(implName).addGetter(m, explName, visible, ignore);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
      "functionStartLine": 444,
      "functionName": "_addGetterMethod",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}