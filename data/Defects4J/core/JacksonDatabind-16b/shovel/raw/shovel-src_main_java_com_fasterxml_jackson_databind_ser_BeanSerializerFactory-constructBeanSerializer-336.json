{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerFactory.java",
  "functionName": "constructBeanSerializer",
  "functionId": "constructBeanSerializer___prov-SerializerProvider__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
  "functionStartLine": 336,
  "functionEndLine": 429,
  "numCommitsSeen": 149,
  "timeTaken": 3887,
  "changeHistory": [
    "466f706901d39ae95393c6c7b1d0b544247922f1",
    "0ccedce4c82588546ac3a4a62d663f17b51cb509",
    "1842f60c649616f8235ba9d28abcfa848d8f7555",
    "152aabb7399df1d3178418062c7fa580f3533d4e",
    "69b84875d4cfe866f94e5fb2d78081d47b8008b2",
    "cc7524cc1c0e9ab1cac6efb84c394a02d79bcecb",
    "8bdd49b36c8c05483669f6bd50b3839016f78983",
    "1488cef12ee88e25dd0161f1b85c552a32775778",
    "8d53c22404fbd066cf3f81d1248e188dba5caebd",
    "65b73d92974414c018dec24a67c285ae484654c8",
    "8774a3fbf5ce4c7f51d513c30e9cebc949b311a4",
    "2b4086a9372b2129585bdf217d84f6313076c8ec",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
    "58077e9d135f0285a361a1d89b3767c5ece0095a",
    "d453182b63249c2c597a54229a4242e1ce1921d0",
    "9550e09f842cd71e5c9a5c0fca2777beea5a01d6",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
    "a57eca7f47d03b26320348520e926dde0da68509",
    "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
    "28bde0726d83be7f70ca4586abee6f536bfc8885",
    "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "466f706901d39ae95393c6c7b1d0b544247922f1": "Ybodychange",
    "0ccedce4c82588546ac3a4a62d663f17b51cb509": "Ybodychange",
    "1842f60c649616f8235ba9d28abcfa848d8f7555": "Yformatchange",
    "152aabb7399df1d3178418062c7fa580f3533d4e": "Ybodychange",
    "69b84875d4cfe866f94e5fb2d78081d47b8008b2": "Yformatchange",
    "cc7524cc1c0e9ab1cac6efb84c394a02d79bcecb": "Ybodychange",
    "8bdd49b36c8c05483669f6bd50b3839016f78983": "Ybodychange",
    "1488cef12ee88e25dd0161f1b85c552a32775778": "Ybodychange",
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": "Ybodychange",
    "65b73d92974414c018dec24a67c285ae484654c8": "Ymultichange(Yparameterchange,Ydocchange)",
    "8774a3fbf5ce4c7f51d513c30e9cebc949b311a4": "Ybodychange",
    "2b4086a9372b2129585bdf217d84f6313076c8ec": "Ybodychange",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": "Ybodychange",
    "58077e9d135f0285a361a1d89b3767c5ece0095a": "Ybodychange",
    "d453182b63249c2c597a54229a4242e1ce1921d0": "Ybodychange",
    "9550e09f842cd71e5c9a5c0fca2777beea5a01d6": "Ybodychange",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": "Ybodychange",
    "a57eca7f47d03b26320348520e926dde0da68509": "Ybodychange",
    "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40": "Ybodychange",
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": "Ymultichange(Yparameterchange,Ybodychange)",
    "28bde0726d83be7f70ca4586abee6f536bfc8885": "Yparameterchange",
    "b2a9ca7bb27c21b12ccd8d17314e83275381027c": "Ydocchange",
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": "Ybodychange",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ybodychange",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "466f706901d39ae95393c6c7b1d0b544247922f1": {
      "type": "Ybodychange",
      "commitMessage": "Fix #705 for 2.5.2\n",
      "commitDate": "2/23/15, 4:53 PM",
      "commitName": "466f706901d39ae95393c6c7b1d0b544247922f1",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "12/7/14, 11:11 PM",
      "commitNameOld": "6f5cf623ba7a3e7a9e27917955ab388e35769687",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 77.74,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        JsonSerializer\u003c?\u003e anySer \u003d findSerializerFromAnnotation(prov, anyGetter);\n        if (anySer \u003d\u003d null) {\n            anySer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        }\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 335,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "@@ -1,55 +1,58 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n-        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        JsonSerializer\u003c?\u003e anySer \u003d findSerializerFromAnnotation(prov, anyGetter);\n+        if (anySer \u003d\u003d null) {\n+            anySer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n+        }\n         PropertyName name \u003d new PropertyName(anyGetter.getName());\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n-        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0ccedce4c82588546ac3a4a62d663f17b51cb509": {
      "type": "Ybodychange",
      "commitMessage": "First part of #638, adding support for including attribute-backed virtual properties\n",
      "commitDate": "12/3/14, 2:38 PM",
      "commitName": "0ccedce4c82588546ac3a4a62d663f17b51cb509",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "11/18/14, 8:33 PM",
      "commitNameOld": "1842f60c649616f8235ba9d28abcfa848d8f7555",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 14.75,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 335,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "@@ -1,54 +1,55 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n+    prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n         PropertyName name \u003d new PropertyName(anyGetter.getName());\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1842f60c649616f8235ba9d28abcfa848d8f7555": {
      "type": "Yformatchange",
      "commitMessage": "minor javadoc cleanup\n",
      "commitDate": "11/18/14, 8:33 PM",
      "commitName": "1842f60c649616f8235ba9d28abcfa848d8f7555",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/18/14, 3:16 PM",
      "commitNameOld": "152aabb7399df1d3178418062c7fa580f3533d4e",
      "commitAuthorOld": "Cowtowncoder",
      "daysBetweenCommits": 61.26,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 335,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "",
      "extendedDetails": {}
    },
    "152aabb7399df1d3178418062c7fa580f3533d4e": {
      "type": "Ybodychange",
      "commitMessage": "Fixed #539 in master (for 2.5.0) -- slightly risky change so can\u0027t easily backport unfortunately.\n",
      "commitDate": "9/18/14, 3:16 PM",
      "commitName": "152aabb7399df1d3178418062c7fa580f3533d4e",
      "commitAuthor": "Cowtowncoder",
      "commitDateOld": "3/17/14, 9:06 PM",
      "commitNameOld": "8d6fa487db65fc9b3610784da9627356ef1eb16c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 184.76,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 335,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "",
      "extendedDetails": {}
    },
    "69b84875d4cfe866f94e5fb2d78081d47b8008b2": {
      "type": "Yformatchange",
      "commitMessage": "Fixed #370\n",
      "commitDate": "12/18/13, 8:17 PM",
      "commitName": "69b84875d4cfe866f94e5fb2d78081d47b8008b2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/19/13, 4:46 PM",
      "commitNameOld": "cc7524cc1c0e9ab1cac6efb84c394a02d79bcecb",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 60.19,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 362,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "",
      "extendedDetails": {}
    },
    "cc7524cc1c0e9ab1cac6efb84c394a02d79bcecb": {
      "type": "Ybodychange",
      "commitMessage": "Implemented #307\n",
      "commitDate": "10/19/13, 4:46 PM",
      "commitName": "cc7524cc1c0e9ab1cac6efb84c394a02d79bcecb",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/14/13, 8:25 PM",
      "commitNameOld": "84042ca4dc76880854cea7cd422e48a2fa47c57e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.85,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 362,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "@@ -1,54 +1,54 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n-        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n+        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);\n         PropertyName name \u003d new PropertyName(anyGetter.getName());\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bdd49b36c8c05483669f6bd50b3839016f78983": {
      "type": "Ybodychange",
      "commitMessage": "Complete handling of property description -- need to test still\n",
      "commitDate": "7/26/13, 4:18 PM",
      "commitName": "8bdd49b36c8c05483669f6bd50b3839016f78983",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/26/13, 2:42 PM",
      "commitNameOld": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 358,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "@@ -1,54 +1,54 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         PropertyName name \u003d new PropertyName(anyGetter.getName());\n-        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, false);\n+        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1488cef12ee88e25dd0161f1b85c552a32775778": {
      "type": "Ybodychange",
      "commitMessage": "Completing conversion to using PropertyName instead of String in most parts of API\n",
      "commitDate": "7/26/13, 2:42 PM",
      "commitName": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 11:05 PM",
      "commitNameOld": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        PropertyName name \u003d new PropertyName(anyGetter.getName());\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, false);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 358,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "@@ -1,53 +1,54 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n-        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, null, beanDesc.getClassAnnotations(), anyGetter, false);\n+        PropertyName name \u003d new PropertyName(anyGetter.getName());\n+        BeanProperty.Std anyProp \u003d new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, false);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8d53c22404fbd066cf3f81d1248e188dba5caebd": {
      "type": "Ybodychange",
      "commitMessage": "More refactoring, piping through \"wrapper name\" so downstream code need not use introspector\n",
      "commitDate": "3/13/13, 3:56 PM",
      "commitName": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/13, 1:11 PM",
      "commitNameOld": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 10.07,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, null, beanDesc.getClassAnnotations(), anyGetter, false);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 358,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
      "diff": "@@ -1,53 +1,53 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n-        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n+        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, null, beanDesc.getClassAnnotations(), anyGetter, false);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65b73d92974414c018dec24a67c285ae484654c8": {
      "type": "Ymultichange(Yparameterchange,Ydocchange)",
      "commitMessage": "Starting to clean up SerializerFactory, to remove/reduce passing of BeanProperty, which in general is not available at time of call.\n",
      "commitDate": "9/30/12, 12:04 PM",
      "commitName": "65b73d92974414c018dec24a67c285ae484654c8",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Starting to clean up SerializerFactory, to remove/reduce passing of BeanProperty, which in general is not available at time of call.\n",
          "commitDate": "9/30/12, 12:04 PM",
          "commitName": "65b73d92974414c018dec24a67c285ae484654c8",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/24/12, 1:33 PM",
          "commitNameOld": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 36.94,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 333,
          "functionName": "constructBeanSerializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
          "diff": "@@ -1,53 +1,53 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prov-SerializerProvider, beanDesc-BeanDescription, property-BeanProperty]",
            "newValue": "[prov-SerializerProvider, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Starting to clean up SerializerFactory, to remove/reduce passing of BeanProperty, which in general is not available at time of call.\n",
          "commitDate": "9/30/12, 12:04 PM",
          "commitName": "65b73d92974414c018dec24a67c285ae484654c8",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/24/12, 1:33 PM",
          "commitNameOld": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 36.94,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 333,
          "functionName": "constructBeanSerializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n",
          "diff": "@@ -1,53 +1,53 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method called to construct serializer for serializing specified bean type.\n",
            "newValue": "Method called to construct serializer for serializing specified bean type.\n\n@since 2.1\n"
          }
        }
      ]
    },
    "8774a3fbf5ce4c7f51d513c30e9cebc949b311a4": {
      "type": "Ybodychange",
      "commitMessage": "further refinements wrt [Issue-11]...\n",
      "commitDate": "7/5/12, 9:37 PM",
      "commitName": "8774a3fbf5ce4c7f51d513c30e9cebc949b311a4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "6/29/12, 8:27 PM",
      "commitNameOld": "2b4086a9372b2129585bdf217d84f6313076c8ec",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        return prov.getUnknownTypeSerializer(Object.class);\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 295,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,53 +1,53 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n-        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+        return prov.getUnknownTypeSerializer(Object.class);\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2b4086a9372b2129585bdf217d84f6313076c8ec": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "6/29/12, 8:27 PM",
      "commitName": "2b4086a9372b2129585bdf217d84f6313076c8ec",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "6/13/12, 6:47 PM",
      "commitNameOld": "a063b79f364923a4b98ce66254bf478284c63340",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 16.07,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    builder.setConfig(config);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 295,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,52 +1,53 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n+    builder.setConfig(config);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": {
      "type": "Ybodychange",
      "commitMessage": "Starting work on supporting custom (property-based) object ids.\n",
      "commitDate": "2/9/12, 9:58 PM",
      "commitName": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 8:58 PM",
      "commitNameOld": "a7ba5c4399c0ffc8e171f494543d44bc3f7261e4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 272,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,52 +1,52 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n-    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc));\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58077e9d135f0285a361a1d89b3767c5ece0095a": {
      "type": "Ybodychange",
      "commitMessage": "Ok, Object Id handling back to working as good as before refactoring, i.e. just for serialization...\n",
      "commitDate": "2/7/12, 7:47 PM",
      "commitName": "58077e9d135f0285a361a1d89b3767c5ece0095a",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/6/12, 10:44 PM",
      "commitNameOld": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc));\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 271,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,52 +1,52 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n-    builder.setObjectIdHandler(constructObjectIdHandler(prov, beanDesc));\n+    builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc));\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d453182b63249c2c597a54229a4242e1ce1921d0": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring Object Id handling, after realizing first attempt is too limiting\n",
      "commitDate": "2/6/12, 10:44 PM",
      "commitName": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/4/12, 9:59 PM",
      "commitNameOld": "c3617edebe4687842c70f84a3c16e8ab021fe630",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    builder.setObjectIdHandler(constructObjectIdHandler(prov, beanDesc));\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 271,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,51 +1,52 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n+    builder.setObjectIdHandler(constructObjectIdHandler(prov, beanDesc));\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9550e09f842cd71e5c9a5c0fca2777beea5a01d6": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-762], almost done (one more unit test to make work...)\n",
      "commitDate": "2/3/12, 5:20 PM",
      "commitName": "9550e09f842cd71e5c9a5c0fca2777beea5a01d6",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/3/12, 1:28 PM",
      "commitNameOld": "0c1d95cee9e468b75dca6791332d44b19b93ed77",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 269,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,51 +1,51 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n-    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n+    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc, builder);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-777] (renamed SerializationConfig.Feature, DeserializationConfig.Feature); various other restructure\n",
      "commitDate": "2/2/12, 11:30 AM",
      "commitName": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/1/12, 8:01 PM",
      "commitNameOld": "334892f4c5c0f346248eb6ebae306330e6512d93",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.64,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 267,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,51 +1,51 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n-        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n+        boolean staticTyping \u003d config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a57eca7f47d03b26320348520e926dde0da68509": {
      "type": "Ybodychange",
      "commitMessage": "Yet more refactoring, eliminating BeanProperty from TypeSerializer\n",
      "commitDate": "2/1/12, 3:26 PM",
      "commitName": "a57eca7f47d03b26320348520e926dde0da68509",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 9:32 PM",
      "commitNameOld": "58ada457706e9e05d12f45e58451b7daffdd5317",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 264,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,51 +1,51 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n-        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n+        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n         BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n         builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "1/31/12, 8:42 PM",
      "commitName": "886ca96f608a1a3e9a72b1cb2d86a2b45c5eae40",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/29/12, 9:49 PM",
      "commitNameOld": "5b58cb22b4ce9b1a3a37481190e5aa87eb6fd79a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.95,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 372,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,50 +1,51 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n-    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n+    AnnotatedMember anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n-        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n-        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n+        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, null, null);\n+        BeanProperty.Std anyProp \u003d new BeanProperty.Std(anyGetter.getName(), valueType, beanDesc.getClassAnnotations(), anyGetter);\n+        builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
      "commitDate": "1/24/12, 6:51 PM",
      "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 371,
          "functionName": "constructBeanSerializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
          "diff": "@@ -1,49 +1,50 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n+    final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n-    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n+    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n         builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, beanDesc-BeanDescription, property-BeanProperty]",
            "newValue": "[prov-SerializerProvider, beanDesc-BeanDescription, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Completed (?) major refactoring to give necessary context for Resolvable Serializers, Deserializers.\n",
          "commitDate": "1/24/12, 6:51 PM",
          "commitName": "aaba9c105d557bdbb4e94a1e3927cbdd61bd2807",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 1.83,
          "commitsBetweenForRepo": 21,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    final SerializationConfig config \u003d prov.getConfig();\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
          "functionStartLine": 371,
          "functionName": "constructBeanSerializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
          "diff": "@@ -1,49 +1,50 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n+    final SerializationConfig config \u003d prov.getConfig();\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n-    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n+    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(prov, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n         builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "28bde0726d83be7f70ca4586abee6f536bfc8885": {
      "type": "Yparameterchange",
      "commitMessage": "Refactoring: eliminate exposure of BasicBeanDescription (now just base class. BeanDescription)\n",
      "commitDate": "1/22/12, 10:57 PM",
      "commitName": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/20/12, 8:16 PM",
      "commitNameOld": "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 368,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "@@ -1,49 +1,49 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n         builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-SerializationConfig, beanDesc-BasicBeanDescription, property-BeanProperty]",
        "newValue": "[config-SerializationConfig, beanDesc-BeanDescription, property-BeanProperty]"
      }
    },
    "b2a9ca7bb27c21b12ccd8d17314e83275381027c": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc cleanup, removing pre-2.0 @since annotations\n",
      "commitDate": "1/20/12, 8:16 PM",
      "commitName": "b2a9ca7bb27c21b12ccd8d17314e83275381027c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/19/12, 12:31 PM",
      "commitNameOld": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 368,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method called to construct serializer for serializing specified bean type.\n\n@since 1.6\n",
        "newValue": "Method called to construct serializer for serializing specified bean type.\n"
      }
    },
    "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2": {
      "type": "Ybodychange",
      "commitMessage": "Completed major rewrite of handling of on/off features for ObjectMapper/SerConfig/DeserConfig\n",
      "commitDate": "1/19/12, 12:31 PM",
      "commitName": "dfed9240ab1a46ed8c5dfea8d8dd4e38d86646f2",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/15/12, 4:12 PM",
      "commitNameOld": "91965175e2fd0932c48d69ca2f37887bba6a1170",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 374,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 1.6\n",
      "diff": "@@ -1,49 +1,49 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n-        boolean staticTyping \u003d config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);\n+        boolean staticTyping \u003d config.isEnabled(MapperConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n         builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/24/11, 10:07 PM",
      "commitNameOld": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.01,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.canOverrideAccessModifiers()) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 413,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 1.6\n",
      "diff": "@@ -1,49 +1,49 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n-        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+        if (config.canOverrideAccessModifiers()) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n         builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": {
      "type": "Ybodychange",
      "commitMessage": "Clean up, to get rid of deprecated stuff\n",
      "commitDate": "12/24/11, 10:07 PM",
      "commitName": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/11, 8:05 PM",
      "commitNameOld": "df6302f807bb230ae985a35100cbcc30af523bd1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 414,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 1.6\n",
      "diff": "@@ -1,50 +1,49 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n         throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n     }\n     BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n     List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n     if (props \u003d\u003d null) {\n         props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n     }\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.changeProperties(config, beanDesc, props);\n         }\n     }\n     props \u003d filterBeanProperties(config, beanDesc, props);\n-    props \u003d sortBeanProperties(config, beanDesc, props);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             props \u003d mod.orderProperties(config, beanDesc, props);\n         }\n     }\n     builder.setProperties(props);\n     builder.setFilterId(findFilterId(config, beanDesc));\n     AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n     if (anyGetter !\u003d null) {\n         if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n             anyGetter.fixAccess();\n         }\n         JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n         boolean staticTyping \u003d config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);\n         JavaType valueType \u003d type.getContentType();\n         TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n         MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n         builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n     }\n     processViews(config, builder);\n     if (_factoryConfig.hasSerializerModifiers()) {\n         for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n             builder \u003d mod.updateBuilder(config, beanDesc, builder);\n         }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n     if (ser \u003d\u003d null) {\n         if (beanDesc.hasKnownClassAnnotations()) {\n             return builder.createDummy();\n         }\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,50 @@\n+@SuppressWarnings(\"unchecked\")\n+protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n+        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n+    }\n+    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n+    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n+    if (props \u003d\u003d null) {\n+        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n+    }\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props \u003d mod.changeProperties(config, beanDesc, props);\n+        }\n+    }\n+    props \u003d filterBeanProperties(config, beanDesc, props);\n+    props \u003d sortBeanProperties(config, beanDesc, props);\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            props \u003d mod.orderProperties(config, beanDesc, props);\n+        }\n+    }\n+    builder.setProperties(props);\n+    builder.setFilterId(findFilterId(config, beanDesc));\n+    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n+    if (anyGetter !\u003d null) {\n+        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n+            anyGetter.fixAccess();\n+        }\n+        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n+        boolean staticTyping \u003d config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);\n+        JavaType valueType \u003d type.getContentType();\n+        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n+        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n+        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n+    }\n+    processViews(config, builder);\n+    if (_factoryConfig.hasSerializerModifiers()) {\n+        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n+        }\n+    }\n+    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n+    if (ser \u003d\u003d null) {\n+        if (beanDesc.hasKnownClassAnnotations()) {\n+            return builder.createDummy();\n+        }\n+    }\n+    return ser;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializationConfig config, BasicBeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n        throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n    }\n    BeanSerializerBuilder builder \u003d constructBeanSerializerBuilder(beanDesc);\n    List\u003cBeanPropertyWriter\u003e props \u003d findBeanProperties(config, beanDesc);\n    if (props \u003d\u003d null) {\n        props \u003d new ArrayList\u003cBeanPropertyWriter\u003e();\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.changeProperties(config, beanDesc, props);\n        }\n    }\n    props \u003d filterBeanProperties(config, beanDesc, props);\n    props \u003d sortBeanProperties(config, beanDesc, props);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            props \u003d mod.orderProperties(config, beanDesc, props);\n        }\n    }\n    builder.setProperties(props);\n    builder.setFilterId(findFilterId(config, beanDesc));\n    AnnotatedMethod anyGetter \u003d beanDesc.findAnyGetter();\n    if (anyGetter !\u003d null) {\n        if (config.isEnabled(SerializationConfig.Feature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {\n            anyGetter.fixAccess();\n        }\n        JavaType type \u003d anyGetter.getType(beanDesc.bindingsForBeanType());\n        boolean staticTyping \u003d config.isEnabled(SerializationConfig.Feature.USE_STATIC_TYPING);\n        JavaType valueType \u003d type.getContentType();\n        TypeSerializer typeSer \u003d createTypeSerializer(config, valueType, property);\n        MapSerializer mapSer \u003d MapSerializer.construct(null, type, staticTyping, typeSer, property, null, null);\n        builder.setAnyGetter(new AnyGetterWriter(anyGetter, mapSer));\n    }\n    processViews(config, builder);\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            builder \u003d mod.updateBuilder(config, beanDesc, builder);\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d (JsonSerializer\u003cObject\u003e) builder.build();\n    if (ser \u003d\u003d null) {\n        if (beanDesc.hasKnownClassAnnotations()) {\n            return builder.createDummy();\n        }\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
      "functionStartLine": 419,
      "functionName": "constructBeanSerializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called to construct serializer for serializing specified bean type.\n\n@since 1.6\n"
    }
  }
}