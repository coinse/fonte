{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PropertyBuilder.java",
  "functionName": "buildWriter",
  "functionId": "buildWriter___prov-SerializerProvider__propDef-BeanPropertyDefinition__declaredType-JavaType__ser-JsonSerializer__?____typeSer-TypeSerializer__contentTypeSer-TypeSerializer__am-AnnotatedMember__defaultUseStaticTyping-boolean",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
  "functionStartLine": 61,
  "functionEndLine": 146,
  "numCommitsSeen": 71,
  "timeTaken": 1213,
  "changeHistory": [
    "80674feaf5a593194a3810aaa1781a52442696da",
    "1861b09565aa92b0a9f8a9ec625359be46a4261f",
    "84042ca4dc76880854cea7cd422e48a2fa47c57e",
    "7ec58bf26f919903b40b08a9e938b478c9f83b40",
    "c24e1ba511132261d121d391838c2e3ce1e5f029",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
    "ea95d70f86d6574b302faedfeacbf4ad2f0ae1af",
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
    "2aa648459c1ecc29603f1917f5f91be686d764d0",
    "4dc01e735c57e1a3d6e79f819713efaf77998edb",
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3",
    "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4",
    "418a239a360683f065ea18fb4d1cb8d40c646c8e",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "80674feaf5a593194a3810aaa1781a52442696da": "Ybodychange",
    "1861b09565aa92b0a9f8a9ec625359be46a4261f": "Ybodychange",
    "84042ca4dc76880854cea7cd422e48a2fa47c57e": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "7ec58bf26f919903b40b08a9e938b478c9f83b40": "Ybodychange",
    "c24e1ba511132261d121d391838c2e3ce1e5f029": "Yparameterchange",
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": "Ybodychange",
    "ea95d70f86d6574b302faedfeacbf4ad2f0ae1af": "Ybodychange",
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd": "Ymultichange(Yparameterchange,Ybodychange)",
    "2aa648459c1ecc29603f1917f5f91be686d764d0": "Ybodychange",
    "4dc01e735c57e1a3d6e79f819713efaf77998edb": "Ybodychange",
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3": "Ybodychange",
    "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4": "Yformatchange",
    "418a239a360683f065ea18fb4d1cb8d40c646c8e": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "80674feaf5a593194a3810aaa1781a52442696da": {
      "type": "Ybodychange",
      "commitMessage": "Minor fixes to support inclusion criteria for attribute-backed props\n",
      "commitDate": "12/3/14, 10:17 PM",
      "commitName": "80674feaf5a593194a3810aaa1781a52442696da",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "10/18/14, 9:10 PM",
      "commitNameOld": "1861b09565aa92b0a9f8a9ec625359be46a4261f",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 46.09,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include inclusion \u003d propDef.findInclusion();\n    if (inclusion \u003d\u003d null) {\n        inclusion \u003d _defaultInclusion;\n    }\n    if (inclusion !\u003d null) {\n        switch(inclusion) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n    if (serDef !\u003d null) {\n        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n    }\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 61,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,52 +1,55 @@\n protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n-    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n-    if (methodProps !\u003d null) {\n-        switch(methodProps) {\n+    JsonInclude.Include inclusion \u003d propDef.findInclusion();\n+    if (inclusion \u003d\u003d null) {\n+        inclusion \u003d _defaultInclusion;\n+    }\n+    if (inclusion !\u003d null) {\n+        switch(inclusion) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n     Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n     if (serDef !\u003d null) {\n         bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n     }\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1861b09565aa92b0a9f8a9ec625359be46a4261f": {
      "type": "Ybodychange",
      "commitMessage": "bit more access for maps-vs-null-values\n",
      "commitDate": "10/18/14, 9:10 PM",
      "commitName": "1861b09565aa92b0a9f8a9ec625359be46a4261f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/27/14, 10:15 PM",
      "commitNameOld": "6d0a54adac4df31585a760e6da5c353f729b62dc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 173.95,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n    if (serDef !\u003d null) {\n        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n    }\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 55,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "",
      "extendedDetails": {}
    },
    "84042ca4dc76880854cea7cd422e48a2fa47c57e": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "First part of custom null serializers implemented (per-property)\n",
      "commitDate": "10/14/13, 8:25 PM",
      "commitName": "84042ca4dc76880854cea7cd422e48a2fa47c57e",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "First part of custom null serializers implemented (per-property)\n",
          "commitDate": "10/14/13, 8:25 PM",
          "commitName": "84042ca4dc76880854cea7cd422e48a2fa47c57e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/6/13, 7:56 PM",
          "commitNameOld": "07bcd046b2b9b03802a8d1695ec2f6059cbd34f4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 69.02,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n    if (serDef !\u003d null) {\n        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n    }\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
          "functionStartLine": 75,
          "functionName": "buildWriter",
          "functionAnnotation": "",
          "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
          "diff": "@@ -1,48 +1,52 @@\n-protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n+protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n+    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n+    if (serDef !\u003d null) {\n+        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n+    }\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[propDef-BeanPropertyDefinition, declaredType-JavaType, ser-JsonSerializer\u003c?\u003e, typeSer-TypeSerializer, contentTypeSer-TypeSerializer, am-AnnotatedMember, defaultUseStaticTyping-boolean]",
            "newValue": "[prov-SerializerProvider, propDef-BeanPropertyDefinition, declaredType-JavaType, ser-JsonSerializer\u003c?\u003e, typeSer-TypeSerializer, contentTypeSer-TypeSerializer, am-AnnotatedMember, defaultUseStaticTyping-boolean]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "First part of custom null serializers implemented (per-property)\n",
          "commitDate": "10/14/13, 8:25 PM",
          "commitName": "84042ca4dc76880854cea7cd422e48a2fa47c57e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/6/13, 7:56 PM",
          "commitNameOld": "07bcd046b2b9b03802a8d1695ec2f6059cbd34f4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 69.02,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n    if (serDef !\u003d null) {\n        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n    }\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
          "functionStartLine": 75,
          "functionName": "buildWriter",
          "functionAnnotation": "",
          "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
          "diff": "@@ -1,48 +1,52 @@\n-protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n+protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n+    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n+    if (serDef !\u003d null) {\n+        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n+    }\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[JsonMappingException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "First part of custom null serializers implemented (per-property)\n",
          "commitDate": "10/14/13, 8:25 PM",
          "commitName": "84042ca4dc76880854cea7cd422e48a2fa47c57e",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "8/6/13, 7:56 PM",
          "commitNameOld": "07bcd046b2b9b03802a8d1695ec2f6059cbd34f4",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 69.02,
          "commitsBetweenForRepo": 100,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n    if (serDef !\u003d null) {\n        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n    }\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
          "functionStartLine": 75,
          "functionName": "buildWriter",
          "functionAnnotation": "",
          "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
          "diff": "@@ -1,48 +1,52 @@\n-protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n+protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n+    Object serDef \u003d _annotationIntrospector.findNullSerializer(am);\n+    if (serDef !\u003d null) {\n+        bpw.assignNullSerializer(prov.serializerInstance(am, serDef));\n+    }\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "7ec58bf26f919903b40b08a9e938b478c9f83b40": {
      "type": "Ybodychange",
      "commitMessage": "removing an unnecessary class\n",
      "commitDate": "4/16/13, 8:11 PM",
      "commitName": "7ec58bf26f919903b40b08a9e938b478c9f83b40",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 437.89,
      "commitsBetweenForRepo": 614,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 55,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,48 +1,48 @@\n protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n-                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n+                        valueToSuppress \u003d ArrayBuilders.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c24e1ba511132261d121d391838c2e3ce1e5f029": {
      "type": "Yparameterchange",
      "commitMessage": "Yay! Fixed all the transient unit tests -- back to only 3 longer-term failing ones\n",
      "commitDate": "2/2/12, 5:49 PM",
      "commitName": "c24e1ba511132261d121d391838c2e3ce1e5f029",
      "commitAuthor": "Tatu",
      "commitDateOld": "2/2/12, 11:30 AM",
      "commitNameOld": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 56,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,48 +1,48 @@\n-protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n+protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003c?\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[propDef-BeanPropertyDefinition, declaredType-JavaType, ser-JsonSerializer\u003cObject\u003e, typeSer-TypeSerializer, contentTypeSer-TypeSerializer, am-AnnotatedMember, defaultUseStaticTyping-boolean]",
        "newValue": "[propDef-BeanPropertyDefinition, declaredType-JavaType, ser-JsonSerializer\u003c?\u003e, typeSer-TypeSerializer, contentTypeSer-TypeSerializer, am-AnnotatedMember, defaultUseStaticTyping-boolean]"
      }
    },
    "9610aff9eb922486478ab92ad5c4d02a11b2ad1f": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [JACKSON-777] (renamed SerializationConfig.Feature, DeserializationConfig.Feature); various other restructure\n",
      "commitDate": "2/2/12, 11:30 AM",
      "commitName": "9610aff9eb922486478ab92ad5c4d02a11b2ad1f",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/25/12, 5:53 PM",
      "commitNameOld": "ea95d70f86d6574b302faedfeacbf4ad2f0ae1af",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.73,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 56,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,48 +1,48 @@\n protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n-                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n+                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ea95d70f86d6574b302faedfeacbf4ad2f0ae1af": {
      "type": "Ybodychange",
      "commitMessage": "Still trying to simplify construction of BeanPropertyWriters\n",
      "commitDate": "1/25/12, 5:53 PM",
      "commitName": "ea95d70f86d6574b302faedfeacbf4ad2f0ae1af",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/25/12, 5:36 PM",
      "commitNameOld": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 55,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,57 +1,48 @@\n protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n-    Field f;\n-    Method m;\n-    if (am instanceof AnnotatedField) {\n-        m \u003d null;\n-        f \u003d ((AnnotatedField) am).getAnnotated();\n-    } else {\n-        m \u003d ((AnnotatedMethod) am).getAnnotated();\n-        f \u003d null;\n-    }\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n-                valueToSuppress \u003d getDefaultValue(propDef.getName(), m, f);\n+                valueToSuppress \u003d getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n-    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n+    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e40a76936b9f3e1cfb5b903b06518195a157f3fd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Piping view definitions through\n",
      "commitDate": "1/25/12, 5:36 PM",
      "commitName": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Piping view definitions through\n",
          "commitDate": "1/25/12, 5:36 PM",
          "commitName": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.78,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
          "functionStartLine": 58,
          "functionName": "buildWriter",
          "functionAnnotation": "",
          "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
          "diff": "@@ -1,57 +1,57 @@\n-protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n+protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     Field f;\n     Method m;\n     if (am instanceof AnnotatedField) {\n         m \u003d null;\n         f \u003d ((AnnotatedField) am).getAnnotated();\n     } else {\n         m \u003d ((AnnotatedMethod) am).getAnnotated();\n         f \u003d null;\n     }\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n-            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n+            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n-                valueToSuppress \u003d getDefaultValue(name, m, f);\n+                valueToSuppress \u003d getDefaultValue(propDef.getName(), m, f);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n-    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n+    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[name-String, declaredType-JavaType, ser-JsonSerializer\u003cObject\u003e, typeSer-TypeSerializer, contentTypeSer-TypeSerializer, am-AnnotatedMember, defaultUseStaticTyping-boolean]",
            "newValue": "[propDef-BeanPropertyDefinition, declaredType-JavaType, ser-JsonSerializer\u003cObject\u003e, typeSer-TypeSerializer, contentTypeSer-TypeSerializer, am-AnnotatedMember, defaultUseStaticTyping-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Piping view definitions through\n",
          "commitDate": "1/25/12, 5:36 PM",
          "commitName": "e40a76936b9f3e1cfb5b903b06518195a157f3fd",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "1/22/12, 10:57 PM",
          "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 2.78,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(propDef.getName(), m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
          "functionStartLine": 58,
          "functionName": "buildWriter",
          "functionAnnotation": "",
          "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
          "diff": "@@ -1,57 +1,57 @@\n-protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n+protected BeanPropertyWriter buildWriter(BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     Field f;\n     Method m;\n     if (am instanceof AnnotatedField) {\n         m \u003d null;\n         f \u003d ((AnnotatedField) am).getAnnotated();\n     } else {\n         m \u003d ((AnnotatedMethod) am).getAnnotated();\n         f \u003d null;\n     }\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n-            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n+            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + propDef.getName() + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n-                valueToSuppress \u003d getDefaultValue(name, m, f);\n+                valueToSuppress \u003d getDefaultValue(propDef.getName(), m, f);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n-    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n+    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2aa648459c1ecc29603f1917f5f91be686d764d0": {
      "type": "Ybodychange",
      "commitMessage": "Implement [JACKSON-751], add @JsonInclude\n",
      "commitDate": "1/14/12, 10:25 PM",
      "commitName": "2aa648459c1ecc29603f1917f5f91be686d764d0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/13/12, 10:25 PM",
      "commitNameOld": "4dc01e735c57e1a3d6e79f819713efaf77998edb",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(name, m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 58,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,57 +1,57 @@\n protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     Field f;\n     Method m;\n     if (am instanceof AnnotatedField) {\n         m \u003d null;\n         f \u003d ((AnnotatedField) am).getAnnotated();\n     } else {\n         m \u003d ((AnnotatedMethod) am).getAnnotated();\n         f \u003d null;\n     }\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n-    JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n+    JsonInclude.Include methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(name, m, f);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n     NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n     if (unwrapper !\u003d null) {\n         bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4dc01e735c57e1a3d6e79f819713efaf77998edb": {
      "type": "Ybodychange",
      "commitMessage": "Completed [JACKSON-669] implementation\n",
      "commitDate": "1/13/12, 10:25 PM",
      "commitName": "4dc01e735c57e1a3d6e79f819713efaf77998edb",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/13/12, 9:49 PM",
      "commitNameOld": "0a0ce59a9800a6532048eaf52a2d2c6a276116e3",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(name, m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapper);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 57,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,57 +1,57 @@\n protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     Field f;\n     Method m;\n     if (am instanceof AnnotatedField) {\n         m \u003d null;\n         f \u003d ((AnnotatedField) am).getAnnotated();\n     } else {\n         m \u003d ((AnnotatedMethod) am).getAnnotated();\n         f \u003d null;\n     }\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(name, m, f);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n-    String unwrapPrefix \u003d _annotationIntrospector.findUnwrapPrefix(am);\n-    if (unwrapPrefix !\u003d null) {\n-        bpw \u003d bpw.unwrappingWriter(unwrapPrefix);\n+    NameTransformer unwrapper \u003d _annotationIntrospector.findUnwrappingNameTransformer(am);\n+    if (unwrapper !\u003d null) {\n+        bpw \u003d bpw.unwrappingWriter(unwrapper);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a0ce59a9800a6532048eaf52a2d2c6a276116e3": {
      "type": "Ybodychange",
      "commitMessage": "First working version of prefix-for-unwrapped; may want to generalize to allow other kinds of name mangling strategies\n",
      "commitDate": "1/13/12, 9:49 PM",
      "commitName": "0a0ce59a9800a6532048eaf52a2d2c6a276116e3",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/12/12, 10:07 PM",
      "commitNameOld": "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.99,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(name, m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    String unwrapPrefix \u003d _annotationIntrospector.findUnwrapPrefix(am);\n    if (unwrapPrefix !\u003d null) {\n        bpw \u003d bpw.unwrappingWriter(unwrapPrefix);\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 57,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,57 +1,57 @@\n protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     Field f;\n     Method m;\n     if (am instanceof AnnotatedField) {\n         m \u003d null;\n         f \u003d ((AnnotatedField) am).getAnnotated();\n     } else {\n         m \u003d ((AnnotatedMethod) am).getAnnotated();\n         f \u003d null;\n     }\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(name, m, f);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n                 valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n                 if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                     valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n-    Boolean unwrapped \u003d _annotationIntrospector.shouldUnwrapProperty(am);\n-    if (unwrapped !\u003d null \u0026\u0026 unwrapped.booleanValue()) {\n-        bpw \u003d bpw.unwrappingWriter();\n+    String unwrapPrefix \u003d _annotationIntrospector.findUnwrapPrefix(am);\n+    if (unwrapPrefix !\u003d null) {\n+        bpw \u003d bpw.unwrappingWriter(unwrapPrefix);\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4": {
      "type": "Yformatchange",
      "commitMessage": "Completed [JACKSON-695] implementation with tests.\n",
      "commitDate": "1/12/12, 10:07 PM",
      "commitName": "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/12/12, 9:52 PM",
      "commitNameOld": "418a239a360683f065ea18fb4d1cb8d40c646c8e",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(name, m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    Boolean unwrapped \u003d _annotationIntrospector.shouldUnwrapProperty(am);\n    if (unwrapped !\u003d null \u0026\u0026 unwrapped.booleanValue()) {\n        bpw \u003d bpw.unwrappingWriter();\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 57,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "",
      "extendedDetails": {}
    },
    "418a239a360683f065ea18fb4d1cb8d40c646c8e": {
      "type": "Ybodychange",
      "commitMessage": "Adding unit tests for verifying \u0027isEmpty()\u0027, custom null value serialization\n",
      "commitDate": "1/12/12, 9:52 PM",
      "commitName": "418a239a360683f065ea18fb4d1cb8d40c646c8e",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/11/12, 10:14 PM",
      "commitNameOld": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(name, m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    Boolean unwrapped \u003d _annotationIntrospector.shouldUnwrapProperty(am);\n    if (unwrapped !\u003d null \u0026\u0026 unwrapped.booleanValue()) {\n        bpw \u003d bpw.unwrappingWriter();\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 57,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n",
      "diff": "@@ -1,57 +1,57 @@\n protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n     Field f;\n     Method m;\n     if (am instanceof AnnotatedField) {\n         m \u003d null;\n         f \u003d ((AnnotatedField) am).getAnnotated();\n     } else {\n         m \u003d ((AnnotatedMethod) am).getAnnotated();\n         f \u003d null;\n     }\n     JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n     if (contentTypeSer !\u003d null) {\n         if (serializationType \u003d\u003d null) {\n             serializationType \u003d declaredType;\n         }\n         JavaType ct \u003d serializationType.getContentType();\n         if (ct \u003d\u003d null) {\n             throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n         }\n         serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n         ct \u003d serializationType.getContentType();\n     }\n     Object valueToSuppress \u003d null;\n     boolean suppressNulls \u003d false;\n     JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n     if (methodProps !\u003d null) {\n         switch(methodProps) {\n             case NON_DEFAULT:\n                 valueToSuppress \u003d getDefaultValue(name, m, f);\n                 if (valueToSuppress \u003d\u003d null) {\n                     suppressNulls \u003d true;\n                 } else {\n                     if (valueToSuppress.getClass().isArray()) {\n                         valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                     }\n                 }\n                 break;\n             case NON_EMPTY:\n                 suppressNulls \u003d true;\n-                valueToSuppress \u003d getEmptyValueChecker(name, declaredType);\n+                valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 break;\n             case NON_NULL:\n                 suppressNulls \u003d true;\n             case ALWAYS:\n-                if (declaredType.isContainerType()) {\n-                    valueToSuppress \u003d getContainerValueChecker(name, declaredType);\n+                if (declaredType.isContainerType() \u0026\u0026 !_config.isEnabled(SerializationConfig.Feature.WRITE_EMPTY_JSON_ARRAYS)) {\n+                    valueToSuppress \u003d BeanPropertyWriter.MARKER_FOR_EMPTY;\n                 }\n                 break;\n         }\n     }\n     BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n     Boolean unwrapped \u003d _annotationIntrospector.shouldUnwrapProperty(am);\n     if (unwrapped !\u003d null \u0026\u0026 unwrapped.booleanValue()) {\n         bpw \u003d bpw.unwrappingWriter();\n     }\n     return bpw;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,57 @@\n+protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n+    Field f;\n+    Method m;\n+    if (am instanceof AnnotatedField) {\n+        m \u003d null;\n+        f \u003d ((AnnotatedField) am).getAnnotated();\n+    } else {\n+        m \u003d ((AnnotatedMethod) am).getAnnotated();\n+        f \u003d null;\n+    }\n+    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n+    if (contentTypeSer !\u003d null) {\n+        if (serializationType \u003d\u003d null) {\n+            serializationType \u003d declaredType;\n+        }\n+        JavaType ct \u003d serializationType.getContentType();\n+        if (ct \u003d\u003d null) {\n+            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n+        }\n+        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n+        ct \u003d serializationType.getContentType();\n+    }\n+    Object valueToSuppress \u003d null;\n+    boolean suppressNulls \u003d false;\n+    JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n+    if (methodProps !\u003d null) {\n+        switch(methodProps) {\n+            case NON_DEFAULT:\n+                valueToSuppress \u003d getDefaultValue(name, m, f);\n+                if (valueToSuppress \u003d\u003d null) {\n+                    suppressNulls \u003d true;\n+                } else {\n+                    if (valueToSuppress.getClass().isArray()) {\n+                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n+                    }\n+                }\n+                break;\n+            case NON_EMPTY:\n+                suppressNulls \u003d true;\n+                valueToSuppress \u003d getEmptyValueChecker(name, declaredType);\n+                break;\n+            case NON_NULL:\n+                suppressNulls \u003d true;\n+            case ALWAYS:\n+                if (declaredType.isContainerType()) {\n+                    valueToSuppress \u003d getContainerValueChecker(name, declaredType);\n+                }\n+                break;\n+        }\n+    }\n+    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n+    Boolean unwrapped \u003d _annotationIntrospector.shouldUnwrapProperty(am);\n+    if (unwrapped !\u003d null \u0026\u0026 unwrapped.booleanValue()) {\n+        bpw \u003d bpw.unwrappingWriter();\n+    }\n+    return bpw;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected BeanPropertyWriter buildWriter(String name, JavaType declaredType, JsonSerializer\u003cObject\u003e ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) {\n    Field f;\n    Method m;\n    if (am instanceof AnnotatedField) {\n        m \u003d null;\n        f \u003d ((AnnotatedField) am).getAnnotated();\n    } else {\n        m \u003d ((AnnotatedMethod) am).getAnnotated();\n        f \u003d null;\n    }\n    JavaType serializationType \u003d findSerializationType(am, defaultUseStaticTyping, declaredType);\n    if (contentTypeSer !\u003d null) {\n        if (serializationType \u003d\u003d null) {\n            serializationType \u003d declaredType;\n        }\n        JavaType ct \u003d serializationType.getContentType();\n        if (ct \u003d\u003d null) {\n            throw new IllegalStateException(\"Problem trying to create BeanPropertyWriter for property \u0027\" + name + \"\u0027 (of type \" + _beanDesc.getType() + \"); serialization type \" + serializationType + \" has no content\");\n        }\n        serializationType \u003d serializationType.withContentTypeHandler(contentTypeSer);\n        ct \u003d serializationType.getContentType();\n    }\n    Object valueToSuppress \u003d null;\n    boolean suppressNulls \u003d false;\n    JsonSerialize.Inclusion methodProps \u003d _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n    if (methodProps !\u003d null) {\n        switch(methodProps) {\n            case NON_DEFAULT:\n                valueToSuppress \u003d getDefaultValue(name, m, f);\n                if (valueToSuppress \u003d\u003d null) {\n                    suppressNulls \u003d true;\n                } else {\n                    if (valueToSuppress.getClass().isArray()) {\n                        valueToSuppress \u003d Comparators.getArrayComparator(valueToSuppress);\n                    }\n                }\n                break;\n            case NON_EMPTY:\n                suppressNulls \u003d true;\n                valueToSuppress \u003d getEmptyValueChecker(name, declaredType);\n                break;\n            case NON_NULL:\n                suppressNulls \u003d true;\n            case ALWAYS:\n                if (declaredType.isContainerType()) {\n                    valueToSuppress \u003d getContainerValueChecker(name, declaredType);\n                }\n                break;\n        }\n    }\n    BeanPropertyWriter bpw \u003d new BeanPropertyWriter(am, _beanDesc.getClassAnnotations(), name, declaredType, ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n    Boolean unwrapped \u003d _annotationIntrospector.shouldUnwrapProperty(am);\n    if (unwrapped !\u003d null \u0026\u0026 unwrapped.booleanValue()) {\n        bpw \u003d bpw.unwrappingWriter();\n    }\n    return bpw;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
      "functionStartLine": 61,
      "functionName": "buildWriter",
      "functionAnnotation": "",
      "functionDoc": "\n@param contentTypeSer Optional explicit type information serializer\n   to use for contained values (only used for properties that are\n   of container type)\n"
    }
  }
}