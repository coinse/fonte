{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanPropertyWriter.java",
  "functionName": "serializeAsField",
  "functionId": "serializeAsField___bean-Object__gen-JsonGenerator__prov-SerializerProvider",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
  "functionStartLine": 533,
  "functionEndLine": 579,
  "numCommitsSeen": 114,
  "timeTaken": 1994,
  "changeHistory": [
    "377aab01b89b2468856d3314cc389c5e3c2cde77",
    "9ae36103eaabd14fb6a7b5fbdfb3a88272fc7a94",
    "1fc74a79abf7651cac003fe314a68933c3a993af",
    "991d17fe57a4a3de70aa832b1620c22017fa9406",
    "76793f149d8ac935247eab3b1297536429d58ad1",
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
    "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4",
    "418a239a360683f065ea18fb4d1cb8d40c646c8e",
    "56e8e6c7d057e6acf2d3dce98e6802cbbee48c57",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "377aab01b89b2468856d3314cc389c5e3c2cde77": "Ymultichange(Yparameterchange,Ybodychange)",
    "9ae36103eaabd14fb6a7b5fbdfb3a88272fc7a94": "Ybodychange",
    "1fc74a79abf7651cac003fe314a68933c3a993af": "Ybodychange",
    "991d17fe57a4a3de70aa832b1620c22017fa9406": "Ybodychange",
    "76793f149d8ac935247eab3b1297536429d58ad1": "Yannotationchange",
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664": "Ybodychange",
    "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4": "Ybodychange",
    "418a239a360683f065ea18fb4d1cb8d40c646c8e": "Ybodychange",
    "56e8e6c7d057e6acf2d3dce98e6802cbbee48c57": "Yformatchange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "377aab01b89b2468856d3314cc389c5e3c2cde77": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Some work wrt #588; minor refactoring to support custom ObjectWriter sub-classes\n",
      "commitDate": "12/14/14, 7:05 PM",
      "commitName": "377aab01b89b2468856d3314cc389c5e3c2cde77",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Some work wrt #588; minor refactoring to support custom ObjectWriter sub-classes\n",
          "commitDate": "12/14/14, 7:05 PM",
          "commitName": "377aab01b89b2468856d3314cc389c5e3c2cde77",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/8/14, 5:03 PM",
          "commitNameOld": "73a87db9650dd7e8db57727b7598c68e7c46e6ff",
          "commitAuthorOld": "Cowtowncoder",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n    final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            gen.writeFieldName(_name);\n            _nullSerializer.serialize(null, gen, prov);\n        }\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap m \u003d _dynamicSerializers;\n        ser \u003d m.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(m, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(prov, value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    if (value \u003d\u003d bean) {\n        if (_handleSelfReference(bean, gen, prov, ser)) {\n            return;\n        }\n    }\n    gen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, gen, prov);\n    } else {\n        ser.serializeWithType(value, gen, prov, _typeSerializer);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
          "functionStartLine": 533,
          "functionName": "serializeAsField",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
          "diff": "@@ -1,40 +1,40 @@\n @Override\n-public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n+public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n     final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n-            jgen.writeFieldName(_name);\n-            _nullSerializer.serialize(null, jgen, prov);\n+            gen.writeFieldName(_name);\n+            _nullSerializer.serialize(null, gen, prov);\n         }\n         return;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap m \u003d _dynamicSerializers;\n         ser \u003d m.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(m, cls, prov);\n         }\n     }\n     if (_suppressableValue !\u003d null) {\n         if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n-            if (ser.isEmpty(value)) {\n+            if (ser.isEmpty(prov, value)) {\n                 return;\n             }\n         } else if (_suppressableValue.equals(value)) {\n             return;\n         }\n     }\n     if (value \u003d\u003d bean) {\n-        if (_handleSelfReference(bean, jgen, prov, ser)) {\n+        if (_handleSelfReference(bean, gen, prov, ser)) {\n             return;\n         }\n     }\n-    jgen.writeFieldName(_name);\n+    gen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n-        ser.serialize(value, jgen, prov);\n+        ser.serialize(value, gen, prov);\n     } else {\n-        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n+        ser.serializeWithType(value, gen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[bean-Object, jgen-JsonGenerator, prov-SerializerProvider]",
            "newValue": "[bean-Object, gen-JsonGenerator, prov-SerializerProvider]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Some work wrt #588; minor refactoring to support custom ObjectWriter sub-classes\n",
          "commitDate": "12/14/14, 7:05 PM",
          "commitName": "377aab01b89b2468856d3314cc389c5e3c2cde77",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "12/8/14, 5:03 PM",
          "commitNameOld": "73a87db9650dd7e8db57727b7598c68e7c46e6ff",
          "commitAuthorOld": "Cowtowncoder",
          "daysBetweenCommits": 6.08,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n    final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            gen.writeFieldName(_name);\n            _nullSerializer.serialize(null, gen, prov);\n        }\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap m \u003d _dynamicSerializers;\n        ser \u003d m.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(m, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(prov, value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    if (value \u003d\u003d bean) {\n        if (_handleSelfReference(bean, gen, prov, ser)) {\n            return;\n        }\n    }\n    gen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, gen, prov);\n    } else {\n        ser.serializeWithType(value, gen, prov, _typeSerializer);\n    }\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
          "functionStartLine": 533,
          "functionName": "serializeAsField",
          "functionAnnotation": "@Override",
          "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
          "diff": "@@ -1,40 +1,40 @@\n @Override\n-public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n+public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception {\n     final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n-            jgen.writeFieldName(_name);\n-            _nullSerializer.serialize(null, jgen, prov);\n+            gen.writeFieldName(_name);\n+            _nullSerializer.serialize(null, gen, prov);\n         }\n         return;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap m \u003d _dynamicSerializers;\n         ser \u003d m.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(m, cls, prov);\n         }\n     }\n     if (_suppressableValue !\u003d null) {\n         if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n-            if (ser.isEmpty(value)) {\n+            if (ser.isEmpty(prov, value)) {\n                 return;\n             }\n         } else if (_suppressableValue.equals(value)) {\n             return;\n         }\n     }\n     if (value \u003d\u003d bean) {\n-        if (_handleSelfReference(bean, jgen, prov, ser)) {\n+        if (_handleSelfReference(bean, gen, prov, ser)) {\n             return;\n         }\n     }\n-    jgen.writeFieldName(_name);\n+    gen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n-        ser.serialize(value, jgen, prov);\n+        ser.serialize(value, gen, prov);\n     } else {\n-        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n+        ser.serializeWithType(value, gen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9ae36103eaabd14fb6a7b5fbdfb3a88272fc7a94": {
      "type": "Ybodychange",
      "commitMessage": "Minor streamlining of BeanPropertyWriter; update release notes\n",
      "commitDate": "6/9/14, 4:55 PM",
      "commitName": "9ae36103eaabd14fb6a7b5fbdfb3a88272fc7a94",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/29/14, 3:00 PM",
      "commitNameOld": "4becc49b72b58e25270896c1e37bfb5e08ba8a20",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 41.08,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            jgen.writeFieldName(_name);\n            _nullSerializer.serialize(null, jgen, prov);\n        }\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap m \u003d _dynamicSerializers;\n        ser \u003d m.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(m, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    if (value \u003d\u003d bean) {\n        if (_handleSelfReference(bean, jgen, prov, ser)) {\n            return;\n        }\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 463,
      "functionName": "serializeAsField",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "@@ -1,40 +1,40 @@\n @Override\n public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n-    Object value \u003d get(bean);\n+    final Object value \u003d (_accessorMethod \u003d\u003d null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n             jgen.writeFieldName(_name);\n             _nullSerializer.serialize(null, jgen, prov);\n         }\n         return;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap m \u003d _dynamicSerializers;\n         ser \u003d m.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(m, cls, prov);\n         }\n     }\n     if (_suppressableValue !\u003d null) {\n         if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n             if (ser.isEmpty(value)) {\n                 return;\n             }\n         } else if (_suppressableValue.equals(value)) {\n             return;\n         }\n     }\n     if (value \u003d\u003d bean) {\n         if (_handleSelfReference(bean, jgen, prov, ser)) {\n             return;\n         }\n     }\n     jgen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n         ser.serialize(value, jgen, prov);\n     } else {\n         ser.serializeWithType(value, jgen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1fc74a79abf7651cac003fe314a68933c3a993af": {
      "type": "Ybodychange",
      "commitMessage": "Implement #405\n",
      "commitDate": "2/13/14, 5:21 PM",
      "commitName": "1fc74a79abf7651cac003fe314a68933c3a993af",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/26/14, 11:06 AM",
      "commitNameOld": "991d17fe57a4a3de70aa832b1620c22017fa9406",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 18.26,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            jgen.writeFieldName(_name);\n            _nullSerializer.serialize(null, jgen, prov);\n        }\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap m \u003d _dynamicSerializers;\n        ser \u003d m.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(m, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    if (value \u003d\u003d bean) {\n        if (_handleSelfReference(bean, jgen, prov, ser)) {\n            return;\n        }\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 458,
      "functionName": "serializeAsField",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "@@ -1,38 +1,40 @@\n @Override\n public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n     Object value \u003d get(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n             jgen.writeFieldName(_name);\n             _nullSerializer.serialize(null, jgen, prov);\n         }\n         return;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap m \u003d _dynamicSerializers;\n         ser \u003d m.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(m, cls, prov);\n         }\n     }\n     if (_suppressableValue !\u003d null) {\n         if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n             if (ser.isEmpty(value)) {\n                 return;\n             }\n         } else if (_suppressableValue.equals(value)) {\n             return;\n         }\n     }\n     if (value \u003d\u003d bean) {\n-        _handleSelfReference(bean, ser);\n+        if (_handleSelfReference(bean, jgen, prov, ser)) {\n+            return;\n+        }\n     }\n     jgen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n         ser.serialize(value, jgen, prov);\n     } else {\n         ser.serializeWithType(value, jgen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "991d17fe57a4a3de70aa832b1620c22017fa9406": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "1/26/14, 11:06 AM",
      "commitName": "991d17fe57a4a3de70aa832b1620c22017fa9406",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/20/14, 9:02 PM",
      "commitNameOld": "f4b6730ac7a72b9b22db9f2b1370f507d4c32438",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 5.59,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            jgen.writeFieldName(_name);\n            _nullSerializer.serialize(null, jgen, prov);\n        }\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap m \u003d _dynamicSerializers;\n        ser \u003d m.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(m, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    if (value \u003d\u003d bean) {\n        _handleSelfReference(bean, ser);\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 457,
      "functionName": "serializeAsField",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "@@ -1,38 +1,38 @@\n @Override\n public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n     Object value \u003d get(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n             jgen.writeFieldName(_name);\n             _nullSerializer.serialize(null, jgen, prov);\n         }\n         return;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n-        PropertySerializerMap map \u003d _dynamicSerializers;\n-        ser \u003d map.serializerFor(cls);\n+        PropertySerializerMap m \u003d _dynamicSerializers;\n+        ser \u003d m.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n-            ser \u003d _findAndAddDynamic(map, cls, prov);\n+            ser \u003d _findAndAddDynamic(m, cls, prov);\n         }\n     }\n     if (_suppressableValue !\u003d null) {\n         if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n             if (ser.isEmpty(value)) {\n                 return;\n             }\n         } else if (_suppressableValue.equals(value)) {\n             return;\n         }\n     }\n     if (value \u003d\u003d bean) {\n         _handleSelfReference(bean, ser);\n     }\n     jgen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n         ser.serialize(value, jgen, prov);\n     } else {\n         ser.serializeWithType(value, jgen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "76793f149d8ac935247eab3b1297536429d58ad1": {
      "type": "Yannotationchange",
      "commitMessage": "Trying to refactor things to make it possible to filter non-Bean types (maps; any setters)\n",
      "commitDate": "10/15/13, 9:36 PM",
      "commitName": "76793f149d8ac935247eab3b1297536429d58ad1",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/19/13, 9:36 PM",
      "commitNameOld": "eaa7c187d6fa83554fadbf7f362ddaa61f331d9c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 26.0,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            jgen.writeFieldName(_name);\n            _nullSerializer.serialize(null, jgen, prov);\n        }\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap map \u003d _dynamicSerializers;\n        ser \u003d map.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(map, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    if (value \u003d\u003d bean) {\n        _handleSelfReference(bean, ser);\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 503,
      "functionName": "serializeAsField",
      "functionAnnotation": "@Override",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "@@ -1,37 +1,38 @@\n+@Override\n public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n     Object value \u003d get(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n             jgen.writeFieldName(_name);\n             _nullSerializer.serialize(null, jgen, prov);\n         }\n         return;\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap map \u003d _dynamicSerializers;\n         ser \u003d map.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(map, cls, prov);\n         }\n     }\n     if (_suppressableValue !\u003d null) {\n         if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n             if (ser.isEmpty(value)) {\n                 return;\n             }\n         } else if (_suppressableValue.equals(value)) {\n             return;\n         }\n     }\n     if (value \u003d\u003d bean) {\n         _handleSelfReference(bean, ser);\n     }\n     jgen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n         ser.serialize(value, jgen, prov);\n     } else {\n         ser.serializeWithType(value, jgen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "5c8f8106d18b17afd31c4048f91e3ad3f726f664": {
      "type": "Ybodychange",
      "commitMessage": "Implement serialization part of [JACKSON-107]\n",
      "commitDate": "2/5/12, 6:10 PM",
      "commitName": "5c8f8106d18b17afd31c4048f91e3ad3f726f664",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            jgen.writeFieldName(_name);\n            _nullSerializer.serialize(null, jgen, prov);\n        }\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap map \u003d _dynamicSerializers;\n        ser \u003d map.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(map, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    if (value \u003d\u003d bean) {\n        _handleSelfReference(bean, ser);\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 426,
      "functionName": "serializeAsField",
      "functionAnnotation": "",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "@@ -1,37 +1,37 @@\n public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n     Object value \u003d get(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n             jgen.writeFieldName(_name);\n             _nullSerializer.serialize(null, jgen, prov);\n         }\n         return;\n     }\n-    if (value \u003d\u003d bean) {\n-        _reportSelfReference(bean);\n-    }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap map \u003d _dynamicSerializers;\n         ser \u003d map.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(map, cls, prov);\n         }\n     }\n     if (_suppressableValue !\u003d null) {\n         if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n             if (ser.isEmpty(value)) {\n                 return;\n             }\n         } else if (_suppressableValue.equals(value)) {\n             return;\n         }\n     }\n+    if (value \u003d\u003d bean) {\n+        _handleSelfReference(bean, ser);\n+    }\n     jgen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n         ser.serialize(value, jgen, prov);\n     } else {\n         ser.serializeWithType(value, jgen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4": {
      "type": "Ybodychange",
      "commitMessage": "Completed [JACKSON-695] implementation with tests.\n",
      "commitDate": "1/12/12, 10:07 PM",
      "commitName": "4e7c4709f9b95349a0a3a4f9f93d2549626d0cf4",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/12/12, 9:52 PM",
      "commitNameOld": "418a239a360683f065ea18fb4d1cb8d40c646c8e",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            jgen.writeFieldName(_name);\n            _nullSerializer.serialize(null, jgen, prov);\n        }\n        return;\n    }\n    if (value \u003d\u003d bean) {\n        _reportSelfReference(bean);\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap map \u003d _dynamicSerializers;\n        ser \u003d map.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(map, cls, prov);\n        }\n    }\n    if (_suppressableValue !\u003d null) {\n        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n            if (ser.isEmpty(value)) {\n                return;\n            }\n        } else if (_suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 417,
      "functionName": "serializeAsField",
      "functionAnnotation": "",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "@@ -1,33 +1,37 @@\n public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n     Object value \u003d get(bean);\n     if (value \u003d\u003d null) {\n         if (_nullSerializer !\u003d null) {\n             jgen.writeFieldName(_name);\n             _nullSerializer.serialize(null, jgen, prov);\n         }\n         return;\n     }\n     if (value \u003d\u003d bean) {\n         _reportSelfReference(bean);\n     }\n-    if (_suppressableValue !\u003d null) {\n-        if ((MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) || _suppressableValue.equals(value)) {\n-            return;\n-        }\n-    }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap map \u003d _dynamicSerializers;\n         ser \u003d map.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(map, cls, prov);\n         }\n     }\n+    if (_suppressableValue !\u003d null) {\n+        if (MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) {\n+            if (ser.isEmpty(value)) {\n+                return;\n+            }\n+        } else if (_suppressableValue.equals(value)) {\n+            return;\n+        }\n+    }\n     jgen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n         ser.serialize(value, jgen, prov);\n     } else {\n         ser.serializeWithType(value, jgen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "418a239a360683f065ea18fb4d1cb8d40c646c8e": {
      "type": "Ybodychange",
      "commitMessage": "Adding unit tests for verifying \u0027isEmpty()\u0027, custom null value serialization\n",
      "commitDate": "1/12/12, 9:52 PM",
      "commitName": "418a239a360683f065ea18fb4d1cb8d40c646c8e",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/12/12, 4:09 PM",
      "commitNameOld": "56e8e6c7d057e6acf2d3dce98e6802cbbee48c57",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (_nullSerializer !\u003d null) {\n            jgen.writeFieldName(_name);\n            _nullSerializer.serialize(null, jgen, prov);\n        }\n        return;\n    }\n    if (value \u003d\u003d bean) {\n        _reportSelfReference(bean);\n    }\n    if (_suppressableValue !\u003d null) {\n        if ((MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) || _suppressableValue.equals(value)) {\n            return;\n        }\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap map \u003d _dynamicSerializers;\n        ser \u003d map.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(map, cls, prov);\n        }\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 417,
      "functionName": "serializeAsField",
      "functionAnnotation": "",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "@@ -1,31 +1,33 @@\n public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n     Object value \u003d get(bean);\n     if (value \u003d\u003d null) {\n-        if (!_suppressNulls) {\n+        if (_nullSerializer !\u003d null) {\n             jgen.writeFieldName(_name);\n-            prov.defaultSerializeNull(jgen);\n+            _nullSerializer.serialize(null, jgen, prov);\n         }\n         return;\n     }\n     if (value \u003d\u003d bean) {\n         _reportSelfReference(bean);\n     }\n-    if (_suppressableValue !\u003d null \u0026\u0026 _suppressableValue.equals(value)) {\n-        return;\n+    if (_suppressableValue !\u003d null) {\n+        if ((MARKER_FOR_EMPTY \u003d\u003d _suppressableValue) || _suppressableValue.equals(value)) {\n+            return;\n+        }\n     }\n     JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n     if (ser \u003d\u003d null) {\n         Class\u003c?\u003e cls \u003d value.getClass();\n         PropertySerializerMap map \u003d _dynamicSerializers;\n         ser \u003d map.serializerFor(cls);\n         if (ser \u003d\u003d null) {\n             ser \u003d _findAndAddDynamic(map, cls, prov);\n         }\n     }\n     jgen.writeFieldName(_name);\n     if (_typeSerializer \u003d\u003d null) {\n         ser.serialize(value, jgen, prov);\n     } else {\n         ser.serializeWithType(value, jgen, prov, _typeSerializer);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "56e8e6c7d057e6acf2d3dce98e6802cbbee48c57": {
      "type": "Yformatchange",
      "commitMessage": "Starting to add support for customizable \u0027is-empty\u0027 handling\n",
      "commitDate": "1/12/12, 4:09 PM",
      "commitName": "56e8e6c7d057e6acf2d3dce98e6802cbbee48c57",
      "commitAuthor": "Tatu",
      "commitDateOld": "12/23/11, 8:05 PM",
      "commitNameOld": "df6302f807bb230ae985a35100cbcc30af523bd1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 19.84,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (!_suppressNulls) {\n            jgen.writeFieldName(_name);\n            prov.defaultSerializeNull(jgen);\n        }\n        return;\n    }\n    if (value \u003d\u003d bean) {\n        _reportSelfReference(bean);\n    }\n    if (_suppressableValue !\u003d null \u0026\u0026 _suppressableValue.equals(value)) {\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap map \u003d _dynamicSerializers;\n        ser \u003d map.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(map, cls, prov);\n        }\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 396,
      "functionName": "serializeAsField",
      "functionAnnotation": "",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,31 @@\n+public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n+    Object value \u003d get(bean);\n+    if (value \u003d\u003d null) {\n+        if (!_suppressNulls) {\n+            jgen.writeFieldName(_name);\n+            prov.defaultSerializeNull(jgen);\n+        }\n+        return;\n+    }\n+    if (value \u003d\u003d bean) {\n+        _reportSelfReference(bean);\n+    }\n+    if (_suppressableValue !\u003d null \u0026\u0026 _suppressableValue.equals(value)) {\n+        return;\n+    }\n+    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n+    if (ser \u003d\u003d null) {\n+        Class\u003c?\u003e cls \u003d value.getClass();\n+        PropertySerializerMap map \u003d _dynamicSerializers;\n+        ser \u003d map.serializerFor(cls);\n+        if (ser \u003d\u003d null) {\n+            ser \u003d _findAndAddDynamic(map, cls, prov);\n+        }\n+    }\n+    jgen.writeFieldName(_name);\n+    if (_typeSerializer \u003d\u003d null) {\n+        ser.serialize(value, jgen, prov);\n+    } else {\n+        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {\n    Object value \u003d get(bean);\n    if (value \u003d\u003d null) {\n        if (!_suppressNulls) {\n            jgen.writeFieldName(_name);\n            prov.defaultSerializeNull(jgen);\n        }\n        return;\n    }\n    if (value \u003d\u003d bean) {\n        _reportSelfReference(bean);\n    }\n    if (_suppressableValue !\u003d null \u0026\u0026 _suppressableValue.equals(value)) {\n        return;\n    }\n    JsonSerializer\u003cObject\u003e ser \u003d _serializer;\n    if (ser \u003d\u003d null) {\n        Class\u003c?\u003e cls \u003d value.getClass();\n        PropertySerializerMap map \u003d _dynamicSerializers;\n        ser \u003d map.serializerFor(cls);\n        if (ser \u003d\u003d null) {\n            ser \u003d _findAndAddDynamic(map, cls, prov);\n        }\n    }\n    jgen.writeFieldName(_name);\n    if (_typeSerializer \u003d\u003d null) {\n        ser.serialize(value, jgen, prov);\n    } else {\n        ser.serializeWithType(value, jgen, prov, _typeSerializer);\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
      "functionStartLine": 416,
      "functionName": "serializeAsField",
      "functionAnnotation": "",
      "functionDoc": "Method called to access property that this bean stands for, from\nwithin given bean, and to serialize it as a JSON Object field\nusing appropriate serializer.\n"
    }
  }
}