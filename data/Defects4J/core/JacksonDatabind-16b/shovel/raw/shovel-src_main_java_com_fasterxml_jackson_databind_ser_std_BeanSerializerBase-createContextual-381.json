{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanSerializerBase.java",
  "functionName": "createContextual",
  "functionId": "createContextual___provider-SerializerProvider__property-BeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
  "functionAnnotation": "@SuppressWarnings(\"incomplete-switch\"),@Override",
  "functionDoc": "",
  "functionStartLine": 381,
  "functionEndLine": 514,
  "numCommitsSeen": 106,
  "timeTaken": 4188,
  "changeHistory": [
    "2e9defec2dc83e9b1e436f5f9223d685c776da32",
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
    "bb0e2b5edd644e9dd438c29675678a802bbe8f7a",
    "1488cef12ee88e25dd0161f1b85c552a32775778",
    "e05e352f53245160fe761b88665f11f67cef9d43",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
    "6cada0a47ed675fffe15697968dfef68864b57e7",
    "2b4086a9372b2129585bdf217d84f6313076c8ec",
    "dc65cc043479dd03dad878b22a9e5864e2e53bd7",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
    "15212e8d7438bd862574c652e0419879d8b720c4",
    "ae6c82872056dfad0ef2b1f1a32231450d5a2800",
    "557bcd3d55fa779e40251506d159468bfe96fe04",
    "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
    "58077e9d135f0285a361a1d89b3767c5ece0095a",
    "d453182b63249c2c597a54229a4242e1ce1921d0"
  ],
  "changeHistoryShort": {
    "2e9defec2dc83e9b1e436f5f9223d685c776da32": "Ymultichange(Ybodychange,Yannotationchange)",
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": "Ybodychange",
    "bb0e2b5edd644e9dd438c29675678a802bbe8f7a": "Ybodychange",
    "1488cef12ee88e25dd0161f1b85c552a32775778": "Ybodychange",
    "e05e352f53245160fe761b88665f11f67cef9d43": "Ybodychange",
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": "Yannotationchange",
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2": "Ybodychange",
    "6cada0a47ed675fffe15697968dfef68864b57e7": "Ybodychange",
    "2b4086a9372b2129585bdf217d84f6313076c8ec": "Ybodychange",
    "dc65cc043479dd03dad878b22a9e5864e2e53bd7": "Ybodychange",
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": "Yannotationchange",
    "15212e8d7438bd862574c652e0419879d8b720c4": "Ybodychange",
    "ae6c82872056dfad0ef2b1f1a32231450d5a2800": "Ybodychange",
    "557bcd3d55fa779e40251506d159468bfe96fe04": "Ybodychange",
    "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4": "Ybodychange",
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": "Ybodychange",
    "58077e9d135f0285a361a1d89b3767c5ece0095a": "Ymultichange(Yparameterchange,Ybodychange)",
    "d453182b63249c2c597a54229a4242e1ce1921d0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e9defec2dc83e9b1e436f5f9223d685c776da32": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Fix #572\n",
      "commitDate": "10/12/14, 3:24 PM",
      "commitName": "2e9defec2dc83e9b1e436f5f9223d685c776da32",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fix #572\n",
          "commitDate": "10/12/14, 3:24 PM",
          "commitName": "2e9defec2dc83e9b1e436f5f9223d685c776da32",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/14, 7:59 AM",
          "commitNameOld": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
          "commitAuthorOld": "Pascal GÃ©linas",
          "daysBetweenCommits": 244.27,
          "commitsBetweenForRepo": 356,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"incomplete-switch\")\n@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    final SerializationConfig config \u003d provider.getConfig();\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n            if (shape !\u003d _serializationShape) {\n                if (_handledType.isEnum()) {\n                    switch(shape) {\n                        case STRING:\n                        case NUMBER:\n                        case NUMBER_INT:\n                            BeanDescription desc \u003d config.introspectClassAnnotations(_handledType);\n                            JsonSerializer\u003c?\u003e ser \u003d EnumSerializer.construct(_handledType, provider.getConfig(), desc, format);\n                            return provider.handlePrimaryContextualization(ser, property);\n                    }\n                }\n            }\n        }\n    }\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    Object newFilterId \u003d null;\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n        Object filterId \u003d intr.findFilterId(accessor);\n        if (filterId !\u003d null) {\n            if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n                newFilterId \u003d filterId;\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    if (newFilterId !\u003d null) {\n        contextual \u003d contextual.withFilterId(newFilterId);\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        return contextual.asArraySerializer();\n    }\n    return contextual;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 374,
          "functionName": "createContextual",
          "functionAnnotation": "@SuppressWarnings(\"incomplete-switch\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,87 +1,101 @@\n+@SuppressWarnings(\"incomplete-switch\")\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n+    final SerializationConfig config \u003d provider.getConfig();\n+    JsonFormat.Shape shape \u003d null;\n+    if (accessor !\u003d null) {\n+        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n+        if (format !\u003d null) {\n+            shape \u003d format.getShape();\n+            if (shape !\u003d _serializationShape) {\n+                if (_handledType.isEnum()) {\n+                    switch(shape) {\n+                        case STRING:\n+                        case NUMBER:\n+                        case NUMBER_INT:\n+                            BeanDescription desc \u003d config.introspectClassAnnotations(_handledType);\n+                            JsonSerializer\u003c?\u003e ser \u003d EnumSerializer.construct(_handledType, provider.getConfig(), desc, format);\n+                            return provider.handlePrimaryContextualization(ser, property);\n+                    }\n+                }\n+            }\n+        }\n+    }\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     Object newFilterId \u003d null;\n-    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n-    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo \u003d\u003d null) {\n             if (oiw !\u003d null) {\n                 objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                 oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n             }\n         } else {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n         Object filterId \u003d intr.findFilterId(accessor);\n         if (filterId !\u003d null) {\n             if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n                 newFilterId \u003d filterId;\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     if (newFilterId !\u003d null) {\n         contextual \u003d contextual.withFilterId(newFilterId);\n     }\n-    JsonFormat.Shape shape \u003d null;\n-    if (accessor !\u003d null) {\n-        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n-        if (format !\u003d null) {\n-            shape \u003d format.getShape();\n-        }\n-    }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n-        contextual \u003d contextual.asArraySerializer();\n+        return contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Fix #572\n",
          "commitDate": "10/12/14, 3:24 PM",
          "commitName": "2e9defec2dc83e9b1e436f5f9223d685c776da32",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/10/14, 7:59 AM",
          "commitNameOld": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
          "commitAuthorOld": "Pascal GÃ©linas",
          "daysBetweenCommits": 244.27,
          "commitsBetweenForRepo": 356,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"incomplete-switch\")\n@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    final SerializationConfig config \u003d provider.getConfig();\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n            if (shape !\u003d _serializationShape) {\n                if (_handledType.isEnum()) {\n                    switch(shape) {\n                        case STRING:\n                        case NUMBER:\n                        case NUMBER_INT:\n                            BeanDescription desc \u003d config.introspectClassAnnotations(_handledType);\n                            JsonSerializer\u003c?\u003e ser \u003d EnumSerializer.construct(_handledType, provider.getConfig(), desc, format);\n                            return provider.handlePrimaryContextualization(ser, property);\n                    }\n                }\n            }\n        }\n    }\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    Object newFilterId \u003d null;\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n        Object filterId \u003d intr.findFilterId(accessor);\n        if (filterId !\u003d null) {\n            if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n                newFilterId \u003d filterId;\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    if (newFilterId !\u003d null) {\n        contextual \u003d contextual.withFilterId(newFilterId);\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        return contextual.asArraySerializer();\n    }\n    return contextual;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 374,
          "functionName": "createContextual",
          "functionAnnotation": "@SuppressWarnings(\"incomplete-switch\"),@Override",
          "functionDoc": "",
          "diff": "@@ -1,87 +1,101 @@\n+@SuppressWarnings(\"incomplete-switch\")\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n+    final SerializationConfig config \u003d provider.getConfig();\n+    JsonFormat.Shape shape \u003d null;\n+    if (accessor !\u003d null) {\n+        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n+        if (format !\u003d null) {\n+            shape \u003d format.getShape();\n+            if (shape !\u003d _serializationShape) {\n+                if (_handledType.isEnum()) {\n+                    switch(shape) {\n+                        case STRING:\n+                        case NUMBER:\n+                        case NUMBER_INT:\n+                            BeanDescription desc \u003d config.introspectClassAnnotations(_handledType);\n+                            JsonSerializer\u003c?\u003e ser \u003d EnumSerializer.construct(_handledType, provider.getConfig(), desc, format);\n+                            return provider.handlePrimaryContextualization(ser, property);\n+                    }\n+                }\n+            }\n+        }\n+    }\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     Object newFilterId \u003d null;\n-    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n-    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo \u003d\u003d null) {\n             if (oiw !\u003d null) {\n                 objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                 oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n             }\n         } else {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n         Object filterId \u003d intr.findFilterId(accessor);\n         if (filterId !\u003d null) {\n             if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n                 newFilterId \u003d filterId;\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     if (newFilterId !\u003d null) {\n         contextual \u003d contextual.withFilterId(newFilterId);\n     }\n-    JsonFormat.Shape shape \u003d null;\n-    if (accessor !\u003d null) {\n-        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n-        if (format !\u003d null) {\n-            shape \u003d format.getShape();\n-        }\n-    }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n-        contextual \u003d contextual.asArraySerializer();\n+        return contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": "@SuppressWarnings(\"incomplete-switch\"),@Override"
          }
        }
      ]
    },
    "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d": {
      "type": "Ybodychange",
      "commitMessage": "Implementation of custom object id resolution.\n",
      "commitDate": "2/10/14, 7:59 AM",
      "commitName": "184cae3c98f8af8813afebe875b5a9bc2b2bbe4d",
      "commitAuthor": "Pascal GÃ©linas",
      "commitDateOld": "1/28/14, 7:07 AM",
      "commitNameOld": "06cc19bc7bf762836d625c75e63ec336723a2d0b",
      "commitAuthorOld": "Pascal GÃ©linas",
      "daysBetweenCommits": 13.04,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    Object newFilterId \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n        Object filterId \u003d intr.findFilterId(accessor);\n        if (filterId !\u003d null) {\n            if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n                newFilterId \u003d filterId;\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    if (newFilterId !\u003d null) {\n        contextual \u003d contextual.withFilterId(newFilterId);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 373,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,87 +1,87 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     Object newFilterId \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo \u003d\u003d null) {\n             if (oiw !\u003d null) {\n-                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null));\n+                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n                 oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n             }\n         } else {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n         Object filterId \u003d intr.findFilterId(accessor);\n         if (filterId !\u003d null) {\n             if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n                 newFilterId \u003d filterId;\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     if (newFilterId !\u003d null) {\n         contextual \u003d contextual.withFilterId(newFilterId);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb0e2b5edd644e9dd438c29675678a802bbe8f7a": {
      "type": "Ybodychange",
      "commitMessage": "Implement #306\n",
      "commitDate": "9/12/13, 9:07 PM",
      "commitName": "bb0e2b5edd644e9dd438c29675678a802bbe8f7a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/10/13, 9:37 AM",
      "commitNameOld": "bc38763d9ce4058b8354fbe8e6476d3affa74946",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 33.48,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    Object newFilterId \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n        Object filterId \u003d intr.findFilterId(accessor);\n        if (filterId !\u003d null) {\n            if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n                newFilterId \u003d filterId;\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    if (newFilterId !\u003d null) {\n        contextual \u003d contextual.withFilterId(newFilterId);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 375,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,77 +1,87 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n+    Object newFilterId \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo \u003d\u003d null) {\n             if (oiw !\u003d null) {\n                 objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null));\n                 oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n             }\n         } else {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n+        Object filterId \u003d intr.findFilterId(accessor);\n+        if (filterId !\u003d null) {\n+            if (_propertyFilterId \u003d\u003d null || !filterId.equals(_propertyFilterId)) {\n+                newFilterId \u003d filterId;\n+            }\n+        }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n+    if (newFilterId !\u003d null) {\n+        contextual \u003d contextual.withFilterId(newFilterId);\n+    }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1488cef12ee88e25dd0161f1b85c552a32775778": {
      "type": "Ybodychange",
      "commitMessage": "Completing conversion to using PropertyName instead of String in most parts of API\n",
      "commitDate": "7/26/13, 2:42 PM",
      "commitName": "1488cef12ee88e25dd0161f1b85c552a32775778",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/25/13, 11:05 PM",
      "commitNameOld": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 357,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,77 +1,77 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo \u003d\u003d null) {\n             if (oiw !\u003d null) {\n-                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(PropertyName.NO_NAME, null, null));\n+                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null));\n                 oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n             }\n         } else {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e05e352f53245160fe761b88665f11f67cef9d43": {
      "type": "Ybodychange",
      "commitMessage": "Start making changes to support full PropertyName passing, not just String name\n",
      "commitDate": "7/25/13, 11:05 PM",
      "commitName": "e05e352f53245160fe761b88665f11f67cef9d43",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/10/13, 10:56 PM",
      "commitNameOld": "20d53b08cf263f0ef8894ca325f619db600e2f99",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 137.01,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(PropertyName.NO_NAME, null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 355,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,77 +1,77 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo \u003d\u003d null) {\n             if (oiw !\u003d null) {\n-                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(\"\", null, null));\n+                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(PropertyName.NO_NAME, null, null));\n                 oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n             }\n         } else {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-                String propName \u003d objectIdInfo.getPropertyName();\n+                String propName \u003d objectIdInfo.getPropertyName().getSimpleName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-                oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n+                oiw \u003d ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f": {
      "type": "Yannotationchange",
      "commitMessage": "Working on #124, serializer converters\n",
      "commitDate": "2/18/13, 9:25 PM",
      "commitName": "d5daa45d6fd13867bca1e7dfe8c027436ae0d92f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/21/12, 7:58 PM",
      "commitNameOld": "43ca226d94361812e29372fde30ab191d929e1b2",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 89.06,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(\"\", null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 363,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,76 +1,77 @@\n+@Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo \u003d\u003d null) {\n             if (oiw !\u003d null) {\n                 objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(\"\", null, null));\n                 oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n             }\n         } else {\n             objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@Override"
      }
    },
    "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2": {
      "type": "Ybodychange",
      "commitMessage": "Improved handling of \"always-as-id\" references; might now actually be useful\n",
      "commitDate": "8/24/12, 1:33 PM",
      "commitName": "88040e2fa32c3bff2ce18e40a55807a3fca3d2d2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/16/12, 3:03 PM",
      "commitNameOld": "e268dd573d6b6bf789d4f36e856e72716875cd0c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.94,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (accessor !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo \u003d\u003d null) {\n            if (oiw !\u003d null) {\n                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(\"\", null, null));\n                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n            }\n        } else {\n            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 334,
      "functionName": "createContextual",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,70 +1,76 @@\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n-    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n+    if (accessor !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n-        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n-        if (objectIdInfo !\u003d null) {\n+        ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n+        if (objectIdInfo \u003d\u003d null) {\n+            if (oiw !\u003d null) {\n+                objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(\"\", null, null));\n+                oiw \u003d _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n+            }\n+        } else {\n+            objectIdInfo \u003d intr.findObjectReferenceInfo(accessor, objectIdInfo);\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-                oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n+                oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getAlwaysAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n-                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getFirstAsId());\n+                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6cada0a47ed675fffe15697968dfef68864b57e7": {
      "type": "Ybodychange",
      "commitMessage": "Add unit tests, support for jackson-annotations issue #4: add `@JsonIdentityInfo.firstAsId` to force serialization of the very first reference as id (as well as following ones)\n",
      "commitDate": "7/31/12, 10:24 PM",
      "commitName": "6cada0a47ed675fffe15697968dfef68864b57e7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/27/12, 5:33 PM",
      "commitNameOld": "b9733f7ba10c81c84ebcae9a9609b9b03e1190d6",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.2,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getFirstAsId());\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 334,
      "functionName": "createContextual",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,70 +1,70 @@\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n+                oiw \u003d ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n-                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n+                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getFirstAsId());\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n         JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n             shape \u003d format.getShape();\n         }\n     }\n     if (shape \u003d\u003d null) {\n         shape \u003d _serializationShape;\n     }\n     if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n         contextual \u003d contextual.asArraySerializer();\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2b4086a9372b2129585bdf217d84f6313076c8ec": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "6/29/12, 8:27 PM",
      "commitName": "2b4086a9372b2129585bdf217d84f6313076c8ec",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "6/29/12, 5:13 PM",
      "commitNameOld": "85f4bafb73b876a58919164cb4926b633e69725c",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    JsonFormat.Shape shape \u003d null;\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n        if (format !\u003d null) {\n            shape \u003d format.getShape();\n        }\n    }\n    if (shape \u003d\u003d null) {\n        shape \u003d _serializationShape;\n    }\n    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n        contextual \u003d contextual.asArraySerializer();\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 337,
      "functionName": "createContextual",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,65 +1,70 @@\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n+    JsonFormat.Shape shape \u003d null;\n     if (accessor !\u003d null) {\n-        JsonFormat.Value format \u003d intr.findFormat(accessor);\n+        JsonFormat.Value format \u003d intr.findFormat((Annotated) accessor);\n         if (format !\u003d null) {\n-            if (format.getShape() \u003d\u003d JsonFormat.Shape.ARRAY) {\n-                contextual \u003d contextual.asArraySerializer();\n-            }\n+            shape \u003d format.getShape();\n         }\n     }\n+    if (shape \u003d\u003d null) {\n+        shape \u003d _serializationShape;\n+    }\n+    if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n+        contextual \u003d contextual.asArraySerializer();\n+    }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dc65cc043479dd03dad878b22a9e5864e2e53bd7": {
      "type": "Ybodychange",
      "commitMessage": "Start work on \"POJOs-as-arrays\" serialization\n",
      "commitDate": "6/28/12, 10:23 PM",
      "commitName": "dc65cc043479dd03dad878b22a9e5864e2e53bd7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/17/12, 7:57 AM",
      "commitNameOld": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 72.6,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    if (accessor !\u003d null) {\n        JsonFormat.Value format \u003d intr.findFormat(accessor);\n        if (format !\u003d null) {\n            if (format.getShape() \u003d\u003d JsonFormat.Shape.ARRAY) {\n                contextual \u003d contextual.asArraySerializer();\n            }\n        }\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 322,
      "functionName": "createContextual",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,65 @@\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+    final AnnotatedMember accessor \u003d (property \u003d\u003d null || intr \u003d\u003d null) ? null : property.getMember();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n-        final AnnotatedMember accessor \u003d property.getMember();\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n+    if (accessor !\u003d null) {\n+        JsonFormat.Value format \u003d intr.findFormat(accessor);\n+        if (format !\u003d null) {\n+            if (format.getShape() \u003d\u003d JsonFormat.Shape.ARRAY) {\n+                contextual \u003d contextual.asArraySerializer();\n+            }\n+        }\n+    }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da": {
      "type": "Yannotationchange",
      "commitMessage": "Changes to make 1.5 compatible against: first, removing @Override from interface impls\n",
      "commitDate": "4/17/12, 7:57 AM",
      "commitName": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/20/12, 5:08 PM",
      "commitNameOld": "3117c1049587534aaba37d2448f4aabeed24bf6d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 27.62,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 312,
      "functionName": "createContextual",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,58 +1,57 @@\n-@Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         final AnnotatedMember accessor \u003d property.getMember();\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "@Override",
        "newValue": ""
      }
    },
    "15212e8d7438bd862574c652e0419879d8b720c4": {
      "type": "Ybodychange",
      "commitMessage": "Completed [JACKSON-787] implementation; @JsonIgnoreProperties now usable for properties too\n",
      "commitDate": "2/20/12, 10:13 PM",
      "commitName": "15212e8d7438bd862574c652e0419879d8b720c4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/20/12, 8:45 PM",
      "commitNameOld": "ae6c82872056dfad0ef2b1f1a32231450d5a2800",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d contextual.withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 311,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,58 +1,58 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     String[] ignorals \u003d null;\n     final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n     if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         final AnnotatedMember accessor \u003d property.getMember();\n         ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n             }\n         }\n     }\n     BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n-            contextual \u003d withObjectIdWriter(oiw);\n+            contextual \u003d contextual.withObjectIdWriter(oiw);\n         }\n     }\n     if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n         contextual \u003d contextual.withIgnorals(ignorals);\n     }\n     return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ae6c82872056dfad0ef2b1f1a32231450d5a2800": {
      "type": "Ybodychange",
      "commitMessage": "Start work on [JACKSON-787]; implemented for serialization\n",
      "commitDate": "2/20/12, 8:45 PM",
      "commitName": "ae6c82872056dfad0ef2b1f1a32231450d5a2800",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/17/12, 10:40 PM",
      "commitNameOld": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    String[] ignorals \u003d null;\n    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n        final AnnotatedMember accessor \u003d property.getMember();\n        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n            }\n        }\n    }\n    BeanSerializerBase contextual \u003d this;\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            contextual \u003d withObjectIdWriter(oiw);\n        }\n    }\n    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n        contextual \u003d contextual.withIgnorals(ignorals);\n    }\n    return contextual;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 311,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,58 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n-    if (property !\u003d null) {\n-        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+    String[] ignorals \u003d null;\n+    final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+    if (property !\u003d null \u0026\u0026 intr !\u003d null) {\n         final AnnotatedMember accessor \u003d property.getMember();\n+        ignorals \u003d intr.findPropertiesToIgnore(accessor);\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n             }\n         }\n     }\n+    BeanSerializerBase contextual \u003d this;\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n-            return withObjectIdWriter(oiw);\n+            contextual \u003d withObjectIdWriter(oiw);\n         }\n     }\n-    return this;\n+    if (ignorals !\u003d null \u0026\u0026 ignorals.length !\u003d 0) {\n+        contextual \u003d contextual.withIgnorals(ignorals);\n+    }\n+    return contextual;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "557bcd3d55fa779e40251506d159468bfe96fe04": {
      "type": "Ybodychange",
      "commitMessage": "Fix: ensure that scope gets pass to ObjectIdGenerators\n",
      "commitDate": "2/10/12, 9:44 AM",
      "commitName": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/9/12, 10:36 PM",
      "commitNameOld": "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n            }\n        }\n    }\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            return withObjectIdWriter(oiw);\n        }\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 264,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,52 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     if (property !\u003d null) {\n         final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n         final AnnotatedMember accessor \u003d property.getMember();\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n-            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n+            Class\u003c?\u003e implClass \u003d objectIdInfo.getGeneratorType();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 String propName \u003d objectIdInfo.getPropertyName();\n                 BeanPropertyWriter idProp \u003d null;\n                 for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                     if (i \u003d\u003d len) {\n                         throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                     }\n                     BeanPropertyWriter prop \u003d _props[i];\n                     if (propName.equals(prop.getName())) {\n                         idProp \u003d prop;\n                         if (i \u003e 0) {\n                             System.arraycopy(_props, 0, _props, 1, i);\n                             _props[0] \u003d idProp;\n                             if (_filteredProps !\u003d null) {\n                                 BeanPropertyWriter fp \u003d _filteredProps[i];\n                                 System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                 _filteredProps[0] \u003d fp;\n                             }\n                         }\n                         break;\n                     }\n                 }\n                 idType \u003d idProp.getType();\n                 gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                 oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n             } else {\n-                gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n+                gen \u003d provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n                 oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n             }\n         }\n     }\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             return withObjectIdWriter(oiw);\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4": {
      "type": "Ybodychange",
      "commitMessage": "Added serialization support for custom ids (property-based)\n",
      "commitDate": "2/9/12, 10:36 PM",
      "commitName": "bfc98f2c087810bc8a57c26aa02efcc3ddc9cef4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/9/12, 9:58 PM",
      "commitNameOld": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                String propName \u003d objectIdInfo.getPropertyName();\n                BeanPropertyWriter idProp \u003d null;\n                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n                    if (i \u003d\u003d len) {\n                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n                    }\n                    BeanPropertyWriter prop \u003d _props[i];\n                    if (propName.equals(prop.getName())) {\n                        idProp \u003d prop;\n                        if (i \u003e 0) {\n                            System.arraycopy(_props, 0, _props, 1, i);\n                            _props[0] \u003d idProp;\n                            if (_filteredProps !\u003d null) {\n                                BeanPropertyWriter fp \u003d _filteredProps[i];\n                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n                                _filteredProps[0] \u003d fp;\n                            }\n                        }\n                        break;\n                    }\n                }\n                idType \u003d idProp.getType();\n                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n            }\n        }\n    }\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            return withObjectIdWriter(oiw);\n        }\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 264,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,52 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     if (property !\u003d null) {\n         final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n         final AnnotatedMember accessor \u003d property.getMember();\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n-                gen \u003d null;\n-                if (true)\n-                    throw new IllegalStateException(\"Not yet implemented!\");\n+                String propName \u003d objectIdInfo.getPropertyName();\n+                BeanPropertyWriter idProp \u003d null;\n+                for (int i \u003d 0, len \u003d _props.length; ; ++i) {\n+                    if (i \u003d\u003d len) {\n+                        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + _handledType.getName() + \": can not find property with name \u0027\" + propName + \"\u0027\");\n+                    }\n+                    BeanPropertyWriter prop \u003d _props[i];\n+                    if (propName.equals(prop.getName())) {\n+                        idProp \u003d prop;\n+                        if (i \u003e 0) {\n+                            System.arraycopy(_props, 0, _props, 1, i);\n+                            _props[0] \u003d idProp;\n+                            if (_filteredProps !\u003d null) {\n+                                BeanPropertyWriter fp \u003d _filteredProps[i];\n+                                System.arraycopy(_filteredProps, 0, _filteredProps, 1, i);\n+                                _filteredProps[0] \u003d fp;\n+                            }\n+                        }\n+                        break;\n+                    }\n+                }\n+                idType \u003d idProp.getType();\n+                gen \u003d new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n+                oiw \u003d ObjectIdWriter.construct(idType, null, gen);\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n+                oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n             }\n-            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n         }\n     }\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             return withObjectIdWriter(oiw);\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "05c82f22c49e3da03b0f8c5271f1ce6850111adc": {
      "type": "Ybodychange",
      "commitMessage": "Starting work on supporting custom (property-based) object ids.\n",
      "commitDate": "2/9/12, 9:58 PM",
      "commitName": "05c82f22c49e3da03b0f8c5271f1ce6850111adc",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/7/12, 7:47 PM",
      "commitNameOld": "58077e9d135f0285a361a1d89b3767c5ece0095a",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                gen \u003d null;\n                if (true)\n                    throw new IllegalStateException(\"Not yet implemented!\");\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n            }\n            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n        }\n    }\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            return withObjectIdWriter(oiw);\n        }\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 263,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,31 @@\n @Override\n public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n     ObjectIdWriter oiw \u003d _objectIdWriter;\n     if (property !\u003d null) {\n         final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n         final AnnotatedMember accessor \u003d property.getMember();\n         final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n         if (objectIdInfo !\u003d null) {\n             ObjectIdGenerator\u003c?\u003e gen;\n             Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n             JavaType type \u003d provider.constructType(implClass);\n             JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n             if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                 gen \u003d null;\n                 if (true)\n                     throw new IllegalStateException(\"Not yet implemented!\");\n             } else {\n                 gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n             }\n-            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getProperty(), gen);\n+            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n         }\n     }\n     if (oiw !\u003d null) {\n         JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n         oiw \u003d oiw.withSerializer(ser);\n         if (oiw !\u003d _objectIdWriter) {\n             return withObjectIdWriter(oiw);\n         }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "58077e9d135f0285a361a1d89b3767c5ece0095a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Ok, Object Id handling back to working as good as before refactoring, i.e. just for serialization...\n",
      "commitDate": "2/7/12, 7:47 PM",
      "commitName": "58077e9d135f0285a361a1d89b3767c5ece0095a",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Ok, Object Id handling back to working as good as before refactoring, i.e. just for serialization...\n",
          "commitDate": "2/7/12, 7:47 PM",
          "commitName": "58077e9d135f0285a361a1d89b3767c5ece0095a",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/6/12, 10:44 PM",
          "commitNameOld": "d453182b63249c2c597a54229a4242e1ce1921d0",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.88,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                gen \u003d null;\n                if (true)\n                    throw new IllegalStateException(\"Not yet implemented!\");\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n            }\n            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getProperty(), gen);\n        }\n    }\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            return withObjectIdWriter(oiw);\n        }\n    }\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 263,
          "functionName": "createContextual",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,31 @@\n @Override\n-public JsonSerializer\u003c?\u003e createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n-    if (property \u003d\u003d null) {\n-        return this;\n+public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    ObjectIdWriter oiw \u003d _objectIdWriter;\n+    if (property !\u003d null) {\n+        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+        final AnnotatedMember accessor \u003d property.getMember();\n+        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n+        if (objectIdInfo !\u003d null) {\n+            ObjectIdGenerator\u003c?\u003e gen;\n+            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n+            JavaType type \u003d provider.constructType(implClass);\n+            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n+                gen \u003d null;\n+                if (true)\n+                    throw new IllegalStateException(\"Not yet implemented!\");\n+            } else {\n+                gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n+            }\n+            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getProperty(), gen);\n+        }\n     }\n-    final AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n-    AnnotatedMember accessor \u003d property.getMember();\n-    ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n-    if (objectIdInfo !\u003d null) {\n+    if (oiw !\u003d null) {\n+        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n+        oiw \u003d oiw.withSerializer(ser);\n+        if (oiw !\u003d _objectIdWriter) {\n+            return withObjectIdWriter(oiw);\n+        }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[prov-SerializerProvider, property-BeanProperty]",
            "newValue": "[provider-SerializerProvider, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Ok, Object Id handling back to working as good as before refactoring, i.e. just for serialization...\n",
          "commitDate": "2/7/12, 7:47 PM",
          "commitName": "58077e9d135f0285a361a1d89b3767c5ece0095a",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/6/12, 10:44 PM",
          "commitNameOld": "d453182b63249c2c597a54229a4242e1ce1921d0",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 0.88,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n    ObjectIdWriter oiw \u003d _objectIdWriter;\n    if (property !\u003d null) {\n        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n        final AnnotatedMember accessor \u003d property.getMember();\n        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n        if (objectIdInfo !\u003d null) {\n            ObjectIdGenerator\u003c?\u003e gen;\n            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n            JavaType type \u003d provider.constructType(implClass);\n            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n                gen \u003d null;\n                if (true)\n                    throw new IllegalStateException(\"Not yet implemented!\");\n            } else {\n                gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n            }\n            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getProperty(), gen);\n        }\n    }\n    if (oiw !\u003d null) {\n        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n        oiw \u003d oiw.withSerializer(ser);\n        if (oiw !\u003d _objectIdWriter) {\n            return withObjectIdWriter(oiw);\n        }\n    }\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
          "functionStartLine": 263,
          "functionName": "createContextual",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,31 @@\n @Override\n-public JsonSerializer\u003c?\u003e createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n-    if (property \u003d\u003d null) {\n-        return this;\n+public JsonSerializer\u003c?\u003e createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {\n+    ObjectIdWriter oiw \u003d _objectIdWriter;\n+    if (property !\u003d null) {\n+        final AnnotationIntrospector intr \u003d provider.getAnnotationIntrospector();\n+        final AnnotatedMember accessor \u003d property.getMember();\n+        final ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n+        if (objectIdInfo !\u003d null) {\n+            ObjectIdGenerator\u003c?\u003e gen;\n+            Class\u003c?\u003e implClass \u003d objectIdInfo.getGenerator();\n+            JavaType type \u003d provider.constructType(implClass);\n+            JavaType idType \u003d provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n+            if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n+                gen \u003d null;\n+                if (true)\n+                    throw new IllegalStateException(\"Not yet implemented!\");\n+            } else {\n+                gen \u003d provider.objectIdGeneratorInstance(accessor, implClass);\n+            }\n+            oiw \u003d ObjectIdWriter.construct(idType, objectIdInfo.getProperty(), gen);\n+        }\n     }\n-    final AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n-    AnnotatedMember accessor \u003d property.getMember();\n-    ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n-    if (objectIdInfo !\u003d null) {\n+    if (oiw !\u003d null) {\n+        JsonSerializer\u003c?\u003e ser \u003d provider.findValueSerializer(oiw.idType, property);\n+        oiw \u003d oiw.withSerializer(ser);\n+        if (oiw !\u003d _objectIdWriter) {\n+            return withObjectIdWriter(oiw);\n+        }\n     }\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "d453182b63249c2c597a54229a4242e1ce1921d0": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring Object Id handling, after realizing first attempt is too limiting\n",
      "commitDate": "2/6/12, 10:44 PM",
      "commitName": "d453182b63249c2c597a54229a4242e1ce1921d0",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,12 @@\n+@Override\n+public JsonSerializer\u003c?\u003e createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n+    if (property \u003d\u003d null) {\n+        return this;\n+    }\n+    final AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n+    AnnotatedMember accessor \u003d property.getMember();\n+    ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n+    if (objectIdInfo !\u003d null) {\n+    }\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonSerializer\u003c?\u003e createContextual(SerializerProvider prov, BeanProperty property) throws JsonMappingException {\n    if (property \u003d\u003d null) {\n        return this;\n    }\n    final AnnotationIntrospector intr \u003d prov.getAnnotationIntrospector();\n    AnnotatedMember accessor \u003d property.getMember();\n    ObjectIdInfo objectIdInfo \u003d intr.findObjectIdInfo(accessor);\n    if (objectIdInfo !\u003d null) {\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
      "functionStartLine": 248,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}