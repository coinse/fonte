{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicBeanDescription.java",
  "functionName": "findSerializationConverter",
  "functionId": "findSerializationConverter",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 318,
  "functionEndLine": 324,
  "numCommitsSeen": 31,
  "timeTaken": 1149,
  "changeHistory": [
    "9439a310c169a00cd01a4e9b64fb9f5441297b96",
    "be97826b2c8702639503cc6c7f8398d84073aaf0"
  ],
  "changeHistoryShort": {
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": "Ymultichange(Ybodychange,Yannotationchange)",
    "be97826b2c8702639503cc6c7f8398d84073aaf0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9439a310c169a00cd01a4e9b64fb9f5441297b96": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
      "commitDate": "3/2/13, 1:13 PM",
      "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
          "commitDate": "3/2/13, 1:13 PM",
          "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/18/13, 10:28 PM",
          "commitNameOld": "be97826b2c8702639503cc6c7f8398d84073aaf0",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 11.61,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Converter\u003cObject, Object\u003e findSerializationConverter() {\n    if (_annotationIntrospector \u003d\u003d null) {\n        return null;\n    }\n    return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
          "functionStartLine": 319,
          "functionName": "findSerializationConverter",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,30 +1,7 @@\n-@SuppressWarnings(\"unchecked\")\n @Override\n public Converter\u003cObject, Object\u003e findSerializationConverter() {\n     if (_annotationIntrospector \u003d\u003d null) {\n         return null;\n     }\n-    Object converterDef \u003d _annotationIntrospector.findSerializationConverter(_classInfo);\n-    if (converterDef \u003d\u003d null) {\n-        return null;\n-    }\n-    if (converterDef instanceof Converter\u003c?, ?\u003e) {\n-        return (Converter\u003cObject, Object\u003e) converterDef;\n-    }\n-    if (!(converterDef instanceof Class)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\n-    }\n-    Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e) converterDef;\n-    if (converterClass \u003d\u003d Converter.None.class || converterClass \u003d\u003d NoClass.class) {\n-        return null;\n-    }\n-    if (!Converter.class.isAssignableFrom(converterClass)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\n-    }\n-    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n-    Converter\u003c?, ?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\n-    if (conv \u003d\u003d null) {\n-        conv \u003d (Converter\u003c?, ?\u003e) ClassUtil.createInstance(converterClass, _config.canOverrideAccessModifiers());\n-    }\n-    return (Converter\u003cObject, Object\u003e) conv;\n+    return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "More work on converters for deserialization; now passes 2/6 of new tests. Also adding \u0027DatabindContext\u0027, shared base class for DeserializationContext, SerializerProvider\n",
          "commitDate": "3/2/13, 1:13 PM",
          "commitName": "9439a310c169a00cd01a4e9b64fb9f5441297b96",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "2/18/13, 10:28 PM",
          "commitNameOld": "be97826b2c8702639503cc6c7f8398d84073aaf0",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 11.61,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic Converter\u003cObject, Object\u003e findSerializationConverter() {\n    if (_annotationIntrospector \u003d\u003d null) {\n        return null;\n    }\n    return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
          "functionStartLine": 319,
          "functionName": "findSerializationConverter",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,30 +1,7 @@\n-@SuppressWarnings(\"unchecked\")\n @Override\n public Converter\u003cObject, Object\u003e findSerializationConverter() {\n     if (_annotationIntrospector \u003d\u003d null) {\n         return null;\n     }\n-    Object converterDef \u003d _annotationIntrospector.findSerializationConverter(_classInfo);\n-    if (converterDef \u003d\u003d null) {\n-        return null;\n-    }\n-    if (converterDef instanceof Converter\u003c?, ?\u003e) {\n-        return (Converter\u003cObject, Object\u003e) converterDef;\n-    }\n-    if (!(converterDef instanceof Class)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\n-    }\n-    Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e) converterDef;\n-    if (converterClass \u003d\u003d Converter.None.class || converterClass \u003d\u003d NoClass.class) {\n-        return null;\n-    }\n-    if (!Converter.class.isAssignableFrom(converterClass)) {\n-        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\n-    }\n-    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n-    Converter\u003c?, ?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\n-    if (conv \u003d\u003d null) {\n-        conv \u003d (Converter\u003c?, ?\u003e) ClassUtil.createInstance(converterClass, _config.canOverrideAccessModifiers());\n-    }\n-    return (Converter\u003cObject, Object\u003e) conv;\n+    return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"unchecked\"),@Override",
            "newValue": "@Override"
          }
        }
      ]
    },
    "be97826b2c8702639503cc6c7f8398d84073aaf0": {
      "type": "Yintroduced",
      "commitMessage": "Completed (?) #124 implementation: now Converters seem to work ok\n",
      "commitDate": "2/18/13, 10:28 PM",
      "commitName": "be97826b2c8702639503cc6c7f8398d84073aaf0",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,30 @@\n+@SuppressWarnings(\"unchecked\")\n+@Override\n+public Converter\u003cObject, Object\u003e findSerializationConverter() {\n+    if (_annotationIntrospector \u003d\u003d null) {\n+        return null;\n+    }\n+    Object converterDef \u003d _annotationIntrospector.findSerializationConverter(_classInfo);\n+    if (converterDef \u003d\u003d null) {\n+        return null;\n+    }\n+    if (converterDef instanceof Converter\u003c?, ?\u003e) {\n+        return (Converter\u003cObject, Object\u003e) converterDef;\n+    }\n+    if (!(converterDef instanceof Class)) {\n+        throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\n+    }\n+    Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e) converterDef;\n+    if (converterClass \u003d\u003d Converter.None.class || converterClass \u003d\u003d NoClass.class) {\n+        return null;\n+    }\n+    if (!Converter.class.isAssignableFrom(converterClass)) {\n+        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\n+    }\n+    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n+    Converter\u003c?, ?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\n+    if (conv \u003d\u003d null) {\n+        conv \u003d (Converter\u003c?, ?\u003e) ClassUtil.createInstance(converterClass, _config.canOverrideAccessModifiers());\n+    }\n+    return (Converter\u003cObject, Object\u003e) conv;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\n@Override\npublic Converter\u003cObject, Object\u003e findSerializationConverter() {\n    if (_annotationIntrospector \u003d\u003d null) {\n        return null;\n    }\n    Object converterDef \u003d _annotationIntrospector.findSerializationConverter(_classInfo);\n    if (converterDef \u003d\u003d null) {\n        return null;\n    }\n    if (converterDef instanceof Converter\u003c?, ?\u003e) {\n        return (Converter\u003cObject, Object\u003e) converterDef;\n    }\n    if (!(converterDef instanceof Class)) {\n        throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\n    }\n    Class\u003c?\u003e converterClass \u003d (Class\u003c?\u003e) converterDef;\n    if (converterClass \u003d\u003d Converter.None.class || converterClass \u003d\u003d NoClass.class) {\n        return null;\n    }\n    if (!Converter.class.isAssignableFrom(converterClass)) {\n        throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\n    }\n    HandlerInstantiator hi \u003d _config.getHandlerInstantiator();\n    Converter\u003c?, ?\u003e conv \u003d (hi \u003d\u003d null) ? null : hi.converterInstance(_config, _classInfo, converterClass);\n    if (conv \u003d\u003d null) {\n        conv \u003d (Converter\u003c?, ?\u003e) ClassUtil.createInstance(converterClass, _config.canOverrideAccessModifiers());\n    }\n    return (Converter\u003cObject, Object\u003e) conv;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
      "functionStartLine": 445,
      "functionName": "findSerializationConverter",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\"),@Override",
      "functionDoc": ""
    }
  }
}