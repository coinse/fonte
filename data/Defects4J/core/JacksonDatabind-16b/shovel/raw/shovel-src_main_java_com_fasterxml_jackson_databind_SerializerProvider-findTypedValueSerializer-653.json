{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SerializerProvider.java",
  "functionName": "findTypedValueSerializer",
  "functionId": "findTypedValueSerializer___valueType-Class__?____cache-boolean__property-BeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
  "functionAnnotation": "",
  "functionDoc": "Method called to locate regular serializer, matching type serializer,\nand if both found, wrap them in a serializer that calls both in correct\nsequence. This method is currently only used for root-level serializer\nhandling to allow for simpler caching. A call can always be replaced\nby equivalent calls to access serializer and type serializer separately.\n\n@param valueType Type for purpose of locating a serializer; usually dynamic\n  runtime type, but can also be static declared type, depending on configuration\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
  "functionStartLine": 653,
  "functionEndLine": 680,
  "numCommitsSeen": 71,
  "timeTaken": 2586,
  "changeHistory": [
    "6679caeac9198802d271f8659017bb63eebd615f",
    "a57eca7f47d03b26320348520e926dde0da68509",
    "2dfc03f18e248fdc7a1ba98f337b0d6ee30ccf5a",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "6679caeac9198802d271f8659017bb63eebd615f": "Ymultichange(Ymovefromfile,Yannotationchange,Ydocchange)",
    "a57eca7f47d03b26320348520e926dde0da68509": "Ybodychange",
    "2dfc03f18e248fdc7a1ba98f337b0d6ee30ccf5a": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6679caeac9198802d271f8659017bb63eebd615f": {
      "type": "Ymultichange(Ymovefromfile,Yannotationchange,Ydocchange)",
      "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
      "commitDate": "2/1/12, 5:32 PM",
      "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d _serializerCache.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d findValueSerializer(valueType, property);\n    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n    if (typeSer !\u003d null) {\n        typeSer \u003d typeSer.forProperty(property);\n        ser \u003d new TypeWrappedSerializer(typeSer, ser);\n    }\n    if (cache) {\n        _serializerCache.addTypedSerializer(valueType, ser);\n    }\n    return ser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 548,
          "functionName": "findTypedValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to locate regular serializer, matching type serializer,\nand if both found, wrap them in a serializer that calls both in correct\nsequence. This method is currently only used for root-level serializer\nhandling to allow for simpler caching. A call can always be replaced\nby equivalent calls to access serializer and type serializer separately.\n\n@param valueType Type for purpose of locating a serializer; usually dynamic\n  runtime type, but can also be static declared type, depending on configuration\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,21 +1,20 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d _serializerCache.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d findValueSerializer(valueType, property);\n     TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n     if (typeSer !\u003d null) {\n         typeSer \u003d typeSer.forProperty(property);\n         ser \u003d new TypeWrappedSerializer(typeSer, ser);\n     }\n     if (cache) {\n         _serializerCache.addTypedSerializer(valueType, ser);\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
            "newPath": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
            "oldMethodName": "findTypedValueSerializer",
            "newMethodName": "findTypedValueSerializer"
          }
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d _serializerCache.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d findValueSerializer(valueType, property);\n    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n    if (typeSer !\u003d null) {\n        typeSer \u003d typeSer.forProperty(property);\n        ser \u003d new TypeWrappedSerializer(typeSer, ser);\n    }\n    if (cache) {\n        _serializerCache.addTypedSerializer(valueType, ser);\n    }\n    return ser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 548,
          "functionName": "findTypedValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to locate regular serializer, matching type serializer,\nand if both found, wrap them in a serializer that calls both in correct\nsequence. This method is currently only used for root-level serializer\nhandling to allow for simpler caching. A call can always be replaced\nby equivalent calls to access serializer and type serializer separately.\n\n@param valueType Type for purpose of locating a serializer; usually dynamic\n  runtime type, but can also be static declared type, depending on configuration\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,21 +1,20 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d _serializerCache.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d findValueSerializer(valueType, property);\n     TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n     if (typeSer !\u003d null) {\n         typeSer \u003d typeSer.forProperty(property);\n         ser \u003d new TypeWrappedSerializer(typeSer, ser);\n     }\n     if (cache) {\n         _serializerCache.addTypedSerializer(valueType, ser);\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@Override",
            "newValue": ""
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Further simplification; eliminated StdSerializerProvider\n",
          "commitDate": "2/1/12, 5:32 PM",
          "commitName": "6679caeac9198802d271f8659017bb63eebd615f",
          "commitAuthor": "Tatu",
          "commitDateOld": "2/1/12, 3:26 PM",
          "commitNameOld": "a57eca7f47d03b26320348520e926dde0da68509",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d _serializerCache.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d findValueSerializer(valueType, property);\n    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n    if (typeSer !\u003d null) {\n        typeSer \u003d typeSer.forProperty(property);\n        ser \u003d new TypeWrappedSerializer(typeSer, ser);\n    }\n    if (cache) {\n        _serializerCache.addTypedSerializer(valueType, ser);\n    }\n    return ser;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
          "functionStartLine": 548,
          "functionName": "findTypedValueSerializer",
          "functionAnnotation": "",
          "functionDoc": "Method called to locate regular serializer, matching type serializer,\nand if both found, wrap them in a serializer that calls both in correct\nsequence. This method is currently only used for root-level serializer\nhandling to allow for simpler caching. A call can always be replaced\nby equivalent calls to access serializer and type serializer separately.\n\n@param valueType Type for purpose of locating a serializer; usually dynamic\n  runtime type, but can also be static declared type, depending on configuration\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n",
          "diff": "@@ -1,21 +1,20 @@\n-@Override\n public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d _serializerCache.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d findValueSerializer(valueType, property);\n     TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n     if (typeSer !\u003d null) {\n         typeSer \u003d typeSer.forProperty(property);\n         ser \u003d new TypeWrappedSerializer(typeSer, ser);\n     }\n     if (cache) {\n         _serializerCache.addTypedSerializer(valueType, ser);\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n",
            "newValue": "Method called to locate regular serializer, matching type serializer,\nand if both found, wrap them in a serializer that calls both in correct\nsequence. This method is currently only used for root-level serializer\nhandling to allow for simpler caching. A call can always be replaced\nby equivalent calls to access serializer and type serializer separately.\n\n@param valueType Type for purpose of locating a serializer; usually dynamic\n  runtime type, but can also be static declared type, depending on configuration\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n@param property When creating secondary serializers, property for which\n  serializer is needed: annotations of the property (or bean that contains it)\n  may be checked to create contextual serializers.\n"
          }
        }
      ]
    },
    "a57eca7f47d03b26320348520e926dde0da68509": {
      "type": "Ybodychange",
      "commitMessage": "Yet more refactoring, eliminating BeanProperty from TypeSerializer\n",
      "commitDate": "2/1/12, 3:26 PM",
      "commitName": "a57eca7f47d03b26320348520e926dde0da68509",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 4:57 PM",
      "commitNameOld": "2dfc03f18e248fdc7a1ba98f337b0d6ee30ccf5a",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d _serializerCache.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d findValueSerializer(valueType, property);\n    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n    if (typeSer !\u003d null) {\n        typeSer \u003d typeSer.forProperty(property);\n        ser \u003d new TypeWrappedSerializer(typeSer, ser);\n    }\n    if (cache) {\n        _serializerCache.addTypedSerializer(valueType, ser);\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
      "functionStartLine": 396,
      "functionName": "findTypedValueSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n",
      "diff": "@@ -1,20 +1,21 @@\n @Override\n public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d _serializerCache.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d findValueSerializer(valueType, property);\n-    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType), property);\n+    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));\n     if (typeSer !\u003d null) {\n+        typeSer \u003d typeSer.forProperty(property);\n         ser \u003d new TypeWrappedSerializer(typeSer, ser);\n     }\n     if (cache) {\n         _serializerCache.addTypedSerializer(valueType, ser);\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2dfc03f18e248fdc7a1ba98f337b0d6ee30ccf5a": {
      "type": "Ybodychange",
      "commitMessage": "More work on contextual serializers...\n",
      "commitDate": "1/31/12, 4:57 PM",
      "commitName": "2dfc03f18e248fdc7a1ba98f337b0d6ee30ccf5a",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 4:16 PM",
      "commitNameOld": "f42e62927e7314a093fd2879030762a5dcc087fe",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d _serializerCache.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d findValueSerializer(valueType, property);\n    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType), property);\n    if (typeSer !\u003d null) {\n        ser \u003d new TypeWrappedSerializer(typeSer, ser);\n    }\n    if (cache) {\n        _serializerCache.addTypedSerializer(valueType, ser);\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
      "functionStartLine": 396,
      "functionName": "findTypedValueSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n",
      "diff": "@@ -1,20 +1,20 @@\n @Override\n public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n     JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d _serializerCache.typedValueSerializer(valueType);\n     if (ser !\u003d null) {\n         return ser;\n     }\n     ser \u003d findValueSerializer(valueType, property);\n     TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType), property);\n     if (typeSer !\u003d null) {\n-        ser \u003d new WrappedSerializer(typeSer, ser);\n+        ser \u003d new TypeWrappedSerializer(typeSer, ser);\n     }\n     if (cache) {\n         _serializerCache.addTypedSerializer(valueType, ser);\n     }\n     return ser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,20 @@\n+@Override\n+public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n+    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n+    if (ser !\u003d null) {\n+        return ser;\n+    }\n+    ser \u003d _serializerCache.typedValueSerializer(valueType);\n+    if (ser !\u003d null) {\n+        return ser;\n+    }\n+    ser \u003d findValueSerializer(valueType, property);\n+    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType), property);\n+    if (typeSer !\u003d null) {\n+        ser \u003d new WrappedSerializer(typeSer, ser);\n+    }\n+    if (cache) {\n+        _serializerCache.addTypedSerializer(valueType, ser);\n+    }\n+    return ser;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType, boolean cache, BeanProperty property) throws JsonMappingException {\n    JsonSerializer\u003cObject\u003e ser \u003d _knownSerializers.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d _serializerCache.typedValueSerializer(valueType);\n    if (ser !\u003d null) {\n        return ser;\n    }\n    ser \u003d findValueSerializer(valueType, property);\n    TypeSerializer typeSer \u003d _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType), property);\n    if (typeSer !\u003d null) {\n        ser \u003d new WrappedSerializer(typeSer, ser);\n    }\n    if (cache) {\n        _serializerCache.addTypedSerializer(valueType, ser);\n    }\n    return ser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java",
      "functionStartLine": 405,
      "functionName": "findTypedValueSerializer",
      "functionAnnotation": "@Override",
      "functionDoc": "\n@param cache Whether resulting value serializer should be cached or not; this is just\n   a hint\n"
    }
  }
}