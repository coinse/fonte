{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ObjectMapper.java",
  "functionName": "addMixIn",
  "functionId": "addMixIn___target-Class__?____mixinSource-Class__?__",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
  "functionAnnotation": "",
  "functionDoc": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n@since 2.5\n",
  "functionStartLine": 1017,
  "functionEndLine": 1021,
  "numCommitsSeen": 290,
  "timeTaken": 11555,
  "changeHistory": [
    "17ab26bfbc3bf4820cf81bae220ed336b65488c7",
    "e381bc890ed64380c27b7811435413bc7eac1b28",
    "d2ec3c9e103b0131d65c1ed24214ddf47b11acd2",
    "5087f976953ef5ce9f0fb8b27c564bca71da9bd2"
  ],
  "changeHistoryShort": {
    "17ab26bfbc3bf4820cf81bae220ed336b65488c7": "Ymultichange(Ymodifierchange,Ydocchange)",
    "e381bc890ed64380c27b7811435413bc7eac1b28": "Yrename",
    "d2ec3c9e103b0131d65c1ed24214ddf47b11acd2": "Ymultichange(Yreturntypechange,Ybodychange)",
    "5087f976953ef5ce9f0fb8b27c564bca71da9bd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "17ab26bfbc3bf4820cf81bae220ed336b65488c7": {
      "type": "Ymultichange(Ymodifierchange,Ydocchange)",
      "commitMessage": "Cleaning up #576 slightly; add another related fluent-style method\n",
      "commitDate": "10/8/14, 9:44 AM",
      "commitName": "17ab26bfbc3bf4820cf81bae220ed336b65488c7",
      "commitAuthor": "Cowtowncoder",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Cleaning up #576 slightly; add another related fluent-style method\n",
          "commitDate": "10/8/14, 9:44 AM",
          "commitName": "17ab26bfbc3bf4820cf81bae220ed336b65488c7",
          "commitAuthor": "Cowtowncoder",
          "commitDateOld": "10/8/14, 9:38 AM",
          "commitNameOld": "23c749c9936e8c00f180c868ea4dbe39bf8ee9b2",
          "commitAuthorOld": "",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n    _mixInAnnotations.put(new ClassKey(target), mixinSource);\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "functionStartLine": 964,
          "functionName": "addMixIn",
          "functionAnnotation": "",
          "functionDoc": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n@since 2.5\n",
          "diff": "@@ -1,4 +1,4 @@\n-public final ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n+public ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n     _mixInAnnotations.put(new ClassKey(target), mixinSource);\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, final]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Cleaning up #576 slightly; add another related fluent-style method\n",
          "commitDate": "10/8/14, 9:44 AM",
          "commitName": "17ab26bfbc3bf4820cf81bae220ed336b65488c7",
          "commitAuthor": "Cowtowncoder",
          "commitDateOld": "10/8/14, 9:38 AM",
          "commitNameOld": "23c749c9936e8c00f180c868ea4dbe39bf8ee9b2",
          "commitAuthorOld": "",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n    _mixInAnnotations.put(new ClassKey(target), mixinSource);\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "functionStartLine": 964,
          "functionName": "addMixIn",
          "functionAnnotation": "",
          "functionDoc": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n@since 2.5\n",
          "diff": "@@ -1,4 +1,4 @@\n-public final ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n+public ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n     _mixInAnnotations.put(new ClassKey(target), mixinSource);\n     return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n",
            "newValue": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n@since 2.5\n"
          }
        }
      ]
    },
    "e381bc890ed64380c27b7811435413bc7eac1b28": {
      "type": "Yrename",
      "commitMessage": "Restore of version of addMixin call, and add to new fluent method to ensure binary-comaptibility\n",
      "commitDate": "10/7/14, 10:29 AM",
      "commitName": "e381bc890ed64380c27b7811435413bc7eac1b28",
      "commitAuthor": "Adam Stroud",
      "commitDateOld": "10/7/14, 9:22 AM",
      "commitNameOld": "d2ec3c9e103b0131d65c1ed24214ddf47b11acd2",
      "commitAuthorOld": "Adam Stroud",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public final ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n    _mixInAnnotations.put(new ClassKey(target), mixinSource);\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 929,
      "functionName": "addMixIn",
      "functionAnnotation": "",
      "functionDoc": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n",
      "diff": "@@ -1,4 +1,4 @@\n-public final ObjectMapper addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n+public final ObjectMapper addMixIn(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n     _mixInAnnotations.put(new ClassKey(target), mixinSource);\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "addMixInAnnotations",
        "newValue": "addMixIn"
      }
    },
    "d2ec3c9e103b0131d65c1ed24214ddf47b11acd2": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Add fluent API for adding mixins\n",
      "commitDate": "10/7/14, 9:22 AM",
      "commitName": "d2ec3c9e103b0131d65c1ed24214ddf47b11acd2",
      "commitAuthor": "Adam Stroud",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Add fluent API for adding mixins\n",
          "commitDate": "10/7/14, 9:22 AM",
          "commitName": "d2ec3c9e103b0131d65c1ed24214ddf47b11acd2",
          "commitAuthor": "Adam Stroud",
          "commitDateOld": "5/30/14, 4:01 PM",
          "commitNameOld": "c6c8859648b9dda9eee7f7c00850b1f8be0599c7",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 129.72,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "public final ObjectMapper addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n    _mixInAnnotations.put(new ClassKey(target), mixinSource);\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "functionStartLine": 911,
          "functionName": "addMixInAnnotations",
          "functionAnnotation": "",
          "functionDoc": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n",
          "diff": "@@ -1,3 +1,4 @@\n-public final void addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n+public final ObjectMapper addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n     _mixInAnnotations.put(new ClassKey(target), mixinSource);\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "ObjectMapper"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add fluent API for adding mixins\n",
          "commitDate": "10/7/14, 9:22 AM",
          "commitName": "d2ec3c9e103b0131d65c1ed24214ddf47b11acd2",
          "commitAuthor": "Adam Stroud",
          "commitDateOld": "5/30/14, 4:01 PM",
          "commitNameOld": "c6c8859648b9dda9eee7f7c00850b1f8be0599c7",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 129.72,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "actualSource": "public final ObjectMapper addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n    _mixInAnnotations.put(new ClassKey(target), mixinSource);\n    return this;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
          "functionStartLine": 911,
          "functionName": "addMixInAnnotations",
          "functionAnnotation": "",
          "functionDoc": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n",
          "diff": "@@ -1,3 +1,4 @@\n-public final void addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n+public final ObjectMapper addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n     _mixInAnnotations.put(new ClassKey(target), mixinSource);\n+    return this;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "5087f976953ef5ce9f0fb8b27c564bca71da9bd2": {
      "type": "Yintroduced",
      "commitMessage": "yet more config clean up (?)\n",
      "commitDate": "1/18/12, 9:36 PM",
      "commitName": "5087f976953ef5ce9f0fb8b27c564bca71da9bd2",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,3 @@\n+public final void addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n+    _mixInAnnotations.put(new ClassKey(target), mixinSource);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final void addMixInAnnotations(Class\u003c?\u003e target, Class\u003c?\u003e mixinSource) {\n    _mixInAnnotations.put(new ClassKey(target), mixinSource);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
      "functionStartLine": 722,
      "functionName": "addMixInAnnotations",
      "functionAnnotation": "",
      "functionDoc": "Method to use for adding mix-in annotations to use for augmenting\nspecified class or interface. All annotations from\n\u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations\nthat \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n\n@param target Class (or interface) whose annotations to effectively override\n@param mixinSource Class (or interface) whose annotations are to\n  be \"added\" to target\u0027s annotations, overriding as necessary\n"
    }
  }
}