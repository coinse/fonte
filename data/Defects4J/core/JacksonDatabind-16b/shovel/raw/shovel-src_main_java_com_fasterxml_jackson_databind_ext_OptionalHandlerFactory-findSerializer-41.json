{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-16b",
  "repositoryPath": "/tmp/JacksonDatabind-16b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OptionalHandlerFactory.java",
  "functionName": "findSerializer",
  "functionId": "findSerializer___config-SerializationConfig__type-JavaType__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 41,
  "functionEndLine": 62,
  "numCommitsSeen": 26,
  "timeTaken": 748,
  "changeHistory": [
    "309bb143600f5b6234fb0a1812d817bba5b486de",
    "0251775c9a6dc8bec151e3461051ef46fd0378ff",
    "ad472c1cf31c7b8efa788d2bf12967ace82e6c45",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "309bb143600f5b6234fb0a1812d817bba5b486de": "Ybodychange",
    "0251775c9a6dc8bec151e3461051ef46fd0378ff": "Ymultichange(Yparameterchange,Ybodychange)",
    "ad472c1cf31c7b8efa788d2bf12967ace82e6c45": "Ybodychange",
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "309bb143600f5b6234fb0a1812d817bba5b486de": {
      "type": "Ybodychange",
      "commitMessage": "Fix Infinite recursion (StackOverflowError) when serializing a SOAP object.\n",
      "commitDate": "4/22/15, 9:26 AM",
      "commitName": "309bb143600f5b6234fb0a1812d817bba5b486de",
      "commitAuthor": "Alain Gilbert",
      "commitDateOld": "1/1/14, 5:00 PM",
      "commitNameOld": "db705dd8be62fe439971ae0e1d6db4df0e83ac54",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 475.64,
      "commitsBetweenForRepo": 686,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n    }\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    return ((Serializers) ob).findSerializer(config, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 41,
      "functionName": "findSerializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n+    if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n+        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n+    }\n     if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n-    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n-        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n     return ((Serializers) ob).findSerializer(config, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0251775c9a6dc8bec151e3461051ef46fd0378ff": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
      "commitDate": "4/16/13, 5:34 PM",
      "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
          "commitDate": "4/16/13, 5:34 PM",
          "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/5/12, 4:22 PM",
          "commitNameOld": "70c2de957f517f569dba98ceaa5aecd9e56a11a9",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 193.05,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    return ((Serializers) ob).findSerializer(config, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
          "functionStartLine": 44,
          "functionName": "findSerializer",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,29 +1,17 @@\n-public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type) {\n+public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n     if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n-    @SuppressWarnings(\"unchecked\") Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e prov \u003d (Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e) ob;\n-    Collection\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e entries \u003d prov.provide();\n-    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n-        if (rawType \u003d\u003d entry.getKey()) {\n-            return entry.getValue();\n-        }\n-    }\n-    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n-        if (entry.getKey().isAssignableFrom(rawType)) {\n-            return entry.getValue();\n-        }\n-    }\n-    return null;\n+    return ((Serializers) ob).findSerializer(config, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-SerializationConfig, type-JavaType]",
            "newValue": "[config-SerializationConfig, type-JavaType, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring optional XML handlers to reduce startup time, code duplication\n",
          "commitDate": "4/16/13, 5:34 PM",
          "commitName": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "10/5/12, 4:22 PM",
          "commitNameOld": "70c2de957f517f569dba98ceaa5aecd9e56a11a9",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 193.05,
          "commitsBetweenForRepo": 243,
          "commitsBetweenForFile": 1,
          "actualSource": "public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    return ((Serializers) ob).findSerializer(config, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
          "functionStartLine": 44,
          "functionName": "findSerializer",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,29 +1,17 @@\n-public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type) {\n+public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type, BeanDescription beanDesc) {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n     if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n-    @SuppressWarnings(\"unchecked\") Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e prov \u003d (Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e) ob;\n-    Collection\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e entries \u003d prov.provide();\n-    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n-        if (rawType \u003d\u003d entry.getKey()) {\n-            return entry.getValue();\n-        }\n-    }\n-    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n-        if (entry.getKey().isAssignableFrom(rawType)) {\n-            return entry.getValue();\n-        }\n-    }\n-    return null;\n+    return ((Serializers) ob).findSerializer(config, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "ad472c1cf31c7b8efa788d2bf12967ace82e6c45": {
      "type": "Ybodychange",
      "commitMessage": "Removed Joda datatype support from core databinding package, now at: https://github.com/FasterXML/jackson-datatype-joda\n",
      "commitDate": "3/2/12, 10:11 AM",
      "commitName": "ad472c1cf31c7b8efa788d2bf12967ace82e6c45",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/3/12, 9:50 PM",
      "commitNameOld": "eafafffda5d43e4ae2b2d6eb3a06c89575224b94",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 27.51,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    @SuppressWarnings(\"unchecked\") Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e prov \u003d (Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e) ob;\n    Collection\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e entries \u003d prov.provide();\n    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n        if (rawType \u003d\u003d entry.getKey()) {\n            return entry.getValue();\n        }\n    }\n    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n        if (entry.getKey().isAssignableFrom(rawType)) {\n            return entry.getValue();\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 45,
      "functionName": "findSerializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,31 +1,29 @@\n public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type) {\n     Class\u003c?\u003e rawType \u003d type.getRawClass();\n     String className \u003d rawType.getName();\n     String factoryName;\n-    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n-        factoryName \u003d SERIALIZERS_FOR_JODA_DATETIME;\n-    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n+    if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n         factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n     } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n         return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n     } else {\n         return null;\n     }\n     Object ob \u003d instantiate(factoryName);\n     if (ob \u003d\u003d null) {\n         return null;\n     }\n     @SuppressWarnings(\"unchecked\") Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e prov \u003d (Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e) ob;\n     Collection\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e entries \u003d prov.provide();\n     for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n         if (rawType \u003d\u003d entry.getKey()) {\n             return entry.getValue();\n         }\n     }\n     for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n         if (entry.getKey().isAssignableFrom(rawType)) {\n             return entry.getValue();\n         }\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210": {
      "type": "Ybodychange",
      "commitMessage": "Clean up, to get rid of deprecated stuff\n",
      "commitDate": "12/24/11, 10:07 PM",
      "commitName": "c3fbb3ad1e0b83ccc56a876fe9c7a2adfd4dd210",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/11, 6:23 PM",
      "commitNameOld": "d92c1ed454e8474103e7eb698b0a855e7850dbb5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n        factoryName \u003d SERIALIZERS_FOR_JODA_DATETIME;\n    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    @SuppressWarnings(\"unchecked\") Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e prov \u003d (Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e) ob;\n    Collection\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e entries \u003d prov.provide();\n    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n        if (rawType \u003d\u003d entry.getKey()) {\n            return entry.getValue();\n        }\n    }\n    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n        if (entry.getKey().isAssignableFrom(rawType)) {\n            return entry.getValue();\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 49,
      "functionName": "findSerializer",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,31 @@\n+public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type) {\n+    Class\u003c?\u003e rawType \u003d type.getRawClass();\n+    String className \u003d rawType.getName();\n+    String factoryName;\n+    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n+        factoryName \u003d SERIALIZERS_FOR_JODA_DATETIME;\n+    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n+        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n+    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n+        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n+    } else {\n+        return null;\n+    }\n+    Object ob \u003d instantiate(factoryName);\n+    if (ob \u003d\u003d null) {\n+        return null;\n+    }\n+    @SuppressWarnings(\"unchecked\") Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e prov \u003d (Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e) ob;\n+    Collection\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e entries \u003d prov.provide();\n+    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n+        if (rawType \u003d\u003d entry.getKey()) {\n+            return entry.getValue();\n+        }\n+    }\n+    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n+        if (entry.getKey().isAssignableFrom(rawType)) {\n+            return entry.getValue();\n+        }\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config, JavaType type) {\n    Class\u003c?\u003e rawType \u003d type.getRawClass();\n    String className \u003d rawType.getName();\n    String factoryName;\n    if (className.startsWith(PACKAGE_PREFIX_JODA_DATETIME)) {\n        factoryName \u003d SERIALIZERS_FOR_JODA_DATETIME;\n    } else if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSupertypeStartingWith(rawType, PACKAGE_PREFIX_JAVAX_XML)) {\n        factoryName \u003d SERIALIZERS_FOR_JAVAX_XML;\n    } else if (doesImplement(rawType, CLASS_NAME_DOM_NODE)) {\n        return (JsonSerializer\u003c?\u003e) instantiate(SERIALIZER_FOR_DOM_NODE);\n    } else {\n        return null;\n    }\n    Object ob \u003d instantiate(factoryName);\n    if (ob \u003d\u003d null) {\n        return null;\n    }\n    @SuppressWarnings(\"unchecked\") Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e prov \u003d (Provider\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e) ob;\n    Collection\u003cMap.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e\u003e entries \u003d prov.provide();\n    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n        if (rawType \u003d\u003d entry.getKey()) {\n            return entry.getValue();\n        }\n    }\n    for (Map.Entry\u003cClass\u003c?\u003e, JsonSerializer\u003c?\u003e\u003e entry : entries) {\n        if (entry.getKey().isAssignableFrom(rawType)) {\n            return entry.getValue();\n        }\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
      "functionStartLine": 52,
      "functionName": "findSerializer",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}