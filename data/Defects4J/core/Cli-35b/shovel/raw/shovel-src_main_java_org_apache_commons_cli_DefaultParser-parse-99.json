{
  "origin": "codeshovel",
  "repositoryName": "Cli-35b",
  "repositoryPath": "/tmp/Cli-35b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultParser.java",
  "functionName": "parse",
  "functionId": "parse___options-Options__arguments-String[]__properties-Properties__stopAtNonOption-boolean",
  "sourceFilePath": "src/main/java/org/apache/commons/cli/DefaultParser.java",
  "functionAnnotation": "",
  "functionDoc": "Parse the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stops\n    the parsing and the remaining arguments are added to the \n    {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized\n    argument triggers a ParseException.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
  "functionStartLine": 99,
  "functionEndLine": 133,
  "numCommitsSeen": 15,
  "timeTaken": 1023,
  "changeHistory": [
    "5b098dec44567a760c220c1e0cd6bee29262c2c4",
    "a1b5d44432c057cf675f051bb20379937565f4ef",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df",
    "a2cf820dd69e55050a8db004c305a6133c3feb2e"
  ],
  "changeHistoryShort": {
    "5b098dec44567a760c220c1e0cd6bee29262c2c4": "Yformatchange",
    "a1b5d44432c057cf675f051bb20379937565f4ef": "Ybodychange",
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": "Yfilerename",
    "a2cf820dd69e55050a8db004c305a6133c3feb2e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5b098dec44567a760c220c1e0cd6bee29262c2c4": {
      "type": "Yformatchange",
      "commitMessage": "trailing spaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1095657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/21/11, 4:13 AM",
      "commitName": "5b098dec44567a760c220c1e0cd6bee29262c2c4",
      "commitAuthor": "Simone Tripodi",
      "commitDateOld": "4/12/11, 11:57 AM",
      "commitNameOld": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 8.68,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    this.stopAtNonOption \u003d stopAtNonOption;\n    skipParsing \u003d false;\n    currentOption \u003d null;\n    expectedOpts \u003d new ArrayList(options.getRequiredOptions());\n    for (OptionGroup group : options.getOptionGroups()) {\n        group.setSelected(null);\n    }\n    cmd \u003d new CommandLine();\n    if (arguments !\u003d null) {\n        for (String argument : arguments) {\n            handleToken(argument);\n        }\n    }\n    checkRequiredArgs();\n    handleProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 97,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stops\n    the parsing and the remaining arguments are added to the \n    {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized\n    argument triggers a ParseException.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a1b5d44432c057cf675f051bb20379937565f4ef": {
      "type": "Ybodychange",
      "commitMessage": "Moving to Java 5\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@1091539 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/12/11, 11:57 AM",
      "commitName": "a1b5d44432c057cf675f051bb20379937565f4ef",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/17/10, 12:57 AM",
      "commitNameOld": "324b7f901b91614927926a5bab1d9e0e2325f018",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 299.46,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    this.stopAtNonOption \u003d stopAtNonOption;\n    skipParsing \u003d false;\n    currentOption \u003d null;\n    expectedOpts \u003d new ArrayList(options.getRequiredOptions());\n    for (OptionGroup group : options.getOptionGroups()) {\n        group.setSelected(null);\n    }\n    cmd \u003d new CommandLine();\n    if (arguments !\u003d null) {\n        for (String argument : arguments) {\n            handleToken(argument);\n        }\n    }\n    checkRequiredArgs();\n    handleProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 97,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stops\n    the parsing and the remaining arguments are added to the \n    {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized\n    argument triggers a ParseException.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
      "diff": "@@ -1,21 +1,20 @@\n public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n     this.options \u003d options;\n     this.stopAtNonOption \u003d stopAtNonOption;\n     skipParsing \u003d false;\n     currentOption \u003d null;\n     expectedOpts \u003d new ArrayList(options.getRequiredOptions());\n-    for (Iterator it \u003d options.getOptionGroups().iterator(); it.hasNext(); ) {\n-        OptionGroup group \u003d (OptionGroup) it.next();\n+    for (OptionGroup group : options.getOptionGroups()) {\n         group.setSelected(null);\n     }\n     cmd \u003d new CommandLine();\n     if (arguments !\u003d null) {\n-        for (int i \u003d 0; i \u003c arguments.length; i++) {\n-            handleToken(arguments[i]);\n+        for (String argument : arguments) {\n+            handleToken(argument);\n         }\n     }\n     checkRequiredArgs();\n     handleProperties(properties);\n     checkRequiredOptions();\n     return cmd;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1596f3bbe57986361da4ac1a23634dd5b00d10df": {
      "type": "Yfilerename",
      "commitMessage": "Switched to the Maven 2 default directory layout (part 3)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/10, 2:45 AM",
      "commitName": "1596f3bbe57986361da4ac1a23634dd5b00d10df",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "6/16/10, 2:42 AM",
      "commitNameOld": "406a35f1a128944b7c51dcbc4a1f04c3f8bec3e6",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    this.stopAtNonOption \u003d stopAtNonOption;\n    skipParsing \u003d false;\n    currentOption \u003d null;\n    expectedOpts \u003d new ArrayList(options.getRequiredOptions());\n    for (Iterator it \u003d options.getOptionGroups().iterator(); it.hasNext(); ) {\n        OptionGroup group \u003d (OptionGroup) it.next();\n        group.setSelected(null);\n    }\n    cmd \u003d new CommandLine();\n    if (arguments !\u003d null) {\n        for (int i \u003d 0; i \u003c arguments.length; i++) {\n            handleToken(arguments[i]);\n        }\n    }\n    checkRequiredArgs();\n    handleProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/main/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 98,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stops\n    the parsing and the remaining arguments are added to the \n    {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized\n    argument triggers a ParseException.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/cli/DefaultParser.java",
        "newPath": "src/main/java/org/apache/commons/cli/DefaultParser.java"
      }
    },
    "a2cf820dd69e55050a8db004c305a6133c3feb2e": {
      "type": "Yintroduced",
      "commitMessage": "Added the missing parse methods accepting a map with the default options to DefaultParser\nMoved the related tests from ValueTest to ParserTestCase\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/trunk@955099 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/15/10, 5:14 PM",
      "commitName": "a2cf820dd69e55050a8db004c305a6133c3feb2e",
      "commitAuthor": "Emmanuel Bourg",
      "diff": "@@ -0,0 +1,21 @@\n+public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n+    this.options \u003d options;\n+    this.stopAtNonOption \u003d stopAtNonOption;\n+    skipParsing \u003d false;\n+    currentOption \u003d null;\n+    expectedOpts \u003d new ArrayList(options.getRequiredOptions());\n+    for (Iterator it \u003d options.getOptionGroups().iterator(); it.hasNext(); ) {\n+        OptionGroup group \u003d (OptionGroup) it.next();\n+        group.setSelected(null);\n+    }\n+    cmd \u003d new CommandLine();\n+    if (arguments !\u003d null) {\n+        for (int i \u003d 0; i \u003c arguments.length; i++) {\n+            handleToken(arguments[i]);\n+        }\n+    }\n+    checkRequiredArgs();\n+    handleProperties(properties);\n+    checkRequiredOptions();\n+    return cmd;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {\n    this.options \u003d options;\n    this.stopAtNonOption \u003d stopAtNonOption;\n    skipParsing \u003d false;\n    currentOption \u003d null;\n    expectedOpts \u003d new ArrayList(options.getRequiredOptions());\n    for (Iterator it \u003d options.getOptionGroups().iterator(); it.hasNext(); ) {\n        OptionGroup group \u003d (OptionGroup) it.next();\n        group.setSelected(null);\n    }\n    cmd \u003d new CommandLine();\n    if (arguments !\u003d null) {\n        for (int i \u003d 0; i \u003c arguments.length; i++) {\n            handleToken(arguments[i]);\n        }\n    }\n    checkRequiredArgs();\n    handleProperties(properties);\n    checkRequiredOptions();\n    return cmd;\n}",
      "path": "src/java/org/apache/commons/cli/DefaultParser.java",
      "functionStartLine": 98,
      "functionName": "parse",
      "functionAnnotation": "",
      "functionDoc": "Parse the arguments according to the specified options and properties.\n\n@param options the specified Options\n@param arguments the command line arguments\n@param properties command line option name-value pairs\n@param stopAtNonOption if \u003ctt\u003etrue\u003c/tt\u003e an unrecognized argument stops\n    the parsing and the remaining arguments are added to the \n    {@link CommandLine}s args list. If \u003ctt\u003efalse\u003c/tt\u003e an unrecognized\n    argument triggers a ParseException.\n@return the list of atomic option and value tokens\n@throws ParseException if there are any problems encountered\nwhile parsing the command line tokens.\n"
    }
  }
}