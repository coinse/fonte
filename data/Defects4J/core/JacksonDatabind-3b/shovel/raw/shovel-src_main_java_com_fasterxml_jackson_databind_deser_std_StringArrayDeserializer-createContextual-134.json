{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-3b",
  "repositoryPath": "/tmp/JacksonDatabind-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StringArrayDeserializer.java",
  "functionName": "createContextual",
  "functionId": "createContextual___ctxt-DeserializationContext__property-BeanProperty",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
  "functionAnnotation": "@Override",
  "functionDoc": "Contextualization is needed to see whether we can \"inline\" deserialization\nof String values, or if we have to use separate value deserializer.\n",
  "functionStartLine": 134,
  "functionEndLine": 152,
  "numCommitsSeen": 6,
  "timeTaken": 533,
  "changeHistory": [
    "4f90dbca87b680cb10abdb0df5129491da3486d2",
    "f72fe21f7e7c306d42722456a5eff319155df99e",
    "f2a2d4d24b6b1176117940f5e4c75eae550d742b"
  ],
  "changeHistoryShort": {
    "4f90dbca87b680cb10abdb0df5129491da3486d2": "Ybodychange",
    "f72fe21f7e7c306d42722456a5eff319155df99e": "Ybodychange",
    "f2a2d4d24b6b1176117940f5e4c75eae550d742b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4f90dbca87b680cb10abdb0df5129491da3486d2": {
      "type": "Ybodychange",
      "commitMessage": "Further improvements to contextualization for deser side\n",
      "commitDate": "9/5/13, 9:45 PM",
      "commitName": "4f90dbca87b680cb10abdb0df5129491da3486d2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/4/13, 10:07 PM",
      "commitNameOld": "f72fe21f7e7c306d42722456a5eff319155df99e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d _elementDeserializer;\n    deser \u003d findConvertingContentDeserializer(ctxt, property, deser);\n    if (deser \u003d\u003d null) {\n        deser \u003d ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n    } else {\n        deser \u003d ctxt.handleSecondaryContextualization(deser, property);\n    }\n    if (deser !\u003d null \u0026\u0026 this.isDefaultDeserializer(deser)) {\n        deser \u003d null;\n    }\n    if (_elementDeserializer !\u003d deser) {\n        return new StringArrayDeserializer(deser);\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
      "functionStartLine": 140,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Contextualization is needed to see whether we can \"inline\" deserialization\nof String values, or if we have to use separate value deserializer.\n",
      "diff": "@@ -1,17 +1,17 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003c?\u003e deser \u003d _elementDeserializer;\n     deser \u003d findConvertingContentDeserializer(ctxt, property, deser);\n     if (deser \u003d\u003d null) {\n         deser \u003d ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n     } else {\n-        deser \u003d ctxt.handleContextualization(deser, property);\n+        deser \u003d ctxt.handleSecondaryContextualization(deser, property);\n     }\n     if (deser !\u003d null \u0026\u0026 this.isDefaultDeserializer(deser)) {\n         deser \u003d null;\n     }\n     if (_elementDeserializer !\u003d deser) {\n         return new StringArrayDeserializer(deser);\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f72fe21f7e7c306d42722456a5eff319155df99e": {
      "type": "Ybodychange",
      "commitMessage": "Bit of groundwork for (possibly?) implementing #224; contextualization isolated in one place\n",
      "commitDate": "9/4/13, 10:07 PM",
      "commitName": "f72fe21f7e7c306d42722456a5eff319155df99e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/15/13, 8:12 PM",
      "commitNameOld": "3013582891ea5a74632dcc77f95be02f918b4436",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 142.08,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d _elementDeserializer;\n    deser \u003d findConvertingContentDeserializer(ctxt, property, deser);\n    if (deser \u003d\u003d null) {\n        deser \u003d ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n    } else {\n        deser \u003d ctxt.handleContextualization(deser, property);\n    }\n    if (deser !\u003d null \u0026\u0026 this.isDefaultDeserializer(deser)) {\n        deser \u003d null;\n    }\n    if (_elementDeserializer !\u003d deser) {\n        return new StringArrayDeserializer(deser);\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
      "functionStartLine": 140,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Contextualization is needed to see whether we can \"inline\" deserialization\nof String values, or if we have to use separate value deserializer.\n",
      "diff": "@@ -1,19 +1,17 @@\n @Override\n public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n     JsonDeserializer\u003c?\u003e deser \u003d _elementDeserializer;\n     deser \u003d findConvertingContentDeserializer(ctxt, property, deser);\n     if (deser \u003d\u003d null) {\n         deser \u003d ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n     } else {\n-        if (deser instanceof ContextualDeserializer) {\n-            deser \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-        }\n+        deser \u003d ctxt.handleContextualization(deser, property);\n     }\n     if (deser !\u003d null \u0026\u0026 this.isDefaultDeserializer(deser)) {\n         deser \u003d null;\n     }\n     if (_elementDeserializer !\u003d deser) {\n         return new StringArrayDeserializer(deser);\n     }\n     return this;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f2a2d4d24b6b1176117940f5e4c75eae550d742b": {
      "type": "Yintroduced",
      "commitMessage": "Fix handling of String[] deserializer, to allow customization as expected.\n",
      "commitDate": "3/2/13, 6:41 PM",
      "commitName": "f2a2d4d24b6b1176117940f5e4c75eae550d742b",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,19 @@\n+@Override\n+public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n+    JsonDeserializer\u003c?\u003e deser \u003d _elementDeserializer;\n+    deser \u003d findConvertingContentDeserializer(ctxt, property, deser);\n+    if (deser \u003d\u003d null) {\n+        deser \u003d ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n+    } else {\n+        if (deser instanceof ContextualDeserializer) {\n+            deser \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n+        }\n+    }\n+    if (deser !\u003d null \u0026\u0026 this.isDefaultDeserializer(deser)) {\n+        deser \u003d null;\n+    }\n+    if (_elementDeserializer !\u003d deser) {\n+        return new StringArrayDeserializer(deser);\n+    }\n+    return this;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d _elementDeserializer;\n    deser \u003d findConvertingContentDeserializer(ctxt, property, deser);\n    if (deser \u003d\u003d null) {\n        deser \u003d ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n    } else {\n        if (deser instanceof ContextualDeserializer) {\n            deser \u003d ((ContextualDeserializer) deser).createContextual(ctxt, property);\n        }\n    }\n    if (deser !\u003d null \u0026\u0026 this.isDefaultDeserializer(deser)) {\n        deser \u003d null;\n    }\n    if (_elementDeserializer !\u003d deser) {\n        return new StringArrayDeserializer(deser);\n    }\n    return this;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java",
      "functionStartLine": 138,
      "functionName": "createContextual",
      "functionAnnotation": "@Override",
      "functionDoc": "Contextualization is needed to see whether we can \"inline\" deserialization\nof String values, or if we have to use separate value deserializer.\n"
    }
  }
}