{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-3b",
  "repositoryPath": "/tmp/JacksonDatabind-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BasicDeserializerFactory.java",
  "functionName": "createArrayDeserializer",
  "functionId": "createArrayDeserializer___ctxt-DeserializationContext__type-ArrayType__beanDesc-BeanDescription(modifiers-final)",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 737,
  "functionEndLine": 773,
  "numCommitsSeen": 198,
  "timeTaken": 6748,
  "changeHistory": [
    "fcbbccccff541e3492ebf5425ed5223581f77641",
    "3013582891ea5a74632dcc77f95be02f918b4436",
    "fefea2982da9703a5aa5b55f7353736a0196937a",
    "5cde517aa7520610ea6e90ae3d7ad30c3cd5296b",
    "d0bb3152ceec7c33c700d21454b34700968a526a",
    "49b712169c432100297164f6b5102f3578bd636c",
    "e5d31900983a1e187c1fe5eb737353ddb74909d0",
    "9b4ce31436b36563e93933a25d7d42d3aba2f1fc",
    "857ddd27198f3dd9fb95800b3728ea26fa47130b",
    "b37ff33bbc7885f21a208bee4f42126468f55d41",
    "bf355caa0821e58968df3bf6c12f612639224e47",
    "f0b28a96644b3dc22c997a05975de335dfed0418",
    "53fb8522b402a409139175cbf867afa924e549f5",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "29be671c04f3a90863874234663227dd4568b326",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "fcbbccccff541e3492ebf5425ed5223581f77641": "Ybodychange",
    "3013582891ea5a74632dcc77f95be02f918b4436": "Ybodychange",
    "fefea2982da9703a5aa5b55f7353736a0196937a": "Ybodychange",
    "5cde517aa7520610ea6e90ae3d7ad30c3cd5296b": "Ybodychange",
    "d0bb3152ceec7c33c700d21454b34700968a526a": "Yparameterchange",
    "49b712169c432100297164f6b5102f3578bd636c": "Ybodychange",
    "e5d31900983a1e187c1fe5eb737353ddb74909d0": "Ybodychange",
    "9b4ce31436b36563e93933a25d7d42d3aba2f1fc": "Ybodychange",
    "857ddd27198f3dd9fb95800b3728ea26fa47130b": "Ybodychange",
    "b37ff33bbc7885f21a208bee4f42126468f55d41": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf355caa0821e58968df3bf6c12f612639224e47": "Yparameterchange",
    "f0b28a96644b3dc22c997a05975de335dfed0418": "Yparameterchange",
    "53fb8522b402a409139175cbf867afa924e549f5": "Ybodychange",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Yparameterchange",
    "29be671c04f3a90863874234663227dd4568b326": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fcbbccccff541e3492ebf5425ed5223581f77641": {
      "type": "Ybodychange",
      "commitMessage": "cleanup\n",
      "commitDate": "7/25/13, 10:42 PM",
      "commitName": "fcbbccccff541e3492ebf5425ed5223581f77641",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "7/16/13, 8:46 PM",
      "commitNameOld": "32966849408561825efb2893830e856fd4727ecd",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 9.08,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n    if (deser \u003d\u003d null) {\n        if (contentDeser \u003d\u003d null) {\n            Class\u003c?\u003e raw \u003d elemType.getRawClass();\n            if (elemType.isPrimitive()) {\n                return PrimitiveArrayDeserializers.forType(raw);\n            } else if (raw \u003d\u003d String.class) {\n                return StringArrayDeserializer.instance;\n            }\n        }\n        deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n    }\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n        }\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 706,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,28 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n     }\n     JsonDeserializer\u003c?\u003e deser \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n     if (deser \u003d\u003d null) {\n         if (contentDeser \u003d\u003d null) {\n             Class\u003c?\u003e raw \u003d elemType.getRawClass();\n             if (elemType.isPrimitive()) {\n                 return PrimitiveArrayDeserializers.forType(raw);\n             } else if (raw \u003d\u003d String.class) {\n                 return StringArrayDeserializer.instance;\n             }\n         }\n-        if (deser \u003d\u003d null) {\n-            deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n-        }\n+        deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n     }\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n         }\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3013582891ea5a74632dcc77f95be02f918b4436": {
      "type": "Ybodychange",
      "commitMessage": "Simplified handling of primitive array deserializers\n",
      "commitDate": "4/15/13, 8:12 PM",
      "commitName": "3013582891ea5a74632dcc77f95be02f918b4436",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/15/13, 5:20 PM",
      "commitNameOld": "313875faf97970ce249bbb61ba9a65c9e270c1fc",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n    if (deser \u003d\u003d null) {\n        if (contentDeser \u003d\u003d null) {\n            Class\u003c?\u003e raw \u003d elemType.getRawClass();\n            if (elemType.isPrimitive()) {\n                return PrimitiveArrayDeserializers.forType(raw);\n            } else if (raw \u003d\u003d String.class) {\n                return StringArrayDeserializer.instance;\n            }\n        }\n        if (deser \u003d\u003d null) {\n            deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n        }\n    }\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n        }\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 688,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n     }\n     JsonDeserializer\u003c?\u003e deser \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n     if (deser \u003d\u003d null) {\n         if (contentDeser \u003d\u003d null) {\n-            deser \u003d _arrayDeserializers.get(elemType);\n-            if (deser \u003d\u003d null) {\n-                if (elemType.isPrimitive()) {\n-                    throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n-                }\n+            Class\u003c?\u003e raw \u003d elemType.getRawClass();\n+            if (elemType.isPrimitive()) {\n+                return PrimitiveArrayDeserializers.forType(raw);\n+            } else if (raw \u003d\u003d String.class) {\n+                return StringArrayDeserializer.instance;\n             }\n         }\n         if (deser \u003d\u003d null) {\n             deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n         }\n     }\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n         }\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fefea2982da9703a5aa5b55f7353736a0196937a": {
      "type": "Ybodychange",
      "commitMessage": "Compiler warning cleanup; continuing with adding more deserializer modifier options\n",
      "commitDate": "11/25/12, 10:09 PM",
      "commitName": "fefea2982da9703a5aa5b55f7353736a0196937a",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/25/12, 3:43 PM",
      "commitNameOld": "5cde517aa7520610ea6e90ae3d7ad30c3cd5296b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n    if (deser \u003d\u003d null) {\n        if (contentDeser \u003d\u003d null) {\n            deser \u003d _arrayDeserializers.get(elemType);\n            if (deser \u003d\u003d null) {\n                if (elemType.isPrimitive()) {\n                    throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n                }\n            }\n        }\n        if (deser \u003d\u003d null) {\n            deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n        }\n    }\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n        }\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 698,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,32 +1,30 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n     final DeserializationConfig config \u003d ctxt.getConfig();\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n     }\n-    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n-    if (custom !\u003d null) {\n-        return custom;\n-    }\n-    JsonDeserializer\u003c?\u003e deser \u003d null;\n-    if (contentDeser \u003d\u003d null) {\n-        deser \u003d _arrayDeserializers.get(elemType);\n-        if (deser \u003d\u003d null) {\n-            if (elemType.isPrimitive()) {\n-                throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n+    JsonDeserializer\u003c?\u003e deser \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n+    if (deser \u003d\u003d null) {\n+        if (contentDeser \u003d\u003d null) {\n+            deser \u003d _arrayDeserializers.get(elemType);\n+            if (deser \u003d\u003d null) {\n+                if (elemType.isPrimitive()) {\n+                    throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n+                }\n             }\n         }\n-    }\n-    if (deser \u003d\u003d null) {\n-        deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n+        if (deser \u003d\u003d null) {\n+            deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n+        }\n     }\n     if (_factoryConfig.hasDeserializerModifiers()) {\n         for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n             deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n         }\n     }\n     return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5cde517aa7520610ea6e90ae3d7ad30c3cd5296b": {
      "type": "Ybodychange",
      "commitMessage": "Start working on [Issue#120]\n",
      "commitDate": "11/25/12, 3:43 PM",
      "commitName": "5cde517aa7520610ea6e90ae3d7ad30c3cd5296b",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/21/12, 12:07 PM",
      "commitNameOld": "88ae9dc8de0f5327a7c0ca72232dd8e3da6e5446",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.15,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n    final DeserializationConfig config \u003d ctxt.getConfig();\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    JsonDeserializer\u003c?\u003e deser \u003d null;\n    if (contentDeser \u003d\u003d null) {\n        deser \u003d _arrayDeserializers.get(elemType);\n        if (deser \u003d\u003d null) {\n            if (elemType.isPrimitive()) {\n                throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n            }\n        }\n    }\n    if (deser \u003d\u003d null) {\n        deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n    }\n    if (_factoryConfig.hasDeserializerModifiers()) {\n        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n            deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n        }\n    }\n    return deser;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 698,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,32 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n+    final DeserializationConfig config \u003d ctxt.getConfig();\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n-    if (contentDeser \u003d\u003d null) {\n-        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n-        if (deser !\u003d null) {\n-            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, null, contentDeser);\n-            if (custom !\u003d null) {\n-                return custom;\n-            }\n-            return deser;\n-        }\n-        if (elemType.isPrimitive()) {\n-            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n-        }\n-    }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n-        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType);\n+        elemTypeDeser \u003d findTypeDeserializer(config, elemType);\n     }\n-    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n+    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n-    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n+    JsonDeserializer\u003c?\u003e deser \u003d null;\n+    if (contentDeser \u003d\u003d null) {\n+        deser \u003d _arrayDeserializers.get(elemType);\n+        if (deser \u003d\u003d null) {\n+            if (elemType.isPrimitive()) {\n+                throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n+            }\n+        }\n+    }\n+    if (deser \u003d\u003d null) {\n+        deser \u003d new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n+    }\n+    if (_factoryConfig.hasDeserializerModifiers()) {\n+        for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+            deser \u003d mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n+        }\n+    }\n+    return deser;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d0bb3152ceec7c33c700d21454b34700968a526a": {
      "type": "Yparameterchange",
      "commitMessage": "Removing BeanProperty from TypeDeserializer handling as well\n",
      "commitDate": "1/31/12, 1:04 PM",
      "commitName": "d0bb3152ceec7c33c700d21454b34700968a526a",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/31/12, 12:45 PM",
      "commitNameOld": "c3a73d02ac74b9f0011b2fb8c5f4a764344a60ce",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, null, contentDeser);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 665,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n-public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n             JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, null, contentDeser);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType);\n     }\n     JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[ctxt-DeserializationContext, type-ArrayType, beanDesc-BeanDescription(modifiers-final), property-BeanProperty]",
        "newValue": "[ctxt-DeserializationContext, type-ArrayType, beanDesc-BeanDescription(modifiers-final)]"
      }
    },
    "49b712169c432100297164f6b5102f3578bd636c": {
      "type": "Ybodychange",
      "commitMessage": "Removing BeanProperty from TypeDeserializer constructors, now added via fluent factories\n",
      "commitDate": "1/30/12, 10:13 PM",
      "commitName": "49b712169c432100297164f6b5102f3578bd636c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/30/12, 7:15 PM",
      "commitNameOld": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, null, contentDeser);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 665,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n             JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, null, contentDeser);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n-        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n+        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType);\n     }\n     JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e5d31900983a1e187c1fe5eb737353ddb74909d0": {
      "type": "Ybodychange",
      "commitMessage": "Remove BeanProperty from being passed to Deserializers\n",
      "commitDate": "1/30/12, 3:55 PM",
      "commitName": "e5d31900983a1e187c1fe5eb737353ddb74909d0",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/30/12, 9:05 AM",
      "commitNameOld": "082511bd55135d237757dbee3eb7246e6b786f27",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, null, contentDeser);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 665,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n-            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, null, contentDeser);\n+            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, null, contentDeser);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n     }\n-    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, elemTypeDeser, contentDeser);\n+    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b4ce31436b36563e93933a25d7d42d3aba2f1fc": {
      "type": "Ybodychange",
      "commitMessage": "Commit ObjectArrayDeserializer\n",
      "commitDate": "1/30/12, 8:59 AM",
      "commitName": "9b4ce31436b36563e93933a25d7d42d3aba2f1fc",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/30/12, 8:47 AM",
      "commitNameOld": "faebde9f18e0dcff6a6a82ed0f3a276eb915f675",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, null, contentDeser);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 665,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n             JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, null, contentDeser);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n     }\n     JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n-    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n+    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "857ddd27198f3dd9fb95800b3728ea26fa47130b": {
      "type": "Ybodychange",
      "commitMessage": "Cosmetic refactoring: making Deserializers callbacks more similar, passing same common args\n",
      "commitDate": "1/24/12, 4:51 PM",
      "commitName": "857ddd27198f3dd9fb95800b3728ea26fa47130b",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 4:19 PM",
      "commitNameOld": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, null, contentDeser);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 307,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n-            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, null, null);\n+            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, null, contentDeser);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n     }\n-    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, elemTypeDeser, contentDeser);\n+    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), beanDesc, property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b37ff33bbc7885f21a208bee4f42126468f55d41": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
      "commitDate": "1/24/12, 4:19 PM",
      "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 237,
          "functionName": "createArrayDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,27 @@\n @Override\n-public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n-            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n+            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, null, null);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n-        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n+        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n     }\n-    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n+    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-ArrayType, beanDesc-BeanDescription(modifiers-final), property-BeanProperty]",
            "newValue": "[ctxt-DeserializationContext, type-ArrayType, beanDesc-BeanDescription(modifiers-final), property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Yet more refactoring, trying to be able to pass DeserializationContext to ContextualDeserializer\n",
          "commitDate": "1/24/12, 4:19 PM",
          "commitName": "b37ff33bbc7885f21a208bee4f42126468f55d41",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 2:46 PM",
          "commitNameOld": "bf355caa0821e58968df3bf6c12f612639224e47",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 237,
          "functionName": "createArrayDeserializer",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,27 +1,27 @@\n @Override\n-public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n-            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n+            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, null, null);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n-        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n+        elemTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), elemType, property);\n     }\n-    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n+    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, ctxt.getConfig(), property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "bf355caa0821e58968df3bf6c12f612639224e47": {
      "type": "Yparameterchange",
      "commitMessage": "Yet more refactoring, trying to remove back-refs from DeserializerFactory to context/cache\n",
      "commitDate": "1/24/12, 2:46 PM",
      "commitName": "bf355caa0821e58968df3bf6c12f612639224e47",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 1:27 PM",
      "commitNameOld": "f0b28a96644b3dc22c997a05975de335dfed0418",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 237,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n-public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, ArrayType type, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, ArrayType type, final BeanDescription beanDesc, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n             JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n     }\n     JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, type-ArrayType, property-BeanProperty]",
        "newValue": "[config-DeserializationConfig, type-ArrayType, beanDesc-BeanDescription(modifiers-final), property-BeanProperty]"
      }
    },
    "f0b28a96644b3dc22c997a05975de335dfed0418": {
      "type": "Yparameterchange",
      "commitMessage": "...\n",
      "commitDate": "1/24/12, 1:27 PM",
      "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 1:02 PM",
      "commitNameOld": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, ArrayType type, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 237,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,27 +1,27 @@\n @Override\n-public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerCache p, ArrayType type, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, ArrayType type, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n             JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n     }\n     JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, p-DeserializerCache, type-ArrayType, property-BeanProperty]",
        "newValue": "[config-DeserializationConfig, type-ArrayType, property-BeanProperty]"
      }
    },
    "53fb8522b402a409139175cbf867afa924e549f5": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring: make all structured standard deserializers implement proper resolve(), instead of resolving things on construction\n",
      "commitDate": "1/24/12, 1:02 PM",
      "commitName": "53fb8522b402a409139175cbf867afa924e549f5",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:23 AM",
      "commitNameOld": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerCache p, ArrayType type, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 237,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,27 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerCache p, ArrayType type, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n             JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n     }\n     JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n-    if (contentDeser \u003d\u003d null) {\n-        contentDeser \u003d p.findValueDeserializer(config, elemType, property);\n-    }\n-    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n+    return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Yparameterchange",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:00 AM",
      "commitNameOld": "29be671c04f3a90863874234663227dd4568b326",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerCache p, ArrayType type, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (contentDeser \u003d\u003d null) {\n        contentDeser \u003d p.findValueDeserializer(config, elemType, property);\n    }\n    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 237,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n-public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerProvider p, ArrayType type, BeanProperty property) throws JsonMappingException {\n+public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerCache p, ArrayType type, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n             JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n     }\n     JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (contentDeser \u003d\u003d null) {\n         contentDeser \u003d p.findValueDeserializer(config, elemType, property);\n     }\n     return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, p-DeserializerProvider, type-ArrayType, property-BeanProperty]",
        "newValue": "[config-DeserializationConfig, p-DeserializerCache, type-ArrayType, property-BeanProperty]"
      }
    },
    "29be671c04f3a90863874234663227dd4568b326": {
      "type": "Ybodychange",
      "commitMessage": "Remove DeserializerProvider from calls to Deserializers\n",
      "commitDate": "1/24/12, 11:00 AM",
      "commitName": "29be671c04f3a90863874234663227dd4568b326",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/22/12, 10:57 PM",
      "commitNameOld": "28bde0726d83be7f70ca4586abee6f536bfc8885",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.5,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerProvider p, ArrayType type, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (contentDeser \u003d\u003d null) {\n        contentDeser \u003d p.findValueDeserializer(config, elemType, property);\n    }\n    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 237,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n @Override\n public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerProvider p, ArrayType type, BeanProperty property) throws JsonMappingException {\n     JavaType elemType \u003d type.getContentType();\n     JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n     if (contentDeser \u003d\u003d null) {\n         JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n         if (deser !\u003d null) {\n-            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, p, property, null, null);\n+            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, null, null);\n             if (custom !\u003d null) {\n                 return custom;\n             }\n             return deser;\n         }\n         if (elemType.isPrimitive()) {\n             throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n         }\n     }\n     TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n     if (elemTypeDeser \u003d\u003d null) {\n         elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n     }\n-    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, p, property, elemTypeDeser, contentDeser);\n+    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, property, elemTypeDeser, contentDeser);\n     if (custom !\u003d null) {\n         return custom;\n     }\n     if (contentDeser \u003d\u003d null) {\n         contentDeser \u003d p.findValueDeserializer(config, elemType, property);\n     }\n     return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,30 @@\n+@Override\n+public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerProvider p, ArrayType type, BeanProperty property) throws JsonMappingException {\n+    JavaType elemType \u003d type.getContentType();\n+    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n+    if (contentDeser \u003d\u003d null) {\n+        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n+        if (deser !\u003d null) {\n+            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, p, property, null, null);\n+            if (custom !\u003d null) {\n+                return custom;\n+            }\n+            return deser;\n+        }\n+        if (elemType.isPrimitive()) {\n+            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n+        }\n+    }\n+    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n+    if (elemTypeDeser \u003d\u003d null) {\n+        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n+    }\n+    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, p, property, elemTypeDeser, contentDeser);\n+    if (custom !\u003d null) {\n+        return custom;\n+    }\n+    if (contentDeser \u003d\u003d null) {\n+        contentDeser \u003d p.findValueDeserializer(config, elemType, property);\n+    }\n+    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationConfig config, DeserializerProvider p, ArrayType type, BeanProperty property) throws JsonMappingException {\n    JavaType elemType \u003d type.getContentType();\n    JsonDeserializer\u003cObject\u003e contentDeser \u003d elemType.getValueHandler();\n    if (contentDeser \u003d\u003d null) {\n        JsonDeserializer\u003c?\u003e deser \u003d _arrayDeserializers.get(elemType);\n        if (deser !\u003d null) {\n            JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, p, property, null, null);\n            if (custom !\u003d null) {\n                return custom;\n            }\n            return deser;\n        }\n        if (elemType.isPrimitive()) {\n            throw new IllegalArgumentException(\"Internal error: primitive type (\" + type + \") passed, no array deserializer found\");\n        }\n    }\n    TypeDeserializer elemTypeDeser \u003d elemType.getTypeHandler();\n    if (elemTypeDeser \u003d\u003d null) {\n        elemTypeDeser \u003d findTypeDeserializer(config, elemType, property);\n    }\n    JsonDeserializer\u003c?\u003e custom \u003d _findCustomArrayDeserializer(type, config, p, property, elemTypeDeser, contentDeser);\n    if (custom !\u003d null) {\n        return custom;\n    }\n    if (contentDeser \u003d\u003d null) {\n        contentDeser \u003d p.findValueDeserializer(config, elemType, property);\n    }\n    return new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 186,
      "functionName": "createArrayDeserializer",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}