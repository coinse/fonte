{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-3b",
  "repositoryPath": "/tmp/JacksonDatabind-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StdDeserializer.java",
  "functionName": "findConvertingContentDeserializer",
  "functionId": "findConvertingContentDeserializer___ctxt-DeserializationContext__prop-BeanProperty__existingDeserializer-JsonDeserializer__?__",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
  "functionAnnotation": "",
  "functionDoc": "Helper method that can be used to see if specified property has annotation\nindicating that a converter is to be used for contained values (contents\nof structured types; array/List/Map values)\n\n@param existingDeserializer (optional) configured content\n   serializer if one already exists.\n@since 2.2\n",
  "functionStartLine": 861,
  "functionEndLine": 878,
  "numCommitsSeen": 39,
  "timeTaken": 1665,
  "changeHistory": [
    "c1661b67723ed5c394b1fad5595bb01b370bd1c0",
    "cc737528660b99e71865096e3cd0c4c4a2b3871e",
    "e1e19f512c25e1509f0fd386ab84e7fe287708f7",
    "6751d13d4e0da1af79b05937ad738728ba031f70"
  ],
  "changeHistoryShort": {
    "c1661b67723ed5c394b1fad5595bb01b370bd1c0": "Ydocchange",
    "cc737528660b99e71865096e3cd0c4c4a2b3871e": "Ybodychange",
    "e1e19f512c25e1509f0fd386ab84e7fe287708f7": "Ybodychange",
    "6751d13d4e0da1af79b05937ad738728ba031f70": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c1661b67723ed5c394b1fad5595bb01b370bd1c0": {
      "type": "Ydocchange",
      "commitMessage": "fix 2 javadoc provs\n",
      "commitDate": "4/17/13, 7:31 PM",
      "commitName": "c1661b67723ed5c394b1fad5595bb01b370bd1c0",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/3/13, 1:11 PM",
      "commitNameOld": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 45.22,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (intr !\u003d null \u0026\u0026 prop !\u003d null) {\n        Object convDef \u003d intr.findDeserializationContentConverter(prop.getMember());\n        if (convDef !\u003d null) {\n            Converter\u003cObject, Object\u003e conv \u003d ctxt.converterInstance(prop.getMember(), convDef);\n            JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n            if (existingDeserializer \u003d\u003d null) {\n                existingDeserializer \u003d ctxt.findContextualValueDeserializer(delegateType, prop);\n            }\n            return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, existingDeserializer);\n        }\n    }\n    return existingDeserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 653,
      "functionName": "findConvertingContentDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property has annotation\nindicating that a converter is to be used for contained values (contents\nof structured types; array/List/Map values)\n\n@param existingDeserializer (optional) configured content\n   serializer if one already exists.\n@since 2.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Helper method that can be used to see if specified property has annotation\nindicating that a converter is to be used for contained values (contents\nof structured types; array/List/Map values)\n\n@param existingSerializer (optional) configured content\n   serializer if one already exists.\n@since 2.2\n",
        "newValue": "Helper method that can be used to see if specified property has annotation\nindicating that a converter is to be used for contained values (contents\nof structured types; array/List/Map values)\n\n@param existingDeserializer (optional) configured content\n   serializer if one already exists.\n@since 2.2\n"
      }
    },
    "cc737528660b99e71865096e3cd0c4c4a2b3871e": {
      "type": "Ybodychange",
      "commitMessage": "Improvements to Converter, added StdConverter base class\n",
      "commitDate": "3/3/13, 1:11 PM",
      "commitName": "cc737528660b99e71865096e3cd0c4c4a2b3871e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 1:56 PM",
      "commitNameOld": "e1e19f512c25e1509f0fd386ab84e7fe287708f7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (intr !\u003d null \u0026\u0026 prop !\u003d null) {\n        Object convDef \u003d intr.findDeserializationContentConverter(prop.getMember());\n        if (convDef !\u003d null) {\n            Converter\u003cObject, Object\u003e conv \u003d ctxt.converterInstance(prop.getMember(), convDef);\n            JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n            if (existingDeserializer \u003d\u003d null) {\n                existingDeserializer \u003d ctxt.findContextualValueDeserializer(delegateType, prop);\n            }\n            return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, existingDeserializer);\n        }\n    }\n    return existingDeserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 653,
      "functionName": "findConvertingContentDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property has annotation\nindicating that a converter is to be used for contained values (contents\nof structured types; array/List/Map values)\n\n@param existingSerializer (optional) configured content\n   serializer if one already exists.\n@since 2.2\n",
      "diff": "@@ -1,21 +1,15 @@\n protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n     final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n     if (intr !\u003d null \u0026\u0026 prop !\u003d null) {\n         Object convDef \u003d intr.findDeserializationContentConverter(prop.getMember());\n         if (convDef !\u003d null) {\n             Converter\u003cObject, Object\u003e conv \u003d ctxt.converterInstance(prop.getMember(), convDef);\n-            TypeFactory tf \u003d ctxt.getTypeFactory();\n-            JavaType converterType \u003d tf.constructType(conv.getClass());\n-            JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n-            if (params \u003d\u003d null || params.length !\u003d 2) {\n-                throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n-            }\n-            JavaType delegateType \u003d params[0];\n+            JavaType delegateType \u003d conv.getInputType(ctxt.getTypeFactory());\n             if (existingDeserializer \u003d\u003d null) {\n                 existingDeserializer \u003d ctxt.findContextualValueDeserializer(delegateType, prop);\n             }\n             return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, existingDeserializer);\n         }\n     }\n     return existingDeserializer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e1e19f512c25e1509f0fd386ab84e7fe287708f7": {
      "type": "Ybodychange",
      "commitMessage": "More work on converting deserializers\n",
      "commitDate": "3/2/13, 1:56 PM",
      "commitName": "e1e19f512c25e1509f0fd386ab84e7fe287708f7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/2/13, 1:23 PM",
      "commitNameOld": "6751d13d4e0da1af79b05937ad738728ba031f70",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n    if (intr !\u003d null \u0026\u0026 prop !\u003d null) {\n        Object convDef \u003d intr.findDeserializationContentConverter(prop.getMember());\n        if (convDef !\u003d null) {\n            Converter\u003cObject, Object\u003e conv \u003d ctxt.converterInstance(prop.getMember(), convDef);\n            TypeFactory tf \u003d ctxt.getTypeFactory();\n            JavaType converterType \u003d tf.constructType(conv.getClass());\n            JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n            if (params \u003d\u003d null || params.length !\u003d 2) {\n                throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n            }\n            JavaType delegateType \u003d params[0];\n            if (existingDeserializer \u003d\u003d null) {\n                existingDeserializer \u003d ctxt.findContextualValueDeserializer(delegateType, prop);\n            }\n            return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, existingDeserializer);\n        }\n    }\n    return existingDeserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 654,
      "functionName": "findConvertingContentDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property has annotation\nindicating that a converter is to be used for contained values (contents\nof structured types; array/List/Map values)\n\n@param existingSerializer (optional) configured content\n   serializer if one already exists.\n@since 2.2\n",
      "diff": "@@ -1,3 +1,21 @@\n protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n+    final AnnotationIntrospector intr \u003d ctxt.getAnnotationIntrospector();\n+    if (intr !\u003d null \u0026\u0026 prop !\u003d null) {\n+        Object convDef \u003d intr.findDeserializationContentConverter(prop.getMember());\n+        if (convDef !\u003d null) {\n+            Converter\u003cObject, Object\u003e conv \u003d ctxt.converterInstance(prop.getMember(), convDef);\n+            TypeFactory tf \u003d ctxt.getTypeFactory();\n+            JavaType converterType \u003d tf.constructType(conv.getClass());\n+            JavaType[] params \u003d tf.findTypeParameters(converterType, Converter.class);\n+            if (params \u003d\u003d null || params.length !\u003d 2) {\n+                throw new JsonMappingException(\"Could not determine Converter parameterization for \" + converterType);\n+            }\n+            JavaType delegateType \u003d params[0];\n+            if (existingDeserializer \u003d\u003d null) {\n+                existingDeserializer \u003d ctxt.findContextualValueDeserializer(delegateType, prop);\n+            }\n+            return new StdDelegatingDeserializer\u003cObject\u003e(conv, delegateType, existingDeserializer);\n+        }\n+    }\n     return existingDeserializer;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6751d13d4e0da1af79b05937ad738728ba031f70": {
      "type": "Yintroduced",
      "commitMessage": "Refactoring to demote more stuff in DatabindContext\n",
      "commitDate": "3/2/13, 1:23 PM",
      "commitName": "6751d13d4e0da1af79b05937ad738728ba031f70",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,3 @@\n+protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n+    return existingDeserializer;\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n    return existingDeserializer;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
      "functionStartLine": 655,
      "functionName": "findConvertingContentDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Helper method that can be used to see if specified property has annotation\nindicating that a converter is to be used for contained values (contents\nof structured types; array/List/Map values)\n\n@param existingSerializer (optional) configured content\n   serializer if one already exists.\n@since 2.2\n"
    }
  }
}