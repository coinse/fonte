{
  "origin": "codeshovel",
  "repositoryName": "JacksonDatabind-3b",
  "repositoryPath": "/tmp/JacksonDatabind-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BeanDeserializerFactory.java",
  "functionName": "findStdDeserializer",
  "functionId": "findStdDeserializer___ctxt-DeserializationContext__type-JavaType__beanDesc-BeanDescription",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
  "functionStartLine": 187,
  "functionEndLine": 216,
  "numCommitsSeen": 259,
  "timeTaken": 3825,
  "changeHistory": [
    "f6f0c9b90606b66cf788fe6f887a8941f5db0b92",
    "9150a0356a3c484e2823a63d3570cdd90c0040da",
    "afda778afc8016e16d364748eb7d0d4500bc0dca",
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
    "2fd4ffd9963545ce735a58957a84afb90809561e",
    "d6e90d0259da622ddc593215361acdec3950bfe8",
    "2370828d9f11faa7bd663f4171ce16659394cf8f",
    "69e3ed44510efa3f31c52b82171884db82c7f59c",
    "f0b28a96644b3dc22c997a05975de335dfed0418",
    "9e5042210349cbdac5b55b220fed7962fcaa63be",
    "703bf4a104193e8098f904fe33531c58c6e7f359",
    "79a126ba58df304da0e5c2eb7a7a4874fadea118",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373"
  ],
  "changeHistoryShort": {
    "f6f0c9b90606b66cf788fe6f887a8941f5db0b92": "Ybodychange",
    "9150a0356a3c484e2823a63d3570cdd90c0040da": "Ybodychange",
    "afda778afc8016e16d364748eb7d0d4500bc0dca": "Ymultichange(Yreturntypechange,Ybodychange,Yannotationchange)",
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad": "Ymultichange(Yparameterchange,Ybodychange)",
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": "Ybodychange",
    "2fd4ffd9963545ce735a58957a84afb90809561e": "Yrename",
    "d6e90d0259da622ddc593215361acdec3950bfe8": "Yparameterchange",
    "2370828d9f11faa7bd663f4171ce16659394cf8f": "Ybodychange",
    "69e3ed44510efa3f31c52b82171884db82c7f59c": "Ymovefromfile",
    "f0b28a96644b3dc22c997a05975de335dfed0418": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e5042210349cbdac5b55b220fed7962fcaa63be": "Yparameterchange",
    "703bf4a104193e8098f904fe33531c58c6e7f359": "Ydocchange",
    "79a126ba58df304da0e5c2eb7a7a4874fadea118": "Ybodychange",
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f6f0c9b90606b66cf788fe6f887a8941f5db0b92": {
      "type": "Ybodychange",
      "commitMessage": "Add test for #340 under failing; trying to resolve it, but without success yet.\n",
      "commitDate": "11/3/13, 9:31 PM",
      "commitName": "f6f0c9b90606b66cf788fe6f887a8941f5db0b92",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "11/2/13, 8:05 PM",
      "commitNameOld": "2f044913c2fa47640a392db82bc82577065dabf0",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        TypeDeserializer valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), referencedType);\n        BeanDescription refdDesc \u003d ctxt.getConfig().introspectClassAnnotations(referencedType);\n        deser \u003d findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo());\n        return new AtomicReferenceDeserializer(referencedType, valueTypeDeser, deser);\n    }\n    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 187,
      "functionName": "findStdDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "@@ -1,19 +1,22 @@\n protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d ctxt.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n-        return new AtomicReferenceDeserializer(referencedType);\n+        TypeDeserializer valueTypeDeser \u003d findTypeDeserializer(ctxt.getConfig(), referencedType);\n+        BeanDescription refdDesc \u003d ctxt.getConfig().introspectClassAnnotations(referencedType);\n+        deser \u003d findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo());\n+        return new AtomicReferenceDeserializer(referencedType, valueTypeDeser, deser);\n     }\n     return findOptionalStdDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9150a0356a3c484e2823a63d3570cdd90c0040da": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring; move more std deserializers out of JdkDeserializers container\n",
      "commitDate": "7/9/13, 9:40 PM",
      "commitName": "9150a0356a3c484e2823a63d3570cdd90c0040da",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "4/16/13, 5:34 PM",
      "commitNameOld": "0251775c9a6dc8bec151e3461051ef46fd0378ff",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 84.17,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "actualSource": "protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        return new AtomicReferenceDeserializer(referencedType);\n    }\n    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 187,
      "functionName": "findStdDeserializer",
      "functionAnnotation": "",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "@@ -1,19 +1,19 @@\n protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n         return deser;\n     }\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d ctxt.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n-        return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n+        return new AtomicReferenceDeserializer(referencedType);\n     }\n     return findOptionalStdDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "afda778afc8016e16d364748eb7d0d4500bc0dca": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange,Yannotationchange)",
      "commitMessage": "More simplification, remove ref to optional handler factory\n",
      "commitDate": "4/15/13, 8:36 PM",
      "commitName": "afda778afc8016e16d364748eb7d0d4500bc0dca",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "More simplification, remove ref to optional handler factory\n",
          "commitDate": "4/15/13, 8:36 PM",
          "commitName": "afda778afc8016e16d364748eb7d0d4500bc0dca",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "4/7/13, 4:11 PM",
          "commitNameOld": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 8.18,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n    }\n    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 187,
          "functionName": "findStdDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
          "diff": "@@ -1,25 +1,19 @@\n-@SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n-        return (JsonDeserializer\u003cObject\u003e) deser;\n+        return deser;\n     }\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d ctxt.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n-        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n-        return (JsonDeserializer\u003cObject\u003e) d2;\n+        return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, ctxt.getConfig());\n-    if (d !\u003d null) {\n-        return (JsonDeserializer\u003cObject\u003e) d;\n-    }\n-    return null;\n+    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "JsonDeserializer\u003cObject\u003e",
            "newValue": "JsonDeserializer\u003c?\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "More simplification, remove ref to optional handler factory\n",
          "commitDate": "4/15/13, 8:36 PM",
          "commitName": "afda778afc8016e16d364748eb7d0d4500bc0dca",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "4/7/13, 4:11 PM",
          "commitNameOld": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 8.18,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n    }\n    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 187,
          "functionName": "findStdDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
          "diff": "@@ -1,25 +1,19 @@\n-@SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n-        return (JsonDeserializer\u003cObject\u003e) deser;\n+        return deser;\n     }\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d ctxt.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n-        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n-        return (JsonDeserializer\u003cObject\u003e) d2;\n+        return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, ctxt.getConfig());\n-    if (d !\u003d null) {\n-        return (JsonDeserializer\u003cObject\u003e) d;\n-    }\n-    return null;\n+    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "More simplification, remove ref to optional handler factory\n",
          "commitDate": "4/15/13, 8:36 PM",
          "commitName": "afda778afc8016e16d364748eb7d0d4500bc0dca",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "4/7/13, 4:11 PM",
          "commitNameOld": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 8.18,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return deser;\n    }\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n    }\n    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 187,
          "functionName": "findStdDeserializer",
          "functionAnnotation": "",
          "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
          "diff": "@@ -1,25 +1,19 @@\n-@SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n     JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n-        return (JsonDeserializer\u003cObject\u003e) deser;\n+        return deser;\n     }\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d ctxt.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n-        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n-        return (JsonDeserializer\u003cObject\u003e) d2;\n+        return new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, ctxt.getConfig());\n-    if (d !\u003d null) {\n-        return (JsonDeserializer\u003cObject\u003e) d;\n-    }\n-    return null;\n+    return findOptionalStdDeserializer(ctxt, type, beanDesc);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"unchecked\")",
            "newValue": ""
          }
        }
      ]
    },
    "10dc5c9268b6a7536e2b9e69ff96438698c6bbad": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Implement #199, support for deserializing Iterable\n",
      "commitDate": "4/7/13, 4:11 PM",
      "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
      "commitAuthor": "Tatu Saloranta",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Implement #199, support for deserializing Iterable\n",
          "commitDate": "4/7/13, 4:11 PM",
          "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/13/13, 3:56 PM",
          "commitNameOld": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 25.01,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) deser;\n    }\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, ctxt.getConfig());\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 186,
          "functionName": "findStdDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
          "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n-    Class\u003c?\u003e cls \u003d type.getRawClass();\n-    JsonDeserializer\u003c?\u003e deser \u003d findDefaultSerializer(cls);\n+protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) deser;\n     }\n+    Class\u003c?\u003e cls \u003d type.getRawClass();\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n-        TypeFactory tf \u003d config.getTypeFactory();\n+        TypeFactory tf \u003d ctxt.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n+    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, ctxt.getConfig());\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, type-JavaType]",
            "newValue": "[ctxt-DeserializationContext, type-JavaType, beanDesc-BeanDescription]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Implement #199, support for deserializing Iterable\n",
          "commitDate": "4/7/13, 4:11 PM",
          "commitName": "10dc5c9268b6a7536e2b9e69ff96438698c6bbad",
          "commitAuthor": "Tatu Saloranta",
          "commitDateOld": "3/13/13, 3:56 PM",
          "commitNameOld": "8d53c22404fbd066cf3f81d1248e188dba5caebd",
          "commitAuthorOld": "Tatu Saloranta",
          "daysBetweenCommits": 25.01,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n    if (deser !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) deser;\n    }\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d ctxt.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, ctxt.getConfig());\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
          "functionStartLine": 186,
          "functionName": "findStdDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
          "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n-    Class\u003c?\u003e cls \u003d type.getRawClass();\n-    JsonDeserializer\u003c?\u003e deser \u003d findDefaultSerializer(cls);\n+protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {\n+    JsonDeserializer\u003c?\u003e deser \u003d findDefaultDeserializer(ctxt, type, beanDesc);\n     if (deser !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) deser;\n     }\n+    Class\u003c?\u003e cls \u003d type.getRawClass();\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n-        TypeFactory tf \u003d config.getTypeFactory();\n+        TypeFactory tf \u003d ctxt.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n+    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, ctxt.getConfig());\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c8fbc8010a23a7fea255c2a9c3ba4366c937865f": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring to try to reduce amount of mandatory initializations\n",
      "commitDate": "2/19/13, 8:22 PM",
      "commitName": "c8fbc8010a23a7fea255c2a9c3ba4366c937865f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/12/13, 4:11 PM",
      "commitNameOld": "86e513387716012f58d193c5e5b2bbe1e456baf3",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.17,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003c?\u003e deser \u003d findDefaultSerializer(cls);\n    if (deser !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 186,
      "functionName": "findStdDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n-    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n+    JsonDeserializer\u003c?\u003e deser \u003d findDefaultSerializer(cls);\n     if (deser !\u003d null) {\n-        return deser;\n+        return (JsonDeserializer\u003cObject\u003e) deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n     JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fd4ffd9963545ce735a58957a84afb90809561e": {
      "type": "Yrename",
      "commitMessage": "Implement Builder-based deserializer; fix a few ObjectId issues\n",
      "commitDate": "2/17/12, 10:40 PM",
      "commitName": "2fd4ffd9963545ce735a58957a84afb90809561e",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/10/12, 9:44 AM",
      "commitNameOld": "557bcd3d55fa779e40251506d159468bfe96fe04",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 7.54,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 188,
      "functionName": "findStdDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e findStdDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n     JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "findStdBeanDeserializer",
        "newValue": "findStdDeserializer"
      }
    },
    "d6e90d0259da622ddc593215361acdec3950bfe8": {
      "type": "Yparameterchange",
      "commitMessage": "Remove BeanProperty refererence from BeanDeserializer\n",
      "commitDate": "1/30/12, 7:15 PM",
      "commitName": "d6e90d0259da622ddc593215361acdec3950bfe8",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/30/12, 3:55 PM",
      "commitNameOld": "e5d31900983a1e187c1fe5eb737353ddb74909d0",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 168,
      "functionName": "findStdBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n     JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, type-JavaType, property-BeanProperty]",
        "newValue": "[config-DeserializationConfig, type-JavaType]"
      }
    },
    "2370828d9f11faa7bd663f4171ce16659394cf8f": {
      "type": "Ybodychange",
      "commitMessage": "Convert AtomicReferenceDeserializer\n",
      "commitDate": "1/30/12, 8:52 AM",
      "commitName": "2370828d9f11faa7bd663f4171ce16659394cf8f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/27/12, 10:33 PM",
      "commitNameOld": "5639f3459976aa04e02da9f72af97a92adc6b7a9",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.43,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 168,
      "functionName": "findStdBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n-        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n+        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n     JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "69e3ed44510efa3f31c52b82171884db82c7f59c": {
      "type": "Ymovefromfile",
      "commitMessage": "Changed the way DeserializerFactory config is handled, less cluttered now\n",
      "commitDate": "1/26/12, 1:42 PM",
      "commitName": "69e3ed44510efa3f31c52b82171884db82c7f59c",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/26/12, 1:22 PM",
      "commitNameOld": "ce32b8a2e134d6a0590c56ee2d6798e2eeb8bb25",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
      "functionStartLine": 166,
      "functionName": "findStdBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
        "newPath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
        "oldMethodName": "findStdBeanDeserializer",
        "newMethodName": "findStdBeanDeserializer"
      }
    },
    "f0b28a96644b3dc22c997a05975de335dfed0418": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "...\n",
      "commitDate": "1/24/12, 1:27 PM",
      "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
      "commitAuthor": "Tatu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "...\n",
          "commitDate": "1/24/12, 1:27 PM",
          "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 1:02 PM",
          "commitNameOld": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 562,
          "functionName": "findStdBeanDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
          "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n+    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[config-DeserializationConfig, p-DeserializerCache, type-JavaType, property-BeanProperty]",
            "newValue": "[config-DeserializationConfig, type-JavaType, property-BeanProperty]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "...\n",
          "commitDate": "1/24/12, 1:27 PM",
          "commitName": "f0b28a96644b3dc22c997a05975de335dfed0418",
          "commitAuthor": "Tatu",
          "commitDateOld": "1/24/12, 1:02 PM",
          "commitNameOld": "53fb8522b402a409139175cbf867afa924e549f5",
          "commitAuthorOld": "Tatu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
          "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
          "functionStartLine": 562,
          "functionName": "findStdBeanDeserializer",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
          "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, JavaType type, BeanProperty property) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n-    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n+    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9e5042210349cbdac5b55b220fed7962fcaa63be": {
      "type": "Yparameterchange",
      "commitMessage": "Deser refactoring, renaming\n",
      "commitDate": "1/24/12, 11:23 AM",
      "commitName": "9e5042210349cbdac5b55b220fed7962fcaa63be",
      "commitAuthor": "Tatu",
      "commitDateOld": "1/24/12, 11:00 AM",
      "commitNameOld": "29be671c04f3a90863874234663227dd4568b326",
      "commitAuthorOld": "Tatu",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 576,
      "functionName": "findStdBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n-protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n+protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerCache p, JavaType type, BeanProperty property) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n         JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n     JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[config-DeserializationConfig, p-DeserializerProvider, type-JavaType, property-BeanProperty]",
        "newValue": "[config-DeserializationConfig, p-DeserializerCache, type-JavaType, property-BeanProperty]"
      }
    },
    "703bf4a104193e8098f904fe33531c58c6e7f359": {
      "type": "Ydocchange",
      "commitMessage": "Implement [JACKSON-749]: Make @JsonValue the canonical serialization of Enums, so that deserializer also uses it\n",
      "commitDate": "1/11/12, 10:14 PM",
      "commitName": "703bf4a104193e8098f904fe33531c58c6e7f359",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/27/11, 8:53 PM",
      "commitNameOld": "79a126ba58df304da0e5c2eb7a7a4874fadea118",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 517,
      "functionName": "findStdBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n\n@since 1.8\n",
        "newValue": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n"
      }
    },
    "79a126ba58df304da0e5c2eb7a7a4874fadea118": {
      "type": "Ybodychange",
      "commitMessage": "...\n",
      "commitDate": "12/27/11, 8:53 PM",
      "commitName": "79a126ba58df304da0e5c2eb7a7a4874fadea118",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/11, 8:05 PM",
      "commitNameOld": "df6302f807bb230ae985a35100cbcc30af523bd1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 4.03,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 518,
      "functionName": "findStdBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n\n@since 1.8\n",
      "diff": "@@ -1,25 +1,25 @@\n @SuppressWarnings(\"unchecked\")\n protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n     Class\u003c?\u003e cls \u003d type.getRawClass();\n     JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n     if (deser !\u003d null) {\n         return deser;\n     }\n     if (AtomicReference.class.isAssignableFrom(cls)) {\n         TypeFactory tf \u003d config.getTypeFactory();\n         JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n         JavaType referencedType;\n         if (params \u003d\u003d null || params.length \u003c 1) {\n             referencedType \u003d TypeFactory.unknownType();\n         } else {\n             referencedType \u003d params[0];\n         }\n-        JsonDeserializer\u003c?\u003e d2 \u003d new AtomicReferenceDeserializer(referencedType, property);\n+        JsonDeserializer\u003c?\u003e d2 \u003d new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n         return (JsonDeserializer\u003cObject\u003e) d2;\n     }\n     JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n     if (d !\u003d null) {\n         return (JsonDeserializer\u003cObject\u003e) d;\n     }\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4f23bb6779d434d88a7c4335f92d13ea639b373": {
      "type": "Yintroduced",
      "commitMessage": "First check-in, tons of compilation errors to resolve\n",
      "commitDate": "12/23/11, 12:31 AM",
      "commitName": "e4f23bb6779d434d88a7c4335f92d13ea639b373",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,25 @@\n+@SuppressWarnings(\"unchecked\")\n+protected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n+    Class\u003c?\u003e cls \u003d type.getRawClass();\n+    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n+    if (deser !\u003d null) {\n+        return deser;\n+    }\n+    if (AtomicReference.class.isAssignableFrom(cls)) {\n+        TypeFactory tf \u003d config.getTypeFactory();\n+        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n+        JavaType referencedType;\n+        if (params \u003d\u003d null || params.length \u003c 1) {\n+            referencedType \u003d TypeFactory.unknownType();\n+        } else {\n+            referencedType \u003d params[0];\n+        }\n+        JsonDeserializer\u003c?\u003e d2 \u003d new AtomicReferenceDeserializer(referencedType, property);\n+        return (JsonDeserializer\u003cObject\u003e) d2;\n+    }\n+    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n+    if (d !\u003d null) {\n+        return (JsonDeserializer\u003cObject\u003e) d;\n+    }\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\nprotected JsonDeserializer\u003cObject\u003e findStdBeanDeserializer(DeserializationConfig config, DeserializerProvider p, JavaType type, BeanProperty property) throws JsonMappingException {\n    Class\u003c?\u003e cls \u003d type.getRawClass();\n    JsonDeserializer\u003cObject\u003e deser \u003d _simpleDeserializers.get(new ClassKey(cls));\n    if (deser !\u003d null) {\n        return deser;\n    }\n    if (AtomicReference.class.isAssignableFrom(cls)) {\n        TypeFactory tf \u003d config.getTypeFactory();\n        JavaType[] params \u003d tf.findTypeParameters(type, AtomicReference.class);\n        JavaType referencedType;\n        if (params \u003d\u003d null || params.length \u003c 1) {\n            referencedType \u003d TypeFactory.unknownType();\n        } else {\n            referencedType \u003d params[0];\n        }\n        JsonDeserializer\u003c?\u003e d2 \u003d new AtomicReferenceDeserializer(referencedType, property);\n        return (JsonDeserializer\u003cObject\u003e) d2;\n    }\n    JsonDeserializer\u003c?\u003e d \u003d optionalHandlers.findDeserializer(type, config, p);\n    if (d !\u003d null) {\n        return (JsonDeserializer\u003cObject\u003e) d;\n    }\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
      "functionStartLine": 528,
      "functionName": "findStdBeanDeserializer",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "Method called by {@link BeanDeserializerFactory} to see if there might be a standard\ndeserializer registered for given type.\n\n@since 1.8\n"
    }
  }
}