{
  "origin": "codeshovel",
  "repositoryName": "Cli-18b",
  "repositoryPath": "/tmp/Cli-18b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "processOption",
  "functionId": "processOption___arg-String__iter-ListIterator",
  "sourceFilePath": "src/java/org/apache/commons/cli/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
  "functionStartLine": 374,
  "functionEndLine": 418,
  "numCommitsSeen": 43,
  "timeTaken": 1418,
  "changeHistory": [
    "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a",
    "298804b71d4e5f8b621f48a300f421229a3f5c86",
    "a8a8ec06a85a1090d560dc6cf236663da580863e",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "347bbeb8f98a49744501ac50850457ba8751d545",
    "436ef8b2ff7381e797436fc50d087d70b8032f40",
    "c08f73835beda155421d78ee4f96d9e11c501159",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
    "f9df51847e354190206432ba87661586e6dc814d",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
    "66d0ae6216730abd8bd736e210be73229c8e807b",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
    "aae50c585ec3ac33c6a9af792e80378904a73195"
  ],
  "changeHistoryShort": {
    "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d": "Ybodychange",
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a": "Ybodychange",
    "298804b71d4e5f8b621f48a300f421229a3f5c86": "Ymultichange(Ymodifierchange,Ybodychange)",
    "a8a8ec06a85a1090d560dc6cf236663da580863e": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ydocchange,Yformatchange)",
    "347bbeb8f98a49744501ac50850457ba8751d545": "Ybodychange",
    "436ef8b2ff7381e797436fc50d087d70b8032f40": "Ybodychange",
    "c08f73835beda155421d78ee4f96d9e11c501159": "Ybodychange",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Ymultichange(Ymovefromfile,Ydocchange)",
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5": "Ybodychange",
    "f9df51847e354190206432ba87661586e6dc814d": "Ybodychange",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": "Ybodychange",
    "66d0ae6216730abd8bd736e210be73229c8e807b": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange,Yparameterchange)",
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": "Ybodychange",
    "aae50c585ec3ac33c6a9af792e80378904a73195": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d": {
      "type": "Ybodychange",
      "commitMessage": "Changed UnrecognizedOptionException to include the option that wasn\u0027t recognized\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@679583 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/24/08, 3:25 PM",
      "commitName": "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08, 2:17 AM",
      "commitNameOld": "81fe71619e9e96906d50c4dda64714b62353a2bd",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 2.55,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\n    boolean hasOption \u003d getOptions().hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n    }\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\n    if (opt.isRequired()) {\n        getRequiredOptions().remove(opt.getKey());\n    }\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\n        if (group.isRequired()) {\n            getRequiredOptions().remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 374,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
      "diff": "@@ -1,21 +1,21 @@\n protected void processOption(String arg, ListIterator iter) throws ParseException {\n     boolean hasOption \u003d getOptions().hasOption(arg);\n     if (!hasOption) {\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg);\n     }\n     Option opt \u003d (Option) getOptions().getOption(arg).clone();\n     if (opt.isRequired()) {\n         getRequiredOptions().remove(opt.getKey());\n     }\n     if (getOptions().getOptionGroup(opt) !\u003d null) {\n         OptionGroup group \u003d getOptions().getOptionGroup(opt);\n         if (group.isRequired()) {\n             getRequiredOptions().remove(group);\n         }\n         group.setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a": {
      "type": "Ybodychange",
      "commitMessage": "Restored the CLI 1.0 behavior regarding repeated options and the number of arguments per option (CLI-137)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@667565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/13/08, 8:08 AM",
      "commitName": "20dfc60e4c04d9fd69fdedbcbe50020c7e798f3a",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "5/29/08, 6:35 AM",
      "commitNameOld": "d72a578a8949e4b1c437ec55997d8786836f139c",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\n    boolean hasOption \u003d getOptions().hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    Option opt \u003d (Option) getOptions().getOption(arg).clone();\n    if (opt.isRequired()) {\n        getRequiredOptions().remove(opt.getKey());\n    }\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\n        if (group.isRequired()) {\n            getRequiredOptions().remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 386,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
      "diff": "@@ -1,21 +1,21 @@\n protected void processOption(String arg, ListIterator iter) throws ParseException {\n     boolean hasOption \u003d getOptions().hasOption(arg);\n     if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n     }\n-    final Option opt \u003d getOptions().getOption(arg);\n+    Option opt \u003d (Option) getOptions().getOption(arg).clone();\n     if (opt.isRequired()) {\n         getRequiredOptions().remove(opt.getKey());\n     }\n     if (getOptions().getOptionGroup(opt) !\u003d null) {\n         OptionGroup group \u003d getOptions().getOptionGroup(opt);\n         if (group.isRequired()) {\n             getRequiredOptions().remove(group);\n         }\n         group.setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "298804b71d4e5f8b621f48a300f421229a3f5c86": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/08, 11:43 PM",
      "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
      "commitAuthor": "Henri Yandell",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/08, 11:43 PM",
          "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "6/29/07, 12:08 AM",
          "commitNameOld": "97744806d59820b096fb502b1d51ca54b5d0921d",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 313.98,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\n    boolean hasOption \u003d getOptions().hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    final Option opt \u003d getOptions().getOption(arg);\n    if (opt.isRequired()) {\n        getRequiredOptions().remove(opt.getKey());\n    }\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\n        if (group.isRequired()) {\n            getRequiredOptions().remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 384,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
          "diff": "@@ -1,21 +1,21 @@\n-private void processOption(String arg, ListIterator iter) throws ParseException {\n-    boolean hasOption \u003d options.hasOption(arg);\n+protected void processOption(String arg, ListIterator iter) throws ParseException {\n+    boolean hasOption \u003d getOptions().hasOption(arg);\n     if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n     }\n-    final Option opt \u003d options.getOption(arg);\n+    final Option opt \u003d getOptions().getOption(arg);\n     if (opt.isRequired()) {\n-        requiredOptions.remove(opt.getKey());\n+        getRequiredOptions().remove(opt.getKey());\n     }\n-    if (options.getOptionGroup(opt) !\u003d null) {\n-        OptionGroup group \u003d options.getOptionGroup(opt);\n+    if (getOptions().getOptionGroup(opt) !\u003d null) {\n+        OptionGroup group \u003d getOptions().getOptionGroup(opt);\n         if (group.isRequired()) {\n-            requiredOptions.remove(group);\n+            getRequiredOptions().remove(group);\n         }\n         group.setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "5/7/08, 11:43 PM",
          "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "6/29/07, 12:08 AM",
          "commitNameOld": "97744806d59820b096fb502b1d51ca54b5d0921d",
          "commitAuthorOld": "Henri Yandell",
          "daysBetweenCommits": 313.98,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "actualSource": "protected void processOption(String arg, ListIterator iter) throws ParseException {\n    boolean hasOption \u003d getOptions().hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    final Option opt \u003d getOptions().getOption(arg);\n    if (opt.isRequired()) {\n        getRequiredOptions().remove(opt.getKey());\n    }\n    if (getOptions().getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d getOptions().getOptionGroup(opt);\n        if (group.isRequired()) {\n            getRequiredOptions().remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 384,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
          "diff": "@@ -1,21 +1,21 @@\n-private void processOption(String arg, ListIterator iter) throws ParseException {\n-    boolean hasOption \u003d options.hasOption(arg);\n+protected void processOption(String arg, ListIterator iter) throws ParseException {\n+    boolean hasOption \u003d getOptions().hasOption(arg);\n     if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n     }\n-    final Option opt \u003d options.getOption(arg);\n+    final Option opt \u003d getOptions().getOption(arg);\n     if (opt.isRequired()) {\n-        requiredOptions.remove(opt.getKey());\n+        getRequiredOptions().remove(opt.getKey());\n     }\n-    if (options.getOptionGroup(opt) !\u003d null) {\n-        OptionGroup group \u003d options.getOptionGroup(opt);\n+    if (getOptions().getOptionGroup(opt) !\u003d null) {\n+        OptionGroup group \u003d getOptions().getOptionGroup(opt);\n         if (group.isRequired()) {\n-            requiredOptions.remove(group);\n+            getRequiredOptions().remove(group);\n         }\n         group.setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "a8a8ec06a85a1090d560dc6cf236663da580863e": {
      "type": "Ybodychange",
      "commitMessage": "Lots of minor refactoring and tidying to avoid compiler warnings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@155293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/24/05, 7:21 PM",
      "commitName": "a8a8ec06a85a1090d560dc6cf236663da580863e",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "12/27/04, 6:35 AM",
      "commitNameOld": "1314233dde6b3f73c888fe4274e45d654b7639aa",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 59.53,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    final Option opt \u003d options.getOption(arg);\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt.getKey());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d options.getOptionGroup(opt);\n        if (group.isRequired()) {\n            requiredOptions.remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 360,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
      "diff": "@@ -1,23 +1,21 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\n-    Option opt \u003d null;\n     boolean hasOption \u003d options.hasOption(arg);\n     if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n-    } else {\n-        opt \u003d (Option) options.getOption(arg);\n     }\n+    final Option opt \u003d options.getOption(arg);\n     if (opt.isRequired()) {\n         requiredOptions.remove(opt.getKey());\n     }\n     if (options.getOptionGroup(opt) !\u003d null) {\n-        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\n+        OptionGroup group \u003d options.getOptionGroup(opt);\n         if (group.isRequired()) {\n             requiredOptions.remove(group);\n         }\n         group.setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/27/02, 3:22 PM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt.getKey());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\n        if (group.isRequired()) {\n            requiredOptions.remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 410,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/27/02, 3:22 PM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt.getKey());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\n        if (group.isRequired()) {\n            requiredOptions.remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 410,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e\nusing the values retrieved from the specfied iterator\n\u003ccode\u003eiter\u003c/code\u003e.\n\n@param arg The String value representing an Option\n@param iter The iterator over the flattened command \nline arguments.\n@throws ParseException if \u003ccode\u003earg\u003c/code\u003e does not\nrepresent an Option\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "347bbeb8f98a49744501ac50850457ba8751d545": {
      "type": "Ybodychange",
      "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/02, 12:41 AM",
      "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/24/02, 4:17 PM",
      "commitNameOld": "436ef8b2ff7381e797436fc50d087d70b8032f40",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 24.39,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt.getKey());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\n        if (group.isRequired()) {\n            requiredOptions.remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 313,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\n     Option opt \u003d null;\n     boolean hasOption \u003d options.hasOption(arg);\n     if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n     } else {\n         opt \u003d (Option) options.getOption(arg);\n     }\n     if (opt.isRequired()) {\n-        requiredOptions.remove(\"-\" + opt.getOpt());\n+        requiredOptions.remove(opt.getKey());\n     }\n     if (options.getOptionGroup(opt) !\u003d null) {\n         OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\n         if (group.isRequired()) {\n             requiredOptions.remove(group);\n         }\n         group.setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "436ef8b2ff7381e797436fc50d087d70b8032f40": {
      "type": "Ybodychange",
      "commitMessage": "fix pr 13935 - still need to improve the exception message\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/24/02, 4:17 PM",
      "commitName": "436ef8b2ff7381e797436fc50d087d70b8032f40",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/8/02, 2:24 PM",
      "commitNameOld": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 16.08,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(\"-\" + opt.getOpt());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\n        if (group.isRequired()) {\n            requiredOptions.remove(group);\n        }\n        group.setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 243,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,23 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\n     Option opt \u003d null;\n     boolean hasOption \u003d options.hasOption(arg);\n     if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n     } else {\n         opt \u003d (Option) options.getOption(arg);\n     }\n     if (opt.isRequired()) {\n         requiredOptions.remove(\"-\" + opt.getOpt());\n     }\n     if (options.getOptionGroup(opt) !\u003d null) {\n-        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n+        OptionGroup group \u003d (OptionGroup) options.getOptionGroup(opt);\n+        if (group.isRequired()) {\n+            requiredOptions.remove(group);\n+        }\n+        group.setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c08f73835beda155421d78ee4f96d9e11c501159": {
      "type": "Ybodychange",
      "commitMessage": "changed my email add, removed CommandLineParserFactory\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129816 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/19/02, 3:59 PM",
      "commitName": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthor": "John Keyes",
      "commitDateOld": "9/1/02, 3:54 PM",
      "commitNameOld": "d30f12f8fc30ddc2c30a08beea0c10d6d8f2029b",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 18.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(\"-\" + opt.getOpt());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.addOption(opt);\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 243,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,19 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\n     Option opt \u003d null;\n     boolean hasOption \u003d options.hasOption(arg);\n     if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n     } else {\n         opt \u003d (Option) options.getOption(arg);\n     }\n     if (opt.isRequired()) {\n         requiredOptions.remove(\"-\" + opt.getOpt());\n     }\n     if (options.getOptionGroup(opt) !\u003d null) {\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n-    cmd.setOpt(opt);\n+    cmd.addOption(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Ymultichange(Ymovefromfile,Ydocchange)",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/24/02, 3:15 PM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(\"-\" + opt.getOpt());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.setOpt(opt);\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 120,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/PosixParser.java",
            "newPath": "src/java/org/apache/commons/cli/Parser.java",
            "oldMethodName": "processOption",
            "newMethodName": "processOption"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(\"-\" + opt.getOpt());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.setOpt(opt);\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 120,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "",
          "extendedDetails": {
            "oldValue": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
            "newValue": ""
          }
        }
      ]
    },
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5": {
      "type": "Ybodychange",
      "commitMessage": "bug no. 11456 - optional argument values implemented\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/15/02, 3:05 PM",
      "commitName": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/14/02, 3:27 PM",
      "commitNameOld": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(\"-\" + opt.getOpt());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.setOpt(opt);\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 239,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
      "diff": "",
      "extendedDetails": {}
    },
    "f9df51847e354190206432ba87661586e6dc814d": {
      "type": "Ybodychange",
      "commitMessage": "iterator for all Option instances parsed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129799 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/14/02, 3:27 PM",
      "commitName": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/4/02, 4:04 PM",
      "commitNameOld": "1060ee73965dc30d92afbad80525bd4cdabe9153",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d null;\n    boolean hasOption \u003d options.hasOption(arg);\n    if (!hasOption) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    } else {\n        opt \u003d (Option) options.getOption(arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(\"-\" + opt.getOpt());\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.setOpt(opt);\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 260,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
      "diff": "@@ -1,16 +1,19 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\n-    Option opt \u003d (Option) options.getOption(arg);\n-    if (opt \u003d\u003d null) {\n+    Option opt \u003d null;\n+    boolean hasOption \u003d options.hasOption(arg);\n+    if (!hasOption) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n+    } else {\n+        opt \u003d (Option) options.getOption(arg);\n     }\n     if (opt.isRequired()) {\n-        requiredOptions.remove(opt);\n+        requiredOptions.remove(\"-\" + opt.getOpt());\n     }\n     if (options.getOptionGroup(opt) !\u003d null) {\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n     }\n     if (opt.hasArg()) {\n         processArgs(opt, iter);\n     }\n     cmd.setOpt(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": {
      "type": "Ybodychange",
      "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/3/02, 4:45 PM",
      "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthor": "John Keyes",
      "commitDateOld": "7/4/02, 3:32 PM",
      "commitNameOld": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 30.05,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d (Option) options.getOption(arg);\n    if (opt \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt);\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        processArgs(opt, iter);\n    }\n    cmd.setOpt(opt);\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 235,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
      "diff": "@@ -1,20 +1,16 @@\n private void processOption(String arg, ListIterator iter) throws ParseException {\n     Option opt \u003d (Option) options.getOption(arg);\n     if (opt \u003d\u003d null) {\n         throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n     }\n     if (opt.isRequired()) {\n         requiredOptions.remove(opt);\n     }\n     if (options.getOptionGroup(opt) !\u003d null) {\n         ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n     }\n     if (opt.hasArg()) {\n-        if (opt.hasMultipleArgs()) {\n-            processMultipleArgs(opt, iter);\n-        } else {\n-            opt.addValue((String) iter.next());\n-        }\n+        processArgs(opt, iter);\n     }\n     cmd.setOpt(opt);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "66d0ae6216730abd8bd736e210be73229c8e807b": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/4/02, 3:32 PM",
      "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02, 1:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d (Option) options.getOption(arg);\n    if (opt \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt);\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        if (opt.hasMultipleArgs()) {\n            processMultipleArgs(opt, iter);\n        } else {\n            opt.addValue((String) iter.next());\n        }\n    }\n    cmd.setOpt(opt);\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n-    if (option \u003d\u003d null) {\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n-    } else {\n-        if (optionGroups.get(option) !\u003d null) {\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n-        }\n-        if (option.isRequired()) {\n-            requiredOpts.remove(\"-\" + option.getOpt());\n-        }\n-        if (option.hasArg()) {\n-            if (argIter.hasNext()) {\n-                eachArg \u003d (String) argIter.next();\n-                option.addValue(eachArg);\n-                if (option.hasMultipleArgs()) {\n-                    while (argIter.hasNext()) {\n-                        eachArg \u003d (String) argIter.next();\n-                        if (eachArg.startsWith(\"-\")) {\n-                            argIter.previous();\n-                            cl.setOpt(option);\n-                            break;\n-                        } else {\n-                            option.addValue(eachArg);\n-                        }\n-                    }\n-                } else {\n-                    cl.setOpt(option);\n-                    return;\n-                }\n-                if (!argIter.hasNext()) {\n-                    cl.setOpt(option);\n-                }\n-            } else {\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n-            }\n+private void processOption(String arg, ListIterator iter) throws ParseException {\n+    Option opt \u003d (Option) options.getOption(arg);\n+    if (opt \u003d\u003d null) {\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n+    }\n+    if (opt.isRequired()) {\n+        requiredOptions.remove(opt);\n+    }\n+    if (options.getOptionGroup(opt) !\u003d null) {\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n+    }\n+    if (opt.hasArg()) {\n+        if (opt.hasMultipleArgs()) {\n+            processMultipleArgs(opt, iter);\n         } else {\n-            cl.setOpt(option);\n+            opt.addValue((String) iter.next());\n         }\n     }\n+    cmd.setOpt(opt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/Options.java",
            "newPath": "src/java/org/apache/commons/cli/PosixParser.java",
            "oldMethodName": "processOption",
            "newMethodName": "processOption"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02, 1:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d (Option) options.getOption(arg);\n    if (opt \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt);\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        if (opt.hasMultipleArgs()) {\n            processMultipleArgs(opt, iter);\n        } else {\n            opt.addValue((String) iter.next());\n        }\n    }\n    cmd.setOpt(opt);\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n-    if (option \u003d\u003d null) {\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n-    } else {\n-        if (optionGroups.get(option) !\u003d null) {\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n-        }\n-        if (option.isRequired()) {\n-            requiredOpts.remove(\"-\" + option.getOpt());\n-        }\n-        if (option.hasArg()) {\n-            if (argIter.hasNext()) {\n-                eachArg \u003d (String) argIter.next();\n-                option.addValue(eachArg);\n-                if (option.hasMultipleArgs()) {\n-                    while (argIter.hasNext()) {\n-                        eachArg \u003d (String) argIter.next();\n-                        if (eachArg.startsWith(\"-\")) {\n-                            argIter.previous();\n-                            cl.setOpt(option);\n-                            break;\n-                        } else {\n-                            option.addValue(eachArg);\n-                        }\n-                    }\n-                } else {\n-                    cl.setOpt(option);\n-                    return;\n-                }\n-                if (!argIter.hasNext()) {\n-                    cl.setOpt(option);\n-                }\n-            } else {\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n-            }\n+private void processOption(String arg, ListIterator iter) throws ParseException {\n+    Option opt \u003d (Option) options.getOption(arg);\n+    if (opt \u003d\u003d null) {\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n+    }\n+    if (opt.isRequired()) {\n+        requiredOptions.remove(opt);\n+    }\n+    if (options.getOptionGroup(opt) !\u003d null) {\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n+    }\n+    if (opt.hasArg()) {\n+        if (opt.hasMultipleArgs()) {\n+            processMultipleArgs(opt, iter);\n         } else {\n-            cl.setOpt(option);\n+            opt.addValue((String) iter.next());\n         }\n     }\n+    cmd.setOpt(opt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException]",
            "newValue": "[ParseException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02, 1:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d (Option) options.getOption(arg);\n    if (opt \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt);\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        if (opt.hasMultipleArgs()) {\n            processMultipleArgs(opt, iter);\n        } else {\n            opt.addValue((String) iter.next());\n        }\n    }\n    cmd.setOpt(opt);\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n-    if (option \u003d\u003d null) {\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n-    } else {\n-        if (optionGroups.get(option) !\u003d null) {\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n-        }\n-        if (option.isRequired()) {\n-            requiredOpts.remove(\"-\" + option.getOpt());\n-        }\n-        if (option.hasArg()) {\n-            if (argIter.hasNext()) {\n-                eachArg \u003d (String) argIter.next();\n-                option.addValue(eachArg);\n-                if (option.hasMultipleArgs()) {\n-                    while (argIter.hasNext()) {\n-                        eachArg \u003d (String) argIter.next();\n-                        if (eachArg.startsWith(\"-\")) {\n-                            argIter.previous();\n-                            cl.setOpt(option);\n-                            break;\n-                        } else {\n-                            option.addValue(eachArg);\n-                        }\n-                    }\n-                } else {\n-                    cl.setOpt(option);\n-                    return;\n-                }\n-                if (!argIter.hasNext()) {\n-                    cl.setOpt(option);\n-                }\n-            } else {\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n-            }\n+private void processOption(String arg, ListIterator iter) throws ParseException {\n+    Option opt \u003d (Option) options.getOption(arg);\n+    if (opt \u003d\u003d null) {\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n+    }\n+    if (opt.isRequired()) {\n+        requiredOptions.remove(opt);\n+    }\n+    if (options.getOptionGroup(opt) !\u003d null) {\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n+    }\n+    if (opt.hasArg()) {\n+        if (opt.hasMultipleArgs()) {\n+            processMultipleArgs(opt, iter);\n         } else {\n-            cl.setOpt(option);\n+            opt.addValue((String) iter.next());\n         }\n     }\n+    cmd.setOpt(opt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02, 1:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d (Option) options.getOption(arg);\n    if (opt \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt);\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        if (opt.hasMultipleArgs()) {\n            processMultipleArgs(opt, iter);\n        } else {\n            opt.addValue((String) iter.next());\n        }\n    }\n    cmd.setOpt(opt);\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n-    if (option \u003d\u003d null) {\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n-    } else {\n-        if (optionGroups.get(option) !\u003d null) {\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n-        }\n-        if (option.isRequired()) {\n-            requiredOpts.remove(\"-\" + option.getOpt());\n-        }\n-        if (option.hasArg()) {\n-            if (argIter.hasNext()) {\n-                eachArg \u003d (String) argIter.next();\n-                option.addValue(eachArg);\n-                if (option.hasMultipleArgs()) {\n-                    while (argIter.hasNext()) {\n-                        eachArg \u003d (String) argIter.next();\n-                        if (eachArg.startsWith(\"-\")) {\n-                            argIter.previous();\n-                            cl.setOpt(option);\n-                            break;\n-                        } else {\n-                            option.addValue(eachArg);\n-                        }\n-                    }\n-                } else {\n-                    cl.setOpt(option);\n-                    return;\n-                }\n-                if (!argIter.hasNext()) {\n-                    cl.setOpt(option);\n-                }\n-            } else {\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n-            }\n+private void processOption(String arg, ListIterator iter) throws ParseException {\n+    Option opt \u003d (Option) options.getOption(arg);\n+    if (opt \u003d\u003d null) {\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n+    }\n+    if (opt.isRequired()) {\n+        requiredOptions.remove(opt);\n+    }\n+    if (options.getOptionGroup(opt) !\u003d null) {\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n+    }\n+    if (opt.hasArg()) {\n+        if (opt.hasMultipleArgs()) {\n+            processMultipleArgs(opt, iter);\n         } else {\n-            cl.setOpt(option);\n+            opt.addValue((String) iter.next());\n         }\n     }\n+    cmd.setOpt(opt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eprocessOption rakes the current option and checks if it is\nan unrecognised option, whether the argument value is missing or\nwhether the option has already been selected.\u003c/p\u003e\n\n@param eachArg the current option read from command line\n@param option the current option corresponding to eachArg\n@param argIter the argument iterator\n@param cl the current command line\n@throws MissingArgumentException if an argument value for an option is not present\n@throws UnrecognizedOptionException if an unrecognised option is present\n@throws AlreadySelectedException if the same option appears more than once\n",
            "newValue": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/4/02, 3:32 PM",
          "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthor": "John Keyes",
          "commitDateOld": "6/24/02, 1:38 PM",
          "commitNameOld": "bb7fb06cb9f3517cab1400d965e4ae8935cf6bfd",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 10.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void processOption(String arg, ListIterator iter) throws ParseException {\n    Option opt \u003d (Option) options.getOption(arg);\n    if (opt \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n    }\n    if (opt.isRequired()) {\n        requiredOptions.remove(opt);\n    }\n    if (options.getOptionGroup(opt) !\u003d null) {\n        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n    }\n    if (opt.hasArg()) {\n        if (opt.hasMultipleArgs()) {\n            processMultipleArgs(opt, iter);\n        } else {\n            opt.addValue((String) iter.next());\n        }\n    }\n    cmd.setOpt(opt);\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 238,
          "functionName": "processOption",
          "functionAnnotation": "",
          "functionDoc": "Process the option represented by \u003ccode\u003earg\u003c/code\u003e.\n\n@param arg the string representation of an option\n@param iter the command line token iterator\n",
          "diff": "@@ -1,40 +1,20 @@\n-private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n-    if (option \u003d\u003d null) {\n-        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n-    } else {\n-        if (optionGroups.get(option) !\u003d null) {\n-            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n-        }\n-        if (option.isRequired()) {\n-            requiredOpts.remove(\"-\" + option.getOpt());\n-        }\n-        if (option.hasArg()) {\n-            if (argIter.hasNext()) {\n-                eachArg \u003d (String) argIter.next();\n-                option.addValue(eachArg);\n-                if (option.hasMultipleArgs()) {\n-                    while (argIter.hasNext()) {\n-                        eachArg \u003d (String) argIter.next();\n-                        if (eachArg.startsWith(\"-\")) {\n-                            argIter.previous();\n-                            cl.setOpt(option);\n-                            break;\n-                        } else {\n-                            option.addValue(eachArg);\n-                        }\n-                    }\n-                } else {\n-                    cl.setOpt(option);\n-                    return;\n-                }\n-                if (!argIter.hasNext()) {\n-                    cl.setOpt(option);\n-                }\n-            } else {\n-                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n-            }\n+private void processOption(String arg, ListIterator iter) throws ParseException {\n+    Option opt \u003d (Option) options.getOption(arg);\n+    if (opt \u003d\u003d null) {\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n+    }\n+    if (opt.isRequired()) {\n+        requiredOptions.remove(opt);\n+    }\n+    if (options.getOptionGroup(opt) !\u003d null) {\n+        ((OptionGroup) (options.getOptionGroup(opt))).setSelected(opt);\n+    }\n+    if (opt.hasArg()) {\n+        if (opt.hasMultipleArgs()) {\n+            processMultipleArgs(opt, iter);\n         } else {\n-            cl.setOpt(option);\n+            opt.addValue((String) iter.next());\n         }\n     }\n+    cmd.setOpt(opt);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[eachArg-String, option-Option, argIter-ListIterator, cl-CommandLine]",
            "newValue": "[arg-String, iter-ListIterator]"
          }
        }
      ]
    },
    "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8": {
      "type": "Ybodychange",
      "commitMessage": "configurable parser support added, PosixParser added\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/16/02, 4:00 PM",
      "commitName": "4cca25d72b216bfc8f2e75e4a99afb608ceb6df8",
      "commitAuthor": "John Keyes",
      "commitDateOld": "6/10/02, 11:01 AM",
      "commitNameOld": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthorOld": "James Strachan",
      "daysBetweenCommits": 6.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n    if (option \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n    } else {\n        if (optionGroups.get(option) !\u003d null) {\n            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n        }\n        if (option.isRequired()) {\n            requiredOpts.remove(\"-\" + option.getOpt());\n        }\n        if (option.hasArg()) {\n            if (argIter.hasNext()) {\n                eachArg \u003d (String) argIter.next();\n                option.addValue(eachArg);\n                if (option.hasMultipleArgs()) {\n                    while (argIter.hasNext()) {\n                        eachArg \u003d (String) argIter.next();\n                        if (eachArg.startsWith(\"-\")) {\n                            argIter.previous();\n                            cl.setOpt(option);\n                            break;\n                        } else {\n                            option.addValue(eachArg);\n                        }\n                    }\n                } else {\n                    cl.setOpt(option);\n                    return;\n                }\n                if (!argIter.hasNext()) {\n                    cl.setOpt(option);\n                }\n            } else {\n                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n            }\n        } else {\n            cl.setOpt(option);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Options.java",
      "functionStartLine": 489,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eprocessOption rakes the current option and checks if it is\nan unrecognised option, whether the argument value is missing or\nwhether the option has already been selected.\u003c/p\u003e\n\n@param eachArg the current option read from command line\n@param option the current option corresponding to eachArg\n@param argIter the argument iterator\n@param cl the current command line\n@throws MissingArgumentException if an argument value for an option is not present\n@throws UnrecognizedOptionException if an unrecognised option is present\n@throws AlreadySelectedException if the same option appears more than once\n",
      "diff": "",
      "extendedDetails": {}
    },
    "aae50c585ec3ac33c6a9af792e80378904a73195": {
      "type": "Yintroduced",
      "commitMessage": "moved cli over from the sandbox to commons proper\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/10/02, 11:01 AM",
      "commitName": "aae50c585ec3ac33c6a9af792e80378904a73195",
      "commitAuthor": "James Strachan",
      "diff": "@@ -0,0 +1,40 @@\n+private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n+    if (option \u003d\u003d null) {\n+        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n+    } else {\n+        if (optionGroups.get(option) !\u003d null) {\n+            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n+        }\n+        if (option.isRequired()) {\n+            requiredOpts.remove(\"-\" + option.getOpt());\n+        }\n+        if (option.hasArg()) {\n+            if (argIter.hasNext()) {\n+                eachArg \u003d (String) argIter.next();\n+                option.addValue(eachArg);\n+                if (option.hasMultipleArgs()) {\n+                    while (argIter.hasNext()) {\n+                        eachArg \u003d (String) argIter.next();\n+                        if (eachArg.startsWith(\"-\")) {\n+                            argIter.previous();\n+                            cl.setOpt(option);\n+                            break;\n+                        } else {\n+                            option.addValue(eachArg);\n+                        }\n+                    }\n+                } else {\n+                    cl.setOpt(option);\n+                    return;\n+                }\n+                if (!argIter.hasNext()) {\n+                    cl.setOpt(option);\n+                }\n+            } else {\n+                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n+            }\n+        } else {\n+            cl.setOpt(option);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void processOption(String eachArg, Option option, ListIterator argIter, CommandLine cl) throws UnrecognizedOptionException, AlreadySelectedException, MissingArgumentException {\n    if (option \u003d\u003d null) {\n        throw new UnrecognizedOptionException(\"Unrecognized option: \" + eachArg);\n    } else {\n        if (optionGroups.get(option) !\u003d null) {\n            ((OptionGroup) (optionGroups.get(option))).setSelected(option);\n        }\n        if (option.isRequired()) {\n            requiredOpts.remove(\"-\" + option.getOpt());\n        }\n        if (option.hasArg()) {\n            if (argIter.hasNext()) {\n                eachArg \u003d (String) argIter.next();\n                option.addValue(eachArg);\n                if (option.hasMultipleArgs()) {\n                    while (argIter.hasNext()) {\n                        eachArg \u003d (String) argIter.next();\n                        if (eachArg.startsWith(\"-\")) {\n                            argIter.previous();\n                            cl.setOpt(option);\n                            break;\n                        } else {\n                            option.addValue(eachArg);\n                        }\n                    }\n                } else {\n                    cl.setOpt(option);\n                    return;\n                }\n                if (!argIter.hasNext()) {\n                    cl.setOpt(option);\n                }\n            } else {\n                throw new MissingArgumentException(eachArg + \" requires an argument.\");\n            }\n        } else {\n            cl.setOpt(option);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Options.java",
      "functionStartLine": 458,
      "functionName": "processOption",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eprocessOption rakes the current option and checks if it is\nan unrecognised option, whether the argument value is missing or\nwhether the option has already been selected.\u003c/p\u003e\n\n@param eachArg the current option read from command line\n@param option the current option corresponding to eachArg\n@param argIter the argument iterator\n@param cl the current command line\n@throws MissingArgumentException if an argument value for an option is not present\n@throws UnrecognizedOptionException if an unrecognised option is present\n@throws AlreadySelectedException if the same option appears more than once\n"
    }
  }
}