{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-43b",
  "repositoryPath": "/tmp/Jsoup-43b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CharacterReader.java",
  "functionName": "consumeToAny",
  "functionId": "consumeToAny___chars-char(modifiers-final)",
  "sourceFilePath": "src/main/java/org/jsoup/parser/CharacterReader.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 125,
  "functionEndLine": 138,
  "numCommitsSeen": 26,
  "timeTaken": 1292,
  "changeHistory": [
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510",
    "231aab61e228513853d08374e188217933f70986",
    "07a3c08a7ddb06711c3d1b5b1126076a43efa6e1",
    "8749726a79c22451b1f01b14fb2137f734e926b4"
  ],
  "changeHistoryShort": {
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510": "Ybodychange",
    "231aab61e228513853d08374e188217933f70986": "Ymultichange(Yparameterchange,Ybodychange)",
    "07a3c08a7ddb06711c3d1b5b1126076a43efa6e1": "Ybodychange",
    "8749726a79c22451b1f01b14fb2137f734e926b4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510": {
      "type": "Ybodychange",
      "commitMessage": "Speed improvements\n\nAndroid focussed speed improvements.\nReduced GC load with a flywheel on short strings.\nOptimized core consumeTo methods.\n",
      "commitDate": "10/26/14, 3:50 PM",
      "commitName": "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "10/17/14, 1:39 PM",
      "commitNameOld": "23c2d42a8b3a0b413c0f42cfc2f5f05ed0184c58",
      "commitAuthorOld": "offa",
      "daysBetweenCommits": 9.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "String consumeToAny(final char... chars) {\n    final int start \u003d pos;\n    final int remaining \u003d length;\n    OUTER: while (pos \u003c remaining) {\n        for (char c : chars) {\n            if (input[pos] \u003d\u003d c)\n                break OUTER;\n        }\n        pos++;\n    }\n    return pos \u003e start ? cacheString(start, pos - start) : \"\";\n}",
      "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
      "functionStartLine": 125,
      "functionName": "consumeToAny",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,11 +1,12 @@\n String consumeToAny(final char... chars) {\n-    int start \u003d pos;\n-    OUTER: while (pos \u003c length) {\n-        for (int i \u003d 0; i \u003c chars.length; i++) {\n-            if (input[pos] \u003d\u003d chars[i])\n+    final int start \u003d pos;\n+    final int remaining \u003d length;\n+    OUTER: while (pos \u003c remaining) {\n+        for (char c : chars) {\n+            if (input[pos] \u003d\u003d c)\n                 break OUTER;\n         }\n         pos++;\n     }\n-    return pos \u003e start ? new String(input, start, pos - start) : \"\";\n+    return pos \u003e start ? cacheString(start, pos - start) : \"\";\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "231aab61e228513853d08374e188217933f70986": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Replaced Strings with char array in CharacterReader, for well improved parse times.\n\nFaster to scan, and less garbage created.\n",
      "commitDate": "6/3/12, 6:44 PM",
      "commitName": "231aab61e228513853d08374e188217933f70986",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Replaced Strings with char array in CharacterReader, for well improved parse times.\n\nFaster to scan, and less garbage created.\n",
          "commitDate": "6/3/12, 6:44 PM",
          "commitName": "231aab61e228513853d08374e188217933f70986",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "5/29/12, 9:02 PM",
          "commitNameOld": "07a3c08a7ddb06711c3d1b5b1126076a43efa6e1",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 4.9,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String consumeToAny(final char... chars) {\n    int start \u003d pos;\n    OUTER: while (pos \u003c length) {\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (input[pos] \u003d\u003d chars[i])\n                break OUTER;\n        }\n        pos++;\n    }\n    return pos \u003e start ? new String(input, start, pos - start) : \"\";\n}",
          "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
          "functionStartLine": 122,
          "functionName": "consumeToAny",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,11 @@\n-String consumeToAny(char... seq) {\n+String consumeToAny(final char... chars) {\n     int start \u003d pos;\n-    OUTER: while (!isEmpty()) {\n-        char c \u003d input.charAt(pos);\n-        for (char seek : seq) {\n-            if (seek \u003d\u003d c)\n+    OUTER: while (pos \u003c length) {\n+        for (int i \u003d 0; i \u003c chars.length; i++) {\n+            if (input[pos] \u003d\u003d chars[i])\n                 break OUTER;\n         }\n         pos++;\n     }\n-    return pos \u003e start ? new String(input.substring(start, pos)) : \"\";\n+    return pos \u003e start ? new String(input, start, pos - start) : \"\";\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[seq-char]",
            "newValue": "[chars-char(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Replaced Strings with char array in CharacterReader, for well improved parse times.\n\nFaster to scan, and less garbage created.\n",
          "commitDate": "6/3/12, 6:44 PM",
          "commitName": "231aab61e228513853d08374e188217933f70986",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "5/29/12, 9:02 PM",
          "commitNameOld": "07a3c08a7ddb06711c3d1b5b1126076a43efa6e1",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 4.9,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "String consumeToAny(final char... chars) {\n    int start \u003d pos;\n    OUTER: while (pos \u003c length) {\n        for (int i \u003d 0; i \u003c chars.length; i++) {\n            if (input[pos] \u003d\u003d chars[i])\n                break OUTER;\n        }\n        pos++;\n    }\n    return pos \u003e start ? new String(input, start, pos - start) : \"\";\n}",
          "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
          "functionStartLine": 122,
          "functionName": "consumeToAny",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,12 +1,11 @@\n-String consumeToAny(char... seq) {\n+String consumeToAny(final char... chars) {\n     int start \u003d pos;\n-    OUTER: while (!isEmpty()) {\n-        char c \u003d input.charAt(pos);\n-        for (char seek : seq) {\n-            if (seek \u003d\u003d c)\n+    OUTER: while (pos \u003c length) {\n+        for (int i \u003d 0; i \u003c chars.length; i++) {\n+            if (input[pos] \u003d\u003d chars[i])\n                 break OUTER;\n         }\n         pos++;\n     }\n-    return pos \u003e start ? new String(input.substring(start, pos)) : \"\";\n+    return pos \u003e start ? new String(input, start, pos - start) : \"\";\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "07a3c08a7ddb06711c3d1b5b1126076a43efa6e1": {
      "type": "Ybodychange",
      "commitMessage": "Make copies of all strings returned, vs returning pointers to substrings of input.\n\nThe former method is a little faster, and creates less garbage. However when the input is large,\nand apps retain data pulled from the DOM, the app may perceive a memory leak, as even a small string\nis actually as large as the original input (although multiple strings are all backed by the one\noriginal input).\n\nSo, this implementation is a little less performant, but has a potential for greater safety,\ndepending on how the library is used.\n",
      "commitDate": "5/29/12, 9:02 PM",
      "commitName": "07a3c08a7ddb06711c3d1b5b1126076a43efa6e1",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "5/28/12, 8:59 PM",
      "commitNameOld": "3e284b6ce28acdf41d7a7cc8ead881d6ab54a8f9",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 1.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "String consumeToAny(char... seq) {\n    int start \u003d pos;\n    OUTER: while (!isEmpty()) {\n        char c \u003d input.charAt(pos);\n        for (char seek : seq) {\n            if (seek \u003d\u003d c)\n                break OUTER;\n        }\n        pos++;\n    }\n    return pos \u003e start ? new String(input.substring(start, pos)) : \"\";\n}",
      "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
      "functionStartLine": 84,
      "functionName": "consumeToAny",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,12 @@\n String consumeToAny(char... seq) {\n     int start \u003d pos;\n     OUTER: while (!isEmpty()) {\n         char c \u003d input.charAt(pos);\n         for (char seek : seq) {\n             if (seek \u003d\u003d c)\n                 break OUTER;\n         }\n         pos++;\n     }\n-    return pos \u003e start ? input.substring(start, pos) : \"\";\n+    return pos \u003e start ? new String(input.substring(start, pos)) : \"\";\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8749726a79c22451b1f01b14fb2137f734e926b4": {
      "type": "Yintroduced",
      "commitMessage": "Reimplementation of parser and tokeniser, to make jsoup a HTML5 conformat parser, against the\nhttp://whatwg.org/html spec.\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "8749726a79c22451b1f01b14fb2137f734e926b4",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,12 @@\n+String consumeToAny(char... seq) {\n+    int start \u003d pos;\n+    OUTER: while (!isEmpty()) {\n+        char c \u003d input.charAt(pos);\n+        for (char seek : seq) {\n+            if (seek \u003d\u003d c)\n+                break OUTER;\n+        }\n+        pos++;\n+    }\n+    return pos \u003e start ? input.substring(start, pos) : \"\";\n+}\n\\ No newline at end of file\n",
      "actualSource": "String consumeToAny(char... seq) {\n    int start \u003d pos;\n    OUTER: while (!isEmpty()) {\n        char c \u003d input.charAt(pos);\n        for (char seek : seq) {\n            if (seek \u003d\u003d c)\n                break OUTER;\n        }\n        pos++;\n    }\n    return pos \u003e start ? input.substring(start, pos) : \"\";\n}",
      "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
      "functionStartLine": 77,
      "functionName": "consumeToAny",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}