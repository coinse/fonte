{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-43b",
  "repositoryPath": "/tmp/Jsoup-43b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CharacterReader.java",
  "functionName": "cacheString",
  "functionId": "cacheString___start-int(modifiers-final)__count-int(modifiers-final)",
  "sourceFilePath": "src/main/java/org/jsoup/parser/CharacterReader.java",
  "functionAnnotation": "",
  "functionDoc": "Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n\u003cp /\u003e\nSimplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\nThat saves both having to create objects as hash keys, and running through the entry list, at the expense of\nsome more duplicates.\n",
  "functionStartLine": 346,
  "functionEndLine": 377,
  "numCommitsSeen": 17,
  "timeTaken": 476,
  "changeHistory": [
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510"
  ],
  "changeHistoryShort": {
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510": {
      "type": "Yintroduced",
      "commitMessage": "Speed improvements\n\nAndroid focussed speed improvements.\nReduced GC load with a flywheel on short strings.\nOptimized core consumeTo methods.\n",
      "commitDate": "10/26/14, 3:50 PM",
      "commitName": "d1b57703e1131ba316beb84e8d9f6fcfa9ba6510",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,24 @@\n+private String cacheString(final int start, final int count) {\n+    final char[] val \u003d input;\n+    final String[] cache \u003d stringCache;\n+    if (count \u003e maxCacheLen)\n+        return new String(val, start, count);\n+    int hash \u003d 0;\n+    int offset \u003d start;\n+    for (int i \u003d 0; i \u003c count; i++) {\n+        hash \u003d 31 * hash + val[offset++];\n+    }\n+    final int index \u003d hash \u0026 cache.length - 1;\n+    String cached \u003d cache[index];\n+    if (cached \u003d\u003d null) {\n+        cached \u003d new String(val, start, count);\n+        cache[index] \u003d cached;\n+    } else {\n+        if (rangeEquals(start, count, cached)) {\n+            return cached;\n+        } else {\n+            cached \u003d new String(val, start, count);\n+        }\n+    }\n+    return cached;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private String cacheString(final int start, final int count) {\n    final char[] val \u003d input;\n    final String[] cache \u003d stringCache;\n    if (count \u003e maxCacheLen)\n        return new String(val, start, count);\n    int hash \u003d 0;\n    int offset \u003d start;\n    for (int i \u003d 0; i \u003c count; i++) {\n        hash \u003d 31 * hash + val[offset++];\n    }\n    final int index \u003d hash \u0026 cache.length - 1;\n    String cached \u003d cache[index];\n    if (cached \u003d\u003d null) {\n        cached \u003d new String(val, start, count);\n        cache[index] \u003d cached;\n    } else {\n        if (rangeEquals(start, count, cached)) {\n            return cached;\n        } else {\n            cached \u003d new String(val, start, count);\n        }\n    }\n    return cached;\n}",
      "path": "src/main/java/org/jsoup/parser/CharacterReader.java",
      "functionStartLine": 346,
      "functionName": "cacheString",
      "functionAnnotation": "",
      "functionDoc": "Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n\u003cp /\u003e\nSimplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\nThat saves both having to create objects as hash keys, and running through the entry list, at the expense of\nsome more duplicates.\n"
    }
  }
}