{
  "origin": "codeshovel",
  "repositoryName": "Jsoup-54b",
  "repositoryPath": "/tmp/Jsoup-54b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Selector.java",
  "functionName": "select",
  "functionId": "select",
  "sourceFilePath": "src/main/java/org/jsoup/select/Selector.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 148,
  "functionEndLine": 150,
  "numCommitsSeen": 50,
  "timeTaken": 1043,
  "changeHistory": [
    "bbca7db20b9a45fb3d8efb29447349ed8593649c",
    "112c1541b0f7034e63c9015e582ed13efbbb5bd3",
    "f462438f2ebfb354c823cd2c0b677b0674f0e80c",
    "3eb8a67876703682e4156b378871911870fcaad9",
    "79c672355bb31aa69c23d2dd1ed8cc3f89dd2844",
    "ac57740b13bddd414c98253d53092546c1c330a2",
    "7a7419fbc1bcdee4329f90b2361f4fce5376eb92",
    "72fe7662416118598bc0af126c15cba3ca09d9b4",
    "eb95cc7662dc5c438de8d9ef47ccf131bf7191a8",
    "86c1d97c5f83cb6cc9c0d7490942b806d3a1d3be",
    "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da",
    "e4ff08f2bad145ec500228de112c8e821e8725cc",
    "1f3cfcfb08a5e7454e61513389b814c7da6072ac",
    "04025259e96d3676097e84126fb55124b92c50ed"
  ],
  "changeHistoryShort": {
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": "Ybodychange",
    "112c1541b0f7034e63c9015e582ed13efbbb5bd3": "Ybodychange",
    "f462438f2ebfb354c823cd2c0b677b0674f0e80c": "Ybodychange",
    "3eb8a67876703682e4156b378871911870fcaad9": "Ybodychange",
    "79c672355bb31aa69c23d2dd1ed8cc3f89dd2844": "Ybodychange",
    "ac57740b13bddd414c98253d53092546c1c330a2": "Ybodychange",
    "7a7419fbc1bcdee4329f90b2361f4fce5376eb92": "Ybodychange",
    "72fe7662416118598bc0af126c15cba3ca09d9b4": "Ybodychange",
    "eb95cc7662dc5c438de8d9ef47ccf131bf7191a8": "Ybodychange",
    "86c1d97c5f83cb6cc9c0d7490942b806d3a1d3be": "Ybodychange",
    "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da": "Ybodychange",
    "e4ff08f2bad145ec500228de112c8e821e8725cc": "Ymultichange(Yreturntypechange,Ybodychange)",
    "1f3cfcfb08a5e7454e61513389b814c7da6072ac": "Ybodychange",
    "04025259e96d3676097e84126fb55124b92c50ed": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbca7db20b9a45fb3d8efb29447349ed8593649c": {
      "type": "Ybodychange",
      "commitMessage": "Integrated new single-pass selector evaluators, contributed by knz (Anton Kazennikov).\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "bbca7db20b9a45fb3d8efb29447349ed8593649c",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "d0a7e3a00350ea9bdca6a1f005ccc75e5b2d19d4",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    return Collector.collect(evaluator, root);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 99,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,3 @@\n private Elements select() {\n-    tq.consumeWhitespace();\n-    if (tq.matchesAny(combinators)) {\n-        elements.add(root);\n-        combinator(tq.consume());\n-    } else if (tq.matches(\":has(\")) {\n-        elements.addAll(root.getAllElements());\n-    } else {\n-        addElements(findElements());\n-    }\n-    while (!tq.isEmpty()) {\n-        boolean seenWhite \u003d tq.consumeWhitespace();\n-        if (tq.matchChomp(\",\")) {\n-            while (!tq.isEmpty()) {\n-                String subQuery \u003d tq.chompTo(\",\");\n-                elements.addAll(select(subQuery, root));\n-            }\n-        } else if (tq.matchesAny(combinators)) {\n-            combinator(tq.consume());\n-        } else if (seenWhite) {\n-            combinator(\u0027 \u0027);\n-        } else {\n-            Elements candidates \u003d findElements();\n-            intersectElements(filterForSelf(elements, candidates));\n-        }\n-    }\n-    return new Elements(elements);\n+    return Collector.collect(evaluator, root);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "112c1541b0f7034e63c9015e582ed13efbbb5bd3": {
      "type": "Ybodychange",
      "commitMessage": "removing char boxing\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "112c1541b0f7034e63c9015e582ed13efbbb5bd3",
      "commitAuthor": "Anton Kazennikov",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "ca8bad78bf898f808ad6028d4a7c09a69bc65b84",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        elements.add(root);\n        combinator(tq.consume());\n    } else if (tq.matches(\":has(\")) {\n        elements.addAll(root.getAllElements());\n    } else {\n        addElements(findElements());\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume());\n        } else if (seenWhite) {\n            combinator(\u0027 \u0027);\n        } else {\n            Elements candidates \u003d findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 104,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n private Elements select() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n         elements.add(root);\n-        combinator(tq.consume().toString());\n+        combinator(tq.consume());\n     } else if (tq.matches(\":has(\")) {\n         elements.addAll(root.getAllElements());\n     } else {\n         addElements(findElements());\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n         } else if (tq.matchesAny(combinators)) {\n-            combinator(tq.consume().toString());\n+            combinator(tq.consume());\n         } else if (seenWhite) {\n-            combinator(\" \");\n+            combinator(\u0027 \u0027);\n         } else {\n             Elements candidates \u003d findElements();\n             intersectElements(filterForSelf(elements, candidates));\n         }\n     }\n     return new Elements(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f462438f2ebfb354c823cd2c0b677b0674f0e80c": {
      "type": "Ybodychange",
      "commitMessage": "Added :not() selector, to find elements that do not match the selector. E.g. div:not(.logo) finds divs that\ndo not have the \"logo\" class name.\n\nFixes #36\n",
      "commitDate": "7/2/11, 4:12 AM",
      "commitName": "f462438f2ebfb354c823cd2c0b677b0674f0e80c",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:12 AM",
      "commitNameOld": "2e22a341cd460a58d3f70ed8bf77bef53e9bec0f",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        elements.add(root);\n        combinator(tq.consume().toString());\n    } else if (tq.matches(\":has(\")) {\n        elements.addAll(root.getAllElements());\n    } else {\n        addElements(findElements());\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume().toString());\n        } else if (seenWhite) {\n            combinator(\" \");\n        } else {\n            Elements candidates \u003d findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 104,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,28 @@\n private Elements select() {\n     tq.consumeWhitespace();\n     if (tq.matchesAny(combinators)) {\n         elements.add(root);\n         combinator(tq.consume().toString());\n+    } else if (tq.matches(\":has(\")) {\n+        elements.addAll(root.getAllElements());\n     } else {\n         addElements(findElements());\n     }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume().toString());\n         } else if (seenWhite) {\n             combinator(\" \");\n         } else {\n             Elements candidates \u003d findElements();\n             intersectElements(filterForSelf(elements, candidates));\n         }\n     }\n     return new Elements(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3eb8a67876703682e4156b378871911870fcaad9": {
      "type": "Ybodychange",
      "commitMessage": "Allow combinators at start of selector query\n\nCloses #13\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "3eb8a67876703682e4156b378871911870fcaad9",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "ec69d09deb79468edde57456c0f79c19128e19e1",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    if (tq.matchesAny(combinators)) {\n        elements.add(root);\n        combinator(tq.consume().toString());\n    } else {\n        addElements(findElements());\n    }\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume().toString());\n        } else if (seenWhite) {\n            combinator(\" \");\n        } else {\n            Elements candidates \u003d findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 88,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,21 +1,26 @@\n private Elements select() {\n     tq.consumeWhitespace();\n-    addElements(findElements());\n+    if (tq.matchesAny(combinators)) {\n+        elements.add(root);\n+        combinator(tq.consume().toString());\n+    } else {\n+        addElements(findElements());\n+    }\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n         } else if (tq.matchesAny(combinators)) {\n             combinator(tq.consume().toString());\n         } else if (seenWhite) {\n             combinator(\" \");\n         } else {\n             Elements candidates \u003d findElements();\n             intersectElements(filterForSelf(elements, candidates));\n         }\n     }\n     return new Elements(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "79c672355bb31aa69c23d2dd1ed8cc3f89dd2844": {
      "type": "Ybodychange",
      "commitMessage": "New: E + F adjacent sibling selector, E ~ F preceding sibling.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "79c672355bb31aa69c23d2dd1ed8cc3f89dd2844",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "671e03b570f586b6583feb1ee3ddb5d5c62bd50c",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    addElements(findElements());\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchesAny(combinators)) {\n            combinator(tq.consume().toString());\n        } else if (seenWhite) {\n            combinator(\" \");\n        } else {\n            Elements candidates \u003d findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 88,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,26 +1,21 @@\n private Elements select() {\n     tq.consumeWhitespace();\n     addElements(findElements());\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n-        } else if (tq.matchChomp(\"\u003e\")) {\n-            String subQuery \u003d tq.chompTo(\"\u003e\");\n-            Elements candidates \u003d select(subQuery, elements);\n-            Elements children \u003d filterForChildren(elements, candidates);\n-            elements.clear();\n-            elements.addAll(children);\n+        } else if (tq.matchesAny(combinators)) {\n+            combinator(tq.consume().toString());\n         } else if (seenWhite) {\n-            Elements candidates \u003d select(tq.remainder(), elements);\n-            return filterForDescendants(elements, candidates);\n+            combinator(\" \");\n         } else {\n             Elements candidates \u003d findElements();\n             intersectElements(filterForSelf(elements, candidates));\n         }\n     }\n     return new Elements(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac57740b13bddd414c98253d53092546c1c330a2": {
      "type": "Ybodychange",
      "commitMessage": "Fixed selector for multi descenders.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "ac57740b13bddd414c98253d53092546c1c330a2",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "7a7419fbc1bcdee4329f90b2361f4fce5376eb92",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    addElements(findElements());\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchChomp(\"\u003e\")) {\n            String subQuery \u003d tq.chompTo(\"\u003e\");\n            Elements candidates \u003d select(subQuery, elements);\n            Elements children \u003d filterForChildren(elements, candidates);\n            elements.clear();\n            elements.addAll(children);\n        } else if (seenWhite) {\n            Elements candidates \u003d select(tq.remainder(), elements);\n            return filterForDescendants(elements, candidates);\n        } else {\n            Elements candidates \u003d findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 47,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,26 @@\n private Elements select() {\n     tq.consumeWhitespace();\n     addElements(findElements());\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n         } else if (tq.matchChomp(\"\u003e\")) {\n-            Elements candidates \u003d select(tq.remainder(), elements);\n-            return filterForChildren(elements, candidates);\n+            String subQuery \u003d tq.chompTo(\"\u003e\");\n+            Elements candidates \u003d select(subQuery, elements);\n+            Elements children \u003d filterForChildren(elements, candidates);\n+            elements.clear();\n+            elements.addAll(children);\n         } else if (seenWhite) {\n             Elements candidates \u003d select(tq.remainder(), elements);\n             return filterForDescendants(elements, candidates);\n         } else {\n             Elements candidates \u003d findElements();\n             intersectElements(filterForSelf(elements, candidates));\n         }\n     }\n     return new Elements(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7a7419fbc1bcdee4329f90b2361f4fce5376eb92": {
      "type": "Ybodychange",
      "commitMessage": "Selector cleanup\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "7a7419fbc1bcdee4329f90b2361f4fce5376eb92",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "72fe7662416118598bc0af126c15cba3ca09d9b4",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    addElements(findElements());\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchChomp(\"\u003e\")) {\n            Elements candidates \u003d select(tq.remainder(), elements);\n            return filterForChildren(elements, candidates);\n        } else if (seenWhite) {\n            Elements candidates \u003d select(tq.remainder(), elements);\n            return filterForDescendants(elements, candidates);\n        } else {\n            Elements candidates \u003d findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 47,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,23 +1,23 @@\n private Elements select() {\n     tq.consumeWhitespace();\n     addElements(findElements());\n     while (!tq.isEmpty()) {\n         boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n         } else if (tq.matchChomp(\"\u003e\")) {\n-            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n+            Elements candidates \u003d select(tq.remainder(), elements);\n             return filterForChildren(elements, candidates);\n         } else if (seenWhite) {\n-            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n+            Elements candidates \u003d select(tq.remainder(), elements);\n             return filterForDescendants(elements, candidates);\n         } else {\n             Elements candidates \u003d findElements();\n             intersectElements(filterForSelf(elements, candidates));\n         }\n     }\n     return new Elements(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "72fe7662416118598bc0af126c15cba3ca09d9b4": {
      "type": "Ybodychange",
      "commitMessage": "Fixed select parser for childs.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "72fe7662416118598bc0af126c15cba3ca09d9b4",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "2202259e8bbf9eafa83a0a06cf765d01f5beb69a",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    addElements(findElements());\n    while (!tq.isEmpty()) {\n        boolean seenWhite \u003d tq.consumeWhitespace();\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n        } else if (tq.matchChomp(\"\u003e\")) {\n            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n            return filterForChildren(elements, candidates);\n        } else if (seenWhite) {\n            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n            return filterForDescendants(elements, candidates);\n        } else {\n            Elements candidates \u003d findElements();\n            intersectElements(filterForSelf(elements, candidates));\n        }\n    }\n    return new Elements(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 49,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,37 +1,23 @@\n private Elements select() {\n     tq.consumeWhitespace();\n-    if (tq.matchChomp(\"#\")) {\n-        byId();\n-    } else if (tq.matchChomp(\".\")) {\n-        byClass();\n-    } else if (tq.matchesWord()) {\n-        byTag();\n-    } else if (tq.matchChomp(\"[\")) {\n-        byAttribute();\n-    } else if (tq.matchChomp(\"*\")) {\n-        allElements();\n-    } else {\n-        throw new SelectorParseException(\"Could not parse query \" + query);\n-    }\n-    boolean seenWhite \u003d tq.consumeWhitespace();\n-    if (!tq.isEmpty()) {\n+    addElements(findElements());\n+    while (!tq.isEmpty()) {\n+        boolean seenWhite \u003d tq.consumeWhitespace();\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n-            return new Elements(elements);\n         } else if (tq.matchChomp(\"\u003e\")) {\n             Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n             return filterForChildren(elements, candidates);\n         } else if (seenWhite) {\n             Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n             return filterForDescendants(elements, candidates);\n         } else {\n-            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n-            return filterForSelf(elements, candidates);\n+            Elements candidates \u003d findElements();\n+            intersectElements(filterForSelf(elements, candidates));\n         }\n-    } else {\n-        return new Elements(elements);\n     }\n+    return new Elements(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eb95cc7662dc5c438de8d9ef47ccf131bf7191a8": {
      "type": "Ybodychange",
      "commitMessage": "Fixed selector so that \"parent child\" doesn\u0027t contain parent, and \"element.class\" is an AND on parent element, and doesn\u0027t match .class in child element (i.e. I re-read the CSS3 selector doc, which is clearer than jquery doc).\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "eb95cc7662dc5c438de8d9ef47ccf131bf7191a8",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "86c1d97c5f83cb6cc9c0d7490942b806d3a1d3be",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord()) {\n        byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        allElements();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \" + query);\n    }\n    boolean seenWhite \u003d tq.consumeWhitespace();\n    if (!tq.isEmpty()) {\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n            return new Elements(elements);\n        } else if (tq.matchChomp(\"\u003e\")) {\n            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n            return filterForChildren(elements, candidates);\n        } else if (seenWhite) {\n            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n            return filterForDescendants(elements, candidates);\n        } else {\n            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n            return filterForSelf(elements, candidates);\n        }\n    } else {\n        return new Elements(elements);\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 49,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,33 +1,37 @@\n private Elements select() {\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"#\")) {\n         byId();\n     } else if (tq.matchChomp(\".\")) {\n         byClass();\n     } else if (tq.matchesWord()) {\n         byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         byAttribute();\n     } else if (tq.matchChomp(\"*\")) {\n         allElements();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \" + query);\n     }\n-    tq.consumeWhitespace();\n+    boolean seenWhite \u003d tq.consumeWhitespace();\n     if (!tq.isEmpty()) {\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n             return new Elements(elements);\n         } else if (tq.matchChomp(\"\u003e\")) {\n-            Elements candidateChildren \u003d new Elements(select(tq.remainder(), elements));\n-            return filterForChildren(elements, candidateChildren);\n+            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n+            return filterForChildren(elements, candidates);\n+        } else if (seenWhite) {\n+            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n+            return filterForDescendants(elements, candidates);\n         } else {\n-            return new Elements(select(tq.remainder(), elements));\n+            Elements candidates \u003d new Elements(select(tq.remainder(), elements));\n+            return filterForSelf(elements, candidates);\n         }\n     } else {\n         return new Elements(elements);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86c1d97c5f83cb6cc9c0d7490942b806d3a1d3be": {
      "type": "Ybodychange",
      "commitMessage": "Selector: added * (all elements) and parent \u003e child.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "86c1d97c5f83cb6cc9c0d7490942b806d3a1d3be",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord()) {\n        byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        byAttribute();\n    } else if (tq.matchChomp(\"*\")) {\n        allElements();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \" + query);\n    }\n    tq.consumeWhitespace();\n    if (!tq.isEmpty()) {\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n            return new Elements(elements);\n        } else if (tq.matchChomp(\"\u003e\")) {\n            Elements candidateChildren \u003d new Elements(select(tq.remainder(), elements));\n            return filterForChildren(elements, candidateChildren);\n        } else {\n            return new Elements(select(tq.remainder(), elements));\n        }\n    } else {\n        return new Elements(elements);\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 49,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,33 @@\n private Elements select() {\n     tq.consumeWhitespace();\n     if (tq.matchChomp(\"#\")) {\n         byId();\n     } else if (tq.matchChomp(\".\")) {\n         byClass();\n     } else if (tq.matchesWord()) {\n         byTag();\n     } else if (tq.matchChomp(\"[\")) {\n         byAttribute();\n+    } else if (tq.matchChomp(\"*\")) {\n+        allElements();\n     } else {\n         throw new SelectorParseException(\"Could not parse query \" + query);\n     }\n     tq.consumeWhitespace();\n     if (!tq.isEmpty()) {\n         if (tq.matchChomp(\",\")) {\n             while (!tq.isEmpty()) {\n                 String subQuery \u003d tq.chompTo(\",\");\n                 elements.addAll(select(subQuery, root));\n             }\n             return new Elements(elements);\n+        } else if (tq.matchChomp(\"\u003e\")) {\n+            Elements candidateChildren \u003d new Elements(select(tq.remainder(), elements));\n+            return filterForChildren(elements, candidateChildren);\n         } else {\n             return new Elements(select(tq.remainder(), elements));\n         }\n     } else {\n         return new Elements(elements);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da": {
      "type": "Ybodychange",
      "commitMessage": "Implemented select(\"ancestor descendant\").\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e8e755bfb9a0b1b8b19e8312942ea29cb9b626da",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "e4ff08f2bad145ec500228de112c8e821e8725cc",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    if (tq.matchChomp(\"#\")) {\n        byId();\n    } else if (tq.matchChomp(\".\")) {\n        byClass();\n    } else if (tq.matchesWord()) {\n        byTag();\n    } else if (tq.matchChomp(\"[\")) {\n        byAttribute();\n    } else {\n        throw new SelectorParseException(\"Could not parse query \" + query);\n    }\n    tq.consumeWhitespace();\n    if (!tq.isEmpty()) {\n        if (tq.matchChomp(\",\")) {\n            while (!tq.isEmpty()) {\n                String subQuery \u003d tq.chompTo(\",\");\n                elements.addAll(select(subQuery, root));\n            }\n            return new Elements(elements);\n        } else {\n            return new Elements(select(tq.remainder(), elements));\n        }\n    } else {\n        return new Elements(elements);\n    }\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 48,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,28 @@\n private Elements select() {\n     tq.consumeWhitespace();\n-    while (!tq.isEmpty()) {\n-        if (tq.matchChomp(\"#\")) {\n-            byId();\n-        } else if (tq.matchChomp(\".\")) {\n-            byClass();\n-        } else if (tq.matchesWord()) {\n-            byTag();\n-        } else if (tq.matchChomp(\"[\")) {\n-            byAttribute();\n-        } else if (tq.matchChomp(\",\")) {\n-            groupOr();\n-        } else {\n-            throw new SelectorParseException(\"Could not parse query \" + query);\n-        }\n+    if (tq.matchChomp(\"#\")) {\n+        byId();\n+    } else if (tq.matchChomp(\".\")) {\n+        byClass();\n+    } else if (tq.matchesWord()) {\n+        byTag();\n+    } else if (tq.matchChomp(\"[\")) {\n+        byAttribute();\n+    } else {\n+        throw new SelectorParseException(\"Could not parse query \" + query);\n     }\n-    return new Elements(elements);\n+    tq.consumeWhitespace();\n+    if (!tq.isEmpty()) {\n+        if (tq.matchChomp(\",\")) {\n+            while (!tq.isEmpty()) {\n+                String subQuery \u003d tq.chompTo(\",\");\n+                elements.addAll(select(subQuery, root));\n+            }\n+            return new Elements(elements);\n+        } else {\n+            return new Elements(select(tq.remainder(), elements));\n+        }\n+    } else {\n+        return new Elements(elements);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4ff08f2bad145ec500228de112c8e821e8725cc": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Renamed ElementList to Elements\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "e4ff08f2bad145ec500228de112c8e821e8725cc",
      "commitAuthor": "Jonathan Hedley",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Renamed ElementList to Elements\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "e4ff08f2bad145ec500228de112c8e821e8725cc",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "c1ef042a598d492cbcf0bcf09526a49c74bec073",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    while (!tq.isEmpty()) {\n        if (tq.matchChomp(\"#\")) {\n            byId();\n        } else if (tq.matchChomp(\".\")) {\n            byClass();\n        } else if (tq.matchesWord()) {\n            byTag();\n        } else if (tq.matchChomp(\"[\")) {\n            byAttribute();\n        } else if (tq.matchChomp(\",\")) {\n            groupOr();\n        } else {\n            throw new SelectorParseException(\"Could not parse query \" + query);\n        }\n    }\n    return new Elements(elements);\n}",
          "path": "src/main/java/org/jsoup/select/Selector.java",
          "functionStartLine": 46,
          "functionName": "select",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,19 @@\n-private ElementList select() {\n+private Elements select() {\n     tq.consumeWhitespace();\n     while (!tq.isEmpty()) {\n         if (tq.matchChomp(\"#\")) {\n             byId();\n         } else if (tq.matchChomp(\".\")) {\n             byClass();\n         } else if (tq.matchesWord()) {\n             byTag();\n         } else if (tq.matchChomp(\"[\")) {\n             byAttribute();\n         } else if (tq.matchChomp(\",\")) {\n             groupOr();\n         } else {\n             throw new SelectorParseException(\"Could not parse query \" + query);\n         }\n     }\n-    return new ElementList(elements);\n+    return new Elements(elements);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "ElementList",
            "newValue": "Elements"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Renamed ElementList to Elements\n",
          "commitDate": "7/2/11, 4:11 AM",
          "commitName": "e4ff08f2bad145ec500228de112c8e821e8725cc",
          "commitAuthor": "Jonathan Hedley",
          "commitDateOld": "7/2/11, 4:11 AM",
          "commitNameOld": "c1ef042a598d492cbcf0bcf09526a49c74bec073",
          "commitAuthorOld": "Jonathan Hedley",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Elements select() {\n    tq.consumeWhitespace();\n    while (!tq.isEmpty()) {\n        if (tq.matchChomp(\"#\")) {\n            byId();\n        } else if (tq.matchChomp(\".\")) {\n            byClass();\n        } else if (tq.matchesWord()) {\n            byTag();\n        } else if (tq.matchChomp(\"[\")) {\n            byAttribute();\n        } else if (tq.matchChomp(\",\")) {\n            groupOr();\n        } else {\n            throw new SelectorParseException(\"Could not parse query \" + query);\n        }\n    }\n    return new Elements(elements);\n}",
          "path": "src/main/java/org/jsoup/select/Selector.java",
          "functionStartLine": 46,
          "functionName": "select",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,19 +1,19 @@\n-private ElementList select() {\n+private Elements select() {\n     tq.consumeWhitespace();\n     while (!tq.isEmpty()) {\n         if (tq.matchChomp(\"#\")) {\n             byId();\n         } else if (tq.matchChomp(\".\")) {\n             byClass();\n         } else if (tq.matchesWord()) {\n             byTag();\n         } else if (tq.matchChomp(\"[\")) {\n             byAttribute();\n         } else if (tq.matchChomp(\",\")) {\n             groupOr();\n         } else {\n             throw new SelectorParseException(\"Could not parse query \" + query);\n         }\n     }\n-    return new ElementList(elements);\n+    return new Elements(elements);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "1f3cfcfb08a5e7454e61513389b814c7da6072ac": {
      "type": "Ybodychange",
      "commitMessage": "Implemented select(query, query, query) or group selector.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "1f3cfcfb08a5e7454e61513389b814c7da6072ac",
      "commitAuthor": "Jonathan Hedley",
      "commitDateOld": "7/2/11, 4:11 AM",
      "commitNameOld": "04025259e96d3676097e84126fb55124b92c50ed",
      "commitAuthorOld": "Jonathan Hedley",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private ElementList select() {\n    tq.consumeWhitespace();\n    while (!tq.isEmpty()) {\n        if (tq.matchChomp(\"#\")) {\n            byId();\n        } else if (tq.matchChomp(\".\")) {\n            byClass();\n        } else if (tq.matchesWord()) {\n            byTag();\n        } else if (tq.matchChomp(\"[\")) {\n            byAttribute();\n        } else if (tq.matchChomp(\",\")) {\n            groupOr();\n        } else {\n            throw new SelectorParseException(\"Could not parse query \" + query);\n        }\n    }\n    return new ElementList(elements);\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 35,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,19 @@\n private ElementList select() {\n     tq.consumeWhitespace();\n     while (!tq.isEmpty()) {\n         if (tq.matchChomp(\"#\")) {\n             byId();\n         } else if (tq.matchChomp(\".\")) {\n             byClass();\n         } else if (tq.matchesWord()) {\n             byTag();\n         } else if (tq.matchChomp(\"[\")) {\n             byAttribute();\n+        } else if (tq.matchChomp(\",\")) {\n+            groupOr();\n         } else {\n             throw new SelectorParseException(\"Could not parse query \" + query);\n         }\n     }\n-    return elements;\n+    return new ElementList(elements);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "04025259e96d3676097e84126fb55124b92c50ed": {
      "type": "Yintroduced",
      "commitMessage": "Initial, partial implementation of Selector.\n",
      "commitDate": "7/2/11, 4:11 AM",
      "commitName": "04025259e96d3676097e84126fb55124b92c50ed",
      "commitAuthor": "Jonathan Hedley",
      "diff": "@@ -0,0 +1,17 @@\n+private ElementList select() {\n+    tq.consumeWhitespace();\n+    while (!tq.isEmpty()) {\n+        if (tq.matchChomp(\"#\")) {\n+            byId();\n+        } else if (tq.matchChomp(\".\")) {\n+            byClass();\n+        } else if (tq.matchesWord()) {\n+            byTag();\n+        } else if (tq.matchChomp(\"[\")) {\n+            byAttribute();\n+        } else {\n+            throw new SelectorParseException(\"Could not parse query \" + query);\n+        }\n+    }\n+    return elements;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private ElementList select() {\n    tq.consumeWhitespace();\n    while (!tq.isEmpty()) {\n        if (tq.matchChomp(\"#\")) {\n            byId();\n        } else if (tq.matchChomp(\".\")) {\n            byClass();\n        } else if (tq.matchesWord()) {\n            byTag();\n        } else if (tq.matchChomp(\"[\")) {\n            byAttribute();\n        } else {\n            throw new SelectorParseException(\"Could not parse query \" + query);\n        }\n    }\n    return elements;\n}",
      "path": "src/main/java/org/jsoup/select/Selector.java",
      "functionStartLine": 34,
      "functionName": "select",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}