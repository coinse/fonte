{
  "origin": "codeshovel",
  "repositoryName": "JacksonXml-3b",
  "repositoryPath": "/tmp/JacksonXml-3b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FromXmlParser.java",
  "functionName": "nextToken",
  "functionId": "nextToken",
  "sourceFilePath": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 453,
  "functionEndLine": 588,
  "numCommitsSeen": 40,
  "timeTaken": 1987,
  "changeHistory": [
    "7749b6f60605d115375eb3461f0fa5be4d8d7334",
    "2d7683ed820116b77cba9b4b290cd7ce7dfa5cf4",
    "3502de0ed0d928516c0751095af62e48f574f803",
    "ac88d6619cbd9003444532219ff5f70f5273321f",
    "5aba567ed073e836c32c850e1a751955edcce8b7",
    "3bb8b8a8c9105d984c71898d3a0002ce1e048454",
    "9d3997cb5b4ba817707191ce57eb5812105c146d",
    "fc008096cfeff9b5fe3836d5ad1ca962aa28e189",
    "320d5fb53f02978e07087a42e77e59bd4a7aaea1",
    "09f05a5ef994a2622f8f40626b9a75ab559d9d83",
    "41628fa07748c93f043eb3657ba34a085745bfee",
    "c95b94a159ac01373fc44ac8a761738d73cb5709",
    "901c8f9cccd6a2ab1695e509daea143247c54df4",
    "34beb478c9c3bc015a1fc76c33458e99197b6d7c",
    "948d377c7aafb0ed91a244415df07f3f6c106be2",
    "478883dc04ab768edc2230f49871993b41899a93",
    "ac97422c72402f2970e5d9eab7a727a308399d56"
  ],
  "changeHistoryShort": {
    "7749b6f60605d115375eb3461f0fa5be4d8d7334": "Ybodychange",
    "2d7683ed820116b77cba9b4b290cd7ce7dfa5cf4": "Ybodychange",
    "3502de0ed0d928516c0751095af62e48f574f803": "Ybodychange",
    "ac88d6619cbd9003444532219ff5f70f5273321f": "Yexceptionschange",
    "5aba567ed073e836c32c850e1a751955edcce8b7": "Yformatchange",
    "3bb8b8a8c9105d984c71898d3a0002ce1e048454": "Ybodychange",
    "9d3997cb5b4ba817707191ce57eb5812105c146d": "Ybodychange",
    "fc008096cfeff9b5fe3836d5ad1ca962aa28e189": "Ybodychange",
    "320d5fb53f02978e07087a42e77e59bd4a7aaea1": "Ybodychange",
    "09f05a5ef994a2622f8f40626b9a75ab559d9d83": "Yformatchange",
    "41628fa07748c93f043eb3657ba34a085745bfee": "Ybodychange",
    "c95b94a159ac01373fc44ac8a761738d73cb5709": "Ybodychange",
    "901c8f9cccd6a2ab1695e509daea143247c54df4": "Ybodychange",
    "34beb478c9c3bc015a1fc76c33458e99197b6d7c": "Ybodychange",
    "948d377c7aafb0ed91a244415df07f3f6c106be2": "Yfilerename",
    "478883dc04ab768edc2230f49871993b41899a93": "Yfilerename",
    "ac97422c72402f2970e5d9eab7a727a308399d56": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7749b6f60605d115375eb3461f0fa5be4d8d7334": {
      "type": "Ybodychange",
      "commitMessage": "Fixed #191\n",
      "commitDate": "4/21/16, 7:07 PM",
      "commitName": "7749b6f60605d115375eb3461f0fa5be4d8d7334",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/6/16, 7:38 PM",
      "commitNameOld": "782e6e3a7c5c827e92f3be6171737c77a4a1967b",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 105.94,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    while (true) {\n        switch(token) {\n            case XmlTokenStream.XML_END_ELEMENT:\n                if (_mayBeLeaf) {\n                    _mayBeLeaf \u003d false;\n                    if (_parsingContext.inArray()) {\n                        _nextToken \u003d JsonToken.END_OBJECT;\n                        _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                        return (_currToken \u003d JsonToken.START_OBJECT);\n                    }\n                    return (_currToken \u003d JsonToken.VALUE_NULL);\n                }\n                _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                return _currToken;\n            case XmlTokenStream.XML_ATTRIBUTE_NAME:\n                if (_mayBeLeaf) {\n                    _mayBeLeaf \u003d false;\n                    _nextToken \u003d JsonToken.FIELD_NAME;\n                    _currText \u003d _xmlTokens.getText();\n                    _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                    return (_currToken \u003d JsonToken.START_OBJECT);\n                }\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                return (_currToken \u003d JsonToken.FIELD_NAME);\n            case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n                _currText \u003d _xmlTokens.getText();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            case XmlTokenStream.XML_TEXT:\n                _currText \u003d _xmlTokens.getText();\n                if (_mayBeLeaf) {\n                    _mayBeLeaf \u003d false;\n                    _xmlTokens.skipEndElement();\n                    if (_parsingContext.inArray()) {\n                        if (_isEmpty(_currText)) {\n                            _nextToken \u003d JsonToken.END_OBJECT;\n                            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                            return (_currToken \u003d JsonToken.START_OBJECT);\n                        }\n                    }\n                    return (_currToken \u003d JsonToken.VALUE_STRING);\n                } else {\n                    if (_parsingContext.inObject()) {\n                        if ((_currToken !\u003d JsonToken.FIELD_NAME) \u0026\u0026 _isEmpty(_currText)) {\n                            token \u003d _xmlTokens.next();\n                            continue;\n                        }\n                    }\n                }\n                _parsingContext.setCurrentName(_cfgNameForTextElement);\n                _nextToken \u003d JsonToken.VALUE_STRING;\n                return (_currToken \u003d JsonToken.FIELD_NAME);\n            case XmlTokenStream.XML_END:\n                return (_currToken \u003d null);\n        }\n    }\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 453,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,104 +1,104 @@\n @Override\n public JsonToken nextToken() throws IOException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n             _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n-    switch(token) {\n-        case XmlTokenStream.XML_END_ELEMENT:\n-            if (_mayBeLeaf) {\n-                _mayBeLeaf \u003d false;\n-                if (_parsingContext.inArray()) {\n-                    _nextToken \u003d JsonToken.END_OBJECT;\n-                    _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n-                    return (_currToken \u003d JsonToken.START_OBJECT);\n-                }\n-                return (_currToken \u003d JsonToken.VALUE_NULL);\n-            }\n-            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n-            _parsingContext \u003d _parsingContext.getParent();\n-            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n-            return _currToken;\n-        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n-            if (_mayBeLeaf) {\n-                _mayBeLeaf \u003d false;\n-                _nextToken \u003d JsonToken.FIELD_NAME;\n-                _currText \u003d _xmlTokens.getText();\n-                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n-                return (_currToken \u003d JsonToken.START_OBJECT);\n-            }\n-            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n-            return (_currToken \u003d JsonToken.FIELD_NAME);\n-        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n-            _currText \u003d _xmlTokens.getText();\n-            return (_currToken \u003d JsonToken.VALUE_STRING);\n-        case XmlTokenStream.XML_TEXT:\n-            _currText \u003d _xmlTokens.getText();\n-            if (_mayBeLeaf) {\n-                _mayBeLeaf \u003d false;\n-                _xmlTokens.skipEndElement();\n-                if (_parsingContext.inArray()) {\n-                    if (_isEmpty(_currText)) {\n+    while (true) {\n+        switch(token) {\n+            case XmlTokenStream.XML_END_ELEMENT:\n+                if (_mayBeLeaf) {\n+                    _mayBeLeaf \u003d false;\n+                    if (_parsingContext.inArray()) {\n                         _nextToken \u003d JsonToken.END_OBJECT;\n                         _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                         return (_currToken \u003d JsonToken.START_OBJECT);\n                     }\n+                    return (_currToken \u003d JsonToken.VALUE_NULL);\n                 }\n+                _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n+                _parsingContext \u003d _parsingContext.getParent();\n+                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n+                return _currToken;\n+            case XmlTokenStream.XML_ATTRIBUTE_NAME:\n+                if (_mayBeLeaf) {\n+                    _mayBeLeaf \u003d false;\n+                    _nextToken \u003d JsonToken.FIELD_NAME;\n+                    _currText \u003d _xmlTokens.getText();\n+                    _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n+                    return (_currToken \u003d JsonToken.START_OBJECT);\n+                }\n+                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n+                return (_currToken \u003d JsonToken.FIELD_NAME);\n+            case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n+                _currText \u003d _xmlTokens.getText();\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n-            } else {\n-                if (_parsingContext.inObject() \u0026\u0026 (_currToken !\u003d JsonToken.FIELD_NAME) \u0026\u0026 _isEmpty(_currText)) {\n-                    _currToken \u003d JsonToken.END_OBJECT;\n-                    _parsingContext \u003d _parsingContext.getParent();\n-                    _namesToWrap \u003d _parsingContext.getNamesToWrap();\n-                    return _currToken;\n+            case XmlTokenStream.XML_TEXT:\n+                _currText \u003d _xmlTokens.getText();\n+                if (_mayBeLeaf) {\n+                    _mayBeLeaf \u003d false;\n+                    _xmlTokens.skipEndElement();\n+                    if (_parsingContext.inArray()) {\n+                        if (_isEmpty(_currText)) {\n+                            _nextToken \u003d JsonToken.END_OBJECT;\n+                            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n+                            return (_currToken \u003d JsonToken.START_OBJECT);\n+                        }\n+                    }\n+                    return (_currToken \u003d JsonToken.VALUE_STRING);\n+                } else {\n+                    if (_parsingContext.inObject()) {\n+                        if ((_currToken !\u003d JsonToken.FIELD_NAME) \u0026\u0026 _isEmpty(_currText)) {\n+                            token \u003d _xmlTokens.next();\n+                            continue;\n+                        }\n+                    }\n                 }\n-            }\n-            _parsingContext.setCurrentName(_cfgNameForTextElement);\n-            _nextToken \u003d JsonToken.VALUE_STRING;\n-            return (_currToken \u003d JsonToken.FIELD_NAME);\n-        case XmlTokenStream.XML_END:\n-            return (_currToken \u003d null);\n+                _parsingContext.setCurrentName(_cfgNameForTextElement);\n+                _nextToken \u003d JsonToken.VALUE_STRING;\n+                return (_currToken \u003d JsonToken.FIELD_NAME);\n+            case XmlTokenStream.XML_END:\n+                return (_currToken \u003d null);\n+        }\n     }\n-    _throwInternal();\n-    return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2d7683ed820116b77cba9b4b290cd7ce7dfa5cf4": {
      "type": "Ybodychange",
      "commitMessage": "Fix #180\n",
      "commitDate": "1/6/16, 7:35 PM",
      "commitName": "2d7683ed820116b77cba9b4b290cd7ce7dfa5cf4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/23/15, 8:34 PM",
      "commitNameOld": "98d8c27707fc35ec65a40d178ddb54ac4f97fda1",
      "commitAuthorOld": "",
      "daysBetweenCommits": 13.96,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                if (_parsingContext.inArray()) {\n                    _nextToken \u003d JsonToken.END_OBJECT;\n                    _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                    return (_currToken \u003d JsonToken.START_OBJECT);\n                }\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        _nextToken \u003d JsonToken.END_OBJECT;\n                        _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                        return (_currToken \u003d JsonToken.START_OBJECT);\n                    }\n                }\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            } else {\n                if (_parsingContext.inObject() \u0026\u0026 (_currToken !\u003d JsonToken.FIELD_NAME) \u0026\u0026 _isEmpty(_currText)) {\n                    _currToken \u003d JsonToken.END_OBJECT;\n                    _parsingContext \u003d _parsingContext.getParent();\n                    _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n            }\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 445,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,100 +1,104 @@\n @Override\n public JsonToken nextToken() throws IOException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n             _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n+                if (_parsingContext.inArray()) {\n+                    _nextToken \u003d JsonToken.END_OBJECT;\n+                    _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n+                    return (_currToken \u003d JsonToken.START_OBJECT);\n+                }\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             _namesToWrap \u003d _parsingContext.getNamesToWrap();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 if (_parsingContext.inArray()) {\n                     if (_isEmpty(_currText)) {\n-                        _currToken \u003d JsonToken.END_ARRAY;\n-                        _parsingContext \u003d _parsingContext.getParent();\n-                        _namesToWrap \u003d _parsingContext.getNamesToWrap();\n-                        return _currToken;\n+                        _nextToken \u003d JsonToken.END_OBJECT;\n+                        _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n+                        return (_currToken \u003d JsonToken.START_OBJECT);\n                     }\n                 }\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             } else {\n                 if (_parsingContext.inObject() \u0026\u0026 (_currToken !\u003d JsonToken.FIELD_NAME) \u0026\u0026 _isEmpty(_currText)) {\n                     _currToken \u003d JsonToken.END_OBJECT;\n                     _parsingContext \u003d _parsingContext.getParent();\n                     _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                     return _currToken;\n                 }\n             }\n             _parsingContext.setCurrentName(_cfgNameForTextElement);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3502de0ed0d928516c0751095af62e48f574f803": {
      "type": "Ybodychange",
      "commitMessage": "Fix #177\n",
      "commitDate": "12/23/15, 8:32 PM",
      "commitName": "3502de0ed0d928516c0751095af62e48f574f803",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "5/27/15, 11:13 PM",
      "commitNameOld": "662d9d47a69c6c37f8cee6a9b953867c53dd2a1e",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 209.93,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        _currToken \u003d JsonToken.END_ARRAY;\n                        _parsingContext \u003d _parsingContext.getParent();\n                        _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            } else {\n                if (_parsingContext.inObject() \u0026\u0026 (_currToken !\u003d JsonToken.FIELD_NAME) \u0026\u0026 _isEmpty(_currText)) {\n                    _currToken \u003d JsonToken.END_OBJECT;\n                    _parsingContext \u003d _parsingContext.getParent();\n                    _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                    return _currToken;\n                }\n            }\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 446,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,93 +1,100 @@\n @Override\n public JsonToken nextToken() throws IOException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n             _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             _namesToWrap \u003d _parsingContext.getNamesToWrap();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 if (_parsingContext.inArray()) {\n                     if (_isEmpty(_currText)) {\n                         _currToken \u003d JsonToken.END_ARRAY;\n                         _parsingContext \u003d _parsingContext.getParent();\n                         _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                         return _currToken;\n                     }\n                 }\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n+            } else {\n+                if (_parsingContext.inObject() \u0026\u0026 (_currToken !\u003d JsonToken.FIELD_NAME) \u0026\u0026 _isEmpty(_currText)) {\n+                    _currToken \u003d JsonToken.END_OBJECT;\n+                    _parsingContext \u003d _parsingContext.getParent();\n+                    _namesToWrap \u003d _parsingContext.getNamesToWrap();\n+                    return _currToken;\n+                }\n             }\n             _parsingContext.setCurrentName(_cfgNameForTextElement);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac88d6619cbd9003444532219ff5f70f5273321f": {
      "type": "Yexceptionschange",
      "commitMessage": "Fix #129\n",
      "commitDate": "12/30/14, 8:28 PM",
      "commitName": "ac88d6619cbd9003444532219ff5f70f5273321f",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "12/29/14, 10:19 PM",
      "commitNameOld": "7cebda943332cec620720fe47dd9ecd7c7edffa4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        _currToken \u003d JsonToken.END_ARRAY;\n                        _parsingContext \u003d _parsingContext.getParent();\n                        _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 421,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,93 +1,93 @@\n @Override\n-public JsonToken nextToken() throws IOException, JsonParseException {\n+public JsonToken nextToken() throws IOException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n             _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             _namesToWrap \u003d _parsingContext.getNamesToWrap();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 if (_parsingContext.inArray()) {\n                     if (_isEmpty(_currText)) {\n                         _currToken \u003d JsonToken.END_ARRAY;\n                         _parsingContext \u003d _parsingContext.getParent();\n                         _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                         return _currToken;\n                     }\n                 }\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             }\n             _parsingContext.setCurrentName(_cfgNameForTextElement);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[IOException, JsonParseException]",
        "newValue": "[IOException]"
      }
    },
    "5aba567ed073e836c32c850e1a751955edcce8b7": {
      "type": "Yformatchange",
      "commitMessage": "Add a (failing) test for #129\n",
      "commitDate": "12/29/14, 8:17 PM",
      "commitName": "5aba567ed073e836c32c850e1a751955edcce8b7",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/28/14, 8:30 AM",
      "commitNameOld": "6882033df7b29446d5676d38e908c6e35fed5944",
      "commitAuthorOld": "Pascal Gélinas",
      "daysBetweenCommits": 335.49,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        _currToken \u003d JsonToken.END_ARRAY;\n                        _parsingContext \u003d _parsingContext.getParent();\n                        _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 421,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "3bb8b8a8c9105d984c71898d3a0002ce1e048454": {
      "type": "Ybodychange",
      "commitMessage": "Implemented [Issue#36], ability to change virtual name used for XML Text segments (default \"\")\n",
      "commitDate": "9/28/12, 10:01 PM",
      "commitName": "3bb8b8a8c9105d984c71898d3a0002ce1e048454",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/23/12, 6:57 PM",
      "commitNameOld": "1bc0788a5bd7a68c7d4814636c22034e5f38d121",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 5.13,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        _currToken \u003d JsonToken.END_ARRAY;\n                        _parsingContext \u003d _parsingContext.getParent();\n                        _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(_cfgNameForTextElement);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 424,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,93 +1,93 @@\n @Override\n public JsonToken nextToken() throws IOException, JsonParseException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n             _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             _namesToWrap \u003d _parsingContext.getNamesToWrap();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 if (_parsingContext.inArray()) {\n                     if (_isEmpty(_currText)) {\n                         _currToken \u003d JsonToken.END_ARRAY;\n                         _parsingContext \u003d _parsingContext.getParent();\n                         _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                         return _currToken;\n                     }\n                 }\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             }\n-            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n+            _parsingContext.setCurrentName(_cfgNameForTextElement);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9d3997cb5b4ba817707191ce57eb5812105c146d": {
      "type": "Ybodychange",
      "commitMessage": "Improve handling of empty unwrapped lists\n",
      "commitDate": "9/19/12, 10:55 PM",
      "commitName": "9d3997cb5b4ba817707191ce57eb5812105c146d",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/17/12, 1:39 PM",
      "commitNameOld": "fc008096cfeff9b5fe3836d5ad1ca962aa28e189",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 2.39,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                if (_parsingContext.inArray()) {\n                    if (_isEmpty(_currText)) {\n                        _currToken \u003d JsonToken.END_ARRAY;\n                        _parsingContext \u003d _parsingContext.getParent();\n                        _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                        return _currToken;\n                    }\n                }\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 407,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,84 +1,93 @@\n @Override\n public JsonToken nextToken() throws IOException, JsonParseException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n             _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n+            _namesToWrap \u003d _parsingContext.getNamesToWrap();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n+                if (_parsingContext.inArray()) {\n+                    if (_isEmpty(_currText)) {\n+                        _currToken \u003d JsonToken.END_ARRAY;\n+                        _parsingContext \u003d _parsingContext.getParent();\n+                        _namesToWrap \u003d _parsingContext.getNamesToWrap();\n+                        return _currToken;\n+                    }\n+                }\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             }\n             _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc008096cfeff9b5fe3836d5ad1ca962aa28e189": {
      "type": "Ybodychange",
      "commitMessage": ".. and then fix for that one failing test. So, passing, although not necessarily fool-proof\n",
      "commitDate": "9/17/12, 1:39 PM",
      "commitName": "fc008096cfeff9b5fe3836d5ad1ca962aa28e189",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/17/12, 1:22 PM",
      "commitNameOld": "320d5fb53f02978e07087a42e77e59bd4a7aaea1",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 407,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "320d5fb53f02978e07087a42e77e59bd4a7aaea1": {
      "type": "Ybodychange",
      "commitMessage": "Fixes to handling of unwrapped Lists; only one test fail to go\n",
      "commitDate": "9/17/12, 1:22 PM",
      "commitName": "320d5fb53f02978e07087a42e77e59bd4a7aaea1",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/16/12, 9:51 PM",
      "commitNameOld": "d3dae688d38b0634bf341e5a9f80a0d8aa0c8b4d",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 407,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,85 +1,84 @@\n @Override\n public JsonToken nextToken() throws IOException, JsonParseException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n             _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n-            _mayBeLeaf \u003d false;\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             }\n             _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "09f05a5ef994a2622f8f40626b9a75ab559d9d83": {
      "type": "Yformatchange",
      "commitMessage": "Complete (?) support for unwrapped list handling; all unit tests pass again\n",
      "commitDate": "9/9/12, 10:56 PM",
      "commitName": "09f05a5ef994a2622f8f40626b9a75ab559d9d83",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/9/12, 10:40 AM",
      "commitNameOld": "41628fa07748c93f043eb3657ba34a085745bfee",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 364,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "41628fa07748c93f043eb3657ba34a085745bfee": {
      "type": "Ybodychange",
      "commitMessage": "Added support for deserializing unwrapped Lists; introduces 2 new failures, need to fix.\n",
      "commitDate": "9/9/12, 10:40 AM",
      "commitName": "41628fa07748c93f043eb3657ba34a085745bfee",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/8/12, 8:39 PM",
      "commitNameOld": "e22ace62764f7ee5ebe908922b6ac2f82432f154",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n            _xmlTokens.repeatStartElement();\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 364,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,84 +1,85 @@\n @Override\n public JsonToken nextToken() throws IOException, JsonParseException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         String name \u003d _xmlTokens.getLocalName();\n         _parsingContext.setCurrentName(name);\n         if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n+            _xmlTokens.repeatStartElement();\n         }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _mayBeLeaf \u003d false;\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             }\n             _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c95b94a159ac01373fc44ac8a761738d73cb5709": {
      "type": "Ybodychange",
      "commitMessage": "bit closer to supporting unwrapped arrays/collections...\n",
      "commitDate": "9/8/12, 8:36 PM",
      "commitName": "c95b94a159ac01373fc44ac8a761738d73cb5709",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "9/8/12, 5:20 PM",
      "commitNameOld": "901c8f9cccd6a2ab1695e509daea143247c54df4",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        String name \u003d _xmlTokens.getLocalName();\n        _parsingContext.setCurrentName(name);\n        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n        }\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 365,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,80 +1,84 @@\n @Override\n public JsonToken nextToken() throws IOException, JsonParseException {\n     _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n+                _namesToWrap \u003d _parsingContext.getNamesToWrap();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n-        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n+        String name \u003d _xmlTokens.getLocalName();\n+        _parsingContext.setCurrentName(name);\n+        if (_namesToWrap !\u003d null \u0026\u0026 _namesToWrap.contains(name)) {\n+        }\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _mayBeLeaf \u003d false;\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             }\n             _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "901c8f9cccd6a2ab1695e509daea143247c54df4": {
      "type": "Ybodychange",
      "commitMessage": "Start implementing support for \"unwrapped Lists\" again\n",
      "commitDate": "9/8/12, 5:20 PM",
      "commitName": "901c8f9cccd6a2ab1695e509daea143247c54df4",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "8/24/12, 2:56 PM",
      "commitNameOld": "7088e0319f36cd6a007eedc55f62af475cd1a8c7",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 15.1,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 333,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "34beb478c9c3bc015a1fc76c33458e99197b6d7c": {
      "type": "Ybodychange",
      "commitMessage": "Fixed [Issue-29]\n",
      "commitDate": "7/18/12, 4:26 PM",
      "commitName": "34beb478c9c3bc015a1fc76c33458e99197b6d7c",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "3/7/12, 6:20 PM",
      "commitNameOld": "2aca89e0b96884704c5d2296c2696240b5c7966c",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 132.88,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    _binaryValue \u003d null;\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 323,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,79 +1,80 @@\n @Override\n public JsonToken nextToken() throws IOException, JsonParseException {\n+    _binaryValue \u003d null;\n     if (_nextToken !\u003d null) {\n         JsonToken t \u003d _nextToken;\n         _currToken \u003d t;\n         _nextToken \u003d null;\n         switch(t) {\n             case START_OBJECT:\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 break;\n             case START_ARRAY:\n                 _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                 break;\n             case END_OBJECT:\n             case END_ARRAY:\n                 _parsingContext \u003d _parsingContext.getParent();\n                 break;\n             case FIELD_NAME:\n                 _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                 break;\n             default:\n         }\n         return t;\n     }\n     int token \u003d _xmlTokens.next();\n     while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n         if (_mayBeLeaf) {\n             _nextToken \u003d JsonToken.FIELD_NAME;\n             _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n             return (_currToken \u003d JsonToken.START_OBJECT);\n         }\n         if (_parsingContext.inArray()) {\n             token \u003d _xmlTokens.next();\n             _mayBeLeaf \u003d true;\n             continue;\n         }\n         _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n         _mayBeLeaf \u003d true;\n         return (_currToken \u003d JsonToken.FIELD_NAME);\n     }\n     switch(token) {\n         case XmlTokenStream.XML_END_ELEMENT:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 return (_currToken \u003d JsonToken.VALUE_NULL);\n             }\n             _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n             _parsingContext \u003d _parsingContext.getParent();\n             return _currToken;\n         case XmlTokenStream.XML_ATTRIBUTE_NAME:\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _nextToken \u003d JsonToken.FIELD_NAME;\n                 _currText \u003d _xmlTokens.getText();\n                 _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                 return (_currToken \u003d JsonToken.START_OBJECT);\n             }\n             _mayBeLeaf \u003d false;\n             _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n             _currText \u003d _xmlTokens.getText();\n             return (_currToken \u003d JsonToken.VALUE_STRING);\n         case XmlTokenStream.XML_TEXT:\n             _currText \u003d _xmlTokens.getText();\n             if (_mayBeLeaf) {\n                 _mayBeLeaf \u003d false;\n                 _xmlTokens.skipEndElement();\n                 return (_currToken \u003d JsonToken.VALUE_STRING);\n             }\n             _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n             _nextToken \u003d JsonToken.VALUE_STRING;\n             return (_currToken \u003d JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n             return (_currToken \u003d null);\n     }\n     _throwInternal();\n     return null;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "948d377c7aafb0ed91a244415df07f3f6c106be2": {
      "type": "Yfilerename",
      "commitMessage": "refactoring\n",
      "commitDate": "2/19/12, 9:55 PM",
      "commitName": "948d377c7aafb0ed91a244415df07f3f6c106be2",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "2/19/12, 9:53 PM",
      "commitNameOld": "4eb1efdf62fa5efab2422803d0f821932dda5c5a",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
      "functionStartLine": 314,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/xml/deser/FromXmlParser.java",
        "newPath": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java"
      }
    },
    "478883dc04ab768edc2230f49871993b41899a93": {
      "type": "Yfilerename",
      "commitMessage": "Adding XmlAnnotationIntrospector.Pair\n",
      "commitDate": "1/1/11, 7:24 PM",
      "commitName": "478883dc04ab768edc2230f49871993b41899a93",
      "commitAuthor": "Tatu Saloranta",
      "commitDateOld": "1/1/11, 6:40 PM",
      "commitNameOld": "09eec8108d8ca9757034443410253d2d72176fd5",
      "commitAuthorOld": "Tatu Saloranta",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/deser/FromXmlParser.java",
      "functionStartLine": 321,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/fasterxml/jackson/xml/FromXmlParser.java",
        "newPath": "src/main/java/com/fasterxml/jackson/xml/deser/FromXmlParser.java"
      }
    },
    "ac97422c72402f2970e5d9eab7a727a308399d56": {
      "type": "Yintroduced",
      "commitMessage": "Added main codebase as well\n",
      "commitDate": "12/30/10, 10:22 PM",
      "commitName": "ac97422c72402f2970e5d9eab7a727a308399d56",
      "commitAuthor": "Tatu Saloranta",
      "diff": "@@ -0,0 +1,79 @@\n+@Override\n+public JsonToken nextToken() throws IOException, JsonParseException {\n+    if (_nextToken !\u003d null) {\n+        JsonToken t \u003d _nextToken;\n+        _currToken \u003d t;\n+        _nextToken \u003d null;\n+        switch(t) {\n+            case START_OBJECT:\n+                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n+                break;\n+            case START_ARRAY:\n+                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n+                break;\n+            case END_OBJECT:\n+            case END_ARRAY:\n+                _parsingContext \u003d _parsingContext.getParent();\n+                break;\n+            case FIELD_NAME:\n+                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n+                break;\n+            default:\n+        }\n+        return t;\n+    }\n+    int token \u003d _xmlTokens.next();\n+    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n+        if (_mayBeLeaf) {\n+            _nextToken \u003d JsonToken.FIELD_NAME;\n+            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n+            return (_currToken \u003d JsonToken.START_OBJECT);\n+        }\n+        if (_parsingContext.inArray()) {\n+            token \u003d _xmlTokens.next();\n+            _mayBeLeaf \u003d true;\n+            continue;\n+        }\n+        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n+        _mayBeLeaf \u003d true;\n+        return (_currToken \u003d JsonToken.FIELD_NAME);\n+    }\n+    switch(token) {\n+        case XmlTokenStream.XML_END_ELEMENT:\n+            if (_mayBeLeaf) {\n+                _mayBeLeaf \u003d false;\n+                return (_currToken \u003d JsonToken.VALUE_NULL);\n+            }\n+            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n+            _parsingContext \u003d _parsingContext.getParent();\n+            return _currToken;\n+        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n+            if (_mayBeLeaf) {\n+                _mayBeLeaf \u003d false;\n+                _nextToken \u003d JsonToken.FIELD_NAME;\n+                _currText \u003d _xmlTokens.getText();\n+                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n+                return (_currToken \u003d JsonToken.START_OBJECT);\n+            }\n+            _mayBeLeaf \u003d false;\n+            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n+            return (_currToken \u003d JsonToken.FIELD_NAME);\n+        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n+            _currText \u003d _xmlTokens.getText();\n+            return (_currToken \u003d JsonToken.VALUE_STRING);\n+        case XmlTokenStream.XML_TEXT:\n+            _currText \u003d _xmlTokens.getText();\n+            if (_mayBeLeaf) {\n+                _mayBeLeaf \u003d false;\n+                _xmlTokens.skipEndElement();\n+                return (_currToken \u003d JsonToken.VALUE_STRING);\n+            }\n+            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n+            _nextToken \u003d JsonToken.VALUE_STRING;\n+            return (_currToken \u003d JsonToken.FIELD_NAME);\n+        case XmlTokenStream.XML_END:\n+            return (_currToken \u003d null);\n+    }\n+    _throwInternal();\n+    return null;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic JsonToken nextToken() throws IOException, JsonParseException {\n    if (_nextToken !\u003d null) {\n        JsonToken t \u003d _nextToken;\n        _currToken \u003d t;\n        _nextToken \u003d null;\n        switch(t) {\n            case START_OBJECT:\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                break;\n            case START_ARRAY:\n                _parsingContext \u003d _parsingContext.createChildArrayContext(-1, -1);\n                break;\n            case END_OBJECT:\n            case END_ARRAY:\n                _parsingContext \u003d _parsingContext.getParent();\n                break;\n            case FIELD_NAME:\n                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n                break;\n            default:\n        }\n        return t;\n    }\n    int token \u003d _xmlTokens.next();\n    while (token \u003d\u003d XmlTokenStream.XML_START_ELEMENT) {\n        if (_mayBeLeaf) {\n            _nextToken \u003d JsonToken.FIELD_NAME;\n            _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n            return (_currToken \u003d JsonToken.START_OBJECT);\n        }\n        if (_parsingContext.inArray()) {\n            token \u003d _xmlTokens.next();\n            _mayBeLeaf \u003d true;\n            continue;\n        }\n        _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n        _mayBeLeaf \u003d true;\n        return (_currToken \u003d JsonToken.FIELD_NAME);\n    }\n    switch(token) {\n        case XmlTokenStream.XML_END_ELEMENT:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                return (_currToken \u003d JsonToken.VALUE_NULL);\n            }\n            _currToken \u003d _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n            _parsingContext \u003d _parsingContext.getParent();\n            return _currToken;\n        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _nextToken \u003d JsonToken.FIELD_NAME;\n                _currText \u003d _xmlTokens.getText();\n                _parsingContext \u003d _parsingContext.createChildObjectContext(-1, -1);\n                return (_currToken \u003d JsonToken.START_OBJECT);\n            }\n            _mayBeLeaf \u003d false;\n            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n            _currText \u003d _xmlTokens.getText();\n            return (_currToken \u003d JsonToken.VALUE_STRING);\n        case XmlTokenStream.XML_TEXT:\n            _currText \u003d _xmlTokens.getText();\n            if (_mayBeLeaf) {\n                _mayBeLeaf \u003d false;\n                _xmlTokens.skipEndElement();\n                return (_currToken \u003d JsonToken.VALUE_STRING);\n            }\n            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n            _nextToken \u003d JsonToken.VALUE_STRING;\n            return (_currToken \u003d JsonToken.FIELD_NAME);\n        case XmlTokenStream.XML_END:\n            return (_currToken \u003d null);\n    }\n    _throwInternal();\n    return null;\n}",
      "path": "src/main/java/com/fasterxml/jackson/xml/FromXmlParser.java",
      "functionStartLine": 321,
      "functionName": "nextToken",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}