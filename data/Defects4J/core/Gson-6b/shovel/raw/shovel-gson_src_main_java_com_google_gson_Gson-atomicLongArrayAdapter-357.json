{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "atomicLongArrayAdapter",
  "functionId": "atomicLongArrayAdapter___longAdapter-TypeAdapter__Number__(modifiers-final)",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 357,
  "functionEndLine": 382,
  "numCommitsSeen": 177,
  "timeTaken": 504,
  "changeHistory": [
    "11b26b52563ef9bfecfcd0839b0f439e7661416f"
  ],
  "changeHistoryShort": {
    "11b26b52563ef9bfecfcd0839b0f439e7661416f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "11b26b52563ef9bfecfcd0839b0f439e7661416f": {
      "type": "Yintroduced",
      "commitMessage": "Added support for AtomicLongArray.\nAlso added tests to ensure LongSerializationPolicy is honored.\n",
      "commitDate": "11/5/15, 2:15 PM",
      "commitName": "11b26b52563ef9bfecfcd0839b0f439e7661416f",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,30 @@\n+private static TypeAdapter\u003cAtomicLongArray\u003e atomicLongArrayAdapter(final TypeAdapter\u003cNumber\u003e longAdapter) {\n+    return new TypeAdapter\u003cAtomicLongArray\u003e() {\n+\n+        @Override\n+        public void write(JsonWriter out, AtomicLongArray value) throws IOException {\n+            out.beginArray();\n+            for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n+                longAdapter.write(out, value.get(i));\n+            }\n+            out.endArray();\n+        }\n+\n+        @Override\n+        public AtomicLongArray read(JsonReader in) throws IOException {\n+            List\u003cLong\u003e list \u003d new ArrayList\u003cLong\u003e();\n+            in.beginArray();\n+            while (in.hasNext()) {\n+                long value \u003d longAdapter.read(in).longValue();\n+                list.add(value);\n+            }\n+            in.endArray();\n+            int length \u003d list.size();\n+            AtomicLongArray array \u003d new AtomicLongArray(length);\n+            for (int i \u003d 0; i \u003c length; ++i) {\n+                array.set(i, list.get(i));\n+            }\n+            return array;\n+        }\n+    }.nullSafe();\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static TypeAdapter\u003cAtomicLongArray\u003e atomicLongArrayAdapter(final TypeAdapter\u003cNumber\u003e longAdapter) {\n    return new TypeAdapter\u003cAtomicLongArray\u003e() {\n\n        @Override\n        public void write(JsonWriter out, AtomicLongArray value) throws IOException {\n            out.beginArray();\n            for (int i \u003d 0, length \u003d value.length(); i \u003c length; i++) {\n                longAdapter.write(out, value.get(i));\n            }\n            out.endArray();\n        }\n\n        @Override\n        public AtomicLongArray read(JsonReader in) throws IOException {\n            List\u003cLong\u003e list \u003d new ArrayList\u003cLong\u003e();\n            in.beginArray();\n            while (in.hasNext()) {\n                long value \u003d longAdapter.read(in).longValue();\n                list.add(value);\n            }\n            in.endArray();\n            int length \u003d list.size();\n            AtomicLongArray array \u003d new AtomicLongArray(length);\n            for (int i \u003d 0; i \u003c length; ++i) {\n                array.set(i, list.get(i));\n            }\n            return array;\n        }\n    }.nullSafe();\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 347,
      "functionName": "atomicLongArrayAdapter",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}