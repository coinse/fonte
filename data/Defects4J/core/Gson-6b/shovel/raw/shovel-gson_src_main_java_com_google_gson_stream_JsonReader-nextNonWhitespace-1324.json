{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonReader.java",
  "functionName": "nextNonWhitespace",
  "functionId": "nextNonWhitespace___throwOnEof-boolean",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
  "functionAnnotation": "",
  "functionDoc": "Returns the next character in the stream that is neither whitespace nor a\npart of a comment. When this returns, the returned character is always at\n{@code buffer[pos-1]}; this means the caller can always push back the\nreturned character by decrementing {@code pos}.\n",
  "functionStartLine": 1324,
  "functionEndLine": 1412,
  "numCommitsSeen": 53,
  "timeTaken": 1944,
  "changeHistory": [
    "8daf3aaeb4fd072d45df334dd8a6009be734c180",
    "bdf2cac6d4a5c18cf3462330eefd8e7c57990e81",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13",
    "46b4346505d85885f2dee28b24d4d2d15190564e"
  ],
  "changeHistoryShort": {
    "8daf3aaeb4fd072d45df334dd8a6009be734c180": "Ybodychange",
    "bdf2cac6d4a5c18cf3462330eefd8e7c57990e81": "Ybodychange",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": "Yfilerename",
    "46b4346505d85885f2dee28b24d4d2d15190564e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8daf3aaeb4fd072d45df334dd8a6009be734c180": {
      "type": "Ybodychange",
      "commitMessage": "Inline position computation. This is uglier but faster.\n",
      "commitDate": "8/27/12, 8:52 PM",
      "commitName": "8daf3aaeb4fd072d45df334dd8a6009be734c180",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/27/12, 6:48 PM",
      "commitNameOld": "46b73632b0f7591ef1328ee7ddd1e883916fec1e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n    char[] buffer \u003d this.buffer;\n    int p \u003d pos;\n    int l \u003d limit;\n    while (true) {\n        if (p \u003d\u003d l) {\n            pos \u003d p;\n            if (!fillBuffer(1)) {\n                break;\n            }\n            p \u003d pos;\n            l \u003d limit;\n        }\n        int c \u003d buffer[p++];\n        if (c \u003d\u003d \u0027\\n\u0027) {\n            lineNumber++;\n            lineStart \u003d p;\n            continue;\n        } else if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            continue;\n        }\n        if (c \u003d\u003d \u0027/\u0027) {\n            pos \u003d p;\n            if (p \u003d\u003d l) {\n                pos--;\n                boolean charsLoaded \u003d fillBuffer(2);\n                pos++;\n                if (!charsLoaded) {\n                    return c;\n                }\n            }\n            checkLenient();\n            char peek \u003d buffer[pos];\n            switch(peek) {\n                case \u0027*\u0027:\n                    pos++;\n                    if (!skipTo(\"*/\")) {\n                        throw syntaxError(\"Unterminated comment\");\n                    }\n                    p \u003d pos + 2;\n                    l \u003d limit;\n                    continue;\n                case \u0027/\u0027:\n                    pos++;\n                    skipToEndOfLine();\n                    p \u003d pos;\n                    l \u003d limit;\n                    continue;\n                default:\n                    return c;\n            }\n        } else if (c \u003d\u003d \u0027#\u0027) {\n            pos \u003d p;\n            checkLenient();\n            skipToEndOfLine();\n            p \u003d pos;\n            l \u003d limit;\n        } else {\n            pos \u003d p;\n            return c;\n        }\n    }\n    if (throwOnEof) {\n        throw new EOFException(\"End of input\" + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n    } else {\n        return -1;\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 1268,
      "functionName": "nextNonWhitespace",
      "functionAnnotation": "",
      "functionDoc": "Returns the next character in the stream that is neither whitespace nor a\npart of a comment. When this returns, the returned character is always at\n{@code buffer[pos-1]}; this means the caller can always push back the\nreturned character by decrementing {@code pos}.\n",
      "diff": "@@ -1,64 +1,68 @@\n private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n     char[] buffer \u003d this.buffer;\n     int p \u003d pos;\n     int l \u003d limit;\n     while (true) {\n         if (p \u003d\u003d l) {\n             pos \u003d p;\n             if (!fillBuffer(1)) {\n                 break;\n             }\n             p \u003d pos;\n             l \u003d limit;\n         }\n         int c \u003d buffer[p++];\n-        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n+        if (c \u003d\u003d \u0027\\n\u0027) {\n+            lineNumber++;\n+            lineStart \u003d p;\n+            continue;\n+        } else if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n             continue;\n         }\n         if (c \u003d\u003d \u0027/\u0027) {\n             pos \u003d p;\n             if (p \u003d\u003d l) {\n                 pos--;\n                 boolean charsLoaded \u003d fillBuffer(2);\n                 pos++;\n                 if (!charsLoaded) {\n                     return c;\n                 }\n             }\n             checkLenient();\n             char peek \u003d buffer[pos];\n             switch(peek) {\n                 case \u0027*\u0027:\n                     pos++;\n                     if (!skipTo(\"*/\")) {\n                         throw syntaxError(\"Unterminated comment\");\n                     }\n                     p \u003d pos + 2;\n                     l \u003d limit;\n                     continue;\n                 case \u0027/\u0027:\n                     pos++;\n                     skipToEndOfLine();\n                     p \u003d pos;\n                     l \u003d limit;\n                     continue;\n                 default:\n                     return c;\n             }\n         } else if (c \u003d\u003d \u0027#\u0027) {\n             pos \u003d p;\n             checkLenient();\n             skipToEndOfLine();\n             p \u003d pos;\n             l \u003d limit;\n         } else {\n             pos \u003d p;\n             return c;\n         }\n     }\n     if (throwOnEof) {\n         throw new EOFException(\"End of input\" + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     } else {\n         return -1;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bdf2cac6d4a5c18cf3462330eefd8e7c57990e81": {
      "type": "Ybodychange",
      "commitMessage": "Replace switch with if/else when processing whitespace. If/else is faster!\n",
      "commitDate": "8/26/12, 9:17 PM",
      "commitName": "bdf2cac6d4a5c18cf3462330eefd8e7c57990e81",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 8:17 PM",
      "commitNameOld": "b0a172944afe21e6986bfddadc43daaa1127bd41",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n    char[] buffer \u003d this.buffer;\n    int p \u003d pos;\n    int l \u003d limit;\n    while (true) {\n        if (p \u003d\u003d l) {\n            pos \u003d p;\n            if (!fillBuffer(1)) {\n                break;\n            }\n            p \u003d pos;\n            l \u003d limit;\n        }\n        int c \u003d buffer[p++];\n        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n            continue;\n        }\n        if (c \u003d\u003d \u0027/\u0027) {\n            pos \u003d p;\n            if (p \u003d\u003d l) {\n                pos--;\n                boolean charsLoaded \u003d fillBuffer(2);\n                pos++;\n                if (!charsLoaded) {\n                    return c;\n                }\n            }\n            checkLenient();\n            char peek \u003d buffer[pos];\n            switch(peek) {\n                case \u0027*\u0027:\n                    pos++;\n                    if (!skipTo(\"*/\")) {\n                        throw syntaxError(\"Unterminated comment\");\n                    }\n                    p \u003d pos + 2;\n                    l \u003d limit;\n                    continue;\n                case \u0027/\u0027:\n                    pos++;\n                    skipToEndOfLine();\n                    p \u003d pos;\n                    l \u003d limit;\n                    continue;\n                default:\n                    return c;\n            }\n        } else if (c \u003d\u003d \u0027#\u0027) {\n            pos \u003d p;\n            checkLenient();\n            skipToEndOfLine();\n            p \u003d pos;\n            l \u003d limit;\n        } else {\n            pos \u003d p;\n            return c;\n        }\n    }\n    if (throwOnEof) {\n        throw new EOFException(\"End of input\" + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n    } else {\n        return -1;\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 1292,
      "functionName": "nextNonWhitespace",
      "functionAnnotation": "",
      "functionDoc": "Returns the next character in the stream that is neither whitespace nor a\npart of a comment. When this returns, the returned character is always at\n{@code buffer[pos-1]}; this means the caller can always push back the\nreturned character by decrementing {@code pos}.\n",
      "diff": "@@ -1,68 +1,64 @@\n private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n     char[] buffer \u003d this.buffer;\n     int p \u003d pos;\n     int l \u003d limit;\n     while (true) {\n         if (p \u003d\u003d l) {\n             pos \u003d p;\n             if (!fillBuffer(1)) {\n                 break;\n             }\n             p \u003d pos;\n             l \u003d limit;\n         }\n         int c \u003d buffer[p++];\n-        switch(c) {\n-            case \u0027\\t\u0027:\n-            case \u0027 \u0027:\n-            case \u0027\\n\u0027:\n-            case \u0027\\r\u0027:\n-                continue;\n-            case \u0027/\u0027:\n-                pos \u003d p;\n-                if (p \u003d\u003d l) {\n-                    pos--;\n-                    boolean charsLoaded \u003d fillBuffer(2);\n+        if (c \u003d\u003d \u0027 \u0027 || c \u003d\u003d \u0027\\n\u0027 || c \u003d\u003d \u0027\\r\u0027 || c \u003d\u003d \u0027\\t\u0027) {\n+            continue;\n+        }\n+        if (c \u003d\u003d \u0027/\u0027) {\n+            pos \u003d p;\n+            if (p \u003d\u003d l) {\n+                pos--;\n+                boolean charsLoaded \u003d fillBuffer(2);\n+                pos++;\n+                if (!charsLoaded) {\n+                    return c;\n+                }\n+            }\n+            checkLenient();\n+            char peek \u003d buffer[pos];\n+            switch(peek) {\n+                case \u0027*\u0027:\n                     pos++;\n-                    if (!charsLoaded) {\n-                        return c;\n+                    if (!skipTo(\"*/\")) {\n+                        throw syntaxError(\"Unterminated comment\");\n                     }\n-                }\n-                checkLenient();\n-                char peek \u003d buffer[pos];\n-                switch(peek) {\n-                    case \u0027*\u0027:\n-                        pos++;\n-                        if (!skipTo(\"*/\")) {\n-                            throw syntaxError(\"Unterminated comment\");\n-                        }\n-                        p \u003d pos + 2;\n-                        l \u003d limit;\n-                        continue;\n-                    case \u0027/\u0027:\n-                        pos++;\n-                        skipToEndOfLine();\n-                        p \u003d pos;\n-                        l \u003d limit;\n-                        continue;\n-                    default:\n-                        return c;\n-                }\n-            case \u0027#\u0027:\n-                pos \u003d p;\n-                checkLenient();\n-                skipToEndOfLine();\n-                p \u003d pos;\n-                l \u003d limit;\n-                continue;\n-            default:\n-                pos \u003d p;\n-                return c;\n+                    p \u003d pos + 2;\n+                    l \u003d limit;\n+                    continue;\n+                case \u0027/\u0027:\n+                    pos++;\n+                    skipToEndOfLine();\n+                    p \u003d pos;\n+                    l \u003d limit;\n+                    continue;\n+                default:\n+                    return c;\n+            }\n+        } else if (c \u003d\u003d \u0027#\u0027) {\n+            pos \u003d p;\n+            checkLenient();\n+            skipToEndOfLine();\n+            p \u003d pos;\n+            l \u003d limit;\n+        } else {\n+            pos \u003d p;\n+            return c;\n         }\n     }\n     if (throwOnEof) {\n         throw new EOFException(\"End of input\" + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n     } else {\n         return -1;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": {
      "type": "Yfilerename",
      "commitMessage": "Promote JsonReader2 to be the main JsonReader implementation.\n",
      "commitDate": "8/26/12, 12:34 PM",
      "commitName": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 12:33 PM",
      "commitNameOld": "553fa6b742ef6c00f04465c401c7cc464a6f9ea0",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n    char[] buffer \u003d this.buffer;\n    int p \u003d pos;\n    int l \u003d limit;\n    while (true) {\n        if (p \u003d\u003d l) {\n            pos \u003d p;\n            if (!fillBuffer(1)) {\n                break;\n            }\n            p \u003d pos;\n            l \u003d limit;\n        }\n        int c \u003d buffer[p++];\n        switch(c) {\n            case \u0027\\t\u0027:\n            case \u0027 \u0027:\n            case \u0027\\n\u0027:\n            case \u0027\\r\u0027:\n                continue;\n            case \u0027/\u0027:\n                pos \u003d p;\n                if (p \u003d\u003d l) {\n                    pos--;\n                    boolean charsLoaded \u003d fillBuffer(2);\n                    pos++;\n                    if (!charsLoaded) {\n                        return c;\n                    }\n                }\n                checkLenient();\n                char peek \u003d buffer[pos];\n                switch(peek) {\n                    case \u0027*\u0027:\n                        pos++;\n                        if (!skipTo(\"*/\")) {\n                            throw syntaxError(\"Unterminated comment\");\n                        }\n                        p \u003d pos + 2;\n                        l \u003d limit;\n                        continue;\n                    case \u0027/\u0027:\n                        pos++;\n                        skipToEndOfLine();\n                        p \u003d pos;\n                        l \u003d limit;\n                        continue;\n                    default:\n                        return c;\n                }\n            case \u0027#\u0027:\n                pos \u003d p;\n                checkLenient();\n                skipToEndOfLine();\n                p \u003d pos;\n                l \u003d limit;\n                continue;\n            default:\n                pos \u003d p;\n                return c;\n        }\n    }\n    if (throwOnEof) {\n        throw new EOFException(\"End of input\" + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n    } else {\n        return -1;\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 1223,
      "functionName": "nextNonWhitespace",
      "functionAnnotation": "",
      "functionDoc": "Returns the next character in the stream that is neither whitespace nor a\npart of a comment. When this returns, the returned character is always at\n{@code buffer[pos-1]}; this means the caller can always push back the\nreturned character by decrementing {@code pos}.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
        "newPath": "gson/src/main/java/com/google/gson/stream/JsonReader.java"
      }
    },
    "46b4346505d85885f2dee28b24d4d2d15190564e": {
      "type": "Yintroduced",
      "commitMessage": "Get JsonReader2 to the point that it\u0027s passing most tests.\n\nStill missing: \n - non-execute prefixes\n - rolling back \u0027pos\u0027 when a double fails to parse\n - octal prefix failures\n",
      "commitDate": "8/25/12, 9:02 PM",
      "commitName": "46b4346505d85885f2dee28b24d4d2d15190564e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,68 @@\n+private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n+    char[] buffer \u003d this.buffer;\n+    int p \u003d pos;\n+    int l \u003d limit;\n+    while (true) {\n+        if (p \u003d\u003d l) {\n+            pos \u003d p;\n+            if (!fillBuffer(1)) {\n+                break;\n+            }\n+            p \u003d pos;\n+            l \u003d limit;\n+        }\n+        int c \u003d buffer[p++];\n+        switch(c) {\n+            case \u0027\\t\u0027:\n+            case \u0027 \u0027:\n+            case \u0027\\n\u0027:\n+            case \u0027\\r\u0027:\n+                continue;\n+            case \u0027/\u0027:\n+                pos \u003d p;\n+                if (p \u003d\u003d l) {\n+                    pos--;\n+                    boolean charsLoaded \u003d fillBuffer(2);\n+                    pos++;\n+                    if (!charsLoaded) {\n+                        return c;\n+                    }\n+                }\n+                checkLenient();\n+                char peek \u003d buffer[pos];\n+                switch(peek) {\n+                    case \u0027*\u0027:\n+                        pos++;\n+                        if (!skipTo(\"*/\")) {\n+                            throw syntaxError(\"Unterminated comment\");\n+                        }\n+                        p \u003d pos + 2;\n+                        l \u003d limit;\n+                        continue;\n+                    case \u0027/\u0027:\n+                        pos++;\n+                        skipToEndOfLine();\n+                        p \u003d pos;\n+                        l \u003d limit;\n+                        continue;\n+                    default:\n+                        return c;\n+                }\n+            case \u0027#\u0027:\n+                pos \u003d p;\n+                checkLenient();\n+                skipToEndOfLine();\n+                p \u003d pos;\n+                l \u003d limit;\n+                continue;\n+            default:\n+                pos \u003d p;\n+                return c;\n+        }\n+    }\n+    if (throwOnEof) {\n+        throw new EOFException(\"End of input\" + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n+    } else {\n+        return -1;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private int nextNonWhitespace(boolean throwOnEof) throws IOException {\n    char[] buffer \u003d this.buffer;\n    int p \u003d pos;\n    int l \u003d limit;\n    while (true) {\n        if (p \u003d\u003d l) {\n            pos \u003d p;\n            if (!fillBuffer(1)) {\n                break;\n            }\n            p \u003d pos;\n            l \u003d limit;\n        }\n        int c \u003d buffer[p++];\n        switch(c) {\n            case \u0027\\t\u0027:\n            case \u0027 \u0027:\n            case \u0027\\n\u0027:\n            case \u0027\\r\u0027:\n                continue;\n            case \u0027/\u0027:\n                pos \u003d p;\n                if (p \u003d\u003d l) {\n                    pos--;\n                    boolean charsLoaded \u003d fillBuffer(2);\n                    pos++;\n                    if (!charsLoaded) {\n                        return c;\n                    }\n                }\n                checkLenient();\n                char peek \u003d buffer[pos];\n                switch(peek) {\n                    case \u0027*\u0027:\n                        pos++;\n                        if (!skipTo(\"*/\")) {\n                            throw syntaxError(\"Unterminated comment\");\n                        }\n                        p \u003d pos + 2;\n                        l \u003d limit;\n                        continue;\n                    case \u0027/\u0027:\n                        pos++;\n                        skipToEndOfLine();\n                        p \u003d pos;\n                        l \u003d limit;\n                        continue;\n                    default:\n                        return c;\n                }\n            case \u0027#\u0027:\n                pos \u003d p;\n                checkLenient();\n                skipToEndOfLine();\n                p \u003d pos;\n                l \u003d limit;\n                continue;\n            default:\n                pos \u003d p;\n                return c;\n        }\n    }\n    if (throwOnEof) {\n        throw new EOFException(\"End of input\" + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());\n    } else {\n        return -1;\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
      "functionStartLine": 1215,
      "functionName": "nextNonWhitespace",
      "functionAnnotation": "",
      "functionDoc": "Returns the next character in the stream that is neither whitespace nor a\npart of a comment. When this returns, the returned character is always at\n{@code buffer[pos-1]}; this means the caller can always push back the\nreturned character by decrementing {@code pos}.\n"
    }
  }
}