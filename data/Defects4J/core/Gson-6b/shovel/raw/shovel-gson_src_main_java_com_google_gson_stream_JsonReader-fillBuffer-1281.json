{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonReader.java",
  "functionName": "fillBuffer",
  "functionId": "fillBuffer___minimum-int",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
  "functionAnnotation": "",
  "functionDoc": "Returns true once {@code limit - pos \u003e\u003d minimum}. If the data is\nexhausted before that many characters are available, this returns\nfalse.\n",
  "functionStartLine": 1281,
  "functionEndLine": 1308,
  "numCommitsSeen": 53,
  "timeTaken": 2115,
  "changeHistory": [
    "8daf3aaeb4fd072d45df334dd8a6009be734c180",
    "46b73632b0f7591ef1328ee7ddd1e883916fec1e",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13",
    "46b4346505d85885f2dee28b24d4d2d15190564e"
  ],
  "changeHistoryShort": {
    "8daf3aaeb4fd072d45df334dd8a6009be734c180": "Ybodychange",
    "46b73632b0f7591ef1328ee7ddd1e883916fec1e": "Ybodychange",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": "Yfilerename",
    "46b4346505d85885f2dee28b24d4d2d15190564e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8daf3aaeb4fd072d45df334dd8a6009be734c180": {
      "type": "Ybodychange",
      "commitMessage": "Inline position computation. This is uglier but faster.\n",
      "commitDate": "8/27/12, 8:52 PM",
      "commitName": "8daf3aaeb4fd072d45df334dd8a6009be734c180",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/27/12, 6:48 PM",
      "commitNameOld": "46b73632b0f7591ef1328ee7ddd1e883916fec1e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean fillBuffer(int minimum) throws IOException {\n    char[] buffer \u003d this.buffer;\n    lineStart -\u003d pos;\n    if (limit !\u003d pos) {\n        limit -\u003d pos;\n        System.arraycopy(buffer, pos, buffer, 0, limit);\n    } else {\n        limit \u003d 0;\n    }\n    pos \u003d 0;\n    int total;\n    while ((total \u003d in.read(buffer, limit, buffer.length - limit)) !\u003d -1) {\n        limit +\u003d total;\n        if (lineNumber \u003d\u003d 0 \u0026\u0026 lineStart \u003d\u003d 0 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n            pos++;\n            lineStart++;\n            minimum++;\n        }\n        if (limit \u003e\u003d minimum) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 1225,
      "functionName": "fillBuffer",
      "functionAnnotation": "",
      "functionDoc": "Returns true once {@code limit - pos \u003e\u003d minimum}. If the data is\nexhausted before that many characters are available, this returns\nfalse.\n",
      "diff": "@@ -1,35 +1,24 @@\n private boolean fillBuffer(int minimum) throws IOException {\n     char[] buffer \u003d this.buffer;\n-    int line \u003d bufferStartLine;\n-    int column \u003d bufferStartColumn;\n-    for (int i \u003d 0, p \u003d pos; i \u003c p; i++) {\n-        if (buffer[i] \u003d\u003d \u0027\\n\u0027) {\n-            line++;\n-            column \u003d 1;\n-        } else {\n-            column++;\n-        }\n-    }\n-    bufferStartLine \u003d line;\n-    bufferStartColumn \u003d column;\n+    lineStart -\u003d pos;\n     if (limit !\u003d pos) {\n         limit -\u003d pos;\n         System.arraycopy(buffer, pos, buffer, 0, limit);\n     } else {\n         limit \u003d 0;\n     }\n     pos \u003d 0;\n     int total;\n     while ((total \u003d in.read(buffer, limit, buffer.length - limit)) !\u003d -1) {\n         limit +\u003d total;\n-        if (bufferStartLine \u003d\u003d 1 \u0026\u0026 bufferStartColumn \u003d\u003d 1 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n+        if (lineNumber \u003d\u003d 0 \u0026\u0026 lineStart \u003d\u003d 0 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n             pos++;\n-            bufferStartColumn--;\n+            lineStart++;\n             minimum++;\n         }\n         if (limit \u003e\u003d minimum) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "46b73632b0f7591ef1328ee7ddd1e883916fec1e": {
      "type": "Ybodychange",
      "commitMessage": "Fix a bug where we weren\u0027t reading enough characters when a BOM was encountered.\n",
      "commitDate": "8/27/12, 6:48 PM",
      "commitName": "46b73632b0f7591ef1328ee7ddd1e883916fec1e",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 9:42 PM",
      "commitNameOld": "980796005ff96f88a009822eebaba3eb8339051e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.88,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean fillBuffer(int minimum) throws IOException {\n    char[] buffer \u003d this.buffer;\n    int line \u003d bufferStartLine;\n    int column \u003d bufferStartColumn;\n    for (int i \u003d 0, p \u003d pos; i \u003c p; i++) {\n        if (buffer[i] \u003d\u003d \u0027\\n\u0027) {\n            line++;\n            column \u003d 1;\n        } else {\n            column++;\n        }\n    }\n    bufferStartLine \u003d line;\n    bufferStartColumn \u003d column;\n    if (limit !\u003d pos) {\n        limit -\u003d pos;\n        System.arraycopy(buffer, pos, buffer, 0, limit);\n    } else {\n        limit \u003d 0;\n    }\n    pos \u003d 0;\n    int total;\n    while ((total \u003d in.read(buffer, limit, buffer.length - limit)) !\u003d -1) {\n        limit +\u003d total;\n        if (bufferStartLine \u003d\u003d 1 \u0026\u0026 bufferStartColumn \u003d\u003d 1 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n            pos++;\n            bufferStartColumn--;\n            minimum++;\n        }\n        if (limit \u003e\u003d minimum) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 1222,
      "functionName": "fillBuffer",
      "functionAnnotation": "",
      "functionDoc": "Returns true once {@code limit - pos \u003e\u003d minimum}. If the data is\nexhausted before that many characters are available, this returns\nfalse.\n",
      "diff": "@@ -1,34 +1,35 @@\n private boolean fillBuffer(int minimum) throws IOException {\n     char[] buffer \u003d this.buffer;\n     int line \u003d bufferStartLine;\n     int column \u003d bufferStartColumn;\n     for (int i \u003d 0, p \u003d pos; i \u003c p; i++) {\n         if (buffer[i] \u003d\u003d \u0027\\n\u0027) {\n             line++;\n             column \u003d 1;\n         } else {\n             column++;\n         }\n     }\n     bufferStartLine \u003d line;\n     bufferStartColumn \u003d column;\n     if (limit !\u003d pos) {\n         limit -\u003d pos;\n         System.arraycopy(buffer, pos, buffer, 0, limit);\n     } else {\n         limit \u003d 0;\n     }\n     pos \u003d 0;\n     int total;\n     while ((total \u003d in.read(buffer, limit, buffer.length - limit)) !\u003d -1) {\n         limit +\u003d total;\n         if (bufferStartLine \u003d\u003d 1 \u0026\u0026 bufferStartColumn \u003d\u003d 1 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n             pos++;\n             bufferStartColumn--;\n+            minimum++;\n         }\n         if (limit \u003e\u003d minimum) {\n             return true;\n         }\n     }\n     return false;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": {
      "type": "Yfilerename",
      "commitMessage": "Promote JsonReader2 to be the main JsonReader implementation.\n",
      "commitDate": "8/26/12, 12:34 PM",
      "commitName": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 12:33 PM",
      "commitNameOld": "553fa6b742ef6c00f04465c401c7cc464a6f9ea0",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean fillBuffer(int minimum) throws IOException {\n    char[] buffer \u003d this.buffer;\n    int line \u003d bufferStartLine;\n    int column \u003d bufferStartColumn;\n    for (int i \u003d 0, p \u003d pos; i \u003c p; i++) {\n        if (buffer[i] \u003d\u003d \u0027\\n\u0027) {\n            line++;\n            column \u003d 1;\n        } else {\n            column++;\n        }\n    }\n    bufferStartLine \u003d line;\n    bufferStartColumn \u003d column;\n    if (limit !\u003d pos) {\n        limit -\u003d pos;\n        System.arraycopy(buffer, pos, buffer, 0, limit);\n    } else {\n        limit \u003d 0;\n    }\n    pos \u003d 0;\n    int total;\n    while ((total \u003d in.read(buffer, limit, buffer.length - limit)) !\u003d -1) {\n        limit +\u003d total;\n        if (bufferStartLine \u003d\u003d 1 \u0026\u0026 bufferStartColumn \u003d\u003d 1 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n            pos++;\n            bufferStartColumn--;\n        }\n        if (limit \u003e\u003d minimum) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 1152,
      "functionName": "fillBuffer",
      "functionAnnotation": "",
      "functionDoc": "Returns true once {@code limit - pos \u003e\u003d minimum}. If the data is\nexhausted before that many characters are available, this returns\nfalse.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
        "newPath": "gson/src/main/java/com/google/gson/stream/JsonReader.java"
      }
    },
    "46b4346505d85885f2dee28b24d4d2d15190564e": {
      "type": "Yintroduced",
      "commitMessage": "Get JsonReader2 to the point that it\u0027s passing most tests.\n\nStill missing: \n - non-execute prefixes\n - rolling back \u0027pos\u0027 when a double fails to parse\n - octal prefix failures\n",
      "commitDate": "8/25/12, 9:02 PM",
      "commitName": "46b4346505d85885f2dee28b24d4d2d15190564e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,34 @@\n+private boolean fillBuffer(int minimum) throws IOException {\n+    char[] buffer \u003d this.buffer;\n+    int line \u003d bufferStartLine;\n+    int column \u003d bufferStartColumn;\n+    for (int i \u003d 0, p \u003d pos; i \u003c p; i++) {\n+        if (buffer[i] \u003d\u003d \u0027\\n\u0027) {\n+            line++;\n+            column \u003d 1;\n+        } else {\n+            column++;\n+        }\n+    }\n+    bufferStartLine \u003d line;\n+    bufferStartColumn \u003d column;\n+    if (limit !\u003d pos) {\n+        limit -\u003d pos;\n+        System.arraycopy(buffer, pos, buffer, 0, limit);\n+    } else {\n+        limit \u003d 0;\n+    }\n+    pos \u003d 0;\n+    int total;\n+    while ((total \u003d in.read(buffer, limit, buffer.length - limit)) !\u003d -1) {\n+        limit +\u003d total;\n+        if (bufferStartLine \u003d\u003d 1 \u0026\u0026 bufferStartColumn \u003d\u003d 1 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n+            pos++;\n+            bufferStartColumn--;\n+        }\n+        if (limit \u003e\u003d minimum) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean fillBuffer(int minimum) throws IOException {\n    char[] buffer \u003d this.buffer;\n    int line \u003d bufferStartLine;\n    int column \u003d bufferStartColumn;\n    for (int i \u003d 0, p \u003d pos; i \u003c p; i++) {\n        if (buffer[i] \u003d\u003d \u0027\\n\u0027) {\n            line++;\n            column \u003d 1;\n        } else {\n            column++;\n        }\n    }\n    bufferStartLine \u003d line;\n    bufferStartColumn \u003d column;\n    if (limit !\u003d pos) {\n        limit -\u003d pos;\n        System.arraycopy(buffer, pos, buffer, 0, limit);\n    } else {\n        limit \u003d 0;\n    }\n    pos \u003d 0;\n    int total;\n    while ((total \u003d in.read(buffer, limit, buffer.length - limit)) !\u003d -1) {\n        limit +\u003d total;\n        if (bufferStartLine \u003d\u003d 1 \u0026\u0026 bufferStartColumn \u003d\u003d 1 \u0026\u0026 limit \u003e 0 \u0026\u0026 buffer[0] \u003d\u003d \u0027\\ufeff\u0027) {\n            pos++;\n            bufferStartColumn--;\n        }\n        if (limit \u003e\u003d minimum) {\n            return true;\n        }\n    }\n    return false;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
      "functionStartLine": 1144,
      "functionName": "fillBuffer",
      "functionAnnotation": "",
      "functionDoc": "Returns true once {@code limit - pos \u003e\u003d minimum}. If the data is\nexhausted before that many characters are available, this returns\nfalse.\n"
    }
  }
}