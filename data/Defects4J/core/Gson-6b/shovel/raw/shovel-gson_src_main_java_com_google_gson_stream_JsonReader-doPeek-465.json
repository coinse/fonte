{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonReader.java",
  "functionName": "doPeek",
  "functionId": "doPeek",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 465,
  "functionEndLine": 599,
  "numCommitsSeen": 53,
  "timeTaken": 2167,
  "changeHistory": [
    "c8627c8ab831dec86eeb52fc02600b22c81ba858",
    "7a1c94f9863bfc6915eaa56236dcef46876d4674",
    "085856c12843a6b58d6de59672d37da47afdaa72",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13",
    "b96d2d983793ee6c70f059936cf95f325519ca7a",
    "46b4346505d85885f2dee28b24d4d2d15190564e"
  ],
  "changeHistoryShort": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": "Ybodychange",
    "7a1c94f9863bfc6915eaa56236dcef46876d4674": "Ymodifierchange",
    "085856c12843a6b58d6de59672d37da47afdaa72": "Ybodychange",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": "Yfilerename",
    "b96d2d983793ee6c70f059936cf95f325519ca7a": "Ybodychange",
    "46b4346505d85885f2dee28b24d4d2d15190564e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c8627c8ab831dec86eeb52fc02600b22c81ba858": {
      "type": "Ybodychange",
      "commitMessage": "Update reader and writer for RFC 7159.\n",
      "commitDate": "1/18/16, 12:07 PM",
      "commitName": "c8627c8ab831dec86eeb52fc02600b22c81ba858",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "1/18/16, 9:08 AM",
      "commitNameOld": "3360c93a76a74d1182b912052973e08ffa868b43",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "int doPeek() throws IOException {\n    int peekStack \u003d stack[stackSize - 1];\n    if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027]\u0027:\n                return peeked \u003d PEEKED_END_ARRAY;\n            case \u0027;\u0027:\n                checkLenient();\n            case \u0027,\u0027:\n                break;\n            default:\n                throw syntaxError(\"Unterminated array\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n        stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n        if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n            int c \u003d nextNonWhitespace(true);\n            switch(c) {\n                case \u0027}\u0027:\n                    return peeked \u003d PEEKED_END_OBJECT;\n                case \u0027;\u0027:\n                    checkLenient();\n                case \u0027,\u0027:\n                    break;\n                default:\n                    throw syntaxError(\"Unterminated object\");\n            }\n        }\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027\"\u0027:\n                return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n            case \u0027\\\u0027\u0027:\n                checkLenient();\n                return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n            case \u0027}\u0027:\n                if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                    return peeked \u003d PEEKED_END_OBJECT;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n            default:\n                checkLenient();\n                pos--;\n                if (isLiteral((char) c)) {\n                    return peeked \u003d PEEKED_UNQUOTED_NAME;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n        }\n    } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027:\u0027:\n                break;\n            case \u0027\u003d\u0027:\n                checkLenient();\n                if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                    pos++;\n                }\n                break;\n            default:\n                throw syntaxError(\"Expected \u0027:\u0027\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n        if (lenient) {\n            consumeNonExecutePrefix();\n        }\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n        int c \u003d nextNonWhitespace(false);\n        if (c \u003d\u003d -1) {\n            return peeked \u003d PEEKED_EOF;\n        } else {\n            checkLenient();\n            pos--;\n        }\n    } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n        throw new IllegalStateException(\"JsonReader is closed\");\n    }\n    int c \u003d nextNonWhitespace(true);\n    switch(c) {\n        case \u0027]\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                return peeked \u003d PEEKED_END_ARRAY;\n            }\n        case \u0027;\u0027:\n        case \u0027,\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                checkLenient();\n                pos--;\n                return peeked \u003d PEEKED_NULL;\n            } else {\n                throw syntaxError(\"Unexpected value\");\n            }\n        case \u0027\\\u0027\u0027:\n            checkLenient();\n            return peeked \u003d PEEKED_SINGLE_QUOTED;\n        case \u0027\"\u0027:\n            return peeked \u003d PEEKED_DOUBLE_QUOTED;\n        case \u0027[\u0027:\n            return peeked \u003d PEEKED_BEGIN_ARRAY;\n        case \u0027{\u0027:\n            return peeked \u003d PEEKED_BEGIN_OBJECT;\n        default:\n            pos--;\n    }\n    int result \u003d peekKeyword();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    result \u003d peekNumber();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked \u003d PEEKED_UNQUOTED;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 465,
      "functionName": "doPeek",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,131 +1,125 @@\n int doPeek() throws IOException {\n     int peekStack \u003d stack[stackSize - 1];\n     if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n     } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027]\u0027:\n                 return peeked \u003d PEEKED_END_ARRAY;\n             case \u0027;\u0027:\n                 checkLenient();\n             case \u0027,\u0027:\n                 break;\n             default:\n                 throw syntaxError(\"Unterminated array\");\n         }\n     } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n         stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n         if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n             int c \u003d nextNonWhitespace(true);\n             switch(c) {\n                 case \u0027}\u0027:\n                     return peeked \u003d PEEKED_END_OBJECT;\n                 case \u0027;\u0027:\n                     checkLenient();\n                 case \u0027,\u0027:\n                     break;\n                 default:\n                     throw syntaxError(\"Unterminated object\");\n             }\n         }\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027\"\u0027:\n                 return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n             case \u0027\\\u0027\u0027:\n                 checkLenient();\n                 return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n             case \u0027}\u0027:\n                 if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                     return peeked \u003d PEEKED_END_OBJECT;\n                 } else {\n                     throw syntaxError(\"Expected name\");\n                 }\n             default:\n                 checkLenient();\n                 pos--;\n                 if (isLiteral((char) c)) {\n                     return peeked \u003d PEEKED_UNQUOTED_NAME;\n                 } else {\n                     throw syntaxError(\"Expected name\");\n                 }\n         }\n     } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027:\u0027:\n                 break;\n             case \u0027\u003d\u0027:\n                 checkLenient();\n                 if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                     pos++;\n                 }\n                 break;\n             default:\n                 throw syntaxError(\"Expected \u0027:\u0027\");\n         }\n     } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n         if (lenient) {\n             consumeNonExecutePrefix();\n         }\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n     } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n         int c \u003d nextNonWhitespace(false);\n         if (c \u003d\u003d -1) {\n             return peeked \u003d PEEKED_EOF;\n         } else {\n             checkLenient();\n             pos--;\n         }\n     } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n         throw new IllegalStateException(\"JsonReader is closed\");\n     }\n     int c \u003d nextNonWhitespace(true);\n     switch(c) {\n         case \u0027]\u0027:\n             if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                 return peeked \u003d PEEKED_END_ARRAY;\n             }\n         case \u0027;\u0027:\n         case \u0027,\u0027:\n             if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                 checkLenient();\n                 pos--;\n                 return peeked \u003d PEEKED_NULL;\n             } else {\n                 throw syntaxError(\"Unexpected value\");\n             }\n         case \u0027\\\u0027\u0027:\n             checkLenient();\n             return peeked \u003d PEEKED_SINGLE_QUOTED;\n         case \u0027\"\u0027:\n-            if (stackSize \u003d\u003d 1) {\n-                checkLenient();\n-            }\n             return peeked \u003d PEEKED_DOUBLE_QUOTED;\n         case \u0027[\u0027:\n             return peeked \u003d PEEKED_BEGIN_ARRAY;\n         case \u0027{\u0027:\n             return peeked \u003d PEEKED_BEGIN_OBJECT;\n         default:\n             pos--;\n     }\n-    if (stackSize \u003d\u003d 1) {\n-        checkLenient();\n-    }\n     int result \u003d peekKeyword();\n     if (result !\u003d PEEKED_NONE) {\n         return result;\n     }\n     result \u003d peekNumber();\n     if (result !\u003d PEEKED_NONE) {\n         return result;\n     }\n     if (!isLiteral(buffer[pos])) {\n         throw syntaxError(\"Expected value\");\n     }\n     checkLenient();\n     return peeked \u003d PEEKED_UNQUOTED;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7a1c94f9863bfc6915eaa56236dcef46876d4674": {
      "type": "Ymodifierchange",
      "commitMessage": "Remove synthetic accessors from being generated.\n",
      "commitDate": "12/26/15, 10:39 PM",
      "commitName": "7a1c94f9863bfc6915eaa56236dcef46876d4674",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "11/10/14, 5:59 PM",
      "commitNameOld": "d6c8c1e3cf6749258e3f98d2bc03c973385e31a7",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 411.19,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "actualSource": "int doPeek() throws IOException {\n    int peekStack \u003d stack[stackSize - 1];\n    if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027]\u0027:\n                return peeked \u003d PEEKED_END_ARRAY;\n            case \u0027;\u0027:\n                checkLenient();\n            case \u0027,\u0027:\n                break;\n            default:\n                throw syntaxError(\"Unterminated array\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n        stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n        if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n            int c \u003d nextNonWhitespace(true);\n            switch(c) {\n                case \u0027}\u0027:\n                    return peeked \u003d PEEKED_END_OBJECT;\n                case \u0027;\u0027:\n                    checkLenient();\n                case \u0027,\u0027:\n                    break;\n                default:\n                    throw syntaxError(\"Unterminated object\");\n            }\n        }\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027\"\u0027:\n                return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n            case \u0027\\\u0027\u0027:\n                checkLenient();\n                return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n            case \u0027}\u0027:\n                if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                    return peeked \u003d PEEKED_END_OBJECT;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n            default:\n                checkLenient();\n                pos--;\n                if (isLiteral((char) c)) {\n                    return peeked \u003d PEEKED_UNQUOTED_NAME;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n        }\n    } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027:\u0027:\n                break;\n            case \u0027\u003d\u0027:\n                checkLenient();\n                if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                    pos++;\n                }\n                break;\n            default:\n                throw syntaxError(\"Expected \u0027:\u0027\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n        if (lenient) {\n            consumeNonExecutePrefix();\n        }\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n        int c \u003d nextNonWhitespace(false);\n        if (c \u003d\u003d -1) {\n            return peeked \u003d PEEKED_EOF;\n        } else {\n            checkLenient();\n            pos--;\n        }\n    } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n        throw new IllegalStateException(\"JsonReader is closed\");\n    }\n    int c \u003d nextNonWhitespace(true);\n    switch(c) {\n        case \u0027]\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                return peeked \u003d PEEKED_END_ARRAY;\n            }\n        case \u0027;\u0027:\n        case \u0027,\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                checkLenient();\n                pos--;\n                return peeked \u003d PEEKED_NULL;\n            } else {\n                throw syntaxError(\"Unexpected value\");\n            }\n        case \u0027\\\u0027\u0027:\n            checkLenient();\n            return peeked \u003d PEEKED_SINGLE_QUOTED;\n        case \u0027\"\u0027:\n            if (stackSize \u003d\u003d 1) {\n                checkLenient();\n            }\n            return peeked \u003d PEEKED_DOUBLE_QUOTED;\n        case \u0027[\u0027:\n            return peeked \u003d PEEKED_BEGIN_ARRAY;\n        case \u0027{\u0027:\n            return peeked \u003d PEEKED_BEGIN_OBJECT;\n        default:\n            pos--;\n    }\n    if (stackSize \u003d\u003d 1) {\n        checkLenient();\n    }\n    int result \u003d peekKeyword();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    result \u003d peekNumber();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked \u003d PEEKED_UNQUOTED;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 465,
      "functionName": "doPeek",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,131 +1,131 @@\n-private int doPeek() throws IOException {\n+int doPeek() throws IOException {\n     int peekStack \u003d stack[stackSize - 1];\n     if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n     } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027]\u0027:\n                 return peeked \u003d PEEKED_END_ARRAY;\n             case \u0027;\u0027:\n                 checkLenient();\n             case \u0027,\u0027:\n                 break;\n             default:\n                 throw syntaxError(\"Unterminated array\");\n         }\n     } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n         stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n         if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n             int c \u003d nextNonWhitespace(true);\n             switch(c) {\n                 case \u0027}\u0027:\n                     return peeked \u003d PEEKED_END_OBJECT;\n                 case \u0027;\u0027:\n                     checkLenient();\n                 case \u0027,\u0027:\n                     break;\n                 default:\n                     throw syntaxError(\"Unterminated object\");\n             }\n         }\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027\"\u0027:\n                 return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n             case \u0027\\\u0027\u0027:\n                 checkLenient();\n                 return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n             case \u0027}\u0027:\n                 if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                     return peeked \u003d PEEKED_END_OBJECT;\n                 } else {\n                     throw syntaxError(\"Expected name\");\n                 }\n             default:\n                 checkLenient();\n                 pos--;\n                 if (isLiteral((char) c)) {\n                     return peeked \u003d PEEKED_UNQUOTED_NAME;\n                 } else {\n                     throw syntaxError(\"Expected name\");\n                 }\n         }\n     } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027:\u0027:\n                 break;\n             case \u0027\u003d\u0027:\n                 checkLenient();\n                 if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                     pos++;\n                 }\n                 break;\n             default:\n                 throw syntaxError(\"Expected \u0027:\u0027\");\n         }\n     } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n         if (lenient) {\n             consumeNonExecutePrefix();\n         }\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n     } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n         int c \u003d nextNonWhitespace(false);\n         if (c \u003d\u003d -1) {\n             return peeked \u003d PEEKED_EOF;\n         } else {\n             checkLenient();\n             pos--;\n         }\n     } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n         throw new IllegalStateException(\"JsonReader is closed\");\n     }\n     int c \u003d nextNonWhitespace(true);\n     switch(c) {\n         case \u0027]\u0027:\n             if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                 return peeked \u003d PEEKED_END_ARRAY;\n             }\n         case \u0027;\u0027:\n         case \u0027,\u0027:\n             if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                 checkLenient();\n                 pos--;\n                 return peeked \u003d PEEKED_NULL;\n             } else {\n                 throw syntaxError(\"Unexpected value\");\n             }\n         case \u0027\\\u0027\u0027:\n             checkLenient();\n             return peeked \u003d PEEKED_SINGLE_QUOTED;\n         case \u0027\"\u0027:\n             if (stackSize \u003d\u003d 1) {\n                 checkLenient();\n             }\n             return peeked \u003d PEEKED_DOUBLE_QUOTED;\n         case \u0027[\u0027:\n             return peeked \u003d PEEKED_BEGIN_ARRAY;\n         case \u0027{\u0027:\n             return peeked \u003d PEEKED_BEGIN_OBJECT;\n         default:\n             pos--;\n     }\n     if (stackSize \u003d\u003d 1) {\n         checkLenient();\n     }\n     int result \u003d peekKeyword();\n     if (result !\u003d PEEKED_NONE) {\n         return result;\n     }\n     result \u003d peekNumber();\n     if (result !\u003d PEEKED_NONE) {\n         return result;\n     }\n     if (!isLiteral(buffer[pos])) {\n         throw syntaxError(\"Expected value\");\n     }\n     checkLenient();\n     return peeked \u003d PEEKED_UNQUOTED;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "085856c12843a6b58d6de59672d37da47afdaa72": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t leave the JsonReader in an invalid state if nextInt(), nextDouble() or nextLong() fails. We now save a reference to the string before we parse it, and keep that referenced value if parsing fails.\n",
      "commitDate": "8/26/12, 3:06 PM",
      "commitName": "085856c12843a6b58d6de59672d37da47afdaa72",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 12:34 PM",
      "commitNameOld": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private int doPeek() throws IOException {\n    int peekStack \u003d stack[stackSize - 1];\n    if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027]\u0027:\n                return peeked \u003d PEEKED_END_ARRAY;\n            case \u0027;\u0027:\n                checkLenient();\n            case \u0027,\u0027:\n                break;\n            default:\n                throw syntaxError(\"Unterminated array\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n        stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n        if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n            int c \u003d nextNonWhitespace(true);\n            switch(c) {\n                case \u0027}\u0027:\n                    return peeked \u003d PEEKED_END_OBJECT;\n                case \u0027;\u0027:\n                    checkLenient();\n                case \u0027,\u0027:\n                    break;\n                default:\n                    throw syntaxError(\"Unterminated object\");\n            }\n        }\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027\"\u0027:\n                return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n            case \u0027\\\u0027\u0027:\n                checkLenient();\n                return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n            case \u0027}\u0027:\n                if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                    return peeked \u003d PEEKED_END_OBJECT;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n            default:\n                checkLenient();\n                pos--;\n                if (isLiteral((char) c)) {\n                    return peeked \u003d PEEKED_UNQUOTED_NAME;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n        }\n    } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027:\u0027:\n                break;\n            case \u0027\u003d\u0027:\n                checkLenient();\n                if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                    pos++;\n                }\n                break;\n            default:\n                throw syntaxError(\"Expected \u0027:\u0027\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n        if (lenient) {\n            consumeNonExecutePrefix();\n        }\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n        int c \u003d nextNonWhitespace(false);\n        if (c \u003d\u003d -1) {\n            return peeked \u003d PEEKED_EOF;\n        } else {\n            checkLenient();\n            pos--;\n        }\n    } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n        throw new IllegalStateException(\"JsonReader is closed\");\n    }\n    int c \u003d nextNonWhitespace(true);\n    switch(c) {\n        case \u0027]\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                return peeked \u003d PEEKED_END_ARRAY;\n            }\n        case \u0027;\u0027:\n        case \u0027,\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                checkLenient();\n                pos--;\n                return peeked \u003d PEEKED_NULL;\n            } else {\n                throw syntaxError(\"Unexpected value\");\n            }\n        case \u0027\\\u0027\u0027:\n            checkLenient();\n            return peeked \u003d PEEKED_SINGLE_QUOTED;\n        case \u0027\"\u0027:\n            if (stackSize \u003d\u003d 1) {\n                checkLenient();\n            }\n            return peeked \u003d PEEKED_DOUBLE_QUOTED;\n        case \u0027[\u0027:\n            return peeked \u003d PEEKED_BEGIN_ARRAY;\n        case \u0027{\u0027:\n            return peeked \u003d PEEKED_BEGIN_OBJECT;\n        default:\n            pos--;\n    }\n    if (stackSize \u003d\u003d 1) {\n        checkLenient();\n    }\n    int result \u003d peekKeyword();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    result \u003d peekNumber();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked \u003d PEEKED_UNQUOTED;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 435,
      "functionName": "doPeek",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": {
      "type": "Yfilerename",
      "commitMessage": "Promote JsonReader2 to be the main JsonReader implementation.\n",
      "commitDate": "8/26/12, 12:34 PM",
      "commitName": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 12:33 PM",
      "commitNameOld": "553fa6b742ef6c00f04465c401c7cc464a6f9ea0",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private int doPeek() throws IOException {\n    int peekStack \u003d stack[stackSize - 1];\n    if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027]\u0027:\n                return peeked \u003d PEEKED_END_ARRAY;\n            case \u0027;\u0027:\n                checkLenient();\n            case \u0027,\u0027:\n                break;\n            default:\n                throw syntaxError(\"Unterminated array\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n        stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n        if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n            int c \u003d nextNonWhitespace(true);\n            switch(c) {\n                case \u0027}\u0027:\n                    return peeked \u003d PEEKED_END_OBJECT;\n                case \u0027;\u0027:\n                    checkLenient();\n                case \u0027,\u0027:\n                    break;\n                default:\n                    throw syntaxError(\"Unterminated object\");\n            }\n        }\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027\"\u0027:\n                return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n            case \u0027\\\u0027\u0027:\n                checkLenient();\n                return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n            case \u0027}\u0027:\n                if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                    return peeked \u003d PEEKED_END_OBJECT;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n            default:\n                checkLenient();\n                pos--;\n                if (isLiteral((char) c)) {\n                    return peeked \u003d PEEKED_UNQUOTED_NAME;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n        }\n    } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027:\u0027:\n                break;\n            case \u0027\u003d\u0027:\n                checkLenient();\n                if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                    pos++;\n                }\n                break;\n            default:\n                throw syntaxError(\"Expected \u0027:\u0027\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n        if (lenient) {\n            consumeNonExecutePrefix();\n        }\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n        int c \u003d nextNonWhitespace(false);\n        if (c \u003d\u003d -1) {\n            return peeked \u003d PEEKED_EOF;\n        } else {\n            checkLenient();\n            pos--;\n        }\n    } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n        throw new IllegalStateException(\"JsonReader is closed\");\n    }\n    int c \u003d nextNonWhitespace(true);\n    switch(c) {\n        case \u0027]\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                return peeked \u003d PEEKED_END_ARRAY;\n            }\n        case \u0027;\u0027:\n        case \u0027,\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                checkLenient();\n                pos--;\n                return peeked \u003d PEEKED_NULL;\n            } else {\n                throw syntaxError(\"Unexpected value\");\n            }\n        case \u0027\\\u0027\u0027:\n            checkLenient();\n            return peeked \u003d PEEKED_SINGLE_QUOTED;\n        case \u0027\"\u0027:\n            if (stackSize \u003d\u003d 1) {\n                checkLenient();\n            }\n            return peeked \u003d PEEKED_DOUBLE_QUOTED;\n        case \u0027[\u0027:\n            return peeked \u003d PEEKED_BEGIN_ARRAY;\n        case \u0027{\u0027:\n            return peeked \u003d PEEKED_BEGIN_OBJECT;\n        default:\n            pos--;\n    }\n    if (stackSize \u003d\u003d 1) {\n        checkLenient();\n    }\n    int result \u003d peekKeyword();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    result \u003d peekNumber();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked \u003d PEEKED_UNQUOTED;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 431,
      "functionName": "doPeek",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
        "newPath": "gson/src/main/java/com/google/gson/stream/JsonReader.java"
      }
    },
    "b96d2d983793ee6c70f059936cf95f325519ca7a": {
      "type": "Ybodychange",
      "commitMessage": "Support non-execute prefixes.\n",
      "commitDate": "8/26/12, 12:31 PM",
      "commitName": "b96d2d983793ee6c70f059936cf95f325519ca7a",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/25/12, 9:02 PM",
      "commitNameOld": "46b4346505d85885f2dee28b24d4d2d15190564e",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private int doPeek() throws IOException {\n    int peekStack \u003d stack[stackSize - 1];\n    if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027]\u0027:\n                return peeked \u003d PEEKED_END_ARRAY;\n            case \u0027;\u0027:\n                checkLenient();\n            case \u0027,\u0027:\n                break;\n            default:\n                throw syntaxError(\"Unterminated array\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n        stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n        if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n            int c \u003d nextNonWhitespace(true);\n            switch(c) {\n                case \u0027}\u0027:\n                    return peeked \u003d PEEKED_END_OBJECT;\n                case \u0027;\u0027:\n                    checkLenient();\n                case \u0027,\u0027:\n                    break;\n                default:\n                    throw syntaxError(\"Unterminated object\");\n            }\n        }\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027\"\u0027:\n                return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n            case \u0027\\\u0027\u0027:\n                checkLenient();\n                return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n            case \u0027}\u0027:\n                if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                    return peeked \u003d PEEKED_END_OBJECT;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n            default:\n                checkLenient();\n                pos--;\n                if (isLiteral((char) c)) {\n                    return peeked \u003d PEEKED_UNQUOTED_NAME;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n        }\n    } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027:\u0027:\n                break;\n            case \u0027\u003d\u0027:\n                checkLenient();\n                if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                    pos++;\n                }\n                break;\n            default:\n                throw syntaxError(\"Expected \u0027:\u0027\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n        if (lenient) {\n            consumeNonExecutePrefix();\n        }\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n        int c \u003d nextNonWhitespace(false);\n        if (c \u003d\u003d -1) {\n            return peeked \u003d PEEKED_EOF;\n        } else {\n            checkLenient();\n            pos--;\n        }\n    } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n        throw new IllegalStateException(\"JsonReader is closed\");\n    }\n    int c \u003d nextNonWhitespace(true);\n    switch(c) {\n        case \u0027]\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                return peeked \u003d PEEKED_END_ARRAY;\n            }\n        case \u0027;\u0027:\n        case \u0027,\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                checkLenient();\n                pos--;\n                return peeked \u003d PEEKED_NULL;\n            } else {\n                throw syntaxError(\"Unexpected value\");\n            }\n        case \u0027\\\u0027\u0027:\n            checkLenient();\n            return peeked \u003d PEEKED_SINGLE_QUOTED;\n        case \u0027\"\u0027:\n            if (stackSize \u003d\u003d 1) {\n                checkLenient();\n            }\n            return peeked \u003d PEEKED_DOUBLE_QUOTED;\n        case \u0027[\u0027:\n            return peeked \u003d PEEKED_BEGIN_ARRAY;\n        case \u0027{\u0027:\n            return peeked \u003d PEEKED_BEGIN_OBJECT;\n        default:\n            pos--;\n    }\n    if (stackSize \u003d\u003d 1) {\n        checkLenient();\n    }\n    int result \u003d peekKeyword();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    result \u003d peekNumber();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked \u003d PEEKED_UNQUOTED;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
      "functionStartLine": 431,
      "functionName": "doPeek",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,128 +1,131 @@\n private int doPeek() throws IOException {\n     int peekStack \u003d stack[stackSize - 1];\n     if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n     } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027]\u0027:\n                 return peeked \u003d PEEKED_END_ARRAY;\n             case \u0027;\u0027:\n                 checkLenient();\n             case \u0027,\u0027:\n                 break;\n             default:\n                 throw syntaxError(\"Unterminated array\");\n         }\n     } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n         stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n         if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n             int c \u003d nextNonWhitespace(true);\n             switch(c) {\n                 case \u0027}\u0027:\n                     return peeked \u003d PEEKED_END_OBJECT;\n                 case \u0027;\u0027:\n                     checkLenient();\n                 case \u0027,\u0027:\n                     break;\n                 default:\n                     throw syntaxError(\"Unterminated object\");\n             }\n         }\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027\"\u0027:\n                 return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n             case \u0027\\\u0027\u0027:\n                 checkLenient();\n                 return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n             case \u0027}\u0027:\n                 if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                     return peeked \u003d PEEKED_END_OBJECT;\n                 } else {\n                     throw syntaxError(\"Expected name\");\n                 }\n             default:\n                 checkLenient();\n                 pos--;\n                 if (isLiteral((char) c)) {\n                     return peeked \u003d PEEKED_UNQUOTED_NAME;\n                 } else {\n                     throw syntaxError(\"Expected name\");\n                 }\n         }\n     } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n         int c \u003d nextNonWhitespace(true);\n         switch(c) {\n             case \u0027:\u0027:\n                 break;\n             case \u0027\u003d\u0027:\n                 checkLenient();\n                 if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                     pos++;\n                 }\n                 break;\n             default:\n                 throw syntaxError(\"Expected \u0027:\u0027\");\n         }\n     } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n+        if (lenient) {\n+            consumeNonExecutePrefix();\n+        }\n         stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n     } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n         int c \u003d nextNonWhitespace(false);\n         if (c \u003d\u003d -1) {\n             return peeked \u003d PEEKED_EOF;\n         } else {\n             checkLenient();\n             pos--;\n         }\n     } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n         throw new IllegalStateException(\"JsonReader is closed\");\n     }\n     int c \u003d nextNonWhitespace(true);\n     switch(c) {\n         case \u0027]\u0027:\n             if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                 return peeked \u003d PEEKED_END_ARRAY;\n             }\n         case \u0027;\u0027:\n         case \u0027,\u0027:\n             if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                 checkLenient();\n                 pos--;\n                 return peeked \u003d PEEKED_NULL;\n             } else {\n                 throw syntaxError(\"Unexpected value\");\n             }\n         case \u0027\\\u0027\u0027:\n             checkLenient();\n             return peeked \u003d PEEKED_SINGLE_QUOTED;\n         case \u0027\"\u0027:\n             if (stackSize \u003d\u003d 1) {\n                 checkLenient();\n             }\n             return peeked \u003d PEEKED_DOUBLE_QUOTED;\n         case \u0027[\u0027:\n             return peeked \u003d PEEKED_BEGIN_ARRAY;\n         case \u0027{\u0027:\n             return peeked \u003d PEEKED_BEGIN_OBJECT;\n         default:\n             pos--;\n     }\n     if (stackSize \u003d\u003d 1) {\n         checkLenient();\n     }\n     int result \u003d peekKeyword();\n     if (result !\u003d PEEKED_NONE) {\n         return result;\n     }\n     result \u003d peekNumber();\n     if (result !\u003d PEEKED_NONE) {\n         return result;\n     }\n     if (!isLiteral(buffer[pos])) {\n         throw syntaxError(\"Expected value\");\n     }\n     checkLenient();\n     return peeked \u003d PEEKED_UNQUOTED;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "46b4346505d85885f2dee28b24d4d2d15190564e": {
      "type": "Yintroduced",
      "commitMessage": "Get JsonReader2 to the point that it\u0027s passing most tests.\n\nStill missing: \n - non-execute prefixes\n - rolling back \u0027pos\u0027 when a double fails to parse\n - octal prefix failures\n",
      "commitDate": "8/25/12, 9:02 PM",
      "commitName": "46b4346505d85885f2dee28b24d4d2d15190564e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,128 @@\n+private int doPeek() throws IOException {\n+    int peekStack \u003d stack[stackSize - 1];\n+    if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n+        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n+    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n+        int c \u003d nextNonWhitespace(true);\n+        switch(c) {\n+            case \u0027]\u0027:\n+                return peeked \u003d PEEKED_END_ARRAY;\n+            case \u0027;\u0027:\n+                checkLenient();\n+            case \u0027,\u0027:\n+                break;\n+            default:\n+                throw syntaxError(\"Unterminated array\");\n+        }\n+    } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n+        stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n+        if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n+            int c \u003d nextNonWhitespace(true);\n+            switch(c) {\n+                case \u0027}\u0027:\n+                    return peeked \u003d PEEKED_END_OBJECT;\n+                case \u0027;\u0027:\n+                    checkLenient();\n+                case \u0027,\u0027:\n+                    break;\n+                default:\n+                    throw syntaxError(\"Unterminated object\");\n+            }\n+        }\n+        int c \u003d nextNonWhitespace(true);\n+        switch(c) {\n+            case \u0027\"\u0027:\n+                return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n+            case \u0027\\\u0027\u0027:\n+                checkLenient();\n+                return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n+            case \u0027}\u0027:\n+                if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n+                    return peeked \u003d PEEKED_END_OBJECT;\n+                } else {\n+                    throw syntaxError(\"Expected name\");\n+                }\n+            default:\n+                checkLenient();\n+                pos--;\n+                if (isLiteral((char) c)) {\n+                    return peeked \u003d PEEKED_UNQUOTED_NAME;\n+                } else {\n+                    throw syntaxError(\"Expected name\");\n+                }\n+        }\n+    } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n+        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n+        int c \u003d nextNonWhitespace(true);\n+        switch(c) {\n+            case \u0027:\u0027:\n+                break;\n+            case \u0027\u003d\u0027:\n+                checkLenient();\n+                if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n+                    pos++;\n+                }\n+                break;\n+            default:\n+                throw syntaxError(\"Expected \u0027:\u0027\");\n+        }\n+    } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n+        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n+    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n+        int c \u003d nextNonWhitespace(false);\n+        if (c \u003d\u003d -1) {\n+            return peeked \u003d PEEKED_EOF;\n+        } else {\n+            checkLenient();\n+            pos--;\n+        }\n+    } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n+        throw new IllegalStateException(\"JsonReader is closed\");\n+    }\n+    int c \u003d nextNonWhitespace(true);\n+    switch(c) {\n+        case \u0027]\u0027:\n+            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n+                return peeked \u003d PEEKED_END_ARRAY;\n+            }\n+        case \u0027;\u0027:\n+        case \u0027,\u0027:\n+            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n+                checkLenient();\n+                pos--;\n+                return peeked \u003d PEEKED_NULL;\n+            } else {\n+                throw syntaxError(\"Unexpected value\");\n+            }\n+        case \u0027\\\u0027\u0027:\n+            checkLenient();\n+            return peeked \u003d PEEKED_SINGLE_QUOTED;\n+        case \u0027\"\u0027:\n+            if (stackSize \u003d\u003d 1) {\n+                checkLenient();\n+            }\n+            return peeked \u003d PEEKED_DOUBLE_QUOTED;\n+        case \u0027[\u0027:\n+            return peeked \u003d PEEKED_BEGIN_ARRAY;\n+        case \u0027{\u0027:\n+            return peeked \u003d PEEKED_BEGIN_OBJECT;\n+        default:\n+            pos--;\n+    }\n+    if (stackSize \u003d\u003d 1) {\n+        checkLenient();\n+    }\n+    int result \u003d peekKeyword();\n+    if (result !\u003d PEEKED_NONE) {\n+        return result;\n+    }\n+    result \u003d peekNumber();\n+    if (result !\u003d PEEKED_NONE) {\n+        return result;\n+    }\n+    if (!isLiteral(buffer[pos])) {\n+        throw syntaxError(\"Expected value\");\n+    }\n+    checkLenient();\n+    return peeked \u003d PEEKED_UNQUOTED;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private int doPeek() throws IOException {\n    int peekStack \u003d stack[stackSize - 1];\n    if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_ARRAY;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027]\u0027:\n                return peeked \u003d PEEKED_END_ARRAY;\n            case \u0027;\u0027:\n                checkLenient();\n            case \u0027,\u0027:\n                break;\n            default:\n                throw syntaxError(\"Unterminated array\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_OBJECT || peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n        stack[stackSize - 1] \u003d JsonScope.DANGLING_NAME;\n        if (peekStack \u003d\u003d JsonScope.NONEMPTY_OBJECT) {\n            int c \u003d nextNonWhitespace(true);\n            switch(c) {\n                case \u0027}\u0027:\n                    return peeked \u003d PEEKED_END_OBJECT;\n                case \u0027;\u0027:\n                    checkLenient();\n                case \u0027,\u0027:\n                    break;\n                default:\n                    throw syntaxError(\"Unterminated object\");\n            }\n        }\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027\"\u0027:\n                return peeked \u003d PEEKED_DOUBLE_QUOTED_NAME;\n            case \u0027\\\u0027\u0027:\n                checkLenient();\n                return peeked \u003d PEEKED_SINGLE_QUOTED_NAME;\n            case \u0027}\u0027:\n                if (peekStack !\u003d JsonScope.NONEMPTY_OBJECT) {\n                    return peeked \u003d PEEKED_END_OBJECT;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n            default:\n                checkLenient();\n                pos--;\n                if (isLiteral((char) c)) {\n                    return peeked \u003d PEEKED_UNQUOTED_NAME;\n                } else {\n                    throw syntaxError(\"Expected name\");\n                }\n        }\n    } else if (peekStack \u003d\u003d JsonScope.DANGLING_NAME) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_OBJECT;\n        int c \u003d nextNonWhitespace(true);\n        switch(c) {\n            case \u0027:\u0027:\n                break;\n            case \u0027\u003d\u0027:\n                checkLenient();\n                if ((pos \u003c limit || fillBuffer(1)) \u0026\u0026 buffer[pos] \u003d\u003d \u0027\u003e\u0027) {\n                    pos++;\n                }\n                break;\n            default:\n                throw syntaxError(\"Expected \u0027:\u0027\");\n        }\n    } else if (peekStack \u003d\u003d JsonScope.EMPTY_DOCUMENT) {\n        stack[stackSize - 1] \u003d JsonScope.NONEMPTY_DOCUMENT;\n    } else if (peekStack \u003d\u003d JsonScope.NONEMPTY_DOCUMENT) {\n        int c \u003d nextNonWhitespace(false);\n        if (c \u003d\u003d -1) {\n            return peeked \u003d PEEKED_EOF;\n        } else {\n            checkLenient();\n            pos--;\n        }\n    } else if (peekStack \u003d\u003d JsonScope.CLOSED) {\n        throw new IllegalStateException(\"JsonReader is closed\");\n    }\n    int c \u003d nextNonWhitespace(true);\n    switch(c) {\n        case \u0027]\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY) {\n                return peeked \u003d PEEKED_END_ARRAY;\n            }\n        case \u0027;\u0027:\n        case \u0027,\u0027:\n            if (peekStack \u003d\u003d JsonScope.EMPTY_ARRAY || peekStack \u003d\u003d JsonScope.NONEMPTY_ARRAY) {\n                checkLenient();\n                pos--;\n                return peeked \u003d PEEKED_NULL;\n            } else {\n                throw syntaxError(\"Unexpected value\");\n            }\n        case \u0027\\\u0027\u0027:\n            checkLenient();\n            return peeked \u003d PEEKED_SINGLE_QUOTED;\n        case \u0027\"\u0027:\n            if (stackSize \u003d\u003d 1) {\n                checkLenient();\n            }\n            return peeked \u003d PEEKED_DOUBLE_QUOTED;\n        case \u0027[\u0027:\n            return peeked \u003d PEEKED_BEGIN_ARRAY;\n        case \u0027{\u0027:\n            return peeked \u003d PEEKED_BEGIN_OBJECT;\n        default:\n            pos--;\n    }\n    if (stackSize \u003d\u003d 1) {\n        checkLenient();\n    }\n    int result \u003d peekKeyword();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    result \u003d peekNumber();\n    if (result !\u003d PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked \u003d PEEKED_UNQUOTED;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
      "functionStartLine": 426,
      "functionName": "doPeek",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}