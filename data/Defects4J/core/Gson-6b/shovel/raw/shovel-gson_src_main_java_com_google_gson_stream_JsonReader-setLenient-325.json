{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonReader.java",
  "functionName": "setLenient",
  "functionId": "setLenient___lenient-boolean",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
  "functionAnnotation": "",
  "functionDoc": "Configure this parser to be liberal in what it accepts. By default,\nthis parser is strict and only accepts JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the\nparser to lenient causes it to ignore the following syntax errors:\n\n\u003cul\u003e\n  \u003cli\u003eStreams that start with the \u003ca href\u003d\"#nonexecuteprefix\"\u003enon-execute\n      prefix\u003c/a\u003e, \u003ccode\u003e\")]}\u0027\\n\"\u003c/code\u003e.\n  \u003cli\u003eStreams that include multiple top-level values. With strict parsing,\n      each stream must contain exactly one top-level value.\n  \u003cli\u003eTop-level values of any type. With strict parsing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n  \u003cli\u003eEnd of line comments starting with {@code //} or {@code #} and\n      ending with a newline character.\n  \u003cli\u003eC-style comments starting with {@code /*} and ending with\n      {@code *}{@code /}. Such comments may not be nested.\n  \u003cli\u003eNames that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eStrings that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eArray elements separated by {@code ;} instead of {@code ,}.\n  \u003cli\u003eUnnecessary array separators. These are interpreted as if null\n      was the omitted value.\n  \u003cli\u003eNames and values separated by {@code \u003d} or {@code \u003d\u003e} instead of\n      {@code :}.\n  \u003cli\u003eName/value pairs separated by {@code ;} instead of {@code ,}.\n\u003c/ul\u003e\n",
  "functionStartLine": 325,
  "functionEndLine": 327,
  "numCommitsSeen": 53,
  "timeTaken": 2010,
  "changeHistory": [
    "3360c93a76a74d1182b912052973e08ffa868b43",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13",
    "46b4346505d85885f2dee28b24d4d2d15190564e"
  ],
  "changeHistoryShort": {
    "3360c93a76a74d1182b912052973e08ffa868b43": "Ydocchange",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": "Yfilerename",
    "46b4346505d85885f2dee28b24d4d2d15190564e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3360c93a76a74d1182b912052973e08ffa868b43": {
      "type": "Ydocchange",
      "commitMessage": "Add setting for leniency on Gson instance.\n\nAdd a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings.\n",
      "commitDate": "1/18/16, 9:08 AM",
      "commitName": "3360c93a76a74d1182b912052973e08ffa868b43",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "12/26/15, 10:39 PM",
      "commitNameOld": "7a1c94f9863bfc6915eaa56236dcef46876d4674",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 22.44,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void setLenient(boolean lenient) {\n    this.lenient \u003d lenient;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 325,
      "functionName": "setLenient",
      "functionAnnotation": "",
      "functionDoc": "Configure this parser to be liberal in what it accepts. By default,\nthis parser is strict and only accepts JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the\nparser to lenient causes it to ignore the following syntax errors:\n\n\u003cul\u003e\n  \u003cli\u003eStreams that start with the \u003ca href\u003d\"#nonexecuteprefix\"\u003enon-execute\n      prefix\u003c/a\u003e, \u003ccode\u003e\")]}\u0027\\n\"\u003c/code\u003e.\n  \u003cli\u003eStreams that include multiple top-level values. With strict parsing,\n      each stream must contain exactly one top-level value.\n  \u003cli\u003eTop-level values of any type. With strict parsing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n  \u003cli\u003eEnd of line comments starting with {@code //} or {@code #} and\n      ending with a newline character.\n  \u003cli\u003eC-style comments starting with {@code /*} and ending with\n      {@code *}{@code /}. Such comments may not be nested.\n  \u003cli\u003eNames that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eStrings that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eArray elements separated by {@code ;} instead of {@code ,}.\n  \u003cli\u003eUnnecessary array separators. These are interpreted as if null\n      was the omitted value.\n  \u003cli\u003eNames and values separated by {@code \u003d} or {@code \u003d\u003e} instead of\n      {@code :}.\n  \u003cli\u003eName/value pairs separated by {@code ;} instead of {@code ,}.\n\u003c/ul\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Configure this parser to be  be liberal in what it accepts. By default,\nthis parser is strict and only accepts JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the\nparser to lenient causes it to ignore the following syntax errors:\n\n\u003cul\u003e\n  \u003cli\u003eStreams that start with the \u003ca href\u003d\"#nonexecuteprefix\"\u003enon-execute\n      prefix\u003c/a\u003e, \u003ccode\u003e\")]}\u0027\\n\"\u003c/code\u003e.\n  \u003cli\u003eStreams that include multiple top-level values. With strict parsing,\n      each stream must contain exactly one top-level value.\n  \u003cli\u003eTop-level values of any type. With strict parsing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n  \u003cli\u003eEnd of line comments starting with {@code //} or {@code #} and\n      ending with a newline character.\n  \u003cli\u003eC-style comments starting with {@code /*} and ending with\n      {@code *}{@code /}. Such comments may not be nested.\n  \u003cli\u003eNames that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eStrings that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eArray elements separated by {@code ;} instead of {@code ,}.\n  \u003cli\u003eUnnecessary array separators. These are interpreted as if null\n      was the omitted value.\n  \u003cli\u003eNames and values separated by {@code \u003d} or {@code \u003d\u003e} instead of\n      {@code :}.\n  \u003cli\u003eName/value pairs separated by {@code ;} instead of {@code ,}.\n\u003c/ul\u003e\n",
        "newValue": "Configure this parser to be liberal in what it accepts. By default,\nthis parser is strict and only accepts JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the\nparser to lenient causes it to ignore the following syntax errors:\n\n\u003cul\u003e\n  \u003cli\u003eStreams that start with the \u003ca href\u003d\"#nonexecuteprefix\"\u003enon-execute\n      prefix\u003c/a\u003e, \u003ccode\u003e\")]}\u0027\\n\"\u003c/code\u003e.\n  \u003cli\u003eStreams that include multiple top-level values. With strict parsing,\n      each stream must contain exactly one top-level value.\n  \u003cli\u003eTop-level values of any type. With strict parsing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n  \u003cli\u003eEnd of line comments starting with {@code //} or {@code #} and\n      ending with a newline character.\n  \u003cli\u003eC-style comments starting with {@code /*} and ending with\n      {@code *}{@code /}. Such comments may not be nested.\n  \u003cli\u003eNames that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eStrings that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eArray elements separated by {@code ;} instead of {@code ,}.\n  \u003cli\u003eUnnecessary array separators. These are interpreted as if null\n      was the omitted value.\n  \u003cli\u003eNames and values separated by {@code \u003d} or {@code \u003d\u003e} instead of\n      {@code :}.\n  \u003cli\u003eName/value pairs separated by {@code ;} instead of {@code ,}.\n\u003c/ul\u003e\n"
      }
    },
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": {
      "type": "Yfilerename",
      "commitMessage": "Promote JsonReader2 to be the main JsonReader implementation.\n",
      "commitDate": "8/26/12, 12:34 PM",
      "commitName": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 12:33 PM",
      "commitNameOld": "553fa6b742ef6c00f04465c401c7cc464a6f9ea0",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public final void setLenient(boolean lenient) {\n    this.lenient \u003d lenient;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 296,
      "functionName": "setLenient",
      "functionAnnotation": "",
      "functionDoc": "Configure this parser to be  be liberal in what it accepts. By default,\nthis parser is strict and only accepts JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the\nparser to lenient causes it to ignore the following syntax errors:\n\n\u003cul\u003e\n  \u003cli\u003eStreams that start with the \u003ca href\u003d\"#nonexecuteprefix\"\u003enon-execute\n      prefix\u003c/a\u003e, \u003ccode\u003e\")]}\u0027\\n\"\u003c/code\u003e.\n  \u003cli\u003eStreams that include multiple top-level values. With strict parsing,\n      each stream must contain exactly one top-level value.\n  \u003cli\u003eTop-level values of any type. With strict parsing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n  \u003cli\u003eEnd of line comments starting with {@code //} or {@code #} and\n      ending with a newline character.\n  \u003cli\u003eC-style comments starting with {@code /*} and ending with\n      {@code *}{@code /}. Such comments may not be nested.\n  \u003cli\u003eNames that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eStrings that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eArray elements separated by {@code ;} instead of {@code ,}.\n  \u003cli\u003eUnnecessary array separators. These are interpreted as if null\n      was the omitted value.\n  \u003cli\u003eNames and values separated by {@code \u003d} or {@code \u003d\u003e} instead of\n      {@code :}.\n  \u003cli\u003eName/value pairs separated by {@code ;} instead of {@code ,}.\n\u003c/ul\u003e\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
        "newPath": "gson/src/main/java/com/google/gson/stream/JsonReader.java"
      }
    },
    "46b4346505d85885f2dee28b24d4d2d15190564e": {
      "type": "Yintroduced",
      "commitMessage": "Get JsonReader2 to the point that it\u0027s passing most tests.\n\nStill missing: \n - non-execute prefixes\n - rolling back \u0027pos\u0027 when a double fails to parse\n - octal prefix failures\n",
      "commitDate": "8/25/12, 9:02 PM",
      "commitName": "46b4346505d85885f2dee28b24d4d2d15190564e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,3 @@\n+public final void setLenient(boolean lenient) {\n+    this.lenient \u003d lenient;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public final void setLenient(boolean lenient) {\n    this.lenient \u003d lenient;\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
      "functionStartLine": 291,
      "functionName": "setLenient",
      "functionAnnotation": "",
      "functionDoc": "Configure this parser to be  be liberal in what it accepts. By default,\nthis parser is strict and only accepts JSON as specified by \u003ca\nhref\u003d\"http://www.ietf.org/rfc/rfc4627.txt\"\u003eRFC 4627\u003c/a\u003e. Setting the\nparser to lenient causes it to ignore the following syntax errors:\n\n\u003cul\u003e\n  \u003cli\u003eStreams that start with the \u003ca href\u003d\"#nonexecuteprefix\"\u003enon-execute\n      prefix\u003c/a\u003e, \u003ccode\u003e\")]}\u0027\\n\"\u003c/code\u003e.\n  \u003cli\u003eStreams that include multiple top-level values. With strict parsing,\n      each stream must contain exactly one top-level value.\n  \u003cli\u003eTop-level values of any type. With strict parsing, the top-level\n      value must be an object or an array.\n  \u003cli\u003eNumbers may be {@link Double#isNaN() NaNs} or {@link\n      Double#isInfinite() infinities}.\n  \u003cli\u003eEnd of line comments starting with {@code //} or {@code #} and\n      ending with a newline character.\n  \u003cli\u003eC-style comments starting with {@code /*} and ending with\n      {@code *}{@code /}. Such comments may not be nested.\n  \u003cli\u003eNames that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eStrings that are unquoted or {@code \u0027single quoted\u0027}.\n  \u003cli\u003eArray elements separated by {@code ;} instead of {@code ,}.\n  \u003cli\u003eUnnecessary array separators. These are interpreted as if null\n      was the omitted value.\n  \u003cli\u003eNames and values separated by {@code \u003d} or {@code \u003d\u003e} instead of\n      {@code :}.\n  \u003cli\u003eName/value pairs separated by {@code ;} instead of {@code ,}.\n\u003c/ul\u003e\n"
    }
  }
}