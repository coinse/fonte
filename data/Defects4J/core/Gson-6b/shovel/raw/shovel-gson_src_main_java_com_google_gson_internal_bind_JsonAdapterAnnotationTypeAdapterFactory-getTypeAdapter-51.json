{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonAdapterAnnotationTypeAdapterFactory.java",
  "functionName": "getTypeAdapter",
  "functionId": "getTypeAdapter___constructorConstructor-ConstructorConstructor__gson-Gson__fieldType-TypeToken__?____annotation-JsonAdapter",
  "sourceFilePath": "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
  "functionAnnotation": "// Casts guarded by conditionals.\n@SuppressWarnings(\"unchecked\")",
  "functionDoc": "",
  "functionStartLine": 51,
  "functionEndLine": 69,
  "numCommitsSeen": 10,
  "timeTaken": 457,
  "changeHistory": [
    "23e2916947940864f828505531aa130fba6d8743",
    "117d8ea68ff953a271c492736ba3eed3bb209da2"
  ],
  "changeHistoryShort": {
    "23e2916947940864f828505531aa130fba6d8743": "Ybodychange",
    "117d8ea68ff953a271c492736ba3eed3bb209da2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "23e2916947940864f828505531aa130fba6d8743": {
      "type": "Ybodychange",
      "commitMessage": "Make TypeAdapters created by @JsonAdapter null-safe\n",
      "commitDate": "1/18/16, 7:41 AM",
      "commitName": "23e2916947940864f828505531aa130fba6d8743",
      "commitAuthor": "Jerzy Chalupski",
      "commitDateOld": "11/4/15, 6:52 PM",
      "commitNameOld": "e5b3f6368db33c846b094b0d695d3a1b826e3892",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 74.53,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic TypeAdapter\u003c?\u003e getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken\u003c?\u003e fieldType, JsonAdapter annotation) {\n    Class\u003c?\u003e value \u003d annotation.value();\n    final TypeAdapter\u003c?\u003e typeAdapter;\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n        Class\u003cTypeAdapter\u003c?\u003e\u003e typeAdapterClass \u003d (Class\u003cTypeAdapter\u003c?\u003e\u003e) value;\n        typeAdapter \u003d constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n        Class\u003cTypeAdapterFactory\u003e typeAdapterFactory \u003d (Class\u003cTypeAdapterFactory\u003e) value;\n        typeAdapter \u003d constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n    } else {\n        throw new IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n    }\n    return typeAdapter.nullSafe();\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
      "functionStartLine": 51,
      "functionName": "getTypeAdapter",
      "functionAnnotation": "// Casts guarded by conditionals.\n@SuppressWarnings(\"unchecked\")",
      "functionDoc": "",
      "diff": "@@ -1,13 +1,15 @@\n @SuppressWarnings(\"unchecked\")\n static TypeAdapter\u003c?\u003e getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken\u003c?\u003e fieldType, JsonAdapter annotation) {\n     Class\u003c?\u003e value \u003d annotation.value();\n+    final TypeAdapter\u003c?\u003e typeAdapter;\n     if (TypeAdapter.class.isAssignableFrom(value)) {\n-        Class\u003cTypeAdapter\u003c?\u003e\u003e typeAdapter \u003d (Class\u003cTypeAdapter\u003c?\u003e\u003e) value;\n-        return constructorConstructor.get(TypeToken.get(typeAdapter)).construct();\n-    }\n-    if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n+        Class\u003cTypeAdapter\u003c?\u003e\u003e typeAdapterClass \u003d (Class\u003cTypeAdapter\u003c?\u003e\u003e) value;\n+        typeAdapter \u003d constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();\n+    } else if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n         Class\u003cTypeAdapterFactory\u003e typeAdapterFactory \u003d (Class\u003cTypeAdapterFactory\u003e) value;\n-        return constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n+        typeAdapter \u003d constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n+    } else {\n+        throw new IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n     }\n-    throw new IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n+    return typeAdapter.nullSafe();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "117d8ea68ff953a271c492736ba3eed3bb209da2": {
      "type": "Yintroduced",
      "commitMessage": "Add TypeAdapterFactory support to @JsonAdapter.\n",
      "commitDate": "8/4/14, 9:58 AM",
      "commitName": "117d8ea68ff953a271c492736ba3eed3bb209da2",
      "commitAuthor": "Jake Wharton",
      "diff": "@@ -0,0 +1,13 @@\n+@SuppressWarnings(\"unchecked\")\n+static TypeAdapter\u003c?\u003e getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken\u003c?\u003e fieldType, JsonAdapter annotation) {\n+    Class\u003c?\u003e value \u003d annotation.value();\n+    if (TypeAdapter.class.isAssignableFrom(value)) {\n+        Class\u003cTypeAdapter\u003c?\u003e\u003e typeAdapter \u003d (Class\u003cTypeAdapter\u003c?\u003e\u003e) value;\n+        return constructorConstructor.get(TypeToken.get(typeAdapter)).construct();\n+    }\n+    if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n+        Class\u003cTypeAdapterFactory\u003e typeAdapterFactory \u003d (Class\u003cTypeAdapterFactory\u003e) value;\n+        return constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n+    }\n+    throw new IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\nstatic TypeAdapter\u003c?\u003e getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken\u003c?\u003e fieldType, JsonAdapter annotation) {\n    Class\u003c?\u003e value \u003d annotation.value();\n    if (TypeAdapter.class.isAssignableFrom(value)) {\n        Class\u003cTypeAdapter\u003c?\u003e\u003e typeAdapter \u003d (Class\u003cTypeAdapter\u003c?\u003e\u003e) value;\n        return constructorConstructor.get(TypeToken.get(typeAdapter)).construct();\n    }\n    if (TypeAdapterFactory.class.isAssignableFrom(value)) {\n        Class\u003cTypeAdapterFactory\u003e typeAdapterFactory \u003d (Class\u003cTypeAdapterFactory\u003e) value;\n        return constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n    }\n    throw new IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n}",
      "path": "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
      "functionStartLine": 50,
      "functionName": "getTypeAdapter",
      "functionAnnotation": "// Casts guarded by conditionals.\n@SuppressWarnings(\"unchecked\")",
      "functionDoc": ""
    }
  }
}