{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JsonReader.java",
  "functionName": "peek",
  "functionId": "peek",
  "sourceFilePath": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
  "functionAnnotation": "",
  "functionDoc": "Returns the type of the next token without consuming it.\n",
  "functionStartLine": 426,
  "functionEndLine": 463,
  "numCommitsSeen": 53,
  "timeTaken": 2056,
  "changeHistory": [
    "3920d95fac0520c288e6b5f626ae0724a32f49ca",
    "085856c12843a6b58d6de59672d37da47afdaa72",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13",
    "46b4346505d85885f2dee28b24d4d2d15190564e"
  ],
  "changeHistoryShort": {
    "3920d95fac0520c288e6b5f626ae0724a32f49ca": "Ybodychange",
    "085856c12843a6b58d6de59672d37da47afdaa72": "Ybodychange",
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": "Yfilerename",
    "46b4346505d85885f2dee28b24d4d2d15190564e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3920d95fac0520c288e6b5f626ae0724a32f49ca": {
      "type": "Ybodychange",
      "commitMessage": "rename peekedInteger to peekedLong\n",
      "commitDate": "9/2/12, 10:46 AM",
      "commitName": "3920d95fac0520c288e6b5f626ae0724a32f49ca",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/27/12, 8:52 PM",
      "commitNameOld": "8daf3aaeb4fd072d45df334dd8a6009be734c180",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 5.58,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonToken peek() throws IOException {\n    int p \u003d peeked;\n    if (p \u003d\u003d PEEKED_NONE) {\n        p \u003d doPeek();\n    }\n    switch(p) {\n        case PEEKED_BEGIN_OBJECT:\n            return JsonToken.BEGIN_OBJECT;\n        case PEEKED_END_OBJECT:\n            return JsonToken.END_OBJECT;\n        case PEEKED_BEGIN_ARRAY:\n            return JsonToken.BEGIN_ARRAY;\n        case PEEKED_END_ARRAY:\n            return JsonToken.END_ARRAY;\n        case PEEKED_SINGLE_QUOTED_NAME:\n        case PEEKED_DOUBLE_QUOTED_NAME:\n        case PEEKED_UNQUOTED_NAME:\n            return JsonToken.NAME;\n        case PEEKED_TRUE:\n        case PEEKED_FALSE:\n            return JsonToken.BOOLEAN;\n        case PEEKED_NULL:\n            return JsonToken.NULL;\n        case PEEKED_SINGLE_QUOTED:\n        case PEEKED_DOUBLE_QUOTED:\n        case PEEKED_UNQUOTED:\n        case PEEKED_BUFFERED:\n            return JsonToken.STRING;\n        case PEEKED_LONG:\n        case PEEKED_NUMBER:\n            return JsonToken.NUMBER;\n        case PEEKED_EOF:\n            return JsonToken.END_DOCUMENT;\n        default:\n            throw new AssertionError();\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 401,
      "functionName": "peek",
      "functionAnnotation": "",
      "functionDoc": "Returns the type of the next token without consuming it.\n",
      "diff": "@@ -1,37 +1,37 @@\n public JsonToken peek() throws IOException {\n     int p \u003d peeked;\n     if (p \u003d\u003d PEEKED_NONE) {\n         p \u003d doPeek();\n     }\n     switch(p) {\n         case PEEKED_BEGIN_OBJECT:\n             return JsonToken.BEGIN_OBJECT;\n         case PEEKED_END_OBJECT:\n             return JsonToken.END_OBJECT;\n         case PEEKED_BEGIN_ARRAY:\n             return JsonToken.BEGIN_ARRAY;\n         case PEEKED_END_ARRAY:\n             return JsonToken.END_ARRAY;\n         case PEEKED_SINGLE_QUOTED_NAME:\n         case PEEKED_DOUBLE_QUOTED_NAME:\n         case PEEKED_UNQUOTED_NAME:\n             return JsonToken.NAME;\n         case PEEKED_TRUE:\n         case PEEKED_FALSE:\n             return JsonToken.BOOLEAN;\n         case PEEKED_NULL:\n             return JsonToken.NULL;\n         case PEEKED_SINGLE_QUOTED:\n         case PEEKED_DOUBLE_QUOTED:\n         case PEEKED_UNQUOTED:\n         case PEEKED_BUFFERED:\n             return JsonToken.STRING;\n-        case PEEKED_INTEGER:\n+        case PEEKED_LONG:\n         case PEEKED_NUMBER:\n             return JsonToken.NUMBER;\n         case PEEKED_EOF:\n             return JsonToken.END_DOCUMENT;\n         default:\n             throw new AssertionError();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "085856c12843a6b58d6de59672d37da47afdaa72": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t leave the JsonReader in an invalid state if nextInt(), nextDouble() or nextLong() fails. We now save a reference to the string before we parse it, and keep that referenced value if parsing fails.\n",
      "commitDate": "8/26/12, 3:06 PM",
      "commitName": "085856c12843a6b58d6de59672d37da47afdaa72",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 12:34 PM",
      "commitNameOld": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonToken peek() throws IOException {\n    int p \u003d peeked;\n    if (p \u003d\u003d PEEKED_NONE) {\n        p \u003d doPeek();\n    }\n    switch(p) {\n        case PEEKED_BEGIN_OBJECT:\n            return JsonToken.BEGIN_OBJECT;\n        case PEEKED_END_OBJECT:\n            return JsonToken.END_OBJECT;\n        case PEEKED_BEGIN_ARRAY:\n            return JsonToken.BEGIN_ARRAY;\n        case PEEKED_END_ARRAY:\n            return JsonToken.END_ARRAY;\n        case PEEKED_SINGLE_QUOTED_NAME:\n        case PEEKED_DOUBLE_QUOTED_NAME:\n        case PEEKED_UNQUOTED_NAME:\n            return JsonToken.NAME;\n        case PEEKED_TRUE:\n        case PEEKED_FALSE:\n            return JsonToken.BOOLEAN;\n        case PEEKED_NULL:\n            return JsonToken.NULL;\n        case PEEKED_SINGLE_QUOTED:\n        case PEEKED_DOUBLE_QUOTED:\n        case PEEKED_UNQUOTED:\n        case PEEKED_BUFFERED:\n            return JsonToken.STRING;\n        case PEEKED_INTEGER:\n        case PEEKED_NUMBER:\n            return JsonToken.NUMBER;\n        case PEEKED_EOF:\n            return JsonToken.END_DOCUMENT;\n        default:\n            throw new AssertionError();\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 396,
      "functionName": "peek",
      "functionAnnotation": "",
      "functionDoc": "Returns the type of the next token without consuming it.\n",
      "diff": "@@ -1,36 +1,37 @@\n public JsonToken peek() throws IOException {\n     int p \u003d peeked;\n     if (p \u003d\u003d PEEKED_NONE) {\n         p \u003d doPeek();\n     }\n     switch(p) {\n         case PEEKED_BEGIN_OBJECT:\n             return JsonToken.BEGIN_OBJECT;\n         case PEEKED_END_OBJECT:\n             return JsonToken.END_OBJECT;\n         case PEEKED_BEGIN_ARRAY:\n             return JsonToken.BEGIN_ARRAY;\n         case PEEKED_END_ARRAY:\n             return JsonToken.END_ARRAY;\n         case PEEKED_SINGLE_QUOTED_NAME:\n         case PEEKED_DOUBLE_QUOTED_NAME:\n         case PEEKED_UNQUOTED_NAME:\n             return JsonToken.NAME;\n         case PEEKED_TRUE:\n         case PEEKED_FALSE:\n             return JsonToken.BOOLEAN;\n         case PEEKED_NULL:\n             return JsonToken.NULL;\n         case PEEKED_SINGLE_QUOTED:\n         case PEEKED_DOUBLE_QUOTED:\n         case PEEKED_UNQUOTED:\n+        case PEEKED_BUFFERED:\n             return JsonToken.STRING;\n         case PEEKED_INTEGER:\n         case PEEKED_NUMBER:\n             return JsonToken.NUMBER;\n         case PEEKED_EOF:\n             return JsonToken.END_DOCUMENT;\n         default:\n             throw new AssertionError();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e7bfd0c97d2196047bad996b6625d3bb197aae13": {
      "type": "Yfilerename",
      "commitMessage": "Promote JsonReader2 to be the main JsonReader implementation.\n",
      "commitDate": "8/26/12, 12:34 PM",
      "commitName": "e7bfd0c97d2196047bad996b6625d3bb197aae13",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/12, 12:33 PM",
      "commitNameOld": "553fa6b742ef6c00f04465c401c7cc464a6f9ea0",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public JsonToken peek() throws IOException {\n    int p \u003d peeked;\n    if (p \u003d\u003d PEEKED_NONE) {\n        p \u003d doPeek();\n    }\n    switch(p) {\n        case PEEKED_BEGIN_OBJECT:\n            return JsonToken.BEGIN_OBJECT;\n        case PEEKED_END_OBJECT:\n            return JsonToken.END_OBJECT;\n        case PEEKED_BEGIN_ARRAY:\n            return JsonToken.BEGIN_ARRAY;\n        case PEEKED_END_ARRAY:\n            return JsonToken.END_ARRAY;\n        case PEEKED_SINGLE_QUOTED_NAME:\n        case PEEKED_DOUBLE_QUOTED_NAME:\n        case PEEKED_UNQUOTED_NAME:\n            return JsonToken.NAME;\n        case PEEKED_TRUE:\n        case PEEKED_FALSE:\n            return JsonToken.BOOLEAN;\n        case PEEKED_NULL:\n            return JsonToken.NULL;\n        case PEEKED_SINGLE_QUOTED:\n        case PEEKED_DOUBLE_QUOTED:\n        case PEEKED_UNQUOTED:\n            return JsonToken.STRING;\n        case PEEKED_INTEGER:\n        case PEEKED_NUMBER:\n            return JsonToken.NUMBER;\n        case PEEKED_EOF:\n            return JsonToken.END_DOCUMENT;\n        default:\n            throw new AssertionError();\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader.java",
      "functionStartLine": 393,
      "functionName": "peek",
      "functionAnnotation": "",
      "functionDoc": "Returns the type of the next token without consuming it.\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
        "newPath": "gson/src/main/java/com/google/gson/stream/JsonReader.java"
      }
    },
    "46b4346505d85885f2dee28b24d4d2d15190564e": {
      "type": "Yintroduced",
      "commitMessage": "Get JsonReader2 to the point that it\u0027s passing most tests.\n\nStill missing: \n - non-execute prefixes\n - rolling back \u0027pos\u0027 when a double fails to parse\n - octal prefix failures\n",
      "commitDate": "8/25/12, 9:02 PM",
      "commitName": "46b4346505d85885f2dee28b24d4d2d15190564e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,36 @@\n+public JsonToken peek() throws IOException {\n+    int p \u003d peeked;\n+    if (p \u003d\u003d PEEKED_NONE) {\n+        p \u003d doPeek();\n+    }\n+    switch(p) {\n+        case PEEKED_BEGIN_OBJECT:\n+            return JsonToken.BEGIN_OBJECT;\n+        case PEEKED_END_OBJECT:\n+            return JsonToken.END_OBJECT;\n+        case PEEKED_BEGIN_ARRAY:\n+            return JsonToken.BEGIN_ARRAY;\n+        case PEEKED_END_ARRAY:\n+            return JsonToken.END_ARRAY;\n+        case PEEKED_SINGLE_QUOTED_NAME:\n+        case PEEKED_DOUBLE_QUOTED_NAME:\n+        case PEEKED_UNQUOTED_NAME:\n+            return JsonToken.NAME;\n+        case PEEKED_TRUE:\n+        case PEEKED_FALSE:\n+            return JsonToken.BOOLEAN;\n+        case PEEKED_NULL:\n+            return JsonToken.NULL;\n+        case PEEKED_SINGLE_QUOTED:\n+        case PEEKED_DOUBLE_QUOTED:\n+        case PEEKED_UNQUOTED:\n+            return JsonToken.STRING;\n+        case PEEKED_INTEGER:\n+        case PEEKED_NUMBER:\n+            return JsonToken.NUMBER;\n+        case PEEKED_EOF:\n+            return JsonToken.END_DOCUMENT;\n+        default:\n+            throw new AssertionError();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public JsonToken peek() throws IOException {\n    int p \u003d peeked;\n    if (p \u003d\u003d PEEKED_NONE) {\n        p \u003d doPeek();\n    }\n    switch(p) {\n        case PEEKED_BEGIN_OBJECT:\n            return JsonToken.BEGIN_OBJECT;\n        case PEEKED_END_OBJECT:\n            return JsonToken.END_OBJECT;\n        case PEEKED_BEGIN_ARRAY:\n            return JsonToken.BEGIN_ARRAY;\n        case PEEKED_END_ARRAY:\n            return JsonToken.END_ARRAY;\n        case PEEKED_SINGLE_QUOTED_NAME:\n        case PEEKED_DOUBLE_QUOTED_NAME:\n        case PEEKED_UNQUOTED_NAME:\n            return JsonToken.NAME;\n        case PEEKED_TRUE:\n        case PEEKED_FALSE:\n            return JsonToken.BOOLEAN;\n        case PEEKED_NULL:\n            return JsonToken.NULL;\n        case PEEKED_SINGLE_QUOTED:\n        case PEEKED_DOUBLE_QUOTED:\n        case PEEKED_UNQUOTED:\n            return JsonToken.STRING;\n        case PEEKED_INTEGER:\n        case PEEKED_NUMBER:\n            return JsonToken.NUMBER;\n        case PEEKED_EOF:\n            return JsonToken.END_DOCUMENT;\n        default:\n            throw new AssertionError();\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/stream/JsonReader2.java",
      "functionStartLine": 388,
      "functionName": "peek",
      "functionAnnotation": "",
      "functionDoc": "Returns the type of the next token without consuming it.\n"
    }
  }
}