{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "fromJson",
  "functionId": "fromJson___json-String__typeOfT-Type",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
  "functionStartLine": 788,
  "functionEndLine": 795,
  "numCommitsSeen": 177,
  "timeTaken": 3876,
  "changeHistory": [
    "b373c20136eae1a821b173d106ed6c222f87fb13",
    "2cbddbbbc596f29331c37409ec07ecb9c09442b5",
    "016261d9cfdcab859a674f90c1b53858dee44f36",
    "99801915aa324c4d07b852e23debfbcefb1a3007",
    "84c71409da812c1ccc62196ac2ff71f761bbf31b",
    "10db917e9380ca4d741e06152fd1ee506666c1c3",
    "d3eda04f33ed9386140bb8c3066716916e2de831",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b"
  ],
  "changeHistoryShort": {
    "b373c20136eae1a821b173d106ed6c222f87fb13": "Ydocchange",
    "2cbddbbbc596f29331c37409ec07ecb9c09442b5": "Ybodychange",
    "016261d9cfdcab859a674f90c1b53858dee44f36": "Ybodychange",
    "99801915aa324c4d07b852e23debfbcefb1a3007": "Ybodychange",
    "84c71409da812c1ccc62196ac2ff71f761bbf31b": "Ybodychange",
    "10db917e9380ca4d741e06152fd1ee506666c1c3": "Ymultichange(Yexceptionschange,Ydocchange)",
    "d3eda04f33ed9386140bb8c3066716916e2de831": "Ybodychange",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b373c20136eae1a821b173d106ed6c222f87fb13": {
      "type": "Ydocchange",
      "commitMessage": "Fixed issue 552 by documenting when fromJson returns null.\n",
      "commitDate": "3/29/14, 4:28 PM",
      "commitName": "b373c20136eae1a821b173d106ed6c222f87fb13",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "3/26/14, 11:07 AM",
      "commitNameOld": "c53e2551058b445b6adf5bc588456c2b33548e28",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    StringReader reader \u003d new StringReader(json);\n    T target \u003d (T) fromJson(reader, typeOfT);\n    return target;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 727,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
        "newValue": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string. Returns {@code null} if {@code json} is {@code null}.\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n"
      }
    },
    "2cbddbbbc596f29331c37409ec07ecb9c09442b5": {
      "type": "Ybodychange",
      "commitMessage": "- Remove unnecessary catch block\n",
      "commitDate": "11/12/11, 4:04 PM",
      "commitName": "2cbddbbbc596f29331c37409ec07ecb9c09442b5",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "10/23/11, 6:32 PM",
      "commitNameOld": "016261d9cfdcab859a674f90c1b53858dee44f36",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 19.94,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    StringReader reader \u003d new StringReader(json);\n    T target \u003d (T) fromJson(reader, typeOfT);\n    return target;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 631,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
      "diff": "@@ -1,13 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n     if (json \u003d\u003d null) {\n         return null;\n     }\n-    try {\n-        StringReader reader \u003d new StringReader(json);\n-        T target \u003d (T) fromJson(reader, typeOfT);\n-        return target;\n-    } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-    }\n+    StringReader reader \u003d new StringReader(json);\n+    T target \u003d (T) fromJson(reader, typeOfT);\n+    return target;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "016261d9cfdcab859a674f90c1b53858dee44f36": {
      "type": "Ybodychange",
      "commitMessage": "Throw JsonParseException in event of binding failures like type mismatches.\n",
      "commitDate": "10/23/11, 6:32 PM",
      "commitName": "016261d9cfdcab859a674f90c1b53858dee44f36",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "10/23/11, 1:28 PM",
      "commitNameOld": "052c9ce0ce7dc0e9c8c98e1902d0fdac97f6af52",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    try {\n        StringReader reader \u003d new StringReader(json);\n        T target \u003d (T) fromJson(reader, typeOfT);\n        return target;\n    } catch (IllegalStateException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 631,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
      "diff": "",
      "extendedDetails": {}
    },
    "99801915aa324c4d07b852e23debfbcefb1a3007": {
      "type": "Ybodychange",
      "commitMessage": "More code through the same fromJson path\n",
      "commitDate": "9/8/11, 10:40 PM",
      "commitName": "99801915aa324c4d07b852e23debfbcefb1a3007",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/8/11, 9:39 PM",
      "commitNameOld": "9db0c5321710f1cebb6ae297b2d7c35ef15b56ce",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    try {\n        StringReader reader \u003d new StringReader(json);\n        T target \u003d (T) fromJson(reader, typeOfT);\n        return target;\n    } catch (IllegalStateException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 556,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
      "diff": "@@ -1,14 +1,13 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n     if (json \u003d\u003d null) {\n         return null;\n     }\n     try {\n-        TypeAdapter\u003cT\u003e typeAdapter \u003d (TypeAdapter\u003cT\u003e) miniGson.getAdapter(TypeToken.get(typeOfT));\n-        return typeAdapter.fromJson(json);\n+        StringReader reader \u003d new StringReader(json);\n+        T target \u003d (T) fromJson(reader, typeOfT);\n+        return target;\n     } catch (IllegalStateException e) {\n         throw new JsonSyntaxException(e);\n-    } catch (IOException e) {\n-        throw new JsonSyntaxException(e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "84c71409da812c1ccc62196ac2ff71f761bbf31b": {
      "type": "Ybodychange",
      "commitMessage": "Removed Gson type adapters for boolean, integer, float, double, String, BigDecimal and BigInteger.\nSwitched Gson.fromJson() methods to use miniGson directly instead of using a DOM.\n",
      "commitDate": "8/18/11, 8:13 PM",
      "commitName": "84c71409da812c1ccc62196ac2ff71f761bbf31b",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "8/12/11, 11:24 AM",
      "commitNameOld": "ff88ac32f22e3edf7652f1c491277f996cb56024",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 6.37,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    try {\n        TypeAdapter\u003cT\u003e typeAdapter \u003d (TypeAdapter\u003cT\u003e) miniGson.getAdapter(TypeToken.get(typeOfT));\n        return typeAdapter.fromJson(json);\n    } catch (IllegalStateException e) {\n        throw new JsonSyntaxException(e);\n    } catch (IOException e) {\n        throw new JsonSyntaxException(e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 543,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
      "diff": "@@ -1,9 +1,14 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n     if (json \u003d\u003d null) {\n         return null;\n     }\n-    StringReader reader \u003d new StringReader(json);\n-    T target \u003d (T) fromJson(reader, typeOfT);\n-    return target;\n+    try {\n+        TypeAdapter\u003cT\u003e typeAdapter \u003d (TypeAdapter\u003cT\u003e) miniGson.getAdapter(TypeToken.get(typeOfT));\n+        return typeAdapter.fromJson(json);\n+    } catch (IllegalStateException e) {\n+        throw new JsonSyntaxException(e);\n+    } catch (IOException e) {\n+        throw new JsonSyntaxException(e);\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10db917e9380ca4d741e06152fd1ee506666c1c3": {
      "type": "Ymultichange(Yexceptionschange,Ydocchange)",
      "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
      "commitDate": "11/3/10, 12:46 PM",
      "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    StringReader reader \u003d new StringReader(json);\n    T target \u003d (T) fromJson(reader, typeOfT);\n    return target;\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 427,
          "functionName": "fromJson",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
          "diff": "@@ -1,9 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n-public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonParseException {\n+public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n     if (json \u003d\u003d null) {\n         return null;\n     }\n     StringReader reader \u003d new StringReader(json);\n     T target \u003d (T) fromJson(reader, typeOfT);\n     return target;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[JsonParseException]",
            "newValue": "[JsonSyntaxException]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    StringReader reader \u003d new StringReader(json);\n    T target \u003d (T) fromJson(reader, typeOfT);\n    return target;\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 427,
          "functionName": "fromJson",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n",
          "diff": "@@ -1,9 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n-public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonParseException {\n+public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonSyntaxException {\n     if (json \u003d\u003d null) {\n         return null;\n     }\n     StringReader reader \u003d new StringReader(json);\n     T target \u003d (T) fromJson(reader, typeOfT);\n     return target;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n",
            "newValue": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n"
          }
        }
      ]
    },
    "d3eda04f33ed9386140bb8c3066716916e2de831": {
      "type": "Ybodychange",
      "commitMessage": "Added support for deserializing from null input to a null value.\nAdded toString() method to ObjectTypePair.\n",
      "commitDate": "10/22/10, 9:06 AM",
      "commitName": "d3eda04f33ed9386140bb8c3066716916e2de831",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/18/10, 4:58 PM",
      "commitNameOld": "91bee2a688bd513fc1e1be7a4b9dc20ad2c83877",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 3.67,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonParseException {\n    if (json \u003d\u003d null) {\n        return null;\n    }\n    StringReader reader \u003d new StringReader(json);\n    T target \u003d (T) fromJson(reader, typeOfT);\n    return target;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 417,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n",
      "diff": "@@ -1,6 +1,9 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonParseException {\n+    if (json \u003d\u003d null) {\n+        return null;\n+    }\n     StringReader reader \u003d new StringReader(json);\n     T target \u003d (T) fromJson(reader, typeOfT);\n     return target;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": {
      "type": "Yintroduced",
      "commitMessage": "moved gson as a project under trunk\n",
      "commitDate": "8/31/08, 8:13 PM",
      "commitName": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,6 @@\n+@SuppressWarnings(\"unchecked\")\n+public \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonParseException {\n+    StringReader reader \u003d new StringReader(json);\n+    T target \u003d (T) fromJson(reader, typeOfT);\n+    return target;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(String json, Type typeOfT) throws JsonParseException {\n    StringReader reader \u003d new StringReader(json);\n    T target \u003d (T) fromJson(reader, typeOfT);\n    return target;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 324,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the specified Json into an object of the specified type. This method\nis useful if the specified object is a generic type. For non-generic objects, use\n{@link #fromJson(String, Class)} instead. If you have the Json in a {@link Reader} instead of\na String, use {@link #fromJson(Reader, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the string from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the string\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n"
    }
  }
}