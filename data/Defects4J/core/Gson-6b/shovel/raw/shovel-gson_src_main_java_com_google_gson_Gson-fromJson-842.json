{
  "origin": "codeshovel",
  "repositoryName": "Gson-6b",
  "repositoryPath": "/tmp/Gson-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Gson.java",
  "functionName": "fromJson",
  "functionId": "fromJson___json-Reader__typeOfT-Type",
  "sourceFilePath": "gson/src/main/java/com/google/gson/Gson.java",
  "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
  "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
  "functionStartLine": 842,
  "functionEndLine": 847,
  "numCommitsSeen": 177,
  "timeTaken": 3916,
  "changeHistory": [
    "3360c93a76a74d1182b912052973e08ffa868b43",
    "b373c20136eae1a821b173d106ed6c222f87fb13",
    "756131d869465ac70abb9595653ea967e6812231",
    "a92cf394e827089f8a10853ca5d5f0da6c23654c",
    "de727d8c4811209b2fdc6dbfa367f8bb7f78ba4e",
    "1c5f5132d8cc9b3578070b8c570ccf8d8d2e8f8c",
    "0a3f5fa801954b07d0041d8a7dc6f87dc210a470",
    "7d055fcb517a25e3cf141a867ec2b53264c40a19",
    "32afd1a4e45e4ae42bb6bceb8a5823dfe8b44fa2",
    "10db917e9380ca4d741e06152fd1ee506666c1c3",
    "747e3c3051153779954e49b7dbc475daa678e1f4",
    "fa40b4c63a57e92e87b3fb6079b01fd5304a01c1",
    "7a7bbf754cfabbcb56d090b982bf4b128e15938d",
    "29ab864b2fda09ddee46554751f22f875c0ab736",
    "abf4ab2d78b2a7f3108fd7560145f45886f6b301",
    "6e59e502c2461c11d0e6099f10f65c666acabc45",
    "5c6d5a0d119481e7ca61b0884c881c6811d7af86",
    "2034090b15cfef51d81e860b1d49340147378618",
    "2c7cc620d4975521dc5d1c54ea1c0b2247b4fdad",
    "cf2a457af7b0422e7728e0d55a4e794048af5a6b",
    "9dfa454f6da6e88b51dba7840881feb874dbbdef",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b"
  ],
  "changeHistoryShort": {
    "3360c93a76a74d1182b912052973e08ffa868b43": "Ybodychange",
    "b373c20136eae1a821b173d106ed6c222f87fb13": "Ydocchange",
    "756131d869465ac70abb9595653ea967e6812231": "Yannotationchange",
    "a92cf394e827089f8a10853ca5d5f0da6c23654c": "Ybodychange",
    "de727d8c4811209b2fdc6dbfa367f8bb7f78ba4e": "Ybodychange",
    "1c5f5132d8cc9b3578070b8c570ccf8d8d2e8f8c": "Ybodychange",
    "0a3f5fa801954b07d0041d8a7dc6f87dc210a470": "Ybodychange",
    "7d055fcb517a25e3cf141a867ec2b53264c40a19": "Ybodychange",
    "32afd1a4e45e4ae42bb6bceb8a5823dfe8b44fa2": "Ybodychange",
    "10db917e9380ca4d741e06152fd1ee506666c1c3": "Ymultichange(Yexceptionschange,Ydocchange)",
    "747e3c3051153779954e49b7dbc475daa678e1f4": "Ymultichange(Ybodychange,Yannotationchange)",
    "fa40b4c63a57e92e87b3fb6079b01fd5304a01c1": "Ybodychange",
    "7a7bbf754cfabbcb56d090b982bf4b128e15938d": "Ybodychange",
    "29ab864b2fda09ddee46554751f22f875c0ab736": "Ymultichange(Ybodychange,Yannotationchange)",
    "abf4ab2d78b2a7f3108fd7560145f45886f6b301": "Ymultichange(Ybodychange,Yannotationchange)",
    "6e59e502c2461c11d0e6099f10f65c666acabc45": "Ybodychange",
    "5c6d5a0d119481e7ca61b0884c881c6811d7af86": "Ybodychange",
    "2034090b15cfef51d81e860b1d49340147378618": "Ybodychange",
    "2c7cc620d4975521dc5d1c54ea1c0b2247b4fdad": "Ybodychange",
    "cf2a457af7b0422e7728e0d55a4e794048af5a6b": "Ybodychange",
    "9dfa454f6da6e88b51dba7840881feb874dbbdef": "Ybodychange",
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3360c93a76a74d1182b912052973e08ffa868b43": {
      "type": "Ybodychange",
      "commitMessage": "Add setting for leniency on Gson instance.\n\nAdd a JsonReader factory (for parity with the JsonWriter one) which provides a configured instance using the Gson settings.\n",
      "commitDate": "1/18/16, 9:08 AM",
      "commitName": "3360c93a76a74d1182b912052973e08ffa868b43",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "12/26/15, 10:39 PM",
      "commitNameOld": "7a1c94f9863bfc6915eaa56236dcef46876d4674",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 22.44,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d newJsonReader(json);\n    T object \u003d (T) fromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 842,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,7 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n-    JsonReader jsonReader \u003d new JsonReader(json);\n+    JsonReader jsonReader \u003d newJsonReader(json);\n     T object \u003d (T) fromJson(jsonReader, typeOfT);\n     assertFullConsumption(object, jsonReader);\n     return object;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b373c20136eae1a821b173d106ed6c222f87fb13": {
      "type": "Ydocchange",
      "commitMessage": "Fixed issue 552 by documenting when fromJson returns null.\n",
      "commitDate": "3/29/14, 4:28 PM",
      "commitName": "b373c20136eae1a821b173d106ed6c222f87fb13",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "3/26/14, 11:07 AM",
      "commitNameOld": "c53e2551058b445b6adf5bc588456c2b33548e28",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    T object \u003d (T) fromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 781,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
        "newValue": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json. Returns {@code null} if {@code json} is at EOF.\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n"
      }
    },
    "756131d869465ac70abb9595653ea967e6812231": {
      "type": "Yannotationchange",
      "commitMessage": "removed Eclipse 3.7 warnings.\n",
      "commitDate": "12/4/11, 2:24 AM",
      "commitName": "756131d869465ac70abb9595653ea967e6812231",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "12/3/11, 11:46 AM",
      "commitNameOld": "f602bce9f536df971b8bfa01b7ffb111e2896c97",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    T object \u003d (T) fromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 720,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,6 +1,7 @@\n+@SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader \u003d new JsonReader(json);\n     T object \u003d (T) fromJson(jsonReader, typeOfT);\n     assertFullConsumption(object, jsonReader);\n     return object;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "",
        "newValue": "@SuppressWarnings(\"unchecked\")"
      }
    },
    "a92cf394e827089f8a10853ca5d5f0da6c23654c": {
      "type": "Ybodychange",
      "commitMessage": "Fix compile issues found during release.\n",
      "commitDate": "11/13/11, 12:04 PM",
      "commitName": "a92cf394e827089f8a10853ca5d5f0da6c23654c",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "11/12/11, 4:04 PM",
      "commitNameOld": "2cbddbbbc596f29331c37409ec07ecb9c09442b5",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 0.83,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    T object \u003d (T) fromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 684,
      "functionName": "fromJson",
      "functionAnnotation": "",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,6 +1,6 @@\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader \u003d new JsonReader(json);\n-    T object \u003d fromJson(jsonReader, typeOfT);\n+    T object \u003d (T) fromJson(jsonReader, typeOfT);\n     assertFullConsumption(object, jsonReader);\n     return object;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de727d8c4811209b2fdc6dbfa367f8bb7f78ba4e": {
      "type": "Ybodychange",
      "commitMessage": "Delete dead code found by coverage\n",
      "commitDate": "9/30/11, 7:04 PM",
      "commitName": "de727d8c4811209b2fdc6dbfa367f8bb7f78ba4e",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "9/30/11, 6:10 PM",
      "commitNameOld": "38ce53766ee5c98e5b9aeac58d8db14eca6de8a4",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    T object \u003d fromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 686,
      "functionName": "fromJson",
      "functionAnnotation": "",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,6 +1,6 @@\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader \u003d new JsonReader(json);\n-    T object \u003d this.\u003cT\u003efromJson(jsonReader, typeOfT);\n+    T object \u003d fromJson(jsonReader, typeOfT);\n     assertFullConsumption(object, jsonReader);\n     return object;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c5f5132d8cc9b3578070b8c570ccf8d8d2e8f8c": {
      "type": "Ybodychange",
      "commitMessage": "Revert most of r677: Required strings to be quoted even in lenient mode.  As far as Inderjeet and I can tell, this is consistent with Gson 1.5.\n",
      "commitDate": "11/24/10, 3:22 PM",
      "commitName": "1c5f5132d8cc9b3578070b8c570ccf8d8d2e8f8c",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "11/16/10, 2:14 PM",
      "commitNameOld": "0a3f5fa801954b07d0041d8a7dc6f87dc210a470",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    T object \u003d this.\u003cT\u003efromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 482,
      "functionName": "fromJson",
      "functionAnnotation": "",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,4 +1,6 @@\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader \u003d new JsonReader(json);\n-    return this.\u003cT\u003efromJson(jsonReader, typeOfT);\n+    T object \u003d this.\u003cT\u003efromJson(jsonReader, typeOfT);\n+    assertFullConsumption(object, jsonReader);\n+    return object;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a3f5fa801954b07d0041d8a7dc6f87dc210a470": {
      "type": "Ybodychange",
      "commitMessage": "Required strings to be quoted even in lenient mode.\n\nAs far as Inderjeet and I can tell, this is consistent with Gson 1.5.\n",
      "commitDate": "11/16/10, 2:14 PM",
      "commitName": "0a3f5fa801954b07d0041d8a7dc6f87dc210a470",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "11/11/10, 10:22 AM",
      "commitNameOld": "7d055fcb517a25e3cf141a867ec2b53264c40a19",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 5.16,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    return this.\u003cT\u003efromJson(jsonReader, typeOfT);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 480,
      "functionName": "fromJson",
      "functionAnnotation": "",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,6 +1,4 @@\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader \u003d new JsonReader(json);\n-    T object \u003d this.\u003cT\u003efromJson(jsonReader, typeOfT);\n-    assertFullConsumption(object, jsonReader);\n-    return object;\n+    return this.\u003cT\u003efromJson(jsonReader, typeOfT);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7d055fcb517a25e3cf141a867ec2b53264c40a19": {
      "type": "Ybodychange",
      "commitMessage": "Fixing fromJson type casting.\n",
      "commitDate": "11/11/10, 10:22 AM",
      "commitName": "7d055fcb517a25e3cf141a867ec2b53264c40a19",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "11/9/10, 6:02 PM",
      "commitNameOld": "32afd1a4e45e4ae42bb6bceb8a5823dfe8b44fa2",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 1.68,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    T object \u003d this.\u003cT\u003efromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 483,
      "functionName": "fromJson",
      "functionAnnotation": "",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,6 +1,6 @@\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     JsonReader jsonReader \u003d new JsonReader(json);\n-    T object \u003d fromJson(jsonReader, typeOfT);\n+    T object \u003d this.\u003cT\u003efromJson(jsonReader, typeOfT);\n     assertFullConsumption(object, jsonReader);\n     return object;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "32afd1a4e45e4ae42bb6bceb8a5823dfe8b44fa2": {
      "type": "Ybodychange",
      "commitMessage": "Fixing parsing of unquoted strings to be (somewhat) consistent with previous versions of Gson. The difference with this version is that Gson will throw a more specific exception rather than JsonParseException.\n",
      "commitDate": "11/9/10, 6:02 PM",
      "commitName": "32afd1a4e45e4ae42bb6bceb8a5823dfe8b44fa2",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "11/3/10, 12:46 PM",
      "commitNameOld": "10db917e9380ca4d741e06152fd1ee506666c1c3",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 6.26,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    T object \u003d fromJson(jsonReader, typeOfT);\n    assertFullConsumption(object, jsonReader);\n    return object;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 483,
      "functionName": "fromJson",
      "functionAnnotation": "",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
      "diff": "@@ -1,3 +1,6 @@\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n-    return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n+    JsonReader jsonReader \u003d new JsonReader(json);\n+    T object \u003d fromJson(jsonReader, typeOfT);\n+    assertFullConsumption(object, jsonReader);\n+    return object;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "10db917e9380ca4d741e06152fd1ee506666c1c3": {
      "type": "Ymultichange(Yexceptionschange,Ydocchange)",
      "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
      "commitDate": "11/3/10, 12:46 PM",
      "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 478,
          "functionName": "fromJson",
          "functionAnnotation": "",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
          "diff": "@@ -1,3 +1,3 @@\n-public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n+public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[JsonParseException]",
            "newValue": "[JsonIOException, JsonSyntaxException]"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Updated fromJson and toJson signatures to indicate the kind of exceptions (JsonIOException, JsonSyntaxException) that can be thrown.\n",
          "commitDate": "11/3/10, 12:46 PM",
          "commitName": "10db917e9380ca4d741e06152fd1ee506666c1c3",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "11/3/10, 6:28 AM",
          "commitNameOld": "83539c534c3cade5a05e633944420615b0b478ed",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 0.26,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n    return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 478,
          "functionName": "fromJson",
          "functionAnnotation": "",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n",
          "diff": "@@ -1,3 +1,3 @@\n-public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n+public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n     return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
            "newValue": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonIOException if there was a problem reading from the Reader\n@throws JsonSyntaxException if json is not a valid representation for an object of type\n@since 1.2\n"
          }
        }
      ]
    },
    "747e3c3051153779954e49b7dbc475daa678e1f4": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Support mixed streaming and databinding with new APIs.\n",
      "commitDate": "9/1/10, 5:15 PM",
      "commitName": "747e3c3051153779954e49b7dbc475daa678e1f4",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Support mixed streaming and databinding with new APIs.\n",
          "commitDate": "9/1/10, 5:15 PM",
          "commitName": "747e3c3051153779954e49b7dbc475daa678e1f4",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/1/10, 5:10 PM",
          "commitNameOld": "fa40b4c63a57e92e87b3fb6079b01fd5304a01c1",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 468,
          "functionName": "fromJson",
          "functionAnnotation": "",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
          "diff": "@@ -1,7 +1,3 @@\n-@SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n-    JsonReader jsonReader \u003d new JsonReader(json);\n-    jsonReader.setLenient(true);\n-    JsonElement root \u003d Streams.parse(jsonReader);\n-    return (T) fromJson(root, typeOfT);\n+    return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Support mixed streaming and databinding with new APIs.\n",
          "commitDate": "9/1/10, 5:15 PM",
          "commitName": "747e3c3051153779954e49b7dbc475daa678e1f4",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "9/1/10, 5:10 PM",
          "commitNameOld": "fa40b4c63a57e92e87b3fb6079b01fd5304a01c1",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 468,
          "functionName": "fromJson",
          "functionAnnotation": "",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
          "diff": "@@ -1,7 +1,3 @@\n-@SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n-    JsonReader jsonReader \u003d new JsonReader(json);\n-    jsonReader.setLenient(true);\n-    JsonElement root \u003d Streams.parse(jsonReader);\n-    return (T) fromJson(root, typeOfT);\n+    return this.\u003cT\u003efromJson(new JsonReader(json), typeOfT);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"unchecked\")",
            "newValue": ""
          }
        }
      ]
    },
    "fa40b4c63a57e92e87b3fb6079b01fd5304a01c1": {
      "type": "Ybodychange",
      "commitMessage": "Rename GsonReader to Streams; check that class in.\n",
      "commitDate": "9/1/10, 5:10 PM",
      "commitName": "fa40b4c63a57e92e87b3fb6079b01fd5304a01c1",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "8/26/10, 10:59 PM",
      "commitNameOld": "7a7bbf754cfabbcb56d090b982bf4b128e15938d",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 5.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    jsonReader.setLenient(true);\n    JsonElement root \u003d Streams.parse(jsonReader);\n    return (T) fromJson(root, typeOfT);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 443,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,7 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     JsonReader jsonReader \u003d new JsonReader(json);\n     jsonReader.setLenient(true);\n-    JsonElement root \u003d GsonReader.parse(jsonReader);\n+    JsonElement root \u003d Streams.parse(jsonReader);\n     return (T) fromJson(root, typeOfT);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7a7bbf754cfabbcb56d090b982bf4b128e15938d": {
      "type": "Ybodychange",
      "commitMessage": "Use JsonReader internally rather than JsonParserJavacc.\n\nFor raw parsing (ie. new JsonParser().parse()) the parse time has improved substantially. For example, JsonParserJavacc parsed my 48KiB buzz feed in 4.8ms. JsonReader parses the same feed in 0.9ms.\n\nhttp://microbenchmarks.appspot.com/run/limpbizkit@gmail.com/com.google.gson.GsonBenchmark/430001\n",
      "commitDate": "8/26/10, 10:59 PM",
      "commitName": "7a7bbf754cfabbcb56d090b982bf4b128e15938d",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "1/9/10, 2:43 PM",
      "commitNameOld": "e3af076ff271968a1a639c5bbdc1ba967b11ea94",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 229.3,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonReader jsonReader \u003d new JsonReader(json);\n    jsonReader.setLenient(true);\n    JsonElement root \u003d GsonReader.parse(jsonReader);\n    return (T) fromJson(root, typeOfT);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 443,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,6 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n-    JsonElement root \u003d new JsonParser().parse(json);\n-    T target \u003d (T) fromJson(root, typeOfT);\n-    return target;\n+    JsonReader jsonReader \u003d new JsonReader(json);\n+    jsonReader.setLenient(true);\n+    JsonElement root \u003d GsonReader.parse(jsonReader);\n+    return (T) fromJson(root, typeOfT);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "29ab864b2fda09ddee46554751f22f875c0ab736": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Fixed bug 158\n",
      "commitDate": "9/23/09, 10:17 AM",
      "commitName": "29ab864b2fda09ddee46554751f22f875c0ab736",
      "commitAuthor": "Inderjeet Singh",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fixed bug 158\n",
          "commitDate": "9/23/09, 10:17 AM",
          "commitName": "29ab864b2fda09ddee46554751f22f875c0ab736",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/22/09, 12:10 PM",
          "commitNameOld": "c5812bb485ff2ca86d67090b01b157f52c90e1fe",
          "commitAuthorOld": "Joel Leitch",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonElement root \u003d new JsonParser().parse(json);\n    T target \u003d (T) fromJson(root, typeOfT);\n    return target;\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 445,
          "functionName": "fromJson",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
          "diff": "@@ -1,5 +1,6 @@\n+@SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     JsonElement root \u003d new JsonParser().parse(json);\n-    T target \u003d fromJson(root, typeOfT);\n+    T target \u003d (T) fromJson(root, typeOfT);\n     return target;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Fixed bug 158\n",
          "commitDate": "9/23/09, 10:17 AM",
          "commitName": "29ab864b2fda09ddee46554751f22f875c0ab736",
          "commitAuthor": "Inderjeet Singh",
          "commitDateOld": "9/22/09, 12:10 PM",
          "commitNameOld": "c5812bb485ff2ca86d67090b01b157f52c90e1fe",
          "commitAuthorOld": "Joel Leitch",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonElement root \u003d new JsonParser().parse(json);\n    T target \u003d (T) fromJson(root, typeOfT);\n    return target;\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 445,
          "functionName": "fromJson",
          "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
          "diff": "@@ -1,5 +1,6 @@\n+@SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     JsonElement root \u003d new JsonParser().parse(json);\n-    T target \u003d fromJson(root, typeOfT);\n+    T target \u003d (T) fromJson(root, typeOfT);\n     return target;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@SuppressWarnings(\"unchecked\")"
          }
        }
      ]
    },
    "abf4ab2d78b2a7f3108fd7560145f45886f6b301": {
      "type": "Ymultichange(Ybodychange,Yannotationchange)",
      "commitMessage": "Fix project so it still compiles with JDK 1.5.\n",
      "commitDate": "5/19/09, 10:51 AM",
      "commitName": "abf4ab2d78b2a7f3108fd7560145f45886f6b301",
      "commitAuthor": "Joel Leitch",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Fix project so it still compiles with JDK 1.5.\n",
          "commitDate": "5/19/09, 10:51 AM",
          "commitName": "abf4ab2d78b2a7f3108fd7560145f45886f6b301",
          "commitAuthor": "Joel Leitch",
          "commitDateOld": "5/14/09, 1:18 PM",
          "commitNameOld": "6e59e502c2461c11d0e6099f10f65c666acabc45",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 4.9,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonElement root \u003d new JsonParser().parse(json);\n    T target \u003d fromJson(root, typeOfT);\n    return target;\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 411,
          "functionName": "fromJson",
          "functionAnnotation": "",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
          "diff": "@@ -1,5 +1,5 @@\n-@SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     JsonElement root \u003d new JsonParser().parse(json);\n-    return fromJson(root, typeOfT);\n+    T target \u003d fromJson(root, typeOfT);\n+    return target;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yannotationchange",
          "commitMessage": "Fix project so it still compiles with JDK 1.5.\n",
          "commitDate": "5/19/09, 10:51 AM",
          "commitName": "abf4ab2d78b2a7f3108fd7560145f45886f6b301",
          "commitAuthor": "Joel Leitch",
          "commitDateOld": "5/14/09, 1:18 PM",
          "commitNameOld": "6e59e502c2461c11d0e6099f10f65c666acabc45",
          "commitAuthorOld": "Inderjeet Singh",
          "daysBetweenCommits": 4.9,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonElement root \u003d new JsonParser().parse(json);\n    T target \u003d fromJson(root, typeOfT);\n    return target;\n}",
          "path": "gson/src/main/java/com/google/gson/Gson.java",
          "functionStartLine": 411,
          "functionName": "fromJson",
          "functionAnnotation": "",
          "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
          "diff": "@@ -1,5 +1,5 @@\n-@SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     JsonElement root \u003d new JsonParser().parse(json);\n-    return fromJson(root, typeOfT);\n+    T target \u003d fromJson(root, typeOfT);\n+    return target;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@SuppressWarnings(\"unchecked\")",
            "newValue": ""
          }
        }
      ]
    },
    "6e59e502c2461c11d0e6099f10f65c666acabc45": {
      "type": "Ybodychange",
      "commitMessage": "Refactored the Async parser interface out of JsonParser into a new class JsonParserAsync. Updated the JsonParser to detect Eof and return a null instead of throwing a ParseException.\n",
      "commitDate": "5/14/09, 1:18 PM",
      "commitName": "6e59e502c2461c11d0e6099f10f65c666acabc45",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "4/3/09, 2:33 PM",
      "commitNameOld": "b44bbbf5e70d2589e3293be1c91c63dba6b5bbfb",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 40.95,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonElement root \u003d new JsonParser().parse(json);\n    return fromJson(root, typeOfT);\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 412,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,7 +1,5 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     JsonElement root \u003d new JsonParser().parse(json);\n-    JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n-    T target \u003d (T) context.deserialize(root, typeOfT);\n-    return target;\n+    return fromJson(root, typeOfT);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c6d5a0d119481e7ca61b0884c881c6811d7af86": {
      "type": "Ybodychange",
      "commitMessage": "Remove unneeded exception handling in Gson class.\n",
      "commitDate": "4/1/09, 12:26 PM",
      "commitName": "5c6d5a0d119481e7ca61b0884c881c6811d7af86",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "4/1/09, 10:15 AM",
      "commitNameOld": "cee6c74960a5176d921eb16458cd053f39833639",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    JsonElement root \u003d new JsonParser().parse(json);\n    JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n    T target \u003d (T) context.deserialize(root, typeOfT);\n    return target;\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 375,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,13 +1,7 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n-    try {\n-        JsonElement root \u003d new JsonParser().parse(json);\n-        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n-        T target \u003d (T) context.deserialize(root, typeOfT);\n-        return target;\n-    } catch (StackOverflowError e) {\n-        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n-    } catch (OutOfMemoryError e) {\n-        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n-    }\n+    JsonElement root \u003d new JsonParser().parse(json);\n+    JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n+    T target \u003d (T) context.deserialize(root, typeOfT);\n+    return target;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2034090b15cfef51d81e860b1d49340147378618": {
      "type": "Ybodychange",
      "commitMessage": "Changed version to 1.3 \nMade JsonParser.parse a non-static method.\n",
      "commitDate": "3/31/09, 10:53 AM",
      "commitName": "2034090b15cfef51d81e860b1d49340147378618",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "3/27/09, 12:43 PM",
      "commitNameOld": "c9cb05fc720a8b041a7fbcf1068beb85a134674a",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 3.92,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    try {\n        JsonElement root \u003d new JsonParser().parse(json);\n        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n        T target \u003d (T) context.deserialize(root, typeOfT);\n        return target;\n    } catch (StackOverflowError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (OutOfMemoryError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 375,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,13 +1,13 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     try {\n-        JsonElement root \u003d JsonParser.parse(json);\n+        JsonElement root \u003d new JsonParser().parse(json);\n         JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n         T target \u003d (T) context.deserialize(root, typeOfT);\n         return target;\n     } catch (StackOverflowError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (OutOfMemoryError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2c7cc620d4975521dc5d1c54ea1c0b2247b4fdad": {
      "type": "Ybodychange",
      "commitMessage": "Exposed API for JsonParser and added methods to Gson to deserialize from a parse tree.\n",
      "commitDate": "2/3/09, 5:56 PM",
      "commitName": "2c7cc620d4975521dc5d1c54ea1c0b2247b4fdad",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "1/20/09, 12:38 AM",
      "commitNameOld": "764e4d9aca8139540f3b37ec3977c07e3e705127",
      "commitAuthorOld": "Joel Leitch",
      "daysBetweenCommits": 14.72,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    try {\n        JsonElement root \u003d JsonParser.parse(json);\n        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n        T target \u003d (T) context.deserialize(root, typeOfT);\n        return target;\n    } catch (StackOverflowError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (OutOfMemoryError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 364,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,18 +1,13 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     try {\n-        JsonParser parser \u003d new JsonParser(json);\n-        JsonElement root \u003d parser.parse();\n+        JsonElement root \u003d JsonParser.parse(json);\n         JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n         T target \u003d (T) context.deserialize(root, typeOfT);\n         return target;\n-    } catch (TokenMgrError e) {\n-        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n-    } catch (ParseException e) {\n-        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (StackOverflowError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (OutOfMemoryError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf2a457af7b0422e7728e0d55a4e794048af5a6b": {
      "type": "Ybodychange",
      "commitMessage": "Removed the TypeAdapter object from GSON now that the primitive objects and fields are created by a custom Type Adapter.\n",
      "commitDate": "11/14/08, 9:11 PM",
      "commitName": "cf2a457af7b0422e7728e0d55a4e794048af5a6b",
      "commitAuthor": "Joel Leitch",
      "commitDateOld": "10/30/08, 5:19 PM",
      "commitNameOld": "cc90a68241aa3ab849c0886b479da3a6449ba210",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 15.2,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    try {\n        JsonParser parser \u003d new JsonParser(json);\n        JsonElement root \u003d parser.parse();\n        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n        T target \u003d (T) context.deserialize(root, typeOfT);\n        return target;\n    } catch (TokenMgrError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (ParseException e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (StackOverflowError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (OutOfMemoryError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 367,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,18 +1,18 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     try {\n         JsonParser parser \u003d new JsonParser(json);\n         JsonElement root \u003d parser.parse();\n-        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor, typeAdapter);\n+        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n         T target \u003d (T) context.deserialize(root, typeOfT);\n         return target;\n     } catch (TokenMgrError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (ParseException e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (StackOverflowError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (OutOfMemoryError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9dfa454f6da6e88b51dba7840881feb874dbbdef": {
      "type": "Ybodychange",
      "commitMessage": "Fixed issue 63 where Gson could not operate in a thread-safe manner. Resolved the issue by recreating ObjectNavigatorFactory for each call instead of reusing the same object everywhere. This is needed since ObjectNavigatorFactory had MemoryRefStack that was incorrectly being shared across calls.\n",
      "commitDate": "10/20/08, 1:09 PM",
      "commitName": "9dfa454f6da6e88b51dba7840881feb874dbbdef",
      "commitAuthor": "Inderjeet Singh",
      "commitDateOld": "10/13/08, 11:40 AM",
      "commitNameOld": "2b9fd47b720f0743d69dfcc48bc04b471e37d240",
      "commitAuthorOld": "Inderjeet Singh",
      "daysBetweenCommits": 7.06,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    try {\n        JsonParser parser \u003d new JsonParser(json);\n        JsonElement root \u003d parser.parse();\n        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor, typeAdapter);\n        T target \u003d (T) context.deserialize(root, typeOfT);\n        return target;\n    } catch (TokenMgrError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (ParseException e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (StackOverflowError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (OutOfMemoryError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 375,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n",
      "diff": "@@ -1,18 +1,18 @@\n @SuppressWarnings(\"unchecked\")\n public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     try {\n         JsonParser parser \u003d new JsonParser(json);\n         JsonElement root \u003d parser.parse();\n-        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(navigatorFactory, deserializers, objectConstructor, typeAdapter);\n+        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(createDefaultObjectNavigatorFactory(), deserializers, objectConstructor, typeAdapter);\n         T target \u003d (T) context.deserialize(root, typeOfT);\n         return target;\n     } catch (TokenMgrError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (ParseException e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (StackOverflowError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (OutOfMemoryError e) {\n         throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "57d1f32de5bf3a7dd54613384cc7e979fba2660b": {
      "type": "Yintroduced",
      "commitMessage": "moved gson as a project under trunk\n",
      "commitDate": "8/31/08, 8:13 PM",
      "commitName": "57d1f32de5bf3a7dd54613384cc7e979fba2660b",
      "commitAuthor": "Inderjeet Singh",
      "diff": "@@ -0,0 +1,18 @@\n+@SuppressWarnings(\"unchecked\")\n+public \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n+    try {\n+        JsonParser parser \u003d new JsonParser(json);\n+        JsonElement root \u003d parser.parse();\n+        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(navigatorFactory, deserializers, objectConstructor, typeAdapter);\n+        T target \u003d (T) context.deserialize(root, typeOfT);\n+        return target;\n+    } catch (TokenMgrError e) {\n+        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n+    } catch (ParseException e) {\n+        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n+    } catch (StackOverflowError e) {\n+        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n+    } catch (OutOfMemoryError e) {\n+        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@SuppressWarnings(\"unchecked\")\npublic \u003cT\u003e T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n    try {\n        JsonParser parser \u003d new JsonParser(json);\n        JsonElement root \u003d parser.parse();\n        JsonDeserializationContext context \u003d new JsonDeserializationContextDefault(navigatorFactory, deserializers, objectConstructor, typeAdapter);\n        T target \u003d (T) context.deserialize(root, typeOfT);\n        return target;\n    } catch (TokenMgrError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (ParseException e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (StackOverflowError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    } catch (OutOfMemoryError e) {\n        throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n    }\n}",
      "path": "gson/src/main/java/com/google/gson/Gson.java",
      "functionStartLine": 372,
      "functionName": "fromJson",
      "functionAnnotation": "@SuppressWarnings(\"unchecked\")",
      "functionDoc": "This method deserializes the Json read from the specified reader into an object of the\nspecified type. This method is useful if the specified object is a generic type. For\nnon-generic objects, use {@link #fromJson(Reader, Class)} instead. If you have the Json in a\nString form instead of a {@link Reader}, use {@link #fromJson(String, Type)} instead.\n\n@param \u003cT\u003e the type of the desired object\n@param json the reader producing Json from which the object is to be deserialized\n@param typeOfT The specific genericized type of src. You can obtain this type by using the\n{@link com.google.gson.reflect.TypeToken} class. For example, to get the type for\n{@code Collection\u003cFoo\u003e}, you should use:\n\u003cpre\u003e\nType typeOfT \u003d new TypeToken\u0026lt;Collection\u0026lt;Foo\u0026gt;\u0026gt;(){}.getType();\n\u003c/pre\u003e\n@return an object of type T from the json\n@throws JsonParseException if json is not a valid representation for an object of type typeOfT\n@since 1.2\n"
    }
  }
}