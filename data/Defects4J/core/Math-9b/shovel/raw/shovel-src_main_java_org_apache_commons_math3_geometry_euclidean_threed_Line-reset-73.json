{
  "origin": "codeshovel",
  "repositoryName": "Math-9b",
  "repositoryPath": "/tmp/Math-9b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Line.java",
  "functionName": "reset",
  "functionId": "reset___p1-Vector3D(modifiers-final)__p2-Vector3D(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
  "functionAnnotation": "",
  "functionDoc": "Reset the instance as if built from two points.\n\n@param p1 first point belonging to the line (this can be any point)\n@param p2 second point belonging to the line (this can be any point, different from p1)\n@exception MathIllegalArgumentException if the points are equal\n",
  "functionStartLine": 73,
  "functionEndLine": 81,
  "numCommitsSeen": 17,
  "timeTaken": 12563,
  "changeHistory": [
    "fab7d8ecc61617c918013a7451bb6f1608dd870b",
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "02f92a3273d8a1352f2b2a549234566d23405f28",
    "2ca334be4b6aa077fbcf19c28952bb510e1c2e22",
    "71ab26d48b1ffde0e5ad0e59bb3619a8b9c5aec2",
    "6208e4010c0bfb79eb9f8ef9dadd6b4b3f275f6f",
    "da58a6460a83ce78df0832a5481c6d0a50a7675d"
  ],
  "changeHistoryShort": {
    "fab7d8ecc61617c918013a7451bb6f1608dd870b": "Yexceptionschange",
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "02f92a3273d8a1352f2b2a549234566d23405f28": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "2ca334be4b6aa077fbcf19c28952bb510e1c2e22": "Ymultichange(Ybodychange,Ydocchange)",
    "71ab26d48b1ffde0e5ad0e59bb3619a8b9c5aec2": "Ybodychange",
    "6208e4010c0bfb79eb9f8ef9dadd6b4b3f275f6f": "Yfilerename",
    "da58a6460a83ce78df0832a5481c6d0a50a7675d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fab7d8ecc61617c918013a7451bb6f1608dd870b": {
      "type": "Yexceptionschange",
      "commitMessage": "Populate throws declarations for geometry package.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1379977 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/2/12, 7:22 AM",
      "commitName": "fab7d8ecc61617c918013a7451bb6f1608dd870b",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "2/14/12, 8:17 AM",
      "commitNameOld": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 200.92,
      "commitsBetweenForRepo": 495,
      "commitsBetweenForFile": 1,
      "actualSource": "public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {\n    final Vector3D delta \u003d p2.subtract(p1);\n    final double norm2 \u003d delta.getNormSq();\n    if (norm2 \u003d\u003d 0.0) {\n        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n    }\n    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n}",
      "path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
      "functionStartLine": 75,
      "functionName": "reset",
      "functionAnnotation": "",
      "functionDoc": "Reset the instance as if built from two points.\n\n@param p1 first point belonging to the line (this can be any point)\n@param p2 second point belonging to the line (this can be any point, different from p1)\n@exception MathIllegalArgumentException if the points are equal\n",
      "diff": "@@ -1,9 +1,9 @@\n-public void reset(final Vector3D p1, final Vector3D p2) {\n+public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {\n     final Vector3D delta \u003d p2.subtract(p1);\n     final double norm2 \u003d delta.getNormSq();\n     if (norm2 \u003d\u003d 0.0) {\n         throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n     }\n     this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n     zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[MathIllegalArgumentException]"
      }
    },
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void reset(final Vector3D p1, final Vector3D p2) {\n    final Vector3D delta \u003d p2.subtract(p1);\n    final double norm2 \u003d delta.getNormSq();\n    if (norm2 \u003d\u003d 0.0) {\n        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n    }\n    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n}",
      "path": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
      "functionStartLine": 73,
      "functionName": "reset",
      "functionAnnotation": "",
      "functionDoc": "Reset the instance as if built from two points.\n\n@param p1 first point belonging to the line (this can be any point)\n@param p2 second point belonging to the line (this can be any point, different from p1)\n@exception MathIllegalArgumentException if the points are equal\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
        "newPath": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
        "oldMethodName": "reset",
        "newMethodName": "reset"
      }
    },
    "02f92a3273d8a1352f2b2a549234566d23405f28": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Added a 3D SubLine class.\n\nJIRA: MATH-593\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1159353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/18/11, 11:50 AM",
      "commitName": "02f92a3273d8a1352f2b2a549234566d23405f28",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Added a 3D SubLine class.\n\nJIRA: MATH-593\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1159353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/18/11, 11:50 AM",
          "commitName": "02f92a3273d8a1352f2b2a549234566d23405f28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "8/15/11, 11:20 AM",
          "commitNameOld": "2ca334be4b6aa077fbcf19c28952bb510e1c2e22",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public void reset(final Vector3D p1, final Vector3D p2) {\n    final Vector3D delta \u003d p2.subtract(p1);\n    final double norm2 \u003d delta.getNormSq();\n    if (norm2 \u003d\u003d 0.0) {\n        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n    }\n    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n}",
          "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
          "functionStartLine": 73,
          "functionName": "reset",
          "functionAnnotation": "",
          "functionDoc": "Reset the instance as if built from two points.\n\n@param p1 first point belonging to the line (this can be any point)\n@param p2 second point belonging to the line (this can be any point, different from p1)\n@exception MathIllegalArgumentException if the points are equal\n",
          "diff": "@@ -1,8 +1,9 @@\n-public void reset(final Vector3D p, final Vector3D dir) {\n-    final double norm \u003d dir.getNorm();\n-    if (norm \u003d\u003d 0.0) {\n-        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+public void reset(final Vector3D p1, final Vector3D p2) {\n+    final Vector3D delta \u003d p2.subtract(p1);\n+    final double norm2 \u003d delta.getNormSq();\n+    if (norm2 \u003d\u003d 0.0) {\n+        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n     }\n-    this.direction \u003d new Vector3D(1.0 / norm, dir);\n-    zero \u003d new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);\n+    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n+    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[p-Vector3D(modifiers-final), dir-Vector3D(modifiers-final)]",
            "newValue": "[p1-Vector3D(modifiers-final), p2-Vector3D(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added a 3D SubLine class.\n\nJIRA: MATH-593\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1159353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/18/11, 11:50 AM",
          "commitName": "02f92a3273d8a1352f2b2a549234566d23405f28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "8/15/11, 11:20 AM",
          "commitNameOld": "2ca334be4b6aa077fbcf19c28952bb510e1c2e22",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public void reset(final Vector3D p1, final Vector3D p2) {\n    final Vector3D delta \u003d p2.subtract(p1);\n    final double norm2 \u003d delta.getNormSq();\n    if (norm2 \u003d\u003d 0.0) {\n        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n    }\n    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n}",
          "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
          "functionStartLine": 73,
          "functionName": "reset",
          "functionAnnotation": "",
          "functionDoc": "Reset the instance as if built from two points.\n\n@param p1 first point belonging to the line (this can be any point)\n@param p2 second point belonging to the line (this can be any point, different from p1)\n@exception MathIllegalArgumentException if the points are equal\n",
          "diff": "@@ -1,8 +1,9 @@\n-public void reset(final Vector3D p, final Vector3D dir) {\n-    final double norm \u003d dir.getNorm();\n-    if (norm \u003d\u003d 0.0) {\n-        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+public void reset(final Vector3D p1, final Vector3D p2) {\n+    final Vector3D delta \u003d p2.subtract(p1);\n+    final double norm2 \u003d delta.getNormSq();\n+    if (norm2 \u003d\u003d 0.0) {\n+        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n     }\n-    this.direction \u003d new Vector3D(1.0 / norm, dir);\n-    zero \u003d new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);\n+    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n+    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Added a 3D SubLine class.\n\nJIRA: MATH-593\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1159353 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/18/11, 11:50 AM",
          "commitName": "02f92a3273d8a1352f2b2a549234566d23405f28",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "8/15/11, 11:20 AM",
          "commitNameOld": "2ca334be4b6aa077fbcf19c28952bb510e1c2e22",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 3.02,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "actualSource": "public void reset(final Vector3D p1, final Vector3D p2) {\n    final Vector3D delta \u003d p2.subtract(p1);\n    final double norm2 \u003d delta.getNormSq();\n    if (norm2 \u003d\u003d 0.0) {\n        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n    }\n    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n}",
          "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
          "functionStartLine": 73,
          "functionName": "reset",
          "functionAnnotation": "",
          "functionDoc": "Reset the instance as if built from two points.\n\n@param p1 first point belonging to the line (this can be any point)\n@param p2 second point belonging to the line (this can be any point, different from p1)\n@exception MathIllegalArgumentException if the points are equal\n",
          "diff": "@@ -1,8 +1,9 @@\n-public void reset(final Vector3D p, final Vector3D dir) {\n-    final double norm \u003d dir.getNorm();\n-    if (norm \u003d\u003d 0.0) {\n-        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+public void reset(final Vector3D p1, final Vector3D p2) {\n+    final Vector3D delta \u003d p2.subtract(p1);\n+    final double norm2 \u003d delta.getNormSq();\n+    if (norm2 \u003d\u003d 0.0) {\n+        throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n     }\n-    this.direction \u003d new Vector3D(1.0 / norm, dir);\n-    zero \u003d new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);\n+    this.direction \u003d new Vector3D(1.0 / FastMath.sqrt(norm2), delta);\n+    zero \u003d new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception MathArithmeticException if the direction norm is too small\n",
            "newValue": "Reset the instance as if built from two points.\n\n@param p1 first point belonging to the line (this can be any point)\n@param p2 second point belonging to the line (this can be any point, different from p1)\n@exception MathIllegalArgumentException if the points are equal\n"
          }
        }
      ]
    },
    "2ca334be4b6aa077fbcf19c28952bb510e1c2e22": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "clean up code, mainly replacing static dotProduct methods calls by non-static ones\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1157932 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/15/11, 11:20 AM",
      "commitName": "2ca334be4b6aa077fbcf19c28952bb510e1c2e22",
      "commitAuthor": "Luc Maisonobe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "clean up code, mainly replacing static dotProduct methods calls by non-static ones\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1157932 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/15/11, 11:20 AM",
          "commitName": "2ca334be4b6aa077fbcf19c28952bb510e1c2e22",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 72.9,
          "commitsBetweenForRepo": 190,
          "commitsBetweenForFile": 1,
          "actualSource": "public void reset(final Vector3D p, final Vector3D dir) {\n    final double norm \u003d dir.getNorm();\n    if (norm \u003d\u003d 0.0) {\n        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n    }\n    this.direction \u003d new Vector3D(1.0 / norm, dir);\n    zero \u003d new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);\n}",
          "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
          "functionStartLine": 72,
          "functionName": "reset",
          "functionAnnotation": "",
          "functionDoc": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception MathArithmeticException if the direction norm is too small\n",
          "diff": "@@ -1,8 +1,8 @@\n public void reset(final Vector3D p, final Vector3D dir) {\n     final double norm \u003d dir.getNorm();\n     if (norm \u003d\u003d 0.0) {\n-        throw new IllegalArgumentException(\"null norm\");\n+        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n     }\n     this.direction \u003d new Vector3D(1.0 / norm, dir);\n-    zero \u003d new Vector3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n+    zero \u003d new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "clean up code, mainly replacing static dotProduct methods calls by non-static ones\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1157932 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/15/11, 11:20 AM",
          "commitName": "2ca334be4b6aa077fbcf19c28952bb510e1c2e22",
          "commitAuthor": "Luc Maisonobe",
          "commitDateOld": "6/3/11, 1:49 PM",
          "commitNameOld": "98e22d778b3a886be253638b9a6b7ec075c3d62d",
          "commitAuthorOld": "Luc Maisonobe",
          "daysBetweenCommits": 72.9,
          "commitsBetweenForRepo": 190,
          "commitsBetweenForFile": 1,
          "actualSource": "public void reset(final Vector3D p, final Vector3D dir) {\n    final double norm \u003d dir.getNorm();\n    if (norm \u003d\u003d 0.0) {\n        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n    }\n    this.direction \u003d new Vector3D(1.0 / norm, dir);\n    zero \u003d new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);\n}",
          "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
          "functionStartLine": 72,
          "functionName": "reset",
          "functionAnnotation": "",
          "functionDoc": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception MathArithmeticException if the direction norm is too small\n",
          "diff": "@@ -1,8 +1,8 @@\n public void reset(final Vector3D p, final Vector3D dir) {\n     final double norm \u003d dir.getNorm();\n     if (norm \u003d\u003d 0.0) {\n-        throw new IllegalArgumentException(\"null norm\");\n+        throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n     }\n     this.direction \u003d new Vector3D(1.0 / norm, dir);\n-    zero \u003d new Vector3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n+    zero \u003d new Vector3D(1.0, p, -p.dotProduct(this.direction), this.direction);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception IllegalArgumentException if the direction norm is too small\n",
            "newValue": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception MathArithmeticException if the direction norm is too small\n"
          }
        }
      ]
    },
    "71ab26d48b1ffde0e5ad0e59bb3619a8b9c5aec2": {
      "type": "Ybodychange",
      "commitMessage": "use the reorganized Binary Space Partitioning framework for Euclidean spaces 1D, 2D and 3D.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1131127 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/3/11, 11:08 AM",
      "commitName": "71ab26d48b1ffde0e5ad0e59bb3619a8b9c5aec2",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "5/19/11, 2:59 AM",
      "commitNameOld": "6fb7c7a5a7b7913a615671d4b3cbd1e14f5475a4",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 15.34,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void reset(final Vector3D p, final Vector3D dir) {\n    final double norm \u003d dir.getNorm();\n    if (norm \u003d\u003d 0.0) {\n        throw new IllegalArgumentException(\"null norm\");\n    }\n    this.direction \u003d new Vector3D(1.0 / norm, dir);\n    zero \u003d new Vector3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n}",
      "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
      "functionStartLine": 59,
      "functionName": "reset",
      "functionAnnotation": "",
      "functionDoc": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception IllegalArgumentException if the direction norm is too small\n",
      "diff": "@@ -1,8 +1,8 @@\n public void reset(final Vector3D p, final Vector3D dir) {\n     final double norm \u003d dir.getNorm();\n     if (norm \u003d\u003d 0.0) {\n         throw new IllegalArgumentException(\"null norm\");\n     }\n     this.direction \u003d new Vector3D(1.0 / norm, dir);\n-    zero \u003d new Point3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n+    zero \u003d new Vector3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6208e4010c0bfb79eb9f8ef9dadd6b4b3f275f6f": {
      "type": "Yfilerename",
      "commitMessage": "renamed packages oneD, twoD and threeD into oned, twod and threed\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1124619 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/19/11, 2:12 AM",
      "commitName": "6208e4010c0bfb79eb9f8ef9dadd6b4b3f275f6f",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "5/18/11, 12:55 PM",
      "commitNameOld": "4e00cdfe27fcf001636018818089ceefd0dc7344",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.55,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void reset(final Vector3D p, final Vector3D dir) {\n    final double norm \u003d dir.getNorm();\n    if (norm \u003d\u003d 0.0) {\n        throw new IllegalArgumentException(\"null norm\");\n    }\n    this.direction \u003d new Vector3D(1.0 / norm, dir);\n    zero \u003d new Point3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n}",
      "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java",
      "functionStartLine": 57,
      "functionName": "reset",
      "functionAnnotation": "",
      "functionDoc": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception IllegalArgumentException if the direction norm is too small\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java",
        "newPath": "src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java"
      }
    },
    "da58a6460a83ce78df0832a5481c6d0a50a7675d": {
      "type": "Yintroduced",
      "commitMessage": "A complete generic implementation of Binary Space Partitioning Trees (BSP trees)\nhas been added. A few specializations of this implementation are also provided\nfor 1D, 2D and 3D Euclidean geometry. This allows support for arbitrary\nintervals sets (1D), polygons sets (2D) and polyhedrons sets (3D) with all\nsets operations (union, intersection, symmetric difference, difference, complement),\nwith predicates (point inside/outside/on boundary, emptiness, other region contained),\nwith geometrical computation (barycenter, size, boundary size) and with conversions\nfrom and to boundary representation.\n\nJIRA: MATH-576\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1103438 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/15/11, 9:02 AM",
      "commitName": "da58a6460a83ce78df0832a5481c6d0a50a7675d",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,8 @@\n+public void reset(final Vector3D p, final Vector3D dir) {\n+    final double norm \u003d dir.getNorm();\n+    if (norm \u003d\u003d 0.0) {\n+        throw new IllegalArgumentException(\"null norm\");\n+    }\n+    this.direction \u003d new Vector3D(1.0 / norm, dir);\n+    zero \u003d new Point3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void reset(final Vector3D p, final Vector3D dir) {\n    final double norm \u003d dir.getNorm();\n    if (norm \u003d\u003d 0.0) {\n        throw new IllegalArgumentException(\"null norm\");\n    }\n    this.direction \u003d new Vector3D(1.0 / norm, dir);\n    zero \u003d new Point3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);\n}",
      "path": "src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Line.java",
      "functionStartLine": 57,
      "functionName": "reset",
      "functionAnnotation": "",
      "functionDoc": "Reset the instance as if built from a point and a normal.\n\n@param p point belonging to the line (this can be any point)\n@param dir direction of the line\n@exception IllegalArgumentException if the direction norm is too small\n"
    }
  }
}