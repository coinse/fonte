{
  "origin": "codeshovel",
  "repositoryName": "Math-9b",
  "repositoryPath": "/tmp/Math-9b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MathArrays.java",
  "functionName": "linearCombination",
  "functionId": "linearCombination___a1-double(modifiers-final)__b1-double(modifiers-final)__a2-double(modifiers-final)__b2-double(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
  "functionAnnotation": "",
  "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n",
  "functionStartLine": 851,
  "functionEndLine": 905,
  "numCommitsSeen": 97,
  "timeTaken": 15453,
  "changeHistory": [
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
    "dd4efa43349e74832b092ba33a92275b68cab9d3",
    "7e8fbc33026c7556b54f10fb723cc1fc2938e150",
    "d4f113c5573262a1995e05d65a3b0a0da4d434af",
    "058ce107b6eace6757ebe498e40a5aa929297c7b",
    "ef9041f2d689c0881653fea8fc237627ddcda341"
  ],
  "changeHistoryShort": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": "Ymovefromfile",
    "dd4efa43349e74832b092ba33a92275b68cab9d3": "Ymultichange(Ymovefromfile,Yformatchange)",
    "7e8fbc33026c7556b54f10fb723cc1fc2938e150": "Ybodychange",
    "d4f113c5573262a1995e05d65a3b0a0da4d434af": "Ybodychange",
    "058ce107b6eace6757ebe498e40a5aa929297c7b": "Ybodychange",
    "ef9041f2d689c0881653fea8fc237627ddcda341": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd": {
      "type": "Ymovefromfile",
      "commitMessage": "MATH-444\nBase package name change: \"o.a.c.math\" -\u003e \"o.a.c.math3\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1244107 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/14/12, 8:17 AM",
      "commitName": "2d698e4905cb75bd125e2fe1f5223d7e68f0adcd",
      "commitAuthor": "Gilles Sadowski",
      "commitDateOld": "2/14/12, 6:34 AM",
      "commitNameOld": "53257329dd394be1333b38bae787bf0cf19dc900",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n    final double ca1 \u003d SPLIT_FACTOR * a1;\n    final double a1High \u003d ca1 - (ca1 - a1);\n    final double a1Low \u003d a1 - a1High;\n    final double cb1 \u003d SPLIT_FACTOR * b1;\n    final double b1High \u003d cb1 - (cb1 - b1);\n    final double b1Low \u003d b1 - b1High;\n    final double prod1High \u003d a1 * b1;\n    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n    final double ca2 \u003d SPLIT_FACTOR * a2;\n    final double a2High \u003d ca2 - (ca2 - a2);\n    final double a2Low \u003d a2 - a2High;\n    final double cb2 \u003d SPLIT_FACTOR * b2;\n    final double b2High \u003d cb2 - (cb2 - b2);\n    final double b2Low \u003d b2 - b2High;\n    final double prod2High \u003d a2 * b2;\n    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n    final double s12High \u003d prod1High + prod2High;\n    final double s12Prime \u003d s12High - prod2High;\n    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n    double result \u003d s12High + (prod1Low + prod2Low + s12Low);\n    if (Double.isNaN(result)) {\n        result \u003d a1 * b1 + a2 * b2;\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
      "functionStartLine": 658,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/math/util/MathArrays.java",
        "newPath": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
        "oldMethodName": "linearCombination",
        "newMethodName": "linearCombination"
      }
    },
    "dd4efa43349e74832b092ba33a92275b68cab9d3": {
      "type": "Ymultichange(Ymovefromfile,Yformatchange)",
      "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/11, 3:55 PM",
      "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
      "commitAuthor": "Gilles Sadowski",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11, 3:55 PM",
          "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "10/10/11, 3:35 PM",
          "commitNameOld": "b59e97464fc8d910c06b90c06598d7176ce1924a",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n    final double ca1 \u003d SPLIT_FACTOR * a1;\n    final double a1High \u003d ca1 - (ca1 - a1);\n    final double a1Low \u003d a1 - a1High;\n    final double cb1 \u003d SPLIT_FACTOR * b1;\n    final double b1High \u003d cb1 - (cb1 - b1);\n    final double b1Low \u003d b1 - b1High;\n    final double prod1High \u003d a1 * b1;\n    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n    final double ca2 \u003d SPLIT_FACTOR * a2;\n    final double a2High \u003d ca2 - (ca2 - a2);\n    final double a2Low \u003d a2 - a2High;\n    final double cb2 \u003d SPLIT_FACTOR * b2;\n    final double b2High \u003d cb2 - (cb2 - b2);\n    final double b2Low \u003d b2 - b2High;\n    final double prod2High \u003d a2 * b2;\n    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n    final double s12High \u003d prod1High + prod2High;\n    final double s12Prime \u003d s12High - prod2High;\n    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n    double result \u003d s12High + (prod1Low + prod2Low + s12Low);\n    if (Double.isNaN(result)) {\n        result \u003d a1 * b1 + a2 * b2;\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathArrays.java",
          "functionStartLine": 654,
          "functionName": "linearCombination",
          "functionAnnotation": "",
          "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n",
          "diff": "",
          "extendedDetails": {
            "oldPath": "src/main/java/org/apache/commons/math/util/MathUtils.java",
            "newPath": "src/main/java/org/apache/commons/math/util/MathArrays.java",
            "oldMethodName": "linearCombination",
            "newMethodName": "linearCombination"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "MATH-689\nMoved arrays utilities from \"MathUtils\" to \"MathArrays\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1182134 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/11/11, 3:55 PM",
          "commitName": "dd4efa43349e74832b092ba33a92275b68cab9d3",
          "commitAuthor": "Gilles Sadowski",
          "commitDateOld": "10/10/11, 3:35 PM",
          "commitNameOld": "b59e97464fc8d910c06b90c06598d7176ce1924a",
          "commitAuthorOld": "Gilles Sadowski",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n    final double ca1 \u003d SPLIT_FACTOR * a1;\n    final double a1High \u003d ca1 - (ca1 - a1);\n    final double a1Low \u003d a1 - a1High;\n    final double cb1 \u003d SPLIT_FACTOR * b1;\n    final double b1High \u003d cb1 - (cb1 - b1);\n    final double b1Low \u003d b1 - b1High;\n    final double prod1High \u003d a1 * b1;\n    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n    final double ca2 \u003d SPLIT_FACTOR * a2;\n    final double a2High \u003d ca2 - (ca2 - a2);\n    final double a2Low \u003d a2 - a2High;\n    final double cb2 \u003d SPLIT_FACTOR * b2;\n    final double b2High \u003d cb2 - (cb2 - b2);\n    final double b2Low \u003d b2 - b2High;\n    final double prod2High \u003d a2 * b2;\n    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n    final double s12High \u003d prod1High + prod2High;\n    final double s12Prime \u003d s12High - prod2High;\n    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n    double result \u003d s12High + (prod1Low + prod2Low + s12Low);\n    if (Double.isNaN(result)) {\n        result \u003d a1 * b1 + a2 * b2;\n    }\n    return result;\n}",
          "path": "src/main/java/org/apache/commons/math/util/MathArrays.java",
          "functionStartLine": 654,
          "functionName": "linearCombination",
          "functionAnnotation": "",
          "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "7e8fbc33026c7556b54f10fb723cc1fc2938e150": {
      "type": "Ybodychange",
      "commitMessage": "Fixed null handling in varargs for sortInPlace, improved javadoc, addeed tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1180314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/7/11, 10:03 PM",
      "commitName": "7e8fbc33026c7556b54f10fb723cc1fc2938e150",
      "commitAuthor": "Phil Steitz",
      "commitDateOld": "9/23/11, 6:08 AM",
      "commitNameOld": "d5d62a5da7bf34166cd02ce09fc5f7e620146ac0",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 14.66,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n    final double ca1 \u003d SPLIT_FACTOR * a1;\n    final double a1High \u003d ca1 - (ca1 - a1);\n    final double a1Low \u003d a1 - a1High;\n    final double cb1 \u003d SPLIT_FACTOR * b1;\n    final double b1High \u003d cb1 - (cb1 - b1);\n    final double b1Low \u003d b1 - b1High;\n    final double prod1High \u003d a1 * b1;\n    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n    final double ca2 \u003d SPLIT_FACTOR * a2;\n    final double a2High \u003d ca2 - (ca2 - a2);\n    final double a2Low \u003d a2 - a2High;\n    final double cb2 \u003d SPLIT_FACTOR * b2;\n    final double b2High \u003d cb2 - (cb2 - b2);\n    final double b2Low \u003d b2 - b2High;\n    final double prod2High \u003d a2 * b2;\n    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n    final double s12High \u003d prod1High + prod2High;\n    final double s12Prime \u003d s12High - prod2High;\n    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n    double result \u003d s12High + (prod1Low + prod2Low + s12Low);\n    if (Double.isNaN(result)) {\n        result \u003d a1 * b1 + a2 * b2;\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2478,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n",
      "diff": "",
      "extendedDetails": {}
    },
    "d4f113c5573262a1995e05d65a3b0a0da4d434af": {
      "type": "Ybodychange",
      "commitMessage": "Fixed handling of Infinite and NaN coefficients in linearCombination\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1157994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/15/11, 1:31 PM",
      "commitName": "d4f113c5573262a1995e05d65a3b0a0da4d434af",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/6/11, 4:02 AM",
      "commitNameOld": "8afbbb7af8f4e174419afa42cee2f9e5a055b769",
      "commitAuthorOld": "Gilles Sadowski",
      "daysBetweenCommits": 9.4,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n    final double ca1 \u003d SPLIT_FACTOR * a1;\n    final double a1High \u003d ca1 - (ca1 - a1);\n    final double a1Low \u003d a1 - a1High;\n    final double cb1 \u003d SPLIT_FACTOR * b1;\n    final double b1High \u003d cb1 - (cb1 - b1);\n    final double b1Low \u003d b1 - b1High;\n    final double prod1High \u003d a1 * b1;\n    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n    final double ca2 \u003d SPLIT_FACTOR * a2;\n    final double a2High \u003d ca2 - (ca2 - a2);\n    final double a2Low \u003d a2 - a2High;\n    final double cb2 \u003d SPLIT_FACTOR * b2;\n    final double b2High \u003d cb2 - (cb2 - b2);\n    final double b2Low \u003d b2 - b2High;\n    final double prod2High \u003d a2 * b2;\n    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n    final double s12High \u003d prod1High + prod2High;\n    final double s12Prime \u003d s12High - prod2High;\n    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n    double result \u003d s12High + (prod1Low + prod2Low + s12Low);\n    if (Double.isNaN(result)) {\n        result \u003d a1 * b1 + a2 * b2;\n    }\n    return result;\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2360,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n",
      "diff": "@@ -1,22 +1,26 @@\n public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n     final double ca1 \u003d SPLIT_FACTOR * a1;\n     final double a1High \u003d ca1 - (ca1 - a1);\n     final double a1Low \u003d a1 - a1High;\n     final double cb1 \u003d SPLIT_FACTOR * b1;\n     final double b1High \u003d cb1 - (cb1 - b1);\n     final double b1Low \u003d b1 - b1High;\n     final double prod1High \u003d a1 * b1;\n     final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n     final double ca2 \u003d SPLIT_FACTOR * a2;\n     final double a2High \u003d ca2 - (ca2 - a2);\n     final double a2Low \u003d a2 - a2High;\n     final double cb2 \u003d SPLIT_FACTOR * b2;\n     final double b2High \u003d cb2 - (cb2 - b2);\n     final double b2Low \u003d b2 - b2High;\n     final double prod2High \u003d a2 * b2;\n     final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n     final double s12High \u003d prod1High + prod2High;\n     final double s12Prime \u003d s12High - prod2High;\n     final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n-    return s12High + (prod1Low + prod2Low + s12Low);\n+    double result \u003d s12High + (prod1Low + prod2Low + s12Low);\n+    if (Double.isNaN(result)) {\n+        result \u003d a1 * b1 + a2 * b2;\n+    }\n+    return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "058ce107b6eace6757ebe498e40a5aa929297c7b": {
      "type": "Ybodychange",
      "commitMessage": "fixed typos, it\u0027s IEEE754, not IEEE753 ...\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1154356 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/5/11, 12:12 PM",
      "commitName": "058ce107b6eace6757ebe498e40a5aa929297c7b",
      "commitAuthor": "Luc Maisonobe",
      "commitDateOld": "8/5/11, 8:01 AM",
      "commitNameOld": "ef9041f2d689c0881653fea8fc237627ddcda341",
      "commitAuthorOld": "Luc Maisonobe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n    final double ca1 \u003d SPLIT_FACTOR * a1;\n    final double a1High \u003d ca1 - (ca1 - a1);\n    final double a1Low \u003d a1 - a1High;\n    final double cb1 \u003d SPLIT_FACTOR * b1;\n    final double b1High \u003d cb1 - (cb1 - b1);\n    final double b1Low \u003d b1 - b1High;\n    final double prod1High \u003d a1 * b1;\n    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n    final double ca2 \u003d SPLIT_FACTOR * a2;\n    final double a2High \u003d ca2 - (ca2 - a2);\n    final double a2Low \u003d a2 - a2High;\n    final double cb2 \u003d SPLIT_FACTOR * b2;\n    final double b2High \u003d cb2 - (cb2 - b2);\n    final double b2Low \u003d b2 - b2High;\n    final double prod2High \u003d a2 * b2;\n    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n    final double s12High \u003d prod1High + prod2High;\n    final double s12Prime \u003d s12High - prod2High;\n    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n    return s12High + (prod1Low + prod2Low + s12Low);\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2360,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n",
      "diff": "",
      "extendedDetails": {}
    },
    "ef9041f2d689c0881653fea8fc237627ddcda341": {
      "type": "Yintroduced",
      "commitMessage": "Added a few linearCombination utility methods in MathUtils to compute accurately\nlinear combinations a1.b1 + a2.b2 + ... + an.bn taking great care to compensate\nfor cancellation effects. This both improves and simplify several methods in\neuclidean geometry classes, including linear constructors, dot product and cross\nproduct.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1154250 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/5/11, 8:01 AM",
      "commitName": "ef9041f2d689c0881653fea8fc237627ddcda341",
      "commitAuthor": "Luc Maisonobe",
      "diff": "@@ -0,0 +1,22 @@\n+public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n+    final double ca1 \u003d SPLIT_FACTOR * a1;\n+    final double a1High \u003d ca1 - (ca1 - a1);\n+    final double a1Low \u003d a1 - a1High;\n+    final double cb1 \u003d SPLIT_FACTOR * b1;\n+    final double b1High \u003d cb1 - (cb1 - b1);\n+    final double b1Low \u003d b1 - b1High;\n+    final double prod1High \u003d a1 * b1;\n+    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n+    final double ca2 \u003d SPLIT_FACTOR * a2;\n+    final double a2High \u003d ca2 - (ca2 - a2);\n+    final double a2Low \u003d a2 - a2High;\n+    final double cb2 \u003d SPLIT_FACTOR * b2;\n+    final double b2High \u003d cb2 - (cb2 - b2);\n+    final double b2Low \u003d b2 - b2High;\n+    final double prod2High \u003d a2 * b2;\n+    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n+    final double s12High \u003d prod1High + prod2High;\n+    final double s12Prime \u003d s12High - prod2High;\n+    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n+    return s12High + (prod1Low + prod2Low + s12Low);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public static double linearCombination(final double a1, final double b1, final double a2, final double b2) {\n    final double ca1 \u003d SPLIT_FACTOR * a1;\n    final double a1High \u003d ca1 - (ca1 - a1);\n    final double a1Low \u003d a1 - a1High;\n    final double cb1 \u003d SPLIT_FACTOR * b1;\n    final double b1High \u003d cb1 - (cb1 - b1);\n    final double b1Low \u003d b1 - b1High;\n    final double prod1High \u003d a1 * b1;\n    final double prod1Low \u003d a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);\n    final double ca2 \u003d SPLIT_FACTOR * a2;\n    final double a2High \u003d ca2 - (ca2 - a2);\n    final double a2Low \u003d a2 - a2High;\n    final double cb2 \u003d SPLIT_FACTOR * b2;\n    final double b2High \u003d cb2 - (cb2 - b2);\n    final double b2Low \u003d b2 - b2High;\n    final double prod2High \u003d a2 * b2;\n    final double prod2Low \u003d a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);\n    final double s12High \u003d prod1High + prod2High;\n    final double s12Prime \u003d s12High - prod2High;\n    final double s12Low \u003d (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);\n    return s12High + (prod1Low + prod2Low + s12Low);\n}",
      "path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
      "functionStartLine": 2360,
      "functionName": "linearCombination",
      "functionAnnotation": "",
      "functionDoc": "Compute a linear combination accurately.\n\u003cp\u003e\nThis method computes a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e to high accuracy. It does\nso by using specific multiplication and addition algorithms to\npreserve accuracy and reduce cancellation effects. It is based\non the 2005 paper \u003ca\nhref\u003d\"http://citeseerx.ist.psu.edu/viewdoc/summary?doi\u003d10.1.1.2.1547\"\u003e\nAccurate Sum and Dot Product\u003c/a\u003e by Takeshi Ogita,\nSiegfried M. Rump, and Shin\u0027ichi Oishi published in SIAM J. Sci. Comput.\n\u003c/p\u003e\n\n@param a1 first factor of the first term\n@param b1 second factor of the first term\n@param a2 first factor of the second term\n@param b2 second factor of the second term\n@return a\u003csub\u003e1\u003c/sub\u003e\u0026times;b\u003csub\u003e1\u003c/sub\u003e +\na\u003csub\u003e2\u003c/sub\u003e\u0026times;b\u003csub\u003e2\u003c/sub\u003e\n@see #linearCombination(double, double, double, double, double, double)\n@see #linearCombination(double, double, double, double, double, double, double, double)\n"
    }
  }
}