{
  "origin": "codeshovel",
  "repositoryName": "Csv-6b",
  "repositoryPath": "/tmp/Csv-6b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Lexer.java",
  "functionName": "parseSimpleToken",
  "functionId": "parseSimpleToken___token-Token(modifiers-final)__ch-int",
  "sourceFilePath": "src/main/java/org/apache/commons/csv/Lexer.java",
  "functionAnnotation": "",
  "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param ch the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
  "functionStartLine": 185,
  "functionEndLine": 217,
  "numCommitsSeen": 304,
  "timeTaken": 2722,
  "changeHistory": [
    "8e18054f3b6cd6fa619853354678d4d528345315",
    "65f6f1dfe8c1fde8c122b5a074d1e3498eb048c0",
    "a0624779468261996e7e6e5c7a63ba1ce1a3a553",
    "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf",
    "2c6120826245f89fedf2f936ab4a0c3edd8717f3",
    "9107316c0b58e843c3412d906845b0ef604d0764",
    "c4014b6b38c9f661a12557db7ee464e158f386f7",
    "2a8ce4a11cf42683d7abf06c591b4c0f1e8928e1",
    "3655efcedbf804408a433cbbd25eef3fc91c675a",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
    "93fc1f9363d911cb0a974f993d9266a89a63c41e",
    "19ba389fe8194bb6c22102b32e021d8487e1e307",
    "ba26844c7bca3e42036f626cd61de9d40550b76f",
    "911433707587a42727da375e1ec0e53dc909ac8d",
    "38741a48c692ae2fc13cd2445e77ace6ecea1156",
    "dd26201ac47f60cd9e18800726cc28660b81bdaf",
    "fa07dea5850eb11bb7b4dc06823802156b89baaf",
    "83e4a903b18c43a10caa551c50ece4e251a0f674",
    "38670dbe9232dc9b56d6464c42293e745974cf60",
    "3cb5801a985c0d6a9ca3dc794b4e89a292b4a9c6",
    "9141cb39e6659340574a96b41d7f463ebdc2610e",
    "00d0def6953d414af6ecf36a9584c5453ee39c29",
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
    "16bfec07ffd785e5abbabdc4145eeac5cccc2c79",
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8",
    "42476f4b08fe4b075aa36f688f0801857f3635d9",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
    "086f434320e68a82ce1adcac69668ffcd7f48e52",
    "b55fb21d78e30748ae19f1c8d16902439643799a",
    "d7e94581d784067fccddd34e19ae46aea526f9fa",
    "45d972fe5b7807db5f5bb6fed182f107993da5a4",
    "eac54a225bc974157e914cf66cfa598171022018",
    "f047581f9526aad1c9c9e624710a4e860f88ecaa",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955"
  ],
  "changeHistoryShort": {
    "8e18054f3b6cd6fa619853354678d4d528345315": "Ybodychange",
    "65f6f1dfe8c1fde8c122b5a074d1e3498eb048c0": "Yfilerename",
    "a0624779468261996e7e6e5c7a63ba1ce1a3a553": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
    "2c6120826245f89fedf2f936ab4a0c3edd8717f3": "Ybodychange",
    "9107316c0b58e843c3412d906845b0ef604d0764": "Ydocchange",
    "c4014b6b38c9f661a12557db7ee464e158f386f7": "Ymultichange(Yrename,Ydocchange)",
    "2a8ce4a11cf42683d7abf06c591b4c0f1e8928e1": "Ybodychange",
    "3655efcedbf804408a433cbbd25eef3fc91c675a": "Ybodychange",
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": "Yparametermetachange",
    "93fc1f9363d911cb0a974f993d9266a89a63c41e": "Ydocchange",
    "19ba389fe8194bb6c22102b32e021d8487e1e307": "Ybodychange",
    "ba26844c7bca3e42036f626cd61de9d40550b76f": "Ybodychange",
    "911433707587a42727da375e1ec0e53dc909ac8d": "Ybodychange",
    "38741a48c692ae2fc13cd2445e77ace6ecea1156": "Ybodychange",
    "dd26201ac47f60cd9e18800726cc28660b81bdaf": "Ybodychange",
    "fa07dea5850eb11bb7b4dc06823802156b89baaf": "Ybodychange",
    "83e4a903b18c43a10caa551c50ece4e251a0f674": "Ybodychange",
    "38670dbe9232dc9b56d6464c42293e745974cf60": "Ymovefromfile",
    "3cb5801a985c0d6a9ca3dc794b4e89a292b4a9c6": "Ybodychange",
    "9141cb39e6659340574a96b41d7f463ebdc2610e": "Ybodychange",
    "00d0def6953d414af6ecf36a9584c5453ee39c29": "Ybodychange",
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512": "Ydocchange",
    "16bfec07ffd785e5abbabdc4145eeac5cccc2c79": "Ymultichange(Ybodychange,Ydocchange)",
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8": "Ybodychange",
    "42476f4b08fe4b075aa36f688f0801857f3635d9": "Ybodychange",
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": "Yfilerename",
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": "Ymultichange(Ydocchange,Yformatchange)",
    "086f434320e68a82ce1adcac69668ffcd7f48e52": "Ybodychange",
    "b55fb21d78e30748ae19f1c8d16902439643799a": "Ybodychange",
    "d7e94581d784067fccddd34e19ae46aea526f9fa": "Ybodychange",
    "45d972fe5b7807db5f5bb6fed182f107993da5a4": "Ybodychange",
    "eac54a225bc974157e914cf66cfa598171022018": "Ybodychange",
    "f047581f9526aad1c9c9e624710a4e860f88ecaa": "Ybodychange",
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": "Yfilerename",
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e18054f3b6cd6fa619853354678d4d528345315": {
      "type": "Ybodychange",
      "commitMessage": "Better ivar name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1585096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/5/14, 7:06 AM",
      "commitName": "8e18054f3b6cd6fa619853354678d4d528345315",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "8/10/13, 4:46 AM",
      "commitNameOld": "5a30b37043f6ca88fc3ca93b2c5f81744995e663",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 238.1,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n    while (true) {\n        if (readEndOfLine(ch)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(ch)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(ch)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(ch)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) ch).append((char) reader.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            ch \u003d reader.read();\n        } else {\n            token.content.append((char) ch);\n            ch \u003d reader.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
      "path": "src/main/java/org/apache/commons/csv/Lexer.java",
      "functionStartLine": 185,
      "functionName": "parseSimpleToken",
      "functionAnnotation": "",
      "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param ch the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "@@ -1,30 +1,30 @@\n private Token parseSimpleToken(final Token token, int ch) throws IOException {\n     while (true) {\n         if (readEndOfLine(ch)) {\n             token.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(ch)) {\n             token.type \u003d EOF;\n             token.isReady \u003d true;\n             break;\n         } else if (isDelimiter(ch)) {\n             token.type \u003d TOKEN;\n             break;\n         } else if (isEscape(ch)) {\n             final int unescaped \u003d readEscape();\n             if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n-                token.content.append((char) ch).append((char) in.getLastChar());\n+                token.content.append((char) ch).append((char) reader.getLastChar());\n             } else {\n                 token.content.append((char) unescaped);\n             }\n-            ch \u003d in.read();\n+            ch \u003d reader.read();\n         } else {\n             token.content.append((char) ch);\n-            ch \u003d in.read();\n+            ch \u003d reader.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(token.content);\n     }\n     return token;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "65f6f1dfe8c1fde8c122b5a074d1e3498eb048c0": {
      "type": "Yfilerename",
      "commitMessage": "Package private classes are not prefixed with \"CSV\": CSVLexer -\u003e Lexer.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1511462 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/7/13, 1:00 PM",
      "commitName": "65f6f1dfe8c1fde8c122b5a074d1e3498eb048c0",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "8/7/13, 11:25 AM",
      "commitNameOld": "643b628af4ebfdb1075d4e8eaadf0dc803a4b25c",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n    while (true) {\n        if (readEndOfLine(ch)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(ch)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(ch)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(ch)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) ch).append((char) in.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            ch \u003d in.read();\n        } else {\n            token.content.append((char) ch);\n            ch \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
      "path": "src/main/java/org/apache/commons/csv/Lexer.java",
      "functionStartLine": 185,
      "functionName": "parseSimpleToken",
      "functionAnnotation": "",
      "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param ch the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/csv/CSVLexer.java",
        "newPath": "src/main/java/org/apache/commons/csv/Lexer.java"
      }
    },
    "a0624779468261996e7e6e5c7a63ba1ce1a3a553": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Use ch instead of c as a character var name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508937 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/31/13, 8:46 AM",
      "commitName": "a0624779468261996e7e6e5c7a63ba1ce1a3a553",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Use ch instead of c as a character var name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508937 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/31/13, 8:46 AM",
          "commitName": "a0624779468261996e7e6e5c7a63ba1ce1a3a553",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "6/20/13, 6:49 PM",
          "commitNameOld": "530b0382691b6af6340f194956f6e79ae3249662",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 40.58,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n    while (true) {\n        if (readEndOfLine(ch)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(ch)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(ch)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(ch)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) ch).append((char) in.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            ch \u003d in.read();\n        } else {\n            token.content.append((char) ch);\n            ch \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 155,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param ch the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,30 +1,30 @@\n-private Token parseSimpleToken(final Token token, int c) throws IOException {\n+private Token parseSimpleToken(final Token token, int ch) throws IOException {\n     while (true) {\n-        if (readEndOfLine(c)) {\n+        if (readEndOfLine(ch)) {\n             token.type \u003d EORECORD;\n             break;\n-        } else if (isEndOfFile(c)) {\n+        } else if (isEndOfFile(ch)) {\n             token.type \u003d EOF;\n             token.isReady \u003d true;\n             break;\n-        } else if (isDelimiter(c)) {\n+        } else if (isDelimiter(ch)) {\n             token.type \u003d TOKEN;\n             break;\n-        } else if (isEscape(c)) {\n+        } else if (isEscape(ch)) {\n             final int unescaped \u003d readEscape();\n             if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n-                token.content.append((char) c).append((char) in.getLastChar());\n+                token.content.append((char) ch).append((char) in.getLastChar());\n             } else {\n                 token.content.append((char) unescaped);\n             }\n-            c \u003d in.read();\n+            ch \u003d in.read();\n         } else {\n-            token.content.append((char) c);\n-            c \u003d in.read();\n+            token.content.append((char) ch);\n+            ch \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(token.content);\n     }\n     return token;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[token-Token(modifiers-final), c-int]",
            "newValue": "[token-Token(modifiers-final), ch-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Use ch instead of c as a character var name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508937 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/31/13, 8:46 AM",
          "commitName": "a0624779468261996e7e6e5c7a63ba1ce1a3a553",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "6/20/13, 6:49 PM",
          "commitNameOld": "530b0382691b6af6340f194956f6e79ae3249662",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 40.58,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n    while (true) {\n        if (readEndOfLine(ch)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(ch)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(ch)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(ch)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) ch).append((char) in.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            ch \u003d in.read();\n        } else {\n            token.content.append((char) ch);\n            ch \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 155,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param ch the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,30 +1,30 @@\n-private Token parseSimpleToken(final Token token, int c) throws IOException {\n+private Token parseSimpleToken(final Token token, int ch) throws IOException {\n     while (true) {\n-        if (readEndOfLine(c)) {\n+        if (readEndOfLine(ch)) {\n             token.type \u003d EORECORD;\n             break;\n-        } else if (isEndOfFile(c)) {\n+        } else if (isEndOfFile(ch)) {\n             token.type \u003d EOF;\n             token.isReady \u003d true;\n             break;\n-        } else if (isDelimiter(c)) {\n+        } else if (isDelimiter(ch)) {\n             token.type \u003d TOKEN;\n             break;\n-        } else if (isEscape(c)) {\n+        } else if (isEscape(ch)) {\n             final int unescaped \u003d readEscape();\n             if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n-                token.content.append((char) c).append((char) in.getLastChar());\n+                token.content.append((char) ch).append((char) in.getLastChar());\n             } else {\n                 token.content.append((char) unescaped);\n             }\n-            c \u003d in.read();\n+            ch \u003d in.read();\n         } else {\n-            token.content.append((char) c);\n-            c \u003d in.read();\n+            token.content.append((char) ch);\n+            ch \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(token.content);\n     }\n     return token;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Use ch instead of c as a character var name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1508937 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/31/13, 8:46 AM",
          "commitName": "a0624779468261996e7e6e5c7a63ba1ce1a3a553",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "6/20/13, 6:49 PM",
          "commitNameOld": "530b0382691b6af6340f194956f6e79ae3249662",
          "commitAuthorOld": "Gary D. Gregory",
          "daysBetweenCommits": 40.58,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token token, int ch) throws IOException {\n    while (true) {\n        if (readEndOfLine(ch)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(ch)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(ch)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(ch)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) ch).append((char) in.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            ch \u003d in.read();\n        } else {\n            token.content.append((char) ch);\n            ch \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 155,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param ch the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,30 +1,30 @@\n-private Token parseSimpleToken(final Token token, int c) throws IOException {\n+private Token parseSimpleToken(final Token token, int ch) throws IOException {\n     while (true) {\n-        if (readEndOfLine(c)) {\n+        if (readEndOfLine(ch)) {\n             token.type \u003d EORECORD;\n             break;\n-        } else if (isEndOfFile(c)) {\n+        } else if (isEndOfFile(ch)) {\n             token.type \u003d EOF;\n             token.isReady \u003d true;\n             break;\n-        } else if (isDelimiter(c)) {\n+        } else if (isDelimiter(ch)) {\n             token.type \u003d TOKEN;\n             break;\n-        } else if (isEscape(c)) {\n+        } else if (isEscape(ch)) {\n             final int unescaped \u003d readEscape();\n             if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n-                token.content.append((char) c).append((char) in.getLastChar());\n+                token.content.append((char) ch).append((char) in.getLastChar());\n             } else {\n                 token.content.append((char) unescaped);\n             }\n-            c \u003d in.read();\n+            ch \u003d in.read();\n         } else {\n-            token.content.append((char) c);\n-            c \u003d in.read();\n+            token.content.append((char) ch);\n+            ch \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(token.content);\n     }\n     return token;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
            "newValue": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param ch the current character\n@return the filled token\n@throws IOException\n            on stream access error\n"
          }
        }
      ]
    },
    "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Ydocchange)",
      "commitMessage": "Better param name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495268 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/20/13, 6:46 PM",
      "commitName": "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf",
      "commitAuthor": "Gary D. Gregory",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Better param name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495268 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/20/13, 6:46 PM",
          "commitName": "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "5/7/13, 8:12 AM",
          "commitNameOld": "71c69df6dda034e9aa18ad07782ba88643423f58",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 44.44,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token token, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) c).append((char) in.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            c \u003d in.read();\n        } else {\n            token.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 149,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,30 +1,30 @@\n-private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n+private Token parseSimpleToken(final Token token, int c) throws IOException {\n     while (true) {\n         if (readEndOfLine(c)) {\n-            tkn.type \u003d EORECORD;\n+            token.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n-            tkn.type \u003d EOF;\n-            tkn.isReady \u003d true;\n+            token.type \u003d EOF;\n+            token.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n-            tkn.type \u003d TOKEN;\n+            token.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             final int unescaped \u003d readEscape();\n             if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n-                tkn.content.append((char) c).append((char) in.getLastChar());\n+                token.content.append((char) c).append((char) in.getLastChar());\n             } else {\n-                tkn.content.append((char) unescaped);\n+                token.content.append((char) unescaped);\n             }\n             c \u003d in.read();\n         } else {\n-            tkn.content.append((char) c);\n+            token.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n-        trimTrailingSpaces(tkn.content);\n+        trimTrailingSpaces(token.content);\n     }\n-    return tkn;\n+    return token;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[tkn-Token(modifiers-final), c-int]",
            "newValue": "[token-Token(modifiers-final), c-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Better param name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495268 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/20/13, 6:46 PM",
          "commitName": "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "5/7/13, 8:12 AM",
          "commitNameOld": "71c69df6dda034e9aa18ad07782ba88643423f58",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 44.44,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token token, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) c).append((char) in.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            c \u003d in.read();\n        } else {\n            token.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 149,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,30 +1,30 @@\n-private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n+private Token parseSimpleToken(final Token token, int c) throws IOException {\n     while (true) {\n         if (readEndOfLine(c)) {\n-            tkn.type \u003d EORECORD;\n+            token.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n-            tkn.type \u003d EOF;\n-            tkn.isReady \u003d true;\n+            token.type \u003d EOF;\n+            token.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n-            tkn.type \u003d TOKEN;\n+            token.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             final int unescaped \u003d readEscape();\n             if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n-                tkn.content.append((char) c).append((char) in.getLastChar());\n+                token.content.append((char) c).append((char) in.getLastChar());\n             } else {\n-                tkn.content.append((char) unescaped);\n+                token.content.append((char) unescaped);\n             }\n             c \u003d in.read();\n         } else {\n-            tkn.content.append((char) c);\n+            token.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n-        trimTrailingSpaces(tkn.content);\n+        trimTrailingSpaces(token.content);\n     }\n-    return tkn;\n+    return token;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Better param name.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1495268 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "6/20/13, 6:46 PM",
          "commitName": "93a07b9b8f9e4fa82e6f306d57d71d5268d7dacf",
          "commitAuthor": "Gary D. Gregory",
          "commitDateOld": "5/7/13, 8:12 AM",
          "commitNameOld": "71c69df6dda034e9aa18ad07782ba88643423f58",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 44.44,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token token, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            token.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            token.type \u003d EOF;\n            token.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            token.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                token.content.append((char) c).append((char) in.getLastChar());\n            } else {\n                token.content.append((char) unescaped);\n            }\n            c \u003d in.read();\n        } else {\n            token.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(token.content);\n    }\n    return token;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 149,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,30 +1,30 @@\n-private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n+private Token parseSimpleToken(final Token token, int c) throws IOException {\n     while (true) {\n         if (readEndOfLine(c)) {\n-            tkn.type \u003d EORECORD;\n+            token.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n-            tkn.type \u003d EOF;\n-            tkn.isReady \u003d true;\n+            token.type \u003d EOF;\n+            token.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n-            tkn.type \u003d TOKEN;\n+            token.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             final int unescaped \u003d readEscape();\n             if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n-                tkn.content.append((char) c).append((char) in.getLastChar());\n+                token.content.append((char) c).append((char) in.getLastChar());\n             } else {\n-                tkn.content.append((char) unescaped);\n+                token.content.append((char) unescaped);\n             }\n             c \u003d in.read();\n         } else {\n-            tkn.content.append((char) c);\n+            token.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n-        trimTrailingSpaces(tkn.content);\n+        trimTrailingSpaces(token.content);\n     }\n-    return tkn;\n+    return token;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
            "newValue": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param token the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n"
          }
        }
      ]
    },
    "2c6120826245f89fedf2f936ab4a0c3edd8717f3": {
      "type": "Ybodychange",
      "commitMessage": "CSV-58 Unescape handling needs rethinking\nFixed up most issues.\nTODO should TAB, FF and BACKSPACE be un/escaped?\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1478621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/2/13, 6:10 PM",
      "commitName": "2c6120826245f89fedf2f936ab4a0c3edd8717f3",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/26/13, 10:45 AM",
      "commitNameOld": "9107316c0b58e843c3412d906845b0ef604d0764",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 37.31,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            final int unescaped \u003d readEscape();\n            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n                tkn.content.append((char) c).append((char) in.getLastChar());\n            } else {\n                tkn.content.append((char) unescaped);\n            }\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 149,
      "functionName": "parseSimpleToken",
      "functionAnnotation": "",
      "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "@@ -1,25 +1,30 @@\n private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n     while (true) {\n         if (readEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n-            tkn.content.append((char) readEscape());\n+            final int unescaped \u003d readEscape();\n+            if (unescaped \u003d\u003d Constants.END_OF_STREAM) {\n+                tkn.content.append((char) c).append((char) in.getLastChar());\n+            } else {\n+                tkn.content.append((char) unescaped);\n+            }\n             c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9107316c0b58e843c3412d906845b0ef604d0764": {
      "type": "Ydocchange",
      "commitMessage": "Javadoc: use the active voice.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1461239 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/26/13, 10:45 AM",
      "commitName": "9107316c0b58e843c3412d906845b0ef604d0764",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "3/26/13, 10:42 AM",
      "commitNameOld": "05ecd9199421844509275896b663ee62ef43bb8a",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 149,
      "functionName": "parseSimpleToken",
      "functionAnnotation": "",
      "functionDoc": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "Parsed a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
        "newValue": "Parses a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n"
      }
    },
    "c4014b6b38c9f661a12557db7ee464e158f386f7": {
      "type": "Ymultichange(Yrename,Ydocchange)",
      "commitMessage": "Method names should start with a verb\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460136 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/23/13, 5:48 AM",
      "commitName": "c4014b6b38c9f661a12557db7ee464e158f386f7",
      "commitAuthor": "Benedikt Ritter",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Method names should start with a verb\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460136 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/23/13, 5:48 AM",
          "commitName": "c4014b6b38c9f661a12557db7ee464e158f386f7",
          "commitAuthor": "Benedikt Ritter",
          "commitDateOld": "3/20/13, 1:31 AM",
          "commitNameOld": "374cd7b16d1ec48bb68fd748427c4b8942767c6b",
          "commitAuthorOld": "Benedikt Ritter",
          "daysBetweenCommits": 3.18,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 149,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parsed a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,25 +1,25 @@\n-private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n+private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n     while (true) {\n         if (readEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape());\n             c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "simpleTokenLexer",
            "newValue": "parseSimpleToken"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Method names should start with a verb\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1460136 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "3/23/13, 5:48 AM",
          "commitName": "c4014b6b38c9f661a12557db7ee464e158f386f7",
          "commitAuthor": "Benedikt Ritter",
          "commitDateOld": "3/20/13, 1:31 AM",
          "commitNameOld": "374cd7b16d1ec48bb68fd748427c4b8942767c6b",
          "commitAuthorOld": "Benedikt Ritter",
          "daysBetweenCommits": 3.18,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
          "functionStartLine": 149,
          "functionName": "parseSimpleToken",
          "functionAnnotation": "",
          "functionDoc": "Parsed a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
          "diff": "@@ -1,25 +1,25 @@\n-private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n+private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n     while (true) {\n         if (readEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape());\n             c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
            "newValue": "Parsed a simple token.\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n"
          }
        }
      ]
    },
    "2a8ce4a11cf42683d7abf06c591b4c0f1e8928e1": {
      "type": "Ybodychange",
      "commitMessage": "Rename method from \"is\" prefix to \"read\" prefix because it is not just a test method, it may actually consume input.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397923 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/13/12, 11:56 AM",
      "commitName": "2a8ce4a11cf42683d7abf06c591b4c0f1e8928e1",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/13/12, 10:40 AM",
      "commitNameOld": "9f6d3f541330670df684d01b8b6fae67f474bb90",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n    while (true) {\n        if (readEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 144,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "@@ -1,25 +1,25 @@\n private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n     while (true) {\n-        if (isEndOfLine(c)) {\n+        if (readEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape());\n             c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3655efcedbf804408a433cbbd25eef3fc91c675a": {
      "type": "Ybodychange",
      "commitMessage": "Rename ivar to ignoreSurroundingSpaces to match CSVFormat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397784 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/12/12, 11:28 PM",
      "commitName": "3655efcedbf804408a433cbbd25eef3fc91c675a",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/11/12, 8:47 AM",
      "commitNameOld": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 1.61,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (ignoreSurroundingSpaces) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 144,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "@@ -1,25 +1,25 @@\n private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape());\n             c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n-    if (surroundingSpacesIgnored) {\n+    if (ignoreSurroundingSpaces) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc": {
      "type": "Yparametermetachange",
      "commitMessage": "Use final keyword where possible.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1397122 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/11/12, 8:47 AM",
      "commitName": "6ab9b46e5a0aa9aae4ea4cbc86fd78ee72a3e2dc",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "10/11/12, 7:02 AM",
      "commitNameOld": "4bc562f47b46372a5ac11498fe5312846dedded4",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (surroundingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 144,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "@@ -1,25 +1,25 @@\n-private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n+private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape());\n             c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (surroundingSpacesIgnored) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[tkn-Token, c-int]",
        "newValue": "[tkn-Token(modifiers-final), c-int]"
      }
    },
    "93fc1f9363d911cb0a974f993d9266a89a63c41e": {
      "type": "Ydocchange",
      "commitMessage": "Fix Checkstyle: Format for 120 line length.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1383582 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "9/11/12, 12:47 PM",
      "commitName": "93fc1f9363d911cb0a974f993d9266a89a63c41e",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "9/11/12, 12:41 PM",
      "commitNameOld": "42a4812bcefc07e6eb4eb7aaaed926dd08ae093f",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (surroundingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 140,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
        "newValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\ndelimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException\n            on stream access error\n"
      }
    },
    "19ba389fe8194bb6c22102b32e021d8487e1e307": {
      "type": "Ybodychange",
      "commitMessage": "Checking the token type seems to be quite slow\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306663 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/28/12, 5:58 PM",
      "commitName": "19ba389fe8194bb6c22102b32e021d8487e1e307",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/28/12, 4:35 PM",
      "commitNameOld": "7addc8f6889d3d1f4e5fe3bcb1c0f8161a6fefb9",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (surroundingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 138,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,22 +1,25 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n-    while (tkn.type \u003d\u003d INVALID) {\n+    while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n+            break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n+            break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n+            break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape());\n             c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n             c \u003d in.read();\n         }\n     }\n     if (surroundingSpacesIgnored) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ba26844c7bca3e42036f626cd61de9d40550b76f": {
      "type": "Ybodychange",
      "commitMessage": "CSV-70 Improve readability of CSVLexer\nSimplify; remove while(true) loop\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306079 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/27/12, 5:34 PM",
      "commitName": "ba26844c7bca3e42036f626cd61de9d40550b76f",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/27/12, 5:22 PM",
      "commitNameOld": "7c2cfeaf5884b9dd698309f5a10e80a1ba6705b0",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (tkn.type \u003d\u003d INVALID) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n            c \u003d in.read();\n        } else {\n            tkn.content.append((char) c);\n            c \u003d in.read();\n        }\n    }\n    if (surroundingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 135,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,24 +1,22 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n-    while (true) {\n+    while (tkn.type \u003d\u003d INVALID) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n-            break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n-            break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n-            break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape());\n+            c \u003d in.read();\n         } else {\n             tkn.content.append((char) c);\n+            c \u003d in.read();\n         }\n-        c \u003d in.read();\n     }\n     if (surroundingSpacesIgnored) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "911433707587a42727da375e1ec0e53dc909ac8d": {
      "type": "Ybodychange",
      "commitMessage": "CSV-70 Improve readability of CSVLexer\nRemove unnecessary parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1306062 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/27/12, 4:50 PM",
      "commitName": "911433707587a42727da375e1ec0e53dc909ac8d",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/26/12, 12:02 PM",
      "commitNameOld": "38741a48c692ae2fc13cd2445e77ace6ecea1156",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape());\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (surroundingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 137,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,24 +1,24 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n-            tkn.content.append((char) readEscape(c));\n+            tkn.content.append((char) readEscape());\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (surroundingSpacesIgnored) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "38741a48c692ae2fc13cd2445e77ace6ecea1156": {
      "type": "Ybodychange",
      "commitMessage": "CSV-54 Confusing semantic of the ignore leading/trailing spaces parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1305494 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/26/12, 12:02 PM",
      "commitName": "38741a48c692ae2fc13cd2445e77ace6ecea1156",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/22/12, 12:04 PM",
      "commitNameOld": "dd26201ac47f60cd9e18800726cc28660b81bdaf",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 4.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (surroundingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 137,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,24 +1,24 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n-    if (trailingSpacesIgnored) {\n+    if (surroundingSpacesIgnored) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dd26201ac47f60cd9e18800726cc28660b81bdaf": {
      "type": "Ybodychange",
      "commitMessage": "CSV-81 Token.Type.isReady could perhaps be removed\nNot removed, but only set on EOF if there is data to return\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1303988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/22/12, 12:04 PM",
      "commitName": "dd26201ac47f60cd9e18800726cc28660b81bdaf",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/22/12, 11:23 AM",
      "commitNameOld": "9ebd0d94254b468765f6c558bb10ca018a418444",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (trailingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 137,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,26 +1,24 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n-            tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n-            tkn.isReady \u003d true;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (trailingSpacesIgnored) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fa07dea5850eb11bb7b4dc06823802156b89baaf": {
      "type": "Ybodychange",
      "commitMessage": "CSV-71 - Add convenience Methods to CSVLexer\nUse convenience fields from Lexer parent class; missed one method replacement earlier\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1303933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/22/12, 11:00 AM",
      "commitName": "fa07dea5850eb11bb7b4dc06823802156b89baaf",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/22/12, 10:27 AM",
      "commitNameOld": "83e4a903b18c43a10caa551c50ece4e251a0f674",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (trailingSpacesIgnored) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 144,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,26 +1,26 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n-    if (format.isTrailingSpacesIgnored()) {\n+    if (trailingSpacesIgnored) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "83e4a903b18c43a10caa551c50ece4e251a0f674": {
      "type": "Ybodychange",
      "commitMessage": "CSV-71 - Add convenience Methods to CSVLexer\nUse convenience methods from Lexer parent class\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1303904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/22/12, 10:27 AM",
      "commitName": "83e4a903b18c43a10caa551c50ece4e251a0f674",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "3/22/12, 9:32 AM",
      "commitNameOld": "fdfe50842f8ac0a842ba0a220bbd2613178e7a75",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isDelimiter(c)) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEscape(c)) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 144,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,26 +1,26 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n-        } else if (c \u003d\u003d format.getDelimiter()) {\n+        } else if (isDelimiter(c)) {\n             tkn.type \u003d TOKEN;\n             tkn.isReady \u003d true;\n             break;\n-        } else if (c \u003d\u003d format.getEscape()) {\n+        } else if (isEscape(c)) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (format.isTrailingSpacesIgnored()) {\n         trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "38670dbe9232dc9b56d6464c42293e745974cf60": {
      "type": "Ymovefromfile",
      "commitMessage": "Moved the lexer in a separate file\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/15/12, 1:52 AM",
      "commitName": "38670dbe9232dc9b56d6464c42293e745974cf60",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/14/12, 4:12 PM",
      "commitNameOld": "35b954ed36494f64b27b495ded6e66b409d0ed79",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVLexer.java",
      "functionStartLine": 193,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/csv/CSVParser.java",
        "newPath": "src/main/java/org/apache/commons/csv/CSVLexer.java",
        "oldMethodName": "simpleTokenLexer",
        "newMethodName": "simpleTokenLexer"
      }
    },
    "3cb5801a985c0d6a9ca3dc794b4e89a292b4a9c6": {
      "type": "Ybodychange",
      "commitMessage": "Replaced CharBuffer with StringBuilder (CSV-59)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1300659 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/14/12, 10:42 AM",
      "commitName": "3cb5801a985c0d6a9ca3dc794b4e89a292b4a9c6",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/14/12, 6:03 AM",
      "commitNameOld": "18d706032ac850979833165b66439c2c764c3b33",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        trimTrailingSpaces(tkn.content);\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 402,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,26 +1,26 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d format.getDelimiter()) {\n             tkn.type \u003d TOKEN;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d format.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (format.isTrailingSpacesIgnored()) {\n-        tkn.content.trimTrailingWhitespace();\n+        trimTrailingSpaces(tkn.content);\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9141cb39e6659340574a96b41d7f463ebdc2610e": {
      "type": "Ybodychange",
      "commitMessage": "Changed while loops (CSV-55)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/csv/trunk@1299706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/12/12, 8:12 AM",
      "commitName": "9141cb39e6659340574a96b41d7f463ebdc2610e",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/11/12, 4:23 PM",
      "commitNameOld": "94b9f8dc957d3a2276232c8e6f3acc6fe633b00a",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    while (true) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 403,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,26 +1,26 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n-    for (; ; ) {\n+    while (true) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d format.getDelimiter()) {\n             tkn.type \u003d TOKEN;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d format.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (format.isTrailingSpacesIgnored()) {\n         tkn.content.trimTrailingWhitespace();\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "00d0def6953d414af6ecf36a9584c5453ee39c29": {
      "type": "Ybodychange",
      "commitMessage": "Replaced the unicode escaping code from the parser with a class implementing java.io.Reader\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1298001 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/7/12, 7:58 AM",
      "commitName": "00d0def6953d414af6ecf36a9584c5453ee39c29",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "3/6/12, 3:23 AM",
      "commitNameOld": "9dd3dda09f09c6baa7e053b39043bc9e2ef47ee0",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 1.19,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 392,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,28 +1,26 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     for (; ; ) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d format.getDelimiter()) {\n             tkn.type \u003d TOKEN;\n             tkn.isReady \u003d true;\n             break;\n-        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n-            tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (c \u003d\u003d format.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (format.isTrailingSpacesIgnored()) {\n         tkn.content.trimTrailingWhitespace();\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7bd9d1d970b04a8439fee0bd5224159f57cb2512": {
      "type": "Ydocchange",
      "commitMessage": "Updated the Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1297043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/12, 5:08 AM",
      "commitName": "7bd9d1d970b04a8439fee0bd5224159f57cb2512",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 3:04 PM",
      "commitNameOld": "045dbbbe4ab84618cee8ba27d00b9283ce0a2715",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 116.59,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 386,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "",
      "extendedDetails": {
        "oldValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
        "newValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n"
      }
    },
    "16bfec07ffd785e5abbabdc4145eeac5cccc2c79": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Turned the token types into an Enum\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199872 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 9:11 AM",
      "commitName": "16bfec07ffd785e5abbabdc4145eeac5cccc2c79",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Turned the token types into an Enum\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199872 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/9/11, 9:11 AM",
          "commitName": "16bfec07ffd785e5abbabdc4145eeac5cccc2c79",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "11/9/11, 8:58 AM",
          "commitNameOld": "cbcfb72912f41d1fac3f6d26ca27406cca94da9e",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 344,
          "functionName": "simpleTokenLexer",
          "functionAnnotation": "",
          "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
          "diff": "@@ -1,28 +1,28 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     for (; ; ) {\n         if (isEndOfLine(c)) {\n-            tkn.type \u003d TT_EORECORD;\n+            tkn.type \u003d EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n-            tkn.type \u003d TT_EOF;\n+            tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d format.getDelimiter()) {\n-            tkn.type \u003d TT_TOKEN;\n+            tkn.type \u003d TOKEN;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (c \u003d\u003d format.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (format.isTrailingSpacesIgnored()) {\n         tkn.content.trimTrailingWhitespace();\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Turned the token types into an Enum\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199872 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/9/11, 9:11 AM",
          "commitName": "16bfec07ffd785e5abbabdc4145eeac5cccc2c79",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "11/9/11, 8:58 AM",
          "commitNameOld": "cbcfb72912f41d1fac3f6d26ca27406cca94da9e",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
          "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 344,
          "functionName": "simpleTokenLexer",
          "functionAnnotation": "",
          "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
          "diff": "@@ -1,28 +1,28 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     for (; ; ) {\n         if (isEndOfLine(c)) {\n-            tkn.type \u003d TT_EORECORD;\n+            tkn.type \u003d EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n-            tkn.type \u003d TT_EOF;\n+            tkn.type \u003d EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d format.getDelimiter()) {\n-            tkn.type \u003d TT_TOKEN;\n+            tkn.type \u003d TOKEN;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (c \u003d\u003d format.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n     if (format.isTrailingSpacesIgnored()) {\n         tkn.content.trimTrailingWhitespace();\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
            "newValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n"
          }
        }
      ]
    },
    "cb99634ab3d6143dffc90938fc68e15c7f9d25b8": {
      "type": "Ybodychange",
      "commitMessage": "Renamed CSVStrategy to CSVFormat\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199842 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 8:54 AM",
      "commitName": "cb99634ab3d6143dffc90938fc68e15c7f9d25b8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 8:21 AM",
      "commitNameOld": "42476f4b08fe4b075aa36f688f0801857f3635d9",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d format.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d format.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (format.isTrailingSpacesIgnored()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 345,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,28 +1,28 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     for (; ; ) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n             break;\n-        } else if (c \u003d\u003d strategy.getDelimiter()) {\n+        } else if (c \u003d\u003d format.getDelimiter()) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n             break;\n-        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n+        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 format.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n-        } else if (c \u003d\u003d strategy.getEscape()) {\n+        } else if (c \u003d\u003d format.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n-    if (strategy.isTrailingSpacesIgnored()) {\n+    if (format.isTrailingSpacesIgnored()) {\n         tkn.content.trimTrailingWhitespace();\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "42476f4b08fe4b075aa36f688f0801857f3635d9": {
      "type": "Ybodychange",
      "commitMessage": "CSVStrategy is now immutable (SANDBOX-279)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 8:21 AM",
      "commitName": "42476f4b08fe4b075aa36f688f0801857f3635d9",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "11/9/11, 6:54 AM",
      "commitNameOld": "fc4ccb426eb3934ee1656db9b18c7d797ac6bd1d",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d strategy.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (strategy.isTrailingSpacesIgnored()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 345,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,28 +1,28 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     for (; ; ) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n             break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n             break;\n         } else if (c \u003d\u003d strategy.getDelimiter()) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n             break;\n-        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n+        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.isUnicodeEscapesInterpreted() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (c \u003d\u003d strategy.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n             tkn.content.append((char) c);\n         }\n         c \u003d in.read();\n     }\n-    if (strategy.getIgnoreTrailingWhitespaces()) {\n+    if (strategy.isTrailingSpacesIgnored()) {\n         tkn.content.trimTrailingWhitespace();\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8": {
      "type": "Yfilerename",
      "commitMessage": "Moved the directories to match the Maven layout\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1199691 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/9/11, 2:38 AM",
      "commitName": "c9aeca5c39033c95c26c1475dcf0fd2ea86672e8",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/20/11, 9:14 AM",
      "commitNameOld": "76cab04936e8b539d983510079419fabeeaecea0",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 111.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d strategy.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (strategy.getIgnoreTrailingWhitespaces()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
      "path": "src/main/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 424,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/csv/CSVParser.java",
        "newPath": "src/main/java/org/apache/commons/csv/CSVParser.java"
      }
    },
    "1166ca605bcc035654771f1ddc1092d86f2ec1e8": {
      "type": "Ymultichange(Ydocchange,Yformatchange)",
      "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/1/11, 12:46 AM",
      "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
      "commitAuthor": "Jacopo Cappellato",
      "subchanges": [
        {
          "type": "Ydocchange",
          "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/11, 12:46 AM",
          "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
          "commitAuthor": "Jacopo Cappellato",
          "commitDateOld": "1/31/11, 2:47 AM",
          "commitNameOld": "c6bdecabd82eebc9efce450aa4057b668984479e",
          "commitAuthorOld": "Jacopo Cappellato",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d strategy.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (strategy.getIgnoreTrailingWhitespaces()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
          "path": "src/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 424,
          "functionName": "simpleTokenLexer",
          "functionAnnotation": "",
          "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
          "diff": "",
          "extendedDetails": {
            "oldValue": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
            "newValue": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n"
          }
        },
        {
          "type": "Yformatchange",
          "commitMessage": "No functional changes are contained in this commit: reformatted Java code to fix several formatting inconsistencies (between classes and within the same class); sorry for the big commit, but I have preferred to isolate into one commit all the formatting changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@1065950 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2/1/11, 12:46 AM",
          "commitName": "1166ca605bcc035654771f1ddc1092d86f2ec1e8",
          "commitAuthor": "Jacopo Cappellato",
          "commitDateOld": "1/31/11, 2:47 AM",
          "commitNameOld": "c6bdecabd82eebc9efce450aa4057b668984479e",
          "commitAuthorOld": "Jacopo Cappellato",
          "daysBetweenCommits": 0.92,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d strategy.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (strategy.getIgnoreTrailingWhitespaces()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
          "path": "src/java/org/apache/commons/csv/CSVParser.java",
          "functionStartLine": 424,
          "functionName": "simpleTokenLexer",
          "functionAnnotation": "",
          "functionDoc": "A simple token lexer\n\u003cp/\u003e\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n\u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n\u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n\u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
          "diff": "",
          "extendedDetails": {}
        }
      ]
    },
    "086f434320e68a82ce1adcac69668ffcd7f48e52": {
      "type": "Ybodychange",
      "commitMessage": "SANDBOX-206: fix whitespace handling w/ escaping, add an option to not remove trailing whitespace\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@609327 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/6/08, 7:13 AM",
      "commitName": "086f434320e68a82ce1adcac69668ffcd7f48e52",
      "commitAuthor": "Yonik Seeley",
      "commitDateOld": "1/5/08, 7:37 AM",
      "commitNameOld": "b55fb21d78e30748ae19f1c8d16902439643799a",
      "commitAuthorOld": "Yonik Seeley",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n            break;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n            break;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (c \u003d\u003d strategy.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            tkn.content.append((char) c);\n        }\n        c \u003d in.read();\n    }\n    if (strategy.getIgnoreTrailingWhitespaces()) {\n        tkn.content.trimTrailingWhitespace();\n    }\n    return tkn;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 401,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,35 +1,28 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n-    wsBuf.clear();\n     for (; ; ) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n-            return tkn;\n+            break;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n-            return tkn;\n+            break;\n         } else if (c \u003d\u003d strategy.getDelimiter()) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n-            return tkn;\n+            break;\n         } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n-        } else if (isWhitespace(c)) {\n-            if (tkn.content.length() \u003e 0) {\n-                wsBuf.append((char) c);\n-            }\n         } else if (c \u003d\u003d strategy.getEscape()) {\n             tkn.content.append((char) readEscape(c));\n         } else {\n-            if (wsBuf.length() \u003e 0) {\n-                tkn.content.append(wsBuf);\n-                wsBuf.clear();\n-            }\n             tkn.content.append((char) c);\n         }\n-        if (!tkn.isReady) {\n-            c \u003d in.read();\n-        }\n+        c \u003d in.read();\n     }\n+    if (strategy.getIgnoreTrailingWhitespaces()) {\n+        tkn.content.trimTrailingWhitespace();\n+    }\n+    return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b55fb21d78e30748ae19f1c8d16902439643799a": {
      "type": "Ybodychange",
      "commitMessage": "SANDBOX-206: add escape to strategy, turn off backslash-style escaping by default\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/sandbox/csv/trunk@609155 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/5/08, 7:37 AM",
      "commitName": "b55fb21d78e30748ae19f1c8d16902439643799a",
      "commitAuthor": "Yonik Seeley",
      "commitDateOld": "7/23/07, 3:25 PM",
      "commitNameOld": "14182380d59abc9c5a18504833c5c93d27fd0f8e",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 165.72,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    wsBuf.clear();\n    for (; ; ) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n            return tkn;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n            return tkn;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n            return tkn;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (isWhitespace(c)) {\n            if (tkn.content.length() \u003e 0) {\n                wsBuf.append((char) c);\n            }\n        } else if (c \u003d\u003d strategy.getEscape()) {\n            tkn.content.append((char) readEscape(c));\n        } else {\n            if (wsBuf.length() \u003e 0) {\n                tkn.content.append(wsBuf);\n                wsBuf.clear();\n            }\n            tkn.content.append((char) c);\n        }\n        if (!tkn.isReady) {\n            c \u003d in.read();\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 401,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,31 +1,35 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     wsBuf.clear();\n-    while (!tkn.isReady) {\n+    for (; ; ) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n+            return tkn;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n+            return tkn;\n         } else if (c \u003d\u003d strategy.getDelimiter()) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n+            return tkn;\n         } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (isWhitespace(c)) {\n             if (tkn.content.length() \u003e 0) {\n                 wsBuf.append((char) c);\n             }\n+        } else if (c \u003d\u003d strategy.getEscape()) {\n+            tkn.content.append((char) readEscape(c));\n         } else {\n             if (wsBuf.length() \u003e 0) {\n                 tkn.content.append(wsBuf);\n                 wsBuf.clear();\n             }\n             tkn.content.append((char) c);\n         }\n         if (!tkn.isReady) {\n             c \u003d in.read();\n         }\n     }\n-    return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d7e94581d784067fccddd34e19ae46aea526f9fa": {
      "type": "Ybodychange",
      "commitMessage": "This patch reduces the amount of intermediate garbage significantly.\nPR: SANDBOX-166\nContributed by: Ortwin Glück\nReviewed by: Henri Yandell\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@430322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/10/06, 2:01 AM",
      "commitName": "d7e94581d784067fccddd34e19ae46aea526f9fa",
      "commitAuthor": "Ortwin Glueck",
      "commitDateOld": "7/31/06, 11:50 PM",
      "commitNameOld": "ce34196827e6ac834b4c566e1e6fbe863c8e8d1c",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 9.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    wsBuf.clear();\n    while (!tkn.isReady) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (isWhitespace(c)) {\n            if (tkn.content.length() \u003e 0) {\n                wsBuf.append((char) c);\n            }\n        } else {\n            if (wsBuf.length() \u003e 0) {\n                tkn.content.append(wsBuf);\n                wsBuf.clear();\n            }\n            tkn.content.append((char) c);\n        }\n        if (!tkn.isReady) {\n            c \u003d in.read();\n        }\n    }\n    return tkn;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 392,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,31 +1,31 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n-    StringBuffer wsBuf \u003d new StringBuffer();\n+    wsBuf.clear();\n     while (!tkn.isReady) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n         } else if (c \u003d\u003d strategy.getDelimiter()) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n         } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (isWhitespace(c)) {\n             if (tkn.content.length() \u003e 0) {\n                 wsBuf.append((char) c);\n             }\n         } else {\n             if (wsBuf.length() \u003e 0) {\n-                tkn.content.append(wsBuf.toString());\n-                wsBuf.delete(0, wsBuf.length());\n+                tkn.content.append(wsBuf);\n+                wsBuf.clear();\n             }\n             tkn.content.append((char) c);\n         }\n         if (!tkn.isReady) {\n             c \u003d in.read();\n         }\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "45d972fe5b7807db5f5bb6fed182f107993da5a4": {
      "type": "Ybodychange",
      "commitMessage": "Moved back to JDK 1.3 compatibility. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@412968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/9/06, 12:57 AM",
      "commitName": "45d972fe5b7807db5f5bb6fed182f107993da5a4",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "5/4/06, 11:24 PM",
      "commitNameOld": "eac54a225bc974157e914cf66cfa598171022018",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    StringBuffer wsBuf \u003d new StringBuffer();\n    while (!tkn.isReady) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (isWhitespace(c)) {\n            if (tkn.content.length() \u003e 0) {\n                wsBuf.append((char) c);\n            }\n        } else {\n            if (wsBuf.length() \u003e 0) {\n                tkn.content.append(wsBuf.toString());\n                wsBuf.delete(0, wsBuf.length());\n            }\n            tkn.content.append((char) c);\n        }\n        if (!tkn.isReady) {\n            c \u003d in.read();\n        }\n    }\n    return tkn;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 420,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,31 +1,31 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     StringBuffer wsBuf \u003d new StringBuffer();\n     while (!tkn.isReady) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n         } else if (c \u003d\u003d strategy.getDelimiter()) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n         } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (isWhitespace(c)) {\n             if (tkn.content.length() \u003e 0) {\n                 wsBuf.append((char) c);\n             }\n         } else {\n             if (wsBuf.length() \u003e 0) {\n-                tkn.content.append(wsBuf);\n+                tkn.content.append(wsBuf.toString());\n                 wsBuf.delete(0, wsBuf.length());\n             }\n             tkn.content.append((char) c);\n         }\n         if (!tkn.isReady) {\n             c \u003d in.read();\n         }\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eac54a225bc974157e914cf66cfa598171022018": {
      "type": "Ybodychange",
      "commitMessage": "Extracted the strategy concept into its own class\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@399987 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/4/06, 11:24 PM",
      "commitName": "eac54a225bc974157e914cf66cfa598171022018",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "3/5/06, 9:11 PM",
      "commitNameOld": "f047581f9526aad1c9c9e624710a4e860f88ecaa",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 60.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    StringBuffer wsBuf \u003d new StringBuffer();\n    while (!tkn.isReady) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d strategy.getDelimiter()) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (isWhitespace(c)) {\n            if (tkn.content.length() \u003e 0) {\n                wsBuf.append((char) c);\n            }\n        } else {\n            if (wsBuf.length() \u003e 0) {\n                tkn.content.append(wsBuf);\n                wsBuf.delete(0, wsBuf.length());\n            }\n            tkn.content.append((char) c);\n        }\n        if (!tkn.isReady) {\n            c \u003d in.read();\n        }\n    }\n    return tkn;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 420,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,31 +1,31 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     StringBuffer wsBuf \u003d new StringBuffer();\n     while (!tkn.isReady) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n         } else if (isEndOfFile(c)) {\n             tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n-        } else if (c \u003d\u003d delimiter) {\n+        } else if (c \u003d\u003d strategy.getDelimiter()) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n-        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 interpretUnicodeEscapes \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n+        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 strategy.getUnicodeEscapeInterpretation() \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n             tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (isWhitespace(c)) {\n             if (tkn.content.length() \u003e 0) {\n                 wsBuf.append((char) c);\n             }\n         } else {\n             if (wsBuf.length() \u003e 0) {\n                 tkn.content.append(wsBuf);\n                 wsBuf.delete(0, wsBuf.length());\n             }\n             tkn.content.append((char) c);\n         }\n         if (!tkn.isReady) {\n             c \u003d in.read();\n         }\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f047581f9526aad1c9c9e624710a4e860f88ecaa": {
      "type": "Ybodychange",
      "commitMessage": "Javadoc improvements, more unit tests, change of API to a chain style, some bugfixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/sandbox/csv/trunk@383468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "3/5/06, 9:11 PM",
      "commitName": "f047581f9526aad1c9c9e624710a4e860f88ecaa",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:46 PM",
      "commitNameOld": "0e1f0adb716515aba5e98e5690779f2fb73ad716",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 78.98,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    StringBuffer wsBuf \u003d new StringBuffer();\n    while (!tkn.isReady) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EOF;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d delimiter) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 interpretUnicodeEscapes \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n            tkn.content.append((char) unicodeEscapeLexer(c));\n        } else if (isWhitespace(c)) {\n            if (tkn.content.length() \u003e 0) {\n                wsBuf.append((char) c);\n            }\n        } else {\n            if (wsBuf.length() \u003e 0) {\n                tkn.content.append(wsBuf);\n                wsBuf.delete(0, wsBuf.length());\n            }\n            tkn.content.append((char) c);\n        }\n        if (!tkn.isReady) {\n            c \u003d in.read();\n        }\n    }\n    return tkn;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 435,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "@@ -1,37 +1,31 @@\n private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n     StringBuffer wsBuf \u003d new StringBuffer();\n     while (!tkn.isReady) {\n         if (isEndOfLine(c)) {\n             tkn.type \u003d TT_EORECORD;\n             tkn.isReady \u003d true;\n         } else if (isEndOfFile(c)) {\n-            tkn.type \u003d TT_EORECORD;\n+            tkn.type \u003d TT_EOF;\n             tkn.isReady \u003d true;\n         } else if (c \u003d\u003d delimiter) {\n             tkn.type \u003d TT_TOKEN;\n             tkn.isReady \u003d true;\n-        } else if (c \u003d\u003d \u0027\\\\\u0027) {\n-            if (in.lookAhead() \u003d\u003d this.delimiter) {\n-                tkn.content.append((char) in.read());\n-            } else if (interpretUnicodeEscapes \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n-                tkn.content.append((char) unicodeEscapeLexer(c));\n-            } else {\n-                tkn.content.append((char) c);\n-            }\n+        } else if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 interpretUnicodeEscapes \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n+            tkn.content.append((char) unicodeEscapeLexer(c));\n         } else if (isWhitespace(c)) {\n             if (tkn.content.length() \u003e 0) {\n                 wsBuf.append((char) c);\n             }\n         } else {\n             if (wsBuf.length() \u003e 0) {\n                 tkn.content.append(wsBuf);\n                 wsBuf.delete(0, wsBuf.length());\n             }\n             tkn.content.append((char) c);\n         }\n         if (!tkn.isReady) {\n             c \u003d in.read();\n         }\n     }\n     return tkn;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8": {
      "type": "Yfilerename",
      "commitMessage": "repackaging - directory change\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357301 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:42 PM",
      "commitName": "4b5faabefd896ef24b21d7f9d3dc20741f6b89b8",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "12/16/05, 9:41 PM",
      "commitNameOld": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    StringBuffer wsBuf \u003d new StringBuffer();\n    while (!tkn.isReady) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d delimiter) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d \u0027\\\\\u0027) {\n            if (in.lookAhead() \u003d\u003d this.delimiter) {\n                tkn.content.append((char) in.read());\n            } else if (interpretUnicodeEscapes \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n                tkn.content.append((char) unicodeEscapeLexer(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n        } else if (isWhitespace(c)) {\n            if (tkn.content.length() \u003e 0) {\n                wsBuf.append((char) c);\n            }\n        } else {\n            if (wsBuf.length() \u003e 0) {\n                tkn.content.append(wsBuf);\n                wsBuf.delete(0, wsBuf.length());\n            }\n            tkn.content.append((char) c);\n        }\n        if (!tkn.isReady) {\n            c \u003d in.read();\n        }\n    }\n    return tkn;\n}",
      "path": "src/java/org/apache/commons/csv/CSVParser.java",
      "functionStartLine": 405,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java",
        "newPath": "src/java/org/apache/commons/csv/CSVParser.java"
      }
    },
    "e23e79e0ceacf38d3298e7f5207c4518ad2b5955": {
      "type": "Yintroduced",
      "commitMessage": "import of csv parser code, as donated by netcetera [code grant recorded]\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/trunks-sandbox/csv@357300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/16/05, 9:41 PM",
      "commitName": "e23e79e0ceacf38d3298e7f5207c4518ad2b5955",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,37 @@\n+private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n+    StringBuffer wsBuf \u003d new StringBuffer();\n+    while (!tkn.isReady) {\n+        if (isEndOfLine(c)) {\n+            tkn.type \u003d TT_EORECORD;\n+            tkn.isReady \u003d true;\n+        } else if (isEndOfFile(c)) {\n+            tkn.type \u003d TT_EORECORD;\n+            tkn.isReady \u003d true;\n+        } else if (c \u003d\u003d delimiter) {\n+            tkn.type \u003d TT_TOKEN;\n+            tkn.isReady \u003d true;\n+        } else if (c \u003d\u003d \u0027\\\\\u0027) {\n+            if (in.lookAhead() \u003d\u003d this.delimiter) {\n+                tkn.content.append((char) in.read());\n+            } else if (interpretUnicodeEscapes \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n+                tkn.content.append((char) unicodeEscapeLexer(c));\n+            } else {\n+                tkn.content.append((char) c);\n+            }\n+        } else if (isWhitespace(c)) {\n+            if (tkn.content.length() \u003e 0) {\n+                wsBuf.append((char) c);\n+            }\n+        } else {\n+            if (wsBuf.length() \u003e 0) {\n+                tkn.content.append(wsBuf);\n+                wsBuf.delete(0, wsBuf.length());\n+            }\n+            tkn.content.append((char) c);\n+        }\n+        if (!tkn.isReady) {\n+            c \u003d in.read();\n+        }\n+    }\n+    return tkn;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Token simpleTokenLexer(Token tkn, int c) throws IOException {\n    StringBuffer wsBuf \u003d new StringBuffer();\n    while (!tkn.isReady) {\n        if (isEndOfLine(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (isEndOfFile(c)) {\n            tkn.type \u003d TT_EORECORD;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d delimiter) {\n            tkn.type \u003d TT_TOKEN;\n            tkn.isReady \u003d true;\n        } else if (c \u003d\u003d \u0027\\\\\u0027) {\n            if (in.lookAhead() \u003d\u003d this.delimiter) {\n                tkn.content.append((char) in.read());\n            } else if (interpretUnicodeEscapes \u0026\u0026 in.lookAhead() \u003d\u003d \u0027u\u0027) {\n                tkn.content.append((char) unicodeEscapeLexer(c));\n            } else {\n                tkn.content.append((char) c);\n            }\n        } else if (isWhitespace(c)) {\n            if (tkn.content.length() \u003e 0) {\n                wsBuf.append((char) c);\n            }\n        } else {\n            if (wsBuf.length() \u003e 0) {\n                tkn.content.append(wsBuf);\n                wsBuf.delete(0, wsBuf.length());\n            }\n            tkn.content.append((char) c);\n        }\n        if (!tkn.isReady) {\n            c \u003d in.read();\n        }\n    }\n    return tkn;\n}",
      "path": "src/java/ch/netcetera/wake/core/format/csv/CSVParser.java",
      "functionStartLine": 405,
      "functionName": "simpleTokenLexer",
      "functionAnnotation": "",
      "functionDoc": "A simple token lexer\n\nSimple token are tokens which are not surrounded by encapsulators.\nA simple token might contain escaped delimiters (as \\, or \\;). The\ntoken is finished when one of the following conditions become true:\n\u003cul\u003e\n  \u003cli\u003eend of line has been reached (TT_EORECORD)\u003c/li\u003e\n  \u003cli\u003eend of stream has been reached (TT_EOF)\u003c/li\u003e\n  \u003cli\u003ean unescaped delimiter has been reached (TT_TOKEN)\u003c/li\u003e\n\u003c/ul\u003e\n\n@param tkn the current token\n@param c the current character\n@return the filled token\n@throws IOException on stream access error\n"
    }
  }
}