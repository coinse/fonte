{
  "origin": "codeshovel",
  "repositoryName": "Cli-28b",
  "repositoryPath": "/tmp/Cli-28b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Parser.java",
  "functionName": "processArgs",
  "functionId": "processArgs___opt-Option__iter-ListIterator",
  "sourceFilePath": "src/java/org/apache/commons/cli/Parser.java",
  "functionAnnotation": "",
  "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the\nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
  "functionStartLine": 326,
  "functionEndLine": 356,
  "numCommitsSeen": 47,
  "timeTaken": 1473,
  "changeHistory": [
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
    "81fe71619e9e96906d50c4dda64714b62353a2bd",
    "298804b71d4e5f8b621f48a300f421229a3f5c86",
    "97744806d59820b096fb502b1d51ca54b5d0921d",
    "a8a8ec06a85a1090d560dc6cf236663da580863e",
    "cb8c4573aa89c9097d9b91effb66d91e13b4449c",
    "9903ac8576124325025a7219ba15bd51836e942e",
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
    "c0d5c79f572fc44c527e842f94bbbe9e4b12701d",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
    "5470bcaa9d75d73fb9c687fa13e12d642c75984f",
    "347bbeb8f98a49744501ac50850457ba8751d545",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
    "f9df51847e354190206432ba87661586e6dc814d",
    "1060ee73965dc30d92afbad80525bd4cdabe9153",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
    "66d0ae6216730abd8bd736e210be73229c8e807b"
  ],
  "changeHistoryShort": {
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": "Ymultichange(Ybodychange,Ydocchange)",
    "81fe71619e9e96906d50c4dda64714b62353a2bd": "Ybodychange",
    "298804b71d4e5f8b621f48a300f421229a3f5c86": "Ybodychange",
    "97744806d59820b096fb502b1d51ca54b5d0921d": "Ybodychange",
    "a8a8ec06a85a1090d560dc6cf236663da580863e": "Ybodychange",
    "cb8c4573aa89c9097d9b91effb66d91e13b4449c": "Ybodychange",
    "9903ac8576124325025a7219ba15bd51836e942e": "Ybodychange",
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db": "Ybodychange",
    "c0d5c79f572fc44c527e842f94bbbe9e4b12701d": "Ybodychange",
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": "Ymultichange(Ybodychange,Ydocchange)",
    "5470bcaa9d75d73fb9c687fa13e12d642c75984f": "Ybodychange",
    "347bbeb8f98a49744501ac50850457ba8751d545": "Ybodychange",
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": "Ybodychange",
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange)",
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5": "Ybodychange",
    "f9df51847e354190206432ba87661586e6dc814d": "Ybodychange",
    "1060ee73965dc30d92afbad80525bd4cdabe9153": "Ybodychange",
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
    "66d0ae6216730abd8bd736e210be73229c8e807b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "147df44faa4eb12ffd4a0063fc3284f784ea67c8": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/29/08, 1:13 AM",
      "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
      "commitAuthor": "Emmanuel Bourg",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08, 1:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/24/08, 3:25 PM",
          "commitNameOld": "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 4.41,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        }\n        try {\n            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n        } catch (RuntimeException exp) {\n            iter.previous();\n            break;\n        }\n    }\n    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(opt);\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 315,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the\nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
          "diff": "@@ -1,18 +1,18 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         }\n         try {\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n         } catch (RuntimeException exp) {\n             iter.previous();\n             break;\n         }\n     }\n-    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n+    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(opt);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "Style update\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@680644 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "7/29/08, 1:13 AM",
          "commitName": "147df44faa4eb12ffd4a0063fc3284f784ea67c8",
          "commitAuthor": "Emmanuel Bourg",
          "commitDateOld": "7/24/08, 3:25 PM",
          "commitNameOld": "0a8de54ff89093fc8c5a2b00f7c0c856c5cbe57d",
          "commitAuthorOld": "Emmanuel Bourg",
          "daysBetweenCommits": 4.41,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        }\n        try {\n            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n        } catch (RuntimeException exp) {\n            iter.previous();\n            break;\n        }\n    }\n    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(opt);\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 315,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the\nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
          "diff": "@@ -1,18 +1,18 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         }\n         try {\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n         } catch (RuntimeException exp) {\n             iter.previous();\n             break;\n         }\n     }\n-    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n+    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(opt);\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
            "newValue": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the\nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n"
          }
        }
      ]
    },
    "81fe71619e9e96906d50c4dda64714b62353a2bd": {
      "type": "Ybodychange",
      "commitMessage": "MissingArgumentException now references the option with the missing argument\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@678688 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/22/08, 2:17 AM",
      "commitName": "81fe71619e9e96906d50c4dda64714b62353a2bd",
      "commitAuthor": "Emmanuel Bourg",
      "commitDateOld": "7/22/08, 12:55 AM",
      "commitNameOld": "8ee0ed532e4ddbf2746d802f9926b9e3d0116cc5",
      "commitAuthorOld": "Emmanuel Bourg",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        }\n        try {\n            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n        } catch (RuntimeException exp) {\n            iter.previous();\n            break;\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(opt);\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 329,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "@@ -1,18 +1,18 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         }\n         try {\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n         } catch (RuntimeException exp) {\n             iter.previous();\n             break;\n         }\n     }\n     if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n-        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n+        throw new MissingArgumentException(opt);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "298804b71d4e5f8b621f48a300f421229a3f5c86": {
      "type": "Ybodychange",
      "commitMessage": "Applying Henning\u0027s patch to make the Parser more extendable - CLI-142\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/cli/branches/cli-1.x@654429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "5/7/08, 11:43 PM",
      "commitName": "298804b71d4e5f8b621f48a300f421229a3f5c86",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "6/29/07, 12:08 AM",
      "commitNameOld": "97744806d59820b096fb502b1d51ca54b5d0921d",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 313.98,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        }\n        try {\n            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n        } catch (RuntimeException exp) {\n            iter.previous();\n            break;\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 338,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "@@ -1,18 +1,18 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n-        if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n+        if (getOptions().hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         }\n         try {\n             opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n         } catch (RuntimeException exp) {\n             iter.previous();\n             break;\n         }\n     }\n     if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "97744806d59820b096fb502b1d51ca54b5d0921d": {
      "type": "Ybodychange",
      "commitMessage": "Applying the patch from CLI-135 to put the public addValue method back, even though it just throws an exception. This maintains binary compatibility, for some level of compatibility. \n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/branches/cli-1.0.x@551815 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "6/29/07, 12:08 AM",
      "commitName": "97744806d59820b096fb502b1d51ca54b5d0921d",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "6/4/07, 9:01 PM",
      "commitNameOld": "f78959477b207bf710049aa35730ef7659f0a1b9",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 24.13,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        }\n        try {\n            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n        } catch (RuntimeException exp) {\n            iter.previous();\n            break;\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 325,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "@@ -1,18 +1,18 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         }\n         try {\n-            opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n+            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n         } catch (RuntimeException exp) {\n             iter.previous();\n             break;\n         }\n     }\n     if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a8a8ec06a85a1090d560dc6cf236663da580863e": {
      "type": "Ybodychange",
      "commitMessage": "Lots of minor refactoring and tidying to avoid compiler warnings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@155293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2/24/05, 7:21 PM",
      "commitName": "a8a8ec06a85a1090d560dc6cf236663da580863e",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "12/27/04, 6:35 AM",
      "commitNameOld": "1314233dde6b3f73c888fe4274e45d654b7639aa",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 59.53,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        }\n        try {\n            opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n        } catch (RuntimeException exp) {\n            iter.previous();\n            break;\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 314,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "@@ -1,19 +1,18 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n             iter.previous();\n             break;\n-        } else {\n-            try {\n-                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n-            } catch (RuntimeException exp) {\n-                iter.previous();\n-                break;\n-            }\n+        }\n+        try {\n+            opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n+        } catch (RuntimeException exp) {\n+            iter.previous();\n+            break;\n         }\n     }\n     if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cb8c4573aa89c9097d9b91effb66d91e13b4449c": {
      "type": "Ybodychange",
      "commitMessage": "Recommitted with the fix applied not commented out (whoops)\nPR: 25044\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130110 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/27/04, 5:21 AM",
      "commitName": "cb8c4573aa89c9097d9b91effb66d91e13b4449c",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "12/27/04, 5:11 AM",
      "commitNameOld": "9903ac8576124325025a7219ba15bd51836e942e",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            try {\n                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n            } catch (RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 314,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "@@ -1,19 +1,19 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n-        if (options.hasOption(str)) {\n+        if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         } else {\n             try {\n                 opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n             } catch (RuntimeException exp) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n     if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9903ac8576124325025a7219ba15bd51836e942e": {
      "type": "Ybodychange",
      "commitMessage": "Parser now correctly allows option arguments to be the same as other options, less the initial \u0027-\u0027.  E.g. with options -a, the value \u0027a\u0027 is now allowed.\nAlso corrected typo in test: testNoCyclesPresnet().\n\nPR: 25044\nSubmitted by:\tDavid Morris\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130109 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/27/04, 5:11 AM",
      "commitName": "9903ac8576124325025a7219ba15bd51836e942e",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "4/22/04, 4:00 PM",
      "commitNameOld": "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
      "commitAuthorOld": "Robert James Oxspring",
      "daysBetweenCommits": 248.59,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str)) {\n            iter.previous();\n            break;\n        } else {\n            try {\n                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n            } catch (RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 314,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db": {
      "type": "Ybodychange",
      "commitMessage": "Merged RESEARCH_CLI_2_ROXSPRING branch back to HEAD\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@130066 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "4/22/04, 4:00 PM",
      "commitName": "8f95e4a724350f9f80429c2af1c3ac9bb2b2c2db",
      "commitAuthor": "Robert James Oxspring",
      "commitDateOld": "2/29/04, 8:30 AM",
      "commitNameOld": "213c137b7515e71abf006611d8927b4fa68bd62b",
      "commitAuthorOld": "Yoav Shapira",
      "daysBetweenCommits": 53.27,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str)) {\n            iter.previous();\n            break;\n        } else {\n            try {\n                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n            } catch (RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 314,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "@@ -1,19 +1,19 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (options.hasOption(str)) {\n             iter.previous();\n             break;\n         } else {\n             try {\n                 opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n             } catch (RuntimeException exp) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n     if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n-        throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n+        throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c0d5c79f572fc44c527e842f94bbbe9e4b12701d": {
      "type": "Ybodychange",
      "commitMessage": "removed the leading and trailing spaces from multi token option values\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "1/17/03, 12:00 PM",
      "commitName": "c0d5c79f572fc44c527e842f94bbbe9e4b12701d",
      "commitAuthor": "John Keyes",
      "commitDateOld": "12/9/02, 3:47 PM",
      "commitNameOld": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 38.84,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str)) {\n            iter.previous();\n            break;\n        } else {\n            try {\n                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n            } catch (RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 359,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
      "diff": "@@ -1,19 +1,19 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (options.hasOption(str)) {\n             iter.previous();\n             break;\n         } else {\n             try {\n-                opt.addValue(str);\n+                opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n             } catch (RuntimeException exp) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n     if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9b2b8038b52be022e42c8c7fdf26e236888f94c5": {
      "type": "Ymultichange(Ybodychange,Ydocchange)",
      "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/9/02, 3:47 PM",
      "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/27/02, 3:22 PM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str)) {\n            iter.previous();\n            break;\n        } else {\n            try {\n                opt.addValue(str);\n            } catch (RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 359,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
          "diff": "@@ -1,19 +1,19 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (options.hasOption(str)) {\n             iter.previous();\n             break;\n         } else {\n             try {\n                 opt.addValue(str);\n             } catch (RuntimeException exp) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n-    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n+    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "checkstyle fixes\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129857 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/9/02, 3:47 PM",
          "commitName": "9b2b8038b52be022e42c8c7fdf26e236888f94c5",
          "commitAuthor": "John Keyes",
          "commitDateOld": "11/27/02, 3:22 PM",
          "commitNameOld": "be7dfa5b0a0e0bf609ac77ae45aeb2c3287ad453",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 12.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str)) {\n            iter.previous();\n            break;\n        } else {\n            try {\n                opt.addValue(str);\n            } catch (RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 359,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n",
          "diff": "@@ -1,19 +1,19 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (options.hasOption(str)) {\n             iter.previous();\n             break;\n         } else {\n             try {\n                 opt.addValue(str);\n             } catch (RuntimeException exp) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n-    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n+    if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "\u003cp\u003eProcess the argument values for the specified Option\n\u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the \nspecified iterator \u003ccode\u003eiter\u003c/code\u003e.\n\n@param opt The current Option\n@param iter The iterator over the flattened command line\nOptions.\n@throws ParseException if an argument value is required\nand it is has not been found.\n"
          }
        }
      ]
    },
    "5470bcaa9d75d73fb9c687fa13e12d642c75984f": {
      "type": "Ybodychange",
      "commitMessage": "fix bug 14786, some refactorings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/25/02, 3:43 PM",
      "commitName": "5470bcaa9d75d73fb9c687fa13e12d642c75984f",
      "commitAuthor": "John Keyes",
      "commitDateOld": "11/18/02, 12:41 AM",
      "commitNameOld": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 7.63,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str)) {\n            iter.previous();\n            break;\n        } else {\n            try {\n                opt.addValue(str);\n            } catch (RuntimeException exp) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 289,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,19 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n         String str \u003d (String) iter.next();\n         if (options.hasOption(str)) {\n             iter.previous();\n             break;\n-        } else if (!opt.addValue(str)) {\n-            iter.previous();\n-            break;\n+        } else {\n+            try {\n+                opt.addValue(str);\n+            } catch (RuntimeException exp) {\n+                iter.previous();\n+                break;\n+            }\n         }\n     }\n     if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "347bbeb8f98a49744501ac50850457ba8751d545": {
      "type": "Ybodychange",
      "commitMessage": "refactored the option string handling, added property support for options with an argument value\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129846 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/18/02, 12:41 AM",
      "commitName": "347bbeb8f98a49744501ac50850457ba8751d545",
      "commitAuthor": "John Keyes",
      "commitDateOld": "10/24/02, 4:17 PM",
      "commitNameOld": "436ef8b2ff7381e797436fc50d087d70b8032f40",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 24.39,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String str \u003d (String) iter.next();\n        if (options.hasOption(str)) {\n            iter.previous();\n            break;\n        } else if (!opt.addValue(str)) {\n            iter.previous();\n            break;\n        }\n    }\n    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 289,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,15 +1,15 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     while (iter.hasNext()) {\n-        String var \u003d (String) iter.next();\n-        if (options.hasOption(var)) {\n+        String str \u003d (String) iter.next();\n+        if (options.hasOption(str)) {\n             iter.previous();\n             break;\n-        } else if (!opt.addValue(var)) {\n+        } else if (!opt.addValue(str)) {\n             iter.previous();\n             break;\n         }\n     }\n     if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n-        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n+        throw new MissingArgumentException(\"no argument for:\" + opt.getKey());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "62670f565aa434b6cb614c1054a8ea5bc3715f25": {
      "type": "Ybodychange",
      "commitMessage": "fixed bug 13425, added argName support, fixed some bugs in the HelpFormatter\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129819 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/8/02, 2:24 PM",
      "commitName": "62670f565aa434b6cb614c1054a8ea5bc3715f25",
      "commitAuthor": "John Keyes",
      "commitDateOld": "9/19/02, 3:59 PM",
      "commitNameOld": "c08f73835beda155421d78ee4f96d9e11c501159",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 18.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (options.hasOption(var)) {\n            iter.previous();\n            break;\n        } else if (!opt.addValue(var)) {\n            iter.previous();\n            break;\n        }\n    }\n    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n}",
      "path": "src/java/org/apache/commons/cli/Parser.java",
      "functionStartLine": 219,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,15 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n-    if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n-        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n-    }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n         if (options.hasOption(var)) {\n             iter.previous();\n             break;\n-        } else {\n-            if (!opt.addValue(var)) {\n-                iter.previous();\n-                break;\n-            }\n+        } else if (!opt.addValue(var)) {\n+            iter.previous();\n+            break;\n         }\n     }\n+    if (opt.getValues() \u003d\u003d null \u0026\u0026 !opt.hasOptionalArg()) {\n+        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n+    }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Ydocchange)",
      "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/24/02, 3:15 PM",
      "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (options.hasOption(var)) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 96,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,17 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n     }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n-        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n+        if (options.hasOption(var)) {\n             iter.previous();\n             break;\n         } else {\n             if (!opt.addValue(var)) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/commons/cli/PosixParser.java",
            "newPath": "src/java/org/apache/commons/cli/Parser.java",
            "oldMethodName": "processArgs",
            "newMethodName": "processArgs"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (options.hasOption(var)) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 96,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,17 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n     }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n-        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n+        if (options.hasOption(var)) {\n             iter.previous();\n             break;\n         } else {\n             if (!opt.addValue(var)) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "separated the argument flattening from the Option processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129804 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/24/02, 3:15 PM",
          "commitName": "dde69934d7f0bee13e4cd1fc99a7d60ce95a0c78",
          "commitAuthor": "John Keyes",
          "commitDateOld": "8/18/02, 12:07 PM",
          "commitNameOld": "04490af06faa8fd1be15da88172beb32218dd336",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 6.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (options.hasOption(var)) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/Parser.java",
          "functionStartLine": 96,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,17 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n     }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n-        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n+        if (options.hasOption(var)) {\n             iter.previous();\n             break;\n         } else {\n             if (!opt.addValue(var)) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n",
            "newValue": ""
          }
        }
      ]
    },
    "4fbf5978d9473a2504a554cbe53dc29c49dd67b5": {
      "type": "Ybodychange",
      "commitMessage": "bug no. 11456 - optional argument values implemented\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129801 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/15/02, 3:05 PM",
      "commitName": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/14/02, 3:27 PM",
      "commitNameOld": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 283,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n",
      "diff": "@@ -1,17 +1,17 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n-    if (!iter.hasNext()) {\n+    if (!iter.hasNext() \u0026\u0026 !opt.hasOptionalArg()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n     }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n         if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         } else {\n             if (!opt.addValue(var)) {\n                 iter.previous();\n                 break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f9df51847e354190206432ba87661586e6dc814d": {
      "type": "Ybodychange",
      "commitMessage": "iterator for all Option instances parsed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129799 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/14/02, 3:27 PM",
      "commitName": "f9df51847e354190206432ba87661586e6dc814d",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/4/02, 4:04 PM",
      "commitNameOld": "1060ee73965dc30d92afbad80525bd4cdabe9153",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 304,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n",
      "diff": "@@ -1,33 +1,17 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     if (!iter.hasNext()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n     }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n         if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         } else {\n-            char sep \u003d opt.getValueSeparator();\n-            if (sep \u003e 0) {\n-                int findex;\n-                while ((findex \u003d var.indexOf(sep)) !\u003d -1) {\n-                    String val \u003d var.substring(0, findex);\n-                    var \u003d var.substring(findex + 1);\n-                    if (!opt.addValue(val)) {\n-                        iter.previous();\n-                        return;\n-                    }\n-                }\n-                if (!opt.addValue(var)) {\n-                    iter.previous();\n-                    return;\n-                }\n-                ;\n-            } else if (!opt.addValue(var)) {\n+            if (!opt.addValue(var)) {\n                 iter.previous();\n-                return;\n+                break;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1060ee73965dc30d92afbad80525bd4cdabe9153": {
      "type": "Ybodychange",
      "commitMessage": "bug 11458 fixed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129796 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/4/02, 4:04 PM",
      "commitName": "1060ee73965dc30d92afbad80525bd4cdabe9153",
      "commitAuthor": "John Keyes",
      "commitDateOld": "8/3/02, 4:45 PM",
      "commitNameOld": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthorOld": "John Keyes",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            char sep \u003d opt.getValueSeparator();\n            if (sep \u003e 0) {\n                int findex;\n                while ((findex \u003d var.indexOf(sep)) !\u003d -1) {\n                    String val \u003d var.substring(0, findex);\n                    var \u003d var.substring(findex + 1);\n                    if (!opt.addValue(val)) {\n                        iter.previous();\n                        return;\n                    }\n                }\n                if (!opt.addValue(var)) {\n                    iter.previous();\n                    return;\n                }\n                ;\n            } else if (!opt.addValue(var)) {\n                iter.previous();\n                return;\n            }\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 292,
      "functionName": "processArgs",
      "functionAnnotation": "",
      "functionDoc": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n",
      "diff": "@@ -1,17 +1,33 @@\n public void processArgs(Option opt, ListIterator iter) throws ParseException {\n     if (!iter.hasNext()) {\n         throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n     }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n         if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         } else {\n-            if (!opt.addValue(var)) {\n+            char sep \u003d opt.getValueSeparator();\n+            if (sep \u003e 0) {\n+                int findex;\n+                while ((findex \u003d var.indexOf(sep)) !\u003d -1) {\n+                    String val \u003d var.substring(0, findex);\n+                    var \u003d var.substring(findex + 1);\n+                    if (!opt.addValue(val)) {\n+                        iter.previous();\n+                        return;\n+                    }\n+                }\n+                if (!opt.addValue(var)) {\n+                    iter.previous();\n+                    return;\n+                }\n+                ;\n+            } else if (!opt.addValue(var)) {\n                 iter.previous();\n-                break;\n+                return;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "16b91ad2b9f5f524b2b07ba4515c65479999f7ee": {
      "type": "Ymultichange(Yrename,Yexceptionschange,Ybodychange)",
      "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "8/3/02, 4:45 PM",
      "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
      "commitAuthor": "John Keyes",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/3/02, 4:45 PM",
          "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
          "commitAuthor": "John Keyes",
          "commitDateOld": "7/4/02, 3:32 PM",
          "commitNameOld": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 30.05,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 274,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n",
          "diff": "@@ -1,11 +1,17 @@\n-public void processMultipleArgs(Option opt, ListIterator iter) {\n+public void processArgs(Option opt, ListIterator iter) throws ParseException {\n+    if (!iter.hasNext()) {\n+        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n+    }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n-        if (var.startsWith(\"-\")) {\n+        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         } else {\n-            opt.addValue(var);\n+            if (!opt.addValue(var)) {\n+                iter.previous();\n+                break;\n+            }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "processMultipleArgs",
            "newValue": "processArgs"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/3/02, 4:45 PM",
          "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
          "commitAuthor": "John Keyes",
          "commitDateOld": "7/4/02, 3:32 PM",
          "commitNameOld": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 30.05,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 274,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n",
          "diff": "@@ -1,11 +1,17 @@\n-public void processMultipleArgs(Option opt, ListIterator iter) {\n+public void processArgs(Option opt, ListIterator iter) throws ParseException {\n+    if (!iter.hasNext()) {\n+        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n+    }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n-        if (var.startsWith(\"-\")) {\n+        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         } else {\n-            opt.addValue(var);\n+            if (!opt.addValue(var)) {\n+                iter.previous();\n+                break;\n+            }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ParseException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "its now possible to specify the number of argument values an option can have, refactored parsers argument value handling, refactored argument handling in Option, added getOptions method on CommandLine to return an array of the processed Options\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "8/3/02, 4:45 PM",
          "commitName": "16b91ad2b9f5f524b2b07ba4515c65479999f7ee",
          "commitAuthor": "John Keyes",
          "commitDateOld": "7/4/02, 3:32 PM",
          "commitNameOld": "66d0ae6216730abd8bd736e210be73229c8e807b",
          "commitAuthorOld": "John Keyes",
          "daysBetweenCommits": 30.05,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "actualSource": "public void processArgs(Option opt, ListIterator iter) throws ParseException {\n    if (!iter.hasNext()) {\n        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n    }\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            if (!opt.addValue(var)) {\n                iter.previous();\n                break;\n            }\n        }\n    }\n}",
          "path": "src/java/org/apache/commons/cli/PosixParser.java",
          "functionStartLine": 274,
          "functionName": "processArgs",
          "functionAnnotation": "",
          "functionDoc": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n",
          "diff": "@@ -1,11 +1,17 @@\n-public void processMultipleArgs(Option opt, ListIterator iter) {\n+public void processArgs(Option opt, ListIterator iter) throws ParseException {\n+    if (!iter.hasNext()) {\n+        throw new MissingArgumentException(\"no argument for:\" + opt.getOpt());\n+    }\n     while (iter.hasNext()) {\n         String var \u003d (String) iter.next();\n-        if (var.startsWith(\"-\")) {\n+        if (!var.equals(\"-\") \u0026\u0026 var.startsWith(\"-\")) {\n             iter.previous();\n             break;\n         } else {\n-            opt.addValue(var);\n+            if (!opt.addValue(var)) {\n+                iter.previous();\n+                break;\n+            }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "66d0ae6216730abd8bd736e210be73229c8e807b": {
      "type": "Yintroduced",
      "commitMessage": "implemented the parser factory, added new unit tests for the GnuParser, a good deal of refactoring for both parsers\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/cli/trunk@129778 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "7/4/02, 3:32 PM",
      "commitName": "66d0ae6216730abd8bd736e210be73229c8e807b",
      "commitAuthor": "John Keyes",
      "diff": "@@ -0,0 +1,11 @@\n+public void processMultipleArgs(Option opt, ListIterator iter) {\n+    while (iter.hasNext()) {\n+        String var \u003d (String) iter.next();\n+        if (var.startsWith(\"-\")) {\n+            iter.previous();\n+            break;\n+        } else {\n+            opt.addValue(var);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void processMultipleArgs(Option opt, ListIterator iter) {\n    while (iter.hasNext()) {\n        String var \u003d (String) iter.next();\n        if (var.startsWith(\"-\")) {\n            iter.previous();\n            break;\n        } else {\n            opt.addValue(var);\n        }\n    }\n}",
      "path": "src/java/org/apache/commons/cli/PosixParser.java",
      "functionStartLine": 282,
      "functionName": "processMultipleArgs",
      "functionAnnotation": "",
      "functionDoc": "It the option can accept multiple argument values then\nkeep adding values until the next option token is encountered.\n\n@param opt the specified option\n@param iter the iterator over the command line tokens\n"
    }
  }
}